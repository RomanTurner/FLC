window.COURSE_DATA = {"language":"en","lastDownload":"2021-07-06T11:58:32-04:00","title":"Phase 0 - Pre-work","modules":[{"id":16897,"name":"Welcome to the Course","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g55dcc9f9af27e8925ceb4020f5d3cc89","items":[{"id":157704,"title":"Welcome","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-flatiron-school-philosophy\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-flatiron-school-philosophy\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-flatiron-school-philosophy/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eWelcome to Flatiron School! We're thrilled that you've joined our community of learners! \u003c/p\u003e  \u003cp\u003eThe following content is designed for people who are passionate, curious, self-driven, and serious about learning. We are comrades in a never-ending quest for knowledge. While there are no shortcuts, we believe that by providing knowledge in an optimized order, reinforcing knowledge with hands-on, feedback driven practice, and providing space for discussion, you will learn quickly. Our goal is to provide the right materials, support and structure \u003cem\u003eyou\u003c/em\u003e need to discover your own love for code.\u003c/p\u003e  \u003ch2\u003eLearning to Write Code\u003c/h2\u003e  \u003cp\u003eThis is the beginning of our Software Engineering course, where you will go through everything from the basics of coding to building full-stack React web applications.\u003c/p\u003e  \u003cp\u003eSo, where do we start? How do we know what is necessary to understand \u003cem\u003efirst?\u003c/em\u003e In this course, we're going to start with a simple idea - programming is like having a conversation, and just like learning to talk, we need to start by learning a few words and practicing them.\u003c/p\u003e  \u003cp\u003eMany people on joining Flatiron School have already spent some time dabbling with coding by using the amazing and plentiful resources all around the internet. In developing the content here, though, we make no assumptions. This content is designed for absolute beginners. Lessons build off each other, providing the tools and concepts necessary to complete future lessons.\u003c/p\u003e  \u003cp\u003eWhat we don't do, however, is dumb anything down. We believe in your infinite capacity to learn. We do our best to offer a curriculum that is clear, digestible, engaging, challenging, and deep. The curriculum you'll encounter on here is rigorous and will demand that you be patient and resourceful.\u003c/p\u003e  \u003ch2\u003eThe Flatiron Community\u003c/h2\u003e  \u003cp\u003eWe don't believe in learning alone. As you make progress, expect to bump into other learners just like you, ready and willing to help each other succeed. Together, we can go further than we could ever go alone. We expect everyone here to be friendly, respectful, helpful, and nice.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThe first part of this course will focus on getting your computer set up  with the tools and software necessary for the rest of the curriculum. Then, we will introduce some fundamental programming concepts. As you progress, you'll start to use the tools on your personal computer to build projects and test your knowledge. You're just getting started, and we're glad you're here.\u003c/p\u003e  \u003cp\u003eHappy Learning!\u003c/p\u003e","exportId":"welcome"},{"id":157706,"title":"About This Course","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-about-this-course\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-about-this-course\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-about-this-course/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eWelcome\u003c/h2\u003e  \u003cp\u003eThis is the beginning of Flatiron School's Software Engineering and Web Development Courses. Before we dive into the core topics of these courses, we need to cover some fundamental topics and make sure you are fully equipped  for success.\u003c/p\u003e  \u003cp\u003eFirst, we need to get your computer (your \u003cem\u003elocal environment\u003c/em\u003e) set up for writing and running code in JavaScript and Ruby. You'll be running code via a terminal on your computer, so we'll also go through the basics of the command-line interface.\u003c/p\u003e  \u003cp\u003eAfter this, we'll introduce Git, GitHub and the concept of version control, essential for storing your programming work in this course and beyond.\u003c/p\u003e  \u003cp\u003eWith these topics covered, we will dive into the technologies behind every modern website - HTML, CSS and JavaScript. These three are best understood in conjunction, so the goal is to introduce just enough of each that you will be able to use them together. When you can, you'll have all the skills needed to build a website entirely from scratch.\u003c/p\u003e  \u003cp\u003eAt the end, your final task is to do just that - build and publish your own website!\u003c/p\u003e","exportId":"about-this-course"},{"id":157707,"title":"How to Get Help","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-how-to-get-help\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-how-to-get-help\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-how-to-get-help/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eKnow how to get help\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe don't believe in learning alone. As you make progress, expect to bump into other learners just like you, ready and willing to help each other succeed. Together, we can go further than we could ever go alone. Remember, you are going to get stuck sometimes! As with any new skill you learn, coding can be difficult and frustrating. After a certain point, being stuck on a problem becomes counterproductive - you’re stuck and you need help getting unstuck!\u003c/p\u003e  \u003cp\u003eIf you get stuck following the instructions or grasping a coding concept, there are a few things you can do. In this lesson, we'll look at some of the options available.\u003c/p\u003e  \u003ch2\u003eTry Troubleshooting First\u003c/h2\u003e  \u003cp\u003eTroubleshooting is a critical skill for all programmers and spending time now to get better at it is time well spent. Improving your ability to troubleshoot will provide a great return on your investment as you'll be able to get yourself unstuck and learn how to better approach issues. Whenever possible, try to troubleshoot your issue independently first before seeking help.\u003c/p\u003e  \u003cp\u003eMost issues you'll encounter are error messages in your terminal. A few things to keep in mind about error messages:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eNot all error messages are equal. Some messages are just warnings. For example, if you install a tool and it works, but produces an error when run - something is wrong, but it shouldn't be a \u003cem\u003eblocker\u003c/em\u003e for you completing work.\u003c/li\u003e \u003cli\u003eError messages often provide clues into what may be going wrong. Often, our first inclination when faced with an error message is to \u003cem\u003eflee\u003c/em\u003e. We see some incomprehensible output and immediately want to do something else. \u003cstrong\u003eDon't do this. Read the error!\u003c/strong\u003e We'll come back to this with specific examples later on in the course.\u003c/li\u003e \u003cli\u003eCarefully check your spelling and syntax if you receive errors running commands or code.\u003c/li\u003e \u003cli\u003eGetting a different error message after trying something is often \u003cem\u003egood\u003c/em\u003e. A new message can give some indication as to what is working and what isn't.\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eUse the Resources Available to You\u003c/h3\u003e  \u003cp\u003eSometimes, common issues are noted in lesson materials. Other times, errors occur when an essential step is missed. For these reasons, we recommend reviewing the resources available to you through Flatiron School:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eRe-read the lesson you're on thoroughly to make sure you’re not missing relevant details\u003c/li\u003e \u003cli\u003eReview previous lessons that may apply to the error or issue you’re experiencing, retracing your steps\u003c/li\u003e \u003cli\u003eCheck out \u003ca href=\"https://help.learn.co\"\u003eFlatiron School's help articles\u003c/a\u003e - these articles include advice and answers to frequently asked questions from the Flatiron School Team.\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eUse External Resources\u003c/h3\u003e  \u003cp\u003eIf you can't find a solution in the internal resources, the best next step is often to turn to Google. Some things to note regarding searching:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHow you search yields different results, so it's worth attempting a few slightly different searches.\u003c/li\u003e \u003cli\u003eCopying and pasting an error message is a great thing to search first. Try to identify the main part of an error message, often around the beginning or end.\u003c/li\u003e \u003cli\u003eRefine your search based on the results you're getting. Sometimes, you may need to be more specific (i.e. you're using a Mac and need to specify because all search results are referring to Windows). Sometimes, being too specific will yield too few results. Avoid copying anything that may be specific to your system, such as a username.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eWhen looking through solutions on the internet, always be very careful of commands that alter system files. If you see a command you're not familiar with, you can always google \u003cem\u003ethat\u003c/em\u003e command to better understand what it does before running it.\u003c/p\u003e  \u003cp\u003eEven if you aren't able to find an answer on your own, taking the time to try the options above can help you clarify the question you're asking and eliminate unsuccessful solutions to the problem. Troubleshooting on your own means that when you \u003cem\u003edo\u003c/em\u003e reach out, you'll be able to ask better, more specific questions.\u003c/p\u003e  \u003ch2\u003eReach Out via Slack\u003c/h2\u003e  \u003cp\u003eThere is a good chance that fellow students have encountered similar challenges to yours. Use the Slack channels available to you to get help:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eYou can post in any public channel (e.g., #general)\u003c/li\u003e \u003cli\u003eShortly before you start with a cohort you will be given access to a cohort-specific Slack channel\u003c/li\u003e \u003cli\u003eWhile you're completing the prework, you can post questions in the #js-prework-support channel. There will be other students there who may be able to help, and this channel is also staffed by Flatiron School instructors from 9am to 9pm eastern time, Monday through Friday.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eEqually, if you find someone else asking a question on Slack that you can  provide insight on, please do! One of the best ways to confirm your own  understanding of a concept is to try and help someone else understand it.\u003c/p\u003e  \u003ch2\u003eAttend Support Meetings\u003c/h2\u003e  \u003cp\u003eFlatiron runs reoccurring meetings every week. Use these meetings to get help! Also, keep an eye out in Slack for messages regarding additional meetings and study sessions.\u003c/p\u003e  \u003ciframe style=\"border: 0;\" src=\"https://calendar.google.com/calendar/embed?src=c_mcnbnls2uhbisql1i8fo36um24%40group.calendar.google.com\u0026amp;ctz=America%2FNew_York\" width=\"800\" height=\"600\"\u003e\u003c/iframe\u003e","exportId":"how-to-get-help"}]},{"id":16899,"name":"Intro to Canvas","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g7a1f1ef5e3beef8b53a432c76cf2ed3f","items":[{"id":157713,"title":"Introduction To Canvas","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"welcome-intro-to-canvas\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-intro-to-canvas\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-intro-to-canvas/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eCanvas is a learning platform used by universities and educational institutions across the country and the world. Flatiron School uses Canvas to deliver all curriculum content for your program.\u003c/p\u003e  \u003cp\u003eCanvas is where all official Flatiron School communication, assignment submission, grading, attendance, etc. will take place for the entirety of your course. You should check Canvas multiple times a day for updates, announcements, assignments, and the day's schedule. Canvas hosts many features which you will become familiar with over the course of your time with Flatiron School. The following lessons will introduce you to and explain some of these most important functions. You can also download the Canvas app from the App Store.\u003c/p\u003e","exportId":"introduction-to-canvas"},{"id":157714,"title":"Navigating Canvas","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"welcome-your-dashboard-navigation-and-sidebar\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/welcome-your-dashboard-navigation-and-sidebar/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-your-dashboard-navigation-and-sidebar\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-your-dashboard-navigation-and-sidebar/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/PVfkFD45hL0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003e\u003cstrong\u003eDashboard\u003c/strong\u003e - the first thing you see when you log into Canvas, the Dashboard\ngives a high level view of the courses in which you're enrolled. Your instructor\nwill release new courses as you go through the program.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eGlobal Navigation\u003c/strong\u003e - static menu on the left side of the page and accessible\nfrom any page on Canvas, the Global Navigation gives you direct access to your\ncourses and other information in Canvas.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eSidebar\u003c/strong\u003e - found within each course, the Sidebar houses various features that\nallow access to the course materials.\u003c/p\u003e\n\n\u003cp\u003eView the video tutorial for more information on how to use Canvas effectively.\u003c/p\u003e","exportId":"navigating-canvas"},{"id":157715,"title":"Lesson Types","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"welcome-courses-modules-assignments\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/welcome-courses-modules-assignments/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-courses-modules-assignments\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-courses-modules-assignments/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eCOURSES\u003c/h2\u003e\n\n\u003cp\u003eYour Flatiron School program is broken up into courses. Each course represents a\nsection of our core curriculum.\u003c/p\u003e\n\n\u003ch2\u003eMODULES\u003c/h2\u003e\n\n\u003cp\u003eFlatiron School organizes content within courses by breaking them up into\nmodules.  The modules will control the entire flow of the course and within them\nyou'll find all your lessons, labs, assignments, and quizzes for the course.\nModules can be filled with different types of content:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003ePage:\u003c/strong\u003e a page of content to read\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eDiscussion:\u003c/strong\u003e a course discussion in which teachers and students can\nactively participate\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eQuiz:\u003c/strong\u003e a course quiz\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eAssignment:\u003c/strong\u003e a course assignment\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eLink or External Tool:\u003c/strong\u003e an external link or tool to view information\noutside of the course\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eFile:\u003c/strong\u003e a file to download or view\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou may be required to perform certain actions to complete a module.\nRequirements may include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eView:\u003c/strong\u003e You must view the item.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eMark as done:\u003c/strong\u003e You must mark the module item as done before you can\nprogress to the next item.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eContribute:\u003c/strong\u003e You must post a reply to the discussion topic or contribute\ncontent to a page.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eSubmit:\u003c/strong\u003e You must submit the assignment, graded discussion, or quiz.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eScore at least X points:\u003c/strong\u003e You must submit the assignment with a minimum\nof the shown score.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can find the 'Modules' button on the Sidebar on the left hand side within\neach course.\u003c/p\u003e\n\n\u003ch2\u003eASSIGNMENTS\u003c/h2\u003e\n\n\u003cp\u003eWhile the module controls the flow of the entire course, you can also access a\nrunning list of your course assignments via the 'Assignments' button on your\nSidebar in the left hand side within the course.  \u003c/p\u003e\n\n\u003cp\u003eBy default, assignments are grouped by overdue assignments, upcoming\nassignments, undated assignments, and past assignments.\u003c/p\u003e\n\n\u003cp\u003eEach assignment includes an icon designating where it's an assignment,\ndiscussion, or quiz and will also display availability dates, due dates, and the\nnumber of points the assignment is worth.\u003c/p\u003e\n\n\u003cp\u003eYou can find the 'Assignments' button on the Sidebar on the left hand side\nwithin each course.\u003c/p\u003e","exportId":"lesson-types"},{"id":173714,"title":"Introduction to the Local Environment Setup Instructions","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-environment-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-environment-intro/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-environment-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-environment-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eWe believe that it's important for each student to have confidence in creating code on their own computers. Many of our lessons also include feedback in the form of code tests - these will only run in an environment set up for JavaScript and Ruby. For these reasons, we ask students to set up their local environments as early as possible. The next set of lessons will walk through the installing and configuring the tools you'll need. Separate instructions are provided for Mac and Windows users, and an alternative environment setup is also provided if you run into any issues setting up your local machine.\u003c/p\u003e  \u003cp\u003eLocal environment setup may take anywhere from 1 to 4 hours total depending on how fast your computer is and your internet speeds. As you have time throughout the week, try to install each of the tools and technologies listed in the setup instructions and write down any issues that you run into. It is okay to install the programs over the course of a few days. \u003c/p\u003e  \u003cp\u003eIf you encounter consistent issues while setting up your local environment, the alternative environment can be used temporarily so you can continue working through the beginning of this course.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: If you are using a Mac then you will work through the steps in the \u003cstrong\u003eMacOS Environment Setup\u003c/strong\u003e module and ignore the Windows set up. If you will be using a Windows-based PC then you can skip past the Mac set up and work through the steps in the \u003cstrong\u003eWindows Environment Setup\u003c/strong\u003e module.\u003c/p\u003e \u003c/blockquote\u003e","exportId":"introduction-to-the-local-environment-setup-instructions"}]},{"id":16901,"name":"MacOS Environment Setup","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g1b84ae4fd0a92c1482ed1a53f6803bca","items":[{"id":157721,"title":"Introduction to MacOS Environment Setup","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003cp\u003eIn this module, we will walk through the process of setting up your macOS local development environment.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are not using a Mac computer for this course, skip the lessons in this module.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eBrief History\u003c/h2\u003e\n\u003ch3\u003eUnderstanding Environments\u003c/h3\u003e\n\u003cp\u003eA \u003cstrong\u003esoftware environment\u003c/strong\u003e describes the set of tools that work together to enable you to develop and execute the code that you write. Environments typically include the operating system, databases, programming languages, and related tools like text editors or browsers.\u003c/p\u003e\n\u003ch3\u003eComparing Environments with Machines\u003c/h3\u003e\n\u003cp\u003eYou may hear us use the term \"software environment\" and \"machine\" to mean similar things. A \u003cstrong\u003emachine\u003c/strong\u003e describes the physical hardware that your software environment runs on. You'll hear the term machine and computer used interchangeably. Different machines (like PCs and Macs) use different hardware to run the programs that they use. Differences in those machines mean that setting up your development environment on one type of machine could look much different than setting it up on another.\u003c/p\u003e\n\u003ch3\u003emacOS Operating System\u003c/h3\u003e\n\u003cp\u003eTo work around some of the differences between machines, and specifically between operating systems, we recommend that all students whose computers come pre-installed with the Windows operating system use a tool called \u003cstrong\u003eWindows Subsystem for Linux (WSL)\u003c/strong\u003e. Windows Subsystem for Linux provides a Linux-based environment for interfacing with and developing on a Windows operating system.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003emacOS\u003c/strong\u003e is a UNIX-based operating system. UNIX-based operating systems are very commonly used in professional software engineering settings. Learning how to use a UNIX-based operating system will be valuable for your future software engineering career. You may have heard of other UNIX-based operating systems like Ubuntu, Debian, or Fedora, which include the Linux kernel (core software). These types of operating systems work similarly.\u003c/p\u003e\n\u003ch3\u003eTerminals and Shells\u003c/h3\u003e\n\u003cp\u003eYou may be familiar with opening files and applications on your computer by clicking icons, or viewing a website by typing an address into the address bar and seeing what pops up. These \u003cstrong\u003egraphical user interfaces (GUIs)\u003c/strong\u003e created a revolution in computing and are still extremely helpful in getting work done for many non-technical computer users.\u003c/p\u003e\n\u003cp\u003eBefore graphical user interfaces (GUIs), the way to tell the computer to do something was through a \u003cstrong\u003eterminal\u003c/strong\u003e. The terminal included a screen, which would display only text, and a keyboard. The screen and keyboard were connected to a computer and you type into the keyboard what you wanted the computer to do. Then, you press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e and would wait for the computer to finish.\u003c/p\u003e\n\u003cp\u003eTerminals are still used frequently today, especially in software development. We can connect to another computer on the internet, give it instructions by typing in commands, and view the result on our screen. The way that modern computers emulate the terminals of yesterday is through a program called a \u003cstrong\u003ecommand-line interface\u003c/strong\u003e, or a \u003cstrong\u003eshell\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eSimilar to operating systems, there are many different types of shells. The shell that Flatiron School supports on the macOS operating system is called \u003cstrong\u003ezsh\u003c/strong\u003e, short for Z Shell.\u003c/p\u003e\n\u003ch3\u003emacOS Terminal\u003c/h3\u003e\n\u003cp\u003eThe \"Terminal\" application is a text-based way to browse and work with files on your computer. We will be using the \"Terminal\" application during the environment setup and the duration of the program. For now, let's start to see what \"Terminal\" and more generally, \u003cstrong\u003eshell\u003c/strong\u003es can do.\u003c/p\u003e\n\u003ch2\u003eView Your Desktop in \"Finder\" and \"Terminal\" Applications\u003c/h2\u003e\n\u003cp\u003eTo complete the environment setup, you will need to be able to open applications. You can open new applications by using the search bar at the bottom of your screen. The search bar says, \"Type here to search\".\u003c/p\u003e\n\u003ch3\u003eAction Item: View Your Desktop in the \"Finder\"\u003c/h3\u003e\n\u003cp\u003eThe \"Finder\" application is a visual way to browse the files on your computer. You may already be familiar with the \"Finder\" application. This application allows you to quickly see the files on your desktop, downloads, documents, pictures, music, videos, and much more.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eClick on the \"Spotlight Search\" magnifying glass icon in the top-right corner of your window\u003c/li\u003e\n\u003cli\u003eType \"Finder\" and open the application\u003c/li\u003e\n\u003cli\u003eFind and open the \"Desktop\" folder in your \"Finder\" application\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eAction Item: View Your Desktop in the \"Command Prompt\" Shell\u003c/h3\u003e\n\u003cp\u003eThe \"Terminal\" application is the terminal that will allow us to interface with our computer through a shell. This action item is to primarily get you comfortable running commands in \u003cem\u003eany\u003c/em\u003e shell so that you can work through the environment setup on your own.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using the \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecd /Users\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003els\u003c/code\u003e (lowercase \u003ccode\u003eL\u003c/code\u003e and lowercase \u003ccode\u003eS\u003c/code\u003e together) into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eLook for your username in the list\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecd\u003c/code\u003e into the terminal, add a space, and type your name as it appears in the list and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003els\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eLook for the \"Desktop\" folder in the list\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecd Desktop\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003els\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: if prompted, allow \"Terminal\" to access files in your Desktop folder.)\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.youtube.com/embed/_saQ1GkvpZk\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003eIf you were able to open your desktop in the \"Finder\" application and you were able to open the \"Terminal\" application and \u003ccode\u003ecd\u003c/code\u003e to your desktop in that application, you should see that you can see the same list of files in both the \u003cstrong\u003egraphical user interface (GUI)\u003c/strong\u003e and in the \u003cstrong\u003ecommand-line interface (CLI)\u003c/strong\u003e or shell.\u003c/p\u003e\n\u003cp\u003eThis may be your first time using the \"Terminal\" application or any terminal or shell. Now you know how to see the items on your desktop through the \"Finder\" application \u003cem\u003eand\u003c/em\u003e through the \"Terminal\" application.\u003c/p\u003e\n\u003ch2\u003ePreparing for Your Environment Setup\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDuring the environment setup, you will be spending a lot of time in your \"Terminal\" application.\u003c/li\u003e\n\u003cli\u003eAs much as possible, copy and paste commands that we ask you to run there instead of typing by hand to prevent environment setup issues.\u003c/li\u003e\n\u003cli\u003eSpecific keys that you need to press will be surrounded by \u003ccode\u003e\u0026lt;\u003c/code\u003e \u003ccode\u003e\u0026gt;\u003c/code\u003e (for example, \u003ccode\u003e\u0026lt;Shift\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eYou will need to be comfortable switching between windows; we will primarily be using the browser and the \"Terminal\" application.\u003c/li\u003e\n\u003cli\u003eYou should be able to start and stop the environment setup.\u003c/li\u003e\n\u003cli\u003eIf you get stuck, reach out to your classmates or an instructor.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e","exportId":"introduction-to-macos-environment-setup"},{"id":157724,"title":"MacOS System Setup","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-system\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-system/blob/main/README.md\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-system/blob/main/README.md/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003cp\u003eThe following instructions are for macOS Catalina through BigSur. If you are not on Catalina or a later operating system like BigSur but have the option to update, we recommend doing so before following the instructions below.\u003c/p\u003e\n\u003ch2\u003eCheck That Your macOS System is Compatible with Flatiron School’s Requirements\u003c/h2\u003e\n\u003cp\u003eWhen working on software, it is important that your computer and the software you’re using are compatible. In this step, we’ll ensure that you can install all the tools you will need to complete the program.\u003c/p\u003e\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eClick on the Apple () menu in the top left of the window\u003c/li\u003e\n    \u003cli\u003eChoose \"About This Mac\" from the menu\u003c/li\u003e\n    \u003cli\u003eLook for the version name (for example, \"macOS Catalina\")\u003c/li\u003e\n    \u003cli\u003eLook for the version number (for example, \"Version 10.15.6\")\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/bHHyxMMf2CM\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eIf your version name is macOS Catalina and your version number is greater than \"Version 10.15.0\", your computer meets our requirements for the course and you can continue below.\u003c/p\u003e\n\u003cp\u003eIf your computer does not meet the requirements listed above, but you can upgrade, we recommend that you upgrade after completing the environment setup.\u003c/p\u003e\n\u003cp\u003eIf your computer does not meet the requirements and you can't upgrade, some programs may not work for you. Please reach out to an instructor for more information.\u003c/p\u003e\n\u003ch2\u003eCheck that Your macOS System Has Enough Space for Flatiron School’s Requirements\u003c/h2\u003e\n\u003cp\u003eThe programs that we’ll be installing during environment setup and all of the work you’ll do with Flatiron School will need at least 4 GB of free disk space. Follow the steps below to ensure that you have enough disk space to install all the programs needed during environment setup.\u003c/p\u003e\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eClick on the Apple () menu in the top left of the window\u003c/li\u003e\n    \u003cli\u003eChoose \"About This Mac\" from the menu\u003c/li\u003e\n    \u003cli\u003eClick the \"Storage\" tab header\u003c/li\u003e\n    \u003cli\u003eLook for your macOS partition (for example, \"Macintosh HD\")\u003c/li\u003e\n    \u003cli\u003eLook for the storage (for example, \"119.59 GB available of 186 GB\")\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/j49xXshUhxw\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eIf your free space for your macOS partition is greater than 4 GB, continue below. Otherwise, click \"Manage...\" to open the System Information window and free up some storage space.\u003c/p\u003e\n\u003ch2\u003eALERT - For New M1 Mac Laptops ONLY\u003c/h2\u003e\n\u003cp\u003eIf you are using a Mac laptop with the new \u003cstrong\u003eM1\u003c/strong\u003e chip (released in late 2020), there are some additional steps required at this stage to ensure all necessary tools install correctly. Follow the steps below instead of the normal instructions provided for installing Xcode, Homebrew and Ruby.\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eInstead of installing Xcode via the directions in the next section, open your terminal and run the following to install Xcode:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ccode\u003excode-select --install\u003c/code\u003e\u003c/p\u003e\n\u003col\u003e\n\n        \u003cli\u003eCreate a duplicate copy of the terminal app that can run x86 programs with Rosetta. Follow the steps \u003ca href=\"https://www.notion.so/Run-x86-Apps-including-homebrew-in-the-Terminal-on-Apple-Silicon-8350b43d97de4ce690f283277e958602\"\u003edetailed in this article\u003c/a\u003e (\u003ca href=\"https://www.notion.so/Run-x86-Apps-including-homebrew-in-the-Terminal-on-Apple-Silicon-8350b43d97de4ce690f283277e958602\"\u003ehttps://www.notion.so/Run-x86-Apps-including-homebrew-in-the-Terminal-on-Apple-Silicon-8350b43d97de4ce690f283277e958602\u003c/a\u003e) to do this.\u003c/li\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eNote: Every installation step should now be done in the terminal window that has Rosetta enabled\u003c/strong\u003e\u003c/p\u003e\n\n\n        \u003cli\u003eInstall Homebrew with the following command:\u003c/li\u003e\n\n\n\u003cp\u003e\u003ccode\u003earch -x86_64 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\u003c/code\u003e\u003c/p\u003e\n\n\n        \u003cli\u003eRun the following three commands one after the other to install RVM and Ruby:\u003c/li\u003e\n\n\n\u003ccode\u003e\\curl -sSL https://get.rvm.io | bash -s stable\u003c/code\u003e\n\u003ccode\u003esource $HOME/.rvm/scripts/rvm\u003c/code\u003e\n\u003ccode\u003ervm install 2.7.2\u003c/code\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eIn addition, if you are using an M1 laptop, you will already have Zsh installed and in use, so you can move on to installing Chrome and VS Code below.\u003c/strong\u003e\u003c/p\u003e\n\u003ch2\u003eInstall Command Line Tools for Xcode\u003c/h2\u003e\n\u003cp\u003eCommand Line Tools for Xcode is a suite of development tools from Apple, including tools for building Mac and iPhone applications. It will help you to quickly set up your environment by downloading and installing essential tools for other programs we'll be installing.\u003c/p\u003e\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eOpen the \u003ca href=\"https://developer.apple.com/download/more/?=command%20line%20tools%20for%20xcode%2012\"\u003eApple Developer Download webpage\u003c/a\u003e (\u003ca href=\"https://developer.apple.com/download/more/?=command%20line%20tools%20for%20xcode%2012\"\u003ehttps://developer.apple.com/download/more/?=command%20line%20tools%20for%20xcode%2012\u003c/a\u003e)\u003c/li\u003e\n    \u003cli\u003eLook for a description of \"Command Line Tools for XCode 12\"\u003c/li\u003e\n    \u003cli\u003eLook for a release date of September 17, 2020\u003c/li\u003e\n    \u003cli\u003eClick the \"+\" symbol to see more information about the download\u003c/li\u003e\n    \u003cli\u003eClick \"Command Line Tools for XCode 12.dmg\" to download\u003c/li\u003e\n    \u003cli\u003eWhen the download is finished, click on the file to install\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/CXreDmTfn9E\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eOpen the \"Terminal\" application using \"Spotlight Search\", at the terminal prompt type \u003ccode\u003excode-select --install\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. If your terminal says \"xcode-select: error: command line tools are already installed...\", continue below.\u003c/p\u003e\n\u003ch2\u003eInstall Homebrew\u003c/h2\u003e\n\u003cp\u003eHomebrew is a package manager for macOS. It allows us to quickly install a number of programs we will need.\u003c/p\u003e\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n    \u003cli\u003eType \u003ccode\u003e/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n    \u003cli\u003eFollow the prompts on the screen during the installation (Note: this could take a while.)\u003c/li\u003e\n    \u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e\n    \u003cli\u003eReopen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/LU8UeykJxRc\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eYou can verify that Homebrew is successfully installed by running \u003ccode\u003ebrew help\u003c/code\u003e. If your terminal outputs a list of \u003ccode\u003ebrew\u003c/code\u003e commands, you're all set.\u003c/p\u003e\n\u003ch2\u003eCheck Whether You Need to Install Zsh\u003c/h2\u003e\n\u003cp\u003eZsh is the new standard shell for the macOS and comes pre-installed with the latest version of macOS, but it may need to be installed on older Macs.\u003c/p\u003e\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n    \u003cli\u003eType \u003ccode\u003eecho $SHELL\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n    \u003cli\u003e\u003cstrong\u003eIf you see \u003ccode\u003e/bin/zsh\u003c/code\u003e or \u003ccode\u003e/usr/local/bin/zsh\u003c/code\u003e DO NOT continue with the next steps. Move on to \"Check Your Work\".\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOtherwise, to install Zsh:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eType \u003ccode\u003ebrew install zsh\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n    \u003cli\u003eType \u003ccode\u003eecho /usr/local/bin/zsh | sudo tee -a /etc/shells\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e (Note: you will need to enter your password.)\u003c/li\u003e\n    \u003cli\u003eType \u003ccode\u003echsh -s /usr/local/bin/zsh\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n    \u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e\n    \u003cli\u003eReopen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n    \u003cli\u003eIf you receive a message starting with \"This is the Z Shell configuration function for new users, zsh-newuser-install\", press \u003ccode\u003e0\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/sfOvyg_hfTA\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eIf you run \u003ccode\u003eecho $SHELL\u003c/code\u003e, the terminal should output \u003ccode\u003e/bin/zsh\u003c/code\u003e or \u003ccode\u003e/usr/local/bin/zsh\u003c/code\u003e. This indicates that Zsh is in use and you are set to continue below.\u003c/p\u003e\n\u003ch2\u003eTroubleshooting\u003c/h2\u003e\n\u003cp\u003eIf you see the following message when opening your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ezsh compinit: insecure directories, run compaudit for list.\u003cbr\u003eIgnore insecure directories and continue [y] or abort compinit [n]?  \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eType \u003ccode\u003ey\u003c/code\u003e and press enter, then run the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecompaudit | xargs chmod g-w \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eClose and reopen your terminal to clear the error.\u003c/p\u003e\n\u003ch2\u003eInstall Google Chrome\u003c/h2\u003e\n\u003cp\u003eGoogle Chrome is the browser that we will use for your Flatiron School Student Portal account and also for front-end web development. You are not required to use Google Chrome for personal work, but we highly encourage you to download it for access to your account and for development in the browser.\u003c/p\u003e\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eOpen the \u003ca href=\"https://www.google.com/chrome\"\u003eGoogle Chrome download webpage\u003c/a\u003e (\u003ca href=\"https://www.google.com/chrome\"\u003ehttps://www.google.com/chrome\u003c/a\u003e)\u003c/li\u003e\n    \u003cli\u003eClick \"Download Chrome\" and \"Accept and Install\"\u003c/li\u003e\n    \u003cli\u003eWait for the \"googlechrome.dmg\" file to download and find it in the \"Finder\" application\u003c/li\u003e\n    \u003cli\u003eOpen the \"googlechrome.dmg\" file and install Google Chrome\u003c/li\u003e\n    \u003cli\u003eDrag the \"Google Chrome\" application to your \"Applications\" folder\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/2AXGt6-kHnE\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eIf you can open the \"Google Chrome\" application using \"Spotlight Search\", continue below.\u003c/p\u003e\n\u003ch2\u003eInstall Visual Studio Code (VS Code)\u003c/h2\u003e\n\u003cp\u003eVisual Studio Code (VS Code) is the tool that you’ll use to edit your Ruby and JavaScript files. It is a text editor that provides some beneficial extensions for developers. One such tool is an integrated terminal! This means that you can edit your code and use your terminal in the same window. Follow the steps below to get both set up.\u003c/p\u003e\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eOpen the \u003ca href=\"https://code.visualstudio.com/Download\"\u003eVisual Studio Code download webpage\u003c/a\u003e (\u003ca href=\"https://code.visualstudio.com/Download\"\u003ehttps://code.visualstudio.com/Download\u003c/a\u003e)\u003c/li\u003e\n    \u003cli\u003eClick on the Mac download option and start the download\u003c/li\u003e\n    \u003cli\u003eWait for the \".zip\" file to download and find it in the \"Finder\" application\u003c/li\u003e\n    \u003cli\u003eOpen the \".zip\" file and install Visual Studio Code\u003c/li\u003e\n    \u003cli\u003eDrag the \"Visual Studio Code\" application to your \"Applications\" folder\u003c/li\u003e\n    \u003cli\u003eOpen the \"Visual Studio Code\" application using \"Spotlight Search\"\u003c/li\u003e\n    \u003cli\u003eClick \"View\" in the toolbar, then click \"Command Palette\" in the dropdown menu, or use the shortcut + + P\u003c/li\u003e\n    \u003cli\u003eType \"shell command\" in the box and click on \"Shell Command: Install 'code' command in PATH\"\u003c/li\u003e\n    \u003cli\u003eClose the \"Visual Studio Code\" application\u003c/li\u003e\n    \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n    \u003cli\u003eType \u003ccode\u003ecode\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/W-fLaEmTLUU\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/KL6EnXV-wVA\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eIf Visual Studio Code (VS Code) opened after typing \u003ccode\u003ecode\u003c/code\u003e in your \"Terminal\" application, continue to the next lesson, \u003cstrong\u003eInstalling Node on macOS\u003c/strong\u003e.\u003c/p\u003e","exportId":"macos-system-setup"},{"id":157726,"title":"Mac NodeJS Install","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-nodejs\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-nodejs/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-nodejs\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-nodejs/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eInstall Node Version Manager (NVM)\u003c/h2\u003e\n\n\u003cp\u003eNode Version Manager (NVM) is a tool that will allow you to download and install\nmultiple versions of Node.js, one of the environments for the JavaScript\nprogramming language that we teach at Flatiron School. Installing NVM is the\nfirst step in installing Node.js on your macOS operating system.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | zsh\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e\n\u003cli\u003eReopen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/3Unf__nC4nk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a message ending with \"Note: to remove, delete, or uninstall nvm\",\ncontinue below.\u003c/p\u003e\n\n\u003ch2\u003eInstall Node.js\u003c/h2\u003e\n\n\u003cp\u003eFor our JavaScript labs and lessons, we expect that students use Node.js on\ntheir macOS operating system. If Node Version Manager (NVM) has been\nsuccessfully installed, you can quickly install Node.js with a couple of\ncommands.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm install node\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm list\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tOqRJJaCAVY\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a message starting with \"-\u0026gt; v14.13.0\" (or any higher number, like \"-\u0026gt; v14.13.10\" or \"-\u0026gt; v15.0.0\"), continue to the next lesson,\n\u003cstrong\u003eInstalling Ruby on macOS\u003c/strong\u003e.\u003c/p\u003e","exportId":"mac-nodejs-install"},{"id":157728,"title":"Installing Ruby on macOS","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-ruby\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eInstall the GMP and GnuPG Packages\u003c/h2\u003e  \u003cp\u003eBefore installing RVM and Ruby, we will need to add two tools which help us to verify that we're installing the software that we're expecting.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ebrew install gmp\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ebrew install gnupg\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/YO14TLJvun0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you get an error saying \"Warning: gnupg-1.4.19 already installed\", GnuPG is installed, but it may not be linked properly. To fix:\u003c/p\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ebrew link gnupg\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eInstall Ruby Environment Manager (RVM) on macOS\u003c/h2\u003e  \u003cp\u003eRuby Environment Manager (RVM) is a tool that will allow you to download and install multiple versions of Ruby, one of the programming languages that we teach at Flatiron School. This is the first step in installing Ruby on your macOS operating system.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecurl -sSL https://rvm.io/mpapis.asc | gpg --import -\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecurl -sSL https://rvm.io/pkuczynski.asc | gpg --import -\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003e\\curl -sSL https://get.rvm.io | bash\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e \u003cli\u003eReopen the \"Terminal\" application\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ervm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/9_bo5wVw-XQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you see a long message ending in \"For additional documentation please visit \u003ca href=\"https://rvm.io\"\u003ehttps://rvm.io\u003c/a\u003e\", continue below.\u003c/p\u003e  \u003cp\u003eIf \u003ccode\u003ervm\u003c/code\u003e is not found, check out the troubleshooting steps in the \u003cstrong\u003eVerify and Troubleshoot your macOS Environment Setup\u003c/strong\u003e lesson later on in this module.\u003c/p\u003e  \u003ch2\u003eInstall Ruby version 2.7.2 on macOS\u003c/h2\u003e  \u003cp\u003eFor our Ruby labs and lessons, we expect that students use Ruby version 2.7.2. If Ruby Environment Manager (RVM) has been successfully installed, you can quickly install Ruby with a couple of commands.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ervm install 2.7.2\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ervm list\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/TguTS-q83EE\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you see a message starting with \"=* ruby-2.7.2\", continue below.\u003c/p\u003e  \u003ch2\u003eInstall Ruby Gems\u003c/h2\u003e  \u003cp\u003eRuby Gems are small programs written in Ruby that help you to code more easily in Ruby. The gems you will install today include: Bundler, which allows you to keep track of which gems your projects need to work, and Pry, which allows you to pause Ruby code execution when it runs and inspect it.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem update --system\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem install bundler\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem install pry\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem list | wc -l\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003cp\u003eIf you can complete each step without any issues and you see an output of a number around or above 40 from the last command, continue to the next lesson, \u003cstrong\u003eConfiguring Git and GitHub on macOS\u003c/strong\u003e.\u003c/p\u003e","exportId":"installing-ruby-on-macos"},{"id":157730,"title":"Mac Git And Github Configuration","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-git-github\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-git-github\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-git-github/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eInstall \u003ccode\u003egit\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eGit generally comes pre-installed with most operating systems, but you can check by running \u003ccode\u003egit version\u003c/code\u003e in the terminal. If this gives you an error or does not come back with a version number, you'll need to install Git. You can install it using Homebrew.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ebrew install git\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e \u003cli\u003eReopen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit version\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/6uqtJKuqbrU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you see a message starting with \"git version...\", continue below.\u003c/p\u003e  \u003ch2\u003eCreate a GitHub Account\u003c/h2\u003e  \u003cp\u003eTo work on and get credit for the labs and lessons that you work on during the program, you will need to sign up for a GitHub account \u003cem\u003eif you don’t already have one\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/w-U97mW2XvI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003col\u003e \u003cli\u003eOpen the \u003ca href=\"https://github.com/join\"\u003eGitHub signup webpage\u003c/a\u003e (\u003ca href=\"https://github.com/join\"\u003ehttps://github.com/join\u003c/a\u003e)\u003c/li\u003e \u003cli\u003eFill out the form and create your account\u003c/li\u003e \u003cli\u003eVerify the email address connected to your GitHub account\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003cp\u003eIf you were able to verify your email address, continue below.\u003c/p\u003e  \u003ch2\u003eConfigure Git and GitHub\u003c/h2\u003e  \u003cp\u003eGit is the tool that we’ll use to download and upload the work that we do in labs and lessons. To use Git without signing in every time, you can create a Secure Shell (SSH) key and associate that to your GitHub account. Lastly, you will want to run a few commands to make sure that when you use Git, you get the proper credit for your work. This step will ask you to do work both in your browser and your terminal.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global color.ui true\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global user.name\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + your name and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: this should be your full name, not your GitHub username, in quotes.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global user.email\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + the email address you used to sign up to GitHub and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global init.defaultBranch main\u003c/code\u003e to \u003ca href=\"https://github.com/github/renaming\"\u003eupdate the default branch name\u003c/a\u003e to \u003ccode\u003emain\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003essh-keygen\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eFor each prompt \u003cstrong\u003edo not type anything\u003c/strong\u003e, just continue to press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecat ~/.ssh/id_rsa.pub | pbcopy\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. This will copy your SSH key to your clipboard\u003c/li\u003e \u003cli\u003eOpen the \u003ca href=\"https://github.com/settings/ssh/new\"\u003eGitHub New SSH key form\u003c/a\u003e (\u003ca href=\"https://github.com/settings/ssh/new\"\u003ehttps://github.com/settings/ssh/new\u003c/a\u003e) \u003cem\u003e(Note: you need to be logged in to GitHub to access that link.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eType \"My personal Mac\" in the \"Title\" input field\u003c/li\u003e \u003cli\u003ePaste what’s on your clipboard from step seven in the \"Key\" input field\u003c/li\u003e \u003cli\u003eClick \"Add SSH Key\"\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tvzcHODIIhQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you see your new SSH key beneath the \"SSH keys\" heading, continue to the next lesson, \u003cstrong\u003eVerify and Troubleshoot Your Environment Setup on macOS\u003c/strong\u003e.\u003c/p\u003e","exportId":"mac-git-and-github-configuration"},{"id":157732,"title":"Verify and Troubleshoot your macOS Environment Setup","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-verification\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-verification\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-verification/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eAction Item\u003c/h2\u003e  \u003col\u003e \u003cli\u003eOpen your \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecurl -so- https://raw.githubusercontent.com/learn-co-curriculum/flatiron-manual-setup-validator/master/mac-os-phase-0-validation-script | zsh 2\u0026gt; /dev/null\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eCheck Your Work\u003c/h2\u003e  \u003cp\u003eIf all checks pass, you have completed your environment setup and are ready to move on!\u003c/p\u003e  \u003cp\u003eIf something does not pass, that is okay. Revisit the installation instructions for the item that did not pass. If you are able to run the commands listed in the \u003cstrong\u003eCheck Your Work\u003c/strong\u003e section for that item, this may just be an issue with the validator.\u003c/p\u003e  \u003ch2\u003eTroubleshooting\u003c/h2\u003e  \u003ch3\u003eFixing NVM and RVM Dotfile Issues for MacOS\u003c/h3\u003e  \u003cp\u003eIf you are having trouble getting RVM, Ruby, NVM, or Node to work, you may have an issue with your \u003ccode\u003e.zshrc\u003c/code\u003e file. To fix, we need to run two commands.\u003c/p\u003e  \u003cp\u003eThe first command makes a backup of your current \u003ccode\u003e.zshrc\u003c/code\u003e file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emv ~/.zshrc{,.bak} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe second command replaces the contents of your \u003ccode\u003e.zshrc\u003c/code\u003e file with a default dot file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecurl -sSL https://raw.githubusercontent.com/flatiron-school/dotfiles/master/.zshrc \u0026gt; ~/.zshrc \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eClose and reopen your terminal. With a new \u003ccode\u003e.zshrc\u003c/code\u003e file, we can now test out each tool.\u003c/p\u003e  \u003ch3\u003eVerify RVM is Installed\u003c/h3\u003e  \u003cp\u003eTo confirm that RVM is working, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ervm \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see a long message ending in \u003ccode\u003e“For additional documentation please visit https://rvm.io”\u003c/code\u003e, RVM is installed.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf the command \u003ccode\u003ervm\u003c/code\u003e is not recognized, do the following in your terminal:\u003c/p\u003e  \u003col\u003e \u003cli\u003eType \u003ccode\u003ebrew install gmp\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ebrew install gnupg\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecurl -sSL https://rvm.io/mpapis.asc | gpg --import -\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecurl -sSL https://rvm.io/pkuczynski.asc | gpg --import -\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003e\\curl -sSL https://get.rvm.io | bash\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e \u003cli\u003eReopen the \"Terminal\" application\u003c/li\u003e \u003c/ol\u003e \u003c/blockquote\u003e  \u003ch3\u003eVerify Ruby is Installed\u003c/h3\u003e  \u003cp\u003eTo confirm Ruby is installed, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ervm list \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see \u003ccode\u003e=* ruby-2.7.2\u003c/code\u003e, Ruby is installed and 2.7.2 set as the default version and you are all set for Ruby.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf you do not see \u003ccode\u003eruby-2.7.2\u003c/code\u003e at all, install it with the following command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026gt; rvm install ruby-2.7.2\u003cbr\u003e\u0026gt; ```\u003cbr\u003e\u003cbr\u003eIf `ruby-2.7.2` is listed, but is not preceded by `=*`, make it the default version by running:\u003cbr\u003e\u003cbr\u003e```sh\u003cbr\u003e\u0026gt; rvm use 2.7.2 --default\u003cbr\u003e\u0026gt; ``` \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e  \u003ch3\u003eVerify NVM is installed\u003c/h3\u003e  \u003cp\u003eTo confirm NVM is installed, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003envm \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see a message ending with \u003ccode\u003e“Note: to remove, delete, or uninstall nvm…”\u003c/code\u003e, NVM is installed. \u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf the \u003ccode\u003envm\u003c/code\u003e command is not recognized or you see an error \u003ccode\u003ecomplete:13: command not found: compdef\u003c/code\u003e, run the following command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026gt; curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\u003cbr\u003e\u0026gt; ``` \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e  \u003ch3\u003eVerify Node is Installed\u003c/h3\u003e  \u003cp\u003eTo confirm Node is installed, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003envm list \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see a message starting with “-\u0026gt; v14.13.0” (or any number higher than this), a version of Node is installed that will work for this course.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf you don't see this number, install the newest version of Node:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026gt; nvm install node\u003cbr\u003e\u0026gt; ``` \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e","exportId":"verify-and-troubleshoot-your-macos-environment-setup"},{"id":243536,"title":"Survey - MacOS Environment Setup","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cp\u003eHow many hours did you spend working on the MacOS Environment Setup module?\u003c/p\u003e","exportId":"gde01f19dafa72168e6dd74166fb9e12f"}]},{"id":20426,"name":"Pre-Assessment","status":"unlocked","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"ge59fb399268cc6a41cb4bc9cbb6010d3","items":[{"id":187970,"title":"Pre-Assessment","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"ga142b3353e9a172f815ee2d18f2c0319","questionCount":28,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":28.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cp\u003eWelcome to your first quiz! Don't panic - we know you haven't done any coursework yet!\u0026nbsp;\u003c/p\u003e\n\u003cp\u003eThis is a diagnostic pre-assessment. It is absolutely okay if you do not do well on this - your score on this quiz will not impact your admission to our programs. The goal of this quiz is to record a baseline of your understanding coming into this pre-work course.\u003cbr\u003e\u003cbr\u003eThis quiz will cover the core topics we will go through in the pre-work, including Git, HTML, CSS, and JavaScript. If you don't know the answer to a question, that is okay - you can select \"I don't know\". It's expected that you won't know lots of things as you're just starting out!\u003cstrong\u003e\u003cbr\u003e\u003cbr\u003e\u003c/strong\u003e\u003c/p\u003e","exportId":"g724375468bf8dfe8fdaaa9e219104d6e"}]},{"id":18570,"name":"Windows Environment Setup","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g6adf84e0855d75b14786e97c81fc6ed6","items":[{"id":170514,"title":"Introduction to Windows Subsystem for Linux (WSL2) Environment Setup","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIn this module, we will walk through the process of setting up your Windows 10 local development environment.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are not using a Windows computer for this course, skip the lessons in this module.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eBrief History\u003c/h2\u003e  \u003ch3\u003eUnderstanding Environments\u003c/h3\u003e  \u003cp\u003eA \u003cstrong\u003esoftware environment\u003c/strong\u003e describes the set of tools that work together to enable you to develop and execute the code that you write. Environments typically include the operating system, databases, programming languages, and related tools like text editors or browsers.\u003c/p\u003e  \u003ch3\u003eComparing Environments with Machines\u003c/h3\u003e  \u003cp\u003eYou may hear us use the term \"software environment\" and \"machine\" to mean similar things. A \u003cstrong\u003emachine\u003c/strong\u003e describes the physical hardware that your software environment runs on. You'll hear the term machine and computer used interchangeably. Different machines (like PCs and Macs) use different hardware to run the programs that they use. Differences in those machines mean that setting up your development environment on one type of machine could look much different than setting it up on another.\u003c/p\u003e  \u003ch3\u003eWindows Subsystem for Linux (WSL)\u003c/h3\u003e  \u003cp\u003eTo work around some of the differences between machines, and specifically between operating systems, we recommend that all students whose computers come pre-installed with the Windows operating system use a tool called \u003cstrong\u003eWindows Subsystem for Linux (WSL)\u003c/strong\u003e. Windows Subsystem for Linux provides a Linux-based environment for interfacing with and developing on a Windows operating system.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eLinux\u003c/strong\u003e is a family of operating systems that share the same core operating system programs. Operating systems based on Linux are very commonly used in professional software engineering settings. Learning how to use a Linux-based operating system will be a valuable skill for your future software engineering career.\u003c/p\u003e  \u003cp\u003eThe version, or distribution, of Linux that you will use is called \u003cstrong\u003eUbuntu\u003c/strong\u003e. It is one of the leading Linux distributions and has great support with Windows Subsystem for Linux. There are others like Debian and Fedora, and those should work similarly.\u003c/p\u003e  \u003cp\u003eThe advantage of using Windows Subsystem for Linux is that it's highly integrated into Windows 10, works on most machines that support Windows 10, and only needs to be enabled and configured.\u003c/p\u003e  \u003cp\u003eThe first version of Windows Subsystem for Linux (WSL 1) was groundbreaking! It translates commands that you run with Linux into commands that Windows can understand. For this course, we'll use the second version of Windows Subsystem for Linux (WSL 2). The first version had some compatibility issues and was slower compared to native Windows.\u003c/p\u003e  \u003ch3\u003eTerminals and Shells\u003c/h3\u003e  \u003cp\u003eYou may be familiar with opening files and applications on your computer by clicking icons, or viewing a website by typing an address into the address bar and seeing what pops up. These \u003cstrong\u003egraphical user interfaces (GUIs)\u003c/strong\u003e created a revolution in computing and are still extremely helpful in getting work done for many non-technical computer users.\u003c/p\u003e  \u003cp\u003eBefore graphical user interfaces (GUIs), the way to tell the computer to do something was through a \u003cstrong\u003eterminal\u003c/strong\u003e. The terminal included a screen, which would display only text, and a keyboard. The screen and keyboard were connected to a computer, and you type into the keyboard what you wanted the computer to do. Then, you press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e and would wait for the computer to finish.\u003c/p\u003e  \u003cp\u003eTerminals are still used frequently today, especially in software development. We can connect to another computer on the internet, give it instructions by typing in commands, and view the result on our screen. The way that modern computers emulate the terminals of yesterday is through a program called a \u003cstrong\u003ecommand-line interface\u003c/strong\u003e, or a \u003cstrong\u003eshell\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eSimilar to operating systems, there are many different types of shells. The shell that Flatiron School supports on the Ubuntu operating system is called \u003cstrong\u003ebash\u003c/strong\u003e, short for Bourne Again Shell.\u003c/p\u003e  \u003ch3\u003eWindows Command Prompt\u003c/h3\u003e  \u003cp\u003eBefore we get to \u003cstrong\u003ebash\u003c/strong\u003e, however, we need to do some work in the \"Command Prompt\", which is the built-in shell on Windows computers.\u003c/p\u003e  \u003cp\u003eThe \"Command Prompt\" application is a text-based way to browse and work with your computer files. We will only be using the \"Command Prompt\" application at the beginning of the environment setup. For now, let's start to see what \"Command Prompt\" and more generally, \u003cstrong\u003eshell\u003c/strong\u003es can do.\u003c/p\u003e  \u003ch2\u003eAction Items: View Your Desktop in \"File Explorer\" and \"Command Prompt\" Applications\u003c/h2\u003e  \u003cp\u003eTo complete the environment setup, you will need to be able to open applications. You can open new applications by using the search bar at the bottom of your screen. The search bar says, \"Type here to search\".\u003c/p\u003e  \u003ch3\u003eView Your Desktop in the \"File Explorer\"\u003c/h3\u003e  \u003cp\u003eThe \"File Explorer\" application is a visual way to browse the files on your computer. You may already be familiar with the \"File Explorer\" application. This application allows you to quickly see the files on your desktop, downloads, documents, pictures, music, videos, and much more.\u003c/p\u003e  \u003col\u003e \u003cli\u003eClick on the \"Start\" menu search bar\u003c/li\u003e \u003cli\u003eType \"File Explorer\" and open the application\u003c/li\u003e \u003cli\u003eFind and open the \"OneDrive\" folder located on the left-hand side in your \"File Explorer\"\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eView Your Desktop in the \"Command Prompt\" Shell\u003c/h3\u003e  \u003cp\u003eThe \"Command Prompt\" application is the terminal that will allow us to interface with our computer through a shell. This action item is to primarily get you comfortable running commands in \u003cem\u003eany\u003c/em\u003e shell so that you can work through the environment setup on your own.\u003c/p\u003e  \u003col\u003e \u003cli\u003eClick on the \"Start\" menu search bar\u003c/li\u003e \u003cli\u003eType \"Command Prompt\" and open the application\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecd /Users\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003edir\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eLook for your username in the list\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecd\u003c/code\u003e into the terminal, add a space, and type your name as it appears in the list and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003edir\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eLook for the \"OneDrive\" folder in the list\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecd OneDrive\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003edir\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ylMhORbzGNg\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you were able to open your OneDrive folder in the \"File Explorer\" application and you were able to open the \"Command Prompt\" application and \u003ccode\u003ecd\u003c/code\u003e to the same folder,  you should see the same list of files and folders in both the \u003cstrong\u003egraphical user interface (GUI)\u003c/strong\u003e  and in the \u003cstrong\u003ecommand-line interface (CLI)\u003c/strong\u003e or shell.\u003c/p\u003e  \u003cp\u003eThis may be your first time using the \"Command Prompt\" or any terminal or shell. Now you know how to see the items in a particular folder through the \"File Explorer\" \u003cem\u003eand\u003c/em\u003e through the \"Command Prompt\". This step is to get you familiar with using a terminal to be able to complete the environment setup.\u003c/p\u003e  \u003ch2\u003ePreparing for Your Environment Setup\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDuring the environment setup, you will be spending a lot of time in the \"Ubuntu\" application.\u003c/li\u003e \u003cli\u003eAs much as possible, copy and paste commands that we ask you to run there instead of typing by hand to help prevent environment setup issues.\u003c/li\u003e \u003cli\u003eSpecific keys that you need to press will be surrounded by  \u003ccode\u003e\u0026lt;\u003c/code\u003e \u003ccode\u003e\u0026gt;\u003c/code\u003e (for example, \u003ccode\u003e\u0026lt;Shift\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e).\u003c/li\u003e \u003cli\u003eYou will need to be comfortable switching between windows; we will primarily be using the browser and the \"Ubuntu\" application.\u003c/li\u003e \u003cli\u003eYou should be able to start and stop the environment setup.\u003c/li\u003e \u003cli\u003eIf you get stuck, reach out to your classmates or an instructor.\u003c/li\u003e \u003c/ul\u003e","exportId":"introduction-to-windows-subsystem-for-linux-wsl2-environment-setup"},{"id":170517,"title":"Windows System Setup","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-system\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-system/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-system\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-system/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWSL2 is compatible with the Home, Pro, or Server editions of Windows but not\nWindows 10 S (although you can often upgrade to the Home edition for free).\u003c/p\u003e\n\n\u003ch2\u003eCheck That your Windows system is Compatible with Flatiron School’s Requirements\u003c/h2\u003e\n\n\u003cp\u003eWhen working on software, your computer and the software you’re using must be\ncompatible. In this step, we’ll ensure that you are able to install all the\ntools that you will need to complete the program.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: Check your Windows System Specifications\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Settings\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eSelect the \"System\" option\u003c/li\u003e\n\u003cli\u003eSelect \"About\" at the bottom of the list\u003c/li\u003e\n\u003cli\u003eScroll down to the \"Windows specifications\" heading\u003c/li\u003e\n\u003cli\u003eCheck that your \"Edition\" is one of the following: Windows 10 Home, Windows\n10 Pro, Windows 10 Server\u003c/li\u003e\n\u003cli\u003eCheck that your \"Version\" is greater than or equal to \"2004\"\u003c/li\u003e\n\u003cli\u003eCheck that your \"OS build\" is greater than \"19041.000\"\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RbmtGFuqmtw\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf your \"Edition\", \"Version\" and \"OS build\" meet the requirements listed above,\nskip the next step and continue below. Otherwise, continue with the next step to\nupdate to the latest version of Windows 10.\u003c/p\u003e\n\n\u003ch2\u003eUpdate to the Latest Version of Windows 10\u003c/h2\u003e\n\n\u003cp\u003eBefore moving on, make sure that you’re using the latest version of Windows 10.\nThe Windows May 2020 update is essential. Follow the steps below to update your\noperating system.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: Update to the Latest Version of Windows 10\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the Windows 10 Disc Image webpage\n(\u003ca href=\"https://www.microsoft.com/en-us/software-download/windows10\"\u003ehttps://www.microsoft.com/en-us/software-download/windows10\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eClick the \"Update now\" button\u003c/li\u003e\n\u003cli\u003eSelect \"Run\" from the pop-up and allow the app to make changes to your device\u003c/li\u003e\n\u003cli\u003eProgress through the computer update\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/V75EW-jG6QM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you can successfully update to the latest version of Windows 10,\ncontinue below. Otherwise, reach out to your instructor for next steps.\u003c/p\u003e\n\n\n\n\u003ch2\u003eCheck That Your Windows System has Enough Space for Flatiron School’s Requirements\u003c/h2\u003e\n\n\u003cp\u003eThe programs that we’ll be installing during environment setup and all of the\nwork you’ll do with Flatiron School will need at least 1 GB of free disk space.\nFollow the steps below to ensure that you have enough disk space to install all\nthe programs needed during the environment setup.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: Check Your Storage\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Settings\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eSelect the \"System\" option\u003c/li\u003e\n\u003cli\u003eOn the left-hand side, select \"Storage\"\u003c/li\u003e\n\u003cli\u003eCheck that the amount of free space listed beneath the \"C:\" drive heading is\ngreater than 1 GB\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VCYoUBlDK8A\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf your free space for your \"C:\" drive is greater than 1 GB, continue below.\nOtherwise, use the \u003ca href=\"https://www.lifewire.com/free-drive-space-with-disk-cleanup-3506869\"\u003eDisk Cleanup utility\u003c/a\u003e to free more space on your computer.\u003c/p\u003e\n\n\u003ch2\u003eInstall Google Chrome\u003c/h2\u003e\n\n\u003cp\u003eGoogle Chrome is the browser that we will use for your Flatiron School Student\nPortal account and also for front-end web development. You are not required to\nuse Google Chrome for personal work, but we highly encourage you to download\nit for access to your account and for development in the browser.\u003c/p\u003e\n\n\u003ch2\u003eAction Item: Download and Install Google Chrome\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://www.google.com/chrome\"\u003eGoogle Chrome webpage\u003c/a\u003e (\u003ca href=\"https://www.google.com/chrome\"\u003ehttps://www.google.com/chrome\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eClick \"Download Chrome\"\u003c/li\u003e\n\u003cli\u003eSelect \"Run\" from the pop-up and allow the app to make changes to your device\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eCheck Your Work\u003c/h2\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nRpgVG8L6tg\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you can open the \"Google Chrome\" application using the \"Start\" menu,\ncontinue below.\u003c/p\u003e\n\n\u003ch2\u003eInstall Visual Studio Code (VS Code) on Windows\u003c/h2\u003e\n\n\u003cp\u003eVisual Studio Code (VS Code) is the tool that you’ll use to edit your Ruby and\nJavaScript files. It is a text editor that provides some really useful\nextensions for developers. One such tool is an integrated terminal! This means\nthat you can edit your code and use your terminal in the same window. Follow the\nsteps below to get both set up.\u003c/p\u003e\n\n\u003ch3\u003eAction item: download and install Visual Studio Code\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://code.visualstudio.com/Download\"\u003eVisual Studio Code Download webpage\u003c/a\u003e\n\u003ca href=\"https://code.visualstudio.com/Download\"\u003ehttps://code.visualstudio.com/Download\u003c/a\u003e in your browser\u003c/li\u003e\n\u003cli\u003eClick on the Windows download option\u003c/li\u003e\n\u003cli\u003eDownload and run the Visual Studio Code installer\u003c/li\u003e\n\u003cli\u003eComplete the installer\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1gPuktOEc0A\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you can open the \"Visual Studio Code\" application using the \"Start\"\nmenu, continue below.\u003c/p\u003e\n\n\u003ch2\u003eInstall the \"Ubuntu\" Application from the Microsoft Store\u003c/h2\u003e\n\n\u003cp\u003eYou are ready to install and set up the Ubuntu operating system! Ubuntu is a\nLinux-based operating system and this is the application we’ll use to run the\nremainder of the environment setup.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: Install the \"Ubuntu\" Application\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Microsoft Store\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eSearch for \"Ubuntu\" (note: do not choose \"Ubuntu 16.04 LTS\", \"Ubuntu 18.04\nLTS\", or \"Ubuntu 20.04LTS\". Instead, choose the option that has no number\nnext to it.)\u003c/li\u003e\n\u003cli\u003eClick \"Get\" and \"Install\" and wait for the application installation to\ncomplete\u003c/li\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rfZb5l6GBKc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you can open the \"Ubuntu\" application using the \"Start\" menu, do not type\nanything into the window, and continue to the next lesson, \u003cstrong\u003eSetting up WSL2\u003c/strong\u003e.\nOtherwise, reach out to your teaching team for next steps.\u003c/p\u003e","exportId":"windows-system-setup"},{"id":170520,"title":"Setting Up WSL2","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-windows-subsystem-linux\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-windows-subsystem-linux\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-windows-subsystem-linux/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eWindows Subsystem Linux (WSL) is \u003cstrong\u003enot\u003c/strong\u003e automatically enabled on windows. So, to start, we need to enable it!\u003c/p\u003e  \u003ch2\u003eEnable the Windows Subsystem for Linux (WSL) and Virtual Machine Platform\u003c/h2\u003e  \u003cp\u003eNow that we know your computer is ready for the rest of the environment setup, we need to enable two more settings before moving on. We’ll be using the Windows Subsystem for Linux (WSL) and the Virtual Machine Platform to create a space on our computer for our Ubuntu operating system.\u003c/p\u003e  \u003ch3\u003eAction Item: Enable Windows Subsystem for Linux (WSL) and Virtual Machine Platform Settings\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Turn windows features on and off\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eCheck the box next to \"Virtual Machine Platform\"\u003c/li\u003e \u003cli\u003eCheck the box next to \"Windows Subsystem for Linux\"\u003c/li\u003e \u003cli\u003eClick \"OK\" to save your work; your computer should restart\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/FNW1CktP_m8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you can check both of those checkboxes and your computer restarts, continue below. Otherwise, reach out to your teaching team for next steps.\u003c/p\u003e  \u003ch2\u003eSet up the \"Ubuntu\" Application\u003c/h2\u003e  \u003cp\u003eAfter you have installed the \"Ubuntu\" application from the Microsoft Store and enabled Windows Subsystem for Linux (WSL) and the Virtual Machine Platform, we have to set up the Ubuntu operating system.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eWhen it says \"Enter new UNIX username:\" add a simple username and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: usernames may not start with a number, usernames may not include capital letters)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eWhere it says \"New password:\" add a simple password and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: you will not see any text when you are typing your password.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eWhere it says \"Retype new password:\" retype the same password from before and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eThe terminal should output \"Installation successful!\" and then print about 50 lines that you can ignore\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ZFXI7vGFdng\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eNow, the last line in your \"Ubuntu\" application should say your username + \"@DESKTOP\" + some random numbers and letters. If you see that, continue below.\u003c/p\u003e  \u003ch2\u003eUpdate the Windows Subsystem for Linux (WSL) to WSL 2\u003c/h2\u003e  \u003cp\u003eNow that we have the Windows Subsystem for Linux (WSL) enabled and we have the \"Ubuntu\" application installed, we can update WSL to version 2 and update the \"Ubuntu\" application to use WSL 2.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eDownload the WSL Update file by visiting the following webpage in your browser: \u003ca href=\"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\"\u003ehttps://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003eOpen the file, follow the prompts, allow the program to make changes to your device, and click \"Finish\"\u003c/li\u003e \u003cli\u003eSearch for the \"Command Prompt\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eSelect \"Run as administrator\" from the right side of the search window\u003c/li\u003e \u003cli\u003eAllow the program to make changes to your device and wait for the \"Command Prompt\" application to open\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ewsl --set-default-version 2\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e (Note: you should see a message starting with \"For information on key differences…\")\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ewsl --set-version Ubuntu 2\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eWait for the \"Conversion complete\" or \"This distribution is already the requested version\" message in the terminal\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/7IxV_ARTAoo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dvqSkrK-q6g\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you saw the \"Conversion complete\" or \"This distribution is already the requested version\" message in the \"Command Prompt\" application, close the \"Command Prompt\" application and continue below.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you encounter an error message that you need to enable the Virtual Machine Platform, but you've already enabled it, you may not be able to use WSL2. However, you may still be able to use WSL1. Run  \u003ccode\u003ewsl --set-default-version 1\u003c/code\u003e, then run \u003ccode\u003ewsl --set-version Ubuntu 1\u003c/code\u003e. Wait for  the \"Conversion complete\" or \"This distribution is already the requested  version\" message in the terminal, then continue on with these instructions.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConfigure VS Code to Work with WSL\u003c/h2\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Visual Studio Code\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eClick \"View\" in the toolbar, then click \"Extensions\" in the dropdown menu, or use the shortcut \u003ccode\u003e\u0026lt;Control\u0026gt;\u003c/code\u003e + \u003ccode\u003e\u0026lt;Shift\u0026gt;\u003c/code\u003e + X\u003c/li\u003e \u003cli\u003eSearch for \"Remote - WSL\" and click on the item in the list with the same name (Note: the description should start with \"Open any folder in the Windows Subsystem for Linux (WSL) …\")\u003c/li\u003e \u003cli\u003eClick the \"Install\" button near the top of the page\u003c/li\u003e \u003cli\u003eClick \"Terminal\" in the toolbar, then click \"New Terminal\" (Note: a new terminal should appear at the bottom of your VS Code window)\u003c/li\u003e \u003cli\u003eClick on the dropdown in the terminal that says \"1: powershell\" and choose \"Select Default Profile\"\u003c/li\u003e \u003cli\u003eA dropdown should appear at the top of your VS Code window\u003c/li\u003e \u003cli\u003eClick on \"Ubuntu (WSL)\" to enable VS Code to display your Ubuntu terminal\u003c/li\u003e \u003cli\u003eClose the \"Visual Studio Code\" application\u003c/li\u003e \u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecode\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wUmNR1ip7ck\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/giY_9z096vo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf the \"Visual Studio Code\" application opens when you type \u003ccode\u003ecode\u003c/code\u003e in the \"Ubuntu\" application, continue to the next lesson, \u003cstrong\u003eInstalling Node on WSL2\u003c/strong\u003e.\u003c/p\u003e","exportId":"setting-up-wsl2"},{"id":170523,"title":"Windows WSL2 NodeJS Installation","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-nodejs\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-nodejs/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-nodejs\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-nodejs/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eInstall Node Version Manager (NVM) on Ubuntu\u003c/h2\u003e\n\n\u003cp\u003eNode Version Manager (NVM) is a tool that will allow you to download and install\nmultiple versions of Node.js, one of the environments for the JavaScript\nprogramming language that we teach at Flatiron School. Installing NVM is the\nfirst step in installing Node.js on your Ubuntu operating system.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.36.0/install.sh | bash\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecurl -sSL https://raw.githubusercontent.com/flatiron-school/dotfiles/master/nvm-shell-script \u0026gt;\u0026gt; ~/.bashrc\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eClose the \"Ubuntu\" application\u003c/li\u003e\n\u003cli\u003eReopen the \"Ubuntu\" application\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003cp\u003eIf you see a message ending with \"Note: to remove, delete, or uninstall nvm\",\ncontinue below.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If \u003ccode\u003envm\u003c/code\u003e is not recognized, or you are seeing new errors when\nrestarting the \"Ubuntu\" application, check out the troubleshooting steps\nin the \u003cstrong\u003eVerify and Troubleshoot your WSL2 Environment\nSetup\u003c/strong\u003e lesson later on in this module.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eInstall Node.js on Ubuntu\u003c/h2\u003e\n\n\u003cp\u003eFor our JavaScript labs and lessons, we expect that students use Node.js on\nUbuntu. If Node Version Manager (NVM) has been successfully installed, you can\nquickly install Node.js with a couple of commands.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm install node\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm list\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/bOajXY2CMq4\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a message starting with \"-\u0026gt; v14.13.0\" (or any higher number, like \"-\u0026gt; v14.13.10\" or \"-\u0026gt; v15.0.0\"), continue to the next lesson,\n\u003cstrong\u003eInstalling Ruby on WSL2\u003c/strong\u003e.\u003c/p\u003e","exportId":"windows-wsl2-nodejs-installation"},{"id":170525,"title":"Windows WSL2 Ruby Installation","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-ruby\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eInstall Ruby Environment Manager (RVM) on Ubuntu\u003c/h2\u003e  \u003cp\u003eRuby Environment Manager (RVM) is a tool that will allow you to download and install multiple versions of Ruby, one of the programming languages that we teach at Flatiron School. Installing RVM is the first step in installing Ruby on your Ubuntu operating system.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esudo apt-get install software-properties-common\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eYou may be asked to enter your Ubuntu terminal password\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esudo -E apt-add-repository -y ppa:rael-gc/rvm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esudo apt-get update\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esudo apt-get install rvm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: if you are asked \"Do you want to continue [Y/n]\", type \"Y\" and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esource /etc/profile.d/rvm.sh\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecurl -sSL https://raw.githubusercontent.com/flatiron-school/dotfiles/master/rvm-shell-script \u0026gt;\u0026gt; ~/.bashrc\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eClose the \"Ubuntu\" application\u003c/li\u003e \u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ervm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/GErkBvGIGu0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you see a long message ending in \"For additional documentation, please visit \u003ca href=\"https://rvm.io\"\u003ehttps://rvm.io\u003c/a\u003e\", continue below. If \u003ccode\u003ervm\u003c/code\u003e is not found, check out the troubleshooting steps in the \u003cstrong\u003eVerify and Troubleshoot your WSL2 Environment Setup\u003c/strong\u003e lesson later on in this module.\u003c/p\u003e  \u003ch2\u003eInstall Ruby Version 2.7.2 on Ubuntu\u003c/h2\u003e  \u003cp\u003eFor our Ruby labs and lessons, we expect that students use Ruby version 2.7.2 on Ubuntu. If Ruby Environment Manager (RVM) has been successfully installed, you can quickly install Ruby with a couple of commands.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eIf the \"Ubuntu\" application is still open from the last step, close and re-open to prevent errors with running the next command.\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ervm install 2.7.2\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eEnter your Ubuntu password if prompted\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ervm list\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RVwo7RPviNI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you see a message starting with \u003ccode\u003e=* ruby-2.7.2\u003c/code\u003e, continue below.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you see that Ruby 2.7.2 is installed, but does not display \u003ccode\u003e=*\u003c/code\u003e before it, close and reopen the \"Ubuntu\" application, then run \u003ccode\u003ervm use 2.7.2 --default\u003c/code\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eTroubleshooting Ruby Installs\u003c/h2\u003e  \u003cp\u003eIf you encounter issues installing a version of Ruby via RVM, try the following in Ubuntu: \u003c/p\u003e  \u003cul\u003e \u003cli\u003eRun \u003ccode\u003ervm group add rvm $USER\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eClose Ubuntu and reopen\u003c/li\u003e \u003cli\u003eRun \u003ccode\u003ervm fix-permissions\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAfter running the last command, try installing Ruby again with \u003ccode\u003ervm install 2.7.2\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eIf you are continuing to have issues installing RVM, try running the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esudo usermod -a -G rvm $USER \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter running, try installing Ruby again.\u003c/p\u003e  \u003ch2\u003eInstall Ruby Gems on Ubuntu\u003c/h2\u003e  \u003cp\u003eRuby Gems are small programs written in Ruby that help you to code more easily in Ruby. The gems you will install today include: Bundler, which allows you to keep track of which gems your projects need to work, and Pry, which allows you to pause your Ruby code when it runs and inspect it.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem update --system\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem install bundler\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem install pry\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem list | wc -l\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003cp\u003eIf you are able to complete each step without any issues and you see an output of a number around or above 40 from the last command, continue to the next lesson, \u003cstrong\u003eConfiguring Git and GitHub on WSL2\u003c/strong\u003e.\u003c/p\u003e","exportId":"windows-wsl2-ruby-installation"},{"id":170528,"title":"Configuring Git and GitHub on WSL2","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-git-github\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-git-github\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-git-github/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eCreate a GitHub Account\u003c/h2\u003e  \u003cp\u003eTo work on and get credit for the labs and lessons that you work on during the program, you will need to sign up for a GitHub account \u003cem\u003eif you don’t already have one\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \u003ca href=\"https://github.com/join\"\u003eGitHub signup webpage\u003c/a\u003e at \u003ca href=\"https://github.com/join\"\u003ehttps://github.com/join\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003eFill out the form and create your account\u003c/li\u003e \u003cli\u003eVerify the email address connected to your GitHub account\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/mFZOVj8hago\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you were able to verify your email address, continue below.\u003c/p\u003e  \u003ch2\u003eConfigure Git and GitHub\u003c/h2\u003e  \u003cp\u003eGit is the tool that we’ll use to download and upload the work we do in labs and lessons. To use Git without signing in every time, you can create a Secure Shell (SSH) key and associate that to your GitHub account. Lastly, you will want to run a few commands to make sure that when you use Git, you get the proper credit for your work. This step will ask you to do work both in your browser and your terminal.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global color.ui true\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global user.name\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + your name and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global user.email\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + the email address you used to sign up to GitHub and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003essh-keygen\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e, for each prompt \u003cstrong\u003edo not type anything\u003c/strong\u003e, just continue to press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global init.defaultBranch main\u003c/code\u003e to \u003ca href=\"https://github.com/github/renaming\"\u003eupdate the default branch name\u003c/a\u003e to \u003ccode\u003emain\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecat ~/.ssh/id_rsa.pub | clip.exe\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. This will copy your SSH key to your clipboard\u003c/li\u003e \u003cli\u003eOpen the \u003ca href=\"https://github.com/settings/ssh/new\"\u003eGitHub New SSH key form\u003c/a\u003e (\u003ca href=\"https://github.com/settings/ssh/new\"\u003ehttps://github.com/settings/ssh/new\u003c/a\u003e) \u003cem\u003e(Note: you need to be logged in to GitHub to access that link.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eType \"My personal PC\" in the \"Title\" input field\u003c/li\u003e \u003cli\u003ePaste what’s on your clipboard from step seven in the \"Key\" input field\u003c/li\u003e \u003cli\u003eClick \"Add SSH Key\"\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ZosWXqhYD00\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you see your new SSH key beneath the \"SSH keys\" heading, continue to the next lesson, \u003cstrong\u003eVerify and Troubleshoot Your WSL2 Environment Setup\u003c/strong\u003e.\u003c/p\u003e","exportId":"configuring-git-and-github-on-wsl2"},{"id":170531,"title":"Verify and Troubleshoot your WSL2 Environment Setup","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-verification\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-verification\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-verification/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eAction Item\u003c/h2\u003e  \u003col\u003e \u003cli\u003eOpen your \"Ubuntu\" application\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecurl -so- https://raw.githubusercontent.com/learn-co-curriculum/flatiron-manual-setup-validator/master/wsl-phase-0-manual-setup-validator.sh | bash 2\u0026gt; /dev/null\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eCheck Your Work\u003c/h2\u003e  \u003cp\u003eIf all checks pass, you have completed your environment setup and are ready to move on!\u003c/p\u003e  \u003cp\u003eIt may be that you are setup correctly, but the validator script can't tell. If there is some sort of error, revisit the instructions for the item that is not passing. If you can run the commands listed in the \u003cstrong\u003eCheck Your Work\u003c/strong\u003e section of that item, you should be all set and can disregard the validator.\u003c/p\u003e  \u003ch3\u003eFixing NVM and RVM Issues for WSL2\u003c/h3\u003e  \u003cp\u003eIf you are having trouble getting RVM, Ruby, NVM, or Node to work, you may have an issue with your \u003ccode\u003e.bashrc\u003c/code\u003e file. To fix, we need to run two commands.\u003c/p\u003e  \u003cp\u003eThe first command makes a backup of your current \u003ccode\u003e.bashrc\u003c/code\u003e file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emv ~/.bashrc{,.bak} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe second command replaces the contents of your \u003ccode\u003e.bashrc\u003c/code\u003e file with a default file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecurl -sSL https://raw.githubusercontent.com/flatiron-school/dotfiles/master/minimal-bashrc \u0026gt; ~/.bashrc \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eClose and reopen your terminal. With a new \u003ccode\u003e.bashrc\u003c/code\u003e file, we can now test out each tool.\u003c/p\u003e  \u003ch4\u003eVerify RVM is Installed\u003c/h4\u003e  \u003cp\u003eTo confirm that RVM is working, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ervm \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see a long message ending in \u003ccode\u003e“For additional documentation please visit https://rvm.io”\u003c/code\u003e, RVM is installed. \u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf the command \u003ccode\u003ervm\u003c/code\u003e is not recognized, do the following in your terminal:\u003c/p\u003e  \u003col\u003e \u003cli\u003eType \u003ccode\u003esudo apt-get install software-properties-common\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esudo -E apt-add-repository -y ppa:rael-gc/rvm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esudo apt-get update\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esudo apt-get install rvm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esource /etc/profile.d/rvm.sh\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eClose the \"Ubuntu\" application\u003c/li\u003e \u003cli\u003eReopen the \"Ubuntu\" application\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ervm\u003c/code\u003e and press \u003c/li\u003e \u003c/ol\u003e \u003c/blockquote\u003e  \u003ch4\u003eVerify Ruby is Installed\u003c/h4\u003e  \u003cp\u003eTo confirm Ruby is installed, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ervm list \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see \u003ccode\u003e=* ruby-2.7.2\u003c/code\u003e, Ruby is installed and 2.7.2 set as the default version and you are all set for Ruby.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf you do not see \u003ccode\u003eruby-2.7.2\u003c/code\u003e at all, install it with the following command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ervm install ruby-2.7.2 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf \u003ccode\u003eruby-2.7.2\u003c/code\u003e is listed, but is not preceded by \u003ccode\u003e=*\u003c/code\u003e, make it the default version by running:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ervm use 2.7.2 --default \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e  \u003ch4\u003eVerify NVM is installed\u003c/h4\u003e  \u003cp\u003eTo confirm NVM is installed, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003envm \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see a message ending with \u003ccode\u003e“Note: to remove, delete, or uninstall nvm…”\u003c/code\u003e, NVM is installed. \u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf the \u003ccode\u003envm\u003c/code\u003e command is not recognized, install NVM with the following command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.36.0/install.sh | bash \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eClose and reopen the \"Terminal\" application, then run \u003ccode\u003envm\u003c/code\u003e again.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch4\u003eVerify Node is Installed\u003c/h4\u003e  \u003cp\u003eTo confirm Node is installed, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003envm list \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see a message starting with “-\u0026gt; v14.13.0” (or any number higher than this), a version of Node is installed that will work for this course. \u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf you don't see this number, install a new version of Node:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003envm install node \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e  \u003ch3\u003eEnabling Virtualization In the BIOS\u003c/h3\u003e  \u003cp\u003eFor most Windows machines, enabling WSL and the Virtual Machine Platform should be enough to get Ubuntu running. Some devices, however, require an additional step - enabling hardware virtualization in the BIOS.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eWARNING:\u003c/strong\u003e Fiddling with your BIOS settings can \u003cstrong\u003etrash your PC\u003c/strong\u003e! Be careful when making changes. Consult your manufacturer’s help pages or search for online advice about your specific make and model.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eAccessing your BIOS is typically done by rebooting your computer and hitting a specific key, usually \u003ccode\u003eDEL\u003c/code\u003e, \u003ccode\u003eF2\u003c/code\u003e, or \u003ccode\u003eF10\u003c/code\u003e, as the system starts. In the BIOS, look for \u003cstrong\u003eVirtualization Technology, VTx\u003c/strong\u003e or something similar.\u003c/p\u003e","exportId":"verify-and-troubleshoot-your-wsl2-environment-setup"},{"id":243542,"title":"Survey - Windows Environment Setup","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Windows Environment Setup module?\u003c/p\u003e\n\u003c/div\u003e","exportId":"ge479a6a1aca83482eef51632f78e4d4c"}]},{"id":18573,"name":"Alternative Environment Setup Instructions","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g8909b86e90a562076c98fb557f7b0fd9","items":[{"id":170535,"title":"AWS Cloud9 Environment Setup","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-cloud9-aws-environment-setup\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-cloud9-aws-environment-setup/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-cloud9-aws-environment-setup\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-cloud9-aws-environment-setup/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThe following instructions are for setting up AWS Cloud9, a cloud-based Integrated Development Environment. These instructions are provided as an alternative to setting up a local environment on your personal computer. \u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you successfully configured your Mac or Windows computer in the previous modules, you do not need to set up the AWS Cloud9 Environment\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eIf you have not attempted to set up your local environment, we recommend trying to do so now before continuing:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/learn-co-curriculum/environment-mac-os-catalina-setup\"\u003eMacOS Environment Instructions\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/learn-co-curriculum/wsl2\"\u003eWindows 10 WSL2 Environment Instructions\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIf you attempted the instructions for your operating system but ran into issues with setup, AWS Cloud9 can serve as a temporary environment and will allow you to complete and store your Flatiron School coding work in your browser.\u003c/p\u003e  \u003ch2\u003eImportant Notices\u003c/h2\u003e  \u003cp\u003eThe AWS Cloud9 IDE shoud only be used as a temporary environment solution. Later portions of our course content require you to have a local environment. The Cloud9 IDE will allow you to focus on the early course content and maintaining a good pace rather than being totally blocked due to environment setup issues. We recommend that you continue to try and get your own local environment set up as you work through your lessons and assignments.\u003c/p\u003e  \u003cp\u003eUsing the Cloud9 IDE requires a credit card and may incur charges from AWS if used for an extended period of time. If you are a new AWS customer, you will have access to the AWS Free Tier, providing the Cloud9 IDE for free for 12 months. There are some \u003ca href=\"https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank\u0026amp;all-free-tier.sort-order=asc\u0026amp;awsf.Free%20Tier%20Types=*all\"\u003eresource limits\u003c/a\u003e, including a limit of 750 hours of use per month. Although we don't expect you to hit this limit (750 hours divided by 30 days is 25 hours per day), \u003ca href=\"https://aws.amazon.com/cloud9/pricing/\"\u003eAWS provides an example of what pricing might look like\u003c/a\u003e, should you hit a limit.\u003c/p\u003e  \u003ch2\u003eSetting Up Your AWS Account\u003c/h2\u003e  \u003cp\u003eThe first step in accessing the Cloud9 IDE set up is to sign up for your AWS Account. Go to \u003ca href=\"https://aws.amazon.com/cloud9/\"\u003ehttps://aws.amazon.com/cloud9/\u003c/a\u003e and click \u003cstrong\u003eGet Started with AWS Cloud9\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-get-started-button.png\" alt=\"cloud9 get started button\"\u003e\u003c/p\u003e  \u003cp\u003eTo continue, you will need to set up an AWS account. Fill out the required account and credit card billing information. Once you have set up your account, head back to theh \u003ca href=\"https://aws.amazon.com/cloud9/\"\u003ecloud9 landing page\u003c/a\u003e and click \u003cstrong\u003eSign in to the Console\u003c/strong\u003e in the upper right.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-sign-in-to-console.png\" height=\"50px\"\u003e\u003c/p\u003e  \u003cp\u003eThe AWS Management Console will load. In the \u003cstrong\u003eFind Services\u003c/strong\u003e search bar, search for \u003ccode\u003eCloud9\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-find-services-aws.png\" alt=\"find cloud9\"\u003e\u003c/p\u003e  \u003cp\u003eClicking on the Cloud9 result will bring you to your Cloud9 homepage. The URL will be unique, depending on what AWS servers are hosting your IDE. We recommend bookmarking this page to get back to it easily. If you have already created a Cloud9 IDE, the environment instance will be listed here. In our case, we want to click the \u003cstrong\u003eCreate environment\u003c/strong\u003e button.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-create-environment-button.png\" height=\"50px\"\u003e\u003c/p\u003e  \u003cp\u003eAWS will prompt you to give your environment a name and an optional description. Click \u003cstrong\u003eNext Step\u003c/strong\u003e when ready.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-environment-name-and-description.png\" alt=\"cloud9 name and description\"\u003e\u003c/p\u003e  \u003cp\u003eAfter naming the environment, you will need to select the Environment type and Instance type. Choose \u003cstrong\u003eCreate a new EC2 instance for environment (direct access)\u003c/strong\u003e for Environment type. For Instance type, choose \u003cstrong\u003et2.micro(1 GiB RAM + 1 vCPU)\u003c/strong\u003e. This is the only Instance type eligible for the AWS free-tier but is more than enough processing power for our purposes.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-environment-and-instance-settings.png\" alt=\"cloud9 environment and instance settings\"\u003e\u003c/p\u003e  \u003cp\u003eBelow these options, you'll have a choice of Platform and Cost-saving settings. Leave the default options - \u003cstrong\u003eAmazon Linux\u003c/strong\u003e and \u003cstrong\u003eAfter 30 minutes\u003c/strong\u003e. Click \u003cstrong\u003eNext Step\u003c/strong\u003e to move on.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-platform-and-cost-savings.png\" alt=\"cloud9 platform and cost savings options\"\u003e\u003c/p\u003e  \u003cp\u003eOn the final page, you will have a chance to review your settings.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-environment-settings-review-page.png\" alt=\"cloud9 environment review page\"\u003e\u003c/p\u003e  \u003cp\u003eIf everything looks correct, click \u003cstrong\u003eCreate environment\u003c/strong\u003e. Your new Cloud9 IDE will load in the browser window. It may take a few minutes for AWS to configure everything.\u003c/p\u003e  \u003cp\u003eWhen everything is loaded, you should see an AWS Cloud9 welcome page.\u003c/p\u003e  \u003ch2\u003eExploring the Cloud9 IDE\u003c/h2\u003e  \u003cp\u003eThe Cloud9 IDE is divided into three main sections.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eOn the left side of the screen is your directory navigation. As you work on various assignments, this section will become populated with files and folders.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-directory-navigation.png\" height=\"200px\"\u003e\u003c/p\u003e  \u003cul\u003e \u003cli\u003eAlong the bottom of the page is a terminal. You will use this terminal to write and execute commands. Click the terminal, type \u003ccode\u003eecho \"hello world\"\u003c/code\u003e, and press \u003ccode\u003eenter\u003c/code\u003e / \u003ccode\u003ereturn\u003c/code\u003e to test it out. The terminal will print out \u003ccode\u003ehello world\u003c/code\u003e in response.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-terminal-example.png\" alt=\"cloud9 terminal example\"\u003e\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThe IDE's central section (where you see the welcome page) will display file contents. Clicking on files in the directory navigation will open them up in this section.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-nav-and-file-contents.png\" alt=\"cloud9 file contents sections\"\u003e\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you would like more space to type in your terminal or view file contents, you can click and drag the border just above the terminal to adjust the height of both.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eNow that you have your Cloud9 IDE up and running, it is time to do some configuration for this course.\u003c/p\u003e  \u003ch2\u003eConfigure the Cloud9 IDE\u003c/h2\u003e  \u003cp\u003eFor some of the content in this course, we'll need to install tools known as Ruby gems. These gems will help set up and test assignments you'll be working on. The only gem we need to install right now is \u003ccode\u003ebundler\u003c/code\u003e. \u003ccode\u003ebundler\u003c/code\u003e will actually help us in later lessons by installing \u003cem\u003eother\u003c/em\u003e gems we'll need.\u003c/p\u003e  \u003cp\u003eTo install \u003ccode\u003ebundler\u003c/code\u003e, type the following into the terminal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egem install bundler \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou should see a message \u003ccode\u003e1 gem installed\u003c/code\u003e once the installation is complete. \u003c/p\u003e  \u003ch2\u003eSetting up a GitHub Account\u003c/h2\u003e  \u003cp\u003eBefore we go any further, you will need a \u003ca href=\"https://github.com/\"\u003eGitHub\u003c/a\u003e account. GitHub will be necessary for working on lessons and assignments during the program.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \u003ca href=\"https://github.com/join\"\u003eGitHub signup webpage\u003c/a\u003e at \u003ca href=\"https://github.com/join\"\u003ehttps://github.com/join\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003eFill out the form and create your account\u003c/li\u003e \u003cli\u003eVerify the email address connected to your GitHub account\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eConfigure Git\u003c/h2\u003e  \u003cp\u003eNow that you have a GitHub account, it is time to configure Git. Git is a command-line tool that will allow us to access content stored on GitHub, including the lessons and assignments in this course. Git will also allow us to upload work that \u003cem\u003eyou\u003c/em\u003e do. \u003c/p\u003e  \u003cp\u003eGit should already be installed on your Cloud9 IDE. However, at the moment, you will be prompted to enter your GitHub account info every time you want to upload work.\u003c/p\u003e  \u003cp\u003eTo use Git without signing in every time, we will go through the process of creating a Secure Shell (SSH) key and associating that to your GitHub account. The following steps will ask you to do work both in your browser and your terminal.\u003c/p\u003e  \u003ch2\u003eAction Items\u003c/h2\u003e  \u003col\u003e \u003cli\u003eClick on the terminal in the Cloud9 IDE\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global color.ui true\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global user.name\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + your name and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: this should be your full name, not your GitHub username, in quotes.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global user.email\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + the email address you used to sign up to GitHub and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003essh-keygen\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eFor each prompt \u003cstrong\u003edo not type anything\u003c/strong\u003e, just continue to press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecat ~/.ssh/id_rsa.pub\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. Select and copy the output, starting with \u003ccode\u003essh-rsa\u003c/code\u003e. \u003c/li\u003e \u003cli\u003eOpen the \u003ca href=\"https://github.com/settings/ssh/new\"\u003eGitHub New SSH key form\u003c/a\u003e (\u003ca href=\"https://github.com/settings/ssh/new\"\u003ehttps://github.com/settings/ssh/new\u003c/a\u003e) \u003cem\u003e(Note: you need to be logged in to GitHub to access that link.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eType \"My Cloud9 IDE\" in the \"Title\" input field\u003c/li\u003e \u003cli\u003e\n\u003cp\u003ePaste what’s on your clipboard from step seven in the \"Key\" input field. Each key is unique, but it should look something like this (notice the beginning and end):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003essh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDWN9he+rGvUsQP\u003cbr\u003e0vldUZT7Z/nTCPqFAPqjiDhNX0SxKdlWeTvhHXjqFRzy0K3cXpgxe0NR\u003cbr\u003e/yLUphnFbsqCTzgLYTwMn/m8je/gOfPMtZcRuoOj69AJh5LM+TdLcFLZ\u003cbr\u003egL1sxjiLCcVO7Sn9ThTYEHSCsS6r2ZaTlFMfakeKBfH9pdWZHqR84pHP\u003cbr\u003eaq3QxkkrWC7RGrPsBPTYjLYuy7d3Mjw+fUar2oeLUpmMjxX8Fqs7Qf5L\u003cbr\u003eQR+4/MjA1PMVCVXSRDFUyDYZ756XBcnqQqyaJmSSfgSrk8OE3hqW\u003cbr\u003eMDFerSP0tzgq26YBWnqsqmCTrSiDgHzgSyO7B8FizTUgn/okdD1b \u003cbr\u003eec2-user@ip-174-35-43-2 \u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e \u003cli\u003e\u003cp\u003eClick \"Add SSH Key\"\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003cp\u003eIf you see your new SSH key beneath the \"SSH keys\" heading, continue below.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eYou've completed your Cloud9 environment setup and first assignment! You are now set to complete assignments in this first phase of this course. Equipped with this knowledge, you are now ready to tackle greater challenges!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://portal.flatironschool.com/\"\u003eFlatiron School\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/\"\u003eGitHub\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://aws.amazon.com/cloud9/\"\u003eAWS Cloud9\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"aws-cloud9-environment-setup"}]},{"id":16903,"name":"CLI","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g4c466de5aaf444ce16a483f0f77431d0","items":[{"id":157751,"title":"Introduction to the Command Line Interface","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"cli-essentials-bash-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine \"Command Line Interface\"\u003c/li\u003e\n\u003cli\u003eDescribe the purpose of CLIs\u003c/li\u003e\n\u003cli\u003eIdentify differences between command-line interface, terminal emulator, and\nshell\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eHave you ever noticed in movies or TV shows that when the \"awesome computer\nhacker person\" needs to do something \u003cem\u003ereally important\u003c/em\u003e, you see them typing a\nlot of text on a screen and \u003cem\u003eviolà\u003c/em\u003e something seemingly magical happens?\u003c/p\u003e\n\n\u003cp\u003eLike this...\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/prework/hack.gif\" alt=\"hacking 1\"\u003e\u003c/p\u003e\n\n\u003cp\u003eor this...\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/prework/hacking.gif\" alt=\"hacking 3\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYou might have wondered what's going on there. These computer \"heroes\" are often\nusing a way of working with the computer called the \"command-line interface\" or\n\"CLI.\" In the next lessons, you're going to learn to use the CLI so that you can\ndo \u003cem\u003eawesome\u003c/em\u003e stuff like move files, create directories, and even \u003cstrong\u003e\u003cem\u003erun\nprograms\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe're sorry to tell you that you'll probably never use the CLI to upload a virus\nto the alien spaceship or to see \"The Matrix.\" In reality, the CLI is a pretty\nbasic tool for doing basic, daily work. The most important reason\nto become very familiar with the CLI is this:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eTools you will need to be a developer will require you to use them through\n the command-line interface.\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSo let's start our journey toward mastering this way of working with our computers.\u003c/p\u003e\n\n\u003ch2\u003eFighting Fear\u003c/h2\u003e\n\n\u003cp\u003eMany computer users are familiar with performing actions and executing tasks\nwith \u003cem\u003egraphical\u003c/em\u003e interfaces (also known as the GUI - Graphical User Interface)\n\u003cem\u003einstead of\u003c/em\u003e command-line interfaces. Since the early 90's CLIs, which ruled\nthe world from about 1950 to 1990, started giving ground to the tools\nof GUI operating systems.\u003c/p\u003e\n\n\u003cp\u003eHaving seen nothing but things like\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMacOSX's \"Finder\"\u003c/li\u003e\n\u003cli\u003eWindows' \"File Explorer\"\u003c/li\u003e\n\u003cli\u003eor Linux's \"Commander\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003epeople began to find the CLI \"mysterious.\" But it's only mysterious because\nyou've not had a chance to work with it. Once you get a bit of practice, you're\ngoing to love it..\u003c/p\u003e\n\n\u003cp\u003eLots of people worry that using the CLI will get them in trouble, that they'll\nbreak their computer. We encourage you to think about the CLI like a high-quality,\nsharp kitchen knife: if you pay attention when you use it, you're going to have\na valuable ally on your side.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eWARNING\u003c/strong\u003e: It's true, it is easier to run dangerous commands through the CLI\nthan through a GUI. Commands that list files or create directories are not\nlikely to break anything. Commands that remove files or directories, however,\n\u003cem\u003eshould\u003c/em\u003e be used with caution. Just like that kitchen knife, sometimes you\nneed something that cuts through steak like a hot knife through butter. But\nyou must make sure your fingers are well clear of the blade when you cut.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eDefine \"Command Line Interface\"\u003c/h2\u003e\n\n\u003cp\u003eA CLI is a text-based conversation with the computer in which we type the\ncommands for\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eviewing, handling, and manipulating files on your computer\u003c/li\u003e\n\u003cli\u003elaunching software\u003c/li\u003e\n\u003cli\u003eworking with devices like printers or networks\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe CLI asks (or \"prompts\") the user for a command, the user types it in, and\nthen the computer runs the \"sentence\" that was typed in. It returns output, too\n(where appropriate).\u003c/p\u003e\n\n\u003ch2\u003eDescribe the Purpose of CLIs\u003c/h2\u003e\n\n\u003cp\u003eWith a CLI, users have wide control over the file system and operating system,\nand the tasks become simple.\u003c/p\u003e\n\n\u003cp\u003eFor example, you can ask, through the CLI, which files are located on the\n\u003ccode\u003eDesktop\u003c/code\u003e. You can create a new folder or delete it. But on top of\nfile-management kinds of activities, you can also find out how busy your CPU is,\nhow full your hard drive is, and whether your computer can find a network path\nto \u003ccode\u003eflatironschool.com\u003c/code\u003e. On top of this, you don't have to click through several\nmenus to get there!\u003c/p\u003e\n\n\u003cp\u003eExperienced developers would say \"the CLI gives you more control\" or that it's\n\"more powerful.\" With a GUI you use the mouse and the keyboard to control the\nfile system or the operating system, which is going to be slower than using the\ncommand line (once you become familiar with the commands). In a CLI, users only\nuse the keyboard and may need to execute only a few short commands to complete\ntheir equivalent GUI tasks. CLI users' fingers never leave the \"home row\"\n(assuming they can touch type) which \u003cem\u003eadds\u003c/em\u003e to their speed.\u003c/p\u003e\n\n\u003cp\u003eWhile some tasks may seem \"easier\" to do with a GUI, development-like tasks are\noften much more easily completed in the CLI. If you had a task such as renaming\n100+ files in a folder according to a formula based on their file size, you\nmight well spend hours on it in the GUI. Doing the same with the CLI on your\nside could be completed in seconds. And if you do that sort of thing often, you\ncan save that process and run it again whenever you wish! This is called\n\"scripting.\"\u003c/p\u003e\n\n\u003cp\u003eOther advantages include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWorking with computers remotely\u003c/li\u003e\n\u003cli\u003eManaging files on a file server or web server (e.g., managing a web page)\u003c/li\u003e\n\u003cli\u003eAutomating commonly performed tasks\u003c/li\u003e\n\u003cli\u003eLearning even more about computers\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIdentify Differences Between Command-Line Interface, Terminal Emulator, and Shell\u003c/h2\u003e\n\n\u003cp\u003eWhen you want to use the CLI, you launch a \"terminal\" program. For Mac users, the\ndefault program is called \u003cstrong\u003eTerminal\u003c/strong\u003e. For WSL users, the \u003cstrong\u003eUbuntu\u003c/strong\u003e application will act\nas your \"terminal.\" \u003c/p\u003e\n\n\u003cp\u003e\"Terminal\" is short for \"terminal emulator.\" A long time ago, people only had keyboards and monitors (no\nmouse or graphic interface!) that were tied to a computer that they all shared.\nThis monitor + keyboard device was called a \"terminal.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/prework/tty3.jpg\" alt=\"TTY\"\u003e\u003c/p\u003e\n\n\u003cp\u003eTerminals connected to a shared computer called a \"mainframe.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/cli-essentials/bash-intro/Image_56_MainFrameDiagram.png\" alt=\"\u0026quot;Mainframe Computers\u0026quot;\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNowadays, the \"terminal\" is \"emulated\" in software. It's \"virtual.\" You launch\nthe \"emulator\" by opening a program. And instead of being connected to a remote computer by\na cable, your \"terminal emulator\" talks to the computer you're actually typing\non.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/cli-essentials/bash-intro/Image_57_TerminalEmulator.png\" alt=\"\u0026quot;Terminal Emulator\u0026quot;\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhen you launch the \"terminal emulator\" program, it will immediately start a\nprogram called a \u003cem\u003eshell\u003c/em\u003e program. The \u003cem\u003eshell\u003c/em\u003e program is what actually prompts\nyou for input and returns the output. The shell most computers default to using\nis known as \u003ccode\u003ebash\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo help keep these terms straight, here's a guide:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWhen discussing the terminal, we mean the \"terminal emulation\" program, i.e.\nthe thing that handles raw input and output. \u003cem\u003eNOTE:\u003c/em\u003e Interpretation of the\ncommands themselves is handled by the \u003ccode\u003eshell\u003c/code\u003e, not the terminal. You can \u003cem\u003etype\u003c/em\u003e\ncommands into the terminal, though\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003eshell\u003c/code\u003e takes input, thinks, prints things out. It knows when a command\ndoesn't exist or make sense. It knows how to ask the CPU to do work. But it\n\u003cstrong\u003edoesn't\u003c/strong\u003e listen for keyboard keys being pressed and it \u003cstrong\u003edoesn't tell your\nterminal emulator how to display the results it calculated\u003c/strong\u003e. The terminal\nhandles the input/output (as we said) while the shell works with the\noperating system and the CPU\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ebash\u003c/code\u003e and \u003ccode\u003ezsh\u003c/code\u003e are a specific \u003ccode\u003eshell\u003c/code\u003es used by Unix systems (like Mac OSX\nand Linux).\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe phrase \"command-line\" is roughly the same as \u003ccode\u003eshell\u003c/code\u003e. It's a style of\ninteraction with the \u003ccode\u003eshell\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAlthough using a command line interface might seem intimidating at first as it\nrequires the memorization of dozens of different commands, it can be a valuable\nresource that makes using a computer easier. Using a command line, you can\nperform almost all of the same tasks that can be done with a GUI. However, many\ntasks can be performed quicker and can be much easier to automate.\u003c/p\u003e\n\n\u003cp\u003eUltimately though, many programming languages and programming tools assume that\nyou're comfortable with the CLI. You must have this comfort in order to be a\nsuccessful programmer.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything\"\u003eLifehacker on the Command Line\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.cybrary.it/0p3n/command-line-interface-cli-vs-graphical-user-interface-gui/\"\u003eCommand Line Interface (CLI) vs. Graphical User Interface (GUI)\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"introduction-to-the-command-line-interface"},{"id":157753,"title":"Bash Navigation","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"cli-essentials-bash-navigation\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-navigation/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-navigation\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-navigation/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDemonstrate How to Navigate with \u003ccode\u003ebash\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eIdentify our \"home directory\"\u003c/li\u003e\n\u003cli\u003eIdentify my logged-in username with \u003ccode\u003ewhoami\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eIdentify the \"current working directory\" with \u003ccode\u003epwd\u003c/code\u003e (\"print working directory\")\u003c/li\u003e\n\u003cli\u003eNavigate up one directory in the file system\u003c/li\u003e\n\u003cli\u003eChange directories using \u003ccode\u003ecd\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eUsing the CLI (command line interface) might seem like a big challenge to first-\ntime users who are afraid of making mistakes that could break their computers or\nruin their files. Fear not! We'll step you through it.\u003c/p\u003e\n\n\u003cp\u003eThe command-line interfaces, or \"shells\", used on OSX, Linux, and the \"Windows\nSubsystem for Linux (WSL),\" are called \u003ccode\u003ebash\u003c/code\u003e. We'll document how to use the\n\u003ccode\u003ebash\u003c/code\u003e CLI in this module.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: if you are using a Windows machine, you will not be able to use the \ncommands covered in this lesson until you have set up WSL.\u003c/p\u003e\n\n\u003ch2\u003eDemonstrate How to Navigate with \u003ccode\u003ebash\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eTo review: \u003ccode\u003ebash\u003c/code\u003e is a text-based interpreter that provides a \u003cem\u003ecommand-line\ninterface\u003c/em\u003e for controlling your computer (or operating system).\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: Bash is actually an acronym which stands for \u003cstrong\u003eB\u003c/strong\u003eourne-\u003cstrong\u003eA\u003c/strong\u003egain\n\u003cstrong\u003eSH\u003c/strong\u003eell. As the word \"again\" suggests, there are \u003cem\u003eother\u003c/em\u003e shells, some of\nwhich came before \u003ccode\u003ebash\u003c/code\u003e. There are also shells that have come along \u003cem\u003esince\u003c/em\u003e\n\u003ccode\u003ebash\u003c/code\u003e. Nevertheless most programmers use \u003ccode\u003ebash\u003c/code\u003e or something very similar.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eA great place to start learning about the CLI is by using it to do a task\nyou're already familiar with: looking to see what's inside folders like\nyour directories and desktop. Programmers call this activity: \u003cem\u003enavigating\u003c/em\u003e.\nIn the CLI we imagine that we're \"traveling\" to different places. We'll use\nmetaphors like \"go into the folder\" or \"go up one folder\" or \"visit the location\nat such-and-such \u003cem\u003epath\u003c/em\u003e.\"\u003c/p\u003e\n\n\u003cp\u003eAs you learn to navigate with the shell and get to used to it, you'll see that\nit's friendlier than it might seem at first. In no time, you'll be looking like\nthis typing-machine from \"Ghost in the Shell:\"\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://i.giphy.com/fsoCk5kgOcYMM.gif\" alt=\"\u0026quot;Ghost in the Shell\u0026quot;\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eIdentify Our \"Home Directory\"\u003c/h3\u003e\n\n\u003cp\u003eWhenever you open a terminal session (new window, new terminal tab, launching\nthe program for the first time after a reboot), you will be placed in (remember\nour \"travel\" metaphor!) your home directory. Directory names on Unix systems are\nwritten like:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e/parentdirectory/subdirectory/another/subdirectory/\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eWe call a bit of text meant to communicate location on a file system a \u003cem\u003epath\u003c/em\u003e.\nPaths use \u003ccode\u003e/\u003c/code\u003e to show levels of \"nesting.\"\u003c/p\u003e\n\n\u003cp\u003eFor example, a user's home directory is often written like: \u003ccode\u003e/Users/username\u003c/code\u003e or\n\u003ccode\u003e/home/username\u003c/code\u003e. The \u003ccode\u003e/\u003c/code\u003e on the far left of the path name means the very top of\nthe file system \"tree.\" The \u003ccode\u003e/\u003c/code\u003e directory is also called the \"root\" directory.\nIt contains all the \"top-level directories\" that can contain sub-directories\n(...which can contain sub-directories, which can contain sub-directories, on and\non).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e When navigating through a directory, it often helps if we picture the\nfile structure like a tree. With this visualization, we can refer to \"moving\nup\" or \"moving down\" between directory levels, and keep better track of not\nonly where our files are but where we are among our files. Here's an example:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/cli-essentials/bash-navigation/Image_58_DirectoryStructureDiagram.png\" alt=\"\u0026quot;Directory tree structure diagram\u0026quot;\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's take a second to look at some typical home directories:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e/Users/username\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis means the \"root\" contains a directory called \u003ccode\u003eUsers\u003c/code\u003e and \u003ccode\u003eUsers\u003c/code\u003e contains\n\u003ccode\u003eusername\u003c/code\u003e. Paths like this are typical for Mac OSX.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e/home/username\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis means the \"root\" contains a directory called \u003ccode\u003ehome\u003c/code\u003e and \u003ccode\u003ehome\u003c/code\u003e contains\n\u003ccode\u003eusername\u003c/code\u003e. Paths like this are typical for Linux.\u003c/p\u003e\n\n\u003cp\u003eObviously, our names (well, most of our names) are not \u003ccode\u003eusername\u003c/code\u003e. Instead we\nlog into our systems as \u003ccode\u003eByron Poodle\u003c/code\u003e or \u003ccode\u003eNancy the Cat\u003c/code\u003e. How can we find out\nwhat our logged-in-user name is?\u003c/p\u003e\n\n\u003cp\u003eLet's ask the shell to tell us who it thinks we are. We'll use \u003ccode\u003ewhoami\u003c/code\u003e to do\njust this in the next section.\u003c/p\u003e\n\n\u003ch3\u003eIdentify My Logged-In Username with \u003ccode\u003ewhoami\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eLet's start simply. Let's ask the computer who I am logged in as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ whoami\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/prework/whoami.jpg\" alt=\"\u0026quot;whoami\u0026quot;\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ewhoami\u003c/code\u003e command lets you see which user account you're logged in to from\nthe CLI. This might seem obvious, especially if you're logged in on your\npersonal computer. But Unix machines have multiple accounts by default (though\nyou may not have seen them yet).\u003c/p\u003e\n\n\u003cp\u003eMy system says I am \u003ccode\u003ekellyegreene\u003c/code\u003e. Based on what we learned about home\ndirectories, what do you think my home directory \u003cem\u003epath\u003c/em\u003e is? In the next section,\nwe'll ask the shell to tell us what our home directory's path is.\u003c/p\u003e\n\n\u003ch3\u003eIdentify the \"Current Working Directory\" With \u003ccode\u003epwd\u003c/code\u003e (\"print working directory\")\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003e$ pwd\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003eAny time you see the\u003c/em\u003e \u003ccode\u003e$\u003c/code\u003e \u003cem\u003echaracter, you shouldn't type it in. This\nis just a standard way to represent a bash prompt. Yours may or may not be a\u003c/em\u003e\n\u003ccode\u003e$\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou should see some output describing the directory you are currently in. It's\nprobably something like \u003ccode\u003e/Users/byron_the_poodle\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003epwd\u003c/code\u003e command stands for \"\u003cstrong\u003ep\u003c/strong\u003erint \u003cstrong\u003ew\u003c/strong\u003eorking \u003cstrong\u003ed\u003c/strong\u003eirectory\". As you\n\"navigate\" your file system, you might get lost. Just like wandering in a big\ncity, you can look for street signs to find out where you are. The \u003ccode\u003epwd\u003c/code\u003e command\nacts like those street signs. You'll never be lost again!\u003c/p\u003e\n\n\u003cp\u003eWe've just used \u003ccode\u003epwd\u003c/code\u003e to demonstrate that when we open a \u003ccode\u003ebash\u003c/code\u003e session the\noperating system automatically \"puts\" us in our home directory. Let's now do\nsome real \"navigation.\" In the next section we'll learn to move \"up\" one\ncontaining directory.\u003c/p\u003e\n\n\u003ch3\u003eNavigate Up One Directory in the File System\u003c/h3\u003e\n\n\u003cp\u003eTry typing this in the command line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ cd ..\u003cbr\u003e$ pwd\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou \"moved up\" one level of nesting, so you should now see that you are one\nlevel up from where you were and one level closer to the \"root\" directory.\nIn your terminal see this by using \u003ccode\u003epwd\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e/Users\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecd\u003c/code\u003e command stands for \"\u003cstrong\u003ec\u003c/strong\u003ehange \u003cstrong\u003ed\u003c/strong\u003eirectory\".\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e..\u003c/code\u003e is a shortcut for the directory \u003cem\u003eabove\u003c/em\u003e the working directory. The\n\u003ccode\u003ebash\u003c/code\u003e shell provides a series of \"shortcuts\" for some commonly-used file system\npaths. \u003ccode\u003e..\u003c/code\u003e means \"this directory's containing folder. These shortcuts look\nstrange but they're designed to be \u003cem\u003eshort\u003c/em\u003e and therefore \u003cem\u003eeasy to type\u003c/em\u003e and\ntherefore \u003cem\u003efast\u003c/em\u003e and, as we've hinted, the CLI is all about speed.\u003c/p\u003e\n\n\u003cp\u003eSo in this command example we said: \u003ccode\u003echange directory to the parent folder\u003c/code\u003e. You\ncan do this all the way back up to the \u003ccode\u003e/\u003c/code\u003e directory.\u003c/p\u003e\n\n\u003cp\u003eLet's use \u003ccode\u003ecd\u003c/code\u003e to get back to our home directory.\u003c/p\u003e\n\n\u003ch3\u003eChange Directories Using \u003ccode\u003ecd\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003ebash\u003c/code\u003e shell provides default shortcut for your home directory: \u003ccode\u003e~\u003c/code\u003e. Use \u003ccode\u003ecd\n..\u003c/code\u003e to go \"up\" a few directories (why not all the way to the root?).\u003c/p\u003e\n\n\u003cp\u003eThen, when you run this command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ cd ~\u003cbr\u003e$ pwd\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou'll see you're back in your home directory. Use \u003ccode\u003epwd\u003c/code\u003e to verify!\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eSHORTCUT\u003c/strong\u003e By the way, if you enter \u003ccode\u003ecd\u003c/code\u003e with no argument, you'll\nbe taken to your home directory.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAnother shortcut, that might seem not too useful at first, is \u003ccode\u003e.\u003c/code\u003e meaning \"the\ncurrent directory I'm in.\u003c/p\u003e\n\n\u003cp\u003eIf you try this command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ cd .\u003cbr\u003e$ pwd\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see you are still in the same directory where you wrote\nthe command.\u003c/p\u003e\n\n\u003cp\u003eInstead of using shortcuts like \u003ccode\u003e..\u003c/code\u003e, \u003ccode\u003e.\u003c/code\u003e, or \u003ccode\u003e~\u003c/code\u003e, you can give a\npath to \u003ccode\u003ecd\u003c/code\u003e and it will \"take\" you there.\u003c/p\u003e\n\n\u003cp\u003eTry \u003ccode\u003ecd /Applications\u003c/code\u003e or even \u003ccode\u003ecd /\u003c/code\u003e. You can run a \u003ccode\u003epwd\u003c/code\u003e in these directories\nand see that you've \"navigated into\" them. Try \u003ccode\u003ecd alksdjfalksdjfalskdjf\u003c/code\u003e. What\nerror does \u003ccode\u003ebash\u003c/code\u003e give you? Is that what you expected? We'll discuss more\nabout the types of paths you can give \u003ccode\u003ebash\u003c/code\u003e in the next section.\u003c/p\u003e\n\n\u003ch3\u003ePaths in Shell\u003c/h3\u003e\n\n\u003cp\u003eThe path supplied to the \u003ccode\u003ecd\u003c/code\u003e command can be either \u003cem\u003eabsolute\u003c/em\u003e or \u003cem\u003erelative\u003c/em\u003e\npaths. An absolute path is a path that always gets you to the same folder. You\ncan recognize them because they start with \u003ccode\u003e/\u003c/code\u003e. For example\n\u003ccode\u003e/Users/kellyegreene\u003c/code\u003e, is an absolute path.\u003c/p\u003e\n\n\u003cp\u003eA relative path is a path \u003cstrong\u003erelative\u003c/strong\u003e to the working directory you're \"in\" at\nthe time you write the command. They start\nwith the name of a directory or a file. For example \u003ccode\u003ekellyegreene/Documents\u003c/code\u003e, is\na relative path.\u003c/p\u003e\n\n\u003cp\u003eIf I were in my home directory \u003ccode\u003e/Users/kellyegreene\u003c/code\u003e and said \u003ccode\u003ecd\nmixtapes/the-masked-rapper-vol-1\u003c/code\u003e, it would work! If I were in\n\u003ccode\u003e/Users/annoyingbrother\u003c/code\u003e and said \u003ccode\u003ecd mixtapes/the-masked-rapper-vol-1\u003c/code\u003e, \u003ccode\u003ebash\u003c/code\u003e\nwould return an error because that sub-directory doesn't exist there (because\nI, Kellye Greene, am the Masked Rapper, while my brother can't rhyme).\u003c/p\u003e\n\n\u003cp\u003eAbsolute paths and relative paths might sound confusing in CLI universe, but\nwe intuitively understand this difference in our day-to-day lives. We usually call\nthis difference \u003cem\u003econtext\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf someone asks if you want to go get a slice of pizza for lunch they're probably\nthinking of somewhere close to where you're currently located –\nsomewhere close \u003cem\u003erelatively\u003c/em\u003e speaking. They're expecting you to say something like:\u003c/p\u003e\n\n\u003cp\u003e\"Oh yeah, let's go West on 18th street, cross 6th Avenue and go to the place on\nthe corner.\"\u003c/p\u003e\n\n\u003cp\u003eWhat would surprise the heck out of them would be if you gave them absolute\ncoordinates; and it would be \u003cem\u003eeven more\u003c/em\u003e surprising if that location were far\naway. How might they react if you said:\u003c/p\u003e\n\n\u003cp\u003e\"Oh yeah, let's go to 41.890221 and -87.633904!\"\u003c/p\u003e\n\n\u003cp\u003eLatitude and longitude give \u003cem\u003eabsolute\u003c/em\u003e directions based on the Equator and Prime Meridian. They're not\ncommonly used by humans to make decisions on where to get lunch (even if\nthey point, in fact, to one of our favorite pizzerias in Chicago).\u003c/p\u003e\n\n\u003cp\u003eSo far we've been finding out where we are in the file system \"tree,\" how about\nwe find out what's \u003cem\u003ein\u003c/em\u003e these directories (besides other directories)? We'll\ncover that in our next lesson.\u003c/p\u003e\n\n\u003ch2\u003eTime-Saving Tip: Tab Completion\u003c/h2\u003e\n\n\u003cp\u003eAs you type in commands in the shell, you can use \"tab completion.\" Tab\ncompletion allows the shell to be smart and to try and guess what command you\nwant to run when you hit the tab.  If there's only one logical way to complete\nyour command, \u003ccode\u003ebash\u003c/code\u003e will fill in the rest for you, or will show you the\npossibilities and you can add more letters until you can tab-complete your\ncommand.\u003c/p\u003e\n\n\u003cp\u003eFor example let's say we have the following directory structure with two sub-\ndirectories:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eflatiron_school/\u003cbr\u003eflatiron_building/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf I type \u003ccode\u003e$ cd f\u003c/code\u003e and then hit tab, it will fill in everything up until the\nconflict so I'll see \u003ccode\u003e$ cd flatiron_\u003c/code\u003e.  If I then add the \u003ccode\u003es\u003c/code\u003e and hit tab it\nwill fill in \u003ccode\u003e$ cd flatiron_school\u003c/code\u003e and I can hit enter.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAs we keep exploring and working with the command line, we will start to unlock\nand understand its full potential! Adopting the terminal\ncan allow us to become more productive users.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything\"\u003eLifehacker on the Command Line\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://cbednarski.com/articles/understanding-environment-variables-and-the-unix-path/\"\u003eEnvironment Variables\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html\"\u003eBuilt-in Shell Commands\u003c/a\u003e \u003cem\u003eVery useful\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.thegeekstuff.com/2010/08/bash-shell-builtin-commands/\"\u003e15 Useful Bash Commands\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://blog.seldomatt.com/blog/2012/10/08/bash-and-the-one-true-path/\"\u003eThe One True Path\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Path_(computing)\"\u003eMore on paths - Wikipedia\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"bash-navigation"},{"id":157756,"title":"Navigating Files and Directories in Bash","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"cli-essentials-bash-files-and-directories\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-files-and-directories/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-files-and-directories\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-files-and-directories/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eList directory files in the shell with \u003ccode\u003els\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eMove or rename files and directories with \u003ccode\u003emv\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eCopy Files with \u003ccode\u003ecp\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eCreate empty files with \u003ccode\u003etouch\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eMake new directories with \u003ccode\u003emkdir\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eRemove files with \u003ccode\u003erm\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the previous lesson we learned how to \"navigate\" the directory structure of our file system. But our file systems (and lives) would be so boring without \u003cem\u003efiles\u003c/em\u003e. Copying files, moving files, reading the contents of files, feeding files to the \u003ccode\u003eruby\u003c/code\u003e program, cat .gifs. We looooooove files.\u003c/p\u003e  \u003cp\u003eThis lesson will show you how to work with your files. In time, you might stop using Finder and other tools because it's so much faster (and fun!) to use the CLI.\u003c/p\u003e  \u003ch2\u003eList Directory Files in the Shell with \u003ccode\u003els\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eIn a new terminal, which automatically puts you in your \u003cem\u003ehome directory\u003c/em\u003e,  try this: \u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe command \u003ccode\u003els\u003c/code\u003e stands for \"\u003cstrong\u003el\u003c/strong\u003ei\u003cstrong\u003es\u003c/strong\u003et\" — the first character is a lower case letter L. After you run it, you should then see a list of all the files within your working directory. \u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e For Ubuntu/WSL users, your home directory may start out empty, so you might not see anything running \u003ccode\u003els\u003c/code\u003e. If this is the case, try creating a folder. In fact, now is a good time to create a \u003ccode\u003eDevelopment\u003c/code\u003e folder where you can store your coursework. We'll use \u003ccode\u003emkdir\u003c/code\u003e to create the folder (more on this in a moment):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emkdir Development \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOnce the folder is created, run \u003ccode\u003els\u003c/code\u003e again and you should see \u003ccode\u003eDevelopment\u003c/code\u003e listed.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eTrue to Unix style the \u003ccode\u003els\u003c/code\u003e command is easy to type and \u003cstrong\u003e\u003cem\u003eshort\u003c/em\u003e\u003c/strong\u003e (both keys on the home row of a keyboard, one letter on one hand the other on the other hand, it's about as fast as it can get; handy for a command we will run \u003cem\u003eall the time\u003c/em\u003e).\u003c/p\u003e  \u003cp\u003eWe can list the contents of another directory by providing an absolute or relative path\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls pathname \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eUsing Flags with Commands\u003c/h3\u003e  \u003cp\u003eWe can use flags on most Unix commands to give more specific instructions or to change the output. Most programs accept flags, or options for execution.\u003c/p\u003e  \u003cp\u003eA flag is denotated by a \u003ccode\u003e-\u003c/code\u003e (\"dash\").\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls -l \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis prints out a list of all the files with \"long form\" output: it will tell us details about which user account owns the file, what the permissions for users are on that file, and the file name.\u003c/p\u003e  \u003cp\u003eFor example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls  /var/tmp\u003cbr\u003eSIMToolKit\u003cbr\u003ehi\u003cbr\u003epfwtfp-dice-thrower-from-a-file\u003cbr\u003esinatra-user-auth \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ebecomes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls -l /var/tmp\u003cbr\u003etotal 0\u003cbr\u003edrwxrwxrwx   3 byron.poodle  wheel   96 Jun  5  2018 SIMToolKit\u003cbr\u003edrwxr-xr-x   2 byron.poodle  wheel   64 Jun  5  2018 hi\u003cbr\u003edrwxr-xr-x  12 byron.poodle  wheel  384 Nov  9 15:35 pfwtfp-dice-thrower-from-a-file\u003cbr\u003edrwxr-xr-x  18 byron.poodle  wheel  576 May 21  2018 sinatra-user-auth \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou don't need to know what all those extra bits of information mean now, but realize that flags can really enrich the output you get.\u003c/p\u003e  \u003cp\u003eSingle-character options can typically be combined with each other. For example, in the \u003ccode\u003els\u003c/code\u003e command, \u003ccode\u003eh\u003c/code\u003e is an option on the \u003ccode\u003el\u003c/code\u003e flag meaning \"\u003cstrong\u003eh\u003c/strong\u003euman readable formats.\" They can be combined with \u003ccode\u003ea\u003c/code\u003e meaning \"\u003cstrong\u003ea\u003c/strong\u003ell information\" including \"hidden files\" (files that start with a \u003ccode\u003e.\u003c/code\u003e, often used for internal operating system configuration —\u0026nbsp;we'll expand on this in a moment).\u003c/p\u003e  \u003cp\u003eTry these three together:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls -lah \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd also:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls -l -a -h \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBoth are valid input options and mean the same thing, as far as \u003ccode\u003els\u003c/code\u003e is concerned.\u003c/p\u003e  \u003cp\u003eWhen you entered \u003ccode\u003e$ ls -lah\u003c/code\u003e above, you should have a received a list of files including some that you hadn't seen from entering just \u003ccode\u003e$ ls\u003c/code\u003e before:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edrwxr-xr-x   6 kellyegreene  staff   204B Jun  2 11:21 .\u003cbr\u003edrwxr-xr-x   5 kellyegreene  staff   170B May 28 15:52 ..\u003cbr\u003e-rw-r--r--@  1 kellyegreene  staff   6.0K May 28 15:52 .DS_Store\u003cbr\u003edrwxr-xr-x  13 kellyegreene  staff   442B Jun  2 11:02 .git\u003cbr\u003e-rw-r--r--   1 kellyegreene  staff    66B May 28 15:49 .learn\u003cbr\u003e-rw-r--r--   1 kellyegreene  staff    11K Jun  2 11:21 README.md \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that at the top of the file output there are a bunch of files that start with a \u003ccode\u003e.\u003c/code\u003e, like \u003ccode\u003e.DS_Store\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eFiles like \u003ccode\u003e.DS_Store\u003c/code\u003e are not listed. That's because files and directories that start with a \u003ccode\u003e.\u003c/code\u003e are \u003cem\u003ehidden\u003c/em\u003e files. Shells are often configured by putting information in these \u003cem\u003ehidden\u003c/em\u003e files. We'll not talk about these types of files in this lesson except to say that sometimes things are hidden until you add a flag.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003eCombining flags is only valid for single-letter options. A \"long option\" such as\u003c/em\u003e \u003ccode\u003e--force\u003c/code\u003e \u003cem\u003eis defined with more than one character and must be entered with its own flag.\u003c/em\u003e\u003c/p\u003e  \u003ch2\u003eMove or Rename Files and Directories with \u003ccode\u003emv\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eMove, or \u003ccode\u003emv\u003c/code\u003e is a command that moves one or more files or directories from one place to another.  To move a file from the current directory to another location, enter a path as the third word on the command line.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ mv filename ./dir1 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can also rename a file or directory using the \u003ccode\u003emv\u003c/code\u003e command. To rename a file with \u003ccode\u003emv\u003c/code\u003e, the third word on the command line must end in the new filename.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ mv original_program.rb renamed_program.rb \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe could combine these two usages as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ mv temp_download.gif ~/Desktop/cats_with_weapons/ninja_cat.gif \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Look how we're using the \u003ccode\u003e~\u003c/code\u003e shortcut!\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eCopy Files with \u003ccode\u003ecp\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eIf you think about it, move is really \"copy, but delete the original.\" Well, \u003ccode\u003ecp\u003c/code\u003e does a \u003ccode\u003emv\u003c/code\u003e, but doesn't delete the original. It's therefore a \"copy.\"\u003c/p\u003e  \u003cp\u003eIt uses the same snytax as \u003ccode\u003emv\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecp letter_to_mom.txt letter_to_mom-2019-02-15.txt \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you want to copy a directory and its file contents, you need to use the \u003ccode\u003e-r\u003c/code\u003e  flag.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecp -r february_cat_gifs ~/Desktop/vital_media_files \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Look how we're using the \u003ccode\u003e~\u003c/code\u003e shortcut! This expands into \u003ccode\u003e/Users/username/Desktop/vital_media_files\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eCreate Empty Files with \u003ccode\u003etouch\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eWe can use the \u003ccode\u003etouch\u003c/code\u003e command to create empty files in the current directory. Try:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ touch hello_world.rb \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow try:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou should see the file you just created, \u003ccode\u003ehello_world.rb\u003c/code\u003e, in the working directory. Note that this is an empty file and has nothing inside of it, because you just created it.\u003c/p\u003e  \u003ch2\u003eMake New Directories with \u003ccode\u003emkdir\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eWe can make directories with the \u003ccode\u003emkdir\u003c/code\u003e command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ mkdir name_of_directory \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if you enter \u003ccode\u003els\u003c/code\u003e you should see the empty directory you just created in the working directory.\u003c/p\u003e  \u003ch2\u003eRemove Files with \u003ccode\u003erm\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eTo delete a file, we can enter \u003ccode\u003erm\u003c/code\u003e at a shell prompt. \u003cstrong\u003eNote:\u003c/strong\u003e Deleting a file with rm is \u003cem\u003epermanent\u003c/em\u003e. This action cannot be undone.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ rm hello_world.rb \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMuch like \u003ccode\u003ecp\u003c/code\u003e, if you want to delete a directory, you need to provide the \u003ccode\u003e-r\u003c/code\u003e flag\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ rm -r ~/Desktop/pokemon_fan_fiction \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThere are additional options to \u003ccode\u003erm\u003c/code\u003e:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e-i (interactive) — Prompts you to confirm the deletion. This option can stop you from deleting a file by mistake.\u003c/li\u003e \u003cli\u003e-f (force) — Overrides interactive mode and removes the file(s) without prompting. Use this with caution. This action cannot be undone!\u003c/li\u003e \u003cli\u003e-v (verbose) — Shows the progress of the files as they are being removed.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThere are a variety of commands you can use to manipulate files via the command line. If this list seems overwhelming at first, remember that it takes all programmers a little time to practice their CLI workflows. Refer back to these resources as you need to, and it will get easier as you go along.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything\"\u003eLifehacker on the Command Line\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://cbednarski.com/articles/understanding-environment-variables-and-the-unix-path/\"\u003eEnvironment Variables\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html\"\u003eBuilt-in Shell Commands\u003c/a\u003e \u003cem\u003eVery useful\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://www.thegeekstuff.com/2010/08/bash-shell-builtin-commands/\"\u003e15 Useful Bash Commands\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://blog.seldomatt.com/blog/2012/10/08/bash-and-the-one-true-path/\"\u003eThe One True Path\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Path_(computing)\"\u003eMore on paths - Wikipedia\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://plus.google.com/101960720994009339267/posts/R58WgWwN9jp\"\u003eThe history of hidden files\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"navigating-files-and-directories-in-bash"},{"id":157758,"title":"Working with Programs in Bash","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"cli-essentials-bash-programming\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-programming/blob/master/README.md\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-programming/blob/master/README.md/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eView file contents with \u003ccode\u003ecat\u003c/code\u003e and \u003ccode\u003eopen\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003ePrint text with \u003ccode\u003eecho\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eRedirect text\u003c/li\u003e \u003cli\u003eSet \u003ccode\u003ePATH\u003c/code\u003e and environment variables\u003c/li\u003e \u003cli\u003eLook up Bash documentation with \u003ccode\u003eman\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eSometimes when we interact with computers via the graphical user interface (GUI), it takes several clicks or deep dives into the controls to accomplish what we want. We've started to see in the earlier lessons that interacting via the command line interface (CLI) can make us faster!\u003c/p\u003e  \u003cp\u003eAs we begin to build applications, it will become important to also be familiar with tasks related to displaying files, editing them with a code editor, or getting information from the operating system.\u003c/p\u003e  \u003ch2\u003eView File Contents With \u003ccode\u003ecat\u003c/code\u003e and \u003ccode\u003eopen\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eWe can print the contents of a file by using the \u003ccode\u003ecat\u003c/code\u003e command. Entering \u003ccode\u003e$ cat [filename]\u003c/code\u003e reads a file and prints the content to your command line. (In the previous command \u003ccode\u003e[filename]\u003c/code\u003e is just a placeholder  for where you would write out a valid file name).\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: \u003ccode\u003ecat\u003c/code\u003e comes from \u003ccode\u003ecatenate\u003c/code\u003e a middle-English word that means \"make like a chain\". Unix thinks of a file as a \"chain of bytes\" that it feeds to the screen.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003eAny time you see the\u003c/em\u003e \u003ccode\u003e$\u003c/code\u003e \u003cem\u003echaracter, you shouldn't type it in. This is just a standard way to represent a bash prompt. Yours may or may not be a\u003c/em\u003e \u003ccode\u003e$\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003eopen\u003c/code\u003e command is interesting because it will trigger the default action associated with the file type. \"Default actions\" are defined by the operating system. This command is only available on Mac OSX.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003e$ open .\u003c/code\u003e will popup a Finder window with the current directory in finder (recall: \u003ccode\u003e.\u003c/code\u003e is an alias to the current directory). Entering \u003ccode\u003e$ open hello_world.rb\u003c/code\u003e will run the default program for files of a \"Ruby\" type – usually a code editor. Some other platforms have adopted an \u003ccode\u003eopen\u003c/code\u003e program because they liked OSX's idea. Try it out on your computer and see if it's supported.\u003c/p\u003e  \u003ch2\u003ePrint Text With \u003ccode\u003eecho\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eDevelopers will often find themselves needing to write text in the terminal. The \u003ccode\u003eecho\u003c/code\u003e command has a number of uses -- probably the most common is to have a program display a message or instructions, such as \"Please enter Y or N\" in a dialog with users.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003eecho\u003c/code\u003e command takes a string and prints it to the screen.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ echo \"Hi world\"\u003cbr\u003eHi world \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eRedirect Text\u003c/h2\u003e  \u003cp\u003eYou can \"redirect\" \u003ccode\u003eecho\u003c/code\u003e text into a file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eecho \"I'm printing to the screen\" \u0026gt;\u0026gt; [filename] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is called \u003cem\u003eredirection\u003c/em\u003e. We're \"redirecting\" what we see on the monitor into a file. The \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e symbol will \u003cstrong\u003e\u003cem\u003eappend\u003c/em\u003e\u003c/strong\u003e content into the file while \u003ccode\u003e\u0026gt;\u003c/code\u003e means \u003cstrong\u003e\u003cem\u003eoverwrite\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eBE CAREFUL\u003c/strong\u003e Using \u003ccode\u003e\u0026gt;\u003c/code\u003e when you mean \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e can make you real sad because \u003ccode\u003e\u0026gt;\u003c/code\u003e \"clobbers\" or \"overwrites\" the file. Some files on your system are \u003cstrong\u003every\u003c/strong\u003e important and \"clobbering\" them could hurt your machine!\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eSet \u003ccode\u003ePATH\u003c/code\u003e and Environment Variables\u003c/h2\u003e  \u003cp\u003eAn \u003cem\u003eenvironment variable\u003c/em\u003e is a variable which can be configured to change the way the shell works and used by multiple applications or processes. You might tell the shell, via an environment variable \"use colors whenever you can\" or \"never use colors in output\". Discussing how to set these up is beyond our scope right now. But it's important to see that environment variables, like directory path shortcuts, or those mysterious \u003cem\u003ehidden files\u003c/em\u003e configure and adjust our CLI experience.\u003c/p\u003e  \u003cp\u003eFor example, \u003ccode\u003ePATH\u003c/code\u003e is a very important environment variable. In Unix, programs are often installed in many different directories. Directories whose names are listed in the \u003ccode\u003ePATH\u003c/code\u003e variable can have their programs run without having to \u003ccode\u003ecd\u003c/code\u003e to the directory where they are to run them (OR provide a long absolute path).\u003c/p\u003e  \u003cp\u003ePaths are assigned to the \u003ccode\u003ePATH\u003c/code\u003e and separated by \u003ccode\u003e:\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's try viewing the current \u003ccode\u003ePATH\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eecho $PATH\u003cbr\u003e/Users/kellyegreene/.rvm/gems/ruby-2.4.1/bin:/Users/kellyegreene/.rvm/gems/ruby-2.4.1@global/bin:/Users/kellyegreene/.rvm/rubies/ruby-2.4.1/bin:/Users/kellyegreene/.nvm/versions/node/v8.9.4/bin:/Applications/Postgres.app/Contents/Versions/9.4/bin:/usr/local/share/npm/lib/node_modules/grunt-cli/bin:/usr/local:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/kellyegreene/Library/Android/sdk/tools:/Users/kellyegreene/Library/Android/sdk/platform-tools:/Users/kellyegreene/Library/Android/sdk/tools:/Users/kellyegreene/Library/Android/sdk/platform-tools:/Users/kellyegreene/.rvm/bin \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAny program in these directories can be run by simply typing the program name. When \u003ccode\u003ekellyegreene\u003c/code\u003e types \u003ccode\u003eruby\u003c/code\u003e the shell starts by looking at the first directory in the \u003ccode\u003ePATH\u003c/code\u003e to see if it finds a program that matches.\u003c/p\u003e  \u003cp\u003eIn this case it \u003cem\u003ewould\u003c/em\u003e find the \u003ccode\u003eruby\u003c/code\u003e program in \u003ccode\u003e/Users/kellyegreene/.rvm/gems/ruby-2.4.1/bin\u003c/code\u003e and run it. The first match in the \u003ccode\u003ePATH\u003c/code\u003e variable wins so the order of the \u003ccode\u003ePATH\u003c/code\u003e is important.\u003c/p\u003e  \u003cp\u003eIf this directory \u003cstrong\u003ewere not\u003c/strong\u003e in the \u003ccode\u003ePATH\u003c/code\u003e, \u003ccode\u003ekellyegreene\u003c/code\u003e would have to do one of the following to run \u003ccode\u003eruby -v\u003c/code\u003e — a command that shows the program's version.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecd /Users/kellyegreene/.rvm/gems/ruby-2.4.1/bin ./ruby -v \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eor\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e/Users/kellyegreene/.rvm/gems/ruby-2.4.1/bin/ruby -v \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the shell, all programs that are not in the path have to be run with an absolute path. In both of these examples, you should see how we send the shell a full absolute path (remember what \u003ccode\u003e.\u003c/code\u003e means!).\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e \u003cem\u003eIf you want to find out where the program being run is located when you type a command at the command line, use the which command; entering\u003c/em\u003e \u003ccode\u003e$ which ruby\u003c/code\u003e \u003cem\u003ewill tell you where the Ruby binary is located.\u003c/em\u003e Whenever you type a command the path is going to be searched in order until it finds an executable that matches name\u003c/p\u003e  \u003cp\u003eThere are a lot of environment variables and, as you grow as a developer, you will encounter more of them. Others you might see include:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eExecution mode (e.g., production, development, staging, etc.)\u003c/li\u003e \u003cli\u003eDomain names\u003c/li\u003e \u003cli\u003eAPI URL/URIs\u003c/li\u003e \u003cli\u003eGIT_AUTHOR\u003c/li\u003e \u003cli\u003eGIT\u003cem\u003eAUTHOR\u003c/em\u003eEMAIL\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eEventually, you'll learn to configure your shell environment to help you do work more efficiently. You'll define variables like \u003ccode\u003eBIG_PROJECT_DIRECTORY\u003c/code\u003e or write custom programs that you can run from the CLI that make you more efficient.\u003c/p\u003e  \u003ch2\u003eLook Up Bash Documentation With \u003ccode\u003eman\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003eman\u003c/code\u003e command is the key to command line wisdom. It brings up a \u003cstrong\u003eman\u003c/strong\u003eual page for almost any command. It's the equivalent of a help system for the command line. When Unix was first invented, its manuals were so big and heavy and expensive to print the developers had the idea to write the \u003ccode\u003eman\u003c/code\u003eual in the operating system itself. This is an idea that's been popular with programmers and environmentalists and mail-carriers ever since.\u003c/p\u003e  \u003cp\u003eFor example, if you're curious what the options on \u003ccode\u003eps\u003c/code\u003e mean, you can go to your terminal and enter:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ man ps \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the terminal output, read about what the \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eu\u003c/code\u003e options do. Notice that the \u003ccode\u003ex\u003c/code\u003e option is a suffix on the \u003ccode\u003ea\u003c/code\u003e option. The \u003ccode\u003eman\u003c/code\u003e command reveals very useful reference documentation on the various bash commands. You'll notice that your command prompt has disappeared. Don't panic! You're just inside the documentation. Enter \u003ccode\u003e$ q\u003c/code\u003e (\"\u003cstrong\u003eq\u003c/strong\u003euit\") to return to your command prompt.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eSoftware developers still rely heavily on command-line interfaces to perform tasks more efficiently, configure their machine, or access programs and program features that are not available through a graphical interface. File interactions and process management may be difficult for new CLI users to grasp because the tools used are different from their graphical counterparts. However, with a little practice, these new ways of working will become your ally.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.freecodecamp.org/news/the-cat-command-in-linux-how-to-create-a-text-file-with-cat-or-touch/\"\u003eUsing The Terminal Command ‘cat’ To View The Contents Of Files\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"working-with-programs-in-bash"},{"id":157761,"title":"Organizing Your Work for this Course","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"organizing-work-on-your-computer\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/organizing-work-on-your-computer/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/organizing-work-on-your-computer\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/organizing-work-on-your-computer/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eFrom now on, you'll be executing code on you own computer. For each and every lab, you'll be copying the code to your computer using \u003ca href=\"https://git-scm.com\"\u003eGit\u003c/a\u003e.  You will then be able to run and test your code in your terminal, and submit your work using the learn-co gem.  \u003c/p\u003e\n\n\u003ch3\u003eSetting Up Your Directory Structure\u003c/h3\u003e\n\n\u003ciframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/H-6D2rOBVrg\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e**Note for WSL Users: Although the video above is for the macOS, the commands shown in the terminal will be the same in\nyour Ubuntu shell. When you open Ubuntu, you should start in your home directory. Confirm this with the command \u003ccode\u003epwd\u003c/code\u003e. In\nUbuntu, your home directory will start off empty, so there will not be a \u003ccode\u003eDevelopment\u003c/code\u003e folder present, and running \u003ccode\u003els\u003c/code\u003e will\nnot produce any results. You can create a \u003ccode\u003eDevelopment\u003c/code\u003e folder with \u003ccode\u003emkdir Development\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e","exportId":"organizing-your-work-for-this-course"},{"id":157763,"title":"Complete Your First Software Engineering Assignment","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-completing-assignments\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-completing-assignments/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-completing-assignments\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-completing-assignments/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eDuring this course, you will work on various assignments as you learn to code. All assignments will be interactive pieces of curriculum that require some work. Some assignments may ask you to follow a set of instructions, while others will ask you to figure out your own solution to pass specific tests. This lesson is your first assignment!\u003c/p\u003e  \u003cp\u003eAll assignments are hosted on GitHub. In order to work on them, however, you will need to complete work on your local machine. The general process is:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eGo to the assignment's GitHub page\u003c/li\u003e \u003cli\u003eCreate a personal copy (a 'fork') of the assignment\u003c/li\u003e \u003cli\u003eDownload your personal copy (referred to as 'cloning') to your environment\u003c/li\u003e \u003cli\u003eComplete the required work\u003c/li\u003e \u003cli\u003eUpload the work you've done to your personal copy of the assignment on GitHub\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eFor this assignment, we'll do a quick walkthrough of these steps so you will know what to do in future assignments.\u003c/p\u003e  \u003ch3\u003eA Quick Note on Organizing Work on Your Machine\u003c/h3\u003e  \u003cp\u003eThrough this course, you will be downloading many assignments, so it is important to take a moment now to think about how you'll organize this work on your computer. You are welcome to do what you like, but we recommend setting up a directory where you can keep all of your work for this course.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eGo to your terminal and navigate to your home directory by typing \u003ccode\u003ecd ~\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eCreate a \u003ccode\u003eDevelopment\u003c/code\u003e folder by typing \u003ccode\u003emkdir Development\u003c/code\u003e (if you're a mac user, this folder already exists)\u003c/li\u003e \u003cli\u003eNavigate into this folder with \u003ccode\u003ecd Development\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eIn here, create a \u003ccode\u003ecode\u003c/code\u003e folder with \u003ccode\u003emkdir code\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eNavigate into this folder with \u003ccode\u003ecd code\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou'll be going through multiple phases in this course, so it may also be helpful to go one step further and create folders for phases 0 through 5 within \u003ccode\u003ecode\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eHaving a specific place for your work will make it easier to find if you ever need to look back at an earlier project. It'll also keep the rest of your computer's folders clear of random code.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The process we'll go through in this lesson will create sub-folders automatically. Whenever you are starting a new assignment, navigate back to your main \u003ccode\u003ecode\u003c/code\u003e folder (\u003ccode\u003ecd ~/Development/code\u003c/code\u003e) to ensure these sub-folders don't get created \u003cem\u003ewithin each other\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eAccessing GitHub and Forking\u003c/h3\u003e  \u003cp\u003eAll the lessons in this course have a corresponding repository in GitHub. On this page in Canvas, you should see three icons in the \u003cstrong\u003eupper right\u003c/strong\u003e corner. The first says \u003cstrong\u003eFork\u003c/strong\u003e. The second is a button that looks like a large-headed cat (GitHub's 'Octocat' icon); this button will open the lesson's GitHub repo \u003cem\u003ewithout\u003c/em\u003e forking. The third is a flag, which you can use to submit an \u003cem\u003eissue\u003c/em\u003e for the lesson (e.g., if you find a typo or other error).\u003c/p\u003e  \u003cp\u003eOne way to fork an assignment is to click the Octocat button to go to the assignment's GitHub repo and fork directly from that page. (We'll go through that process in a later lesson.) However, the easiest way to fork the assignment is by clicking the \u003cstrong\u003eFork\u003c/strong\u003e button. Either method will work, but we recommend you use the \u003cstrong\u003eFork\u003c/strong\u003e button because it will automate some assignment steps for you when you get a bit farther along in the curriculum.\u003c/p\u003e  \u003cfigure\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fork-link.png\" alt=\"fork link\" height=\"25px\"\u003e   \u003cfigcaption\u003eThis is just a picture, the button is up at the top of the page\u003c/figcaption\u003e \u003c/figure\u003e  \u003cp\u003eClicking the \u003cstrong\u003eFork\u003c/strong\u003e button will do one of two things — it will either start the forking process or bring you to a page where you select where to create your fork. If you're prompted to choose, select your personal GitHub account. The forking process will begin and may take a few moments. When complete, you will be redirected to a new copy of the assignment that exists under \u003cem\u003eyour\u003c/em\u003e GitHub account.\u003c/p\u003e  \u003cp\u003eForking is a process which creates an exact copy of a collection of code and files. Once you've created a fork on your own GitHub account, you will be able to edit the files in the repository and write your own code solution without interfering with the original copy.\u003c/p\u003e  \u003cp\u003eGo ahead and fork this assignment. The \u003ccode\u003eREADME.md\u003c/code\u003e file in the repository contains these instructions, so you can continue here or in GitHub.\u003c/p\u003e  \u003cp\u003eWith a fork created, the next step is to download your new repository to your local machine.\u003c/p\u003e  \u003ch3\u003eCloning to Your Local Machine\u003c/h3\u003e  \u003cp\u003eTo download the repository for this lesson, on your personal GitHub fork, first click the \u003cstrong\u003eCode\u003c/strong\u003e button. A pop-up will appear that says \u003cstrong\u003eClone with HTTPS\u003c/strong\u003e. You'll see a URL provided starting with \u003ccode\u003ehttps://...\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/git-clone-using-ssh.png\" alt=\"GitHub code button drop-down\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eBefore doing anything else\u003c/strong\u003e, make sure to switch from \u003cstrong\u003eHTTPS\u003c/strong\u003e to \u003cstrong\u003eSSH\u003c/strong\u003e by clicking the \u003cstrong\u003eUse SSH\u003c/strong\u003e link. When clicked, the pop-up will change to display \u003cstrong\u003eClone with SSH\u003c/strong\u003e. Instead of a URL, you'll see what sort of looks like an email, starting with \u003ccode\u003egit@github.com:\u003c/code\u003e. You should see your GitHub name after the \u003ccode\u003e:\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/canvas-welcome/clone-with-ssh.png\" alt=\"clone with ssh option\"\u003e\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eAside:\u003c/strong\u003e Why SSH? If you followed the setup instructions, you have added your personal SSH key to GitHub. GitHub will store your personal copies of all the work you do in this course. Because you've added your SSH key, GitHub will know who you are when you send work from your local machine to GitHub to be stored. Using HTTPS instead would require you to sign in from your terminal using your log-in credentials each time you try to push your code to GitHub; it also may not work at all for some assignments.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eFrom here, click the clipboard icon.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/copy-clone-command-button.png\" alt=\"copy to clipboard button\"\u003e\u003c/p\u003e  \u003cp\u003eNow, open your terminal and navigate to where you'd like to download the assignment (e.g. \u003ccode\u003ecd ~/Development/code\u003c/code\u003e). Type \u003ccode\u003egit clone\u003c/code\u003e then paste in the copied SSH link from GitHub. It should look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit clone git@github.com:/phase-0-completing-assignments.git \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePress enter, and you should see a flurry of terminal activity. Once the terminal gives you control to type again, a new folder with the GitHub name of the assignment will be present. Change directory into this folder to access the assignment files.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecd phase-0-completing-assignments \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, if you've set up VS Code, type \u003ccode\u003ecode .\u003c/code\u003e to open up a text editor window with access to all of the assignment's files. The instructions are now also available on your local machine in \u003ccode\u003eREADME.md\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eCompleting an Assignment\u003c/h3\u003e  \u003cp\u003eMost assignments will have tests that check your work and provide immediate feedback in the terminal. We'll walk through some examples in upcoming lessons.\u003c/p\u003e  \u003cp\u003eThis assignment has a single test: check to see if you've correctly cloned this assignment to your local machine. If you've followed the steps above, you've completed everything you need to do to pass the test; all that is left to do is run it.\u003c/p\u003e  \u003cp\u003eTo run an assignment's tests, first you'll need to set up the tools used to run the test. Fortunately, all the tools required are included as part of the assignment, so all you need to do is type the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003enpm install \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis command will again cause a flurry of activity in your terminal. You may see some warnings in the mix of output, but that is normal. After a few moments, you should see some messaging about packages being added and regain control of the command line. You're now ready to run this assignment's tests. Type the following to do so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003enpm test \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou should see the test results print out. For this assignment, they'll look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eThis assignment\u003cbr\u003e    ✓ has been correctly cloned to your local environment\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  1 passing (5ms) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCongratulations! You've passed this assignment's test.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you did not receive a passing test, or if your terminal produced some sort of error, walk through the steps in this lesson again and make sure you've followed each one. If you're still receiving errors, we recommend going back through the local environment setup instructions again to ensure everything is set up properly.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eUploading Your Work to GitHub\u003c/h2\u003e  \u003cp\u003eWhen all tests are passing, the next step is to upload your work. To do this, we run three commands in the terminal. First, type the following, then press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add . \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis 'stages' any work you've done (changes to your local copy of an assignment) so it will be ready to upload.\u003c/p\u003e  \u003cp\u003eSecond, we create a record of these changes that includes a message describing the change. Type the following, then press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit commit -m 'Done with assignment' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is known as creating a 'commit.' A commit preserves all \u003cem\u003estaged\u003c/em\u003e changes from the previous command. Any work you've done is now recorded as part of your copy of the assignment. This copy, however, is still only on your local environment.\u003c/p\u003e  \u003cp\u003eTo upload your completed assignment, there is one final command to run. Type the following, then press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis command sends the changes you've made to GitHub. If you revisit your \u003cem\u003epersonal\u003c/em\u003e copy of the assignment on GitHub, the commit you just created (with the message 'Done with assignment') will be the most recent commit on the assignment.\u003c/p\u003e  \u003cp\u003eEach assignment will be slightly different and will include instructions on what is required to complete it. Depending on the testing tools in an assignment, the specific commands may change. For this lesson, we ran \u003ccode\u003enpm install\u003c/code\u003e and \u003ccode\u003enpm test\u003c/code\u003e: \u003ccode\u003enpm install\u003c/code\u003e to set up the necessary tools, and \u003ccode\u003enpm test\u003c/code\u003e to run the actual test.\u003c/p\u003e  \u003cp\u003eYou'll also see some assignments that ask you to run \u003ccode\u003ebundle\u003c/code\u003e and \u003ccode\u003erspec\u003c/code\u003e — \u003ccode\u003ebundle\u003c/code\u003e, like \u003ccode\u003enpm install\u003c/code\u003e, will set up necessary tools and \u003ccode\u003erspec\u003c/code\u003e will run the tests. We'll include instructions indicating which commands to run. In all cases, you can run the tests as many times as you would like. Some labs will have many tests and may require running the tests many times while you solve them.\u003c/p\u003e  \u003ch2\u003eUploading Your Work To Canvas\u003c/h2\u003e  \u003cp\u003eTo register completion of an assignment in Canvas, you must submit a link to your GitHub repository.\u003c/p\u003e  \u003cp\u003e1) After pushing your code up following the previous steps, go to your    repository and copy the URL link in the browser's URL bar.\u003c/p\u003e  \u003cp\u003e2) In Canvas, navigate to the assignment you've been working on. In the upper    right corner of the assignment, you should see a \u003cstrong\u003eSubmit Assignment\u003c/strong\u003e    button. You'll be directed to the bottom of the page, where you can provide a    URL as your submission.\u003c/p\u003e  \u003cp\u003e3) Paste in your repository's GitHub URL and click \u003cstrong\u003eSubmit\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eCanvas will indicate a successful submission and refresh the page. In the Modules view of your course, you should now see a checkmark next to the assignment, indicating a successful submission.\u003c/p\u003e  \u003ch2\u003eReview\u003c/h2\u003e  \u003cp\u003eLet's quickly review the process for completing assignments:\u003c/p\u003e  \u003cp\u003e1) Create a personal fork of the GitHub assignment by clicking the \u003cstrong\u003eFork\u003c/strong\u003e    button in the upper right corner of the assignment on Canvas.\u003c/p\u003e  \u003cp\u003e2) Once forked to your personal account, start the \u003cstrong\u003ecloning\u003c/strong\u003e for your    assignment. Do this by clicking the \u003cstrong\u003eCode\u003c/strong\u003e button in GitHub, choosing    \u003cstrong\u003eSSH\u003c/strong\u003e, then clicking the \u003cstrong\u003eclipboard\u003c/strong\u003e icon to copy the assignment's GitHub    info.\u003c/p\u003e  \u003cp\u003e3) Go to your local environment's terminal and navigate to where you'd like to    store your assignment locally.\u003c/p\u003e  \u003cp\u003e4) Type \u003ccode\u003egit clone\u003c/code\u003e, then paste in what you copied from GitHub. This will    create a copy on your local machine.\u003c/p\u003e  \u003cp\u003e5) Navigate into the new cloned assignment and complete any work required\u003c/p\u003e  \u003cp\u003e6) Install testing tools with \u003ccode\u003enpm install\u003c/code\u003e (or \u003ccode\u003ebundle\u003c/code\u003e if tests use Ruby)\u003c/p\u003e  \u003cp\u003e7) Run tests with \u003ccode\u003enpm test\u003c/code\u003e (or \u003ccode\u003erspec\u003c/code\u003e for Ruby)\u003c/p\u003e  \u003cp\u003e8) If all tests are passing, stage and commit your solution with the following    commands\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  git add .\u003cbr\u003e  git commit -m 'Done with assignment' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e9) Push your work to your personal fork on GitHub with the \u003ccode\u003egit push\u003c/code\u003e command\u003c/p\u003e  \u003cp\u003e10) Go to your repository in GitHub and copy the URL. Note, this should be copied from the browser's address bar, and should start with \u003ccode\u003ehttps://github.com/\u003c/code\u003e\u003c/p\u003e  \u003cp\u003e11) Go to the assignment in Canvas and click \u003cstrong\u003eSubmit Assignment\u003c/strong\u003e (or \u003cstrong\u003eStart Assignment\u003c/strong\u003e)\u003c/p\u003e  \u003cp\u003e12) Paste in your GitHub URL as your submission\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eCongratulations! You've completed your first assignment! You now know how to work on and submit assignments. We'll remind you of this process in upcoming lessons, but we recommend bookmarking this lesson so you can refer back here in case you forget. Equipped with this knowledge, you are now ready to tackle greater challenges!\u003c/p\u003e","exportId":"g52e20bb3236b13fc525781b84a68882a"},{"id":243544,"title":"Survey - CLI","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the CLI module?\u003c/p\u003e\n\u003c/div\u003e","exportId":"g544e15b60caec96d8bb3f8d1077e981f"}]},{"id":16905,"name":"Git","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g6bb4a7fd9b2dff4230a034877a64ea7e","items":[{"id":157766,"title":"Intro to Version Control","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"git-version-control-introduction-to-version-control\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/git-version-control-introduction-to-version-control/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-version-control-introduction-to-version-control\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-version-control-introduction-to-version-control/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the purpose of a version control system\u003c/li\u003e\n\u003cli\u003eIdentify benefits of version control systems\u003c/li\u003e\n\u003cli\u003eRecognize useful Git vocabulary terms\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLet's imagine a very stressful situation. Your manager comes to you and says:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eHi there, we're looking to present a report to investors. If we get this\ninvestment, we'll all be millionaires. If we don't get this investment, we're\ngoing to have to close down the company. The key to success is going to be a\nreport that \u003cstrong\u003eyou\u003c/strong\u003e are going to manage. Three things will make it stand out:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIt must be absolutely correct: no errors, no typos, the math has to check\nout in every figure.\u003c/li\u003e\n\u003cli\u003eIt must have the most up-to-date information\u003c/li\u003e\n\u003cli\u003eThe investors will tolerate \u003cem\u003eslightly\u003c/em\u003e older data if it means that we can\nbe \u003cem\u003esure\u003c/em\u003e the facts are correct.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOne last requirement is that for auditing purposes we need to be able to save\na unique version of all the versions of this report. We have to know what the\nreport looked like, for example, 3 days ago, or 3 weeks ago.\u003c/p\u003e\n\n\u003cp\u003eSuman, Nibaal, and Taylor will all be doing research for you and contributing\nnew data as much as possible. You have to make sure that all the parts\nintegrate correctly. Thanks! And we're all counting on you!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eHow could you achieve these goals? Take a few minutes to imagine, or sketch out\nwhat your strategy might be.\u003c/p\u003e\n\n\u003ch2\u003eNaive Strategy\u003c/h2\u003e\n\n\u003cp\u003eA \u003cem\u003enaive\u003c/em\u003e way of managing \u003cem\u003eversions\u003c/em\u003e would be to start with a file called\n\u003ccode\u003einvestor-report-latest.txt\u003c/code\u003e. You'd also copy that to\n\u003ccode\u003einvestor-report-master.txt\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou'd share \u003ccode\u003einvestor-report-latest.txt\u003c/code\u003e with Suman, Nibaal, and Taylor.\u003c/p\u003e\n\n\u003cp\u003eWhen they made a change to the report, you'd find the changes, verify them, and\nthen update them into \u003ccode\u003einvestor-report-master.txt\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou'd make a copy of \u003ccode\u003einvestor-report-master.txt\u003c/code\u003e and give it a date-stamp like\n\u003ccode\u003einvestor-report-2019-02-13T1017.txt\u003c/code\u003e (here you've added an \u003ca href=\"https://en.wikipedia.org/wiki/ISO_8601\"\u003eISO8601\u003c/a\u003e\ndate-time label to the end of the file. This means when \u003ccode\u003els\u003c/code\u003e prints out the\ndirectory all the file names will be shown in ascending date order).\u003c/p\u003e\n\n\u003cp\u003eYou'd then overwrite \u003ccode\u003einvestor-report-latest.txt\u003c/code\u003e with\n\u003ccode\u003einvestor-report-master.txt\u003c/code\u003e and tell everyone to start working off of the\nnewly updated \u003ccode\u003einvestor-report-latest.txt\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBefore long, we might have a directory full of files like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einvestor-report-2019-1-01T1017.txt\u003cbr\u003einvestor-report-2019-1-02T1123.txt\u003cbr\u003einvestor-report-2019-1-04T4340.txt\u003cbr\u003einvestor-report-2019-1-05T1017.txt\u003cbr\u003einvestor-report-2019-1-08T2217.txt\u003cbr\u003einvestor-report-2019-2-08T2317.txt\u003cbr\u003einvestor-report-2019-2-09T0017.txt\u003cbr\u003einvestor-report-2019-2-10T914.txt\u003cbr\u003einvestor-report-2019-2-13T1017.txt\u003cbr\u003einvestor-report-2019-2-15T1127.txt\u003cbr\u003einvestor-report-2019-2-20T1237.txt\u003cbr\u003einvestor-report-2019-2-21T1330.txt\u003cbr\u003einvestor-report-2019-2-22T1545.txt\u003cbr\u003einvestor-report-latest.txt\u003cbr\u003einvestor-report-master.txt\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWow! What a mess! And there are other messes waiting.\u003c/p\u003e\n\n\u003cp\u003eWhat if Suman and Taylor both start work from the latest\n\u003ccode\u003einvestor-report-latest.txt\u003c/code\u003e and Taylor makes changes to the same section Suman\nwas working on. Taylor gets their work in first and that gets integrated by you.\nNow Suman's changes no longer apply. Suman is frustrated because their work will\nhave to be re-done!\u003c/p\u003e\n\n\u003ch2\u003eReflection\u003c/h2\u003e\n\n\u003cp\u003eThis is a pretty stressful bit of imagination. You've got to make sure that a\nreport is as current as possible and absolutely, positively, correct. You might\nthink this manager is a jerk or that these expectations are unreasonable. Maybe\nthis could be possible with \u003cem\u003eone\u003c/em\u003e writer, not \u003cem\u003efour\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eBut the expectations that manager gave you for the report are \u003cstrong\u003e\u003cem\u003ethe exact same\nexpectations we have for code\u003c/em\u003e\u003c/strong\u003e. It should be as good as possible, absolutely\ncorrect, and ready to ship to users at a moments' notice.\u003c/p\u003e\n\n\u003cp\u003eThe great news is that \u003cem\u003eall\u003c/em\u003e the manual work you had to do (and so much more!)\ncan be done by a type of software called a \u003cem\u003eversion control system (VCS)\u003c/em\u003e. That\nis, software that \u003cem\u003econtrols\u003c/em\u003e our collection of \u003cem\u003eversions\u003c/em\u003e. The most popular VCS\nis called \"Git.\" When we have a VCS on our side we can work confidently; we can\neven experiment without fear. Getting back to a \"last known good state\" is just\na few key-clicks away. You're going to love writing code, text, letters,\nknowing a VCS is on your side!\u003c/p\u003e\n\n\u003ch2\u003eDefine the Purpose of a Version Control System\u003c/h2\u003e\n\n\u003cp\u003e\"Version Control System (VCS)\" describes a whole group of software. VCS\nsoftware includes Git, Mercurial, Subversion, and others. Some other web-based\napplications like Google Docs have embraced the idea of \"versions\" and have\nadded features like \"tracked changes\" or \"view change history.\"\u003c/p\u003e\n\n\u003cp\u003eThe key benefit of version control is that you can experiment and \u003cstrong\u003ethrow away\nbad ideas\u003c/strong\u003e and \u003cem\u003einstantly\u003c/em\u003e get back to your last-known \"good\" state.\u003c/p\u003e\n\n\u003cp\u003eThink about it this way: when you were learning arithmetic, you knew the way to\nundo a bad calculation was to turn the pencil upside down and erase. As a result,\nyou were \u003cstrong\u003efree\u003c/strong\u003e to try, experiment, and explore, knowing you could always\neasily get back to the original starting point. Because of this, most of us\ndid our math homework in pencil, not ink!\u003c/p\u003e\n\n\u003cp\u003eBecause of the \u003cstrong\u003efreedom\u003c/strong\u003e that VCS provides, we can be \u003cstrong\u003eunafraid\u003c/strong\u003e to look\nat an ugly bit of code and \u003cem\u003etry\u003c/em\u003e something new. We can take a new technique a\nco-worker told us about and we can \u003cem\u003etry\u003c/em\u003e to replace our old code with this new idea.\nWe can read about a new feature provided in a framework and \u003cem\u003etry\u003c/em\u003e it out in our\nold code. \u003cstrong\u003eVCS helps us be unafraid to try new and improved techniques\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e The programmer, entrepreneur, and venture capitalist Paul Graham\nnotes that oil paints unlocked a revolution in experimentation in visual arts\nbecause they were undo-able. Oils provided the \u003cstrong\u003efreedom\u003c/strong\u003e to err and recover\nthat other paint media did not provide (e.g. watercolor). Because of this\n\u003cstrong\u003efreedom\u003c/strong\u003e these painters were free to explore perspective, light, and\ncomposition in completely new ways. Because of their \u003cem\u003etools\u003c/em\u003e they had more\n\u003cem\u003efreedom\u003c/em\u003e and were able to make their burst of exploration a \u003cem\u003emovement\u003c/em\u003e: The\nRenaissance.  \u003c/p\u003e\n\n\u003cp\u003eRead more in his essay \u003ca href=\"http://www.paulgraham.com/hp.html\"\u003e\"Hackers and Painters.\"\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eIdentify Benefits of Version Control Systems\u003c/h2\u003e\n\n\u003cp\u003eBeyond the advantage of being able to safely experiment, there are several\n\u003cem\u003eother\u003c/em\u003e benefits we get when we manage our work with Git:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAutomatically create a backup of your work\u003c/li\u003e\n\u003cli\u003eProvide an easy way to undo mistakes and restore a previous version of your work\u003c/li\u003e\n\u003cli\u003eDocument changes, including a log of what's changed with messages explaining why it was changed\u003c/li\u003e\n\u003cli\u003eKeep file names and hierarchies consistent and organized\u003c/li\u003e\n\u003cli\u003eBranch work off into multiple \"sandboxes\" that can be experimented with but won't impact each other\u003c/li\u003e\n\u003cli\u003eCollaborate with others without disturbing each other's or our own work\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd beyond these are even more advanced features that will help you optimize\nyour workflow, once you master the basics. If that feels daunting, it's OK. Most\npeople learn a few patterns of Git and never learn more until they absolutely\nhave to. Over years they build up a rich set of techniques, but it's rare to find\nsomeone who knows \u003cstrong\u003eeverything\u003c/strong\u003e about Git. You don't need to memorize every command\nand optional flag to get some of its best benefits.\u003c/p\u003e\n\n\u003ch2\u003eRecognize Useful Git Vocabulary Terms\u003c/h2\u003e\n\n\u003cp\u003eWe're about to get busy learning Git, but we first need to establish some common\nvocabulary. Git, perhaps more than any other software, has some special words\nthat you'll hear a lot. Don't worry if you're not sure how some of these terms\nwork in practice—that part will come later.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003erepository (or repo, for short)\u003c/strong\u003e: A directory of files that are \u003cem\u003etracked\u003c/em\u003e by\nGit.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003etrack\u003c/strong\u003e: When a file is \u003cem\u003etracked\u003c/em\u003e by Git, it means that Git will notice any\nchanges to that file. We call these changes \"differences\" or \"diffs\". Git will\nallow you to choose whether to \u003cem\u003eadd\u003c/em\u003e the change, or \"diff,\" in order to keep it\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ediff\u003c/strong\u003e: Short for \"difference,\" the \"diff\" of a file is all the changes that\nhappened in it since the last \u003cem\u003ecommit\u003c/em\u003e. The \"diff\" of a repo is all the diffs\nin all the \u003cem\u003etracked\u003c/em\u003e files in the \u003cem\u003erepo\u003c/em\u003e that have been made, but which have not\nyet been \u003cem\u003ecommitted\u003c/em\u003e (sometimes programmers call this \"the diffset\").\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ecommit\u003c/strong\u003e: When a diff is decided to be a good thing to save, we \u003cem\u003ecommit\u003c/em\u003e the\ndiff to the repo's history using the \u003ccode\u003ecommit\u003c/code\u003e command. When we make a commit we\nare asked to write a \"log\" message which describes what happened in the diff.\nEach commit also knows when it happened and what the repo's \"diff\" was.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003elog\u003c/strong\u003e: The record of what happened in each commit\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003elocal/remote\u003c/strong\u003e: When we start working with a git repo, we \"clone\" it from a\n\u003cem\u003eremote\u003c/em\u003e source and have a copy of that directory on our own system. We call\nthe repo on our personal system the \u003cem\u003elocal\u003c/em\u003e repo. (We'll talk more about the\n\"clone\" command later.)\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003e\u003ccode\u003emaster\u003c/code\u003e branch\u003c/strong\u003e: You'll learn in advanced Git that a repo can support multiple\nbranches (we called those \"sandboxes\" earlier). For the moment, just remember this:\nby default, when you create a Git repo, you will be working on the \u003ccode\u003emaster\u003c/code\u003e branch.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ebranch\u003c/strong\u003e: The combined history of all the changes of all the files in the repo.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIf we are afraid to edit our code we won't remove complicated code that's hard\nto work with, try awesome new libraries, or take chances with fun new features.\nVersion control helps us maintain the overall stability of our code so that we\ncan feel free to explore.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://git-scm.com/book/en/Getting-Started-About-Version-Control\"\u003eGetting Started - About Version Control\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://git-scm.com/video/what-is-git\"\u003eGit Basics - What is Git?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"intro-to-version-control"},{"id":157769,"title":"Git Basics","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"git-version-control-basics-phase-0\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/git-version-control-basics-phase-0/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-version-control-basics-phase-0\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-version-control-basics-phase-0/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify how to initialize a Git repository with \u003ccode\u003egit init\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eCheck the status of a repository with \u003ccode\u003egit status\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eKeep track of file changes with \u003ccode\u003egit add\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eCreate a commit and apply a commit message with \u003ccode\u003egit commit\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn our overview of version control systems, we saw that using a VCS helps us\norganize our work and keep track of changes we make. We also determined that the\nVCS we're going to use is Git. Now we can begin learning the commands we need to\nmake Git work for us.\u003c/p\u003e\n\n\u003ch2\u003eIdentify How to Initialize a Git Repository with \u003ccode\u003egit init\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eGit operates on a directory level. When we have a new directory that we want to\ntrack our files in, we need to \u003cem\u003einitialize\u003c/em\u003e the directory as a Git repository.\nThat means Git will then pay attention to what goes on in the directory and give\nus all the Git superpowers.\u003c/p\u003e\n\n\u003cp\u003eTo get started, we'll create a new directory. In your terminal, type the \nfollowing:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eREMEMBER\u003c/strong\u003e: Don't type the \u003ccode\u003e$\u003c/code\u003e. That's the universal symbol for a command prompt. It's how technical documentation says \"Here's a thing for the shell to process.\"\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003e~ $ mkdir my-git-project\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis command creates new a directory. Then:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e~ $ cd my-git-project\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis command moves into the newly created directory.\u003c/p\u003e\n\n\u003cp\u003eNow that we're in the directory where we want Git to watch for changes (adding,\nremoving, and editing files), let's set up this directory by \u003cem\u003einitializing\u003c/em\u003e it.\nIn the terminal type \u003ccode\u003egit init\u003c/code\u003e. It should look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ git init\u003cbr\u003eInitialized empty Git repository in /Users/avi/my-git-project/.git/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGit lets us know that it has put \u003ccode\u003e/Users/avi/my-git-project\u003c/code\u003e under its protection.\nGit also tells us that it stores its own data in the \u003ccode\u003e.git\u003c/code\u003e directory. This hidden\ndirectory, \u003ccode\u003e.git\u003c/code\u003e, is where Git keeps important stuff, like the commit\nhistory. Don't go in there and start randomly deleting things! That said, if ever\nyou do \u003ccode\u003egit init\u003c/code\u003e in the wrong directory, you can \u003ccode\u003erm -rf .git\u003c/code\u003e and return the\ndirectory to a plain-old, unprotected directory.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eBe careful about making an entire directory, like our home directory or our\ndesktop, into a Git repository accidentally. Make sure you only type \u003ccode\u003egit init\u003c/code\u003e\n\u003cem\u003ewithin\u003c/em\u003e the directory you want \u003ccode\u003egit\u003c/code\u003e to track.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eCheck the Status of a Repository with \u003ccode\u003egit status\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eNow that we have Git watching this directory, let's see what it can tell us about the\ndirectory. The command we use for this is \u003ccode\u003egit status\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ git status\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince we have not added any files yet, we'll see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eOn branch master\u003cbr\u003e\u003cbr\u003eNo commits yet\u003cbr\u003e\u003cbr\u003enothing to commit (create/copy files and use \"git add\" to track)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Newer repositories may state \u003ccode\u003eOn branch main\u003c/code\u003e.  Branching is beyond the scope of\nthis lesson, but to briefly explain - \u003ccode\u003emain\u003c/code\u003e and \u003ccode\u003emaster\u003c/code\u003e both refer to the same thing - the\ncore (\u003cem\u003e\u003cstrong\u003emain\u003c/strong\u003e, get it?\u003c/em\u003e) branch of a repository. A single repository can have many branches, but always\nhas only \u003cem\u003eone\u003c/em\u003e core branch. In the past, this branch defaulted to the name \u003ccode\u003emaster\u003c/code\u003e. Going forward,\nthe branch will be named \u003ccode\u003emain\u003c/code\u003e. You'll likely see both as you work with repositories new and\nold.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eLet's create a \u003ccode\u003eREADME.md\u003c/code\u003e that describes the project. Make our new file by\ntyping \u003ccode\u003etouch README.md\u003c/code\u003e from within the \u003ccode\u003emy-git-project\u003c/code\u003e directory. We won't\nsee any output after \u003ccode\u003etouch\u003c/code\u003e, but we will see a new file has been created if we\ntype \u003ccode\u003els\u003c/code\u003e (which gives a list of all the files in the directory).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ touch README.md\u003cbr\u003emy-git-project $ ls\u003cbr\u003eREADME.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith at least one new project file we can enable Git to start tracking changes.\nType \u003ccode\u003egit status\u003c/code\u003e. Git will show us what our current repository looks like and\nwhat changes it sees.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ git status\u003cbr\u003eOn branch master\u003cbr\u003e\u003cbr\u003eNo commits yet\u003cbr\u003e\u003cbr\u003eUntracked files:\u003cbr\u003e  (use \"git add ...\" to include in what will be committed)\u003cbr\u003e\u003cbr\u003e  README.md\u003cbr\u003e\u003cbr\u003enothing added to commit but untracked files present (use `git add` to track)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGit confirms that it's aware of the file \u003ccode\u003eREADME.md\u003c/code\u003e, but it's not \"tracking\" it.\nGit's not doing anything with the file and the file is not doing anything with\nGit...\u003cem\u003eyet\u003c/em\u003e. Let's change that!\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eIMPORTANT\u003c/strong\u003e: Whenever we want to check the status of our Git repository — which we do\noften — type \u003ccode\u003egit status\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eKeep Track of File Changes with \u003ccode\u003egit add\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eCurrently, the file in our repository is not being tracked by Git. We\nhave to tell Git about all the files we want it to keep track of and consider as\npart of our project. We can do this by \u003cem\u003eadding\u003c/em\u003e the files to our \u003ccode\u003egit\u003c/code\u003e repository\nwith \u003ccode\u003egit add \u0026lt;filename or path\u0026gt;\u003c/code\u003e. To add our new \u003ccode\u003eREADME.md\u003c/code\u003e to the repository\nand check the status, we type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ git add README.md\u003cbr\u003emy-git-project $ git status\u003cbr\u003eOn branch master\u003cbr\u003e\u003cbr\u003eNo commits yet\u003cbr\u003e\u003cbr\u003eChanges to be committed:\u003cbr\u003e  (use \"git rm --cached ...\" to unstage)\u003cbr\u003e\u003cbr\u003e  new file:   README.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can now see that Git is ready to keep track of \u003ccode\u003eREADME.md\u003c/code\u003e. All the changes\nin the file at the time we \u003ccode\u003eadded\u003c/code\u003e it are \"staged.\" If we were to change \u003ccode\u003eREADME.md\u003c/code\u003e,\nwe'd need to re-add the file. As it happens here, this staged change is \"create the\nfile, nothing inside of it\" because \u003ccode\u003etouch\u003c/code\u003e created an empty file.\u003c/p\u003e\n\n\u003cp\u003eTo save a new \u003cem\u003eversion\u003c/em\u003e of this new file (or, later, to \"capture\" changes\nto a file) we need to \u003cem\u003ecommit\u003c/em\u003e the set of changes or \"diff.\" We \"save\" the changes\nin our repository by making \u003cem\u003ecommits\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eCreate a Commit and Apply a Commit Message with \u003ccode\u003egit commit\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eRemember: \u003ccode\u003egit add\u003c/code\u003e got our changes to the repository ready in the previous step. Those\nchanges are the ones that will be \"captured\" in the commit.\u003c/p\u003e\n\n\u003cp\u003eTo make our first commit, type: \u003ccode\u003egit commit -m \"Initial commit\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis tells \u003ccode\u003egit\u003c/code\u003e that our commit message, represented by the \u003ccode\u003e-m\u003c/code\u003e flag, is \u003ccode\u003e\"Initial commit\"\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ git commit -m \"Initial commit\"\u003cbr\u003e[master (root-commit) e55477d] Initial commit\u003cbr\u003e 1 file changed, 0 insertions(+), 0 deletions(-)\u003cbr\u003e create mode 100644 README.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see that Git has created a new version of our repo, represented by the\n\u003cem\u003eSHA\u003c/em\u003e \u003ccode\u003ee55477d\u003c/code\u003e. SHAs are the identification system that \u003ccode\u003egit\u003c/code\u003e uses to keep track\nof versions; they're long complex numbers and letters that are unlikely to be\nduplicated.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecommit\u003c/code\u003e command committed 1 file.\u003c/p\u003e\n\n\u003cp\u003eNow, if we type \u003ccode\u003egit status\u003c/code\u003e, we'll see\nthat it is at a \"clean state\", and there is nothing to commit and no new changes.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ git status\u003cbr\u003eOn branch master\u003cbr\u003enothing to commit, working directory clean\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we make another change, for example, to README.md, we can add another commit\nwith this new set of changes with\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit commit -am \"A message\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e-a\u003c/code\u003e flag refers to adding 'all changes' on all tracked files and \u003ccode\u003e-m\u003c/code\u003e\nspecifies a commit message of \u003ccode\u003e\"Updates README.md\"\u003c/code\u003e. To review some of your\nUnix CLI skills, this could also be written as: \u003ccode\u003egit commit -a -m \"Updates README.md\"\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe commit would look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ git commit -am \"Updates README.md\"\u003cbr\u003e[master (root-commit) e55477d] Updates README.md\u003cbr\u003e 1 file changed, 4 insertions(+), 0 deletions(2)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGood work! Commits are amazingly powerful in Git. They are the heart of many of Git's advanced\nfeatures. Understanding the basic workflow of Git initialization and setup\nis the foundation for success.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eTo make a new Git repository out of a directory — which we'll only have to do once\nper project — use \u003ccode\u003egit init\u003c/code\u003e. Whenever you make a change to a file or create a\nnew file, you can check the status of these changes with \u003ccode\u003egit status\u003c/code\u003e. When\nyou're ready to preserve changes, you can add the files (or directories of files) with the\n\u003ccode\u003egit add \u0026lt;filename or path\u0026gt;\u003c/code\u003e command.\u003c/p\u003e\n\n\u003cp\u003eOnce your changes have been added, or \"staged,\" use \u003ccode\u003egit commit -m\u003c/code\u003e to commit them\nwith an explanatory message. You can shorten the \u003ccode\u003eadd\u003c/code\u003e + \u003ccode\u003ecommit\u003c/code\u003e process, provided\nthat all the files are being tracked by using \u003ccode\u003egit commit -am \"A message\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf we've followed all these steps, our \u003ccode\u003emy-git-project\u003c/code\u003e directory is now a local \u003ccode\u003egit\u003c/code\u003e\nrepository.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://git-scm.com/book/en/v1/Git-Basics\"\u003eGit Basics at git-scm.com\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"git-basics"},{"id":157771,"title":"Getting Code with Git","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"git-getting-code-phase-0\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/git-getting-code-phase-0/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-getting-code-phase-0\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-getting-code-phase-0/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCopy a repository to your local machine with \u003ccode\u003egit clone\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eList remotes with \u003ccode\u003egit remote\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eDuplicate other organizations' repositories into your own via GitHub with the \"Fork\" button\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eGit repositories let us create logged histories of the versions of the files\nwe \"track.\" Just think, right now, around the world people are using Git\nto track their projects: Star Trek Fan Fiction, resumes, Ruby Code, JavaScript\ncode, PhD theses, etc.\u003c/p\u003e\n\n\u003cp\u003eGit not only lets you track files in a local repo on your machine, you can \"share\"\nyour repo on the internet so that others can use your code. In this lesson\nwe'll discuss how to get others' repositories.\u003c/p\u003e\n\n\u003cp\u003eIn a later lesson we'll cover how to push \u003cem\u003eour\u003c/em\u003e locally-created repositories onto the\ninternet so that others can see our projects.\u003c/p\u003e\n\n\u003ch2\u003eCopy a Repository to Your Local Machine with \u003ccode\u003egit clone\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eWe use \u003ccode\u003egit clone\u003c/code\u003e to copy someone else's repo from the internet to our \u003cem\u003elocal\u003c/em\u003e machine.\nWe are not getting \u003cem\u003etheir\u003c/em\u003e repo from \u003cem\u003etheir\u003c/em\u003e local machine (that would be very creepy).\u003c/p\u003e\n\n\u003cp\u003eInstead, they must have\nalready \"mirrored\" their \u003cem\u003elocal\u003c/em\u003e repository onto the internet. In Git-speak we'd say\nthey would have had to have created a \u003cem\u003eremote repository\u003c/em\u003e: a copy of their local repository,\nbut on the internet. We'll be cloning that \u003cem\u003eremote repository\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's get the code for the popular ReactJS framework.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Navigate to the \u003ca href=\"https://github.com/facebook/react\"\u003ehttps://github.com/facebook/react\u003c/a\u003e repository.\u003c/li\u003e\n\u003cli\u003e Click the green \"Code\" button on the right.\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMake sure you select \u003ccode\u003eUse SSH\u003c/code\u003e as your URL type.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/git-clone-using-ssh.png\" width=\"400px\" alt=\"SSH Clone\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eClick the \"Copy to clipboard\" button (highlighted below). This will copy the\nURL for us to use when we clone.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/copy-clone-command-button.png\" alt=\"Copy command to clone repo button\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIn the terminal, run the \u003ccode\u003egit clone\u003c/code\u003e command. It takes the URL we just copied as an argument, like so:\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e$ git clone your-copied-github-url\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will create a \u003cem\u003elocal\u003c/em\u003e copy of the GitHub repository on our own machine.\u003c/p\u003e\n\n\u003ch2\u003eList Remotes with \u003ccode\u003egit remote\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eIf you use the \u003ccode\u003els\u003c/code\u003e command, you'll see Git created a directory called\n\u003ccode\u003ereact\u003c/code\u003e. Use \u003ccode\u003ecd\u003c/code\u003e to enter that directory.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ cd react\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eType \u003ccode\u003egit remote\u003c/code\u003e to see the names of each remote repository (or, \"remote\") available.\u003c/p\u003e\n\n\u003cp\u003eSince you cloned your repository, you should see a remote name called \u003ccode\u003eorigin\u003c/code\u003e. The remote\nname \u003ccode\u003eorigin\u003c/code\u003e is the default name Git gives to the remote you cloned from:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git remote\u003cbr\u003eorigin\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's prove that the \u003ccode\u003eorigin\u003c/code\u003e name has some relationship to the address GitHub gave us.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$  git remote show origin\u003cbr\u003e* remote origin\u003cbr\u003e  Fetch URL: git@github.com:facebook/react.git\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \"remote address\" \u003ccode\u003egit@github.com:facebook/react.git\u003c/code\u003e assigned to the\n\"remote name\" - \u003ccode\u003eorigin\u003c/code\u003e - is the same thing you copied from the\nGitHub web interface. This confirms that the \u003cem\u003eremote repository\u003c/em\u003e you\n\u003cem\u003ecloned\u003c/em\u003e automatically set up a \u003cem\u003eremote name\u003c/em\u003e called \u003ccode\u003eorigin\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDuplicate Other Organizations' Repositories into Your Own via GitHub with the \"Fork\" Button\u003c/h2\u003e\n\n\u003cp\u003eForking a GitHub repository is just a way to create a personal, online duplicate\nof it. When you fork a repository, GitHub creates a duplicate of that repository\nunder your control.\u003c/p\u003e\n\n\u003cp\u003eIf my GitHub username were \u003ccode\u003eoctocat\u003c/code\u003e and I \"forked\" \u003ccode\u003efacebook/react\u003c/code\u003e, GitHub would\ncopy the remote repository \u003ccode\u003efacebook/react\u003c/code\u003e and create it under my name as\n\u003ccode\u003eoctocat/react\u003c/code\u003e. It's making a copy of one \u003cem\u003eremote repository\u003c/em\u003e to a new \u003cem\u003eremote\nrepository\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIt's like saying \"Hey, can I have the Louvre's version of \u003cem\u003eThe Mona Lisa\u003c/em\u003e?\" The\nLouvre would say, \"No.\" If you were to create a perfect online duplicate by \u003cem\u003eforking\u003c/em\u003e\nit from \u003ccode\u003elouvre/mona_lisa\u003c/code\u003e to \u003ccode\u003eyour-name/mona_lisa\u003c/code\u003e, and then were to clone\nfrom \u003cem\u003ethat\u003c/em\u003e remote repository, then the Louvre can keep their copy and you can\nupdate your copy as you choose.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/fork_button.jpg\" alt=\"Fork Button\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's try a \u003cem\u003efork\u003c/em\u003e and \u003cem\u003eclone\u003c/em\u003e workflow.\u003c/p\u003e\n\n\u003cp\u003eClick the GitHub \u003cstrong\u003eOctocat\u003c/strong\u003e icon at the top of this page:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/git-logo-gray.png\" alt=\"GitHub Octocat Icon\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis will bring you to the \"learn-co-curriculum\" version of this lesson. Click the\n'Fork' button in the upper right corner of the page. You will be prompted to\nchoose where the repository should be forked to, so go ahead and choose your\naccount. GitHub will take a few moments to create the fork, then navigate to\nyour copy of the repository. \u003c/p\u003e\n\n\u003cp\u003eIf all has gone well, you will see your username at\nthe top of the page, followed by a \u003ccode\u003e/\u003c/code\u003e and the name of the repository, along\nwith a link just below to the original repository. (\u003ca href=\"https://help.github.com/enterprise/2.2/user/articles/fork-a-repo/\"\u003eMore on forking in the GitHub docs\u003c/a\u003e.)\u003c/p\u003e\n\n\u003cp\u003eThe important take away is to \u003cstrong\u003enot\u003c/strong\u003e misuse the words \"fork\" and \"clone\" when speaking\nwith other Git users. To get a local copy: \u003cstrong\u003eclone\u003c/strong\u003e; to make an online copy of\na repository to your personal organization so that you have the ability to\nupdate its \u003ccode\u003emaster\u003c/code\u003e (or \u003ccode\u003emain\u003c/code\u003e) branch, \u003cstrong\u003efork\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2\u003eImportant Note for Assignments on Canvas\u003c/h2\u003e\n\n\u003cp\u003eAll Software Engineering lessons in Canvas will have an \u003cstrong\u003eOctocat\u003c/strong\u003e icon linking to a\nrepository of that lesson. Using the process discussed in this lesson, you can fork any\nlesson you'd like.\u003c/p\u003e\n\n\u003cp\u003eFor \u003cem\u003eassignments\u003c/em\u003e in Canvas, you will also see an additional \u003cstrong\u003eFork\u003c/strong\u003e button beside the \u003cstrong\u003eOctocat\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fork-link.png\" alt=\"fork button\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe encourage you to use this button when you see it to start the forking process. During this phase of\nthe course, the \u003cstrong\u003eFork\u003c/strong\u003e button in Canvas will do the same thing as clicking GitHub's \u003cstrong\u003eFork\u003c/strong\u003e button.\nLater on in the course, the Canvas \u003cstrong\u003eFork\u003c/strong\u003e button will behave differently as some assignment steps will \nbe automated.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eGitHub gives developers many ways to collaborate. Using GitHub's \"Fork\" button and \u003ccode\u003egit clone\u003c/code\u003e together allows you to make copies of others' code.\u003c/p\u003e\n\n\u003cp\u003eOften, the original authors will include license information regarding how you\ncan use their repository, so make sure to check before you publish, sell or\ndistribute any material you've forked, cloned and modified.\u003c/p\u003e","exportId":"getting-code-with-git"},{"id":157774,"title":"Pushing Code with Git","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-git-pushing-code\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-pushing-code\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-pushing-code/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate a remote repository on GitHub\u003c/li\u003e \u003cli\u003eConnect a local repository to a remote repository\u003c/li\u003e \u003cli\u003eSet the destination of a repo with \u003ccode\u003egit remote\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eSend code to the remote repo with \u003ccode\u003egit push\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eYou may have heard of \u003ca href=\"https://github.com\"\u003eGitHub\u003c/a\u003e before. In the previous lesson, you used it to get Facebook's code for the React framework. For all the amazing power that GitHub provides (Microsoft thought it was so powerful that they bought GitHub for a cool $7.5 billion), as far as Git is concerned they're just a big old server that hosts a whole bunch of remote repositories (\"remotes\").\u003c/p\u003e  \u003cp\u003eYou've seen how valuable \u003cem\u003eremotes\u003c/em\u003e are for \u003cem\u003egetting\u003c/em\u003e software. Now we can take a look at the other side of the transaction: how we mirror our \u003cem\u003elocal\u003c/em\u003e repository to a \u003cem\u003eremote\u003c/em\u003e repository using \u003ccode\u003egit push\u003c/code\u003e and \u003ccode\u003egit remote\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eOnce your code is on a \u003cem\u003eremote\u003c/em\u003e, it's backed up — which is always a good thing. Also, once you push to a remote, you can choose whether to let others \u003ccode\u003efork\u003c/code\u003e or \u003ccode\u003eclone\u003c/code\u003e and benefit from it. Let's learn how to \u003ccode\u003epush\u003c/code\u003e our code!\u003c/p\u003e  \u003ch2\u003eCreate a Remote Repository on GitHub\u003c/h2\u003e  \u003cp\u003eThere are a few steps to follow to create a \u003cem\u003eremote\u003c/em\u003e repository on GitHub.\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eGo to: \u003ca href=\"https://github.com/new\"\u003egithub.com/new\u003c/a\u003e, while logged into GitHub.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eEnter a name for your repository in the \"Repository name\" field. You can name it whatever you'd like; be creative! The default options are fine as-is — don't initialize the new repository with a \u003ccode\u003eREADME\u003c/code\u003e or add a \u003ccode\u003e.gitignore\u003c/code\u003e or license. Click the green 'Create repository' button.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eAfter you create the \u003cem\u003eremote\u003c/em\u003e repository, you should see a \"Quick setup\" page. Make sure the 'SSH' option is selected, then click the \"Copy to clipboard\" symbol next to the repo URL (pictured) to copy the URL. (We'll use this in the next section.)\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/enough-git-for-learn-co/github_quick_setup.png\" alt=\"github repo quick setup\"\u003e\u003c/p\u003e  \u003cp\u003eBehind the scenes, GitHub has essentially \u003ccode\u003egit init\u003c/code\u003e'd a blank directory.\u003c/p\u003e  \u003ch2\u003eConnect a Local Repository to a Remote Repository\u003c/h2\u003e  \u003cp\u003eAfter you've created your \u003cem\u003eremote\u003c/em\u003e GitHub repository, you'll want to get your local repository uploaded to GitHub. Follow the steps below:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eFirst, we want to create a folder for our repository, which we'll call \u003ccode\u003emy_new_directory\u003c/code\u003e. In the terminal, navigate to the \u003ccode\u003e~/Development/code\u003c/code\u003e directory (or wherever you are storing your code) and type \u003ccode\u003emkdir my_new_directory\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eTo navigate into this new folder, type \u003ccode\u003ecd my_new_directory\u003c/code\u003e. Your terminal should display \u003ccode\u003emy_new_directory\u003c/code\u003e, indicating that you are now inside of the new folder. Open the directory in VS Code by typing \u003ccode\u003ecode .\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eNext, we need to create a new file named \u003ccode\u003eREADME.md\u003c/code\u003e. You can do this in the terminal, by typing \u003ccode\u003etouch README.md\u003c/code\u003e, or in VS Code, by choosing \u003ccode\u003eFile -\u0026gt; New File\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eWe can directly type in content for our README file in VS Code, but we can also use our terminal skills to add content. So, in the terminal, type \u003ccode\u003eecho \"This is my readme file\" \u0026gt; README.md\u003c/code\u003e. If you've got the README file open in VS Code, the new text will appear!\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eNow that we've got some basic content, we can initialize our local repository. In your terminal, type \u003ccode\u003egit init\u003c/code\u003e. Your terminal should show that an 'empty Git repository' has been initialized.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eType \u003ccode\u003egit add README.md\u003c/code\u003e to stage the new \u003ccode\u003eREADME.md\u003c/code\u003e file so it will be tracked by \u003ccode\u003egit\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eNow, type \u003ccode\u003egit commit -m \"Initialize git\"\u003c/code\u003e. This will create the first commit for this local repository, which will allow us to push our work to the remote repository we created earlier.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eSet the Destination of a Repo with \u003ccode\u003egit remote\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eTo connect your local repository to the newly created GitHub repository, you must add a new remote to a remote name. Adding a remote involves giving \u003ccode\u003egit\u003c/code\u003e a \"short name\" and a \"repository path.\" You copied the repository path from GitHub a few steps above.\u003c/p\u003e  \u003cp\u003eThe repository path is a long bunch of technical words. The creators of Git thought it would be easier to type a \"nickname\" or a \"short name\" that points to that long repository path. It's common to have a \"default\" remote. The default remote short name is called \u003ccode\u003eorigin\u003c/code\u003e. So we're going to create a new remote with a short name of \u003ccode\u003eorigin\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eMake sure you still have your remote Git info copied from GitHub, and type the following into the terminal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit remote add origin your-copied-remote-repository-url \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis sets the remote so you can now \u003cstrong\u003e\u003cem\u003epush\u003c/em\u003e\u003c/strong\u003e your code.\u003c/p\u003e  \u003cp\u003eYou can use \u003ccode\u003egit remote -v\u003c/code\u003e (the \u003ccode\u003e-v\u003c/code\u003e is for \"verbose\") to view the remote(s).\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emy_new_directory $ git remote -v\u003cbr\u003e# View existing remotes\u003cbr\u003e# origin  git@github.com:OWNER/REPOSITORY.git (fetch)\u003cbr\u003e# origin  git@github.com:OWNER/REPOSITORY.git (push) \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eSend Code to the Remote Repo with \u003ccode\u003egit push\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eNow that we have added a remote repo, we need to send our latest work to the remote. We use this command when we want to send some code from the local repository to the associated remote repository. Git will push all the local, committed work to the remote repository.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003egit push\u003c/code\u003e command takes two arguments. The first is the name of the remote repo. Remember, \u003ccode\u003eorigin\u003c/code\u003e is just an alias or \"short name\" that refers to the repository name. You don't actually have to enter the repository name. Instead, you can just use \u003ccode\u003eorigin\u003c/code\u003e. The second is the name of the remote branch you want to send code to. In the example below, we're pushing to our remote repository's \u003cem\u003edefault\u003c/em\u003e branch, \u003ccode\u003emaster\u003c/code\u003e. We're still going to hold off on discussing branching until later, but it's important to remember that \u003ccode\u003emaster\u003c/code\u003e is special; it's the default branch.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emy_new_directory $ git push -u origin master \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will push your code up to the remote repo/branch. The first time you push code up to a newly-added remote repository, use the \u003ccode\u003e-u\u003c/code\u003e flag to tell Git to \"save\" the remote repository as the default push destination.\u003c/p\u003e  \u003cp\u003eFor every subsequent push, you only need to enter \u003ccode\u003egit push\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eAn Aside and a Small Shortcut\u003c/h2\u003e  \u003cp\u003eIn this lesson, we've gone through the steps of both connecting a local repository, and pushing code up to GitHub. During this course, you'll be creating a few local repositories from scratch, but more often, you'll be cloning existing repositories to your local machine. In these situations, you won't need to use commands like \u003ccode\u003egit init\u003c/code\u003e, since the repo is already set up with Git and will already have a remote configured. However, you \u003cem\u003ewill\u003c/em\u003e often need to add, commit and push work you've done locally to the remote repository. In these situations, you should be able to just run the following commands:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"commit message\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs a small shortcut, you can also combine adding and commiting by using an additional option flag, \u003ccode\u003e-a\u003c/code\u003e, with the commit command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit commit -am \"commit message\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eBeing able to add Git remotes allows you to back up your local repository to a remote server. If you remember \u003ccode\u003egit init\u003c/code\u003e, \u003ccode\u003egit remote add origin your-remote-repository-URL\u003c/code\u003e, add, and push your changes, you'll be able to get your project up to GitHub in minutes!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://help.github.com/articles/pushing-to-a-remote/\"\u003eGitHub guide on pushing\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"pushing-code-with-git"},{"id":157776,"title":"Git Basics Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"git-basics-lab-phase-0\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/git-basics-lab-phase-0/fork\" target=\"_blank\"\u003e \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e \u003c/a\u003e \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-basics-lab-phase-0\" target=\"_blank\"\u003e \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e \u003c/a\u003e \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-basics-lab-phase-0/issues/new\" target=\"_blank\"\u003e \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e \u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUnderstand how to complete assignments\u003c/li\u003e\n\u003cli\u003eApply what you've learned about Git version control\u003c/li\u003e\n\u003cli\u003eInitialize a new Git repository\u003c/li\u003e\n\u003cli\u003eStage and commit new content\u003c/li\u003e\n\u003cli\u003eCreate a remote repository on GitHub\u003c/li\u003e\n\u003cli\u003eConnect the newly created local repository with the remote on GitHub\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eSo far lessons have only contained written content on specific topics. All you needed to do was read through each lesson and continue on. This lesson, however, is considered an \u003cem\u003eassignment\u003c/em\u003e. Assignments are exercises that have some written content to guide you, but also ask you to complete some work of your own. Many assignments, like this one, include \u003cem\u003etests\u003c/em\u003e that must be passed in order to complete the lesson. Assignments with tests are often referred to as a \u003cem\u003elabs\u003c/em\u003e in our course.\u003c/p\u003e\n\u003cp\u003eNow that you've learned about Git version control, in this \u003cem\u003elab\u003c/em\u003e, we're going to go through the entire process of creating a local Git repository, creating an initial commit and pushing that work to a remote repo stored on \u003ca href=\"https://github.com/\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eTo start work on this lab, you will first need to fork this assignment and clone it to your local environment. Let's quickly review this process:\u003c/p\u003e\n\u003cp\u003e1) Click the \u003cstrong\u003eFork\u003c/strong\u003e button at the top of this page in Canvas.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fork-link.png\" alt=\"fork button\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e This buttton does the same thing as \u003ca href=\"https://guides.github.com/activities/forking/\"\u003eforking in GitHub\u003c/a\u003e (via the \u003cstrong\u003eOctocat\u003c/strong\u003e button). We recommend using the \u003cstrong\u003eFork\u003c/strong\u003e button in Canvas.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e2) Choose to fork to your personal account if prompted. Once the forking process is complete, you should be looking at your personal copy of the assignment on GitHub.\u003c/p\u003e\n\u003cp\u003e3) Click \u003cstrong\u003eCode\u003c/strong\u003e, choose \u003cstrong\u003eSSH\u003c/strong\u003e, then click the \u003cem\u003eclipboard\u003c/em\u003e icon to copy the information we'll need about this repository.\u003c/p\u003e\n\u003cp\u003e4) In your terminal, type \u003ccode\u003egit clone\u003c/code\u003e, and paste the info you copied from GitHub. The command should look something like this (but with your personal account name):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit clone git@github.com:\u0026lt;your-github-username\u0026gt;/git-basics-lab-phase-0.git\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e5) A folder will be created wherever you run this command. The folder name will be the same as the repository, so in this case, \u003ccode\u003egit-basics-lab-phase-0\u003c/code\u003e. Navigate into this folder with \u003ccode\u003ecd git-basics-lab-phase-0\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOnce inside the folder, you are ready to work on the lab.\u003c/p\u003e\n\u003ch2\u003eSolving this Lab\u003c/h2\u003e\n\u003cp\u003eOnce you're in your local clone of this lab, the first step is to run the lab's tests to get a sense of what you need to do. We do this with two terminal commands. First, we run the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm install\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis sets up the tools we'll use for testing. To run the tests, type the following once you regain control of the command line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm test\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will run all the tests included for this lab. You should see a lot of output, enough that you may need to scroll up in your terminal to see it all. Six failed tests should print out, starting with this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethis lab\u003cbr\u003e  1) has a folder named my-repository\u003cbr\u003e  2) has a valid git repository initialized for the my-repository folder\u003cbr\u003e  3) has a README.md file in the my-repository folder\u003cbr\u003e\u003cbr\u003ethe local repository\u003cbr\u003e  4) has README.md as a tracked file\u003cbr\u003e  5) has at least one commit\u003cbr\u003e  6) has been pushed up to the remote repository\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e0 passing (42ms)\u003cbr\u003e6 failing\u003cbr\u003e\u003cbr\u003e1) this lab\u003cbr\u003e     has a folder named my-repository:\u003cbr\u003e   AssertionError: no folder name \"my-repository\" was found: value: expected './my-repository' to exist\u003cbr\u003e    at Function. (node_modules/chai-fs/lib/assertions/directory.js:21:53)\u003cbr\u003e    at Function.ctx.(anonymous function) [as directory] (node_modules/chai/lib/chai/utils/addMethod.js:41:25)\u003cbr\u003e    at Function.assert.isDirectory (node_modules/chai-fs/lib/assertions/directory.js:34:35)\u003cbr\u003e    at Context.it (test/index-test.js:11:19)\u003cbr\u003e    ...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEach failed test includes an explanation.\u003c/p\u003e\n\u003cp\u003eIn the first test seen above, for instance, it says \u003ccode\u003ethis lab has a folder named\n        my-repository\u003c/code\u003e, followed by \u003ccode\u003eAssertionError: no folder name \"my-repository\" was\n        found\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis first test is looking specifically for a folder, \u003ccode\u003emy-repository\u003c/code\u003e, to exist inside this lab's main directory (or \"folder\"). You probably have a theory on how to correct that test after seeing that error! We're going to use these tests to let us know when we're all done.\u003c/p\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eIMPORTANT TIPS TO AVOID GETTING STUCK\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe work you will do to set up the Git repository will be done in the \u003ccode\u003emy-repository\u003c/code\u003e directory (after you create it ;)). If you're doing \u003ccode\u003egit\u003c/code\u003e commands in the same directory as THIS \u003ccode\u003eREADME\u003c/code\u003e that you're reading right now, you're not going to get to working tests.\u003c/li\u003e\n\u003cli\u003eWhen you run the tests, you will need to be in the top-level directory of this lab, (\u003ccode\u003egit-basics-lab-phase-0\u003c/code\u003e, the directory with the \u003ccode\u003eREADME\u003c/code\u003e you're reading right now in it).\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFollow the steps provided below carefully to help ensure you are doing things in the right location.\u003c/p\u003e\n\u003ch3\u003eSteps\u003c/h3\u003e\n\u003cp\u003eAs we saw above, there are \u003cstrong\u003esix\u003c/strong\u003e broken tests. Let's get them working.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eCreate a new directory locally named \u003ccode\u003emy-repository\u003c/code\u003e. This directory should be side by side with the \u003ccode\u003etest\u003c/code\u003e directory of this lab. Use the Unix command to create this directory. From the top-level of this lab, the parent directory of \u003ccode\u003emy-repository\u003c/code\u003e, run \u003ccode\u003enpm test\u003c/code\u003e and verify there are only 5 broken tests left.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNavigate into the new directory \u003ccode\u003emy-repository\u003c/code\u003e using \u003ccode\u003ecd\u003c/code\u003e on the command line.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWhile inside \u003ccode\u003emy-repository\u003c/code\u003e, using the command line, initialize a new git repository. You'll know you've done it if you see 'Initialized empty Git repository in \u003cem\u003e\u0026lt;...your local directory\u0026gt;/my-repository/.git/'\u0026gt;\u003c/em\u003e. \u003cstrong\u003eChange \u003cem\u003eback-up\u003c/em\u003e to the parent directory\u003c/strong\u003e and you should be back in the top-level directory. Run \u003ccode\u003enpm test\u003c/code\u003e again and you should be down to \u003cstrong\u003efour tests\u003c/strong\u003e left. If that's true, \u003cstrong\u003echange \u003cem\u003eback\u003c/em\u003e into \u003ccode\u003emy-repository\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCreate a \u003cstrong\u003efile\u003c/strong\u003e (not a folder) called \u003ccode\u003eREADME.md\u003c/code\u003e inside \u003ccode\u003emy-repository\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you run \u003ccode\u003egit status\u003c/code\u003e at the command line, you should see that \u003ccode\u003eREADME.md\u003c/code\u003e is now listed as an untracked file. Add \u003ccode\u003eREADME.md\u003c/code\u003e so that it is tracked by Git.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce the file is tracked, running \u003ccode\u003egit status\u003c/code\u003e again will show that \u003ccode\u003eREADME.md\u003c/code\u003e is staged and ready to be committed. Go ahead and create a commit on the command line (don't forget to add \u003ccode\u003e-m\u003c/code\u003e when committing to include a message!).\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e If you forget to include \u003ccode\u003e-m\u003c/code\u003e when committing, you may find you've opened \u003cem\u003evi\u003c/em\u003e, the built in terminal text editor. To escape out of this editor, press the 'esc' key once, then type \u003ccode\u003e:q!\u003c/code\u003e to close the editor and return to the normal terminal.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eChange \u003cem\u003eback\u003c/em\u003e to the top-level directory\u003c/strong\u003e, run \u003ccode\u003enpm test\u003c/code\u003e, and you'll see that the test output is looking pretty successful:\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e  this lab\u003cbr\u003e    ✓ has a folder named my-repository\u003cbr\u003e    ✓ has a valid git repository initialized for the my-repository folder\u003cbr\u003e    ✓ has a README.md file in the my-repository folder\u003cbr\u003e\u003cbr\u003e  the local repository\u003cbr\u003e    ✓ has README.md as a tracked file\u003cbr\u003e    ✓ has at least one commit\u003cbr\u003e    1) has been pushed up to the remote repository\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  5 passing (18ms)\u003cbr\u003e  1 failing\u003cbr\u003e\u003cbr\u003e  1) the local repository\u003cbr\u003e       has been pushed up to the remote repository:\u003cbr\u003e     AssertionError: no record of pushing to a remote was found. Follow the instructions on GitHub to connect and push to a new remote repository: value: expected './my-repository/.git/logs/refs/remotes' to exist\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlmost done! \u003cstrong\u003eChange \u003cem\u003eback\u003c/em\u003e into the \u003ccode\u003emy-repository\u003c/code\u003e directory\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e8. Create a remote repository on \u003ca href=\"https://github.com/\"\u003eGitHub\u003c/a\u003e using your personal GitHub account and connect it to your newly created local repository.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/git-workflow/new-repo-menu.png\" alt=\"new repo\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/git-workflow/name-new-repo.png\" alt=\"name new repo\"\u003e\u003c/p\u003e\n\u003cp\u003eWhen we create a blank repository, we are given multiple options for how to get started. Since we have a local folder with Git initialized already, we'll use the instructions for creating a new repository using the command line.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/git-workflow/new-repo-commands.png\" alt=\"command line repo commands\"\u003e\u003c/p\u003e\n\u003cp\u003eIf you've been following along, you may notice that the first commands listed are things you've already done - \u003ccode\u003egit init\u003c/code\u003e initialized the \u003ccode\u003emy-repository\u003c/code\u003e directory as a local Git repository; \u003ccode\u003egit add README.md\u003c/code\u003e tracks the \u003ccode\u003eREADME.md\u003c/code\u003e file (you may have used \u003ccode\u003egit add .\u003c/code\u003e, which will work too); \u003ccode\u003egit commit -m \"first commit\"\u003c/code\u003e commits the newly created \u003ccode\u003eREADME.md\u003c/code\u003e file with a message.\u003c/p\u003e\n\u003cp\u003eThe remaining commands still need to be run. First we run the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   git branch -M main\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you recall from the version control basics lesson, going forward \u003ccode\u003emain\u003c/code\u003e will be used as the default name of the... main... branch in a repository. Depending on your environment you may still have a version of Git that defaults to \u003ccode\u003emaster\u003c/code\u003e. If this is the case, the above command will change this \u003ccode\u003emaster\u003c/code\u003e branch to \u003ccode\u003emain\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAfter setting the branch, we need to add the newly created GitHub repo as the remote for your local \u003ccode\u003emy-repository\u003c/code\u003e repo. This command will include info specific to your GitHub account and the name you gave your GitHub repo:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   git remote add origin git@github.com:\u0026lt;your-github-username\u0026gt;/\u0026lt;your-github-repository\u0026gt;.git\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e9. The last step listed pushes your local work up to the remote:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   git push -u origin main\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e10. \u003cstrong\u003eChange \u003cem\u003eback\u003c/em\u003e up to the top-level directory\u003c/strong\u003e and run \u003ccode\u003enpm test\u003c/code\u003e once more, your tests should all be passing.\u003c/p\u003e\n\u003cp\u003eOnce you've passed all tests, if you visit the newly created remote repository on GitHub, you should see that the \u003ccode\u003eREADME.md\u003c/code\u003e file you created is now present.\u003c/p\u003e\n\u003ch2\u003eAdditional Practice\u003c/h2\u003e\n\u003cp\u003eWe recommend taking time to become familiar with Git commands since you'll be relying on them a lot. If you'd like to practice further, \u003cstrong\u003echange directory back into the \u003ccode\u003emy-repository\u003c/code\u003e folder\u003c/strong\u003e and try the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreate another file, then add, commit, and push to the remote\u003c/li\u003e\n\u003cli\u003eModify the contents of \u003ccode\u003eREADME.md\u003c/code\u003e, then add, commit, and push to the remote\u003c/li\u003e\n\u003cli\u003eRename \u003ccode\u003eREADME.md\u003c/code\u003e, then add, commit, and push to the remote\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eWrapping Up\u003c/h2\u003e\n\u003cp\u003eIf you would like to preserve the work you've done for this lab on GitHub, you'll need to push it up to your fork of this assignment. \u003cstrong\u003eChange directory to the top-level\u003c/strong\u003e once again, then run the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Done with assignment\"\u003cbr\u003egit push origin master\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that this assignment was created with a \u003ccode\u003emaster\u003c/code\u003e branch as the default, so the \u003ccode\u003epush\u003c/code\u003e command is different than when you pushed \u003ccode\u003emy-repository\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eAs you become more comfortable with the terminal and Git, you'll find yourself using the workflow of initializing, adding, committing and pushing your work on a regular basis. These commands are at the core of Git version control. By knowing them, you now have the ability to create your own repositories and contribute to repositories that already exist.\u003c/p\u003e\n\u003cp\u003eIn this lab you used tests to guide you in the basics of setting up a new local Git repository and binding it to a remote repository on GitHub. By pushing your work to a remote repository you've backed it up \u003cem\u003eand\u003c/em\u003e made it available for the world to see via GitHub. Professional developers use this process to share code with each other, to document their code, and to earn interview slots by showing off what they're capable of. You did this guided by \u003cem\u003etests\u003c/em\u003e. It's common for developers to write tasks as tests that all fail and then slowly work to get them all passing. It's like a to-do list that verifies you've actually done the work!\u003c/p\u003e","exportId":"g7d517e7b0c46de96ee52b10d468ef9ff"},{"id":243550,"title":"Survey - Git","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Git module?\u003c/p\u003e\n\u003c/div\u003e","exportId":"g05de37ff922717e49594a97a258589e0"}]},{"id":16906,"name":"HTML","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gfc5f9ab97ecc6a87f88679a6f4c4ee31","items":[{"id":157780,"title":"A Quick Tour of the Web","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-basics-quick-tour-of-the-web\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/html-basics-quick-tour-of-the-web/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-quick-tour-of-the-web\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-quick-tour-of-the-web/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDefine \"internet\"\u003c/li\u003e\n\u003cli\u003eDefine \"server\" role\u003c/li\u003e\n\u003cli\u003eDefine \"client\" role\u003c/li\u003e\n\u003cli\u003eIdentify which role possesses the data that browsers display\u003c/li\u003e\n\u003cli\u003eIdentify what type of content defines what's seen in browsers\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eWelcome to the web, the largest canvas in the world. Roughly 40% of the world's population has access to the web. Never before has it been possible to reach so many across such vast distances!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10A.png\" alt=\"Welcome to the Web!\"\u003e\u003c/p\u003e\n\u003cp\u003eTo orient you in these first steps of your study of HTML and web programming we want to give a broad overview of the web and how it works in the broadest terms. While you might have heard \"web,\" and \"internet\" and \"server\" in many different contexts and places over the years, it's possible that you've never built a cohesive model in your mind that connects those concepts.\u003c/p\u003e\n\u003cp\u003eIn this lesson, we'll go over the essential steps in how the web works.\u003c/p\u003e\n\u003ch2\u003eDefine \"internet\"\u003c/h2\u003e\n\u003cp\u003eWhen people share information, great things can happen. Politics can change. Our place in the universe can change. Disease can be conquered. The ability to share knowledge is \u003cem\u003epower\u003c/em\u003e. In the earliest days of computing, engineers looked for ways to have computers share information. Technical limits meant networked computers had to be within the same office.\u003c/p\u003e\n\u003cp\u003eEventually, improvements allowed small networks to \"inter\"-\"network\" with each other. This discipline was called \"internetworking.\" By the technology and knowledge of \"internetworking,\" these small local networks (or, \"local area networks\" or LANs) became \"internetworked\" into \"Wide Area Networks\" or WANs.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_18_VisualInternet.png\" alt=\"Visual Internet\"\u003e\u003c/p\u003e\n\u003cp\u003eThe natural next dream was to \"internetwork\" WANs into some sort of \"larger\" inter-network, something city-scale, country-scale, or global scale. Technology for \"inter-networking\" WANs was difficult and slow to develop, but eventually produced a backbone internetwork, \"\u003cstrong\u003eThe Internet\u003c/strong\u003ework\" which encompassed all of its constituent WANs and their constituent LANs. Eventually, in common usage, it became called \"The Internet.\"\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10B.png\" alt=\"The internet\"\u003e\u003c/p\u003e\n\u003cp\u003eIt was upon \u003cem\u003ethis\u003c/em\u003e \"The Internet\" that \"The Web\" was built.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e For many reasons, style guides no longer capitalize \"internet\" or \"web.\" The global network linking computers globally is \"the internet.\"\u003c/p\u003e\n\u003ch2\u003eDefine \"server\" Role\u003c/h2\u003e\n\u003cp\u003eAll machines on the internet are computers. For ease of discussion, we're going to discuss them in two \"roles:\" client and server. Historically a \"server\" would be a larger, more powerful computer with more memory, bigger hard drives, and more computer chips. But today, \"server\" roles can be handled quite well by Arduino devices no bigger than a credit card! Nevertheless, in diagrams and on whiteboards they tend to be drawn as large \"tower-style\" computers.\u003c/p\u003e\n\u003cp\u003eRegardless of its size, a \"server\" has the responsibility of arranging the data that is presented to the \"client.\" It's because of this \"arranging\" being computationally demanding that servers have tended to have extra resources.\u003c/p\u003e\n\u003cp\u003eHistorically, computers were very expensive and well-appointed servers were very, very expensive. As such, when possible, it was more economical for servers to do heavy processing and for the clients to request updates.\u003c/p\u003e\n\u003ch2\u003eDefine \"client\" Role\u003c/h2\u003e\n\u003cp\u003eA computer fulfilling a client role has the responsibility of presenting the data that is sent from the server. Historically, these machines could be more lightly equipped (and thus cheaper). You'll generally see them drawn in diagrams or on whiteboards as laptops.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003eclient\u003c/em\u003e displays data that is provided to it by the \u003cem\u003eserver\u003c/em\u003e. A verb that's commonly used is \"render\" as in, \"The client \u003cem\u003erenders\u003c/em\u003e data provided by the server.\" That is, it only displays the server's data and any change to the data has to be done \u003cem\u003eby the server\u003c/em\u003e, caused by a \u003cem\u003erequest\u003c/em\u003e from the \u003cem\u003eclient\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_19_BasicClientServer.png\" alt=\"Client/Server Role\"\u003e\u003c/p\u003e\n\u003ch2\u003eClient/Server Example\u003c/h2\u003e\n\u003cp\u003eLet's take a moment to consider client/server in a common scenario: the supermarket.\u003c/p\u003e\n\u003cp\u003eIf you ask the cashier for the price of a bottle of water, they can look it up for you. But their client computer's \"source of truth\" on the price lives on the server. The \u003cem\u003eclient\u003c/em\u003e must request this information by \"asking\" or \"sending a request\" to the \u003cem\u003eserver\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eSimilarly, when you buy that bottle of water, the (lightweight) client says \"Sold a bottle of water!\" to a server. The server, in turn, updates its inventory record to show \u003ccode\u003e-1\u003c/code\u003e water bottle.\u003c/p\u003e\n\u003cp\u003eNow, at the end of the sales day, the management team would like to do some analytics about how profitable they were that day. They \u003cem\u003ecould\u003c/em\u003e go to each client computer, determine its revenue for the day and which departments contributed to that number, but on a cheap client machine that process would be s..l...o.....w — like trying to play a PS4 game on an iPhone!\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eHowever\u003c/em\u003e, if each client computer merely logged its actions to the server by sending requests, the management could ask that high-power machine to print out analytics in an economical and efficient fashion. Many businesses still have their IT architecture on this model, known as \"the client/server\" model.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10C_ClientServerExample.png\" alt=\"Client/Server Illustration\"\u003e\u003c/p\u003e\n\u003ch2\u003eIdentify Which Role Possesses the Data That Browsers Display\u003c/h2\u003e\n\u003cp\u003eThe web was developed with a client/server model. Home PCs were relatively underpowered (like our checkstands) \u003cem\u003eclients\u003c/em\u003e and web content sharing programs were installed on high-power \u003cem\u003eservers\u003c/em\u003e. Thus web \u003cem\u003eclients\u003c/em\u003e running \u003cem\u003ebrowser\u003c/em\u003e software were created that would send a \u003cem\u003erequest\u003c/em\u003e for a web page and the server would return the web page.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_81_WebAppStack.png\" alt=\"Web Application Stack\"\u003e\u003c/p\u003e\n\u003cp\u003eThe specification on how \u003cem\u003eclients\u003c/em\u003e and \u003cem\u003eservers\u003c/em\u003e interact is called HTTP (HyperText Transfer Protocol). This is why URLs start with \u003ccode\u003ehttp://\u003c/code\u003e: you're telling the browser: \"Browser, act as a client and use the HTTP standard to talk to \u003ccode\u003eflatironschool.com\u003c/code\u003e and find a file called \u003ccode\u003eindex.html\u003c/code\u003e.\" The browser expresses this wish by transmitting a message that looks like:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eGET flatironschool.com /index.html\u003c/code\u003e \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10D_BrowserClientInteraction.png\" alt=\"Browser as Client Illustration\"\u003e\u003c/p\u003e\n\u003cp\u003eHere it asks \u003ccode\u003eflatironschool.com\u003c/code\u003e for an HTML file called \u003ccode\u003eindex\u003c/code\u003e. We'll explore this \u003cem\u003emuch\u003c/em\u003e more in subsequent lessons!\u003c/p\u003e\n\u003cp\u003eIn return, the \u003cem\u003eserver\u003c/em\u003e returns... HTML that's contained in the \u003ccode\u003eindex.html\u003c/code\u003e file.\u003c/p\u003e\n\u003ch2\u003eIdentify What Type of Content Defines What's Seen in Browsers\u003c/h2\u003e\n\u003cp\u003eHaving been told which file on \u003cem\u003eits\u003c/em\u003e hard drive to consult, the web \u003cem\u003eserver\u003c/em\u003e takes the contents of a file, pushes them across the internet \u003cem\u003eback\u003c/em\u003e to the \u003cem\u003eclient\u003c/em\u003e. The client then receives the raw HTML. It looks something like this:\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-c1\"\u003e\u0026lt;!DOCTYPE html\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ehtml\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003elang\u003c/span\u003e=\"\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ehead\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etitle\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eHome | The Metropolitan Museum of Art\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etitle\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003emeta\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003echarset\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eUTF-8\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003emeta\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eviewport\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003econtent\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ewidth=device-width, initial-scale=1.0\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003emeta\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etitle\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003econtent\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eHome\u003c/span\u003e\" /\u0026gt;\n        \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003emeta\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ekeywords\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003econtent\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eMetropolitan Museum, Met, Metropolitan Museum of Art, Met Museum, Metropolitan\u003c/span\u003e\" /\u0026gt;\n        \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003emeta\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003edescription\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003econtent\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eThe Metropolitan Museum of Art is a...\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n        ...\u003c/pre\u003e\n\u003cp\u003eObviously, this is \u003cem\u003enot\u003c/em\u003e what you see when you visit \u003ca href=\"http://www.metmuseum.org\"\u003ehttp://www.metmuseum.org\u003c/a\u003e. The difference hinges on that special verb \u003cem\u003erender\u003c/em\u003e. Your \u003cem\u003eclient's\u003c/em\u003e browser \u003cem\u003erenders\u003c/em\u003e the \"raw\" HTML and turns it into something \u003cem\u003ehumans\u003c/em\u003e find nice to read.\u003c/p\u003e\n\u003cp\u003eAnd this is the essence of how the web works!\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn conclusion, we've talked about the history of the word \u003cem\u003einternet\u003c/em\u003e and how it connects computers fulfilling \u003cem\u003eclient\u003c/em\u003e and \u003cem\u003eserver\u003c/em\u003e roles. We've identified that \u003cem\u003eclient\u003c/em\u003e machines use web browsers to make \u003cem\u003erequests\u003c/em\u003e of the \u003cem\u003eserver\u003c/em\u003e, according to the HTTP standard, and \u003cem\u003eserver\u003c/em\u003e return HTML data, stored on their hard drives in files \u003cem\u003eback\u003c/em\u003e to the requesting \u003cem\u003eclient\u003c/em\u003e. The \u003cem\u003eclient\u003c/em\u003e machine, running browser software, then converts that raw HTML data into a \u003cem\u003erendered\u003c/em\u003e format which is what you experience as a web page.\u003c/p\u003e\n\u003cp\u003eAs a summarizing video, we've provided the following video of our dean, Avi Flombaum, giving a short introduction to the web. If you are only interested in building web pages, you can stop at 3:48; if you are studying a web programming technology e.g. Ruby or JavaScript, we recommend watching the entire video.\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.youtube.com/embed/7AS96jRnquI?rel=0\u0026amp;modestbranding=1\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=7AS96jRnquI\"\u003eThe Web in a Nutshell\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.google.com/presentation/d/1m6SPR13MdfF7YRhfx7HtvkOmFnrRyVQOEFgWhI8Bc0I/edit?usp=sharing\"\u003eSlides\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/World_Wide_Web\"\u003eWorld Wide Web - Wikipedia\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics\"\u003eHTML basics - Mozilla Developer Network\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\"\u003eAn overview of HTTP - Mozilla Developer Network\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://noahveltman.com/static-dynamic/\"\u003eStatic vs Dynamic\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Client%E2%80%93server_model\"\u003eClient Server Model - Wikipedia\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"a-quick-tour-of-the-web"},{"id":157782,"title":"Welcome to HTML","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-basics-welcome-to-html\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-basics-welcome-to-html/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-welcome-to-html\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-welcome-to-html/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWelcome to the HTML Basics unit!\u003c/p\u003e\n\n\u003ch2\u003ePreview\u003c/h2\u003e\n\n\u003cp\u003eIn the next few lessons, we'll be introducing you to HTML (HyperText\nMarkup Language).\u003c/p\u003e\n\n\u003cp\u003eHTML is a \u003cem\u003edocumentation-based\u003c/em\u003e technology. The word \u003cem\u003edocumentation\u003c/em\u003e probably\ninspires a mental image of someone carrying heaps of papers, folders, files.\nBut what is a \u003cem\u003edocument\u003c/em\u003e in the digital realm?\u003c/p\u003e\n\n\u003cp\u003eWe'll start our exploration of HTML by thinking about files and learning the\nvocabulary technologists use to discuss them in the process of creating HTML\ndocuments. This will assist your searches for help and your ability to interact\nwith professionals on the topic.\u003c/p\u003e\n\n\u003cp\u003eWe'll then proceed to a collaborative lab where you'll be guided in editing a\nsimple HTML document. The point here is not to memorize the full detail of\nHTML's vocabulary, but to experience the joy and excitement of being able to\nadjust and customize HTML.\u003c/p\u003e\n\n\u003cp\u003eAfter that, we'll learn a core set of HTML features that will enable you to create\nsimple HTML documents with less-explicit guidance. Around this time, you'll then\nbegin tying these discoveries together and will start creating your first\nHTML documents.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/welcome-to-html/Image_48_HTMLBannerGraphic.png\" alt=\"Welcome to HTML\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eRepetition \u0026amp; Getting Stuck\u003c/h2\u003e\n\n\u003cp\u003eIn the lessons ahead, many of the ideas are deliberately repeated. You might not \nget \"attributes\" the first time you see them, but, after some hands-on experience,\nthey'll make sense the second time you see them.\u003c/p\u003e\n\n\u003ch2\u003eBeyond\u003c/h2\u003e\n\n\u003cp\u003eAt the close of the unit, you'll be ready to learn a series of HTML expressions\nthat will allow you to create a meaningful web page. \u003c/p\u003e","exportId":"welcome-to-html"},{"id":157783,"title":"Files, Extensions, and File Types","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-basics-files-and-filetypes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-basics-files-and-filetypes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-files-and-filetypes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-files-and-filetypes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a file\u003c/li\u003e\n\u003cli\u003eContrast \u003cem\u003etext files\u003c/em\u003e and \u003cem\u003ebinary files\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003eIdentify the function of file extensions\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eHave you tried to memorize a phone number \"for a second\" as you tried to write\nit down? Maybe you kept repeating it over and over? Have you ever felt a little\noverwhelmed when someone was giving you too much information at once and you were\ntrying to keep up--but felt relief when you finally \"got it\"? As humans, we can\nonly hold a few things in our heads before they start to, well, vanish or get \nmixed up. Our \u003cem\u003eworking memory\u003c/em\u003e is not too reliable!\u003c/p\u003e\n\n\u003cp\u003eComputers also have limited working memory. Just like us, they keep things in\nworking memory that they're, well, working with.\u003c/p\u003e\n\n\u003cp\u003eWhen computers or people run out of space, they write down information stored in\ntheir \u003cem\u003eworking memory\u003c/em\u003e. Humans sometimes use a napkin, Post-It Notes or the back\nof their hands. Computers use \u003cem\u003efiles\u003c/em\u003e. The stuff computers write into their\nfiles fits into two main categories:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eInformation humans can read (\"text files\")\u003c/li\u003e\n\u003cli\u003eInformation only computers can read (\"binary files\")\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eDevelopers create \u003cem\u003elots\u003c/em\u003e of files. This README will help us all get on the same\npage with how to talk about them.\u003c/p\u003e\n\n\u003ch2\u003eDefine a File\u003c/h2\u003e\n\n\u003cp\u003eA file is a thing computers use to store facts (\"data\") or processes\n(\"programs\") for later use.\u003c/p\u003e\n\n\u003ch2\u003eContrast \u003cem\u003eText Files\u003c/em\u003e and \u003cem\u003eBinary Files\u003c/em\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eComputers think in electricity.\u003c/p\u003e\n\n\u003cp\u003eWhoa!\u003c/p\u003e\n\n\u003cp\u003eComputers' thoughts are usually shown as 1's and 0's. This is called \u003cem\u003ebinary\ncode\u003c/em\u003e. When computers write things down, they often write them down in files in\n\u003cem\u003etheir\u003c/em\u003e language, \u003cem\u003ebinary\u003c/em\u003e. These files are \u003cem\u003ebinary files\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eTypes of \u003cem\u003ebinary\u003c/em\u003e files are images, music, and software programs. We can create\nthese files with Adobe Photoshop, the C programming language, or Ableton.\u003c/p\u003e\n\n\u003cp\u003eNobody is exactly sure how humans think. That's a question for science or\nphilosophy. When we write our ideas down, we write them in files in \u003cem\u003eour\u003c/em\u003e\nlanguage, \u003cem\u003etext\u003c/em\u003e. These files are \u003cem\u003etext files\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eTypes of \u003cem\u003etext\u003c/em\u003e files are HTML, letters to grandma, a list of student\ngrades for a grade book program, directions to Carnegie Hall, etc. We create\nthese \u003cem\u003etext\u003c/em\u003e files with \u003cem\u003etext editors\u003c/em\u003e like the LearnIDE editor, Atom, Sublime\nText, vim, or emacs.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE:\u003c/strong\u003e You might hear some developers call text files\n\"\u003ca href=\"https://en.wikipedia.org/wiki/Plain_text\"\u003eplaintext\u003c/a\u003e\" or \"\u003ca href=\"https://en.wikipedia.org/wiki/Plain_text\"\u003eplain text\u003c/a\u003e files\" They all mean the\nsame thing.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eThe Curious Case of Word Processing Files\u003c/h3\u003e\n\n\u003cp\u003eWhat about files made by word processors Microsoft Word or MacOSX's TextEdit?\nWhile you're typing text, those programs store the text \u003cem\u003eas well as\ninformation\u003c/em\u003e about the text (which font to use, which words are in bold,\nwhether these next five lines are part of a bullet-list, etc.) in the \u003cem\u003esame\u003c/em\u003e\nfile.  To make the loading and saving fast, these programs save the file in\n\u003cem\u003ebinary\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3\u003eWord Processors and HTML, Code\u003c/h3\u003e\n\n\u003cp\u003eSince word processing programs store their output in \u003cem\u003ebinary\u003c/em\u003e files and\nprograms that read HTML (like browsers) or run code (like Ruby, Python,\nJavaScript, or Java) need \u003cem\u003etext\u003c/em\u003e, \u003cstrong\u003eWord Processors should not be used to\ncreate HTML or code. Developers do their work in \u003cem\u003etext editors\u003c/em\u003e, not \u003cem\u003eword\nprocessors\u003c/em\u003e.\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eIdentify the Function of File Extensions\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/files-filetypes/Image_49_FileTypeAssets.png\" alt=\"Common Filetypes and File Extensions\"\u003e\u003c/p\u003e\n\n\u003cp\u003eMany file names have an \"extension\" that comes after a \u003ccode\u003e.\u003c/code\u003e. It is not a\nrequirement, but it's a best practice. The extension is a \"hint\" to the\noperating system of which program should be used to work with the file.  For\nexample, \u003ccode\u003eLetterToGrandma.docx\u003c/code\u003e has a \u003cem\u003edocx\u003c/em\u003e \u003cem\u003eextension\u003c/em\u003e which \u003cem\u003ehints\u003c/em\u003e to the\nOS that it should open the file with the Word word processing program by\nMicrosoft. The file \u003ccode\u003ejob_offer.pdf\u003c/code\u003e \u003cem\u003ehints\u003c/em\u003e to the OS that it could open the\nfile with either Acrobat or MacOSX's Preview application. When the OS finds\nmany good options, it will ask for the user's help in selecting the right program.\u003c/p\u003e\n\n\u003cp\u003eChanging an extension \u003cstrong\u003edoes not\u003c/strong\u003e change the type of file you have. A text\nfile called \u003ccode\u003egroceries.txt\u003c/code\u003e could be renamed \u003ccode\u003egroceries.mp3\u003c/code\u003e \u003cstrong\u003ebut it would\nstill be a text file\u003c/strong\u003e. A Toyota with a BMW medallion does not suddenly become\na BMW. Our \u003ccode\u003egroceries\u003c/code\u003e did not suddenly become music because we changed the\nextension.\u003c/p\u003e\n\n\u003cp\u003eSome operating systems, like MacOSX, \u003cem\u003ehide\u003c/em\u003e the file extension by default.  They reckon\nthat most users \"no longer care about it.\" Since we're\ndevelopers, though, we will frequently dig below the \"end-user\" layer. When in\na terminal, we will see full file names - including extensions.\u003c/p\u003e\n\n\u003cp\u003eHere's a table to help train your instincts in seeing text- files versus\nbinary-files:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/files-filetypes/Image_49B_FileTypeChart.png\" alt=\"Table of file types\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we have taken some time to get to know files. Files are things\nin which computers store data that needs to last a while or which their users\nmight want to refer to again later. We've noted that files generally come in\nbinary and text formats. And we saw that many files also have an extension\nthat provides hints about which program should be used to work with the file.\u003c/p\u003e","exportId":"files-extensions-and-file-types"},{"id":157785,"title":"Experiencing HTML Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-experiencing-html-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-experiencing-html-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-experiencing-html-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-experiencing-html-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate an ordered HTML list\u003c/li\u003e \u003cli\u003eCreate an unordered HTML list\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eHow do we go about writing text for the web? How is that different from the text that we write in a text file?  We're going to experience for ourselves how these things are different in this lab.\u003c/p\u003e  \u003cp\u003eYou don't need any prior knowledge of HTML for this lab. We're going to tell you what to type. Don't focus on specific commands or taking notes. Everything will be covered thoroughly later. Instead, the goal of this exercise is to feel the joy of editing a file and seeing the change \"out there.\"\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e We don't expect you to know \u003cem\u003emarkup\u003c/em\u003e, \u003cem\u003econtent\u003c/em\u003e, \u003cem\u003esource text\u003c/em\u003e, or \u003cem\u003erendered text\u003c/em\u003e yet. We'll be defining them in this lab.\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eIf you haven't already, fork and clone this lesson into your local environment.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eQuick Review:\u003c/strong\u003e To fork this lab:\u003c/p\u003e  \u003col\u003e \u003cli\u003eclick the \u003cstrong\u003eFork\u003c/strong\u003e icon in the upper right of this page. This will bring you to GitHub. You may be prompted to choose where to fork — choose your personal GitHub account.\u003c/li\u003e \u003cli\u003eOnce your fork is created, click the \u003cstrong\u003eCode\u003c/strong\u003e button in GitHub, choose \u003cstrong\u003eSSH\u003c/strong\u003e and copy the provided git URL info.\u003c/li\u003e \u003cli\u003eClone to your local machine with \u003ccode\u003egit clone\u003c/code\u003e followed by the git URL you copied. This will create a folder in the location you're currently in containing your fork of this lab's repository.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003ccode\u003ecd\u003c/code\u003e into the repository that you just cloned down in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. (If you are using a different text editor, the command will be different. For the AWS Cloud9 IDE, for example, you must click on the file in the left navigation to open it.) Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e This lab's test uses Ruby, so the commands we'll use are different than what you've seen before — \u003ccode\u003enpm install\u003c/code\u003e and \u003ccode\u003enpm test\u003c/code\u003e. Here, we use \u003ccode\u003ebundle\u003c/code\u003e and \u003ccode\u003erspec\u003c/code\u003e to do the same things.\u003c/p\u003e  \u003ch2\u003eCreate an Ordered HTML List\u003c/h2\u003e  \u003cp\u003eThink of a collection of things united by theme: Pokémon, Old-school MC's, Prime Ministers of New Zealand, Magical Beasts and Where to Find Them, etc. We're going to walk through how to create a list of these things marked up with HTML.\u003c/p\u003e  \u003ch3\u003eCreate a Text File with Content\u003c/h3\u003e  \u003cp\u003eIn your terminal, while still inside of this labs directory,  create a new file called \u003ccode\u003emy_list.txt\u003c/code\u003e by running \u003ccode\u003etouch my_list.txt\u003c/code\u003e.  The file extension suggests to humans and operating systems that it contains text. Open the file in VS Code by typing \u003ccode\u003ecode my_list.txt\u003c/code\u003e; you will do all editing for this lesson in VS Code.\u003c/p\u003e  \u003cp\u003eRemember your collection of things? Now write in a few of them in your file. Here's an example from us (songs in the English post-punk genre).\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\"Love Will Tear Us Apart\"\u003cbr\u003e\"Bela Lugosi's Dead\"\u003cbr\u003e\"A Forest\"\u003cbr\u003e\"Nine While Nine\"\u003cbr\u003e\"Girlfriend In a Coma\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe material we typed into the file is called the \u003cem\u003econtent\u003c/em\u003e. It's the thing we're trying to communicate.\u003c/p\u003e  \u003ch3\u003eContent as a List in a Text File\u003c/h3\u003e  \u003cp\u003eA problem with our \u003cem\u003econtent\u003c/em\u003e is that it doesn't explicitly state anywhere that it's a list. In the example, we see a list of songs. But a browser doesn't know what a \"list\" is.\u003c/p\u003e  \u003cp\u003eWe need to help the browser \u003cstrong\u003eknow\u003c/strong\u003e  what a list is. The secret is to add \"notes\" or \"breadcrumbs\" to the content that tell the browser that it has list items and that these items \"go together\" in a list. To add these \"notes\" we surround the \u003cem\u003econtent\u003c/em\u003e with bits of \u003cem\u003emarkup\u003c/em\u003e, with bits of HTML.\u003c/p\u003e  \u003cp\u003eWe will take the text content from our text file, paste it into a new HTML file and then we will add \u003cem\u003emarkup\u003c/em\u003e so that a browser \"sees\" a list. Let's write an HTML file!\u003c/p\u003e  \u003ch3\u003eText Inside an HTML File\u003c/h3\u003e  \u003cp\u003eNow we're going to create an HTML list together.\u003c/p\u003e  \u003col\u003e \u003cli\u003eCreate a new file called \u003ccode\u003emy_list.html\u003c/code\u003e. You can either do this in the terminal and then open it in VS Code, or create the file directly in VS Code.\u003c/li\u003e \u003cli\u003eCopy the contents of \u003ccode\u003emy_list.txt\u003c/code\u003e and paste them into \u003ccode\u003emy_list.html\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eSave the \u003ccode\u003emy_list.html\u003c/code\u003e file\u003c/li\u003e \u003cli\u003eOpen the \u003ccode\u003emy_list.html\u003c/code\u003e file in the browser. For Mac users, you can do this with \u003ccode\u003eopen my_list.html\u003c/code\u003e. For Windows users, you can do this in your Ubuntu app with \u003ccode\u003eexplorer.exe my_list.html\u003c/code\u003e. Make sure you've \u003ca href=\"https://support.google.com/chrome/answer/95417?co=GENIE.Platform%3DDesktop\u0026amp;hl=en\"\u003eset Chrome as your default browser\u003c/a\u003e.\u003c/li\u003e \u003cli\u003eHit enter to run the command\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are using the AWS Cloud9 IDE, the process for opening HTML files is slightly different. In the lefthand file navigation, right click \u003ccode\u003emy_list.html\u003c/code\u003e (command + click for Mac users). In the context menu that appears, click the \u003cstrong\u003ePreview\u003c/strong\u003e option:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/aws-preview-menu-option.png\" alt=\"aws preview\"\u003e\u003c/p\u003e  \u003cp\u003eThis will open the HTML page as a new tab in the IDE. You can also open this preview tab as a separate browser tab by clicking the 'pop out' button in the upper right corner of the tab\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/aws-pop-out-button.png\" alt=\"pop out button\"\u003e\u003c/p\u003e  \u003cp\u003eOnce you've opened the file in the browser, you should see:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/intro-the-shell/non_marked_up_list.png\" alt=\"HTML file with non-marked-up content displays on one line\"\u003e\u003c/p\u003e  \u003cp\u003eAs noted above, the browser doesn't know that items on new lines means \"items in a list.\" Browsers ignore when HTML is split onto new lines. We cover why a little later in this README. Since the browser doesn't know we intend this to be a list \u003cstrong\u003eand\u003c/strong\u003e since browsers ignore when \u003cem\u003econtent\u003c/em\u003e is split onto different lines, it displays all the \u003cem\u003econtent\u003c/em\u003e on one line. Not what we wanted.\u003c/p\u003e  \u003ch3\u003eA Text Not-Really-A-List Into a Real-HTML-List\u003c/h3\u003e  \u003cp\u003e\u003cstrong\u003eREMEMBER\u003c/strong\u003e: This lab will provide you what to type. Subsequent labs will deeply examine details of HTML markup. However, our goal here is to show how slight changes to markup can quickly alter the browser's display of content. If you're fuzzy on a detail that's fine.\u003c/p\u003e  \u003ch4\u003eMarking-Up List Items\u003c/h4\u003e  \u003cp\u003eOK, we've reached the critical moment. We're going to tell the browser that these bits of letters represent \u003cstrong\u003elist items\u003c/strong\u003e. To do so we \"wrap\" each line with \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;/li\u0026gt;\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\"Love Will Tear Us Apart\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;li\u0026gt;\"Bela Lugosi's Dead\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;li\u0026gt;\"A Forest\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;li\u0026gt;\"Nine While Nine\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;li\u0026gt;\"Girlfriend In a Coma\"\u0026lt;/li\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFlip back to the \u003cstrong\u003eviewing tab\u003c/strong\u003e and refresh the page. You should see something like the following:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/experiencing-html-lab/ul_song_list.png\" alt=\"Songlist\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eAWESOME\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eIn this step we added some HTML \u003cem\u003emarkup\u003c/em\u003e:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThe \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e is an HTML \u003cstrong\u003elist item\u003c/strong\u003e \u003cem\u003eopening tag\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eThe \u003ccode\u003e\u0026lt;/li\u0026gt;\u003c/code\u003e is an HTML \u003cem\u003eclosing tag\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eWe would call this pair of opening and closing tags a \"\u003ccode\u003eli\u003c/code\u003e tag\"\u003c/li\u003e \u003cli\u003eThe whole length of text of \u003cem\u003eopening markup\u003c/em\u003e plus \"wrapped\" content plus \u003cem\u003eclosing markup\u003c/em\u003e (\u003ccode\u003e\u0026lt;li\u0026gt;...content...\u0026lt;/li\u0026gt;\u003c/code\u003e) is called \"an HTML element;\" or, more exactly, an \u003ccode\u003eli element\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAgain, you don't need to memorize these terms yet, but we want to help you develop an intuition for how these words are used. You will be using these terms when speaking with other developers and HTML authors.\u003c/p\u003e  \u003cp\u003eIt may not seem like we did much work, but the idea of a method for \"marking up\" \u003cem\u003econtent\u003c/em\u003e and linking it is the foundation of the web. It's what made Tim Berners-Lee's reputation. And \u003cstrong\u003eyou\u003c/strong\u003e just experienced Sir Tim's great insight. \u003cstrong\u003eAWESOME\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eLet's work with additional HTML tags to see how we tweak our HTML a bit more. Let's tell the browser \"Hey! These list items, they go together!\"\u003c/p\u003e  \u003ch3\u003eIndicating that List Items Are Connected\u003c/h3\u003e  \u003cp\u003eWrap the entire set of \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e items with an \u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;/ol\u0026gt;\u003c/code\u003e like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u003cbr\u003e   \u0026lt;li\u0026gt;\"Love Will Tear Us Apart\"\u0026lt;/li\u0026gt;\u003cbr\u003e   \u0026lt;li\u0026gt;\"Bela Lugosi's Dead\"\u0026lt;/li\u0026gt;\u003cbr\u003e   \u0026lt;li\u0026gt;\"A Forest\"\u0026lt;/li\u0026gt;\u003cbr\u003e   \u0026lt;li\u0026gt;\"Nine While Nine\"\u0026lt;/li\u0026gt;\u003cbr\u003e   \u0026lt;li\u0026gt;\"Girlfriend In a Coma\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ol\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSave the file and refresh the \u003cstrong\u003eviewing tab\u003c/strong\u003e. It should display:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/experiencing-html-lab/ordered_list.png\" alt=\"List displayed as an ordered list\"\u003e\u003c/p\u003e  \u003cp\u003eWe told the browser that this set of list items that we \"wrapped\" in the \u003cstrong\u003eordered list\u003c/strong\u003e tag go together \u003cstrong\u003eas a list\u003c/strong\u003e. Because we told the browser that the list is \u003cstrong\u003eordered\u003c/strong\u003e it decided to be helpful and put numbers next to the list items \u003cem\u003efor us\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003eWrapping and Indentation\u003c/h3\u003e  \u003cp\u003eWith all these angle-brackets of \u003cem\u003emarkup\u003c/em\u003e and \u003cem\u003econtent\u003c/em\u003e mixed together, HTML authors like to use indentation to make HTML easier to read. Here's how most HTML authors would expect our code from the previous section to be arranged:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Love Will Tear Us Apart\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Bela Lugosi's Dead\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"A Forest\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Nine While Nine\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Girlfriend In a Coma\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ol\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUpdate your document. Save it and refresh your \u003cstrong\u003eviewing tab\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eRemember earlier when the browser ignored that \u003cem\u003econtent\u003c/em\u003e was on separate lines? Cleaning up your code requires splitting lines, adding spaces, and adding tabs. Browsers ignore those characters that \u003cem\u003ehumans\u003c/em\u003e use to make their HTML reader-friendly.\u003c/p\u003e  \u003ch2\u003eCreate an Unordered HTML List\u003c/h2\u003e  \u003cp\u003eLet's change our ordered list to be \u003cstrong\u003eunordered\u003c/strong\u003e. If \u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e means \u003cstrong\u003eordered list\u003c/strong\u003e, you might guess that \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e means \u003cstrong\u003eunordered list\u003c/strong\u003e. Make the change and refresh your \u003cstrong\u003eviewing tab\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/experiencing-html-lab/unordered_list.png\" alt=\"Back to Unordered List\"\u003e\u003c/p\u003e  \u003cp\u003eHere we return to a \"bulleted\" unordered list.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: If you've been following along closely, you might be wondering, if we didn't have a \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e tag around our \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e items earlier, how did the browser know how treat those \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e as if they were in a \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e? When browsers detect problematic HTML they guess! This can lead to some very strange results when you make an error, but if you write \u003cem\u003einvalid\u003c/em\u003e HTML, they try to recover. HTML validity will be discussed further soon!\u003c/p\u003e  \u003ch3\u003eAdd a Description Paragraph\u003c/h3\u003e  \u003cp\u003eLet's introduce our list by adding some background:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;Some of my favorite post-punk and Goth songs!\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Love Will Tear Us Apart\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Bela Lugosi's Dead\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"A Forest\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Nine While Nine\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Girlfriend In a Coma\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTake a look at your \"rendered page\" and verify the result is to your liking.\u003c/p\u003e  \u003ch3\u003ePut a Header on It\u003c/h3\u003e  \u003cp\u003eLastly, let's put a \"heading\" on the top of our document. Add a \u003ccode\u003eh1\u003c/code\u003e element with an appropriate title inside.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;My Music List\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere's the full example code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;My Music List\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;Some of my favorite post-punk and Goth songs!\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Love Will Tear Us Apart\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Bela Lugosi's Dead\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"A Forest\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Nine While Nine\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Girlfriend In a Coma\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/experiencing-html-lab/final_header_paragraph_ul.png\" alt=\"Final Document\"\u003e\u003c/p\u003e  \u003cp\u003eWhen you're done, it is time to run this assignment's tests. Make sure that you have your HTML content in a file called \u003ccode\u003emy_list.html\u003c/code\u003e in order to pass the check. Type \u003ccode\u003erspec\u003c/code\u003e and verify that your tests pass.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lab, you have done the job of an HTML author. You receive raw \u003cem\u003econtent\u003c/em\u003e, you \u003cem\u003emark it up\u003c/em\u003e to create \u003cem\u003esource text\u003c/em\u003e. You test, tweak and adjust your \u003cem\u003esource text\u003c/em\u003e until the \u003cem\u003erendered text\u003c/em\u003e displayed in the browser is to your liking. \u003c/p\u003e  \u003cp\u003eIn upcoming lessons, we will learn additional tags which provide us more ways to describe our content. We might be starting with lists today, but soon we'll be using HTML in even more exciting ways!\u003c/p\u003e  \u003cp\u003eWelcome to the community of web page creators!\u003c/p\u003e","exportId":"gc3f7b0e63ee02e1114ac2c6d93ec85fe"},{"id":157787,"title":"Document Structure Continued","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-document-structure-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-document-structure-lab/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-document-structure-lab\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-document-structure-lab/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eRecognize basic HTML document structure\u003c/li\u003e\n    \u003cli\u003eRecognize HTML comments\u003c/li\u003e\n    \u003cli\u003eDescribe the \u003ccode\u003ehead\u003c/code\u003e section and its contents\u003c/li\u003e\n    \u003cli\u003eCreate an HTML document\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eEvery HTML document has a specific set of required tags. Because these are required \u003cem\u003eevery\u003c/em\u003e time we create a web page, it is valuable to gain a more in-depth understanding of what these tags do, why they are useful, and how they work in context to the modern web.\u003c/p\u003e\n\u003cp\u003eWe will be both reviewing setting up well-formed HTML documents and expanding a bit on the \u003ccode\u003eDOCTYPE\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e and \u003ccode\u003ehead\u003c/code\u003e tags, as well as introducing how to add comments within our HTML code.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code (If you are using a different text editor, the command will be different). Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eRecognize Basic HTML Document Structure\u003c/h2\u003e\n\u003cp\u003eLet's start by adding the bare essentials of an HTML document to the provided \u003ccode\u003eindex.html\u003c/code\u003e file:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003eA \u003ccode\u003eDOCTYPE\u003c/code\u003e tag, which looks like this: \u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n    \u003cli\u003eOpening and closing \u003ccode\u003ehtml\u003c/code\u003e tags\u003c/li\u003e\n    \u003cli\u003eOpening and closing \u003ccode\u003ehead\u003c/code\u003e tags nested inside the \u003ccode\u003ehtml\u003c/code\u003e tags\u003c/li\u003e\n    \u003cli\u003eOpening and closing \u003ccode\u003ebody\u003c/code\u003e tags nested inside the \u003ccode\u003ehtml\u003c/code\u003e tags\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf written correctly, running \u003ccode\u003erspec\u003c/code\u003e now will pass the \u003cstrong\u003efirst\u003c/strong\u003e test of this lab. \u003cstrong\u003eHowever\u003c/strong\u003e you will not be done yet! We have to make \u003cstrong\u003eall\u003c/strong\u003e the tests pass in order to make the test code happy! Fixing this first one means that we get to attack the next one. Let's get to it!\u003c/p\u003e\n\u003cp\u003eLet's take a closer look at these tags.\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eAt the top of every HTML document, you're always going to start off with the same element, \u003ccode\u003eDOCTYPE\u003c/code\u003e. In the early days of the internet, there were fewer standards, and it was important to declare the specific way we wanted browsers to interpret the file at the top of each file. Netscape and Internet Explorer would look for this declaration and handle the content differently depending on what it found. These days, every current browser is compatible with HTML5, and \u003ccode\u003eDOCTYPE\u003c/code\u003e is mainly used to tell the browser to render the page in standards compliant mode.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eDOCTYPE\u003c/code\u003e element, as with all HTML, starts with a \u003ccode\u003e\u0026lt;\u003c/code\u003e and ends with a \u003ccode\u003e\u0026gt;\u003c/code\u003e. Uniquely, the \u003ccode\u003eDOCTYPE\u003c/code\u003e tag starts with an exclamation point, \u003ccode\u003e!\u003c/code\u003e, followed by \u003ccode\u003eDOCTYPE\u003c/code\u003e, then specifies which version of HTML we want to use. In HTML5, we just write \u003ccode\u003ehtml\u003c/code\u003e and the browser interprets the rest of the document as HTML5.\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe next element is also always required: \u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e. This tells the browser that everything that falls between the opening and closing \u003ccode\u003ehtml\u003c/code\u003e tags is to be interpreted as HTML code.\u003c/p\u003e\n\u003cp\u003eOne attribute that is important to include in the \u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e tag is \u003ccode\u003elang\u003c/code\u003e, which declares what language the webpage is written in. In our case, writing in English, we will use \u003ccode\u003elang=\"en\"\u003c/code\u003e. This helps search engines to know what language a page is written in. Google, for instance, can use the \u003ccode\u003elang\u003c/code\u003e attribute to know when to prompt uses about translating web content.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;html lang=\"en\"\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eRecognize HTML Comments\u003c/h2\u003e\n\u003cp\u003eSometimes we want to leave notes either for ourselves or for other developers inside of our HTML files. An example might be a brief explanation of what some part of the code is doing, or an important message or reminder. We can write comments by wrapping the text we want like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- This is a comment! --\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eText included in a comment will not be visible on the webpage, but will be visible in the browser console and \u003ccode\u003e.html\u003c/code\u003e file.\u003c/p\u003e\n\u003ch2\u003eDescribe the \u003ccode\u003ehead\u003c/code\u003e Section and its Contents\u003c/h2\u003e\n\u003cp\u003eInside our \u003ccode\u003ehtml\u003c/code\u003e tags, we divide the page into two main sections, \u003ccode\u003ehead\u003c/code\u003e, and \u003ccode\u003ebody\u003c/code\u003e, which both play unique roles. The remainder of our HTML lessons will cover everything within the \u003ccode\u003ebody\u003c/code\u003e section, but before we get there, there are some additional bits of information we need to understand regarding the \u003ccode\u003ehead\u003c/code\u003e. The \u003ccode\u003ehead\u003c/code\u003e section is not visible to a website visitor, but it contains a lot of useful info about our webpage.\u003c/p\u003e\n\u003cp\u003eIn the \u003ccode\u003ehead\u003c/code\u003e section, we place a number of specific tags, most notably:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLet's look at each of them in turn:\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003elink\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag is for importing files.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCAREFUL\u003c/strong\u003e: It's easy to get confused here because web pages are full of links, but also use a \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag. \"Links\" that you click on are located within the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e element. The \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tags are located in the \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\u003cp\u003eMost commonly, we'll use \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e to import CSS files. Like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLinking style sheets this way allows multi-page websites to share a source of styling content for every page, making for a consistent, easy to maintain file structure. Often, on fully developed websites, multiple style sheets are linked in the \u003ccode\u003ehead\u003c/code\u003e. For example, when doing the final polishing of a web site you might see a series of \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e definitions like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u0026gt;\u003cbr\u003e\u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"company.css\"\u0026gt;\u003cbr\u003e\u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"engineering-department.css\"\u0026gt;\u003cbr\u003e\u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"project-x-launch.css\"\u0026gt;\u003cbr\u003e\u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"typography.css\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example we're getting some CSS information from the \u003ca href=\"https://getbootstrap.com/\"\u003eBootstrap\u003c/a\u003e project, we're integrating a company style standard, an engineering style standard, a style motif for the launch of \"Project X\" and then we're adding some specific rules about font display. You can bring in a \u003cstrong\u003elot\u003c/strong\u003e of information with the \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag!\u003c/p\u003e\n\u003cp\u003eThis specific example aside, you'll be learning a lot more about linking files to create stylistic effect in later lessons.\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003etitle\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eOne more common tag we find in the \u003ccode\u003ehead\u003c/code\u003e is \u003ccode\u003etitle\u003c/code\u003e. The \u003ccode\u003etitle\u003c/code\u003e, as its name implies, is where the title of the webpage should be entered. Text added inside the \u003ccode\u003etitle\u003c/code\u003e tags will appear up on your browser tab. Adding a title for our \u003ccode\u003eindex.html\u003c/code\u003e page would look something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;title\u0026gt;Cat Perry's Favorite Cats\u0026lt;/title\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that unlike the previous tags we've discussed, \u003ccode\u003etitle\u003c/code\u003e has an opening and closing tag. In most modern browsers, tabs are fairly small, so it is often best to keep the title brief, or it will not be fully visible.\u003c/p\u003e\n\u003ch2\u003eCreate an HTML Document\u003c/h2\u003e\n\u003cp\u003eOkay, time to put what we've learned to the test. To complete this lab, you must apply all the tags we've discussed in this lesson. Run \u003ccode\u003erspec\u003c/code\u003e to see what is required to pass each test. Each test will urge you on.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn this lesson, we've reviewed the basics of document structure, as well as what is typically contained within the \u003ccode\u003ehead\u003c/code\u003e. Using the \u003ccode\u003ehead\u003c/code\u003e section, we are able to add relevant data about our webpage as a whole. As a bonus surprise, by learning how to make our web pages \u003cem\u003esearch engine friendly\u003c/em\u003e, we've also dabbled a bit into the basics of Search Engine Optimization! We are now ready to take a deeper dive into the visual content of HTML pages.\u003c/p\u003e","exportId":"g9fa896889d0094a940cb3e7287b098a9"},{"id":157789,"title":"Your First HTML Tag Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-tag-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tag-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tag-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tag-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCode an \u003ccode\u003eh1\u003c/code\u003e tag\u003c/li\u003e\n\u003cli\u003eSet the inner text of the \u003ccode\u003eh1\u003c/code\u003e to \u003ccode\u003eHello, World!\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eSo far, we've seen how to markup content with HTML, how to structure an HTML document and what HTML tags look like. Now let's focus on writing a single HTML tag from scratch and examining each of its parts.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies. Run \u003ccode\u003erspec\u003c/code\u003e as you go to see your test progress.\u003c/p\u003e\n\u003ch2\u003eCode an \u003ccode\u003eh1\u003c/code\u003e Tag\u003c/h2\u003e\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in your text editor. Add the \u003ccode\u003eh1\u003c/code\u003e opening and closing tags.\u003c/p\u003e\n\u003ch2\u003eSet the Inner Text\u003c/h2\u003e\n\u003cp\u003eInside of the opening and closing \u003ccode\u003eh\u003c/code\u003e tags, insert the text: \u003ccode\u003eHello, World!\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou can run the tests with this lab via the \u003ccode\u003erspec\u003c/code\u003e command. Make sure you save the file before running the test suite. Failing tests will provide helpful error messages that you can use to debug your code — read them closely for hints!\u003c/p\u003e\n\u003ch3\u003eViewing Your Work in the Browser\u003c/h3\u003e\n\u003cp\u003eWhile working through these assignments, your general workflow should center on writing code in the text editor and periodically running the test suite in the terminal to check your work.\u003c/p\u003e\n\u003cp\u003eAnother great way to track your progress is to open up the HTML document in your browser and watch how each change you make in the text editor affects the visual layout in the browser.\u003c/p\u003e\n\u003cp\u003eOnce you have the HTML document open in your browser, you can make changes to it in the text editor, save the file, refresh the page in the browser, and see the changes instantly.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eCongratulations! You wrote your first HTML tag. Now you can use your knowledge of this basic building block to learn more HTML tags and see how they work with each other to create an entire HTML document structure.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/tags/tag_hn.asp\"\u003eh1-h6 Tags\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=Jc0HIoTLxe4\"\u003eSolving the First HTML Lab\u003c/a\u003e (If you're stuck, here's a video walk-through of the lab to help you out.)\u003c/li\u003e\n\u003c/ul\u003e","exportId":"ge41349987835784d87c61c0ea0ae29f2"},{"id":157791,"title":"Nested HTML Tags And Attributes","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-basics-nested-tags-and-attributes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-nested-tags-and-attributes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-nested-tags-and-attributes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eAssess HTML document structure\u003c/li\u003e \u003cli\u003eIdentify HTML tag attributes and their purposes\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWhen you take a look at an entire HTML document, it's sometimes challenging to keep track of where tags begin and end. But understanding more about HTML tag nesting and attributes can help everything fall into place.\u003c/p\u003e  \u003ch2\u003eAssess HTML Document Structure\u003c/h2\u003e  \u003cp\u003eWhenever we nest an HTML tag inside of another tag, we indent the inner tag so that the overall tag hierarchy is clear. Take a look at the following example of a well-structured HTML document.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;Web development course\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;header\u0026gt;\u003cbr\u003e    \u0026lt;!-- header element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header --\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;nav id=\"main-navigation\"\u0026gt;\u003cbr\u003e      \u0026lt;!-- nav element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav --\u0026gt;\u003cbr\u003e\u003cbr\u003e        \u0026lt;ul\u0026gt;\u003cbr\u003e        \u0026lt;!-- ul element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul --\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;li\u0026gt;\u0026lt;a href=\"/web\"\u0026gt;Introduction to the web\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e          \u0026lt;!-- li element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li --\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;li\u0026gt;\u0026lt;a href=\"/html\"\u0026gt;Learn HTML\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e        \u0026lt;/ul\u0026gt;\u003cbr\u003e      \u0026lt;/nav\u0026gt;\u003cbr\u003e    \u0026lt;/header\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eKeeping your HTML well indented so that every tag and \"level\" of nesting is aligned will make your code easier to read and maintain.\u003c/p\u003e  \u003ch2\u003eIdentify HTML Tag Attributes and Their Purposes\u003c/h2\u003e  \u003cp\u003eAn HTML attribute is extra information we can add to a tag to identify, classify, style or modify the default behavior of the element the tag contains.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  \u0026lt;element attribute_name=attribute_value another_attribute_name=another_attribute_value\u0026gt;\u0026lt;/element\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eA common use case for HTML attributes is element identification (\u003ccode\u003eid\u003c/code\u003e attribute) and/or classification (\u003ccode\u003eclass\u003c/code\u003e attribute). The \u003ccode\u003eid\u003c/code\u003e attribute is used to uniquely identify an element within the whole document. The \u003ccode\u003eclass\u003c/code\u003e attribute is used to group together similar elements.\u003c/p\u003e  \u003cp\u003eBoth \u003ccode\u003e\u0026lt;id\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;class\u0026gt;\u003c/code\u003e attributes are often used for styling purposes since they allow us to find a specific element or style similar elements with a single style declaration.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  \u0026lt;p id='main_paragraph'\u0026gt;This element can be uniquely identified  using the 'main_paragraph' id HTML attribute\u0026lt;/p\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;p class='other_paragraphs'\u0026gt;This element belongs to a group of elements who share the 'other_paragraphs' HTML class attribute\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;p class='other_paragraphs'\u0026gt;This element also belongs to a group of elements who share the 'other_paragraphs' HTML class attribute\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAttributes that identify or classify are not necessary for the HTML tag to work as intended, but other attributes \u003cem\u003eare\u003c/em\u003e — for example, an \u003ccode\u003ea\u003c/code\u003e tag, which links a piece of text to another location on our own web page or another web page.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  \u0026lt;a href=\"https://flatironschool.com/\"\u0026gt;Flatiron School\u0026lt;/a\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we use the \u003ccode\u003ehref\u003c/code\u003e attribute to tell the HTML tag where the destination of the linked text should be. Without this information, our link won't work and we won't be able to send more people to the Flatiron School website. Certain attributes go hand in hand with certain HTML tags, and as you learn the tags, you'll learn their attributes.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWe use nesting to keep the elements of our HTML document organized, and we use attributes to give our elements more power. With these strategies, we can construct a solid HTML structure that serves as a foundation for anything else we want to build.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"http://www.bu.edu/tech/services/cccs/websites/www/non-wordpress/start/html-introduction/syntax/nesting-tags/\"\u003eNested Tags\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.thoughtco.com/nesting-html-tags-3466475\"\u003eTags\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://www.iraqtimeline.com/maxdesign/basicdesign/principles/prinnest.html\"\u003eBest Practices Web Design\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.w3schools.com/html/html_attributes.asp\"\u003eHTML Attributes\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.tutorialspoint.com/html/html_attributes.htm\"\u003eAttributes\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"nested-html-tags-and-attributes"},{"id":157794,"title":"Create a Link Using the href Attribute","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-link-tag-with-href\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-link-tag-with-href/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-link-tag-with-href\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-link-tag-with-href/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eWrite an \u003ccode\u003ea\u003c/code\u003e tag to create a link\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eWe've got our HTML tags, and we've got our HTML tag attributes. How do we use them together? We can figure it out by exploring the \u003ccode\u003ea\u003c/code\u003e tag and creating a link.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eWrite an \u003ccode\u003ea\u003c/code\u003e Tag to Create a Link\u003c/h2\u003e\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in your text editor. Add an \u003ccode\u003ea\u003c/code\u003e tag with the inner text (the text between the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag and the \u003ccode\u003e\u0026lt;/a\u0026gt;\u003c/code\u003e tag) of \u003ccode\u003eFlatiron School\u003c/code\u003e anywhere in the file. Then set the \u003ccode\u003ehref\u003c/code\u003e attribute of your new link element to \u003ccode\u003ehttps://flatironschool.com\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou can run the tests with this lab via the \u003ccode\u003erspec\u003c/code\u003e command. Make sure you save the file before running the test suite. Failing tests will provide helpful error messages that you can use to debug your code —\u0026nbsp;read them closely for hints!\u003c/p\u003e\n\u003ch3\u003eViewing Your Work in the Browser\u003c/h3\u003e\n\u003cp\u003eWhile working through these assignments, your general workflow should center on writing code in the text editor and checking to see what it looks like in-browser.\u003c/p\u003e\n\u003cp\u003eWorking in your local environment, you can open \u003ccode\u003eindex.html\u003c/code\u003e a few ways, depending on the environment you are in:\u003c/p\u003e\n\u003cp\u003eFor Mac users:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOpen from the Terminal by running \u003ccode\u003eopen index.html\u003c/code\u003e in the root directory of this lab\u003c/li\u003e\n\u003cli\u003eUse Finder to navigate to this lab's local folder and click the \u003ccode\u003eindex.html\u003c/code\u003e file\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor WSL users:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOpen from Ubuntu by running \u003ccode\u003eexplorer.exe index.html\u003c/code\u003e in the root directory of this lab\u003c/li\u003e\n\u003cli\u003eOpen a new Explorer window. There is a bar that says \"Quick Access\" along the top of the window (similar to a URL bar in a browser). Click this and type \u003ccode\u003e\\\\wsl$\u003c/code\u003e to access files and folders on Ubuntu. Navigate to \u003ccode\u003e/home/\u0026lt;your-user-name\u0026gt;/\u003c/code\u003e to get to your home directory, then locate this lab's local folder and click the \u003ccode\u003eindex.html\u003c/code\u003e file.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce you have the HTML document open in your browser, you can make changes to it in a text editor, save the file, refresh the page in the browser, and see the changes.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eHere we saw how an attribute helps the \u003ccode\u003ea\u003c/code\u003e tag do its job, which is to link to another location. Now we can go on to explore some additional HTML tags.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\"\u003eMozilla Developer Network: HTML \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e Tag\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g654d5c56336f36f7465a7daeda490d22"},{"id":157795,"title":"HTML Lists, Images and Links","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-fundamentals-lists-images-links\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-fundamentals-lists-images-links/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-fundamentals-lists-images-links\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-fundamentals-lists-images-links/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIdentify ordered, unordered and definition lists\u003c/li\u003e\n\u003cli\u003eIdentify images\u003c/li\u003e\n\u003cli\u003eIdentify links\u003c/li\u003e\n\u003cli\u003eIdentify HTML validation tools\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou might be wondering what else is available to use to build out full webpages\nnow that you are more familiar with the basics of HTML. How do you display an\nimage? How do you add a formatted list of topics? How do you link page elements\nbeyond text? Now you're ready to explore these fundamental tools. Here's a\nhigh-level overview before you dive into practicing with the labs.\u003c/p\u003e\n\n\u003ch3\u003eIdentify Ordered, Unordered and Definition Lists\u003c/h3\u003e\n\n\u003cp\u003eWhen we want to present a list of items in a clear, readable format, we turn to\nthe HTML unordered list, represented by the the \u003ccode\u003eul\u003c/code\u003e tag.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;One item\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Another item\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf it's important to distinguish a particular order of the items (as for a\nrecipe or ranking), we use an ordered list, or the \u003ccode\u003eol\u003c/code\u003e tag.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ol\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice the nesting of our items within the lists. Each \u003ccode\u003eli\u003c/code\u003e is a list item\ncontained in the larger \u003ccode\u003eul\u003c/code\u003e or \u003ccode\u003eol\u003c/code\u003e container.\u003c/p\u003e\n\n\u003cp\u003eAnother type of list we can use is a definition list, which defines specific\ntypes of items.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;dl\u0026gt;\u003cbr\u003e  \u0026lt;dt\u0026gt;First term\u0026lt;/dt\u0026gt;\u003cbr\u003e  \u0026lt;dd\u0026gt;Term definition\u0026lt;/dd\u0026gt;\u003cbr\u003e\u0026lt;/dl\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eIdentify Images\u003c/h3\u003e\n\n\u003cp\u003eTo include an image in our page, we use an \u003ccode\u003eimg\u003c/code\u003e tag.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"myimage.jpg\" alt=\"Alternative Text\" title=\"Display Title\"\u003cbr\u003ewidth=\"800\" height=\"600\"\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere are two notable things about the \u003ccode\u003eimg\u003c/code\u003e tag: The first is that it does not\nhave a closing tag. The image tag closes itself. Secondly, it handles a lot of\n\u003cem\u003eattributes\u003c/em\u003e. Attributes are special keywords used on the tag to control the\nelement's behavior, or provide additional information about the HTML element.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ealt\u003c/code\u003e attribute provides descriptive text the browser can display if it\ncan't find the image file. The browser can also display the \u003ccode\u003etitle\u003c/code\u003e text to give\nthe user more information about the image. The \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e attributes\ndefine the size of the image that shows up in the browser. \u003c/p\u003e\n\n\u003ch3\u003eIdentify Links\u003c/h3\u003e\n\n\u003cp\u003eYou might be familiar with basic link structure already, but here are other ways\nwe can use them.\u003c/p\u003e\n\n\u003cp\u003eBeginning with a standard text hyperlink, we can wrap other elements inside of them.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;a href=\"http://example.com/\"\u0026gt;This is a link\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat if we want to link an image instead of text? We can replace the text within\nthe \u003ccode\u003ea\u003c/code\u003e tags with our image tag.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;a href=\"http://example.com/\"\u0026gt;\u003cbr\u003e  \u0026lt;img src=\"myimage.jpg\" alt=\"Alternative Text\"\u0026gt;\u003cbr\u003e\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat about a link that will direct to an email address?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;a href=\"mailto:webmaster@example.com\"\u0026gt;Send an email\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSometimes we might want to link to a specific location on the same\nwebpage. We can then target an element that we identified or classified earlier.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;p id=\"tips\"\u0026gt;Useful Tips Section\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;a href=\"#tips\"\u0026gt;Jump to the Useful Tips Section\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen considering what location links point to, you will choose between relative\nor absolute links. A relative link directs to content within the same website.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;a href=\"about.html\"\u0026gt;This is a relative URL link\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAn absolute link, on the other hand, links to external content and requires a\nfully defined URL path. This is likely the type of link you see most often.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;a href=\"http://example.com/\"\u0026gt;This is an absolute URL link\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eIdentify HTML validation tools\u003c/h3\u003e\n\n\u003cp\u003eAn HTML validator is used to check HTML markup elements for syntax errors.\nSyntax errors, such as open tags, extra spaces, or forgotten quotation marks,\ncan cause a web page to look drastically different than the creator intended, or\nrender correctly in one browser, but not in another.\u003c/p\u003e\n\n\u003cp\u003eIt's easy to forget a closing HTML tag or miss a piece of punctuation when\nwriting HTML. Fortunately, we have a tool that will check our markup for us and\npoint out any errors. To validate our HTML, we can use the \u003ca href=\"http://validator.w3.org\"\u003eW3 HTML validator\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNow that you've taken a first look at these new HTML elements, you'll be better\nprepared to practice them in labs, where you'll learn more about each one and\nhow to use it effectively.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=tuDKQxfiXmY\"\u003eHTML Fundamentals overview video\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"html-lists-images-and-links"},{"id":157796,"title":"HTML Lists","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-lists-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-lab/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-lab\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-lab/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003eRecognize unordered and ordered HTML Lists\u003c/li\u003e\n    \u003cli\u003eCreate unordered lists\u003c/li\u003e\n    \u003cli\u003eIdentify the ordered list tag\u003c/li\u003e\n    \u003cli\u003eCreate ordered lists\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eMany HTML tags behave in unique ways. Some apply automatic styling, like \u003ccode\u003ep\u003c/code\u003e tags that create margins around text. Some, like the header tags, increase the font size. Using these tags delineates our content. When reading HTML, using the correct tags informs us of what the content's purpose is. If we see an \u003ccode\u003eh1\u003c/code\u003e tag, we know that we're looking at a \u003cem\u003ebig\u003c/em\u003e page header. In this lesson, we're going to be looking at a few new tags that help us organize \u003cem\u003elists\u003c/em\u003e of related content.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eRecognize Unordered And Ordered HTML Lists\u003c/h2\u003e\n\u003cp\u003eLets say, for instance, we were building a personal website and wanted to list out our favorite foods. We \u003cem\u003ecould\u003c/em\u003e write this like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Ham and Cheese\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Grilled Cheese\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Nacho Cheese French Fries\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Cheese soup\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Cheese and crackers\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Sushi\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe above would create a new line on the page for each food, but doesn't really indicate that these things are related. Using the built in \u003ccode\u003eul\u003c/code\u003e, \u003ccode\u003eol\u003c/code\u003e and \u003ccode\u003eli\u003c/code\u003e HTML tags however, we can group related list content together. We call such a grouping a \"list.\"\u003c/p\u003e\n\u003cp\u003eIn HTML, we create lists using the \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e tag, which stands for \u003cem\u003eunordered list\u003c/em\u003e, along with the \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tag for each \u003cem\u003elist item\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eTo make a list, we write out the opening and closing \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e tags, and inside them, we'll add \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tags, each listing a single month. Going back to our favorite foods example, if we wanted convert it to a list, it would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Ham and Cheese\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Grilled Cheese\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Nacho Cheese French Fries\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Cheese soup\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Cheese and crackers\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Sushi\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, instead of just having each item show up on a new line, the content will also be slightly indented and a bullet will appear next to each of them.\u003c/p\u003e\n\u003cp\u003eLists are very flexible and we can even nest lists \u003cem\u003einside\u003c/em\u003e of lists. Say we wanted to breakdown our favorite foods by category. We may have multiple categories and one or more items in \u003cem\u003eeach\u003c/em\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Sandwiches\u003cbr\u003e    \u0026lt;ul\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;Ham and Cheese\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;Grilled Cheese\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Snacks\u003cbr\u003e    \u0026lt;li\u0026gt;Nacho Cheese French Fries\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;Cheese and crackers\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Soups\u003cbr\u003e    \u0026lt;ul\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;Cheese soup\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Sushi\u003cbr\u003e    \u0026lt;ul\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;Spicy Salmon Rolls\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;California Rolls\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, the nested lists will now be \u003cem\u003efurther\u003c/em\u003e indented and instead of a solid bullet, they will appear with hollow bullets, indicating a sub-list. Adding nested list one level deeper will make \u003cem\u003esquare\u003c/em\u003e bullets appear, allowing us to easily display related and nested content in a readable format.\u003c/p\u003e\n\u003ch2\u003eCreate Unordered Lists\u003c/h2\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-fundamendals/html-lists-lab/Image_62_HTML%20Lab_Recipe.png\" alt=\"recipe list\"\u003e\n\u003c/p\u003e\n\u003cp\u003eThe first part of this challenge is to make the first 2 tests pass by:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eCreating an unordered list\u003c/li\u003e\n    \u003cli\u003eNesting each grilled cheese ingredient as a list item wrapped in \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tags\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in your browser.\u003c/p\u003e\n\u003cp\u003eLet's say we wanted to list out the ingredients required for making a grilled cheese sandwich. The ingredients are: \u003ccode\u003e2 slices of bread\u003c/code\u003e, \u003ccode\u003e4 slices of cheese\u003c/code\u003e, \u003ccode\u003e1 tbsp of butter\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFor the first part of this challenge, in \u003ccode\u003eindex.html\u003c/code\u003e, create an unordered list that displays these ingredients. Run \u003ccode\u003erspec\u003c/code\u003e to see if you can pass the first test. If you've done things correctly, you'll now be passing the first test, but there are more tests to pass! We now need to turn our attention to the next test.\u003c/p\u003e\n\u003cp\u003eOkay, now, lets say we wanted to make our grilled cheese a little more exciting and add a couple of cheeses, \u003ccode\u003echeddar\u003c/code\u003e, \u003ccode\u003emozzarella\u003c/code\u003e, and \u003ccode\u003epepper jack\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eTo pass the second test, inside the \u003ccode\u003eli\u003c/code\u003e of \u003ccode\u003e4 slices of cheese\u003c/code\u003e, add a nested unordered list that lists out the three types of cheese.\u003c/p\u003e\n\u003cp\u003eIf your first two tests are passing, great! It's time to talk about another type of list!\u003c/p\u003e\n\u003ch2\u003eIdentify the Ordered List Tag\u003c/h2\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://i.imgflip.com/28mpcx.jpg\" alt=\"\"\u003e\n\u003c/p\u003e\n\u003cp\u003eUnordered lists are great for organizing related content where it doesn't matter what goes first, like in our grilled cheese ingredients. In situations where we \u003cem\u003ewant\u003c/em\u003e items to be displayed in a specific, numbered order, we will want to use the \u003cem\u003eordered list\u003c/em\u003e tag, which is written as \u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e instead of \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e. Both use \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tags inside, but this time, \u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e will display a numbered list instead of bullets. If say, we wanted to write a \u003cem\u003eranked\u003c/em\u003e list of favorite foods, it might look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h3\u0026gt;Top 5 Favorite Foods\u0026lt;/h3\u0026gt;\u003cbr\u003e\u0026lt;ol\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Grilled Cheese\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Sushi\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Cheese and crackers\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Cheese soup\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Nacho Cheese French Fries\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ol\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e Feel free to test this out by adding it to \u003ccode\u003eindex.html\u003c/code\u003e, saving and refreshing the tab where the file is open. Now, \u003ccode\u003eGrilled Cheese\u003c/code\u003e will be displayed as \u003ccode\u003e1. Grilled Cheese\u003c/code\u003e as the #1 food (where it belongs).\u003c/p\u003e\n\u003cp\u003eNested ordered lists works the same as unordered, but instead of hollow and square bullets, each nested list will still display numbers.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e In a nested list, you \u003cem\u003emust\u003c/em\u003e provide the \u003ccode\u003eol\u003c/code\u003e or \u003ccode\u003eul\u003c/code\u003e wrapper. Otherwise, an \u003ccode\u003eli\u003c/code\u003e inside another \u003ccode\u003eli\u003c/code\u003e will just be displayed as two items at the same level. This is because technically, you do not need to write a closing \u003ccode\u003eli\u003c/code\u003e tag. The following example will be displayed the same as the previous:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h3\u0026gt;Top 5 Favorite Foods\u0026lt;/h3\u0026gt;\u003cbr\u003e\u0026lt;ol\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Grilled Cheese\u003cbr\u003e  \u0026lt;li\u0026gt;Sushi\u003cbr\u003e  \u0026lt;li\u0026gt;Cheese and crackers\u003cbr\u003e  \u0026lt;li\u0026gt;Cheese soup\u003cbr\u003e  \u0026lt;li\u0026gt;Nacho Cheese French Fries\u003cbr\u003e\u0026lt;/ol\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eCreate Ordered Lists\u003c/h2\u003e\n\u003cp\u003eTo complete the challenge write the necessary HTML to pass the tests:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eCreate an ordered list\u003c/li\u003e\n    \u003cli\u003eNest each step for creating grilled cheese as a list item wrapped in \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tags\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOkay, so we've got our grilled cheese ingredients, but what about the steps requires to make a grilled cheese? Steps to a recipe need to be in order, otherwise we may end up with burnt cheese covered in bread and topped with a square of butter. The steps to making a basic grilled cheese would be: \u003ccode\u003eSpread butter on bread and frying pan\u003c/code\u003e, \u003ccode\u003ePlace bread in frying pan and fry\u003c/code\u003e, \u003ccode\u003eAdd cheese on top of bread\u003c/code\u003e, \u003ccode\u003eCover with second slice of bread\u003c/code\u003e, \u003ccode\u003eTurn over and\n        fry for 2 minutes\u003c/code\u003e\u003c/p\u003e\n\u003ch2\u003eRun the Tests\u003c/h2\u003e\n\u003cp\u003eOnce you've written an ordered list that displays these 5 steps correctly, run \u003ccode\u003erspec\u003c/code\u003e to see the tests pass.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eLists in HTML are very useful for organizing related content, and are really the only way indicate that content is related with basic HTML. Using unordered lists ends up being very useful for more than just listing favorite foods and ingredients. Its possible, for instance, to use list elements to organize navigation links - with styling, we make the content look however we want: remove the bullets, make them line up horizontally, but in our HTML they will still be organized and easy to read.\u003c/p\u003e","exportId":"ge558dde08b24f989006d50bc06b1821d"},{"id":157798,"title":"HTML Tables","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-tables-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tables-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tables-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tables-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003col\u003e \u003cli\u003eRecognize basic HTML table elements\u003c/li\u003e \u003cli\u003eCreate HTML tables\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn HTML, we can create lists of related content using unordered and ordered lists, and they will display line by line in the order we put them in. Sometimes as web developers, though, we need to display more complex data. For instance, imagine you are working with a financial company and need to display a collection of transactions, each with a title, value, time, and category. Or, imagine that you've been hired by a marketing company and need to display a list of the \u003ca href=\"https://en.wikipedia.org/wiki/List_of_most-followed_Instagram_accounts\"\u003emost popular Instagram accounts\u003c/a\u003e, each with their username, the owner of the account, and the number of followers. For sets of data like this, with many separate components, the best way to display would be to put the data into a \u003cem\u003etable\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eHTML has a built in way to display tables! In this lesson, we will be reviewing how tables work and how to make our own.\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eRecognize Basic HTML Table Elements\u003c/h2\u003e  \u003ch3\u003eThe Table Tag: \u003ccode\u003e\u0026lt;table\u0026gt;\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThe first thing we need in order to create a table is to write opening and closing \u003ccode\u003e\u0026lt;table\u0026gt;\u003c/code\u003e tags.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;/table\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis tells our browser to interpret anything inside as part of the table. What makes up a table, exactly? A table has rows and columns, which together create individual cells, as well as headers to label what each column is for.\u003c/p\u003e  \u003cp\u003eIn HTML, we define these table components using individual elements that we nest inside our \u003ccode\u003etable\u003c/code\u003e tags.\u003c/p\u003e  \u003ch3\u003eThe Table Row Tag: \u003ccode\u003e\u0026lt;tr\u0026gt;\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eIt's important to note: order really matters when building a table in HTML! We're trying to display a two-dimensional table, but browsers interpret HTML \u003cem\u003eline by line\u003c/em\u003e.  For this reason, HTML tables were designed so that there is no tag for \u003cem\u003ecolumns\u003c/em\u003e, only \u003cem\u003erows\u003c/em\u003e.  If you were creating a table with 5 rows and 5 columns, in designing the table, we would actually have to create 5 \u003cem\u003erows\u003c/em\u003e, each with 5 individual \u003cem\u003ecells\u003c/em\u003e inside.  When displayed, the cells in each row will line up to \u003cem\u003elook\u003c/em\u003e like columns.\u003c/p\u003e  \u003cp\u003eTable rows always come first. To make a row inside our table, we use the \u003cem\u003etable row\u003c/em\u003e tag, \u003ccode\u003e\u0026lt;tr\u0026gt;\u003c/code\u003e. So if we wanted to have four rows in our table, including a row of headers, setting up the rows it would look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003cbr\u003e\u0026lt;/table\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAny content we want in a row would go inside that particular \u003ccode\u003e\u0026lt;tr\u0026gt;\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eThe Table Header Tag: \u003ccode\u003e\u0026lt;th\u0026gt;\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eTables generally start with a row of headers to label each column, so the first \u003ccode\u003etr\u003c/code\u003e tag we write will be dedicated to these headers.\u003c/p\u003e  \u003cp\u003eTo create headers, we use \u003ccode\u003e\u0026lt;th\u0026gt;\u003c/code\u003e, the \u003cem\u003etable header\u003c/em\u003e tag. Let's say we were creating a list of guests to a party. The first column might have a header called 'Name' for the guest's name, the second, the guest's 'Phone Number', and the third, what the guest is 'Bringing' to the party.\u003c/p\u003e  \u003cp\u003eThese headers need to go in the first row, so that may look something like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u003cbr\u003e    \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u003cbr\u003e    \u0026lt;th\u0026gt;Phone Number\u0026lt;/th\u0026gt;\u003cbr\u003e    \u0026lt;th\u0026gt;Bringing\u0026lt;/th\u0026gt;\u003cbr\u003e  \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003cbr\u003e\u0026lt;/table\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEven though we write the HTML from top down, we would see these headers in bold and lined up \u003cem\u003eleft to right\u003c/em\u003e. We can open up \u003ccode\u003eindex.html\u003c/code\u003e right now to take a look to confirm.\u003c/p\u003e  \u003cp\u003eThis first row is almost always the only place where we use the \u003ccode\u003eth\u003c/code\u003e tag.\u003c/p\u003e  \u003ch3\u003eThe Table Data Tag: \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eIn the second row, we can start putting in our data. Here, we want to use the \u003cem\u003etable data\u003c/em\u003e tag, \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e instead of using the \u003cem\u003etable header\u003c/em\u003e tag. The \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e tag represents one table cell. So, for our party table, we can add in some names, phone numbers and items for guests to bring. An example row would look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;tr\u0026gt;\u003cbr\u003e  \u0026lt;td\u0026gt;Daniel\u0026lt;/td\u0026gt;\u003cbr\u003e  \u0026lt;td\u0026gt;845-282-4000\u0026lt;/td\u0026gt;\u003cbr\u003e  \u0026lt;td\u0026gt;Guacamole\u0026lt;/td\u0026gt;\u003cbr\u003e\u0026lt;/tr\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs long as each bit of data in a \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e is in the \u003cem\u003esame position\u003c/em\u003e as the corresponding \u003ccode\u003e\u0026lt;th\u0026gt;\u003c/code\u003e in the first row, it will show up in that column.\u003c/p\u003e  \u003cp\u003eRepeating this structure, if we wanted to include 3 guests for our party, our entire table would look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u003cbr\u003e    \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u003cbr\u003e    \u0026lt;th\u0026gt;Phone Number\u0026lt;/th\u0026gt;\u003cbr\u003e    \u0026lt;th\u0026gt;Bringing\u0026lt;/th\u0026gt;\u003cbr\u003e  \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;Daniel\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;718-555-1212\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;Guacamole\u0026lt;/td\u0026gt;\u003cbr\u003e  \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;Rachel\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;718-555-1212\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;Chips\u0026lt;/td\u0026gt;\u003cbr\u003e  \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;Terrance\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;914-555-1212\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;Salsa\u0026lt;/td\u0026gt;\u003cbr\u003e  \u0026lt;/tr\u0026gt;\u003cbr\u003e\u0026lt;/table\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePaste this into \u003ccode\u003eindex.html\u003c/code\u003e and take a look at how it is displayed in browser. You'll see we've got a table with 4 rows and 3 columns! Each \"column\" of content expands to fit the width of the content.\u003c/p\u003e  \u003ch2\u003eCreate HTML Tables\u003c/h2\u003e  \u003cp\u003eOkay, now its time to put what we've learned to the test. For this challenge, your task is to recreate a table using the following data:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/ironboard-learn/us_cities_by_population.png\" alt=\"cities by population\"\u003e\u003c/p\u003e  \u003cp\u003eThe above table shows total population of the 4 biggest cities in the US. We can see there are 3 headers, \"City\", \"State\", and \"2017 estimate\", and data for each of the four cities.\u003c/p\u003e  \u003cp\u003eTo complete this task, follow the order of table creation we discussed earlier:\u003c/p\u003e  \u003col\u003e \u003cli\u003eCreate a \u003ccode\u003etable\u003c/code\u003e, and place rows inside,\u003c/li\u003e \u003cli\u003eDedicate the first row to just headers\u003c/li\u003e \u003cli\u003eAdd in the data in the appropriate order so that each city name falls under the \"City\" column, each state is under \"State\", etc...\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eRun \u003ccode\u003erspec\u003c/code\u003e to test your work and see your progress. The tests also include the exact population numbers, so feel free to copy them from the errors!\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eSo, with \u003ccode\u003etable\u003c/code\u003e, \u003ccode\u003etr\u003c/code\u003e, \u003ccode\u003eth\u003c/code\u003e and \u003ccode\u003etd\u003c/code\u003e, we are able to turn line by line HTML into a table with rows and columns! It may seem counterintuitive at first to list out row content separately, but with this, you can represent all sorts of data!\u003c/p\u003e","exportId":"g91aa20ca27b8c1c6ebb0d7e21e95baa0"},{"id":157800,"title":"HTML Images","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-images-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-images-lab/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-images-lab\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-images-lab/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003eRecognize the \u003ccode\u003eimg\u003c/code\u003e tag\u003c/li\u003e\n    \u003cli\u003eUse \u003ccode\u003eimg\u003c/code\u003e tag attributes\u003c/li\u003e\n    \u003cli\u003eCreate images\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eImages are absolutely critical to making appealing and engaging websites. Can you imagine the web without them? No cat memes. No animated dancing bananas! No \u003cem\u003eInstagram\u003c/em\u003e, at all. The internet would be a pretty boring and sad place!\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://s3.amazonaws.com/ironboard-learn/sad_meme.jpg\" alt=\"sad meme\"\u003e\n\u003c/p\u003e\n\u003cp\u003eIn this lesson, we will be discussing how to include images in your HTML, along with some important attributes of the tag. With images, you can make your web pages much more engaging and visually appealing.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eRecognize the \u003ccode\u003eimg\u003c/code\u003e Tag\u003c/h2\u003e\n\u003cp\u003eImages are inserted into HTML using the \u003ccode\u003eimg\u003c/code\u003e tag. The tag can display a variety of image types, including animated GIFs, bitmaps and vector graphics, though most often, the images we see on the internet are JPEG and PNG files.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eimg\u003c/code\u003e tag is \u003cem\u003eself closing\u003c/em\u003e, meaning it doesn't wrap around content or text. Instead, the relevant information is stored in attributes within the tag itself.\u003c/p\u003e\n\u003cp\u003eThere are two main attributes, \u003ccode\u003esrc\u003c/code\u003e, the \u003cem\u003esource\u003c/em\u003e of the image, and \u003ccode\u003ealt\u003c/code\u003e, the \u003cem\u003ealternate\u003c/em\u003e text.\u003c/p\u003e\n\u003ch2\u003eUse the \u003ccode\u003eimg\u003c/code\u003e Tag Attributes\u003c/h2\u003e\n\u003ch3\u003eThe Image Source Attribute\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003esrc\u003c/code\u003e attribute provides the relative path or URL to the image file we want to display. The image file can be local, say, for instance, if you're publishing a website and have a local stored in a folder, your source may look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"../images/my_company_logo.png\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, its very common, even when publishing your own websites, to have images hosted somewhere else on the internet. In these situations, we need to provide a full URL as the source:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"https://i.imgur.com/H1qsYEl.png\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003esrc\u003c/code\u003e attribute is always necessary, as without it, the \u003ccode\u003eimg\u003c/code\u003e tag would have nothing to display.\u003c/p\u003e\n\u003ch3\u003eThe Image Alt Attribute\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003ealt\u003c/code\u003e attribute contains text relevant to the image we're displaying, and will appear in its place if the image fails to load.\u003c/p\u003e\n\u003cp\u003eWhile it isn't required, it is highly recommended that every image includes an \u003ccode\u003ealt\u003c/code\u003e attribute. The \u003ccode\u003ealt\u003c/code\u003e text is important for screen readers for the visually impaired, as the text will be read out loud to the site visitor. It is also nice to provide some sort of message to a website visitor if the image fails to load, especially if the image is relevant to the rest of the content. Alt text on a failed image will appear along with a small 'broken image' icon:\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"http://blog.flatironschool.com/wp-content/uploads/2015/03/FS_Circle_Slashes-150x150.png\" alt=\"flatiron school logo\"\u003e\n\u003c/p\u003e\n\u003cp\u003eTo include an \u003ccode\u003ealt\u003c/code\u003e attribute, add it in along with the \u003ccode\u003esrc\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"https://i.imgur.com/H1qsYEl.png\" alt=\"comedic crow gets wholesome support\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe Image Title Attribute\u003c/h3\u003e\n\u003cp\u003eOne additional attribute that can be useful is the \u003ccode\u003etitle\u003c/code\u003e. Content added to this attribute will display when we hover over the image with our mouse. If we were creating an \u003ccode\u003eimg\u003c/code\u003e tag with \u003ccode\u003esrc\u003c/code\u003e, \u003ccode\u003ealt\u003c/code\u003e and \u003ccode\u003etitle\u003c/code\u003e for a company logo, it might look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"../images/my_company_logo.png\" alt=\"my company name\" title=\"We're here to help you!\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen a visitor to your company site hovers over the logo, they'll see a message appear saying 'We're here to help you!'\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003etitle\u003c/code\u003e attribute isn't necessary and is often left out, but can be a nice detail to include.\u003c/p\u003e\n\u003ch2\u003eCreate Images\u003c/h2\u003e\n\u003cp\u003eIts time to practice creating some images! For this challenge, feel free to use any images you'd like - the tests are looking for the correct tag and attributes, not the content. If you're not sure what to use, feel free to use the following URL as your source:\u003c/p\u003e\n\u003cp\u003e\n    \u003ca href=\"https://s3.amazonaws.com/ironboard-learn/lion.jpg\"\u003ehttps://s3.amazonaws.com/ironboard-learn/lion.jpg\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://s3.amazonaws.com/ironboard-learn/lion.jpg\" alt=\"lion\"\u003e\n\u003c/p\u003e\n\u003cp\u003eYour challenge is to write \u003cem\u003ethree\u003c/em\u003e image tags:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003eThe first should have \u003cem\u003ejust\u003c/em\u003e a \u003cem\u003esource\u003c/em\u003e attribute\u003c/li\u003e\n    \u003cli\u003eThe second should include an alt text, in addition to a source\u003c/li\u003e\n    \u003cli\u003eThe third should have both an alt and source attribute, as well as a \u003cem\u003etitle\u003c/em\u003e attribute\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRun \u003ccode\u003erspec\u003c/code\u003e and read the tests as you go.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eWith images, we can fill our web pages with visual content in addition to text. Brand logos, animated instructional guides, personal artwork and photography, or pictures of you and your friends - you now have the ability to create visually appealing content of \u003cem\u003eany type!\u003c/em\u003e\u003c/p\u003e","exportId":"gccdfbd01491dfa0892c0165f87458f4f"},{"id":157801,"title":"HTML Validation","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-fundamentals-validation\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-fundamentals-validation/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-fundamentals-validation\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-fundamentals-validation/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIdentify W3C organization\u003c/li\u003e\n\u003cli\u003eValidate sample HTML\u003c/li\u003e\n\u003cli\u003eIdentify HTML errors\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou have written a few HTML pages by now. Did you accidentally break nesting and\nput emphasis on a whole page? Or did you type \u003ccode\u003e\u0026lt;he\u0026gt;\u003c/code\u003e instead of \u003ccode\u003e\u0026lt;h3\u0026gt;\u003c/code\u003e? How can\nwe guard HTML? Many editors try to catch errors for us, and most browsers are\npretty good at guessing what you meant. But what happens when Windows Edge\nguesses differently than Google Chrome? How can we be certain that our HTML\nmeets standards and is error free? Luckily, the W3C – the people who define the\ntags of HTML – have a validation service we can use. We'll explain the W3C and\ntheir validator in this lesson.\u003c/p\u003e\n\n\u003ch2\u003eIdentify W3C organization\u003c/h2\u003e\n\n\u003cp\u003eThe World Wide Web Consortium (W3C) is an international community that develops\nopen standards to ensure the long-term growth of the web. It operates under a\nstrict \u003ca href=\"https://www.w3.org/Consortium/cepc/\"\u003ecode of ethics and professional\nconduct\u003c/a\u003e and provides many \u003ca href=\"https://www.w3.org/developers/tools/\"\u003efree\ntools\u003c/a\u003e for developers.\u003c/p\u003e\n\n\u003ch2\u003eValidate sample HTML\u003c/h2\u003e\n\n\u003cp\u003eTake a look at this file: \u003ca href=\"https://curriculum-content.s3.amazonaws.com/web-development/html-validation/example_code.html\"\u003e\u003ccode\u003eexample_code.html\u003c/code\u003e\u003c/a\u003e in a new tab. We'll\ncall this the \u003cstrong\u003eviewing tab\u003c/strong\u003e. It looks relatively OK, right? There's some\noddness happening with the list at the bottom (we might not have wanted\neverything hyperlinked), and there's an odd bullet point with no content, but\neverything else looks pretty good.\u003c/p\u003e\n\n\u003cp\u003eNow let's try validating the code to identify where we went wrong.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIn your \u003cstrong\u003eviewing tab\u003c/strong\u003e, navigate View → Developer → View Source\n\u003cem\u003eor\u003c/em\u003e press Command-Option-U. This will give you the \"Source View\" of the\ndocument\u003c/li\u003e\n\u003cli\u003eSelect the whole of the HTML contents in the file, and copy them\u003c/li\u003e\n\u003cli\u003eIn your web browser, open a new tab to \u003ca href=\"https://validator.w3.org/#validate_by_input\"\u003eW3C's HTML Validator\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eIf not already selected, select the tab that says \"Validate by Direct Input\"\u003c/li\u003e\n\u003cli\u003ePaste all of your copied HTML in the text box labeled \"Enter the Markup to\nvalidate:\"\u003c/li\u003e\n\u003cli\u003eClick the button labeled \"Check\"\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAs you scroll down the page, you should see a list of errors, or invalid HTML.\u003c/p\u003e\n\n\u003ch3\u003eWhat is HTML Validation?\u003c/h3\u003e\n\n\u003cp\u003eLike all other programming languages, HTML can contain all kinds of different\nerrors. These can range from missing angle brackets to wrong or missing opening\nor closing tags, unnecessary or missing attributes, and many other issues. Our\nweb browsers are pretty good at filling in the missing pieces but we can't\nalways count on it being the same experience with every one. Tools like W3C's\nHTML Validator can catch these errors and prevent our user from having a poor\nexperience.\u003c/p\u003e\n\n\u003ch2\u003eIdentifying HTML Errors\u003c/h2\u003e\n\n\u003cp\u003eNow that we have a page full of HTML validation errors, how do we start fixing\nthem? There are several parts of the error message that will help us parse the\nerror, and figure out exactly where it is and what we can do to fix it.\u003c/p\u003e\n\n\u003ch3\u003eError Description\u003c/h3\u003e\n\n\u003cp\u003eThe first line of the error is our error description. This is a narrative that\ngives us a little bit more information about our error.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/html-error-description.png\" alt=\"HTMLValidationErrors\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn this case, it's saying that there was an ending \u003ccode\u003e\u0026lt;/h2\u0026gt;\u003c/code\u003e tag, but there was a\ndifferent opening tag that came before it.\u003c/p\u003e\n\n\u003ch3\u003eError Location\u003c/h3\u003e\n\n\u003cp\u003eThe second and third lines of this error give us the exact location of the\nerror, as well as a highlighted snippet of our HTML to help us exactly locate\nwhere the error is.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/html-error-location.png\" alt=\"HTMLValidationErrorLocation\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn this case, it's letting us know that our error is on line 10, from column\n34-38. Line numbers will become very important in troubleshooting errors, in\nJavaScript and CSS as well as HTML. These error messages can serve as a road map\nto us, and help us troubleshoot much more efficiently.\u003c/p\u003e\n\n\u003ch3\u003eA Valid HTML Experience  Now, let's see what a valid HTML file returns\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://curriculum-content.s3.amazonaws.com/web-development/html-validation/example_code_passing_validation.html\"\u003e\u003ccode\u003eexample_code_passing_validation.html\u003c/code\u003e\u003c/a\u003e file in a new\ntab. This will now be our new \u003cstrong\u003eviewing tab\u003c/strong\u003e\n\u003c/li\u003e\n\u003cli\u003eIn your \u003cstrong\u003eviewing tab\u003c/strong\u003e, navigate View → Developer → View Source\n\u003cem\u003eor\u003c/em\u003e press Command-Option-U. This will give you the \"Source View\" of the\ndocument\u003c/li\u003e\n\u003cli\u003eSelect the whole of the HTML contents in the file, and copy them\u003c/li\u003e\n\u003cli\u003eIn your web browser, navigate to \u003ca href=\"https://validator.w3.org/#validate_by_input\"\u003eW3C's HTML Validator\u003c/a\u003e in a new\ntab\u003c/li\u003e\n\u003cli\u003eIf not already selected, select the tab that says \"Validate by Direct\nInput\"\u003c/li\u003e\n\u003cli\u003ePaste all of your copied HTML in the text box labeled \"Enter the Markup to\nvalidate:\"\u003c/li\u003e\n\u003cli\u003eClick the button labeled \"Check\"\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eYou should see a green bar denoting that there are no errors or warnings to\nshow.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/html-passing-validation.png\" alt=\"HTMLValidationPassed\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.w3.org/\"\u003eW3C\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://validator.w3.org/\"\u003eHTML Validation Tool\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://validator.w3.org/docs/why.html\"\u003eWhy Validate?\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=nYglnxMUixM\"\u003eVideo Walk-Through of HTML Validation\u003c/a\u003e\u003c/p\u003e","exportId":"html-validation"},{"id":157803,"title":"Expanding Your HTML Vocabulary via MDN","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-basics-expanding-html-vocabulary\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-expanding-html-vocabulary\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-expanding-html-vocabulary/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify the Mozilla Foundation and MDN\u003c/li\u003e \u003cli\u003eNavigate the MDN Reference Guide\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eBecause of the pace of change in web technologies, it often feels like as soon as you learn something it's already obsolete. How can a developer stay up-to-date? Developers need to be able to reference the latest documentation in a just-in-time fashion.\u003c/p\u003e  \u003cp\u003eWhen you have a question, you should consult the best source, take what you need, and use it. The purpose of this README is to help you get oriented with a popular source of HTML documentation, the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\"\u003eMozilla Developer Network (MDN)\u003c/a\u003e.\u003c/p\u003e  \u003ch2\u003eIdentify the Mozilla Foundation and MDN\u003c/h2\u003e  \u003cp\u003eThe Mozilla Foundation is an open-source company that has a long history with browsers and browser technology.\u003c/p\u003e  \u003cp\u003eMozilla is a reliable reference for the latest HTML tags.  There are many other sites online that exist to discuss these tags, but when you want a thorough explanation of a tag, Mozilla is often a great choice.\u003c/p\u003e  \u003cp\u003eThere are some drawbacks in using MDN.  Because Mozilla is so trusted, their information tends to be ... \u003cem\u003eexhaustive\u003c/em\u003e.  Because it's so \u003cem\u003eahem\u003c/em\u003e thorough, it can sometimes be hard to digest.  Their information tends to be for \u003cem\u003ereference\u003c/em\u003e, not \u003cem\u003etutorial\u003c/em\u003e purposes.\u003c/p\u003e  \u003cp\u003eDrawbacks aside, MDN is a good solid starting place for research and it can take you from \"Does something like this exist?\" to \"Now I know that this thing exists, maybe I can find a tutorial!\"\u003c/p\u003e  \u003ch2\u003eNavigate the MDN Reference Guide\u003c/h2\u003e  \u003cp\u003eThe \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\"\u003eMDN HTML Reference Guide\u003c/a\u003e is a list of HTML tags grouped together by their functions. These sections are not entirely \"human readable,\" which makes it a bit difficult to understand where to start looking.  Some of the headings are very technical-sounding.\u003c/p\u003e  \u003cp\u003eTo help you find what you need  in this listing, we've created this helpful table to help you convert between MDN-ese and  the HTML terms you have learned. We've also listed only the MDN content  sections that you're most likely to use:\u003c/p\u003e  \u003cp\u003e\u003cem\u003eSummary of the MDN HTML reference guide\u003c/em\u003e\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\u003ctr\u003e     \u003cth\u003eMDN Section Title\u003c/th\u003e     \u003cth\u003eHuman-Friendly Section Title\u003c/th\u003e     \u003cth\u003eSummary\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eMain Root\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eThe \u003ccode\u003ehtml\u003c/code\u003e tag\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eThe \u003ccode\u003ehtml\u003c/code\u003e tag and that's it!\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eDocument metadata\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eWebsite data that goes in the \u003ccode\u003ehead\u003c/code\u003e tag\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eMetadata contains information about the page. Information about styles, scripts and data to help software (search engines,\u0026nbsp;browsers, etc.) use and render the page.\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e     \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eSectioning Root\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eThe \u003ccode\u003ebody\u003c/code\u003e tag\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eThe \u003ccode\u003ebody\u003c/code\u003e tag and that's it!\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eContent sectioning\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eHeadings, titles, divs, sections, footers, etc.\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eContent sectioning elements allow you to organize the document content into logical pieces.\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eText content\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eFormatting for text: list items, horizontal rules, figures listings for under images\u003c/td\u003e     \u003ctd\u003eUse HTML text content elements to organize blocks or sections of content placed between the opening and closing\u0026nbsp;\u003ccode\u003ebody\u003c/code\u003e\u0026nbsp;tags.\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eInline text semantics\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eCitation, emphasis, underlines, etc.\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eUse the HTML inline text semantics to define the meaning, structure, or style of a word, line, or any arbitrary piece of text.\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eImage and multimedia\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eAdding pictures and media!\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eHTML supports various multimedia resources such as images, audio, and video.\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eEmbedded content\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eAdvanced: Using material hosted elsewhere on other servers, \u003ccode\u003eiframe\u003c/code\u003e is the biggie here\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eIn addition to regular multimedia content, HTML can include a variety of other content, even if it's not always easy to interact with.\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eScripting\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eAdvanced: JavaScript and Drawing Support (Vector Graphics)\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eIn order to create dynamic content and Web applications, HTML supports the use of scripting languages, most prominently JavaScript. Certain elements support this capability.\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eTable content\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eTables\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eTables\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eForms\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eAdvanced: Tags for building forms for sign-up or login, for example\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eHTML provides a number of elements that can be used together to create forms which the user can fill out and submit to the Web site or application. There's a great deal of further information about this available in the\u0026nbsp;HTML forms guide.\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eAs developers, we will often feel uncomfortable with the fact that the technologies we depend on are always growing and changing. With authoritative guides like \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\"\u003eMDN\u003c/a\u003e, we have found out that we can learn just the little bit we need as we need it.\u003c/p\u003e","exportId":"expanding-your-html-vocabulary-via-mdn"},{"id":157804,"title":"Researching HTML Elements","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-basics-researching-html-elements\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-basics-researching-html-elements/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-researching-html-elements\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-researching-html-elements/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse search engines as a resource to find information\u003c/li\u003e\n\u003cli\u003eIdentify relevant resources\u003c/li\u003e\n\u003cli\u003eCompare multiple resources to find the best source\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhen writing HTML you might encounter tags that are new to you.  How are\nwe going to level-up?  When searching for technical help, we have to be careful\nabout which sources we trust. This is a skill you will build over time, but\nwe'll model some good practices in this README.\u003c/p\u003e\n\n\u003ch2\u003eUse Search Engines as a Resource to Find Information\u003c/h2\u003e\n\n\u003cp\u003eLet's say in your research, you come across an unfamiliar HTML element like\n\u003ccode\u003e\u0026lt;samp\u0026gt;\u003c/code\u003e. We can google \u003ccode\u003esamp html element,\u003c/code\u003e and we will find an endless list\nof results to choose from. Sometimes resources can be outdated, biased, or\ninaccurate. It's important to filter through the results to find the best fit.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/html-element-search.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eIdentify Relevant Resources\u003c/h2\u003e\n\n\u003cp\u003eYour instinct might be to open the first result. You should be pickier.\nSometimes the result has \"gamed\" the search engine and unfairly influenced the ranking.\nWe recommend that you open the top \u003cstrong\u003efive\u003c/strong\u003e results and review them critically.\u003c/p\u003e\n\n\u003cp\u003eWe also recommend that you trust sites that are affiliated with building or\ndefining the technologies more than blogs or other resources. In the HTML\nworld, the Mozilla Developer Network (MDN) is an extremely trustworthy site.\nIn fact, it's likely the best HTML, JS and CSS documentation source on the\ninternet.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/samp-mdn-page.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eCompare Multiple Resources to Find the Best Source\u003c/h2\u003e\n\n\u003cp\u003eIf we go back to the search results, you'll see that the first result, in this\ncase, is \u003ccode\u003eW3schools\u003c/code\u003e. A site, like W3schools, for example, can be used as an\nadditional resource for garnering understanding. It even includes interactive\nexamples, creating a sandbox environment for experimentation.\u003c/p\u003e\n\n\u003cp\u003eIn this case, between MDN and W3schools, you should get a good sense of how to\nuse the \u003ccode\u003e\u0026lt;samp\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThe web is a constantly evolving entity. As we build more ambitious products or\nlearn from our collective needs and mistakes, the industry will continually\nupdate the HTML specifications.\u003c/p\u003e\n\n\u003cp\u003eResearching referencing documentation can be scary at first, but it's a primary\nskill for developers. Don't be afraid to practice technical searches. It's a\n\u003cem\u003eskill\u003c/em\u003e that you will get better at with practice.\u003c/p\u003e\n\n\u003cp\u003eMost importantly, don't feel like \u003cem\u003enot knowing everything by heart\u003c/em\u003e means you can't\nbe a developer. The greatest developers we know are constantly admitting what they\ndon't know, finding the latest news, using the answer they found and moving on.\u003c/p\u003e","exportId":"researching-html-elements"},{"id":157806,"title":"HTML Issue Bot 9000","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-issue-bot-9000-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-issue-bot-9000-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-issue-bot-9000-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-issue-bot-9000-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eDemonstrate writing valid HTML\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eLet's practice using the W3C's HTML Validator!\u003c/p\u003e\n\u003ch2\u003eDemonstrate Writing Valid HTML\u003c/h2\u003e\n\u003cp\u003eIn this lab we'll use the W3C Validator to make our invalid HTML happy! You might need to change how you work this problem depending on your work environment. Either way you'll learn to fix invalid HTML.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch3\u003eSteps\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eOpen index.html in a browser. See how it, well, doesn't look \u003cem\u003equite\u003c/em\u003e right?\u003c/li\u003e\n\u003cli\u003eOpen index.html in your text editor\u003c/li\u003e\n\u003cli\u003eVisit the W3C validator at: \u003ca href=\"http://validator.w3.org/#validate_by_input\"\u003ehttp://validator.w3.org/#validate_by_input\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eCopy the code from index.html and paste it into the text area\u003c/li\u003e\n\u003cli\u003eClick the large \"Check\" button\u003c/li\u003e\n\u003cli\u003eUse the error messages to correct the code your copy of \u003ccode\u003eindex.html\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eRepeat steps 3-6 until the Html Validator reports: \"Document checking completed. No errors or warnings to show.\"\u003c/li\u003e\n\u003cli\u003eNot only is the document now W3C-valid, it no longer looks weird\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eSubmitting the Lab\u003c/h3\u003e\n\u003cp\u003eWhen your document is valid, go to the terminal and type:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eSince you're verifying the HTML structure via W3C, the test here is not robust at all.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://validator.w3.org/#validate_by_input\"\u003eW3C HTML Validator - Validate Direct Input\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g3a64144a0bee75105bb81bdd4962824d"},{"id":157807,"title":"Using Your Browser's Developer Tools","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-using-browser-dev-tools\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-using-browser-dev-tools/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-using-browser-dev-tools\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-using-browser-dev-tools/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eExamine the developer tools\u003c/li\u003e\n\u003cli\u003eUse the developer tools to locate and inspect elements\u003c/li\u003e\n\u003cli\u003eUse the developer tools to edit HTML\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eBy now, you're pretty familiar with HTML structural elements, and how they relate to each other on the page. You might even feel pretty comfortable writing your own valid HTML. But much of the time as developers, we'll be jumping in on projects that are already in progress. We'll need a way to view existing HTML and CSS, and potentially a way to play around with elements on live pages to see how we might potentially adjust things. Luckily for us, most browsers have those kinds of tools already built in, called \u003ccode\u003edeveloper tools\u003c/code\u003e, or \u003ccode\u003edev tools\u003c/code\u003e for short. In this lesson, we'll look at the \u003ccode\u003edev tools\u003c/code\u003e on \u003ca href=\"https://www.google.com/chrome/\"\u003eGoogle Chrome\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eExamine the Developer Tools\u003c/h2\u003e\n\u003cp\u003eThe Developer tools that browsers provide you are a great way to experiment with HTML and CSS, and immediately see how those changes are rendered in the browser.\u003c/p\u003e\n\u003cp\u003eFor this lesson, please open the \u003ca href=\"https://en.wikipedia.org/wiki/Alan_Turing\"\u003eWikipedia page for Alan Turing\u003c/a\u003e in Chrome.\u003c/p\u003e\n\u003cp\u003eOnce the page is open, right click on the title of the page — the header containing his name. You should get a list of options. We want to click on the one that says \u003ccode\u003eInspect\u003c/code\u003e. This is going to bring up a window at the bottom of the page that contains all of the HTML that makes up the Wikipedia page.\u003c/p\u003e\n\u003ch2\u003eUse the Developer Tools to Locate and Inspect Elements\u003c/h2\u003e\n\u003cp\u003eIf you hover over elements, you should see different colored boxes appear over different parts of the page. We're going to hover over the HTML until we find the section that contains the title of the page (\"Alan Turing\"). It should look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1 id=\"firstHeading\" class=\"firstHeading\"\u0026gt;...\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eUse the Developer Tools to Edit HTML\u003c/h2\u003e\n\u003cp\u003eThere should be a drop down arrow next to the first \u003ccode\u003e\u0026lt;h1 ...\u0026gt;\u003c/code\u003e If you don't already see the text nested under that \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e, click on the arrow to expose it. Right click that text and select \u003ccode\u003eEdit as HTML\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eA new window will pop up in Dev Tools where we can actually go in and type. Try deleting \"Alan Turing\" and replacing it with \"Puppies Puppies Puppies.\" Once you're done, just click outside of the text window, and take a look back at the header in the browser. It should now say \"Puppies Puppies Puppies.\"\u003c/p\u003e\n\u003cp\u003eIf you refresh the page, your text will disappear. We're just editing HTML in our own web browser, not on Wikipedia's web server. Feel free to scroll around on the page and play with all sorts of different HTML elements and see what happens.\u003c/p\u003e\n\u003ch3\u003eEditing Images\u003c/h3\u003e\n\u003cp\u003eNow, right click on Alan Turing's picture and choose \"Inspect\". Right click on the image tag in the HTML and again select \u003ccode\u003eEdit as HTML\u003c/code\u003e. Let's replace the entire \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tag with another image from a website. For example, you might change it to this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"http://images2.fanpop.com/image/photos/9400000/Aaaaaawwwwwwwwww-Sweet-puppies-9415255-1600-1200.jpg\" alt=\"Puppies\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour puppy image should now be displaying on the page, but it's pretty big. Let's add an attribute to our \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tag to set the image's size. It should look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"http://images2.fanpop.com/image/photos/9400000/Aaaaaawwwwwwwwww-Sweet-puppies-9415255-1600-1200.jpg\" width=\"200\" alt=\"Puppies\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis attribute sets the width of the image to 200px and adjusts the height accordingly. Much better!\u003c/p\u003e\n\u003cp\u003eFeel free to play with other HTML elements and watch things change on the page.\u003c/p\u003e\n\u003ch3\u003eBonus\u003c/h3\u003e\n\u003cp\u003eIf you want to attempt to change any of the styles of the page, take a look at the right-hand column. CSS, which stands for Cascading Style Sheets, manages all the styles of your page (think background color, font size, placement of different items on the page, etc).\u003c/p\u003e\n\u003cp\u003eFeel free to play around, check and uncheck boxes, change colors, change pixels. It's okay if you \"mess things up\". Just refresh the browser and it will all go back to how it was!\u003c/p\u003e","exportId":"using-your-browsers-developer-tools"},{"id":157809,"title":"HTML Album Cover","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-album-cover-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003e\u003cimg src=\"https://after-school-assets.s3.amazonaws.com/happy.gif\" alt=\"from the 'Happy' music video by Pharrell Williams\"\u003e\u003c/p\u003e  \u003ch2\u003eLearning Goal\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eApply header, paragraph, image and span tags\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eLearning all the individual pieces that make up a web page is a necessary first step in the process of learning HTML, but one of the best ways to solidify the concepts we've learned is to apply concepts together. In this lab, your task will be to update \u003ccode\u003eindex.html\u003c/code\u003e based on commented notes in the file, using what we've learned about text formatting and displaying images.\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eApply Header, Paragraph, Image and Span Tags\u003c/h2\u003e  \u003cp\u003ePharrell isn't quite happy, he needs some help coding the album cover for his hit song \"Happy.\" His dev chops aren't quite as skilled as yours, so he's hired you to take care of business.\u003c/p\u003e  \u003cp\u003ePharrell did provide us with a mock-up of what he would like to see for the design of the album cover:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/html-album-cover/MOCKUP.jpg\" alt=\"Happy Album Cover\"\u003e\u003c/p\u003e  \u003cp\u003eIn the industry, front-end developers are typically given specs just like this from the product team and then asked to write the code to make a website look just like the spec. Today, you're the developer and Pharrell is the product team.\u003c/p\u003e  \u003ch3\u003eUse SOURCE.md\u003c/h3\u003e  \u003cp\u003ePharrell has provided us with the text for the album and all the legal mumbo-jumbo to give credit where credit is due. You can find that text in \u003ccode\u003eSOURCE.md\u003c/code\u003e. Again, this is a typical industry standard workflow, where the developers are given a copy for the site from the product team.\u003c/p\u003e  \u003cp\u003eEach line of text in this file corresponds to a note in \u003ccode\u003eindex.html\u003c/code\u003e that will indicate where you'll need to add this information. It will be up to you to pick which HTML tags to use.\u003c/p\u003e  \u003ch3\u003eDeliverables\u003c/h3\u003e  \u003cp\u003eWrite your code in \u003ccode\u003eindex.html\u003c/code\u003e. Your job is to make sure the text from \u003ccode\u003eSOURCE.md\u003c/code\u003e makes it into \u003ccode\u003eindex.html\u003c/code\u003e surrounded by the appropriate HTML tags.\u003c/p\u003e  \u003cp\u003eThe files you need are provided in the 'images' folder, but you'll have to write the correct URL paths (like \u003ccode\u003ehttp://..../image-name\u003c/code\u003e) in order for them to display correctly.\u003c/p\u003e  \u003cp\u003eYou may not have encountered the \u003ccode\u003espan\u003c/code\u003e tag before, so if you are curious, take a moment to \u003ca href=\"https://www.w3schools.com/tags/tag_span.asp\"\u003eread up on some reference material\u003c/a\u003e to better understand its use.\u003c/p\u003e  \u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in a separate browser tab to see your progress on the Album Cover as you build it.\u003c/p\u003e  \u003cp\u003eRun \u003ccode\u003erspec\u003c/code\u003e to make sure you've met all the deliverables and passed the tests.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eA lot of the formatting in this lab is done using CSS, or Cascading Style Sheets, a language that defines styling for HTML. Before we can get to more elaborate styling, though, it is important to have a strong understanding of HTML fundamentals.\u003c/p\u003e  \u003cp\u003eIn this lab, we've tested that understanding by having you practice applying headers, image, and paragraphs. Completing this lab means that you have a solid foundation that we can build upon as we continue to learn about web development.\u003c/p\u003e  \u003cp\u003e\u003cem\u003eClap along if you feel\u003c/em\u003e you're getting the hang of HTML!\u003c/p\u003e","exportId":"g7564564370ab57558fbbd0b6797bcda5"},{"id":157811,"title":"Riyadh Blog","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-riyadh-blog-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-riyadh-blog-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-riyadh-blog-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-riyadh-blog-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003col\u003e \u003cli\u003eCreate an HTML structure for an existing mockup\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWeb developers are often asked to work from a mockup of a potential webpage, generally referred to as either a \u003ccode\u003emockup\u003c/code\u003e or \u003ccode\u003ecomp\u003c/code\u003e. In this lab, you'll be asked to use a mockup image, source text and images, and create an HTML structure that mirrors the mockup image.\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eCreate an HTML Structure for an Existing Mockup\u003c/h2\u003e  \u003ch3\u003eProcess\u003c/h3\u003e  \u003cp\u003eIn the \u003ccode\u003eindex.html\u003c/code\u003e file, use the comments in the code to place the content from \u003ccode\u003eSOURCE.md\u003c/code\u003e in the proper locations. The image file \u003ca href=\"https://s3.amazonaws.com/learn-verified/RIYADH-MOCKUP.jpg\"\u003e\u003ccode\u003eMOCKUP.jpg\u003c/code\u003e\u003c/a\u003e can be used as a reference to build the \u003ccode\u003eindex.html\u003c/code\u003e page as it appears.\u003c/p\u003e  \u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in a separate browser tab to see your progress as you work. Run \u003ccode\u003erspec\u003c/code\u003e as you go to see test results.\u003c/p\u003e  \u003ch3\u003eBonus\u003c/h3\u003e  \u003cp\u003eUse CSS in the \u003ccode\u003estyle.css\u003c/code\u003e file in the \u003ccode\u003ecss\u003c/code\u003e folder to change different aspects about your page such as:\u003c/p\u003e  \u003cul\u003e \u003cli\u003efont color\u003c/li\u003e \u003cli\u003efont size\u003c/li\u003e \u003cli\u003efont family\u003c/li\u003e \u003cli\u003echange the background image to a color\u003c/li\u003e \u003cli\u003echange the background color to a gradient\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou can also try modifying these styles on-the-fly by modifying them with the \u003ca href=\"https://www.youtube.com/watch?v=q3mWDijP_8w\"\u003edeveloper tools\u003c/a\u003e of your \u003ca href=\"http://www.sitepoint.com/edit-source-files-in-chrome/\"\u003ebrowser\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eYou might think: \"BUT I DON'T KNOW CSS\" (\u003cem\u003every well\u003c/em\u003e or \u003cem\u003eat all\u003c/em\u003e). Developers \u003cem\u003econstantly\u003c/em\u003e encounter this feeling. Since developers are constantly learning, we try to keep the commands as simple as possible. You might know more than you think! What happens if you change \u003ccode\u003ered\u003c/code\u003e to \u003ccode\u003egreen\u003c/code\u003e? What do you expect? How would you validate your guess? Developers usually call this process \"trying stuff\" or \"messing around\" or \"playing with stuff.\" While all those phrases sound like a joke, what they mean to say is that they're using the Scientific Method to validate their guesses into building a model.\u003c/p\u003e  \u003cp\u003eIt's possibly the most powerful learning technique possible. Toddlers and puppies are amazing at it!\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e","exportId":"g22a3a14b0020a3fc0b7ddd0cf2ee29bd"},{"id":243558,"title":"Survey - HTML","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the HTML module?\u003c/p\u003e\n\u003c/div\u003e","exportId":"g8818be67f316d65066c52a9cae832c4a"}]},{"id":16909,"name":"CSS","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gf5867363193bb724a376cdde5e8f6822","items":[{"id":157813,"title":"Intro to CSS","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"css-essentials-introduction-to-css\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-introduction-to-css/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-introduction-to-css\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-introduction-to-css/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify the differences between HTML and CSS\u003c/li\u003e\n\u003cli\u003eList the basic characteristics of CSS\u003c/li\u003e\n\u003cli\u003eDeclare CSS properties and values\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eBrowsers combine the content (HTML) and presentation (CSS) layers to\ndisplay web pages. CSS — Cascading Style Sheets — is the language we use for styling web pages.\u003c/p\u003e\n\n\u003cp\u003eCSS instructions live apart from the HTML elements and have a different look and\nfeel (\"syntax\"). CSS directives give web pages their specific appearance. If you\nhave ever been impressed by how a website can be displayed on a desktop browser\nwhile the same content looks great on a mobile device, you have CSS to thank for\nit!\u003c/p\u003e\n\n\u003cp\u003eOne of the most amazing displays of the power of CSS is the\n\u003ca href=\"http://www.csszengarden.com/\"\u003eCSS Zen Garden\u003c/a\u003e where people take the \u003cem\u003eexact\nsame\u003c/em\u003e HTML page and use CSS to create \u003cem\u003ewildly\u003c/em\u003e different pages. Take a look!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/introduction-to-css/zengarden1.png\" alt=\"CSS Zen Garden 1\" title=\"A long-scrolling single-page CSS Zen Garden design\"\u003e\n\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/introduction-to-css/zengarden2.png\" alt=\"CSS Zen Garden 2\" title=\"An animated CSS, full-screen browser single-page style Zen Garden design\"\u003e\n\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/introduction-to-css/zengarden3.png\" alt=\"CSS Zen Garden 3\" title=\"Blog-like CSS Zen Garden designs\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLike we said: all the difference between these images is created by CSS!\nAstounding, right!?\u003c/p\u003e\n\n\u003cp\u003eWe know now what CSS is and its purpose, so how does it differ from HTML and\nhow can we use it?\u003c/p\u003e\n\n\u003ch2\u003eIdentify the Differences Between HTML and CSS\u003c/h2\u003e\n\n\u003cp\u003eHTML and CSS play two different roles. When we write HTML, we focus on\nstructure, hierarchy, and meaning — the \"marking-up\" of content.\nQuestions in the mind of an HTML author are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIs it best to list these members' names with numbers, or bullets?\u003c/li\u003e\n\u003cli\u003eDoes this menu belong in the navigation in the header?\u003c/li\u003e\n\u003cli\u003eShould this additional reference be an aside, or a separate section?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese questions deal with structure, hierarchy, and meaning, which\nare concerns of the content layer (HTML).\u003c/p\u003e\n\n\u003cp\u003eWhen defining the presentation layer (CSS), here are the questions we ask\nourselves:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDo we want the header menu to be stationary, or does it scroll with the\nbrowser window?\u003c/li\u003e\n\u003cli\u003eHow do we want the content to display inside of a container? For example,\ndoes it fill the whole area, edge-to-edge? Is there white space around\nthe content and/or the container?\u003c/li\u003e\n\u003cli\u003eHow large should an \u003ccode\u003eH1\u003c/code\u003e be relative to an \u003ccode\u003eH2\u003c/code\u003e? What about an \u003ccode\u003eH3\u003c/code\u003e?\u003c/li\u003e\n\u003cli\u003eWhat properties should links have? Underline or no underline?\nWhich color for the normal state versus the hover state? Should the\nvisited link state be different?\u003c/li\u003e\n\u003cli\u003eHow should the content appear when on a desktop machine versus a\nmobile device?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAs you ask yourself these questions, your focus is on the \u003cem\u003eaesthetic\u003c/em\u003e quality\nof the page. For each bit of \u003cem\u003econtent\u003c/em\u003e we can define a \u003cem\u003epresentation rule\u003c/em\u003e\nthat will change the way the HTML is displayed.\u003c/p\u003e\n\n\u003ch2\u003eList the Basic Characteristics of CSS\u003c/h2\u003e\n\n\u003cp\u003eFor each \u003cem\u003epresentation rule\u003c/em\u003e, there are 3 things to keep in mind:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWhat is the specific HTML we want to style?\u003c/li\u003e\n\u003cli\u003eWhat are the qualities we want to modify (e.g. the properties of text\nin a paragraph)?\u003c/li\u003e\n\u003cli\u003e\n\u003cem\u003eHow\u003c/em\u003e do we want to modify the qualities of the element (e.g. font\nfamily, font color, font size, line height, letter spacing etc.)?\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOnce you've decided what to modify and how, we can start writing CSS rules.\u003c/p\u003e\n\n\u003cp\u003eCSS selectors are a way of declaring which HTML elements you wish to style.\nSelectors can appear a few different ways:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe type of HTML element(\u003ccode\u003eh1\u003c/code\u003e, \u003ccode\u003ep\u003c/code\u003e, \u003ccode\u003ediv\u003c/code\u003e, etc.)\u003c/li\u003e\n\u003cli\u003eThe value of an element's \u003ccode\u003eid\u003c/code\u003e or \u003ccode\u003eclass\u003c/code\u003e (\u003ccode\u003e\u0026lt;p id='idvalue'\u0026gt;\u0026lt;/p\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;p\nclass='classname'\u0026gt;\u0026lt;/p\u0026gt;\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eThe value of an element's attributes (\u003ccode\u003evalue=\"hello\"\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eThe element's relationship with surrounding elements (a \u003ccode\u003ep\u003c/code\u003e within an element\nwith class of \u003ccode\u003e.infobox\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor example if you want the body of the page to have a black background, your\nselector syntax may be \u003ccode\u003ehtml\u003c/code\u003e or \u003ccode\u003ebody\u003c/code\u003e. For anchors, your selector would be\n\u003ccode\u003ea\u003c/code\u003e. A few more examples are listed below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/*\u003cbr\u003eThe CSS comment syntax is text between \"slash-star\" and \"star-slash\"\u003cbr\u003e*/\u003cbr\u003e\u003cbr\u003e/*\u003cbr\u003eselects all anchor tag elements in the document (e.g. \u0026lt;a href=\"page-link.html\"\u0026gt;Page Link\u0026lt;/a\u0026gt;)\u003cbr\u003e*/\u003cbr\u003ea\u003cbr\u003e\u003cbr\u003e/*\u003cbr\u003eselects all headers of type h3 in the document (e.g. \u0026lt;h3\u0026gt;Type selectors\u0026lt;/h3\u0026gt;)\u003cbr\u003e*/\u003cbr\u003eh3\u003cbr\u003e\u003cbr\u003e/*\u003cbr\u003eselects all paragraph elements in the document (e.g. \u0026lt;p\u0026gt;Type selectors are used\u003cbr\u003eto...\u0026lt;/p\u0026gt;)\u003cbr\u003e*/\u003cbr\u003ep\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\"\u003eType selectors documentation\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe element type \u003ccode\u003eclass\u003c/code\u003e is a commonly used selector. Class selectors are used\nto \u003cstrong\u003eselect all elements that share a given class name\u003c/strong\u003e. The class selector\nsyntax is: \u003ccode\u003e.classname\u003c/code\u003e. Prefix the class name with a '.'(period).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/*\u003cbr\u003eselect all elements that have the 'important-topic' classname (e.g. \u0026lt;h1 class='important-topic'\u0026gt;\u003cbr\u003eand \u0026lt;h1 class='important-topic'\u0026gt;)\u003cbr\u003e*/\n.important-topic\u003cbr\u003e\u003cbr\u003e/*\u003cbr\u003eselect all elements that have the 'helpful-hint' classname (e.g. \u0026lt;p class='helpful-hint'\u0026gt;\u003cbr\u003eand \u0026lt;p class='helpful-hint'\u0026gt;)\u003cbr\u003e*/\n.helpful-hint\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can also use the \u003ccode\u003eid\u003c/code\u003e selector to style elements. However, \u003cstrong\u003ethere should\nbe only one element with a given id\u003c/strong\u003e in an HTML document. This can make\nstyling with the ID selector ideal for one-off styles. The \u003ccode\u003eid\u003c/code\u003e selector syntax\nis: \u003ccode\u003e#idvalue\u003c/code\u003e. Prefix the id attribute of an element with a \u003ccode\u003e#\u003c/code\u003e (which is\ncalled \"octothorpe,\" \"pound sign\", or \"hashtag\").\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/*\u003cbr\u003eselects the HTML element with the id 'main-header' (e.g. \u0026lt;h1 id='main-header'\u0026gt;)\u003cbr\u003e*/\u003cbr\u003e#main-header\u003cbr\u003e\u003cbr\u003e/*\u003cbr\u003eselects the HTML element with the id 'welcome-message' (e.g. \u0026lt;p id='welcome-message'\u0026gt;)\u003cbr\u003e*/\u003cbr\u003e#welcome-message\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors\"\u003eid selectors documentation\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eDeclare CSS Properties and Values\u003c/h2\u003e\n\n\u003cp\u003eEach element has a list of qualities that can be styled. CSS \"property\" names\nidentify those qualities. For text styling, examples of property names include\ntext \u003ccode\u003ecolor\u003c/code\u003e, \u003ccode\u003etext-align\u003c/code\u003e and \u003ccode\u003eline-height\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eCSS Property Values are directly related to property names. If we are working\nwith the \u003ccode\u003ecolor\u003c/code\u003e property, the value could be a named color such as \u003ccode\u003ered\u003c/code\u003e, or\n\u003ccode\u003e#660000\u003c/code\u003e. Some properties have their values set with words, others with\nnumbers, and some can take both.\u003c/p\u003e\n\n\u003cp\u003eA CSS property name with a CSS property value is a \u003cstrong\u003eCSS declaration\u003c/strong\u003e.\nTo apply a CSS declaration like \u003ccode\u003ecolor: blue\u003c/code\u003e to a specific HTML\nelement, you need to combine your CSS declaration with a CSS selector. The\nassociation between one or more CSS declarations and a CSS selector is called a\n\u003cstrong\u003eCSS declaration block\u003c/strong\u003e. CSS declarations (one or more) that applied to a\nspecific selector are wrapped by curly braces (\u003ccode\u003e{ }\u003c/code\u003e).  Each declaration inside\na declaration block \u003cstrong\u003emust\u003c/strong\u003e be separated by a semi-colon (\u003ccode\u003e;\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eBelow is a sample CSS declaration block.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eselector {\u003cbr\u003e  color: blue;\u003cbr\u003e}\u003cbr\u003e/*\u003cbr\u003eThis is a css declaration for a selector\u003cbr\u003e'color' is a property name and 'blue' is a css property value\u003cbr\u003e!!!!! CSS declarations must end with a semi-colon (;) !!!!!\u003cbr\u003e*/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's write a more complete example declaration block.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/*\u003cbr\u003eThe CSS declaration block below:\u003cbr\u003e* Will apply to all `h1` elements\u003cbr\u003e* Will change the text color to blue\u003cbr\u003e* Will set the font family to Georgia\u003cbr\u003e*/\u003cbr\u003eh1 {\u003cbr\u003e  color: blue;\u003cbr\u003e  font-family: Georgia;\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith the combination of HTML and CSS, you are able to define content,\nstructure, and style to websites. Using a CSS selector like \u003ccode\u003eh1\u003c/code\u003e or \u003ccode\u003ep\u003c/code\u003e paired\nwith a declaration block, you will change the display of that element.\nDeclaration blocks are collections of CSS properties and values.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS\"\u003eMozilla Developer Network: Introduction to CSS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"intro-to-css"},{"id":157815,"title":"Introduction to CSS Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-intro-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-intro-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-intro-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eImport a CSS file in our HTML\u003c/li\u003e\n\u003cli\u003eImplement CSS declarations\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHTML's role in our websites is to provide structure, content, and link resources (e.g. CSS files). Its role in describing the style (\"presentation\") of content is minimal. HTML's ability to style is pretty much limited to \"pretty good\" defaults.\u003c/p\u003e\n\u003cp\u003eIn order to further customize the style, appearance, and interactive behavior of our websites, we turn to Cascading Style Sheets, or CSS. In this lab, we will work on implementing CSS declarations in our HTML.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/css-essentials/introduction-to-css-lab/Image_66_WritingCSS%20vs%20HTML.png\" alt=\"HTML vs CSS Table\"\u003e\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eImport a CSS File in Our HTML\u003c/h2\u003e\n\u003cp\u003eFirst things first: we need to make sure our HTML is loading our style sheet.\u003c/p\u003e\n\u003cp\u003eWe have two options:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWrite CSS rules inside of a \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag (\"internal CSS\"), which tells HTML \"Hey, I want to define some CSS styling here\u003c/li\u003e\n\u003cli\u003eWrite CSS rules in an external file that is specified with the \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag (\"external CSS\").\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn our case, we want to provide a link to our style sheet, instead of writing all of our CSS code directly in the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag. This allows us to only have to write styles for the entire site once, instead of repeating every \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e element on every page. A common workflow is to see developers work on CSS inside of the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag until their styling is done. At that point they move it to their external file and remove the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e element from the HTML page. Feel free to try it out!\u003c/p\u003e\n\u003cp\u003eIn \u003ccode\u003eindex.html\u003c/code\u003e, provide a \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag which correctly sources the CSS file located in this directory. The \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag will link to our file with an \u003ccode\u003ehref\u003c/code\u003e attribute, like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;link rel=\"stylesheet\" href=\"relative path to CSS file\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ehref\u003c/code\u003e attribute should point to the file \u003ccode\u003estyle.css\u003c/code\u003e which is located in this directory using a \u003cem\u003erelative path\u003c/em\u003e. The \u003ccode\u003erel\u003c/code\u003e attribute is used to note that the file which is being linked has a \u003cstrong\u003erel\u003c/strong\u003eation of being a \"stylesheet.\"\u003c/p\u003e\n\u003cp\u003eNow, what is a relative path? You could write \u003ccode\u003ehref=\"style.css\"\u003c/code\u003e and the content of \u003ccode\u003estyle.css\u003c/code\u003e would change your \u003ccode\u003eindex.html\u003c/code\u003e file. But we want to teach you to require external resources (like CSS or JavaScript) by using \u003cem\u003erelative paths\u003c/em\u003e. Relative paths make it \u003cem\u003ecrystal clear\u003c/em\u003e which file is being used. Relative paths start with \u003ccode\u003e./\u003c/code\u003e which means \"from the directory I am currently in.\" So, when we use \u003ccode\u003elink\u003c/code\u003e to associate with a style sheet and we write \u003ccode\u003ehref=\"./style.css\"\u003c/code\u003e we're saying: \"From the directory in which I, the \u003ccode\u003eindex.html\u003c/code\u003e file live, look for a file called \u003ccode\u003estyle.css\u003c/code\u003e and use it. This pattern will help you and other developers remove any possible confusion.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;link rel=\"stylesheet\" href=\"relative path to CSS file\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLinks to style sheets should go at the end of the \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e section! Make sure you provide a \u003cem\u003erelative\u003c/em\u003e path to the style sheet. Hint: Open \u003ccode\u003eindex.html\u003c/code\u003e in the browser. You can test whether your link is working or not by the color of your headline. If it's red, it's working! If it's black, keep going - you'll get it.\u003c/p\u003e\n\u003ch2\u003eImplement CSS Declarations\u003c/h2\u003e\n\u003cp\u003eNow, we are going to create some CSS declarations and add styling to our document! First, open \u003ccode\u003eindex.html\u003c/code\u003e in the browser to get a good idea of what \u003ca href=\"https://curriculum-content.s3.amazonaws.com/web-development/unstyled-codepen.jpeg\"\u003eour un-styled page\u003c/a\u003e page looks like.\u003c/p\u003e\n\u003cp\u003eWhat we would really like is \u003ca href=\"https://curriculum-content.s3.amazonaws.com/web-development/styled-intro-to-css.png\"\u003esomething a little more jazzed up\u003c/a\u003e! Let's work towards that. Set the following \u003cem\u003eproperties\u003c/em\u003e to specific \u003cem\u003evalues\u003c/em\u003e. Make sure to, after each update, look at \u003ccode\u003eindex.html\u003c/code\u003e in the browser to see how it has changed:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSet the \u003ccode\u003ebackground\u003c/code\u003e of the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e element (whole document) to \u003ccode\u003e#00b3e6\u003c/code\u003e (light blue)\u003c/li\u003e\n\u003cli\u003eSet the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e elements:\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ewidth\u003c/code\u003e to \u003ccode\u003e700px\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003emargin\u003c/code\u003e to \u003ccode\u003eauto\u003c/code\u003e (centers our element)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003efont-family\u003c/code\u003e to \u003ccode\u003e\"Helvetica Neue\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ebackground\u003c/code\u003e to \u003ccode\u003ewhite\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003epadding\u003c/code\u003e to \u003ccode\u003e30px\u003c/code\u003e (creates an invisible space around the element)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSet the element with the id of \u003ccode\u003e#main-header\u003c/code\u003e to a \u003ccode\u003efont-size\u003c/code\u003e of \u003ccode\u003e22px\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eSet the elements with the class of \u003ccode\u003e.perspective-questions\u003c/code\u003e to a \u003ccode\u003efont-style\u003c/code\u003e of \u003ccode\u003eitalic\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRun \u003ccode\u003erspec\u003c/code\u003e to test your work.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eCSS allows us to easily separate our 'styling' logic into separate files that follow the 'cascading' rule set. This enables us to keep our HTML clean and simple to read, without sacrificing the customization that we have come to expect on websites.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/Css/css_intro.asp\"\u003eW3 Introduction to CSS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g940337d406f780ff5c9ddb3a43b91ab4"},{"id":157817,"title":"CSS Fundamentals","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"css-essentials-css-fundamentals\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-css-fundamentals\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-css-fundamentals/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify CSS syntax\u003c/li\u003e \u003cli\u003eIdentify CSS use formats\u003c/li\u003e \u003cli\u003eImplement various types of CSS selectors\u003c/li\u003e \u003cli\u003eImplement various types of color values in CSS\u003c/li\u003e \u003cli\u003eIdentify and implement CSS comments\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll build on the basics we've learned. We'll learn to select elements based on HTML attributes, we'll learn to apply colors, and we'll learn how to comment our CSS.\u003c/p\u003e  \u003ch2\u003eIdentify CSS Syntax\u003c/h2\u003e  \u003cp\u003eBefore we turn to the various ways we can extend CSS rules, let's go over the foundational syntax CSS uses.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/css-essentials/css-fundamentals/Image_43_ReCreateGraphic.png\" alt=\"\"\u003e\u003c/p\u003e  \u003cp\u003eWe create a CSS rule by defining the selector, which matches the HTML element we want to style. Inside the curly braces we declare the properties we want to change and, after the colon, we set the value we want to change that property to. Each property is written in the following form: property name, colon, the value for that property and a semicolon.\u003c/p\u003e  \u003cp\u003eIn the example above, we are selecting the \u003ccode\u003ep\u003c/code\u003e element and displaying its color as blue.\u003c/p\u003e  \u003ch2\u003eIdentify CSS Use Formats\u003c/h2\u003e  \u003cp\u003eHow do we \"apply\" CSS to an HTML page? By using one of three CSS use formats: inline, internal (or embedded) and external.\u003c/p\u003e  \u003cp\u003eInline includes the styles directly into the HTML element with the \u003ccode\u003estyle\u003c/code\u003e attribute.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;p style=\"color: blue;\"\u0026gt;\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhile you might see this sort of styling in something like the code for an HTML email, this is generally not the best practice for two reasons. The primary reason is because it only affects that single element. If we want all paragraph elements on our page to appear blue, we would have to add that attribute to every element individually, which is inefficient and difficult to maintain into the future. That brings us to the second reason to avoid inline CSS: it breaks our principle of separation of content and presentation.\u003c/p\u003e  \u003cp\u003eInternal CSS is inside of \u003ccode\u003estyle\u003c/code\u003e tags in the HTML document's \u003ccode\u003ehead\u003c/code\u003e section.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;style\u0026gt;\u003cbr\u003e      p { color: blue; }\u003cbr\u003e    \u0026lt;/style\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;p\u0026gt;This is a paragraph.\u0026lt;/p\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis rule will display all paragraphs in this document as blue, which is a step up in scope from the inline styles that only apply to single elements. But this CSS will only apply to the single document. Other paragraph elements on other pages in the same website will be unaffected.\u003c/p\u003e  \u003cp\u003eIf we want our CSS to carry across various pages, we can use an external style sheet. This is a separate CSS file that we link in the \u003ccode\u003ehead\u003c/code\u003e of HTML documents.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;link rel=\"stylesheet\" href=\"styles.css\"\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;p\u0026gt;This is a paragraph.\u0026lt;/p\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith the \u003ccode\u003elink\u003c/code\u003e tag, we can use the relation attribute to define the target as a style sheet and the link source our CSS file that contains all the CSS we want to use on our site. This is by far the easiest way to link CSS to HTML and apply styles across all of our pages.\u003c/p\u003e  \u003ch2\u003eImplement Various Types of CSS Selectors\u003c/h2\u003e  \u003cp\u003eCSS gives us a wide range of ways that we can select elements on the page. Some of these you will use more than others, but it's a good idea to know them all so you can choose the right one when you need it.\u003c/p\u003e  \u003ch3\u003eID and Class Selectors\u003c/h3\u003e  \u003cp\u003eID selectors target all elements with a specific ID attribute value. The way we specify an ID selector in a CSS rule is to follow the element name with a hash symbol and then the ID attribute value we want to match.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ep#introduction {\u003cbr\u003e  color: blue;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, the browser will look for a \u003ccode\u003ep\u003c/code\u003e element with the ID attribute \"introduction\" and apply the CSS to that element. ID selectors are useful when you want to give a single element on the page a unique identity and set it apart from everything else.\u003c/p\u003e  \u003cp\u003eClass selectors target all elements with a class attribute value matching the selector name. We specify a class selector using the period symbol followed by the name value.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ep.alert {\u003cbr\u003e  color: red;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe difference between IDs and classes is that IDs are meant for one element on the page that has a unique identity where class selectors are meant to be spread throughout the page across multiple elements.\u003c/p\u003e  \u003ch3\u003eCompound Selectors\u003c/h3\u003e  \u003cp\u003eCompound selectors let us apply the same CSS rules to multiple elements at once. If we want to make both \u003ccode\u003eh1\u003c/code\u003e and \u003ccode\u003eh2\u003c/code\u003e elements display green, we use both as selectors, separated with a comma.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eh1, h2 {\u003cbr\u003e  color: green;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis eliminates the need to rewrite a new CSS rule containing the same styles for different elements.\u003c/p\u003e  \u003ch3\u003eDescendant Selectors\u003c/h3\u003e  \u003cp\u003eDescendant selectors target elements that are descendants of the matching selector name. A descendant selector is indicated by a space in between one selector and another selector.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003earticle p {\u003cbr\u003e  color: blue;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, \u003cem\u003eonly\u003c/em\u003e \u003ccode\u003ep\u003c/code\u003e elements within the \u003ccode\u003earticle\u003c/code\u003e element will receive the styling.\u003c/p\u003e  \u003cp\u003eID, class, compound and descendant selectors are the kind of selectors you will probably use in your CSS on a regular basis. From this point on, we get into more advanced selectors. They are often not as necessary as the previous ones, but they can accomplish some powerful operations.\u003c/p\u003e  \u003ch3\u003eChild Selectors\u003c/h3\u003e  \u003cp\u003eThe child selector targets all elements that are the immediate children of a specified element.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003earticle \u0026gt; p {\u003cbr\u003e  color: blue;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOnly \u003ccode\u003ep\u003c/code\u003e tags one level down from \u003ccode\u003earticle\u003c/code\u003e will display as blue. If there are \u003ccode\u003ep\u003c/code\u003e tags within an \u003ccode\u003easide\u003c/code\u003e element within the \u003ccode\u003earticle\u003c/code\u003e element, they will not receive the same instructions.\u003c/p\u003e  \u003ch3\u003eAdjacent Sibling Selector\u003c/h3\u003e  \u003cp\u003eThe adjacent sibling selector targets elements that appear directly after the matching selector name. We indicate it using a plus symbol.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eh3 + p {\u003cbr\u003e  color: blue;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere the adjacent sibling selector will style the paragraph directly following an \u003ccode\u003eh3\u003c/code\u003e element but not paragraphs that come after the first.\u003c/p\u003e  \u003ch3\u003eGeneral Sibling Selector\u003c/h3\u003e  \u003cp\u003eThe general sibling selector (sometimes called the preceded selector) will style all matched elements after the preceding selector name.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eh3 ~ p {\u003cbr\u003e  color: red;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith this general sibling selector, all paragraph elements that come after the \u003ccode\u003eh3\u003c/code\u003e will receive the styling.\u003c/p\u003e  \u003ch3\u003eUniversal\u003c/h3\u003e  \u003cp\u003eThe universal selector matches any elements and will apply to elements that are not targeted by other rules. It's indicated by the star symbol.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e* {\u003cbr\u003e  color: yellow;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, this is going to set the color of the text yellow for any element that hasn't had its color property specified elsewhere.\u003c/p\u003e  \u003ch3\u003eAttribute Selectors\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003eattribute\u003c/code\u003e selector can target elements with a particular attribute. We can also define exactly which attribute we want to match.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003einput[type=\"text\"] {\u003cbr\u003e  width: 200px;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we want to find \u003ccode\u003einput\u003c/code\u003e elements, but only those with a \u003ccode\u003etype\u003c/code\u003e value that matches \"text.\" For those elements that fit the requirements, the browser will then apply the width we want. There are many different ways to use this type of selector with various combinations of operations and attribute values so you can refer to the resources to explore them all.\u003c/p\u003e  \u003ch3\u003ePseudo-class Selectors\u003c/h3\u003e  \u003cp\u003ePseudo-class selectors target elements based on a particular state of an element or relationship to other elements. The way we signify a pseudo class selector is with the colon symbol.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ea:link {\u003cbr\u003e  color: blue;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ea:visited {\u003cbr\u003e  color: purple;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThese two link examples reflect the way links that are both unvisited and visited will be displayed differently. If the link is unvisited, it will show as blue. If it has been visited, it will show up purple. Pseudo-class selectors, like attribute selectors, have a lot of aspects so you can explore them more in other resources.\u003c/p\u003e  \u003ch2\u003eImplement Various Types of Color Values in CSS\u003c/h2\u003e  \u003cp\u003eWe've been using color names in our examples to keep it simple, but only a handful of color names are recognized by all browsers. When writing CSS, we'll be better off to use different ways of defining our colors.\u003c/p\u003e  \u003ch4\u003eHexadecimal Color Values\u003c/h4\u003e  \u003cp\u003eMost often developers use a set of numbers called hexadecimal, which represents a wide range of colors. Hex colors begin with \u003ccode\u003e#\u003c/code\u003e and are followed by, generally, 6 numbers, but some of these numbers are actually letters. The lowest single digit number in hex is 0 and the highest single digit number is f. This table might help to visualize what we mean by this.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eDecimal Numbers:      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\u003cbr\u003eHexadecimal Numbers:  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,  a,  b,  c,  d,  e,  f, 10 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHex colors work by creating Red, Green, Blue (RGB) values. Traditional RGB colors are on a scale of 0 to 255 for each of the three colors in the spectrum. \u003ccode\u003e#000000\u003c/code\u003e translates to black since 0 reds, 0 green, 0 blues represents the absence of all colors and \u003ccode\u003e#ffffff\u003c/code\u003e makes white since 255 reds, 255 greens, and 255 blues equal the maximum of each of the colors.\u003c/p\u003e  \u003cp\u003eHex colors can be shortened to just three numbers when each RGB value is the same for each digit. So \u003ccode\u003e#111111\u003c/code\u003e can be written as \u003ccode\u003e#111\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eRGB Color Values\u003c/h3\u003e  \u003cp\u003eWe can also work directly with RGB values.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ep {\u003cbr\u003e  color: rgb(255, 255, 255);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we've set our \u003ccode\u003ep\u003c/code\u003e elements to the color white, the maximum of all RGB values (255).\u003c/p\u003e  \u003cp\u003eYou can also add an extra channel to your RGB color by setting an \"a\" value, which represents opacity.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ep {\u003cbr\u003e  color: rgba(0, 0, 255, 0.5);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis example will show up as blue, with 50% opacity so the element will have a somewhat transparent color.\u003c/p\u003e  \u003ch2\u003eIdentify and Implement CSS Comments\u003c/h2\u003e  \u003cp\u003eSometimes developers want to put into their code information that helps other humans understand what the code is doing but without bothering the browser. We do this with comments, and CSS has its own way to mark up comments.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ep.alert {\u003cbr\u003e  color: #ff0000; /* Alert text displays red */\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEverything in between the \u003ccode\u003e/* */\u003c/code\u003e is a CSS comment. The browser will not pay attention to these comments, but they can be useful for us to add explanations or reminders alongside our CSS code.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWe reviewed the specifics of CSS syntax and covered the different ways we can connect CSS to HTML. We ran through the various types of CSS selectors, including IDs, classes, compound, child, adjacent sibling, general sibling, universal, attribute and pseudo-classes. We also took a look at the various ways to express colors, from standard color names to hexadecimal and RGB values. Lastly, we identified how to read and write CSS comments.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started\"\u003eMDN: CSS Tutorials for Beginners\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Reference\"\u003eMDN: CSS Property Reference\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance\"\u003eMDN: CSS Inheritance\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048\"\u003eTuts Plus: 30 CSS selectors to Memorize\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://css-tricks.com/pseudo-class-selectors/\"\u003eCSS Tricks: Learn More Pseudo Selectors\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Web_fonts\"\u003eMDN: Using Web Fonts\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://learn.shayhowe.com/advanced-html-css/performance-organization/\"\u003eShay Howe: CSS Performance \u0026amp; Organization, Best Practices\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://color.adobe.com/create/color-wheel/\"\u003eAdobe Color Tool\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://jigsaw.w3.org/css-validator/\"\u003eCSS Validator\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://flukeout.github.io/\"\u003eCSS Diner Game\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://css-tricks.com/yay-for-hsla/\"\u003eCSS Tricks: Hue, Saturation and Lightness\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"css-fundamentals"},{"id":157819,"title":"CSS Fundamentals Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-fundamentals-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals-lab/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals-lab\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals-lab/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eLink an external CSS file\u003c/li\u003e\n    \u003cli\u003eWrite CSS rules to style HTML\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this lab, we will be adding style to our \u003ccode\u003eindex.html\u003c/code\u003e page by linking an external CSS file. If you open \u003ccode\u003eindex.html\u003c/code\u003e in the browser (by either opening the file with Google Chrome or running \u003ccode\u003ehttpserver\u003c/code\u003e on the Learn IDE), you will see basic HTML that has been provided. The website emulates a basic Real Estate website (the links on it have been disabled, we will be working with only the basic \u003ccode\u003eindex.html\u003c/code\u003e landing page).\u003c/p\u003e\n\u003cp\u003eAs you can see, our basic page is rather lackluster. This is where you come in! You will be adding CSS, using selectors, to jazz the page up. All of our CSS should be written in \u003ccode\u003estyle.css\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies. Run \u003ccode\u003erspec\u003c/code\u003e as you work through this assignment to see your progress.\u003c/p\u003e\n\u003ch2\u003eLink an External CSS File\u003c/h2\u003e\n\u003cp\u003eAs usual, we need to make sure our HTML is loading our style sheet.\u003c/p\u003e\n\u003cp\u003eWe have two options:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eWrite CSS rules inside of a \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag (\"internal CSS\"), which tells HTML \"Hey, I want to define some CSS styling here\"\u003c/li\u003e\n    \u003cli\u003eWrite CSS rules in an external file that is specified with the \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag (\"external CSS\").\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn our case, we want to provide a link to our style sheet, instead of writing all of our CSS code directly in the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag. This allows us to only have to write styles for the entire site once, instead of repeating every \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e element on every page. A common workflow is to see developers work on CSS inside of the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag until their styling is done. At that point, they move it to their external file and remove the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e element from the HTML page. Feel free to try it out!\u003c/p\u003e\n\u003cp\u003eIn \u003ccode\u003eindex.html\u003c/code\u003e, provide a \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag which correctly sources the CSS file located in this directory. The \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag will link to our file with an \u003ccode\u003ehref\u003c/code\u003e attribute, like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;link rel=\"stylesheet\" href=\"relative path to CSS file\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLinks to style sheets should go at the end of the \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e section! Make sure you provide a \u003cem\u003erelative\u003c/em\u003e path to the style sheet.\u003c/p\u003e\n\u003cp\u003eNow, what is a relative path? You could write \u003ccode\u003ehref=\"style.css\"\u003c/code\u003e and the content of \u003ccode\u003estyle.css\u003c/code\u003e would change your \u003ccode\u003eindex.html\u003c/code\u003e file. But we want to teach you to require external resources (like CSS or JavaScript) by using \u003cem\u003erelative paths\u003c/em\u003e. Relative paths make it \u003cem\u003ecrystal clear\u003c/em\u003e which file is being used. Relative paths start with \u003ccode\u003e./\u003c/code\u003e which means \"from the directory I am currently in.\" So, when we use \u003ccode\u003elink\u003c/code\u003e to associate with a style sheet and we write \u003ccode\u003ehref=\"./style.css\"\u003c/code\u003e we're saying: \"From the directory in which I, the \u003ccode\u003eindex.html\u003c/code\u003e file live, look for a file called \u003ccode\u003estyle.css\u003c/code\u003e and use it.\" This pattern will help you and other developers remove any possible confusion.\u003c/p\u003e\n\u003cp\u003eHint: Try adding the following temporarily to your \u003ccode\u003estyle.css\u003c/code\u003e file to test if your linked CSS is working:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eh1 {\u003cbr\u003e  color: red;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you see your \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e change to red, you've linked your style sheet correctly! Don't forget to delete it once you have your link working.\u003c/p\u003e\n\u003ch2\u003eWrite CSS Rules to Style HTML\u003c/h2\u003e\n\u003cp\u003eFor this exercise, we are going to be transforming our base HTML into a more exciting version using CSS.\u003c/p\u003e\n\u003cp\u003eIt is important to note that there are \u003cem\u003emany\u003c/em\u003e ways to go about transforming the HTML with CSS to match the end product. For this lesson, we will provide you with general guidance in \u003cem\u003eone way\u003c/em\u003e of getting to the desired view by adding to the \u003ccode\u003estyle.css\u003c/code\u003e. Ultimately, the goal is to have your website look like the finished product whatever way works the best for you.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are having trouble finding the specific CSS property you need to get a specific visual outcome, use your Google skills with queries such as: \"CSS center text within div\".\u003c/p\u003e\n\u003cp\u003eIn following the guidelines, you should be referencing the \u003ccode\u003eindex.html\u003c/code\u003e to find the appropriate tags/IDs that we will use as selectors in our \u003ccode\u003estyle.css\u003c/code\u003e file. Don't forget: you can use the Chrome Inspector Tool (\u003ccode\u003ecmd + shift + C\u003c/code\u003e on Mac) to inspect specific elements of the DOM (and make trial changes to their CSS) in the browser.\u003c/p\u003e\n\u003ch3\u003eWhat We Have\u003c/h3\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-fundamentals-lab-incomplete.png\" alt=\"\"\u003e\n\u003c/p\u003e\n\u003ch3\u003eWhat We Want\u003c/h3\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-fundamentals-lab-complete.png\" alt=\"\"\u003e\n\u003c/p\u003e\n\u003ch3\u003eDeliverables\u003c/h3\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003cstrong\u003eUpdate the header\u003c/strong\u003e: the text is a little wonky being aligned on the left like that. Provide a property that aligns it in the center instead.\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003cstrong\u003eCenter our image\u003c/strong\u003e: We only have one image on the page and we would like it centered!\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003cstrong\u003eJazz up our navigation links\u003c/strong\u003e: Let's center all of our nav links as well. Give all of the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags within our navbar padding of 10px on their left and right sides. In addition, change their background color to something of your choosing. We chose grey!\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003cstrong\u003eOur image caption needs work\u003c/strong\u003e: Let's shrink that font size down and make sure it is centered.\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003cstrong\u003eUpdate the text block\u003c/strong\u003e: Wouldn't it look nicer if our text was centered as well? Our image is about 900px wide, so let's give all our \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003es within \u003ccode\u003e#featured-property\u003c/code\u003e a hard width of 800px and center the text in there. Be sure to keep a little vertical space around the \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003es.\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003cstrong\u003eMake our \u003ccode\u003e#details\u003c/code\u003e section horizontal\u003c/strong\u003e: The details section could go nicely as a footer to the page, instead of a vertical list. To do this, make each of the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003es \u003ccode\u003efloat\u003c/code\u003e to the \u003ccode\u003eleft\u003c/code\u003e.\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003cstrong\u003eAs a finishing touch\u003c/strong\u003e: Let's clean up the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003es at the bottom of the page. All of them should have the same background color, centered text, and occupy 25% of the \u003ccode\u003ewidth\u003c/code\u003e of the bottom row (since we have 4 divs).\u003c/p\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eCSS allows many avenues to the same goal. The important takeaway is to experiment and become familiar with the commonly used rules. This will enable you to identify what properties will get you to which end result the quickest.\u003c/p\u003e\n\u003cp\u003eYou will find that even years into your career as a front end developer, you will be referencing basic CSS documentation. \u003cem\u003eThis is to be expected!\u003c/em\u003e To be comfortable quickly finding the property/value you are looking for online is the most important skill set you can develop right now. Memorization is for machines, adaptation is for humans!\u003c/p\u003e","exportId":"ge31b2690a9345f19751f6896997b5002"},{"id":157821,"title":"CSS Validation Lab: Issue Bot 9000","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"css-essentials-css-issue-bot-9000\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-css-issue-bot-9000/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-css-issue-bot-9000\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-css-issue-bot-9000/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eChange invalid CSS to valid CSS\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eAlthough today's browsers are becoming more capable of handing errors in CSS, some errors are not always caught gracefully. This variable can make it extremely difficult to apply style or layout consistently. What can be done to quickly scan our CSS documents for issues? Let's practice using the W3C's CSS Validator!\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies. Run \u003ccode\u003erspec\u003c/code\u003e to as you go to see your test progress.\u003c/p\u003e  \u003ch2\u003eChange Invalid CSS to Valid CSS\u003c/h2\u003e  \u003cp\u003eIn this lesson, we will be taking the invalid CSS in \u003ccode\u003ecss/style.css\u003c/code\u003e and changing it to valid.\u003c/p\u003e  \u003col\u003e \u003cli\u003eOpen index.html in your browser. Notice how our styles don't look quite right? \u003c/li\u003e \u003cli\u003eOpen css/style.css in your text editor.\u003c/li\u003e \u003cli\u003eVisit the W3C CSS validator \u003ca href=\"http://jigsaw.w3.org/css-validator/#validate_by_input\"\u003ehttp://jigsaw.w3.org/css-validator/#validate\u003cem\u003eby\u003c/em\u003einput\u003c/a\u003e. If not already selected, click on the tab labeled \"By direct input\".\u003c/li\u003e \u003cli\u003eCopy the code from css/style.css and paste it into the text area. Click the \"Check\" button.\u003c/li\u003e \u003cli\u003eUse the error messages to correct the CSS. \u003c/li\u003e \u003cli\u003eRepeat steps 3-5 until your readout states \"Congratulations! No Error Found.\".\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eRemember to check your progress in \u003ccode\u003eindex.html\u003c/code\u003e in your browser!\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWith a CSS validator, you can work your way through cleaning up errors in a CSS document and reduce the likelihood of display errors across platforms. Using the W3C CSS validator will help you quickly and efficiently troubleshoot your CSS.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cp\u003e\u003ca href=\"http://jigsaw.w3.org/css-validator/#validate_by_input\"\u003eW3C CSS Validator - Validate Direct Input\u003c/a\u003e\u003c/p\u003e","exportId":"gc7660eaf9a4ac8351f0b0e62bf65f155"},{"id":157823,"title":"My Little Rainbow","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-rainbow-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eReview HTML basics\u003c/li\u003e \u003cli\u003eReview CSS basics\u003c/li\u003e \u003cli\u003eSpecify hexadecimal color values with CSS\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lab, we're going to make a rainbow with HTML \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e elements. And while we do it we're going to learn about HTML elements, CSS styling, CSS selectors, how color works in CSS and importing style sheets.\u003c/p\u003e  \u003cp\u003eBefore we start, here's some basic info about HTML and CSS. Skip to \u003ca href=\"#make-a-rainbow\"\u003eMake a Rainbow\u003c/a\u003e if you feel comfortable enough with HTML and CSS.\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies. Run \u003ccode\u003erspec\u003c/code\u003e as you work to see your test progress.\u003c/p\u003e  \u003ch2\u003eReview HTML Basics\u003c/h2\u003e  \u003cp\u003eHyper Text Markup Language, or HTML, is a way to structure a document with different parts. Each section of content is \u003cem\u003emarked\u003c/em\u003e by elements (using tags). Each element has its own special meaning that the browser uses to \u003cem\u003erender\u003c/em\u003e the HTML document. Use this \u003ca href=\"https://htmlcheatsheet.com/\"\u003echeat sheet\u003c/a\u003e on HTML elements for guidance.\u003c/p\u003e  \u003ch3\u003eElements\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eAll begin with \u003ccode\u003e\u0026lt;\u003c/code\u003e and end with \u003ccode\u003e\u0026gt;\u003c/code\u003e, e.g., \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e (this last part is a tag).\u003c/li\u003e \u003cli\u003eMost have an opening tag such as \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e and a closing tag \u003ccode\u003e\u0026lt;/div\u0026gt;\u003c/code\u003e.  \u003cul\u003e \u003cli\u003eThe \u003ccode\u003e/\u003c/code\u003e indicates to the browser that that tag is a closing tag.\u003c/li\u003e \u003cli\u003eThe element is everything between the tags and the tags themselves.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eSome tags are self-closing like the line break element \u003ccode\u003e\u0026lt;br\u0026gt;\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eElements can have IDs and classes to aid the browser in finding specific tags.  \u003cul\u003e \u003cli\u003eMust begin with a letter A-Z or a-z.\u003c/li\u003e \u003cli\u003eCan be followed by: letters (\u003ccode\u003eA-Za-z\u003c/code\u003e), digits (\u003ccode\u003e0-9\u003c/code\u003e), hyphens (\u003ccode\u003e-\u003c/code\u003e), and underscores (\u003ccode\u003e_\u003c/code\u003e).\u003c/li\u003e \u003cli\u003eIDs \u003cstrong\u003ecan\u003c/strong\u003e only be used once per page. E.g.: \u003ccode\u003e\u0026lt;div id=\"this-special-div\"\u0026gt;\u0026lt;/div\u0026gt;\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eClasses can be used as many times as you want. E.g.: \u003ccode\u003e\u0026lt;div class=\"a-less-special-div\"\u0026gt;\u0026lt;/div\u0026gt;\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eElements nested inside other elements are called children.  \u003cul\u003e \u003cli\u003eChildren inherit attributes from their parents.\u003c/li\u003e \u003cli\u003eDon't nest everything.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eElements next to one another are siblings.  \u003cul\u003e \u003cli\u003eSiblings do not inherit from one another but are important for selecting in CSS.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eHere is an example of element relations:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;  \u0026lt;!-- the parent element --\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;  \u0026lt;!-- the first sibling element/the first child--\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;  \u0026lt;!-- the second sibling element/the second child --\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eReview CSS Basics\u003c/h2\u003e  \u003cp\u003eCascading Style Sheets, or CSS, is a language created to style HTML documents by telling the browser how specific elements should look. CSS does this by selecting elements based on their tag, ids, classes, or all of the above. The reason for CSS is the separation of concerns. We want HTML to focus on the structure and meaning of our content. We let CSS worry about how to make that information appear clear and engaging.\u003c/p\u003e  \u003ch3\u003eCSS selectors\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eThey select elements to assign them styles.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003e*\u003c/code\u003e (wildcard) selects every element.\u003c/li\u003e \u003cli\u003eAn element, such as \u003ccode\u003ediv\u003c/code\u003e, will select all elements of that type.\u003c/li\u003e \u003cli\u003eThey select an id like \u003ccode\u003e#some-id\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eClasses are selected like this \u003ccode\u003e.some-class\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eTo select all children elements of a parent do something like this \u003ccode\u003ediv p\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eTo select multiple different elements separate them by commas like this \u003ccode\u003ediv, p, a\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eHere's an example of CSS styling:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e* {\u003cbr\u003e  color: red;  /* color in CSS refers to font color */\u003cbr\u003e}  /* all elements will have red font */ \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eMake a CSS Rainbow\u003c/h2\u003e  \u003cp\u003eIn the directory, you'll see three files: \u003ccode\u003eindex.html\u003c/code\u003e, \u003ccode\u003emain.css\u003c/code\u003e, and this file, \u003ccode\u003eREADME.md\u003c/code\u003e. Open \u003ccode\u003eindex.html\u003c/code\u003e (or run \u003ccode\u003ehttpserver\u003c/code\u003e if using the Learn IDE).\u003c/p\u003e  \u003cp\u003eIf everything is working correctly, you should see a white page.\u003c/p\u003e  \u003cp\u003eGood job!\u003c/p\u003e  \u003ch3\u003eMaking the Divs Visible\u003c/h3\u003e  \u003cp\u003eIf you look at the file in your text editor or use the inspector, you'll see that the basic HTML structure is present in \u003ccode\u003eindex.html\u003c/code\u003e. So why can't we see anything?\u003c/p\u003e  \u003cp\u003eWell, \u003ccode\u003ediv\u003c/code\u003es are \u003cem\u003estructural\u003c/em\u003e elements. They're used to \u003cem\u003einvisibly\u003c/em\u003e group other visible elements together. But the style sheet that would tell our \u003ccode\u003ediv\u003c/code\u003es to do something a little different hasn't been linked yet!\u003c/p\u003e  \u003cp\u003eLet's fix this by adding the style sheet to the \u003ccode\u003ehead\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;head\u0026gt; ...\u003cbr\u003e  \u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"main.css\"\u0026gt; ...\u003cbr\u003e\u0026lt;/head\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003eLink\u003c/code\u003e is a self-closing tag that will create a relative path with the \u003ccode\u003ehref\u003c/code\u003e attribute. A relative path means the browser knows that the \u003ccode\u003emain.css\u003c/code\u003e file is in the same place as \u003ccode\u003eindex.html\u003c/code\u003e. The \u003ccode\u003ehead\u003c/code\u003e is a hidden part of the page that tells the browser where to find any other files it needs to display the page correctly, the \u003ccode\u003etitle\u003c/code\u003e for the tab, and any other possible important information.\u003c/p\u003e  \u003cp\u003eNow if you refresh the \u003ccode\u003eindex.html\u003c/code\u003e page in your browser you should see a perfectly \u003ca href=\"https://en.wikipedia.org/wiki/Goth_subculture\"\u003eGoth\u003c/a\u003e solid-black rainbow.\u003c/p\u003e  \u003cp\u003eWe got the basic outline because in the \u003ccode\u003emain.css\u003c/code\u003e all the \u003ccode\u003ediv\u003c/code\u003e elements were selected and given a \u003ccode\u003eborder\u003c/code\u003e whose color is \u003ccode\u003e#000\u003c/code\u003e, \"black.\" While we could set \u003ccode\u003ecolor: red;\u003c/code\u003e, we will have more colors available if we define colors without words.\u003c/p\u003e  \u003cp\u003eInstead of \u003ccode\u003ered\u003c/code\u003e, \u003ccode\u003egreen\u003c/code\u003e, or the exotic \u003ccode\u003etomato\u003c/code\u003e, professionals prefer a set of numbers with a base pair of 16 rather than a base pair of 10 like we use every day. These numbers are called \"hexadecimal\" and we can use them to make a wide range of colors.\u003c/p\u003e  \u003ch3\u003eSome Stuff You Should Know About Hex Colors (and Web Colors in General)\u003c/h3\u003e  \u003cp\u003eHex colors begin with \u003ccode\u003e#\u003c/code\u003e and are followed by, generally, 6 numbers, but some of these numbers are actually letters. The lowest single digit number in hex is \u003ccode\u003e0\u003c/code\u003e and the highest single digit number is \u003ccode\u003ef\u003c/code\u003e. This table might help to visualize what we mean by this.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eDecimal Numbers:      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\u003cbr\u003eHexadecimal Numbers:  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,  a,  b,  c,  d,  e,  f, 10 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHex colors work by creating Red, Green, Blue (RGB) values. Traditional RGB colors are on a scale of 0 to 255 for each of the three colors in the spectrum. Hex colors are considered true colors since they can represent ~16 million colors—but your eye can only see 10 million of those. So \u003ccode\u003e#000000\u003c/code\u003e translates to black since 0 reds, 0 green, 0 blues represents the absence of all colors, and \u003ccode\u003e#ffffff\u003c/code\u003e makes white since 255 reds, 255 greens, and 255 blues is the maximum of each of the colors.\u003c/p\u003e  \u003cp\u003eHex colors can be shortened to just three numbers when each RGB value is the same for each digit. So \u003ccode\u003e#11dd99\u003c/code\u003e can be written as \u003ccode\u003e#1d9\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eColoring the Rainbow\u003c/h3\u003e  \u003cp\u003eTo get ROYGBIV onto our rainbow we'll need seven hex colors. Red: \u003ccode\u003e#f00\u003c/code\u003e; Orange: \u003ccode\u003e#ffa500\u003c/code\u003e; Yellow: \u003ccode\u003e#ff0\u003c/code\u003e; Green: \u003ccode\u003e#00bc3f\u003c/code\u003e; Blue: \u003ccode\u003e#06f\u003c/code\u003e; Indigo: \u003ccode\u003e#8a2be2\u003c/code\u003e; Violet: \u003ccode\u003e#d300c9\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eAll we have to do next is select each div individually and apply each of those colors. That is a perfect use for ids since they're meant to style one specific element only. We need to add an id for each div so a logical name for each div would be the color that they have to be. It could be something random, but good names make for semantic code. So let's give the outermost div the id red.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"red\"\u0026gt;\u003cbr\u003e  ...\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo give that id some CSS attributes we'll go into \u003ccode\u003emain.css\u003c/code\u003e, select the id, and mark its color as red.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#red { /* this selects any elements with the red id */\u003cbr\u003e  border-top-color: #f00;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo make sure the rainbow isn't so monochromatic you now need to repeat the above steps with the final six colors, and when you do you should have \u003ca href=\"http://i0.kym-cdn.com/photos/images/original/000/118/087/2468904593_6a7c692ab6.jpg\"\u003ea complete, colorful rainbow\u003c/a\u003e.\u003c/p\u003e  \u003ch2\u003eMoving On\u003c/h2\u003e  \u003cp\u003eWhen you're done with this lab type \u003ccode\u003erspec\u003c/code\u003e to confirm you've passed all the tests.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eAfter we reviewed HTML and CSS basics, we moved on to create an HTML rainbow. We linked our style sheet to our HTML page and added ids to our HTML elements. We then created CSS rules, using hexadecimal color values, for those elements to display all the colors on our completed HTML page.\u003c/p\u003e","exportId":"g6489116d7049319518b693eb20865cbd"},{"id":157825,"title":"CSS Kitten Wheelbarrow","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-kitten-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-kitten-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-kitten-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-kitten-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePosition elements absolutely\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eOh no! All of our kittens have escaped from the wheelbarrow and we need to get them back in. Help collect all the kittens and put them into the wheelbarrow using CSS selectors and absolute positioning. \u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003ePosition Elements Absolutely\u003c/h2\u003e  \u003cp\u003eThere are a few different ways we can use CSS to position elements in our web pages. \u003cem\u003eAbsolute\u003c/em\u003e positioning means placing the element in its containing element in a certain location that will stay the same no matter where other elements are placed.\u003c/p\u003e  \u003cp\u003eTo get started with this lab, open index.html in the browser. Use the comments in \u003cstrong\u003ecss/place-kitty.css\u003c/strong\u003e to write the correct selectors to move each kitty into the wheelbarrow.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eSometimes it takes a little bit of time to get used to how absolute positioning works, so don't worry if you have to practice. It will help you create more complex CSS layouts in the future.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning\"\u003eMozilla Developer Network: Positioning\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g071f80bb428586e2a33d59bcd64a1510"},{"id":157827,"title":"CSS Graffiti Override Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-graffiti-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-graffiti-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-graffiti-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-graffiti-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUse the browser developer tools\u003c/li\u003e \u003cli\u003eOverride existing styles\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eImagine that you are walking down the street, and you notice that there's a mural that has been painted over with various graffiti tags. In reality, cleaning this up could be a challenging feat; however, in CSS, you have the power to manipulate the DOM with just a line or two of code and to restore the mural to its original look! In this lab, we've created a virtual wall. Using only CSS, how can you remove the unsightly tags?\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies. Run \u003ccode\u003erspec\u003c/code\u003e as you go to see your test progress.\u003c/p\u003e  \u003ch2\u003eUse the Browser Developer Tools\u003c/h2\u003e  \u003cp\u003eAssuming you have opened the index file in Chrome, open the \u003ca href=\"http://discover-devtools.codeschool.com/\"\u003edev tools\u003c/a\u003e. You can quickly access Chrome dev tools with the keyboard shortcut \u003ccode\u003eCmd+Option+i\u003c/code\u003e on a Mac, or by right/control-clicking anywhere in the window and selecting \u003ccode\u003einspect\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-graffiti-override/inspect1.png\" alt=\"Chrome Dev Tools\" title=\"Open the Chrome dev tools\"\u003e\u003c/p\u003e  \u003cp\u003eInspect the elements of the graffiti wall in the dev tools by hovering over and clicking on nested elements. Take a close look at what's made available to you in the dev tools pane. You can see which style sheets specific style declarations live in, as well as create new styles on the fly. Now, make note of the CSS styles used to add graffiti tags (as background images) to the wall.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-graffiti-override/inspect2.png\" alt=\"Chrome Dev Tools\" title=\"Inspect the styles on each element\"\u003e\u003c/p\u003e  \u003ch2\u003eOverride Existing Styles\u003c/h2\u003e  \u003cp\u003eIn the file \u003ccode\u003ecss/cleanup.css\u003c/code\u003e, write selectors that have more specificity (authority) than those that are showing the graffiti tags. You can test out writing classes in dev tools by clicking the \u003ccode\u003e+\u003c/code\u003e in the top right-hand corner of the pane. You can also click the \u003ccode\u003esources\u003c/code\u003e tab and select \u003ccode\u003ecss/cleanup.css\u003c/code\u003e in the dev tools pane. This allows you to edit the CSS file directly. It \u003cem\u003ewon't\u003c/em\u003e save your edits, but it will give a live update of changes so that it's easier to manipulate the DOM without refreshing the page. From there, you can copy and paste your working changes into the file.\u003c/p\u003e  \u003cp\u003eTo remove the tags, use the CSS declaration \u003ccode\u003edisplay:none;\u003c/code\u003e. It will change the elements' previous display property value from \u003ccode\u003edisplay: block\u003c/code\u003e to \u003ccode\u003edisplay: none\u003c/code\u003e, which will hide that graffiti.\u003c/p\u003e  \u003cp\u003eFor example, for \"tag-1\" the developer tools reveal that the style applying the graffiti here is:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e.tag-1 {\u003cbr\u003e  background: url(../images/tag-1.png) no-repeat;\u003cbr\u003e  z-index: 7;\u003cbr\u003e  display: block;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou'll need to override this by setting its display to \u003ccode\u003edisplay: none;\u003c/code\u003e instead. We can do this by writing a selector statement that is more specific such as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#wall .tag-1 {\u003cbr\u003e  display: none;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis selects elements with a class of \"tag-1\" that happen to also be inside an element with an id of \"wall\". This is more specific, and therefore will override the previous statement and hide the graffiti. For more info on how specificity in CSS works take a look at: \u003ca href=\"http://www.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/\"\u003eSmashing Magazines What You Need to Know About CSS Specificity\u003c/a\u003e.  You can also take advantage of a \u003ca href=\"https://specificity.keegan.st/\"\u003eSpecificity Calculator\u003c/a\u003e to assist with finding and understanding options for overriding styles.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eDo not use the CSS \u003ccode\u003e!important\u003c/code\u003e value\u003c/strong\u003e! It is considered a bad practice and should be used sparingly, in very specific edge-cases. For this lab, avoid adding inline or embedded CSS to the index.html file, or any additional class or id attributes to the index.html file either.  This will make it more challenging as you will have to write CSS that is more specific based on the existing markup.\u003c/p\u003e  \u003ch2\u003eMoving On\u003c/h2\u003e  \u003cp\u003eWhen you're ready to leave this lab, run \u003ccode\u003erspec\u003c/code\u003e from the command line to confirm you've passed all tests.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWith the dev tools and resources on CSS specificity rules, work your way through all seven graffiti pictures until the wall is fully clean. In your experimentation, you will find that there are many ways to manipulate and override the DOM. This will become a common practice as you build out more complex websites or work with cloud-hosted third-party resources where you may not have direct access to the style sheet.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"http://www.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/\"\u003eSmashing Magazine - CSS Specificity\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://css-tricks.com/specifics-on-css-specificity/\"\u003eCSS Tricks - CSS Specificity\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://specificity.keegan.st/\"\u003eSpecificity Calculator\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g353de24d0738dd8613dbec7173788d08"},{"id":243566,"title":"Survey - CSS","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the CSS module?\u003c/p\u003e\n\u003c/div\u003e","exportId":"g5b2bd131064ee51fc71fb436c3ca5b0a"}]},{"id":16911,"name":"Programming as Conversation Part 1: Expressions","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g94bcb608a0c4d74ceecf537852d425da","items":[{"id":157831,"title":"Introduction to Programming as Conversation","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-intro\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-intro/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eWelcome! In this module, we’re going to start learning how to program in JavaScript.\u003c/p\u003e\n\u003cp\u003eIt will be a long process and you will have moments of elation, excitement and, sometimes, frustration. But we \u003cem\u003epromise\u003c/em\u003e you, learning to think in the disciplined way that programming teaches will change your life for the better.\u003c/p\u003e\n\u003ch2\u003eProgramming as Conversation\u003c/h2\u003e\n\u003cp\u003eOur method for teaching programming starts from a different place than you might expect. If you've ever looked at a programming tutorial or book you might be expecting lectures on how to convert decimal numbers to binary numbers, data types, variables, or something like that. We've designed our curriculum to \u003cem\u003enot\u003c/em\u003e do that.\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_50_SadHead.png\" alt=\"Confused by code being front-loaded\"\u003e\n\u003c/p\u003e\n\u003cp\u003eWe think there's a different, and better, way: we start instead by thinking deeply about having \u003cem\u003econversations\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_51_HappyHead.png\" alt=\"Conversations are a natural model for thinking about programming\"\u003e\n\u003c/p\u003e\n\u003cp\u003eMany of the ideas we’ll share in this module ask you to reflect on \"when you learned to talk\" or \"when you’re talking with a friend.\" We call this \"programming as conversation\" and it gets you to think about \u003cem\u003ecommunicating\u003c/em\u003e instead of \"memorizing strange programmer words, facts, and symbols.\" You'll learn those strange words and symbols eventually, of course, but you'll see them as part of the act of communication, something you find natural right now.\u003c/p\u003e\n\u003ch2\u003eProgramming is About Communication\u003c/h2\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_53_TwoHeads_Evaluation.png\" alt=\"Turning Gears in Communication\"\u003e\n\u003c/p\u003e\n\u003cp\u003eAt its heart, programming is about communicating strategies for solving problems. You:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003eDocument these strategies for yourself\u003c/li\u003e\n    \u003cli\u003eCommunicate these documented strategies to others\u003c/li\u003e\n    \u003cli\u003eAnd then, lastly, ask a computer to run these strategies \u003cem\u003every fast\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA \"program\" then is actually a strategy for solving a problem that people use to communicate with one another \u003cem\u003eas well as\u003c/em\u003e give to a machine.\u003c/p\u003e\n\u003cp\u003eA recipe for a fancy dish is a good comparison: you \u003cstrong\u003edocument\u003c/strong\u003e the ingredients and preparation for yourself using human language. You can then \u003cstrong\u003ecommunicate\u003c/strong\u003e that plan for food preparation by sharing the recipe with a friend.\u003c/p\u003e\n\u003ch2\u003ePrograms are Written in Notation\u003c/h2\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_82_GraphicNotationSystems.png\" alt=\"Notation Systems\"\u003e\n\u003c/p\u003e\n\u003cp\u003eEven in recipes, we commonly use special \u003cem\u003enotation\u003c/em\u003e like \u003ccode\u003e3g\u003c/code\u003e for \"3 grams\" or \u003ccode\u003e½C.\u003c/code\u003e for \"½ Imperial Cup.\" In recipes, we usually use \u003cem\u003enotation\u003c/em\u003e to save time so our wrists don't get tired. But with computers, we have to communicate using notation. Human language is often vague and imprecise and computers are \u003cem\u003eterrible\u003c/em\u003e about handling unclear directions. To help prevent communication breakdowns, we converse with them using a special notation. The \"special notation\" is the programming language's rules or \"syntax.\"\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eDEFINITION\u003c/strong\u003e Notation: A specialized vocabulary or system of symbols for communication. \u003cstrong\u003eExamples\u003c/strong\u003e Musical notation, arithmetic symbols, chemistry symbols, traffic signs, or knitting patterns.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eProgramming Defined\u003c/h2\u003e\n\u003cp\u003eLet's propose a definition of programming:\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eDEFINITION\u003c/strong\u003e Programming: The act of creating programs, documents written in a notation system that can be understood by other humans \u003cem\u003eas well as\u003c/em\u003e computers.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eProgramming Language Defined\u003c/h2\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eDEFINITION\u003c/strong\u003e Programming Language: A programming language defines the rules of notation (\"syntax\") that are required for it to ask the computer to do work on your behalf.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWhen programmers say \"I prefer Ruby to JavaScript\" they're saying \"I like the notation system that Ruby uses for expressing problems and their solutions.\" It's a lot like why some people like to play one instrument over another. In your heart you might \u003cem\u003efeel\u003c/em\u003e like a bassoonist, tuba player, or pianist — but all those instruments play a Middle-C note at the same frequency. Programming languages are similar: while their notation varies, they all ask the chips inside the computer to do the same work at the end of the day.\u003c/p\u003e\n\u003cp\u003eAs such, a lot of the \"fashion parade\" of \"what's hot\" in the technical scene is just fashion. The really important thing to learn is: \"What kind of problems or solutions does this language make easier to express?\"\u003c/p\u003e\n\u003ch2\u003eWe Converse With Computers\u003c/h2\u003e\n\u003cp\u003eOne of the most essential ways of communicating, that we've all practiced thousands of times, is a \u003cem\u003econversation\u003c/em\u003e. \"Conversation\" comes from the Latin words meaning \"by taking turns.\" In conversation, we \"take turns\" \u003cem\u003eexpressing\u003c/em\u003e ourselves.\u003c/p\u003e\n\u003cp\u003eA unit of \"ideas\" is an \u003cem\u003eexpression\u003c/em\u003e. When a listener hears an \u003cem\u003eexpression\u003c/em\u003e they interpret the words and symbols and sounds in the \u003cem\u003eexpression\u003c/em\u003e into a \u003cem\u003emeaning\u003c/em\u003e. We call the work they're doing \u003cem\u003eevaluation\u003c/em\u003e. The result of \u003cem\u003eevaluation\u003c/em\u003e for a human is \"understanding.\" Computers show their understanding by returning the result of that evaluation. That value is called a \u003cem\u003ereturn\u003c/em\u003e value.\u003c/p\u003e\n\u003cp\u003eConsider this diagram:\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_52_TwoHeadsConversingSummary.png\" alt=\"Conversational Summary Graphic\"\u003e\n\u003c/p\u003e\n\u003cp\u003eIn the next lessons, we're going to see how JavaScript acts as a \"listener\" in a conversation. When given an \u003cem\u003eexpression\u003c/em\u003e, JavaScript will \u003cem\u003eevaluate\u003c/em\u003e it and, like a good friend, give you a reaction about \u003cem\u003ehow\u003c/em\u003e it evaluated your expression. In the programming world, we call responses from the programming language a \u003cem\u003ereturn value\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eWhen expressions are evaluated, they return something\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSometimes our expressions might not make sense to JavaScript, just like sometimes our conversations with friends don't \u003cem\u003equite\u003c/em\u003e make sense to them.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWork, you stupid machine\u003c/code\u003e is not part of the valid notation of JavaScript. Below, we've embedded a tool that can read JavaScript. To see what happens when JavaScript tries to evaluate the expression, press the play button at the top.\u003c/p\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://repl.it/@MaxwellBenton2/RoyalblueWeakBash?lite=1\" width=\"100%\" height=\"600px\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\" allowfullscreen=\"allowfullscreen\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eHere we've broken the rules of the notation system. This is known as a \u003cem\u003esyntax error\u003c/em\u003e. Computers require us to honor \u003cem\u003etheir\u003c/em\u003e \u003cstrong\u003e\u003cem\u003elimited\u003c/em\u003e\u003c/strong\u003e vocabulary. Syntax errors are prompts from the programming language to help steer \u003cem\u003eour\u003c/em\u003e communication to be more precise.\u003c/p\u003e\n\u003cp\u003eWhen we follow the rules and adhere to the syntax, JavaScript will return something to us:\u003c/p\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://repl.it/@MaxwellBenton2/pac-0-1?lite=1\" width=\"100%\" height=\"600px\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\" allowfullscreen=\"allowfullscreen\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eSometimes, we might get something unexpected:\u003c/p\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://repl.it/@MaxwellBenton2/PuzzlingTrustworthyCgi?lite=1\" width=\"100%\" height=\"600px\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\" allowfullscreen=\"allowfullscreen\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eBut we'll get \u003cem\u003esomething\u003c/em\u003e in return.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eCongratulations! You've finished your first lesson in thinking about programming as a conversation. As you might guess, \u003cem\u003eexpressions\u003c/em\u003e are important because they're how we \"push\" ideas to computers and other programmers. We're going to spend the remainder of this module learning to build expressions and understanding how JavaScript will \u003cem\u003eevaluate\u003c/em\u003e them. Make sure you've integrated the vocabulary words of \"expression,\" \"evaluation,\" and \"return value\" before moving on.\u003c/p\u003e","exportId":"introduction-to-programming-as-conversation"},{"id":157833,"title":"Expressions in JavaScript","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-expressions-in-js\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-expressions-in-js\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-expressions-in-js/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine \"Expression\"\u003c/li\u003e \u003cli\u003eDefine \"Evaluation\"\u003c/li\u003e \u003cli\u003eExpression and Evaluation with JavaScript\u003c/li\u003e \u003cli\u003eIdentify the Parts of an Expression\u003c/li\u003e \u003cli\u003eIdentify Core Operators in JavaScript\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003ePreviously, we saw a tool that allowed us to have a conversation with JavaScript. This tool is known as a REPL, short for \u003ca href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\"\u003eRead Evaluate Print Loop\u003c/a\u003e. Code written in the top box will be read and evaluated. The response, whatever is returned, will appear in the bottom box. For example, below we have a REPL with a math equation, \u003ccode\u003e10 + 10\u003c/code\u003e, prewritten inside. If you click the button with the play symbol \u003ccode\u003e▶\u003c/code\u003e above the equation, you should see \u003ccode\u003e20\u003c/code\u003e appear in the bottom box.\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@MaxwellBenton2/BumpySereneMicroinstruction?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e We encourage you to experiment with this and other code examples provided in the REPL. In order to do so, you will need to click \"open in repl.it\" in the upper right corner of the REPL window, which will open it in a new browser tab. You will also need to create a free account. Once you've done that, you will be able to fork the REPL to your account and make changes to try things out.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eConversations, we've seen, are the things that result when two individuals — be they human or machine — communicate \u003cem\u003eexpressions\u003c/em\u003e to one another.\u003c/p\u003e  \u003cp\u003eWe've been imprecise in defining \"expression\" while we were getting the hang of it. Let's propose formal definitions for \u003cem\u003eexpression\u003c/em\u003e and \u003cem\u003eevaluation\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eDefine \"Expression\"\u003c/h2\u003e  \u003cp\u003eAn expression in a programming language is like a sentence in a spoken language.\u003c/p\u003e  \u003cp\u003eSome sentences are simple: \"He wept.\" Some sentences are complex: \"I sing of weapons and a man, an outcast of Troy who was driven to the shores of Italy...\"\u003c/p\u003e  \u003cp\u003eSome expressions are simple: \u003ccode\u003e2\u003c/code\u003e. Some expressions are complex \u003ccode\u003e1 + 2\u003c/code\u003e. Some expressions are \u003cem\u003ereally\u003c/em\u003e complex: \u003ccode\u003e10 + (3 * ( (-1) ** 3) + 2) / 18\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eDefinition\u003c/strong\u003e: Expression: A combination of information, called \u003cem\u003edata\u003c/em\u003e, and \u003cem\u003esymbols\u003c/em\u003e indicating how to combine \u003cem\u003edata\u003c/em\u003e, called \u003cem\u003eoperators\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eDefine \"Evaluation\"\u003c/h2\u003e  \u003cp\u003e\u003cem\u003eEvaluation\u003c/em\u003e is the process of interpreting an expression, according to rules, to produce a return value.\u003c/p\u003e  \u003ch2\u003eExpression and Evaluation with JavaScript\u003c/h2\u003e  \u003cp\u003eThese definitions should align with your experience of having a conversation with REPLs so far. Think about \u003ccode\u003e255 / 5\u003c/code\u003e.  Which parts of the expression are \u003cem\u003edata\u003c/em\u003e? Which parts are \u003cem\u003eoperators\u003c/em\u003e?\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cem\u003ePRO-TIP\u003c/em\u003e: Think it through yourself. Which is a given thing (\u003cem\u003edata\u003c/em\u003e) and which parts tell you how to combine things (\u003cem\u003eoperators\u003c/em\u003e)?  When reading technical documents you can't simply read the answers, you \u003cstrong\u003e\u003cem\u003ehave to think along\u003c/em\u003e\u003c/strong\u003e in order to learn. Active participation tells your brain that this stuff is important!\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eIdentify the Parts of an Expression\u003c/h2\u003e  \u003cp\u003eThe \u003cem\u003edata\u003c/em\u003e are: \u003ccode\u003e255\u003c/code\u003e and \u003ccode\u003e5\u003c/code\u003e The \u003cem\u003eoperator\u003c/em\u003e: is \u003ccode\u003e/\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eIn this example, there is only one operator. It's certainly possible for expressions to have multiple operators like \u003ccode\u003e100 + 10 - 3\u003c/code\u003e. In this example, the \u003cem\u003eoperators\u003c/em\u003e are \u003ccode\u003e+\u003c/code\u003e and \u003ccode\u003e-\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eIdentify Core Operators in JavaScript\u003c/h2\u003e  \u003cp\u003eHere's a table of other operators and their operations. While some of the symbols used are different from their mathematical counterparts, the operations work in the familiar way.\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\n\u003ctr\u003e     \u003cth\u003eOperator\u003c/th\u003e     \u003cth\u003eOperation\u003c/th\u003e     \u003cth\u003eNote\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e+\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eAddition\u003c/td\u003e     \u003ctd\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eSubtraction\u003c/td\u003e     \u003ctd\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eMultiplication\u003c/td\u003e     \u003ctd\u003eWe use \u003ccode\u003e*\u003c/code\u003e instead of \u003ccode\u003e×\u003c/code\u003e because it looks like \u003ccode\u003ex\u003c/code\u003e-the-letter\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e/\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eDivision\u003c/td\u003e     \u003ctd\u003eWe use \u003ccode\u003e/\u003c/code\u003e instead of \u003ccode\u003e÷\u003c/code\u003e because that's not on a keyboard\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e**\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eExponentiation\u003c/td\u003e     \u003ctd\u003eWe use \u003ccode\u003e**\u003c/code\u003e instead of \u003ccode\u003e^\u003c/code\u003e because \u003ccode\u003e^\u003c/code\u003e means something else in programming languages\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e()\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eAssociation\u003c/td\u003e     \u003ctd\u003eExpressions inside of \u003ccode\u003e()\u003c/code\u003e get evaluated earlier\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn the next few lessons, we're going to introduce the \u003cstrong\u003eEssential Three Expressions\u003c/strong\u003e:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/expressions-in-javascript/essential-3-expressions.jpg\" alt=\"Three Essential Expression\"\u003e\u003c/p\u003e  \u003col\u003e \u003cli\u003eThe constant expression\u003c/li\u003e \u003cli\u003eThe assignment expression (variable assignment)\u003c/li\u003e \u003cli\u003eThe variable lookup expression\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eAll expressions, which are the core of every programming language, are built on these Essential Three Expressions.\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions\"\u003eExpressions\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\"\u003eRead-evaluate-print loop\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"expressions-in-javascript"},{"id":157835,"title":"The Constant Expression","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-the-constant-expression\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-constant-expression\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-constant-expression/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify the \u003cem\u003econstant expression\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eExplain how the \u003cem\u003econstant expression\u003c/em\u003e stops evaluation\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eLets repeat our definition of \u003cem\u003eexpression\u003c/em\u003e\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eDefinition\u003c/strong\u003e: Expression: A combination of information, called \u003cem\u003edata\u003c/em\u003e, and \u003cem\u003esymbols\u003c/em\u003e indicating how to combine \u003cem\u003edata\u003c/em\u003e, called \u003cem\u003eoperators\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eWhat if we were to make an expression that had no \u003cem\u003eoperators\u003c/em\u003e? What if it only had \u003cem\u003edata\u003c/em\u003e. For example, what if we just pass \u003ccode\u003e9000\u003c/code\u003e into a REPL:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@MaxwellBenton2/FlatPrimaryLanservers?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eIn response, we get \u003ccode\u003e9000\u003c/code\u003e. This type of expression is known as the \u003cem\u003econstant expression\u003c/em\u003e and it's very important, although very boring.\u003c/p\u003e  \u003cp\u003eIt's boring because it doesn't \u003cem\u003edo\u003c/em\u003e anything except be itself. But it's important because it confirms that JavaScript knows when to stop applying operations. It tells JavaScript to \u003cem\u003estop\u003c/em\u003e, you have an answer.\u003c/p\u003e  \u003ch3\u003eExplain How the \u003cem\u003eConstant Expression\u003c/em\u003e Stops Evaluation\u003c/h3\u003e  \u003cp\u003eLet's consider a simple arithmetic expression. Keep in mind we apply operators in \"\u003ca href=\"https://en.wikipedia.org/wiki/Order_of_operations\"\u003ePEMDAS\u003c/a\u003e\" order: parenthesis, exponents, multiplication, division, addition, subtraction.\u003c/p\u003e  \u003cp\u003eWe'll start with the expression:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step0.png\" alt=\"Math Expression: Step 0\"\u003e\u003c/p\u003e  \u003cp\u003eJavaScript's mission is to find a constant piece of data or a \u003cem\u003econstant expression\u003c/em\u003e. Because of \u003ccode\u003e()\u003c/code\u003e, it goes there first. The \u003ccode\u003e(10 - 4)\u003c/code\u003e is clearly \u003cstrong\u003enot\u003c/strong\u003e a constant expression because of the \u003ccode\u003e-\u003c/code\u003e operator's presence. JavaScript makes a \"tree\" of the two sides of the operator (\u003ccode\u003e-\u003c/code\u003e) and then looks on each side to see whether those sides are \u003cem\u003econstant expressions\u003c/em\u003e i.e. \"plain old data.\"\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step1.5.png\" alt=\"Math Expression: Step 1\"\u003e\u003c/p\u003e  \u003cp\u003eSince both \u003ccode\u003e4\u003c/code\u003e and \u003ccode\u003e10\u003c/code\u003e are plain old data, it can apply \u003ccode\u003e-\u003c/code\u003e to them and produce \u003ccode\u003e6\u003c/code\u003e — a \u003cem\u003econstant expression\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eSo what JavaScript now sees looks like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step4.png\" alt=\"Math Expression: Step 2\"\u003e\u003c/p\u003e  \u003cp\u003eHere again, JavaScript checks both sides of the operator \u003ccode\u003e*\u003c/code\u003e and, because both sides are now \u003cem\u003econstant expressions\u003c/em\u003e, applies the \u003ccode\u003e*\u003c/code\u003e to \u003ccode\u003e3\u003c/code\u003e and \u003ccode\u003e6\u003c/code\u003e and creates a new \u003cem\u003econstant expression\u003c/em\u003e, the answer (or \"return value\"):\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step5.png\" alt=\"Math Expression: Step 3\"\u003e\u003c/p\u003e  \u003cp\u003eWhew! Fortunately, JavaScript does \u003cem\u003eall this work\u003c/em\u003e of building a tree of operators and returning a value very quickly!\u003c/p\u003e  \u003cp\u003eThe \u003cem\u003econstant expression\u003c/em\u003e is \u003cem\u003ealways\u003c/em\u003e the last expression in a complex expression. It's how JavaScript knows it has \u003cem\u003edata\u003c/em\u003e that it can work with and that no other operations need to be applied.\u003c/p\u003e  \u003ch2\u003eTable Explanation\u003c/h2\u003e  \u003cp\u003eAnother way of looking at this process might be to look at a table. We'll repeat all the same things we just showed graphically, but if a table makes more sense for you, then you'll like this one better!\u003c/p\u003e  \u003cp\u003eThis is an important strategy when learning to program: if you like thinking in code, try out the code; if you prefer diagrams, draw a diagram; if tables make more sense to you, build a table. An important part of learning to be a technologist is learning to build the tools that will help you learn.\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\u003ctr\u003e     \u003cth\u003eExpression\u003c/th\u003e     \u003cth\u003eHas Operators?\u003c/th\u003e     \u003cth\u003eOperators\u003c/th\u003e     \u003cth\u003eAre we done?\u003c/th\u003e     \u003cth\u003eNext Step\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e3*(10-4)\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003e\n\u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e()\u003c/code\u003e\n\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eZoom in on new sub-expression in \u003ccode\u003e()\u003c/code\u003e because of [PEMDAS][]\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e(10-4)\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eEvaluate sub-expressions\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e10\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eNONE\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003eZoom in on expression \u003ccode\u003e10\u003c/code\u003e. Constant expression! Return the value of the constant, we're done!\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e4\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eNONE\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003eZoom in on expression \u003ccode\u003e4\u003c/code\u003e. Constant expression! Return the value of the constant, we're done!\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e(10-4)\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eReplace \u003ccode\u003e( 10 - 4 )\u003c/code\u003e with application of \u003ccode\u003e-\u003c/code\u003e to \u003ccode\u003e10\u003c/code\u003e and \u003ccode\u003e4\u003c/code\u003e making \u003ccode\u003e6\u003c/code\u003e\n\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e3*6\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eZoom out and replace the sub-expression with its value we just determined\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eNONE\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003eZoom in on expression \u003ccode\u003e3\u003c/code\u003e. Constant expression! Return the value of the constant, we're done!\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e6\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eNONE\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003eZoom in on expression \u003ccode\u003e6\u003c/code\u003e. Constant expression! Return the value of the constant, we're done!\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e3*6\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eApply \u003ccode\u003e*\u003c/code\u003e to \u003ccode\u003e3\u003c/code\u003e and \u003ccode\u003e6\u003c/code\u003e making \u003ccode\u003e18\u003c/code\u003e\n\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e18\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eNONE\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003eConstant expression! Return the value of the constant, we're done!\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWhile the \u003cem\u003econstant expression\u003c/em\u003e might seem dull, it lets us (and JavaScript) know when expression evaluation is done \u003cem\u003eand\u003c/em\u003e establishes a groundwork for all the following expressions. The first rule of Aristotle's logic is \u003ccode\u003eA is A\u003c/code\u003e; the constant expression provides a similar \"foundation\" for programming.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.mathsisfun.com/operation-order-pemdas.html\"\u003eOrder of Operations: PEMDAS\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"the-constant-expression"},{"id":157836,"title":"The Assignment Expression","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-the-assignment-expression\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-assignment-expression\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-assignment-expression/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine the \u003cem\u003eAssignment Expression\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eDefine Mutability / Immutability\u003c/li\u003e \u003cli\u003eLearn what the Return Value of an \u003cem\u003eAssignment Expression\u003c/em\u003e is\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eSo you've seen the first of our \u003cstrong\u003eessential three expressions\u003c/strong\u003e, the \u003cem\u003econstant expression\u003c/em\u003e, which gives JavaScript some constant facts about the world: \u003ccode\u003e2\u003c/code\u003e is \u003ccode\u003e2\u003c/code\u003e, \u003ccode\u003e3\u003c/code\u003e is \u003ccode\u003e3\u003c/code\u003e, etc...\u003c/p\u003e  \u003cp\u003eIt's really useful to associate an \u003cem\u003eexpression's evaluated result\u003c/em\u003e with a 'name'. We call those names that we associate with the \u003cem\u003eexpression's\u003c/em\u003e result, \u003cem\u003evariable names\u003c/em\u003e or, commonly, just \u003cem\u003evariables\u003c/em\u003e. The process of bonding an expression to a variable is called \u003cem\u003eassigning a variable\u003c/em\u003e. Programmers also say that \"the variable name 'points to' the expression that was assigned to it.\"\u003c/p\u003e  \u003cp\u003eA helpful metaphor here is that it's like adding a new entry to a dictionary: \u003ccode\u003eaFunNumber\u003c/code\u003e's definition is \u003ccode\u003e3 * (10 - 4)\u003c/code\u003e or \u003ccode\u003emyBirthYear\u003c/code\u003e's is \u003ccode\u003e1989\u003c/code\u003e. Or you can think about a variable name as a label you put on a box. Using this metaphor, the box labeled \u003ccode\u003eaFunNumber\u003c/code\u003e contains the value \u003ccode\u003e3 * (10 - 4)\u003c/code\u003e, and the box labeled \u003ccode\u003emyBirthYear\u003c/code\u003e contains the value \u003ccode\u003e1989\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe create the association between a variable name and a value by using the second of our \u003cstrong\u003eessential three expressions\u003c/strong\u003e: the \u003cem\u003eassignment expression\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eDefine the \u003cem\u003eAssignment Expression\u003c/em\u003e\n\u003c/h2\u003e  \u003cp\u003eIn JavaScript, the assignment expression is like so:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-assignment-expression/assigning-a-variable.jpg\" alt=\"Assignment Expression Graphic\"\u003e\u003c/p\u003e  \u003cp\u003eHere are some examples:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaFunNumber = 3 * (10 - 4)\u003cbr\u003emyBirthYear = 1989 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eVariable names are most often descriptions of what their assigned expressions \u003cem\u003emean\u003c/em\u003e. In JavaScript, when a variable name is made of multiple words, every word after the first is capitalized. This is referred to as \u003cem\u003ecamelCase\u003c/em\u003e and although it isn't strictly required, it is a common convention in JavaScript. \u003c/p\u003e  \u003cp\u003eWhile you \u003cem\u003ecan include\u003c/em\u003e numbers and some symbols in variable names, let's keep things simple for the moment and just use camelCased letters.\u003c/p\u003e  \u003cp\u003eConsider the following expression:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emaximumSpeed \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRun this alone in a REPL, and we get an error\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eReferenceError: maximumSpeed is not defined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003efollowed by many lines starting with \u003ccode\u003eat...\u003c/code\u003e. Here, JavaScript, by default, doesn't know anything about \u003ccode\u003emaximumSpeed\u003c/code\u003e.\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@MaxwellBenton2/OrderlyDeadParticle?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eWhen we define a variable using the \"assignment expression\" we add something new to JavaScript.\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@MaxwellBenton2/OutgoingAlienatedMacrolanguage?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eNotice that \u003ccode\u003emaximumSpeed = 9000\u003c/code\u003e, the assignment expression, evaluates to \u003ccode\u003e9000\u003c/code\u003e when run. Once \u003ccode\u003emaximumSpeed\u003c/code\u003e is defined, JavaScript will know what it is. (We'll look at this more closely in the next lesson.)\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003e\u003cem\u003eSUPER-IMPORTANT\u003c/em\u003e\u003c/strong\u003e: In the assignment expression \u003ccode\u003e=\u003c/code\u003e means \"assignment\". It does not mean \"what's on the left of the \u003ccode\u003e=\u003c/code\u003e is equal to what's on the right.\" In math courses, we use \u003ccode\u003e=\u003c/code\u003e to say that the expressions on either side of the \u003ccode\u003e=\u003c/code\u003e are the same. JavaScript uses \u003ccode\u003e==\u003c/code\u003e and \u003ccode\u003e===\u003c/code\u003e for that purpose. It's very common — and very confusing — for beginners to have bugs where they confuse \u003ccode\u003e=\u003c/code\u003e for \u003ccode\u003e==\u003c/code\u003e or \u003ccode\u003e===\u003c/code\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eDefine Mutability / Immutability\u003c/h2\u003e  \u003cp\u003eA variable is said to be \"mutable.\" That means the value that the name \"points to\" can be changed during the running of the program. Being able to change the value a variable points to is very important. For example, if we need to do something 10 times, we need a variable to keep track of how many times the thing happens. That variable will need to change: its value will need to increase by 1 each time. Here's \"mutability\" in action:\u003c/p\u003e  \u003cp\u003eMany years ago my height in centimeters was:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eheightInCentimeters = 50 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut today it is:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eheightInCentimeters = 180 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can try these out in REPL:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@MaxwellBenton2/TrueShortMaintenance?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eSometimes, we might want to make a variable's value permanent. We might want to say \"hey, this value should not change.\" We want to say that the value is \u003cem\u003eimmutable\u003c/em\u003e, the opposite of \u003cem\u003emutable\u003c/em\u003e. We do this by writing a \u003cstrong\u003econstant\u003c/strong\u003e (not the same as the constant expression we discussed previously). We'll go into more detail on constants in the next part of this course.\u003c/p\u003e  \u003ch2\u003eReturn Value of an \u003cem\u003eAssignment Expression\u003c/em\u003e\n\u003c/h2\u003e  \u003cp\u003eThe return value of an \u003cem\u003eassignment expression\u003c/em\u003e is the evaluated result of the expression to the right of the \u003ccode\u003e=\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erecurringExpressionValue = 3 * (10 - 4)\u003cbr\u003e=\u0026gt; 18 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePay attention here: the return value of the assignment expression \u003cstrong\u003e\u003cem\u003eIS NOT THE SAME THING\u003c/em\u003e\u003c/strong\u003e as getting the value out of the variable name. We'll learn to get the value \"back out of a variable\" in the next lesson. What JavaScript is saying is that the assignment expression's return value is the value of the expression to the right of the \u003ccode\u003e=\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThink about a baby who has never spoken before. Before it stands a parent saying their name over and over (...and over) again.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-assignment-expression/Image_55_Mama-Baby_1.png\" alt=\"Learning to talk 1\"\u003e\u003c/p\u003e  \u003cp\u003eThey wave towards their bodies and say their names again and again. What the parent is trying to do is teach the baby to assign their face to the variable name \"Mama\" or \"Dada.\" But to the baby, this means nothing.\u003c/p\u003e  \u003cp\u003eWhile neither the baby or the (average) adult is aware of it, they're trying to teach the baby the second of the \u003cem\u003ethree essential expressions\u003c/em\u003e: the assignment expression. Then, one magical day, it clicks for the baby. It performs an assignment in its precious little head:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-assignment-expression/Image_55_Mama-Baby_2.png\" alt=\"Learning to talk 2\"\u003e\u003c/p\u003e  \u003cp\u003eUnfortunately, Mom is still sad; she doesn't have any \u003cem\u003eproof\u003c/em\u003e that the assignment was successful. For that to work, the baby will need to prove that it can \"look up\" the variable assignment of who \"ma-ma\" points to. The baby will need to learn the last of our \u003cem\u003eessential expressions\u003c/em\u003e: the variable lookup expression!\u003c/p\u003e","exportId":"the-assignment-expression"},{"id":157837,"title":"The Variable Lookup Expression","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-the-variable-lookup-expression\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-variable-lookup-expression\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-variable-lookup-expression/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine the Variable Lookup Expression\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThe final of our \u003cem\u003eessential three\u003c/em\u003e expressions is the variable lookup expression. Like the \u003cem\u003econstant expression\u003c/em\u003e, it is boring yet profound. Once we've assigned a value to a \u003cem\u003evariable name\u003c/em\u003e using the \u003cem\u003eassignment expression\u003c/em\u003e, we can use the \u003cem\u003evariable lookup expression\u003c/em\u003e to retrieve that value. Using our metaphors from the previous lesson, it looks up the variable's definition in the dictionary, or \"shakes out\" the value that was put in the labeled box.\u003c/p\u003e  \u003ch2\u003eDefine the Variable Lookup Expression\u003c/h2\u003e  \u003cp\u003eTo look up the value in a variable we simply type the variable's name in.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// Assignment expression that returns 32\u003cbr\u003eage = 32\u003cbr\u003e\u003cbr\u003e// Type in the assigned name\u003cbr\u003eage \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn return, we get \u003ccode\u003e32\u003c/code\u003e.\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@MaxwellBenton2/TraumaticQuixoticDriver?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eThat’s it. The values we associate with the assignment expression can be retrieved by simply typing the variable's name.\u003c/p\u003e  \u003ch2\u003eVariable Lookup as Conversation\u003c/h2\u003e  \u003cp\u003eIn the previous lesson, we talked about a parent and a baby. A parent repeats their name hundreds of times to get the baby to assign their face to the variable \u003ccode\u003ema-ma\u003c/code\u003e. When the baby first sees that face again and says \"\u003ccode\u003ema-ma\u003c/code\u003e!\" the parent has successfully taught the child \"variable lookup.\" Although there are no pages in baby journals for \"Baby's First Variable Lookup.\"\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-variable-lookup-expression/Image_55_Mama-Baby_4.png\" alt=\"Successful Lookup\"\u003e\u003c/p\u003e  \u003cp\u003eIf you think about it, most of childhood education until early elementary school is giving them thousands of assignment expressions so they can participate in the world: \"Red,\" \"one,\" \"eleven,\" \"far.\"\u003c/p\u003e  \u003cp\u003eConsider this scenario. Look for the \u003cem\u003eessential three\u003c/em\u003e expressions in here.\u003c/p\u003e  \u003cp\u003eParent: See the doggie? That’s a doggie.\u003cbr\u003e Child: Doggie?\u003cbr\u003e Parent: That’s right, that’s a doggie. Doggies say \"Woof-woof!\"\u003cbr\u003e Child: Doggie?\u003cbr\u003e Parent: Right. Doggie.  \u003c/p\u003e  \u003cp\u003e\u003cem\u003eSome time later\u003c/em\u003e\u003c/p\u003e  \u003cp\u003eChild: Doggie!\u003cbr\u003e Parent: That’s right. Doggie!  \u003c/p\u003e  \u003cp\u003eLet’s compare teaching a baby a four-legged animal's name and teaching JavaScript that \u003ccode\u003ea\u003c/code\u003e is \u003ccode\u003e4\u003c/code\u003e.\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\u003ctr\u003e     \u003cth\u003eExpression\u003c/th\u003e     \u003cth\u003eReal-Life Conversation\u003c/th\u003e     \u003cth\u003eJavaScript Conversation\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003eConstant Expression\u003c/td\u003e     \u003ctd\u003eParent points to the doggie\u003c/td\u003e     \u003ctd\u003e\n\u003ccode\u003e4\u003c/code\u003e (evaluates to \u003ccode\u003e4\u003c/code\u003e)\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eAssignment Expression\u003c/td\u003e     \u003ctd\u003eParent teaches child that \"Doggie\" = \u003cimg alt=\"Puppy picture\" src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-variable-lookup-expression/small_puppy.JPG\"\u003e\n\u003c/td\u003e     \u003ctd\u003e\n\u003ccode\u003ea = 4\u003c/code\u003e (evaluates to \u003ccode\u003e4\u003c/code\u003e)\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eVariable Lookup\u003c/td\u003e     \u003ctd\u003eChild sees the dog and says \"Doggie!\"\u003c/td\u003e     \u003ctd\u003e\n\u003ccode\u003ea\u003c/code\u003e (evaluates to \u003ccode\u003e4\u003c/code\u003e)\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eNow that the \u003cem\u003eessential three\u003c/em\u003e expressions are under your control, we're going to start rapidly building up the richness of things you can do using expressions. Whole programming languages are built around executing through evaluating expressions! Languages that work this way are called \"functional languages\" and they are some of the first programming languages ever created.\u003c/p\u003e","exportId":"the-variable-lookup-expression"},{"id":157838,"title":"JavaScript Variables","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-js-variables\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-variables\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-variables/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine what a variable is\u003c/li\u003e \u003cli\u003eVariable names in JavaScript\u003c/li\u003e \u003cli\u003eInitializing variables in JavaScript\u003c/li\u003e \u003cli\u003eRetrieving and changing the value of variables\u003c/li\u003e \u003cli\u003eIdentify when to use \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e for declaring variables\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn an earlier lesson, we talked about using the \u003cem\u003eassignment expression\u003c/em\u003e to save information into a variable. \"Saving\" to a variable allows us to \u003cem\u003estore\u003c/em\u003e a result so we can use it again later. Storing calculations to \u003cem\u003etemporary storage places\u003c/em\u003e is the heart of making efficient programs. It's a simple idea that has powerful consequences.\u003c/p\u003e  \u003ch2\u003eWhat is a Variable?\u003c/h2\u003e  \u003cp\u003eA variable is a container in which we can store values for later retrieval.\u003c/p\u003e  \u003cp\u003eImagine a box that can hold any type of data: a number, a string, etc. We take some data that we want to store, place it inside the box, and hand the box off to the JavaScript engine, which stores it in memory. All done! Our data is safely cached until we need to access it again.\u003c/p\u003e  \u003cp\u003eBut wait! When we ask for the data back, how will the JavaScript engine know \u003cem\u003ewhich\u003c/em\u003e box to retrieve? We need to assign a name to our variable —\u0026nbsp;a label for our box — so that we can use the \u003cem\u003evariable lookup expression\u003c/em\u003e to tell the engine exactly which piece of stored data we want to access.\u003c/p\u003e  \u003ch2\u003eVariable Names in JavaScript\u003c/h2\u003e  \u003cp\u003eVariable names in JavaScript can sometimes be complicated, but if you follow these three rules you'll be fine:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eStart every variable name with a lowercase letter. Variable names starting with a number are not valid.\u003c/li\u003e \u003cli\u003eDon't use spaces. If a variable name consists of multiple words, \u003ccode\u003ecamelCaseYourVariableNames\u003c/code\u003e (see the camel humps?) instead of \u003ccode\u003esnake_casing_them\u003c/code\u003e (think of the underscore as a snake that swallowed the words).\u003c/li\u003e \u003cli\u003eDon't use JavaScript \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Reserved_keywords_as_of_ECMAScript_2015\"\u003ereserved words\u003c/a\u003e or \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Future_reserved_keywords\"\u003efuture reserved words\u003c/a\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIt's important to note that case matters, so \u003ccode\u003ejavaScript\u003c/code\u003e, \u003ccode\u003ejavascript\u003c/code\u003e, \u003ccode\u003eJavaScript\u003c/code\u003e, and \u003ccode\u003eJAVASCRIPT\u003c/code\u003e are four different variables.\u003c/p\u003e  \u003ch2\u003eInitializing Variables in JavaScript\u003c/h2\u003e  \u003cp\u003eInitializing variables in JavaScript is really a two-step process: first, we \u003cem\u003edeclare\u003c/em\u003e the variable, then we \u003cem\u003eassign a value\u003c/em\u003e to it.\u003c/p\u003e  \u003cp\u003eTo declare the variable, we use either the \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e reserved word. (And, in fact, there's a third option as well: \u003ccode\u003evar\u003c/code\u003e. We'll talk about when to use each a bit later in this lesson. For now, just know that when you see \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, or \u003ccode\u003evar\u003c/code\u003e, those are reserved words that are used to declare a variable.)\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe JavaScript engine sets aside a chunk of memory to store the declared variable. Then, we assign a value to that variable using the \u003cem\u003eassignment expression\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epi = 3.14159;\u003cbr\u003e//=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can make our code a bit more efficient by packaging both initialization steps —\u0026nbsp;declaration and assignment —\u0026nbsp;in a single line of code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou will encounter cases later on where it makes sense to declare a variable without immediately assigning a value to it, but combining the two steps will work most of the time.\u003c/p\u003e  \u003ch3\u003eInitializing Multiple Variables\u003c/h3\u003e  \u003cp\u003eLet's say I needed to declare and define multiple variables. It feels like a lot to have to repeat \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e over and over again. To alleviate this pain, JavaScript allows us to initialize multiple variables in a single line of code. The variables must be separated with commas, and the entire line must end with a semicolon.\u003c/p\u003e  \u003cp\u003eLet's condense the below code into one line:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst a = 5;\u003cbr\u003econst b = 2;\u003cbr\u003econst c = 3;\u003cbr\u003econst d = \"Hello\";\u003cbr\u003econst e = \"World\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe above is equivalent to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst a = 5,\u003cbr\u003e      b = 2,\u003cbr\u003e      c = 3,\u003cbr\u003e      d = \"Hello\",\u003cbr\u003e      e = \"World\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ewhich can be converted to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst a = 5, b = 2, c = 3, d = \"Hello\", e = \"World\"; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eRetrieving and Changing the Value of Variables\u003c/h2\u003e  \u003cp\u003eSay we've declared a variable \u003ccode\u003epi\u003c/code\u003e and set its value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo retrieve the value of \u003ccode\u003epi\u003c/code\u003e, we use the \u003cem\u003evariable lookup expression\u003c/em\u003e, i.e., we simply type in its name:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epi;\u003cbr\u003e//=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we want to change (reassign) that value, we use the \u003cem\u003eassignment expression\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epi;\u003cbr\u003e//=\u0026gt; 3.14159\u003cbr\u003epi = 3.14;\u003cbr\u003epi;\u003cbr\u003e//=\u0026gt; 3.14; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eIdentify When to Use \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e for Declaring Variables\u003c/h2\u003e  \u003cp\u003eIn the past, \u003ccode\u003evar\u003c/code\u003e was the only option available in JavaScript for declaring variables. Then, in 2015, the language underwent a major revision that, among many other changes, added two new options: \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Delving into the history of JavaScript and the many changes and improvements that were made to it in 2015 is outside the scope of this lesson. However, as you're learning to code in JavaScript you may see references to \u003ccode\u003eECMAScript 2015\u003c/code\u003e, \u003ccode\u003eES2015\u003c/code\u003e, or \u003ccode\u003eES6\u003c/code\u003e. These terms are interchangeable and refer to that major revision. (ECMAScript is the \"offical\" name of JavaScript.) There are some resources listed at the end of this lesson if you're interested in learning more about \u003ccode\u003eES2015\u003c/code\u003e and the history of JavaScript.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eThe addition of \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e was in response to significant problems that the use of \u003ccode\u003evar\u003c/code\u003e can cause. In particular, it can create scope issues (which is a whole other topic that you'll learn about later) that lead to unpredictable and difficult to diagnose bugs in your code. You will likely see \u003ccode\u003evar\u003c/code\u003e used a lot in legacy code and older StackOverflow posts, so it's important to be familiar with it. \u003cstrong\u003e\u003cem\u003eHowever, there is no good reason to use \u003ccode\u003evar\u003c/code\u003e to declare variables in your own code, and good reasons not to\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003elet\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe main advantage of using \u003ccode\u003elet\u003c/code\u003e for declaring a variable is that, unlike \u003ccode\u003evar\u003c/code\u003e, it will throw an error if you try to declare the same variable a second time:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003elet pi = \"the ratio between a circle's circumference and diameter\";\u003cbr\u003e//=\u0026gt; Uncaught SyntaxError: Identifier 'pi' has already been declared \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhy is this a good thing? Well, you can imagine how easy it could be, especially in a lengthy program, to accidentally reuse a variable name. Doing so can cause unpredictable behavior because the value associated with the variable in one part of the program may be changed by code in a different part of the program. These types of problems can be very difficult to track down and debug. Using \u003ccode\u003elet\u003c/code\u003e to declare your variables will reduce the likelihood of introducing such errors into your code.\u003c/p\u003e  \u003cp\u003eWhile we can't \u003cem\u003eredeclare\u003c/em\u003e a variable that is declared using \u003ccode\u003elet\u003c/code\u003e, we can still \u003cem\u003ereassign\u003c/em\u003e its value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003epi = \"the ratio between a circle's circumference and diameter\";\u003cbr\u003e//=\u0026gt; \"the ratio between a circle's circumference and diameter\"\u003cbr\u003e\u003cbr\u003epi;\u003cbr\u003e//=\u0026gt; \"the ratio between a circle's circumference and diameter\" \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003e\u003ccode\u003econst\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003econst\u003c/code\u003e reserved word should be your go-to option for declaring variables in JavaScript. When you declare a variable with \u003ccode\u003econst\u003c/code\u003e, not only can it not be redeclared but it also \u003cstrong\u003e\u003cem\u003ecannot be reassigned\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003epi = 2.71828;\u003cbr\u003e//=\u0026gt; Uncaught TypeError: Assignment to constant variable. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen you (or another developer) sees that \u003ccode\u003epi\u003c/code\u003e has been declared with \u003ccode\u003econst\u003c/code\u003e, you immediately know that the variable points to the same value every other time it's referenced in the program. For variables declared with \u003ccode\u003elet\u003c/code\u003e (or \u003ccode\u003evar\u003c/code\u003e), you cannot be so sure and will have to keep track of how those variables change throughout the program. The extra information provided by \u003ccode\u003econst\u003c/code\u003e is valuable, and it comes at no extra cost to you! Just use \u003ccode\u003econst\u003c/code\u003e whenever possible and reap the benefits.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: With \u003ccode\u003elet\u003c/code\u003e, it's possible to declare a variable without assigning a value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003epi = 3.14159;\u003cbr\u003e//=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, because \u003ccode\u003econst\u003c/code\u003e doesn't allow reassignment after the variable is initialized, we \u003cstrong\u003emust\u003c/strong\u003e assign a value right away:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst pi;\u003cbr\u003e//=\u0026gt; Uncaught SyntaxError: Missing initializer in const declaration\u003cbr\u003e\u003cbr\u003econst pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e  \u003cp\u003eAs your JavaScript powers increase with experience, you'll develop a more nuanced understanding of what to use where. However, for now, this is a good rule of thumb:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003evar\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e never.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003elet\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e when you know the value of a variable will change. For example, a \u003ccode\u003ecounter\u003c/code\u003e variable that starts at \u003ccode\u003e0\u003c/code\u003e and is subsequently incremented to \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e2\u003c/code\u003e, \u003ccode\u003e3\u003c/code\u003e, and so on. In the lessons on looping and iteration in JavaScript, \u003ccode\u003elet\u003c/code\u003e will have its moment in the spotlight.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003econst\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e for \u003cem\u003eevery\u003c/em\u003e other variable.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eBest practice is to always declare variables with \u003ccode\u003econst\u003c/code\u003e and then, if you later realize that the value has to change over the course of your program, circle back to change it to \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWe covered what a variable is, how to initialize and retrieve it, and how to assign or reassign its value. We also looked at best practices for naming variables and for when to use \u003ccode\u003elet\u003c/code\u003e, \u003ccode\u003econst\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics#Variables\"\u003eMDN —\u0026nbsp;Language basics crash course: Variables\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003eMDN —\u0026nbsp;\u003ccode\u003elet\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003eMDN —\u0026nbsp;\u003ccode\u003econst\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003eMDN —\u0026nbsp;\u003ccode\u003evar\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75\"\u003eJavaScript ES6+: \u003ccode\u003evar\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, or \u003ccode\u003econst\u003c/code\u003e?\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/JavaScript#History\"\u003eW3C - A Short History of JavaScript\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/ECMAScript#Versions\"\u003eWikipedia - ECMAScript: Versions\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"javascript-variables"},{"id":157839,"title":"JavaScript Data Types","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-js-data-types\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-data-types/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-data-types\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-data-types/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003col\u003e \u003cli\u003eDefine a data type\u003c/li\u003e \u003cli\u003eDemonstrate basic type checking with the \u003ccode\u003etypeof\u003c/code\u003e operator\u003c/li\u003e \u003cli\u003eIdentify JavaScript's seven basic data types\u003c/li\u003e \u003cli\u003eDescribe interactions between data of various types in JavaScript\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eDid you ever hear this song from educational TV?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eOne of these things is not like the others.\u003cbr\u003eOne of these things doesn't belong.\u003cbr\u003eCan you tell which thing is not like the other by the time\u003cbr\u003eI finish this song? \u003c/code\u003e\u003c/pre\u003e \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rsRjQDrDnY8\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eWhat this song is asking the young viewer to engage in is a pretty powerful behavior: \u003cem\u003eabstraction\u003c/em\u003e. It's looking at several \u003cem\u003econcrete\u003c/em\u003e examples and finding some sort of \"ideal\" that the \u003cem\u003econcrete\u003c/em\u003e examples all have in common and using that as a rule to find something that doesn't \u003cem\u003equite\u003c/em\u003e fit.\u003c/p\u003e  \u003cp\u003eDoing this is one of the most profound problems in philosophy and human development. No less an authority than Aristotle wrote a \u003ca href=\"https://plato.stanford.edu/entries/aristotle-categories/\"\u003ewhole book\u003c/a\u003e on it and how humans do it (one of the essential reasons why he \u003ca href=\"https://www.diffen.com/difference/Aristotle_vs_Plato\"\u003ediffers\u003c/a\u003e from his teacher, Plato).\u003c/p\u003e  \u003cp\u003eWho knew JavaScript would lead us to ancient Greece as well as \"Sesame Street?\"\u003c/p\u003e  \u003cp\u003eIn JavaScript, \u003cem\u003econcrete\u003c/em\u003e instances of data can be categorized into \u003cem\u003eabstract\u003c/em\u003e names called \"data types\" or, more simply, \"types.\"\u003c/p\u003e  \u003ch2\u003eWhat Is a Data Type?\u003c/h2\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eEverything in JavaScript is data\u003c/em\u003e\u003c/strong\u003e except:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\n\u003cstrong\u003eOperators\u003c/strong\u003e: \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e!\u003c/code\u003e, \u003ccode\u003e\u0026lt;=\u003c/code\u003e, etc.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eReserved words\u003c/strong\u003e: \u003ccode\u003efunction\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003edebugger\u003c/code\u003e, etc.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eEvery piece of data falls into one of JavaScript's seven data types: numbers, strings, booleans, symbols, objects, \u003ccode\u003enull\u003c/code\u003e, and \u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eBasic Type Checking Using the \u003ccode\u003etypeof\u003c/code\u003e Operator\u003c/h2\u003e  \u003cp\u003eThroughout this lesson, we'll use the \u003ccode\u003etypeof\u003c/code\u003e operator to give us an idea of what data types we're dealing with. \u003ccode\u003etypeof\u003c/code\u003e accepts one argument, the piece of data that we'd like to know the \u003cem\u003etype of\u003c/em\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e \u003ccode\u003etypeof\u003c/code\u003e is an operator, just like \u003ccode\u003e+\u003c/code\u003e or \u003ccode\u003e!\u003c/code\u003e. We get used to operators being only one character, but JavaScript (and many other languages) have operators with \u003cstrong\u003e\u003cem\u003emore than one\u003c/em\u003e\u003c/strong\u003e character. Because it's an operator, \u003cstrong\u003ewe don't need parentheses with \u003ccode\u003etypeof\u003c/code\u003e\u003c/strong\u003e. That said, JavaScript also supports \u003ccode\u003e()\u003c/code\u003e after \u003ccode\u003etypeof\u003c/code\u003e, but it's commonly not done.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eIdentify JavaScript's Seven Basic Data Types\u003c/h2\u003e  \u003ch3\u003eNumbers\u003c/h3\u003e  \u003cp\u003eSome programming languages divide numbers up into integers, decimals, doubles, floats, and so on. They do this so that they can have higher \u003cem\u003eprecision\u003c/em\u003e in their calculations. In a banking application or airplane wing engineering application we want our interest rate or the curve of the wing to be \u003cstrong\u003e\u003cem\u003eas accurate as possible\u003c/em\u003e\u003c/strong\u003e. For good reason: we want to make sure we get paid or have a safe plane! When JavaScript was created, this level of precision was not thought to be a thing that would be needed, so JavaScript only has a single, all-encompassing number type:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof 42;\u003cbr\u003e//=\u0026gt; \"number\"\u003cbr\u003e\u003cbr\u003etypeof 3.141592653589793;\u003cbr\u003e//=\u0026gt; \"number\"\u003cbr\u003e\u003cbr\u003etypeof 5e-324;\u003cbr\u003e//=\u0026gt; \"number\"\u003cbr\u003e\u003cbr\u003etypeof -Infinity;\u003cbr\u003e//=\u0026gt; \"number\" \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eThink About This:\u003c/strong\u003e As JavaScript has become a language for the back end as well as the front end, its imprecision around numbers keeps it from entering many banking or engineering applications where precision is vital.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eStrings\u003c/h3\u003e  \u003cp\u003eStrings are how we represent text in JavaScript. A string consists of a matching pair of \u003ccode\u003e'single quotes'\u003c/code\u003e, \u003ccode\u003e\"double quotes\"\u003c/code\u003e, or \u003ccode\u003e`backticks`\u003c/code\u003e with zero or more characters in between:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof 'I am a string.';\u003cbr\u003e//=\u0026gt; \"string\"\u003cbr\u003e\u003cbr\u003etypeof \"Me too!\";\u003cbr\u003e//=\u0026gt; \"string\"\u003cbr\u003e\u003cbr\u003etypeof `Me three!`;\u003cbr\u003e//=\u0026gt; \"string\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEven empty strings are strings:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof '';\u003cbr\u003e//=\u0026gt; \"string\" \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eBooleans\u003c/h3\u003e  \u003cp\u003eA boolean can only be one of two possible values: \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. Booleans play a big role in \u003ccode\u003eif\u003c/code\u003e statements and looping in JavaScript.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof true;\u003cbr\u003e//=\u0026gt; \"boolean\"\u003cbr\u003e\u003cbr\u003etypeof false;\u003cbr\u003e//=\u0026gt; \"boolean\" \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eObjects\u003c/h3\u003e  \u003cp\u003eA JavaScript object, unlike the types we've looked at so far, is a \u003cem\u003ecollection\u003c/em\u003e of data rather than a single value. An object consists of a list of properties, wrapped in curly braces \u003ccode\u003e{}\u003c/code\u003e and separated by commas. Each property in the list consists of a name — also known as a \u003ccode\u003ekey\u003c/code\u003e — which points to a value: \u003ccode\u003e\"name\": \"JavaScript\"\u003c/code\u003e. The example below has four properties, with the names (or \u003ccode\u003ekey\u003c/code\u003es) \"name\", \"createdBy\", \"firstReleased\", and \"isAwesome\":\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"name\": \"JavaScript\",\u003cbr\u003e  \"createdBy\": {\u003cbr\u003e    \"firstName\": \"Brendan\",\u003cbr\u003e    \"lastName\": \"Eich\"\u003cbr\u003e  },\u003cbr\u003e  \"firstReleased\": 1995,\u003cbr\u003e  \"isAwesome\": true\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003etypeof {}\u003cbr\u003e//=\u0026gt; \"object\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eA dictionary is a good metaphor here: an object is a collection of terms (the names or keys) and their definitions (the values). In fact, the programming language Python has a similar data type which is called a dictionary.\u003c/p\u003e  \u003cp\u003eNote that objects' properties can point to values of any data type. In the example above, the properties have values of four different types: a string, a number, a boolean, and another object!\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eArrays\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eAn array is just a list of values enclosed in square brackets: \u003ccode\u003e[\"Byron\", \"Cubby\", \"Boo Radley\", \"Luca\"]\u003c/code\u003e. As with objects, the values can be of any data type. In fact, from JavaScript's perspective, arrays are just special cases of objects. We can see that if we check the data type of our array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet dogs = ['Byron', 'Cubby', 'Boo Radley', 'Luca'];\u003cbr\u003etypeof dogs;\u003cbr\u003e//=\u0026gt; \"object\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis may seem strange at first, but will make more sense as we learn more about objects and arrays in future lessons.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003enull\u003c/code\u003e data type represents an intentionally absent object. For example, if a piece of code returns an object when it successfully executes, we could have it return \u003ccode\u003enull\u003c/code\u003e in the event of an error. Confusingly, the \u003ccode\u003etypeof\u003c/code\u003e operator returns \u003ccode\u003e\"object\"\u003c/code\u003e when called with \u003ccode\u003enull\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof null;\u003cbr\u003e//=\u0026gt; \"object\" \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe bane of many JS developers, \u003ccode\u003eundefined\u003c/code\u003e is a bit of a misnomer. Instead of 'not defined,' it actually means something more like 'not yet assigned a value.'\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof undefined;\u003cbr\u003e//=\u0026gt; \"undefined\"\u003cbr\u003e\u003cbr\u003elet unassignedVariable;\u003cbr\u003etypeof unassignedVariable;\u003cbr\u003e//=\u0026gt; \"undefined\"\u003cbr\u003e\u003cbr\u003eunassignedVariable = '';\u003cbr\u003etypeof unassignedVariable;\u003cbr\u003e//=\u0026gt; \"string\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAny variable declared but not defined will be \u003ccode\u003eundefined\u003c/code\u003e until a value is assigned.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003e\u003cem\u003eTop Tip\u003c/em\u003e\u003c/strong\u003e: When writing JavaScript code, it's good practice to \u003cstrong\u003e\u003cem\u003enever\u003c/em\u003e\u003c/strong\u003e set a variable equal to \u003ccode\u003eundefined\u003c/code\u003e. Variables will be \u003ccode\u003eundefined\u003c/code\u003e until we explicitly assign a value, so encountering an \u003ccode\u003eundefined\u003c/code\u003e variable is a strong signal that the variable was declared but not assigned prior to the reference. That's valuable information that we can use while debugging, and it comes at no additional cost to us.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eSymbols\u003c/h3\u003e  \u003cp\u003eSymbols are a relatively new data type (introduced in ES2015) that's primarily used as an alternative way to add properties to objects. Don't worry about symbols for now.\u003c/p\u003e  \u003ch3\u003ePrimitive Types\u003c/h3\u003e  \u003cp\u003eSix of the seven JavaScript data types —\u0026nbsp;everything except object — are \u003cstrong\u003eprimitive\u003c/strong\u003e. All this means is that they represent \u003cem\u003esingle\u003c/em\u003e values, such as \u003ccode\u003e7\u003c/code\u003e or \u003ccode\u003e\"hello\"\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e, instead of a collection of values.\u003c/p\u003e  \u003ch2\u003eHow Different JavaScript Data Types Interact\u003c/h2\u003e  \u003cp\u003eEvery programming language has its own rules governing the ways in which we can operate on data of a given type. For example, it's rather uncontroversial that numbers can be subtracted from other numbers...\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e3 - 2;\u003cbr\u003e//=\u0026gt; 1 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e...and that strings can be added to other strings:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'Hello' + \", \" + `world!`;\u003cbr\u003e//=\u0026gt; \"Hello, world!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut what happens if you mix them?\u003c/p\u003e  \u003cp\u003eSome programming languages, such as Python, are strict about how data of different types can interact, and they will refuse to compile a program that blends types. Well, that's rather strict.\u003c/p\u003e  \u003cp\u003eOther languages, such as Ruby, will attempt to handle the interaction by converting one of the data types so all data is of the same type. For example, instead of throwing an error when an integer (\u003ccode\u003e3\u003c/code\u003e) is added to a floating-point number (\u003ccode\u003e0.14159\u003c/code\u003e), Ruby will simply convert the integer into a floating-point number and correctly calculate the sum:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e3 + 0.14159\u003cbr\u003e#=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRuby throws errors when some stranger cases come up:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026gt; \"THX-\" + 1138\u003cbr\u003eTypeError: no implicit conversion of Fixnum into String \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat seems pretty reasonable: Ruby won't make the \u003ccode\u003eInteger\u003c/code\u003e, \u003ccode\u003e1138\u003c/code\u003e, into a \u003ccode\u003eString\u003c/code\u003e without being directly told that you want it to be a \u003ccode\u003eString\u003c/code\u003e (same as Python's rule).\u003c/p\u003e  \u003cp\u003eThat seems like a good baseline. JavaScript, on the other hand, is a little \u003cem\u003etoo\u003c/em\u003e nice when handling conflicting data types. \u003cstrong\u003eNo matter what weird combination of types you give it, JavaScript won't throw an error and will return \u003cem\u003esomething\u003c/em\u003e (though that \u003cem\u003esomething\u003c/em\u003e might make no sense at all).\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eSometimes it makes \u003cem\u003esome\u003c/em\u003e sense:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'High ' + 5 + '!';\u003cbr\u003e//=\u0026gt; \"High 5!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e...and sometimes it's downright \u003ca href=\"https://www.destroyallsoftware.com/talks/wat\"\u003ecomical\u003c/a\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003enull ** 2; // null to the power of 2\u003cbr\u003e//=\u0026gt; 0\u003cbr\u003e\u003cbr\u003eundefined ** null; // undefined to the power of null\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003e{}+{}; // empty object plus empty object\u003cbr\u003e//=\u0026gt; \"[object Object][object Object]\" \u0026lt;-- That's a string! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhy JavaScript returns a string when we ask it to add two empty objects is anyone's guess, but its heart is in the right place. The language always tries to bend over backwards for us, returning actionable data instead of throwing errors. However, JavaScript's eagerness occasionally results in data type issues that surprise novice and expert programmers alike.\u003c/p\u003e  \u003cp\u003eTry to follow along with what's happening here:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e1 + 2 + 3 + 4 + 5;\u003cbr\u003e//=\u0026gt; 15\u003cbr\u003e\u003cbr\u003e'1' + 2 + 3 + 4 + 5;\u003cbr\u003e//=\u0026gt; \"12345\"\u003cbr\u003e\u003cbr\u003e1 + '2' + 3 + 4 + 5;\u003cbr\u003e//=\u0026gt; \"12345\"\u003cbr\u003e\u003cbr\u003e1 + 2 + '3' + 4 + 5;\u003cbr\u003e//=\u0026gt; \"3345\"\u003cbr\u003e\u003cbr\u003e1 + 2 + 3 + '4' + 5;\u003cbr\u003e//=\u0026gt; \"645\"\u003cbr\u003e\u003cbr\u003e1 + 2 + 3 + 4 + '5';\u003cbr\u003e//=\u0026gt; \"105\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs long as we are only adding numbers to other numbers, JavaScript performs the expected addition. However, as soon as we throw a string in the mix, we stop adding and start concatenating everything together into a string. Let's take a look at an example to see how this works:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e1 + 2 + '3' + 4 + 5;\u003cbr\u003e//=\u0026gt; \"3345\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFirst, we add the numbers \u003ccode\u003e1\u003c/code\u003eand \u003ccode\u003e2\u003c/code\u003e together to get \u003ccode\u003e3\u003c/code\u003e (a number). We then ask JavaScript to add \u003ccode\u003e3\u003c/code\u003e (a number) to \u003ccode\u003e\"3\"\u003c/code\u003e (a string). JavaScript can't perform addition with a string, so it decides to concatenate the two operands instead, resulting in \u003ccode\u003e\"33\"\u003c/code\u003e (a string). The next operation, \u003ccode\u003e\"33\" + 4\u003c/code\u003e, is also between a string and a number, and JavaScript once again concatenates, giving us the result of \u003ccode\u003e\"334\"\u003c/code\u003e (a string). In the final operation, we're adding \u003ccode\u003e\"334\"\u003c/code\u003e with \u003ccode\u003e5\u003c/code\u003e (a number). Again, JavaScript concatenates, giving the final result of \u003ccode\u003e\"3345\"\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eYou'll encounter a lot of these weird data type behaviors throughout your JavaScript programming, but fear not: they'll trip you up less and less often as you gain experience.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson we've learned about data types, which are abstractions used to categorize pieces of information, or data. JavaScript defines seven different types: numbers, strings, booleans, symbols, objects, \u003ccode\u003enull\u003c/code\u003e, and \u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\"\u003eMDN — JavaScript data types and data structures\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://www.destroyallsoftware.com/compendium/types?share_key=baf6b67369843fa2\"\u003eDestroy All Software —\u0026nbsp;Types\u003c/a\u003e – A cross-language examination of type in various languages\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://www.destroyallsoftware.com/talks/wat\"\u003eDestroy All Software —\u0026nbsp;Wat\u003c/a\u003e –\u0026nbsp;A beloved \u003cstrong\u003e\u003cem\u003eand hilarious\u003c/em\u003e\u003c/strong\u003e talk in which JavaScript's friendliness when mixing types is discussed at a feverish pace – with awesome slides\u003c/li\u003e \u003c/ul\u003e","exportId":"javascript-data-types"},{"id":157840,"title":"Working With Strings","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-working-with-strings\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-working-with-strings\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-working-with-strings/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRecognize how to declare a \u003ccode\u003eString\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003cem\u003einterpolation\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eExplain how different quote characters allow flexibility\u003c/li\u003e \u003cli\u003eJoin \u003ccode\u003eString\u003c/code\u003es using \u003ccode\u003e+\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThus far in programming as conversation, we've used numbers as data most of the time. Numbers are great because they reach across languages and cultures. But there are times when we need our programs to return information in the form of text. In this lesson, we'll learn more about using text (i.e. \u003ccode\u003eString\u003c/code\u003es) in our JavaScript expressions.\u003c/p\u003e  \u003ch2\u003eRecognize How to Declare a \u003ccode\u003eString\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eWe declare \u003ccode\u003eString\u003c/code\u003es most often by enclosing our text in double quotes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst greeting = \"Hello, folks\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe letters inside of a \u003ccode\u003eString\u003c/code\u003e are often called \"characters.\"\u003c/p\u003e  \u003cp\u003eThe pair of matching \u003ccode\u003e\"\u003c/code\u003es are called \"\u003ccode\u003eString\u003c/code\u003e delimiters\" because they form a boundary or \u003cem\u003elimit\u003c/em\u003e around the characters that make up the \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe can also declare \u003ccode\u003eString\u003c/code\u003es by putting the characters in single quotes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst greeting = 'Hello, folks'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eor backticks:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst greeting = `Hello, folks`; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSingle quotes and double quotes can be used interchangeably in JavaScript — they are treated the same. Using backticks to enclose a string, however, brings some additional capabilities. A string enclosed in backticks forms a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"\u003etemplate literal\u003c/a\u003e, which allows you to \u003cem\u003einterpolate\u003c/em\u003e data into the \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eDefine \u003cem\u003einterpolation\u003c/em\u003e\n\u003c/h2\u003e  \u003cp\u003eString \u003cem\u003einterpolation\u003c/em\u003e is the process of injecting the value of an expression (often, but not necessarily, the \u003cem\u003evariable lookup expression\u003c/em\u003e) into a \u003ccode\u003eString\u003c/code\u003e. You wrap the expression inside the \u003cem\u003einterpolation operator\u003c/em\u003e which lets JavaScript know that it should interpret the value of the expression, convert it to a \u003ccode\u003eString\u003c/code\u003e if necessary, and insert it into the containing \u003ccode\u003eString\u003c/code\u003e where the \u003cem\u003einterpolation operator\u003c/em\u003e appeared.\u003c/p\u003e  \u003cp\u003eThe \u003cem\u003einterpolation operator\u003c/em\u003e looks like this: \u003ccode\u003e${}\u003c/code\u003e. When it appears in a backtick-delimited \u003ccode\u003eString\u003c/code\u003e, the return value of the expression inside the operator is \"plugged in\" to the containing \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIn a single or double-quoted \u003ccode\u003eString\u003c/code\u003e there is no interpolation possible. JavaScript would not interpret the value inside the \u003ccode\u003e${}\u003c/code\u003e; instead, it would create a literal string containing the operator and whatever expression is inside it.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst barkCount = 3\u003cbr\u003econst backtick = `Byron barks ${barkCount} times` //=\u0026gt; \"Byron barks 3 times\"\u003cbr\u003econst singleQuote = 'Byron barks ${barkCount} times' //=\u0026gt; \"Byron barks ${barkCount} times\"\u003cbr\u003econst doubleQuote = \"Byron barks ${barkCount} times\" //=\u0026gt; \"Byron barks ${barkCount} times\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe expression inside the \u003ccode\u003e${}\u003c/code\u003e does not need to be a variable lookup. Any expression, i.e., any statement that returns a value, can be used:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst byron = `Byron is ${2+3} years old` //=\u0026gt; \"Byron is 5 years old\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere JavaScript knows to interpret the value inside the interpolation operator because the string is enclosed in backticks. It evaluates the expression (\u003ccode\u003e2 + 3\u003c/code\u003e yields the value \u003ccode\u003e5\u003c/code\u003e), turns the result into a string and inserts it in place.\u003c/p\u003e  \u003ch2\u003eExplain How Different Quote Characters Allow Flexibility\u003c/h2\u003e  \u003cp\u003eWhat if you needed to store some \u003cem\u003edialog\u003c/em\u003e as a \u003ccode\u003eString\u003c/code\u003e:\u003c/p\u003e  \u003cp\u003eIn the book it would look like:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\"Wait,\" said Jo, \"Do not go without me!\"\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eIf we want to create a string containing this text, we might try wrapping the whole thing in quotes, like this:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\"\"Wait,\" said Jo, \"Do not go without me!\"\"\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eHowever, because \u003ccode\u003e\"\u003c/code\u003e is the \u003ccode\u003eString\u003c/code\u003e delimiter, JavaScript would get confused. It would attempt to end the \u003ccode\u003eString\u003c/code\u003e right before the \u003ccode\u003eW\u003c/code\u003e as the two \u003ccode\u003e\"\u003c/code\u003es \"delimit\" the \u003ccode\u003eString\u003c/code\u003e.  Not what we wanted.\u003c/p\u003e  \u003cp\u003eTo fix this, we can use single quotes as our delimiter instead:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst littleWomanEsque = '\"Wait,\" said Jo, \"Do not go without me!\"' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBecause the opening delimiter of the \u003ccode\u003eString\u003c/code\u003e was \u003ccode\u003e'\u003c/code\u003e, JavaScript will \"close\" the \u003ccode\u003eString\u003c/code\u003e at the next \u003ccode\u003e'\u003c/code\u003e — at the very end. Inside of the single quotes, the \u003ccode\u003e\"\u003c/code\u003e loses its meaning of \"here's a \u003ccode\u003eString\u003c/code\u003e\" and, instead, is just a plain literal,  letter-like character \u003ccode\u003e\"\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eBut oh my goodness, what if the speaker said \u003ccode\u003eDon't\u003c/code\u003e instead of \u003ccode\u003eDo not\u003c/code\u003e.  That would break our \u003ccode\u003eString\u003c/code\u003e \u003cem\u003eagain\u003c/em\u003e as JavaScript attempted to use the \u003ccode\u003e'\u003c/code\u003e inside \u003ccode\u003eDon't\u003c/code\u003e as the closing delimiter.\u003c/p\u003e  \u003cp\u003eSometimes we need to tell JavaScript, \"Don't use this \u003ccode\u003e'\u003c/code\u003e or \u003ccode\u003e\"\u003c/code\u003e as a \u003ccode\u003eString\u003c/code\u003e delimiter. To do this we need \u003cem\u003eescaping\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eWe can \"escape\" the power of \u003ccode\u003e\"\u003c/code\u003e or \u003ccode\u003e'\u003c/code\u003e to close a \u003ccode\u003eString\u003c/code\u003e by putting a \u003ccode\u003e\\\u003c/code\u003e in front of it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst littleWomanEsque = '\"Wait,\" said Jo, \"Don\\'t go without me!\"' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWithout the backslash, JavaScript would interpret the apostrophe inside \u003ccode\u003e\"Don't\"\u003c/code\u003e as the end of the string, and we'd end up with a mess. \u003cstrong\u003e\u003cem\u003eBUT\u003c/em\u003e\u003c/strong\u003e since there is a \u003ccode\u003e\\\u003c/code\u003e immediately before the second \u003ccode\u003e'\u003c/code\u003e (the apostrophe), thus \u003cem\u003eescaping\u003c/em\u003e it, JavaScript says \"Oh you mean to use this as a character, not as a \u003ccode\u003eString\u003c/code\u003e delimiter. I'll find the next unescaped \u003ccode\u003e'\u003c/code\u003e.\"\u003c/p\u003e  \u003cp\u003eIt doesn't find an unescaped \u003ccode\u003e'\u003c/code\u003e until the very end, just like we want.\u003c/p\u003e  \u003ch2\u003eJoin \u003ccode\u003eString\u003c/code\u003es using \u003ccode\u003e+\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eWe already know that we can use \u003ccode\u003e+\u003c/code\u003e as an arithmetical operator to add two \u003ccode\u003eNumber\u003c/code\u003es together. But we can also use it as a \u003ccode\u003eString\u003c/code\u003e operator: when placed between two \u003ccode\u003eString\u003c/code\u003es, it joins them and returns a \u003cstrong\u003e\u003cem\u003enew\u003c/em\u003e\u003c/strong\u003e \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eYou may want to follow along with the examples in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst firstName = \"Byronius\";\u003cbr\u003econst clanName = \"Karbitus\";\u003cbr\u003econst commonName = \"Maris\";\u003cbr\u003elet fullName;\u003cbr\u003e\u003cbr\u003e// With +\u003cbr\u003efullName = firstName + \" \" + clanName + \" \" + commonName; //=\u0026gt; \"Byronius Karbitus Maris\"\u003cbr\u003e\u003cbr\u003e// Or, with interpolation\u003cbr\u003efullName = `${firstName} ${clanName} ${commonName}`; //=\u0026gt; \"Byronius Karbitus Maris\"\u003cbr\u003e\u003cbr\u003e// Keep in mind it returns a _new_ String; therefore:\u003cbr\u003efirstName;  //=\u0026gt; \"Byronius\"\u003cbr\u003eclanName;   //=\u0026gt; \"Karbitus\"\u003cbr\u003ecommonName; //=\u0026gt; \"Maris\"\u003cbr\u003efullName;   //=\u0026gt; \"Byronius Karbitus Maris\" \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eA Warning About Mixing Data Types\u003c/h3\u003e  \u003cp\u003eRecall from the lesson on data types that JavaScript, unlike some other programming languages, will bend over backwards to return a value instead of throwing a type error. This means that the following will work in JavaScript:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst fact = \"Byron is \"; // fact is of type `String`\u003cbr\u003econst tail = \" years old\"; // tail is of type `String`\u003cbr\u003econst age = 5; // age is of type `Number`\u003cbr\u003e\u003cbr\u003efact + age + tail; //=\u0026gt; \"Byron is 5 years old\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we were to try this in Ruby or Python, we would get an error, but JavaScript returns what it \u003cem\u003ethinks\u003c/em\u003e we meant to do. While in this case this seems pretty reasonable, there are times when JavaScript's behavior will yield unexpected results. For this reason, best practice is \u003cstrong\u003enot\u003c/strong\u003e to depend on JavaScript to handle mixed data types in this way. A better way to handle this situation is by using interpolation instead:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst fact = \"Byron is\"; \u003cbr\u003econst tail = \"years old\"; \u003cbr\u003econst age = 5; \u003cbr\u003e\u003cbr\u003e`${fact} ${age} ${tail}`; //=\u0026gt; \"Byron is 5 years old\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, by using backticks and the interpolation operator, we are explicitly telling JavaScript to \u003cem\u003einterpret\u003c/em\u003e the expression inside the \u003ccode\u003e${}\u003c/code\u003e, convert it to a string (if necessary), and insert it into our String.\u003c/p\u003e  \u003cp\u003eAnother alternative is to use JavaScript's \u003ccode\u003etoString()\u003c/code\u003e method:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst fact = \"Byron is \"; // fact is of type `String`\u003cbr\u003econst tail = \" years old\"; // tail is of type `String`\u003cbr\u003econst age = 5; // age is of type `Number`\u003cbr\u003e\u003cbr\u003efact + age.toString() + tail; //=\u0026gt; \"Byron is 5 years old\" \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eWhen to Use \u003ccode\u003e+\u003c/code\u003e vs. \u003ccode\u003e${}\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThe choice of whether to use \u003ccode\u003e+\u003c/code\u003e or interpolation is, to a certain extent, a matter of personal preference — you can accomplish what you need to using either method. That said, however, JavaScript programmers tend to use interpolation more often than \u003ccode\u003e+\u003c/code\u003e. As you gain experience working with strings, you may find that using interpolation results in cleaner code that's easier to read. As a general rule, if the string you're constructing is simple and short, using \u003ccode\u003e+\u003c/code\u003e may be cleaner but you may want to consider using interpolation with more complex strings.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we learned how to declare \u003ccode\u003eString\u003c/code\u003es, how to interpolate the value of expressions into \u003ccode\u003eString\u003c/code\u003es, how to use different quote delimiters and escaping to create more complicated \u003ccode\u003eString\u003c/code\u003es, and a couple different methods for joining \u003ccode\u003eString\u003c/code\u003es.\u003c/p\u003e","exportId":"working-with-strings"},{"id":157841,"title":"Booleans","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-booleans\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-booleans/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-booleans\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-booleans/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain What a Boolean Expression Is\u003c/li\u003e\n\u003cli\u003eDescribe Truthy and Falsey Values in JavaScript\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eQuite commonly in our computer programs, we want to execute code\n\u003cem\u003econditionally\u003c/em\u003e, i.e., if some condition is true (or false). For example:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cem\u003eIf\u003c/em\u003e the user has entered the correct login credentials, \u003cem\u003ethen\u003c/em\u003e log them into our web app\u003c/li\u003e\n\u003cli\u003e\n\u003cem\u003eIf\u003c/em\u003e there isn't enough money in the user's account to execute the transfer,\n\u003cem\u003ethen\u003c/em\u003e send them an error message\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the following lessons, we will learn about operators we can use to construct\nthose conditional statements. Before we get to that, however, we need to\nunderstand \u003cem\u003eboolean expressions\u003c/em\u003e and the concepts of \u003cem\u003etruthyness\u003c/em\u003e and\n\u003cem\u003efalseyness\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eExplain What a Boolean Expressions Is\u003c/h2\u003e\n\n\u003cp\u003eWe have learned that \u003cem\u003eexpressions\u003c/em\u003e are code statements that return a value: the\n\u003cem\u003econstant expression\u003c/em\u003e returns the value of the constant, the \u003cem\u003eassignment\nexpression\u003c/em\u003e returns the value that is assigned, and the \u003cem\u003evariable lookup\nexpression\u003c/em\u003e returns the value of a variable. We have also learned that\nJavaScript has a \u003ccode\u003eBoolean\u003c/code\u003e data type that has only two values: \u003ccode\u003etrue\u003c/code\u003e or\n\u003ccode\u003efalse\u003c/code\u003e. As you might expect, therefore, a \u003cem\u003eBoolean expression\u003c/em\u003e is an expression\nthat returns either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDescribe the Difference Between Truthy and Falsey Values\u003c/h2\u003e\n\n\u003cp\u003eAll values in Javascript, of any data type (\u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eNumber\u003c/code\u003e, etc.), are\ntreated as either \u003cem\u003etruthy\u003c/em\u003e or \u003cem\u003efalsey\u003c/em\u003e. The following values are \u003cstrong\u003efalsey\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efalse\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAn empty string (\u003ccode\u003e\"\"\u003c/code\u003e, \u003ccode\u003e''\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eEvery other value is truthy\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo check whether a value is truthy or falsey, we can pass it to the global\n\u003ccode\u003eBoolean\u003c/code\u003e object, which converts the value into its boolean equivalent. You may\nwant to try these out yourself in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eBoolean(false);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(null);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(undefined);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(0);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(NaN);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean('');\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(true);\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eBoolean(42);\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eBoolean('Hello, world!');\u003cbr\u003e// =\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDon't worry if this seems a little theoretical at this point. We will learn how\nthis information is used in constructing Boolean expressions in the following\nlessons.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we've learned what a \u003cem\u003eBoolean expression\u003c/em\u003e is. We've also learned\nwhich values in JavaScript are considered \u003cem\u003etruthy\u003c/em\u003e and which are considered\n\u003cem\u003efalsey\u003c/em\u003e. With these understandings, we are now ready to learn how to construct\nBoolean expressions that return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMDN\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\u003eTruthy\u003c/a\u003e and \u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"\u003efalsey\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"booleans"},{"id":157843,"title":"Comparisons in JavaScript","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-comparisons-in-javascript\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-comparisons-in-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-comparisons-in-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify equality operators\u003c/li\u003e \u003cli\u003eCompare numbers using relational operators\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eNow that we know what \u003cem\u003eBoolean expressions\u003c/em\u003e are we'll start learning how to create them. In this lesson we'll learn about comparison operators, which enable us to check to see if a value is what we're expecting. Follow along with the examples below in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e JavaScript includes both \u003cem\u003estrict\u003c/em\u003e and \u003cem\u003eloose\u003c/em\u003e comparison operators. When writing JavaScript, you should strongly prefer the \u003cstrong\u003estrict\u003c/strong\u003e operators. The reason for this is the loose operators will return true even if the data types aren't the same, which can result in unexpected behavior and bugs that can be difficult to track down. Even if you find you need to compare two values of different data types, you should avoid using loose operators. You will be better off converting the data type of one of the variables so they have the same type, then comparing them using a strict operator.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eIdentify equality operators\u003c/h2\u003e  \u003cp\u003eJavaScript includes four equality operators:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003estrict equality operator\u003c/strong\u003e (\u003ccode\u003e===\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003estrict inequality operator\u003c/strong\u003e (\u003ccode\u003e!==\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eloose equality operator\u003c/strong\u003e (\u003ccode\u003e==\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eloose inequality operator\u003c/strong\u003e (\u003ccode\u003e!=\u003c/code\u003e)\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThese operators allow us to compare values and determine whether they are the same.\u003c/p\u003e  \u003ch3\u003eStrict Equality Operator \u003ccode\u003e===\u003c/code\u003e and Strict Inequality Operator \u003ccode\u003e!==\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThe \u003cstrong\u003estrict equality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are equal \u003cem\u003ewithout performing type conversions\u003c/em\u003e. Even if the values on both sides of the operator look similar (e.g., \u003ccode\u003e'42' === 42\u003c/code\u003e), the \u003ccode\u003e===\u003c/code\u003e operator will only return \u003ccode\u003etrue\u003c/code\u003e if the data types also match:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e42 === 42\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e42 === '42'\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003etrue === 1\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e'0' === false\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003enull === undefined\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e' ' === 0\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is logical and accurate!\u003c/p\u003e  \u003cp\u003eThe \u003cstrong\u003estrict inequality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are \u003cem\u003enot\u003c/em\u003e equal \u003cem\u003ewithout\u003c/em\u003e performing type conversions:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9000 !== 9001\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e9001 !== '9001'\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e[] !== ''\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003e\u003cem\u003eYou should prefer \u003ccode\u003e===\u003c/code\u003e and \u003ccode\u003e!==\u003c/code\u003e for comparisons\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch3\u003eLoose Equality Operator \u003ccode\u003e==\u003c/code\u003e and Loose Inequality Operator \u003ccode\u003e!=\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThe \u003cstrong\u003eloose equality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are equal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e42 == 42\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, it will \u003cem\u003ealso\u003c/em\u003e return \u003ccode\u003etrue\u003c/code\u003e if it can perform a type conversion (e.g., changing the string \u003ccode\u003e'42'\u003c/code\u003e into the number \u003ccode\u003e42\u003c/code\u003e) that makes the two values equal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e42 == '42'\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003etrue == 1\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e'0' == false\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003enull == undefined\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e' ' == 0\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cstrong\u003eloose inequality operator\u003c/strong\u003e is the opposite of \u003ccode\u003e==\u003c/code\u003e. It returns \u003ccode\u003etrue\u003c/code\u003e if two values are \u003cem\u003enot\u003c/em\u003e equal, performing type conversions as necessary:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9000 != 9001\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e9001 != '9001'\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e[] != ''\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is confusing and inaccurate! It makes no sense that the string \u003ccode\u003e'0'\u003c/code\u003e is equal to the boolean \u003ccode\u003efalse\u003c/code\u003e or that \u003ccode\u003enull\u003c/code\u003e and \u003ccode\u003eundefined\u003c/code\u003e — two \u003cstrong\u003ecompletely different\u003c/strong\u003e data types — are equivalent.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eYou should prefer \u003ccode\u003e===\u003c/code\u003e and \u003ccode\u003e!==\u003c/code\u003e for comparisons\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch2\u003eCompare Numbers with Relational Operators\u003c/h2\u003e  \u003cp\u003eJavaScript includes four relational operators:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003egreater than\u003c/strong\u003e (\u003ccode\u003e\u0026gt;\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003egreater than or equals\u003c/strong\u003e (\u003ccode\u003e\u0026gt;=\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eless than\u003c/strong\u003e (\u003ccode\u003e\u0026lt;\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eless than or equals\u003c/strong\u003e (\u003ccode\u003e\u0026lt;=\u003c/code\u003e)\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe behavior of these operators is consistent with the meaning of the corresponding symbols in mathematics:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e88 \u0026gt; 9\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e88 \u0026gt;= 88\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e88 \u0026lt; 9\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, beware of type conversion when comparing non-numbers against numbers. For instance, when a string is compared with a number, the JavaScript engine tries to convert the string to a number:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e88 \u0026gt; '9'\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the engine can't convert the string into a number, the comparison will always return \u003ccode\u003efalse\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e88 \u0026gt;= 'hello'\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e88 \u0026lt;= 'hello'\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eStrings are compared with other strings lexicographically, meaning character-by-character from left-to-right. The following returns \u003ccode\u003efalse\u003c/code\u003e because the Unicode value of \u003ccode\u003e8\u003c/code\u003e, the first character in \u003ccode\u003e88\u003c/code\u003e, is less than the Unicode value of \u003ccode\u003e9\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'88' \u0026gt; '9'\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you aren't sure what data type you are going to be receiving, but you still need to compare them, make sure that you tell JavaScript to \u003ca href=\"https://gomakethings.com/converting-strings-to-numbers-with-vanilla-javascript/\"\u003econvert the string to a number first\u003c/a\u003e, and then compare.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Stick to comparing \u003cem\u003enumerical\u003c/em\u003e values with the relational operators and you'll be golden.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eJavaScript contains both equality and relational operators that we can use in writing code to compare two values. The resulting statements are \u003cem\u003eBoolean expressions\u003c/em\u003e — they always return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eMake sure you're using the strict equality operators whenever possible, and only comparing numerical values using the relational operators, and you'll avoid annoying errors that can be time consuming to troubleshoot!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\"\u003eComparison operators\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\"\u003eEquality comparisons and sameness\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://dorey.github.io/JavaScript-Equality-Table/\"\u003eJavaScript Equality Table\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://forum.freecodecamp.org/t/javascript-comparison-operators/14660\"\u003efreeCodeCamp Forum —\u0026nbsp;JavaScript Comparison Operators\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"comparisons-in-javascript"},{"id":157845,"title":"Logical Operators","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-logical-operators\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-logical-operators/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-logical-operators\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-logical-operators/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDescribe how to use \u003ccode\u003e!\u003c/code\u003e to negate an expression\u003c/li\u003e\n\u003cli\u003eDescribe how to convert an expression to a Boolean using \u003ccode\u003e!!\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eDefine the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e operators\u003c/li\u003e\n\u003cli\u003eDescribe how to link conditions using the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e operators\u003c/li\u003e\n\u003cli\u003ePractice What We Learned\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we will continue to expand our toolset for creating Boolean\nexpressions by learning about logical operators. Using JavaScript's three\nlogical operators, NOT (\u003ccode\u003e!\u003c/code\u003e), AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e), and OR (\u003ccode\u003e||\u003c/code\u003e), we'll learn how to\nnegate and combine expressions. These operators, in combination with the\nequality and relational operators we learned earlier, will enable us to create\nmore complex and sophisticated Boolean expressions.\u003c/p\u003e\n\n\u003ch2\u003eDescribe How to Use \u003ccode\u003e!\u003c/code\u003e to Negate an Expression\u003c/h2\u003e\n\n\u003ch3\u003e\n\u003ccode\u003e!\u003c/code\u003e NOT\u003c/h3\u003e\n\n\u003cp\u003eIn an earlier lesson, we learned about truthy and falsey values in JavaScript.\nThe logical NOT operator (\u003ccode\u003e!\u003c/code\u003e), also called the \u003cem\u003ebang operator\u003c/em\u003e, operates on an\nexpression, returning the opposite of the expression's truthiness. If \u003ccode\u003ex\u003c/code\u003e\nresolves to a truthy value, \u003ccode\u003e!x\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e. If \u003ccode\u003ex\u003c/code\u003e is falsey, \u003ccode\u003e!x\u003c/code\u003e returns\n\u003ccode\u003etrue\u003c/code\u003e:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/UniqueAnotherAutomaticvectorization?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you click the Run button you'll see the bang operator in action, returning\nthe reverse of \u003ccode\u003etruthyValue\u003c/code\u003e's truthiness. Then modify the code on line 4 to\nverify that it works for the falsey value as well.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e Recall that you will need to click \"open in repl.it\" in the \nupper right corner of the REPL window to open it in a new browser tab, then\nsign in to your repl.it account before you can fork the code and modify it.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eDescribe How to Convert an Expression to a Boolean Using \u003ccode\u003e!!\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eIn an earlier lesson, we passed values into the \u003ccode\u003eBoolean()\u003c/code\u003e \u003cem\u003econstructor\nfunction\u003c/em\u003e to check their truthiness. We'll learn all about constructor functions\nlater in the course; for now, just think of \u003ccode\u003eBoolean()\u003c/code\u003e as a function that takes\nin some input, \u003cem\u003econstructs\u003c/em\u003e a new Boolean from that input, and outputs the\nnewly constructed Boolean.\u003c/p\u003e\n\n\u003cp\u003eAs a shorter way to convert any value into a Boolean, we can use two NOT\noperators:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/WanGrimyFunction?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eThe JavaScript engine reads from left to right: it sees the first \u003ccode\u003e!\u003c/code\u003e and looks\nto the right to check what we're asking it to invert (\u003ccode\u003e!truthyValue\u003c/code\u003e). It then\nsees the second \u003ccode\u003e!\u003c/code\u003e and looks to the right \u003cem\u003eagain\u003c/em\u003e, this time finding our\n\u003ccode\u003etruthyValue\u003c/code\u003e variable. At this point, the engine resolves \u003ccode\u003etruthyValue\u003c/code\u003e to\n\u003ccode\u003e\"This value is truthy.\"\u003c/code\u003e, which (as it tells us) is truthy. It then executes\nthe inner \u003ccode\u003e!\u003c/code\u003e operator on it. \u003ccode\u003e!truthyValue\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e, so instead of\n\u003ccode\u003e!!truthyValue\u003c/code\u003e JavaScript is now evaluating \u003ccode\u003e!false\u003c/code\u003e. Executing the outer \u003ccode\u003e!\u003c/code\u003e\noperator on \u003ccode\u003efalse\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTry inverting various values in the REPL above to get a feel for the NOT\noperator. See what happens when you stack a ton of them: \u003ccode\u003e!!!!!!!!!truthyValue\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can edit line 3 in \u003ccode\u003eindex.js\u003c/code\u003e \u003cem\u003eor\u003c/em\u003e add lines of code below the current code. If you add lines, when you click the Run button, the value\nreturned in the console tab will be the return value of the \u003cem\u003elast expression evaluated\u003c/em\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOn to the next!\u003c/p\u003e\n\n\u003ch2\u003eDefine the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e Operators\u003c/h2\u003e\n\n\u003ch3\u003e\n\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e (AND)\u003c/h3\u003e\n\n\u003cp\u003eThe logical AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e) operator takes two expressions:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexpression1 \u0026amp;\u0026amp; expression2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe return value of the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator is always \u003cstrong\u003eone of the two expressions\u003c/strong\u003e.\nIf the first expression is falsey, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns the value of the first\nexpression. If the first expression is truthy, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns the value of the\nsecond expression.\u003c/p\u003e\n\n\u003cp\u003eAgain, if the first expression is falsey, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns that value and exits\n\u003cem\u003ewithout ever checking the second expression\u003c/em\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efalse \u0026amp;\u0026amp; 'Anything';\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e// 4 * 0 returns 0, which is falsey\u003cbr\u003e4 * 0 \u0026amp;\u0026amp; 'Anything';\u003cbr\u003e// =\u0026gt; 0\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the first expression is truthy, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e then returns whatever the second\nexpression evaluates to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etrue \u0026amp;\u0026amp; false;\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e1 + 1 \u0026amp;\u0026amp; 'Whatever';\u003cbr\u003e// =\u0026gt; \"Whatever\"\u003cbr\u003e\u003cbr\u003e'The truthiest of truthy strings' \u0026amp;\u0026amp; 9 * 9;\u003cbr\u003e// =\u0026gt; 81\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere are three different ways the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator can be evaluated:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\n\u003ctr\u003e\n    \u003cth\u003eLeft side\u003c/th\u003e\n    \u003cth\u003eRight side\u003c/th\u003e\n    \u003cth\u003eReturn value\u003c/th\u003e\n    \u003cth\u003eTruthiness of return value\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n    \u003ctd\u003eDoesn't matter\u003c/td\u003e\n    \u003ctd\u003eLeft side\u003c/td\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n    \u003ctd\u003eRight side\u003c/td\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n    \u003ctd\u003eRight side\u003c/td\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003col\u003e\n\u003cli\u003eIf the left-side expression is falsey, the right-side expression doesn't\nmatter at all. The \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator returns the left side's falsey value and\nfinishes.\u003c/li\u003e\n\u003cli\u003eIf the left-side expression is truthy, the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator returns the right\nside's value (whether it's truthy or falsey) and finishes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWhat this means is that the return value of the expression will be truthy if the\nvalues on either side of the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e are \u003cem\u003eboth\u003c/em\u003e truthy, and falsey otherwise.\u003c/p\u003e\n\n\u003cp\u003eIf you're feeling a little confused, that's ok. This is one of those concepts\nthat's a bit hard to understand unless you've played around with it in code. You\nwill have an opportunity to practice at the end of the lesson.\u003c/p\u003e\n\n\u003ch3\u003e\n\u003ccode\u003e||\u003c/code\u003e (OR)\u003c/h3\u003e\n\n\u003cp\u003eThe logical OR (\u003ccode\u003e||\u003c/code\u003e) operator also takes two expressions:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexpression1 || expression2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs with \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, the return value of the \u003ccode\u003e||\u003c/code\u003e operator is always \u003cstrong\u003eone of the two\nexpressions\u003c/strong\u003e. If the first expression is truthy, \u003ccode\u003e||\u003c/code\u003e returns the value of the\nfirst expression. If the first expression is falsey, \u003ccode\u003e||\u003c/code\u003e returns the value of\nthe second expression.\u003c/p\u003e\n\n\u003cp\u003eIf the first expression is truthy, that value is immediately returned and the\nsecond expression is never evaluated:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etrue || 'Whatever';\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e1 + 1 || 'Whatever';\u003cbr\u003e// =\u0026gt; 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the first expression is falsey, \u003ccode\u003e||\u003c/code\u003e returns whatever the second expression\nevaluates to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efalse || 'Whatever';\u003cbr\u003e// =\u0026gt; \"Whatever\"\u003cbr\u003e\u003cbr\u003e1 === 2 || 8 * 8;\u003cbr\u003e// =\u0026gt; 64\u003cbr\u003e\u003cbr\u003e'' || 'Not ' + 'an ' + 'empty ' + 'string';\u003cbr\u003e// =\u0026gt; \"Not an empty string\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere are three different ways the \u003ccode\u003e||\u003c/code\u003e operator can be evaluated:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\n\u003ctr\u003e\n    \u003cth\u003eLeft side\u003c/th\u003e\n    \u003cth\u003eRight side\u003c/th\u003e\n    \u003cth\u003eReturn value\u003c/th\u003e\n    \u003cth\u003eTruthiness of return value\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n    \u003ctd\u003eDoesn't matter\u003c/td\u003e\n    \u003ctd\u003eLeft side\u003c/td\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n    \u003ctd\u003eRight side\u003c/td\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n    \u003ctd\u003eRight side\u003c/td\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003col\u003e\n\u003cli\u003eIf the left-side expression is truthy, the right-side expression doesn't\nmatter at all. The \u003ccode\u003e||\u003c/code\u003e operator returns the left side's truthy value and\ncompletes.\u003c/li\u003e\n\u003cli\u003eIf the left-side expression is falsey, the \u003ccode\u003e||\u003c/code\u003e operator returns the right\nside's value (regardless of whether it's truthy or falsey) and completes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWhat this means is that the return value of the expression will be truthy if\n\u003cem\u003eone or both\u003c/em\u003e of the values on either side of the \u003ccode\u003e||\u003c/code\u003e are truthy, and falsey\notherwise.\u003c/p\u003e\n\n\u003ch2\u003ePracticing What We've Learned\u003c/h2\u003e\n\n\u003cp\u003eThe REPL below contains a number of expressions that use the logical operators\nwe've learned about in this lesson:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/EmbellishedPresentOrigin?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eBefore we get to that, however...\u003c/p\u003e\n\n\u003ch3\u003eA Note About Comments in Code\u003c/h3\u003e\n\n\u003cp\u003eNote that most of the lines in the REPL currently have the characters \u003ccode\u003e//\u003c/code\u003e at\nthe front. The \u003ccode\u003e//\u003c/code\u003e is used in JavaScript to 'comment out' lines of code. Any\nline in your code that has \u003ccode\u003e//\u003c/code\u003e at the front will \u003cem\u003enot be interpreted\u003c/em\u003e by the\nJavaScript engine. This enables us to do two things: 1) include text (i.e.,\nmessages meant for humans) in our code files without JavaScript throwing an\nerror, and 2) \u003cem\u003etemporarily\u003c/em\u003e keep lines of code from being interpreted; this \nsecond use can be especially handy when debugging code.\u003c/p\u003e\n\n\u003cp\u003eTry removing the \u003ccode\u003e//\u003c/code\u003e at the beginning of line 1 and clicking the Run button.\nNot surprisingly, JavaScript doesn't know what to do with that line of 'code'.\nThe \u003ccode\u003e//\u003c/code\u003e enables programmers to include messages to other programmers — or\nto their own future selves — for documentation or clarification purposes.\nDon't forget to re-comment out line 1 before you move on.\u003c/p\u003e\n\n\u003ch3\u003eInstructions\u003c/h3\u003e\n\n\u003cp\u003eOkay, let's get some practice with logical operators. Take a look at line 4 in\nthe REPL (the only un-commented out line). What do you think the expression will\nreturn? Think it through and come up with an answer, then click Run to check\nwhether you're right. When you're done with the first expression, work your way\ndown, un-commenting out each expression in turn. Be sure you think each example\nthrough and figure out your answer before clicking Run.\u003c/p\u003e\n\n\u003cp\u003eIf you're having difficulty with the examples, try following this procedure:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eEvaluate each side of the operator individually: what is the \u003cem\u003ereturn value\u003c/em\u003e\nof each individual expression, and what is the \u003cem\u003etruthiness\u003c/em\u003e of each of those\nvalues?\u003c/li\u003e\n\u003cli\u003eFind the corresponding row in the appropriate table above and refer to the\n'Return value' column to determine the return value of the full expression.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFinally, once you're done with the provided expressions, experiment with some\nexamples of your own to cement your understanding.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn the last few lessons, we've been introduced to powerful tools for creating\nBoolean expressions: comparison operators (equality and relational) and logical\noperators. With these tools, we can construct very sophisticated expressions. A\nbit later in the course, we will learn how to use these expressions to execute\ncode conditionally, which will enable us to implement powerful logic in our\nprograms.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/\"\u003eMDN\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators\"\u003eLogical operators\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals\"\u003eReview of conditionals, comparisons, and logical operators\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"logical-operators"},{"id":157848,"title":"Programming with Expressions","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-programming-with-expressions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-programming-with-expressions/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-programming-with-expressions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-programming-with-expressions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify the Ternary Expression\u003c/li\u003e \u003cli\u003eWrite a program with conditional logic using expressions\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eYou've traveled quite a road! You started, from a conversational perspective, mute and unable to interact, and now you can converse with JavaScript.\u003c/p\u003e  \u003cp\u003eAs conversationalists with computers, we are now able to construct complex, sophisticated \u003cem\u003eexpressions\u003c/em\u003e. But so far our expressions have followed a single track: \u003cem\u003eevaluate\u003c/em\u003e this one single expression, or line of thought. It's like a world of absolute certainty in every statement: \"My outfit today: rain boots\" or \"My outfit today: sun hat.\" In real life, however, we sometimes need to base our decisions on a test of some sort. \"\u003cstrong\u003eIF\u003c/strong\u003e it's raining: rain boots... \u003cstrong\u003eOTHERWISE\u003c/strong\u003e: sun hat.\" This means that \u003cem\u003ecomplexity\u003c/em\u003e is entering our expressions; we \u003cem\u003eneed\u003c/em\u003e that complexity so that we can express our problem-solving strategies in code.\u003c/p\u003e  \u003cp\u003eWe will now learn how to write an expression that expresses \"conditional thinking\" or \"if-then\" logic. It's called the \u003cstrong\u003eternary expression\u003c/strong\u003e. It's an expression that takes a Boolean value or expression and returns one of two values, depending on the truth-status of that first expression.\u003c/p\u003e  \u003ch2\u003eIdentify the Ternary Expression\u003c/h2\u003e  \u003cp\u003eThe ternary expression looks like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/programming-with-expressions/ternary.jpg\" alt=\"Ternary Graphic\"\u003e\u003c/p\u003e  \u003cp\u003eOr, in code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ebooleanExpression ? \"thingToReturnIfTrue\" : \"thingToReturnIfFalse\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the expression in the first position evaluates to a truthy value, then the return value of the ternary expression is whatever is in the second position; here, \u003ccode\u003e\"thingToReturnIfTrue\"\u003c/code\u003e. If the expression in the first position is falsey, however, whatever is in the last position is returned; here, \u003ccode\u003e\"thingToReturnIfFalse\"\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's try an example:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/SweetNativeQuadrant?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eThe expression in the first position evaluates to \u003ccode\u003etrue\u003c/code\u003e, so the ternary expression returns the value after the question mark, \"rain boots\". Try changing the variable \u003ccode\u003elikelyToRain\u003c/code\u003e with the \u003cem\u003eassignment expression\u003c/em\u003e from \u003ccode\u003etrue\u003c/code\u003e to \u003ccode\u003efalse\u003c/code\u003e. Then run the ternary expression again. The return value of our ternary expression should now be \u003ccode\u003esun hat\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe now have the ability to express conditional logic. You should try writing several ternary expressions yourself in the REPL to make sure you've gotten the hang of things.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eLEARNING TIP\u003c/strong\u003e: Developers learn their craft by making slight experiments to given code: be sure you're adopting that habit now.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eMoving Beyond Boolean Values\u003c/h3\u003e  \u003cp\u003eAbove we had a variable, \u003ccode\u003elikelyToRain\u003c/code\u003e, in which the literal Boolean value \u003ccode\u003etrue\u003c/code\u003e was stored and we used that as our Boolean expression in our ternary. But we can, in fact, use \u003cem\u003eany\u003c/em\u003e Boolean expression, not just literal Boolean values. Specifically, we can use the comparison operators and logical operators that we learned about in the previous lessons to construct our expression.\u003c/p\u003e  \u003cp\u003eLet's look at an example:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/RashUnconsciousSigns?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eHere we see we can make a decision based on a \u003cem\u003ecomparison\u003c/em\u003e. \u003cem\u003eIf\u003c/em\u003e the chance of rain is greater than 30%, we know we should take our rain boots; \u003cem\u003eotherwise\u003c/em\u003e we'll grab our sun hat. Try different values for \u003ccode\u003erainPercentage\u003c/code\u003e and see what happens.\u003c/p\u003e  \u003cp\u003eWith this understanding of ternary expressions, we are now ready to write a program using expressions.\u003c/p\u003e  \u003ch2\u003eWrite a Program with Conditional Logic Using Expressions\u003c/h2\u003e  \u003cp\u003eGuess what? We've already done this! \u003ca href=\"https://en.wikipedia.org/wiki/Computer_program\"\u003eAccording to Wikipedia\u003c/a\u003e, a program is \"a collection of instructions that can be executed by a computer to perform a specific task.\" The ternary (set of instructions) we looked at above is an \u003cem\u003eexpression\u003c/em\u003e that performs the task of \u003cem\u003eevaluating a condition\u003c/em\u003e and, based on the results, \u003cem\u003ereturning a value\u003c/em\u003e. But of course we can expand on this, making our conditions more sophisticated and our return values more informative:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/HungryWealthyVertex?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eNow we have three variables and we're using them not only to construct ternary expressions but also to output a more informative message. Try experimenting with the values of the variables and see how it affects the return value.\u003c/p\u003e  \u003cp\u003eLet's take a closer look at the code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e//Input values: we could easily imagine asking a user for these values.\u003cbr\u003econst name = \"Byron the Poodle\";\u003cbr\u003econst probabilityOfRain = 0.2;\u003cbr\u003econst temperatureInC = 26;\u003cbr\u003e\u003cbr\u003e`Hello, ${name}, with a rain chance of ${probabilityOfRain * 100}% and a temperature of ${temperatureInC}C we recommend that you ` + (rainPercentage \u0026gt; 0.3 ? \"take an umbrella\" : \"enjoy this rain-free day\") + `${temperatureInC \u0026gt;= 26 ? ' and watch out for heatstroke.' : ' and bask in this fine weather.'}`; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAlthough this code works — JavaScript knows what we want it to do — that doesn't make it good code. Recall that programming is \u003cem\u003econversation\u003c/em\u003e, not just with the JavaScript engine but \u003cem\u003ealso\u003c/em\u003e with other programmers or ourselves in the future. How easy is it to read the line of code that defines our return value? How much work does it take to figure out how it works? Writing good code means writing code that not only works but is also as clean and readable as we can make it.\u003c/p\u003e  \u003cp\u003eLet's do some \u003cem\u003erefactoring\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eWe have learned that, in assigning values to variables, we can use constant values:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst name = \"Byron the Poodle\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOr values evaluated from an expression:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst rainPercentage = 0.2 * 100; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can also include variables as part of the evaluated expression:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst rainPercentage = probabilityOfRain * 100; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn fact, \u003cstrong\u003e\u003cem\u003eyou can assign virtually any \u003cem\u003eexpression\u003c/em\u003e as the value of a variable\u003c/em\u003e\u003c/strong\u003e, including \u003cem\u003ecomparison\u003c/em\u003e expressions. So to start, let's use our new \u003ccode\u003erainPercentage\u003c/code\u003e variable and also create a couple of appropriately named variables to store the conditions we're checking in our ternary statements. The condition \u003ccode\u003erainPercentage \u0026gt; 0.3\u003c/code\u003e is basically checking whether it's likely to rain, while the condition \u003ccode\u003etemperatureInC \u0026gt;= 26\u003c/code\u003e is checking whether it's hot enough that we should stay out of the sun. Once we've created the variables we can then use them in our ternary statements:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst name = \"Byron the Poodle\";\u003cbr\u003econst probabilityOfRain = 0.2;\u003cbr\u003econst temperatureInC = 26;\u003cbr\u003e\u003cbr\u003econst likelyToRain = probabilityOfRain \u0026gt; 0.3;\u003cbr\u003econst sunIsDangerous = temperatureInC \u0026gt;= 26;\u003cbr\u003econst rainPercentage = probabilityOfRain * 100;\u003cbr\u003e\u003cbr\u003e`Hello, ${name}, with a rain chance of ${rainPercentage}% and a temperature of ${temperatureInC}C we recommend that you ` + (likelyToRain ? \"take an umbrella\" : \"enjoy this rain-free day\") + `${sunIsDangerous ? ' and watch out for heatstroke!' : ' and bask in this fine weather.'}` \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is already a bit easier to read: we've moved the math and some of the logic out of our return value; we've also used meaningful variable names that make it clearer how we're using our conditions and, by extension, what the ternary expressions are doing. But we can do better.\u003c/p\u003e  \u003cp\u003eWe mentioned above that we can assign virtually any expression as the value of a variable; this includes \u003cem\u003eternary expressions\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst rainAdvice = likelyToRain ? \"take an umbrella\" : \"enjoy this rain-free day\";\u003cbr\u003econst sunAdvice = sunIsDangerous ? \"and watch out for heatstroke\" : \"and bask in this fine weather\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eA ternary expression returns a value, just like any other expression; the value it returns is what is assigned to the variable.\u003c/p\u003e  \u003cp\u003eLet's update our code, implementing this improvement:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst name = \"Byron the Poodle\"\u003cbr\u003econst probabilityOfRain = 0.2;\u003cbr\u003econst temperatureInC = 26;\u003cbr\u003e\u003cbr\u003econst likelyToRain = probabilityOfRain \u0026gt; 0.3;\u003cbr\u003econst sunIsDangerous = temperatureInC \u0026gt;= 26;\u003cbr\u003econst rainPercentage = probabilityOfRain * 100;\u003cbr\u003e\u003cbr\u003econst rainAdvice = likelyToRain ? \"take an umbrella\" : \"enjoy this rain-free day\";\u003cbr\u003econst sunAdvice = sunIsDangerous ? \" and watch out for heatstroke\" : \" and bask in this fine weather\";\u003cbr\u003e\u003cbr\u003e`Hello, ${name}, with a rain chance of ${rainPercentage}% and a temperature of ${temperatureInC}C we recommend that you ` + rainAdvice + sunAdvice; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMuch better! But there are still some improvements we can make. For one thing, it looks a little strange that we're using both interpolation and the \u003ccode\u003e+\u003c/code\u003e operator; let's fix that. And, while we're at it, we can take the \" and\" and the punctuation out of the \u003ccode\u003esunAdvice\u003c/code\u003e ternary and incorporate them into our return value instead. This not only improves the readability of our return message, it also makes our code more flexible: if we decide to reverse the order of \u003ccode\u003erainAdvice\u003c/code\u003e and \u003ccode\u003esunAdvice\u003c/code\u003e in our message, or to add a third piece of advice, we don't need to go back and edit the values returned by the ternary.\u003c/p\u003e  \u003cp\u003eOnce we've done all that, the code defining our return value is much easier to read: it no longer includes a jumble of mathematical, comparison, and ternary expressions. Furthermore, by using meaningful variable names, we've made it clear what the final message will consist of:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/BitterTeemingAbandonware?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eNice!\u003c/p\u003e  \u003cp\u003eOne final note before we move on. In the example above, we used simple \u003ccode\u003eString\u003c/code\u003es as the return values in our ternary expressions. But we can use any data type here — numbers, Booleans, objects, etc. And, of course, we can also use more complex expressions. Let's look at an example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst first = 2;\u003cbr\u003econst second = 1;\u003cbr\u003econst problemCount = 99;\u003cbr\u003econst luckyNumber = (first \u0026gt; second) ? ( (problemCount - 1) / 2 ) : ( problemCount / 3 );\u003cbr\u003eluckyNumber; //=\u0026gt; ??? (Test it out yourself!) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat's the value of \u003ccode\u003eluckyNumber\u003c/code\u003e? Step through the expressions to make sure you understand what happens step by step.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eSTYLE TIP\u003c/strong\u003e: To make reading the expressions in each of the ternary statement's positions easier, we wrap them in \u003ccode\u003e()\u003c/code\u003e. It is not required: it's done for readability and to prevent accidental order of operations bugs.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eThe ternary expression enables us to make a leap upward in the complexity of our expression-writing. An important thing to remember is that a ternary is an expression that, itself, is made up of three \"inner\" expressions.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Those familiar with programming languages might be wondering, why not use \u003ccode\u003eif/else\u003c/code\u003e statements. We'll work our way up to them, but for now we have the ability to implement simple conditional decisions in one line of code!\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eCongratulations, you've learned the art of conversing with JavaScript at a basic level. You should be proud of this accomplishment. Learning any programming language generally follows these same steps. It's a proven general structure for finding your bearings in a programming language. Feel free to return to it.\u003c/p\u003e  \u003cp\u003eAs you build code in future lessons, be sure to try to make tiny changes and make sure the code still works. Flatiron School has learned that the students who are most successful in our programs are those who make the most \"small hops\" away from the given content to make the content their own. Programmers usually call this \"playing with the code.\" Try swapping out a conditional expression, nesting a ternary within a ternary, turning a conditional from \u0026lt; to \u0026lt;=, etc. As you move on, make sure you continue to play with all the skills you've learned so far. If you need help making those \"small hops\" be sure to work with your community via Slack. You won't regret the investment.\u003c/p\u003e  \u003cp\u003eBy the way, doing this exact work is how most programmers orient themselves to a new language. Having the skill of getting started in a new language is a rocket booster for your career.\u003c/p\u003e  \u003cp\u003eBut to take your skills to the next level, you need to learn a new type of construction: a statement. Unlike an expression which always returns a value, statements are used to help choose which expressions to evaluate or to do repetitive tasks. That's Programming as Conversation Part II: Statements. Take a virtual high-five from us! You've come a long way!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\"\u003eConditional (ternary) operator\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"programming-with-expressions"},{"id":243571,"title":"Survey - Programming as Conversation Part 1","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Programming as Conversation Part 1 module?\u003c/p\u003e\n\u003c/div\u003e","exportId":"g272b197a89d8789e23445799e4beba75"}]},{"id":16913,"name":"Programming as Conversation Part 2: Statements","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g2e451018dfb5c7e379e1da4261f72e31","items":[{"id":157851,"title":"Programming as Conversation 2: Introduction","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-intro/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine a statement versus an expression\u003c/li\u003e \u003cli\u003eUnderstand the Default Execution Order\u003c/li\u003e \u003cli\u003eIdentify two core categories of code statements\u003c/li\u003e \u003cli\u003eProvide an example of selection statement\u003c/li\u003e \u003cli\u003eProvide an example of repetition statement\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWelcome to Programming as Conversation, Part 2! In this module, we'll be enriching the kinds of conversations we have with JavaScript. In Part 1, we learned to recognize \u003cem\u003eexpressions\u003c/em\u003e and saw that the data and operations they are comprised of are \u003cem\u003eevaluated\u003c/em\u003e to produce a result or \"return value.\" We also learned three important expressions: the constant expression, the assignment expression, and the variable lookup expression. In this next module, we'll see that evaluations of expressions, while powerful, need \u003cem\u003estatements\u003c/em\u003e to control when (sequence), whether (selection), and how many times (repetition) they are \u003cem\u003eevaluated\u003c/em\u003e. Code of this type is called a \"statement.\"\u003c/p\u003e  \u003cp\u003eWe can see a parallel between expressions and statements with how children \u003cem\u003efirst\u003c/em\u003e learn to speak and how they enrich their communication with time. Learning to talk is a gigantic achievement. It's a much-loved moment for parents when a child learns to communicate through words instead of screaming fits. In this early phase, however, some of their statements lack politeness and sensitivity.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Image_92_CookieNOW.png\" alt=\"Raw id, uncouth expression of desire for a cookie\"\u003e\u003c/p\u003e  \u003cp\u003ePart of growing in their ability to converse is learning to wrap their desires in politeness and consideration for the listener. \"Would you mind giving me a cookie?\" and \"Would you care to join me for a cookie?\" both express the same desire as our \"rougher\" example above, but show maturity.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Image_93_CookiePolite.png\" alt=\"A mannerly cookie request\"\u003e\u003c/p\u003e  \u003cp\u003eThe same is true in code: we can do a great amount of work using just \u003cem\u003eexpressions\u003c/em\u003e. However, \u003cem\u003emature\u003c/em\u003e \"speakers\" of code learn to wrap their \u003cem\u003eexpressions\u003c/em\u003e in other \u003cem\u003edecisions\u003c/em\u003e and \u003cem\u003econtext\u003c/em\u003e. This ensures not only that the right thing happens, \u003cstrong\u003e\u003cem\u003ebut also\u003c/em\u003e\u003c/strong\u003e that others can understand the code easily. Learning to \"wrap\" expressions in reader-friendly context will continue into Programming as Conversation Part 3 as well.\u003c/p\u003e  \u003cp\u003eLet's start learning how to wrap our \u003cem\u003eexpressions\u003c/em\u003e in \u003cem\u003estatements\u003c/em\u003e that will give us greater flexibility \u003cstrong\u003eand\u003c/strong\u003e enrich our communication.\u003c/p\u003e  \u003ch2\u003eDefine a Statement Versus an Expression\u003c/h2\u003e  \u003cp\u003eWe have learned that all JavaScript expressions have a return value. JavaScript statements, on the other hand, don't necessarily. We can think of a statement as an \u003cem\u003einstruction\u003c/em\u003e for some action we want to carry out.\u003c/p\u003e  \u003cp\u003eWe've already seen one type of statement: the variable declaration. A variable declaration has no return value; this is the case regardless of whether we assign a value at the time the variable is declared:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst string = \"Hello\";\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003elet string2;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003estring2 = \"World\";\u003cbr\u003e//=\u0026gt; \"World\"\u003cbr\u003estring2;\u003cbr\u003e//=\u0026gt; \"World\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eA \u003cem\u003evariable declaration\u003c/em\u003e is a statement, while a \u003cem\u003evariable assignment\u003c/em\u003e and a \u003cem\u003evariable lookup\u003c/em\u003e (as we have learned) are expressions.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you recall the previous lesson on data types, \u003ccode\u003eundefined\u003c/code\u003e is \u003cem\u003etechnically\u003c/em\u003e its own \u003cstrong\u003ething\u003c/strong\u003e in JavaScript. However, it is used to represent a \u003cem\u003elack\u003c/em\u003e of any particular value, so we treat it as such when we say that variable declaration has no return value.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eOne type of statement you will encounter frequently as you learn JavaScript is a \u003cem\u003eblock statement\u003c/em\u003e. A block statement (also called a \u003cem\u003ecode block\u003c/em\u003e) consists of one or more expressions or statements wrapped inside curly brackets (\u003ccode\u003e{}\u003c/code\u003e). We will see them in action in upcoming lessons.\u003c/p\u003e  \u003cp\u003eSome of the most commonly used statements in JavaScript and other languages allow us to alter the order in which code is evaluated, in other words, to change the \u003cem\u003edefault execution order\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eUnderstand the Default Execution Order\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Sequence_thick.png\" alt=\"Sequence Image\"\u003e\u003c/p\u003e  \u003cp\u003eJavaScript by default will read our code according to the rules of a \u003cstrong\u003edefault sequence\u003c/strong\u003e or \u003cstrong\u003edefault flow\u003c/strong\u003e: \"every line, top to bottom, left to right as ruled by order of operations.\" The \"icon\" above represents that rule. When you see it in the following lessons, you should immediately think about \"execution order.\"\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst result = 1 + 1;\u003cbr\u003eresult; //=\u0026gt; 2 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou probably have an intuitive model of the \u003cstrong\u003edefault sequence\u003c/strong\u003e since you have the general mindset that English text is read \"top to bottom, left to right\" and expect that to apply to code. It does! Isn't it nice when things meet our default assumptions?\u003c/p\u003e  \u003cp\u003eThis is why you intuitively grasp why JavaScript would throw an error with the following code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eresult; //=\u0026gt; Error\u003cbr\u003econst result = 1 + 1; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis error makes sense because this code is trying to do a variable lookup \u003cem\u003ebefore\u003c/em\u003e initializing the variable that is looked up.\u003c/p\u003e  \u003ch2\u003eIdentify Two Core Categories of Code Statements\u003c/h2\u003e  \u003cp\u003eThere are two types of statements that affect whether code is executed and in what order:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eSelection\u003c/strong\u003e: Given the default order (or \"sequence\"), can we choose to run certain lines of code and not others? How do we do so?\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eRepetition\u003c/strong\u003e: Given the default order (or \"sequence\"), can we choose to do something until a condition is met or until code has run some number of times?\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eProvide An Example of Selection Statement\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Selection_thick.png\" alt=\"Seelection Image\"\u003e\u003c/p\u003e  \u003cp\u003eAs represented in the icon above, sometimes we need to deviate from the default \u003cstrong\u003esequence\u003c/strong\u003e. We might need to \u003cstrong\u003eselect\u003c/strong\u003e a different path. There's a \u003ca href=\"https://www.poetryfoundation.org/poems/44272/the-road-not-taken\"\u003epoem by Robert Frost\u003c/a\u003e about it.\u003c/p\u003e  \u003cp\u003eIn this case, the traveler is JavaScript, traveling fatefully down the default sequence. We, as programmers, create a fork, a \"split\" in fate, and ask JavaScript to take one path (or the other, or a third, or a fourth...and so on) based on a Boolean \"test\" expression's return value. We ask JavaScript to \u003cem\u003eselect\u003c/em\u003e the path.\u003c/p\u003e  \u003cp\u003eThe first  \u003cstrong\u003eselection\u003c/strong\u003e tool we'll learn is \u003ccode\u003eif\u003c/code\u003e. The \u003ccode\u003eif\u003c/code\u003e statement disrupts the \"default sequence\" by asking JavaScript to run a test, decide whether to follow the path, and then move back to the default sequence.\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/UntimelyKnowledgeableNumerator?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003e\u003cstrong\u003eSelection\u003c/strong\u003e lets us disrupt default flow by \u003cem\u003emaking a choice\u003c/em\u003e. JavaScript evaluates the condition in the parentheses and, if it returns \u003ccode\u003etrue\u003c/code\u003e, executes the code inside the \u003cem\u003eblock\u003c/em\u003e (the code enclosed in \u003ccode\u003e{}\u003c/code\u003e). If \u003ccode\u003efavoriteNumber\u003c/code\u003e were assigned \u003ccode\u003e0\u003c/code\u003e at the time the \u003ccode\u003eif\u003c/code\u003e statement is evaluated, it would skip over the code inside the block. That's why our icon shows the default flow \"hopping\" from one point to another, skipping what's in the middle.\u003c/p\u003e  \u003cp\u003eTry changing the initial value of \u003ccode\u003efavoriteNumber\u003c/code\u003e or using a different comparison operator and see what happens.\u003c/p\u003e  \u003ch2\u003eProvide An Example of Repetition Statement\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Repetition_thick.png\" alt=\"Repetition Graphic\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eRepetition\u003c/strong\u003e lets us disrupt default flow by \u003cem\u003erepeating\u003c/em\u003e. The \u003ccode\u003ewhile\u003c/code\u003e loop, which we will introduce formally in a few lessons, means \"do something \u003ccode\u003ewhile\u003c/code\u003e (or \"as long as\") some condition is true.\" That \"something\" is held inside a code block:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/SturdyJubilantRar?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003e\u003cstrong\u003eRepetition\u003c/strong\u003e lets us disrupt default flow by marking off a set of commands that should be re-evaluated multiple times before resuming default flow. It's even possible to get into a repetition statement that you never exit. Programmers call that an \"infinite loop.\" Most of the time, that's not a desirable situation. Our icon shows the more desirable situation of us following default sequence, then finding a block that we repeat multiple times, then returning to default sequence.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThis concludes our introduction to this module. This module is like a writing class: we know how to write basic \u003cem\u003esentences\u003c/em\u003e with a simple subject and a simple verb. We're now going to try to write complete sentences with conjunctions and punctuation (like the cookie examples!). We improve our basic sentences by using SELECTION or REPETITION statements that allow us to create code that deviates from the default \"flow\" or SEQUENCE.\u003c/p\u003e","exportId":"programming-as-conversation-2-introduction"},{"id":157852,"title":"Default Sequence and Comments","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-default-sequence-and-comments\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-default-sequence-and-comments\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-default-sequence-and-comments/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRecognize the comment marker\u003c/li\u003e \u003cli\u003eAdd a comment to code\u003c/li\u003e \u003cli\u003e'Comment out' code\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eAs said in the introduction to this section:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eJavaScript by default will read our code according to the rules of a \u003cstrong\u003edefault sequence\u003c/strong\u003e or \u003cstrong\u003edefault flow\u003c/strong\u003e: \"every line, top to bottom, left to right as ruled by order of operations.\"\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eUsing SELECTION statements we can make JavaScript \"skip\" over code if some Boolean \u003cem\u003eevaluation\u003c/em\u003e is (or is not) \u003ccode\u003etrue\u003c/code\u003e. Using REPETITION statements, we can make JavaScript \"stay put\" on one line and do it over and over until some Boolean \u003cem\u003eevaluation\u003c/em\u003e is (or is not) \u003ccode\u003etrue\u003c/code\u003e. The only way to make JavaScript \"not see\" a line without a Boolean \u003cem\u003eevaluation\u003c/em\u003e at play is to \"hide\" it from JavaScript using a \u003cem\u003ecomment\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eBe sure to \"play along\" with the examples below by keying in this code into \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e. We need to build comfort with working along with the lessons.\u003c/p\u003e  \u003ch2\u003eRecognize the Comment Marker\u003c/h2\u003e  \u003cp\u003eWe can exclude a line from the \u003cstrong\u003edefault sequence\u003c/strong\u003e by starting the line with the comment marker: \u003ccode\u003e//\u003c/code\u003e. After JavaScript sees a \u003ccode\u003e//\u003c/code\u003e, it will ignore from the \u003ccode\u003e//\u003c/code\u003e to the next line.\u003c/p\u003e  \u003cp\u003eBe careful! A comment placed in the middle of an expression can confuse JavaScript.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// Don't do this:\u003cbr\u003econst sum = ( 1 //+ 1); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs a rule of thumb, try to comment out whole lines only (i.e., place the comment marker at the beginning of the line). As you get more comfortable with JavaScript, you might find clever ways to use comments, but best keep things simple for now.\u003c/p\u003e  \u003ch2\u003eAdd a Comment to Code\u003c/h2\u003e  \u003cp\u003eComments are \u003cstrong\u003eprimarily\u003c/strong\u003e used to provide references or explanations about what's going on in code.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// Perform a constant expression evaluation\u003cbr\u003e3;\u003cbr\u003e// Assign constant 3 to variable triangleSides\u003cbr\u003econst triangleSides = 3; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eComments such as these are not particularly helpful. They're just restating what the code does. More often we add comments with motivation, or references, or blog posts, or bug reports:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// From the Three Dog Night song: \"Joy to the World (Jeremiah was a Bullfrog)\"\u003cbr\u003econst lineOne = \"Joy to the world\";\u003cbr\u003econst lineTwo = \"All the boys and girls\";\u003cbr\u003econst lineThree = \"Joy to the fishes in the deep blue sea\";\u003cbr\u003econst lineFour = \"Joy to you and me\";\u003cbr\u003e\u003cbr\u003e// The '\\n' inserts a new line into the string\u003cbr\u003econst chorus = `${lineOne}\\n${lineTwo}\\n${lineThree}\\n${lineFour}`;\u003cbr\u003e\u003cbr\u003echorus; \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eA-HA! Moment\u003c/strong\u003e. Recall that the \"return value\" documentation shorthand \u003ccode\u003e//=\u0026gt;\u003c/code\u003e starts with a comment marker. This indicates that what's after \u003ccode\u003e//\u003c/code\u003e is not part of the code itself. That's why it's used as an \"in-code\" documentation convention.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eComment Out code\u003c/h2\u003e  \u003cp\u003eAnother way to use comments is to \"comment out\" code, to \"hide\" or \"mute\" buggy or unused code from the \u003cstrong\u003edefault sequence\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eWith our current code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst lineOne = \"Joy to the world\";\u003cbr\u003econst lineTwo = \"All the boys and girls\";\u003cbr\u003econst lineThree = \"Joy to the fishes in the deep blue sea\";\u003cbr\u003econst lineFour = \"Joy to you and me\";\u003cbr\u003e\u003cbr\u003econst chorus = `${lineOne}\\n${lineTwo}\\n${lineThree}\\n${lineFour}`;\u003cbr\u003e\u003cbr\u003echorus; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eDefault sequence\u003c/strong\u003e satisfies our expectations by returning:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eJoy to the world\u003cbr\u003eAll the boys and girls\u003cbr\u003eJoy to the fishes in the deep blue sea\u003cbr\u003eJoy to you and me \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow let's \"comment out\" \u003ccode\u003elineThree\u003c/code\u003e. We'll also need to modify \u003ccode\u003echorus\u003c/code\u003e accordingly. (If you aren't sure why, try \u003cstrong\u003ejust\u003c/strong\u003e commenting out \u003ccode\u003elineThree\u003c/code\u003e in your REPL and see what happens when you run the code.) We'll comment out the current version of \u003ccode\u003echorus\u003c/code\u003e to save it and modify a copy:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst lineOne = \"Joy to the world\";\u003cbr\u003econst lineTwo = \"All the boys and girls\";\u003cbr\u003e//const lineThree = \"Joy to the fishes in the deep blue sea\";\u003cbr\u003econst lineFour = \"Joy to you and me\";\u003cbr\u003e\u003cbr\u003e// const chorus = `${lineOne}\\n${lineTwo}\\n${lineThree}\\n${lineFour}`;\u003cbr\u003econst chorus = `${lineOne}\\n${lineTwo}\\n${lineFour}`;\u003cbr\u003e\u003cbr\u003echorus;\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we run this code, it returns:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eJoy to the world\u003cbr\u003eAll the boys and girls\u003cbr\u003eJoy to you and me \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we want to go back to the original version, we simply \"comment back in\" \u003ccode\u003elineThree\u003c/code\u003e and the original \u003ccode\u003echorus\u003c/code\u003e variable, and comment out or delete the modified version of \u003ccode\u003echorus\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf we want to comment out \u003cem\u003emultiple\u003c/em\u003e lines, we can either place the comment marker at the beginning of each line, \u003cem\u003eor\u003c/em\u003e we can wrap the lines with \u003ccode\u003e/*\u003c/code\u003e and \u003ccode\u003e*/\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e/*\u003cbr\u003econst lineOne = \"Joy to the world\";\u003cbr\u003econst lineTwo = \"All the boys and girls\";\u003cbr\u003econst lineThree = \"Joy to the fishes in the deep blue sea\"; \u003cbr\u003e*/\u003cbr\u003econst lineFour = \"Joy to you and me\";\u003cbr\u003e\u003cbr\u003elineFour; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's common for developers to test two code paths (in effect, doing a selection statement's work by hand!) by \"commenting out\" and \"commenting back in\" code.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThe \u003cstrong\u003edefault sequence\u003c/strong\u003e is how JavaScript reads and executes each of the statements and commands in JavaScript code. To \"hide\" a line of code from being seen by the JavaScript engine, start the line with the comment marker \u003ccode\u003e//\u003c/code\u003e. We use comments to provide lightweight documentation or to hide code while we debug or test it.\u003c/p\u003e","exportId":"default-sequence-and-comments"},{"id":157854,"title":"Selection with Conditionals: the if Statement","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-selection-with-conditionals\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-selection-with-conditionals/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-selection-with-conditionals\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-selection-with-conditionals/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eLearn to use the \u003ccode\u003eif\u003c/code\u003e statement\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've covered the default sequence the JavaScript engine follows when reading and executing JavaScript code. We've also learned that there are two types of statements that will enable us to change the default sequence: \u003cstrong\u003eselection\u003c/strong\u003e statements and \u003cstrong\u003erepetition\u003c/strong\u003e statements. In this lesson and the next one, we'll learn more about \u003cstrong\u003eselection\u003c/strong\u003e statements, i.e., conditionals.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Selection_thick.png\" alt=\"Seelection Image\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eConditional\u003c/strong\u003e statements enable us to execute code if a certain condition is true (or false). Some real-life examples might look like:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eif\u003c/code\u003e hungry → make a meal.  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eelse\u003c/code\u003e → don't make a meal.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eif\u003c/code\u003e light is green → press gas pedal.  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eelse\u003c/code\u003e → press brake pedal.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eif\u003c/code\u003e it's the first of the month → pay the bill.  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eelse\u003c/code\u003e → don't pay the bill.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou might also hear this referred to as \u003cstrong\u003econtrol flow\u003c/strong\u003e because it helps control the flow (i.e., sequence) of an application.\u003c/p\u003e  \u003cp\u003eJavaScript includes three structures for implementing code conditionally: \u003cem\u003eif statements\u003c/em\u003e, \u003cem\u003eswitch statements\u003c/em\u003e, and \u003cem\u003eternary expressions\u003c/em\u003e. In this lesson, we will learn how to construct \u003ccode\u003eif\u003c/code\u003e statements.\u003c/p\u003e  \u003ch2\u003eLearn to Use the \u003ccode\u003eif\u003c/code\u003e Statement\u003c/h2\u003e  \u003cp\u003eTo write a basic \u003ccode\u003eif\u003c/code\u003e statement, we use the following structure:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif (condition) {\u003cbr\u003e  // Block of code\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt consists of the \u003ccode\u003eif\u003c/code\u003e keyword followed by the condition to be checked in parentheses.  After that comes a \u003cem\u003eblock statement\u003c/em\u003e (more commonly called a \u003cem\u003ecode block\u003c/em\u003e): one or more JavaScript expressions or statements enclosed in \u003ccode\u003e{}\u003c/code\u003e. The \u003cem\u003ecode block\u003c/em\u003e contains the code we want to execute \u003cem\u003eif\u003c/em\u003e the condition returns a truthy value:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/StormyColorlessArea?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eIn the code above, age is initialized to 30, so the condition (\u003ccode\u003eage \u0026gt;= 18\u003c/code\u003e) resolves to \u003ccode\u003etrue\u003c/code\u003e. The code in the code block executes, setting the \u003ccode\u003eisAdult\u003c/code\u003e variable to \u003ccode\u003etrue\u003c/code\u003e. Try making some changes — assigning different values to \u003ccode\u003eage\u003c/code\u003e; changing the conditional statement — to see what happens.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eelse\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eOften we want to run one block of code when the condition returns a \u003ccode\u003etruthy\u003c/code\u003e value and a \u003cem\u003edifferent\u003c/em\u003e block of code when it returns a \u003ccode\u003efalsey\u003c/code\u003e value. To do this, we use an \u003ccode\u003eelse\u003c/code\u003e clause:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/CarefulSteepDefinition?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eNote that the \u003ccode\u003eelse\u003c/code\u003e clause \u003cstrong\u003edoes not take a condition\u003c/strong\u003e — if the condition for the \u003ccode\u003eif\u003c/code\u003e returns a falsey value, we want the \u003ccode\u003eelse\u003c/code\u003e code block to run \u003cstrong\u003eno matter what\u003c/strong\u003e. This means that exactly one of the code blocks will \u003cem\u003ealways\u003c/em\u003e run.\u003c/p\u003e  \u003ch3\u003eThe Ternary Expression\u003c/h3\u003e  \u003cp\u003eRecall that this is the exact situation where we can use a ternary expression. Here's what the code above would look like using a ternary:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/ReadyOnerlookedArray?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eHere, we assign \u003ccode\u003eisAdult\u003c/code\u003e as \u003ccode\u003etrue\u003c/code\u003e if the condition returns a truthy value and as \u003ccode\u003efalse\u003c/code\u003e otherwise, exactly like the version using \u003ccode\u003eif\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eRemember that a ternary is an \u003cem\u003eexpression\u003c/em\u003e — it returns a \u003cem\u003evalue\u003c/em\u003e. What this means is that we can simplify the code above a bit and assign the \u003cem\u003eresult\u003c/em\u003e of the ternary directly to a variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 26;\u003cbr\u003econst isAdult = age \u0026gt;= 18 ? true : false;\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e//=\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe ternary expression is evaluated and resolved to \u003ccode\u003etrue\u003c/code\u003e, and that value is assigned to the variable \u003ccode\u003eisAdult\u003c/code\u003e. Try this version out in the REPL to verify that it works.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e What is the ternary above doing? Basically, it's saying: \"when the conditional code returns \u003ccode\u003etrue\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e, and when the conditional code returns \u003ccode\u003efalse\u003c/code\u003e, return \u003ccode\u003efalse\u003c/code\u003e.\" Sounds a bit redundant, doesn't it? When the return values are \u003ccode\u003etrue\u003c/code\u003e and \u003ccode\u003efalse\u003c/code\u003e as in the example above, you actually don't need to use a ternary — or an \u003ccode\u003eif...else\u003c/code\u003e — at all! This is because \u003cstrong\u003e\u003cem\u003ethe conditional is an expression as well\u003c/em\u003e\u003c/strong\u003e. The return value of \u003ccode\u003eage \u0026gt;= 18\u003c/code\u003e is a \u003cem\u003eBoolean value\u003c/em\u003e (\u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e), so it can be assigned directly to our \u003ccode\u003eisAdult\u003c/code\u003e variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 6;\u003cbr\u003econst isAdult = age \u0026gt;= 18;\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e//=\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe ternary (or \u003ccode\u003eif...else\u003c/code\u003e) is only necessary if the desired return value is something other than a Boolean:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 20;\u003cbr\u003econst ageMessage = age \u0026gt;= 18 ? \"Congratulations! You're an adult!\" : \"Enjoy your childhood while it lasts!\";\u003cbr\u003e\u003cbr\u003eageMessage;\u003cbr\u003e//=\u0026gt; \"Congratulations! You're an adult!\" \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e Be careful to not overuse the ternary expression. It's fine for slimming down a simple \u003ccode\u003eif...else\u003c/code\u003e, but be conscious of how easy your code is to understand for an outsider. Remember, you generally write code once, but it gets read (by yourself and others) \u003cstrong\u003efar\u003c/strong\u003e more than once. The ternary is often more difficult to quickly interpret than a regular old \u003ccode\u003eif...else\u003c/code\u003e, so make sure the reduction in code is worth any potential reduction in readability.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003e\u003ccode\u003eelse if\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eWe've discussed the case where our condition is \u003cem\u003ebinary\u003c/em\u003e (one code block executes if the conditional returns true and a second executes otherwise), but sometimes we need to check multiple conditions. We can handle this situation by using one or more \u003ccode\u003eelse if\u003c/code\u003e clauses.\u003c/p\u003e  \u003cp\u003eLet's say that instead of just deciding whether the passed-in \u003ccode\u003eage\u003c/code\u003e meets the criterion for \u003ccode\u003eisAdult\u003c/code\u003e, we want to add in some other examples of adulthood (in American society, at least): \u003ccode\u003ecanWork\u003c/code\u003e, \u003ccode\u003ecanEnlist\u003c/code\u003e, and \u003ccode\u003ecanDrink\u003c/code\u003e. 16-year-olds can legally work; 18-year-olds can do what 16-year-olds can do \u003cstrong\u003eplus\u003c/strong\u003e they can enlist and they are legal adults; 21-year-olds can do what 16- and 18-year-olds can do \u003cstrong\u003eplus\u003c/strong\u003e they can drink (at the federally set minimum age).\u003c/p\u003e  \u003cp\u003eHere's how we can handle that using \u003ccode\u003eelse if\u003c/code\u003e clauses:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/AccomplishedEmbellishedCheckpoint?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eAny time you use an \u003ccode\u003eif...else if\u003c/code\u003e construction, \u003cstrong\u003eat most one code block will be executed\u003c/strong\u003e. As soon as one of the conditions returns a truthy value, the attached code block runs and the conditional statement ends. In the example above, we have not included an \u003ccode\u003eelse\u003c/code\u003e statement so, if none of the conditions is truthy, no code blocks will be run. If we had included an \u003ccode\u003eelse\u003c/code\u003e clause, exactly one code block would be run.\u003c/p\u003e  \u003cp\u003eTry different values for \u003ccode\u003eage\u003c/code\u003e in the REPL and check the resulting values of the four variables.\u003c/p\u003e  \u003ch3\u003eNested \u003ccode\u003eif\u003c/code\u003e Statements\u003c/h3\u003e  \u003cp\u003eYou may have noticed that there is some redundancy in the example above: three of the four variables appear in more than one of the conditions. In this circumstance, we can streamline our code a bit by using nested conditional statements:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/SerpentineOddInterpreter?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eThe first \u003ccode\u003eif\u003c/code\u003e condition checks for the \"base level\" of adulthood (\u003ccode\u003eage \u0026gt;= 16\u003c/code\u003e), and each subsequent nested \u003ccode\u003eif\u003c/code\u003e \"adds on.\" Note that each inner \u003ccode\u003eif\u003c/code\u003e statement is nested \u003cstrong\u003einside\u003c/strong\u003e the code block of the one before. This means that the inner \u003ccode\u003eif\u003c/code\u003e statements will only execute if the outer ones are truthy. This makes sense: if age is less than 16, we're done — there's no need to check the remaining conditions because we know they have to be false as well. Otherwise JavaScript will keep checking each subsequent condition until it either comes to one that is false or finishes running all the code blocks.\u003c/p\u003e  \u003cp\u003eWhile nested \u003ccode\u003eif\u003c/code\u003es are more efficient than \u003ccode\u003eif...else if\u003c/code\u003es for handling overlapping categories, they are also more difficult to read. An \u003ccode\u003eif...else if\u003c/code\u003e construction will always work. You should consider the tradeoff of readability vs. efficiency in deciding which construction to use.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we've learned about one of the \u003cem\u003eselection statements\u003c/em\u003e that enable us to modify the \u003cem\u003edefault sequence\u003c/em\u003e: the \u003ccode\u003eif\u003c/code\u003e statement. In the simplest case, the \u003ccode\u003eif\u003c/code\u003e statement consists of the \u003ccode\u003eif\u003c/code\u003e clause, a condition, and a code block to run if the condition returns \u003ccode\u003etrue\u003c/code\u003e. In more complex situations, we can add one or more \u003ccode\u003eelse if\u003c/code\u003e clauses or an \u003ccode\u003eelse\u003c/code\u003e clause.\u003c/p\u003e  \u003cp\u003eIn the next lesson, we'll learn about another selection statement we can use to create conditional code: the \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#Conditional_statements\"\u003eConditional statements\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"\u003e\u003ccode\u003eif...else\u003c/code\u003e statement\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"selection-with-conditionals-the-if-statement"},{"id":157856,"title":"Variation on Selection","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-switch-statements\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-switch-statements/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-switch-statements\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-switch-statements/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn to use the \u003ccode\u003eswitch\u003c/code\u003e statement\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've now learned about two of the three \u003cem\u003eselection\u003c/em\u003e tools available to us in\nJavaScript: the \u003ccode\u003eif\u003c/code\u003e statement and the \u003ccode\u003eternary\u003c/code\u003e expression. In this lesson,\nwe'll learn about a third: the \u003ccode\u003eswitch\u003c/code\u003e statement. The \u003ccode\u003eswitch\u003c/code\u003e statement\nprovides an alternate way of expressing conditional code that is less repetitive\nin cases where you want to test multiple conditions against a single value.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-2/sequence-and-comments/Selection_thick.png\" alt=\"Seelection Image\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eLearn to Use the Switch Statement\u003c/h2\u003e\n\n\u003cp\u003eLet's say we have a program that includes a variable containing a person's name\nand we want to execute certain code depending on what that person's name is.\nUsing an \u003ccode\u003eif...else if\u003c/code\u003e construction, that might look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst name = \"Alice\";\u003cbr\u003elet greeting;\u003cbr\u003e\u003cbr\u003eif (name === \"Alice\") {\u003cbr\u003e  greeting = \"Hello, Alice!\"\u003cbr\u003e} else if (name === \"The White Rabbit\") {\u003cbr\u003e  greeting = \"Don't be late, White Rabbit\"\u003cbr\u003e} else if (name === \"The Mad Hatter\") {\u003cbr\u003e  greeting = \"Welcome to the tea party, Mad Hatter\"\u003cbr\u003e} else if (name === \"The Queen of Hearts\") {\u003cbr\u003e  greeting = \"Please don't chop off my head!\"\u003cbr\u003e} else {\u003cbr\u003e  greeting = \"Whoooo are you?\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003egreeting;\u003cbr\u003e//=\u0026gt; \"Hello, Alice!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs we can see, there's quite a bit of repetition here: we always test \u003ccode\u003ename\u003c/code\u003e and\nwe always compare with \u003ccode\u003e===\u003c/code\u003e. This is a pretty common selection need. It's so\nstandard that the \u003ccode\u003eswitch\u003c/code\u003e statement was created to enable us to streamline our\ncode. Here's the \u003ccode\u003eswitch\u003c/code\u003e version of the code above:\u003c/p\u003e\n\n\u003cp\u003e\u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/PreemptiveSlipperyPassword?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\n\u003cp\u003eThe JavaScript engine compares the value passed in to the \u003ccode\u003eswitch\u003c/code\u003e statement\n(here, \u003ccode\u003ename\u003c/code\u003e) against each of the \u003ccode\u003ecase\u003c/code\u003e values \u003cem\u003eusing strict equality\u003c/em\u003e\n(\u003ccode\u003e===\u003c/code\u003e). When a match is found, the statements nested under that \u003ccode\u003ecase\u003c/code\u003e are\nexecuted. In this example, by using the \u003ccode\u003eswitch\u003c/code\u003e statement, we avoid the need to\nrepeat the \u003ccode\u003eif (name === _____)\u003c/code\u003e line for each possibility.\u003c/p\u003e\n\n\u003cp\u003eWe can also assign the same set of statements to multiple cases:\u003c/p\u003e\n\n\u003cp\u003e\u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/AgedTubbyUserinterface?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the above example, if the \u003ccode\u003ename\u003c/code\u003e variable matches the names of any of the\ndwarves, the \u003ccode\u003echaracterType\u003c/code\u003e variable will be set to \"dwarf\".\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003edefault\u003c/code\u003e and \u003ccode\u003ebreak\u003c/code\u003e keywords are both \u003cem\u003eoptional\u003c/em\u003e in \u003ccode\u003eswitch\u003c/code\u003e statements,\nbut can be useful. In more complicated statements, they become necessary to\nensure the correct flow.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003edefault\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003edefault\u003c/code\u003e keyword is similar to the \u003ccode\u003eelse\u003c/code\u003e clause in an \u003ccode\u003eif...else\u003c/code\u003e\nconstruction. It specifies a set of statements to run after all of the \u003ccode\u003eswitch\u003c/code\u003e\nstatement's \u003ccode\u003ecase\u003c/code\u003es have been checked. However, it is different from an \u003ccode\u003eelse\u003c/code\u003e\nin that \u003cstrong\u003ethe only time it does \u003cem\u003enot\u003c/em\u003e run is if the engine hits a \u003ccode\u003ebreak\u003c/code\u003e in one\nof the \u003ccode\u003ecase\u003c/code\u003e statements\u003c/strong\u003e. If you only want one code block in your \u003ccode\u003eswitch\u003c/code\u003e\nstatement to execute, you should always include the \u003ccode\u003ebreak\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eIn the previous example, \u003ccode\u003ebreak\u003c/code\u003e is used to stop the \u003ccode\u003eswitch\u003c/code\u003e statement from\ncontinuing to look at case statements once it finds a match. If we left out the\n\u003ccode\u003ebreak\u003c/code\u003e keywords, the \"Grumpy\" case would match and \"dwarf\" would be assigned to\n\u003ccode\u003echaracterType\u003c/code\u003e. However, since we didn't break after that assignment, the code\nwould continue to execute and \u003ccode\u003echaracterType\u003c/code\u003e would wind up being reset to\n\"minor character.\" To keep that from happening, we use \u003ccode\u003ebreak\u003c/code\u003e to tell the\nJavaScript engine to stop executing the \u003ccode\u003eswitch\u003c/code\u003e statement as soon as it finds a\nmatch. You will often see switch statements where \u003ccode\u003ebreak\u003c/code\u003e is used in every case\nas a way to ensure there is no unexpected behavior from multiple cases\nexecuting.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e Sometimes we \u003cem\u003ewant\u003c/em\u003e to potentially match multiple cases, and we\nwill need to leave out \u003ccode\u003ebreak\u003c/code\u003e in order to do this. Let's revisit an example\nfrom the lesson on \u003ccode\u003eif\u003c/code\u003e statements:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst age = 20;\u003cbr\u003elet isAdult, canWork, canEnlist, canDrink;\u003cbr\u003e\u003cbr\u003eif (age \u0026gt;= 21) {\u003cbr\u003e  isAdult = true;\u003cbr\u003e  canWork = true;\u003cbr\u003e  canEnlist = true;\u003cbr\u003e  canDrink = true;\u003cbr\u003e} else if (age \u0026gt;= 18) {\u003cbr\u003e  isAdult = true;\u003cbr\u003e  canWork = true;\u003cbr\u003e  canEnlist = true;\u003cbr\u003e} else if (age \u0026gt;= 16) {\u003cbr\u003e  canWork = true;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanWork;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanEnlist;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanDrink;\u003cbr\u003e// =\u0026gt; undefined\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can refactor the above \u003ccode\u003eif...else if...else\u003c/code\u003e chain as a more compact, less\nrepetitious \u003ccode\u003eswitch\u003c/code\u003e statement. To make it work, we will employ a neat little\ntrick: we'll use comparisons for our \u003ccode\u003ecase\u003c/code\u003e statements instead of a simple\nvalue.\u003c/p\u003e\n\n\u003cp\u003e\u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/CleanMammothUsers?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\n\u003cp\u003eWe specified \u003ccode\u003etrue\u003c/code\u003e as the value to \u003ccode\u003eswitch\u003c/code\u003e on. All of our \u003ccode\u003ecase\u003c/code\u003es are\n\u003cem\u003ecomparison expressions\u003c/em\u003e that return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. Therefore, if a\ncomparison returns \u003ccode\u003etrue\u003c/code\u003e, its statements will be run. Because we did not include\nany \u003ccode\u003ebreak\u003c/code\u003e statements, once \u003cem\u003eone\u003c/em\u003e case statement matches, all subsequent\nstatements will execute. This is what we want here: if \u003ccode\u003eage\u003c/code\u003e is greater than 21,\nit's also greater than 18 and 16, so we want \u003cem\u003eall\u003c/em\u003e the assignments to be made.\u003c/p\u003e\n\n\u003cp\u003eIf we set \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e20\u003c/code\u003e in the above example, the first \u003ccode\u003ecase\u003c/code\u003e, \u003ccode\u003eage \u0026gt;= 21\u003c/code\u003e,\nreturns \u003ccode\u003efalse\u003c/code\u003e and the assignment of \u003ccode\u003ecanDrink\u003c/code\u003e never happens. The engine then\nproceeds to the next \u003ccode\u003ecase\u003c/code\u003e, \u003ccode\u003eage \u0026gt;= 18\u003c/code\u003e, which returns \u003ccode\u003etrue\u003c/code\u003e, assigning the\nvalue \u003ccode\u003etrue\u003c/code\u003e to \u003ccode\u003eisAdult\u003c/code\u003e and \u003ccode\u003ecanEnlist\u003c/code\u003e. Since it encounters no \u003ccode\u003ebreak\u003c/code\u003e\nstatement, it then proceeds to the last case statement where \u003ccode\u003ecanWork\u003c/code\u003e is set to\ntrue as well.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eYou now have three different tools available to you to use \u003cem\u003eselection\u003c/em\u003e in\nJavaScript: the \u003ccode\u003eif\u003c/code\u003e statement, the \u003ccode\u003eternary\u003c/code\u003e expression, and the \u003ccode\u003eswitch\u003c/code\u003e\nstatement. The \u003ccode\u003eif\u003c/code\u003e statement is the one you will use most often — in\nfact, you can \u003cem\u003ealways\u003c/em\u003e construct your conditional code using some combination of\n\u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse if\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e. It may not be the most efficient way to write the\ncode, but it will always do the trick.\u003c/p\u003e\n\n\u003cp\u003eAs a rule of thumb, you may find it makes sense to start with \u003ccode\u003eif\u003c/code\u003e statements\nand, once you've got the code working, consider refactoring it to use a ternary\nor switch statement if they're better suited for what you need to do.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMDN\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003e\u003ccode\u003eswitch\u003c/code\u003e statement\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"variation-on-selection"},{"id":157858,"title":"Logging in JavaScript","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-logging-in-javascript\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-logging-in-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-logging-in-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eLearn about logging in JavaScript\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003econsole.log()\u003c/code\u003e in the development process\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003econsole.log()\u003c/code\u003e for debugging\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eLogging\u003c/h2\u003e  \u003cp\u003eThe venerable \u003ccode\u003econsole.log()\u003c/code\u003e is an all-purpose logging \u003cem\u003emethod\u003c/em\u003e. (A \u003cstrong\u003emethod\u003c/strong\u003e or a \u003cstrong\u003efunction\u003c/strong\u003e is a bit of code that \u003cem\u003edoes\u003c/em\u003e something. We \u003cem\u003ecall\u003c/em\u003e them when we want them to act.) In programming, \u003cem\u003elogging\u003c/em\u003e refers to the process of printing information about the program as it runs. Note that \u003ccode\u003econsole.log()\u003c/code\u003e is a \u003cem\u003edevelopment\u003c/em\u003e tool; it's not something that's used in deployed code.\u003c/p\u003e  \u003cp\u003eLet's take a look at how it works. Open up \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e and follow along.\u003c/p\u003e  \u003cp\u003eNotice, when the REPL opens, that they've already provided an example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log('Hello, world!'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you click the Run button, you'll see the message output in the terminal.\u003c/p\u003e  \u003cp\u003eWe can log more than just a simple message. In fact, we can pass any number of messages to \u003ccode\u003econsole.log()\u003c/code\u003e by separating them with commas; when printed, they'll be separated by a space:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log('one', 'two', 'three'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd we can pass other types of values to \u003ccode\u003econsole.log()\u003c/code\u003e, not just strings. Give this a try:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(\"I must have logged\", 1000, \"times today.\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that, for that first string (\"I must have logged\"), the comma is \u003cem\u003eafter\u003c/em\u003e the end quotation mark. This is because the comma is not part of the string; instead, it's how we tell JavaScript, \"Hey, I'm going to give you something else!\"\u003c/p\u003e  \u003cp\u003eWe can also pass \u003cem\u003evariables\u003c/em\u003e to \u003ccode\u003econsole.log()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst name = \"Byron the Poodle\";\u003cbr\u003econsole.log(\"Hello,\", name); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn fact, we can log any \u003cem\u003eexpression\u003c/em\u003e — even very complex ones — using \u003ccode\u003econsole.log()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eUsing \u003ccode\u003econsole.log()\u003c/code\u003e in the Development Process\u003c/h2\u003e  \u003cp\u003eWhere \u003ccode\u003econsole.log()\u003c/code\u003e gets really helpful is when you use it to check that your code is functioning as you want it to. Let's revisit an example from an earlier lesson:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/PaltryEqualMicroinstruction?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eLet's say we want to run some tests to make sure that we have our \u003ccode\u003eif\u003c/code\u003e statement set up properly. We can do this by checking the values of the four variables for different values of \u003ccode\u003eage\u003c/code\u003e. Recall that, when we worked with this code before, we had to check each of our variables one at a time since only the value of the \u003cem\u003elast\u003c/em\u003e executed expression is displayed in the REPL's terminal window. This can get pretty tedious, especially if we have a lot of variables or a lot of conditions (or both). Here's where \u003ccode\u003econsole.log()\u003c/code\u003e comes in.\u003c/p\u003e  \u003cp\u003eLet's add the following to the end of our code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(canWork, canEnlist, isAdult, canDrink); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNext, let's set the \u003ccode\u003eage\u003c/code\u003e variable to a value of 16 and click the run button. You should see the following output to the terminal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etrue false false false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt looks like our code is working if \u003ccode\u003eage\u003c/code\u003e is set to 16, but our message could be a little more informative. We can see that only one of the variables is \u003ccode\u003etrue\u003c/code\u003e, which is what we want, but it's not immediately apparent \u003cem\u003ewhich\u003c/em\u003e of the variables is the one that's \u003ccode\u003etrue\u003c/code\u003e. So let's add some labels. To do this, we'll use a combination of strings and variables inside our \u003ccode\u003econsole.log()\u003c/code\u003e. While we're at it, let's log the \u003ccode\u003eage\u003c/code\u003e value as well:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(\"Age:\", age, \"Can work:\", canWork, \"Can enlist:\", canEnlist, \"Is a legal adult:\", isAdult, \"Can drink:\", canDrink); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis looks complicated, but all we're doing here is stringing together a series of expressions — some of them simple string values, and some of them variables — with commas between each one.\u003c/p\u003e  \u003cp\u003eAlternatively, we can use string interpolation inside our \u003ccode\u003econsole.log()\u003c/code\u003e to do the same thing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(`Age: ${age}, Can work: ${canWork}, Can enlist: ${canEnlist}, Is a legal adult: ${isAdult}, Can drink: ${canDrink}`); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith this approach, we're passing \u003cem\u003ea single expression\u003c/em\u003e to \u003ccode\u003econsole.log()\u003c/code\u003e instead of a series of them. The commas here, therefore, are part of the string. Be sure to run both versions in the REPL so you can see the difference.\u003c/p\u003e  \u003cp\u003eIf we were writing user-facing code here, we would probably want to make it easier to read by putting each variable on its own line. We could do that either by using multiple \u003ccode\u003econsole.log()\u003c/code\u003es, or by using the new line character (\u003ccode\u003e\\n\u003c/code\u003e). But since the \u003ccode\u003econsole.log()\u003c/code\u003e is just for our (the developer's) use, the above may be perfectly acceptable.\u003c/p\u003e  \u003cp\u003eWith this \u003ccode\u003econsole.log()\u003c/code\u003e set up we can try our code with as many age values as we like, checking each time to verify that the variables have been set correctly.\u003c/p\u003e  \u003ch2\u003eUsing \u003ccode\u003econsole.log()\u003c/code\u003e for Debugging\u003c/h2\u003e  \u003cp\u003eLet's say we've gotten our code to this point:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/BelatedMustyGzip?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eWe have our \u003ccode\u003econsole.log()\u003c/code\u003e set up and we're ready to start testing it. We decide to start with our 'least adult' category, which is children under age 16, so we set \u003ccode\u003eage\u003c/code\u003e equal to 15 and click run. Everything looks fine — we get four \u003ccode\u003efalse\u003c/code\u003es — so we change \u003ccode\u003eage\u003c/code\u003e to 16, then 17. So far, so good. But then when we test it for an \u003ccode\u003eage\u003c/code\u003e of 18, we see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eAge: 18\u003cbr\u003eCan work: true\u003cbr\u003eCan enlist: false\u003cbr\u003eIs a legal adult: false\u003cbr\u003eCan drink: false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHmm, obviously we've got an error somewhere. The code for ages 18-20 isn't returning the expected result, so let's take a look at that conditional: \u003ccode\u003eelse if (age \u0026gt; 18)\u003c/code\u003e. With a simple condition like this, we might realize right away that we accidentally used \u003ccode\u003e\u0026gt;\u003c/code\u003e instead of \u003ccode\u003e\u0026gt;=\u003c/code\u003e. But imagine a case where our condition is more complex and we don't immediately see the problem. Let's think about some ideas for ways we can use \u003ccode\u003econsole.log()\u003c/code\u003e to help us find and correct it.\u003c/p\u003e  \u003cp\u003eTo start, we could try logging a message \u003cem\u003einside\u003c/em\u003e the block for the condition where the error is (ie, inside the block that \u003cem\u003eshould\u003c/em\u003e be executing):\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/EnormousIcyTriangle?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf we click the Run button, the message does \u003cem\u003enot\u003c/em\u003e get logged so we know the code block is not getting executed. This tells us that there's something wrong with the conditional itself. If the message \u003cem\u003edid\u003c/em\u003e get logged we would know that the problem is somewhere inside the code block instead.\u003c/p\u003e  \u003cp\u003eNext, we could try changing \u003ccode\u003eage\u003c/code\u003e to 19. In this case, the message \u003cem\u003edoes\u003c/em\u003e get logged, so we know our conditional is only broken for age 18. This gives us another clue as to how to fix it.\u003c/p\u003e  \u003cp\u003eIf we had a more complicated conditional and still couldn't find the problem, we could try logging the conditional itself, simplifying it one step at a time until it \u003cem\u003edoes\u003c/em\u003e return \u003ccode\u003etrue\u003c/code\u003e. As soon as we get a \u003ccode\u003etrue\u003c/code\u003e return value, we know that the last thing we removed was what was causing the problem. For example, if our overall condition is comprised of two conditions joined by \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, we could check each expression individually. Whichever one returns \u003ccode\u003efalse\u003c/code\u003e instead of \u003ccode\u003etrue\u003c/code\u003e is the one with the problem. We could then continue to \"drill down\" as necessary until we find what's wrong.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Even better, we can use \u003ccode\u003econsole.log()\u003c/code\u003e as we're building the conditional in the first place, using an approach like the one outlined below. Only after you have the conditions working the way you need them to would you begin building out the code blocks. Taking this incremental approach will make it much easier to find and fix any errors.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif ([condition 1]) {\u003cbr\u003e    console.log(\"Condition 1 returned true\")\u003cbr\u003e} else if ([condition 2]) {\u003cbr\u003e   console.log(\"Condition 2 returned true\")\u003cbr\u003e} ... \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e  \u003cp\u003eYou should think of the ideas presented above as examples of a general approach to debugging. Debugging is largely a matter of using \u003cem\u003elogic\u003c/em\u003e to narrow in on the problematic bit of code until you find the error. It is worth getting comfortable using \u003ccode\u003econsole.log()\u003c/code\u003e because it can be a valuable tool in this process.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we've learned how to use the \u003ccode\u003econsole.log()\u003c/code\u003e method. We've also explored some ways we can use it to help us with writing and debugging code.\u003c/p\u003e","exportId":"logging-in-javascript"},{"id":157859,"title":"Repetition: the while Loop","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-while-loop\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-while-loop\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-while-loop/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine the basic \u003ccode\u003ewhile\u003c/code\u003e structure\u003c/li\u003e \u003cli\u003eWrite an infinite loop\u003c/li\u003e \u003cli\u003eUse Control-C to break out of an infinite loop\u003c/li\u003e \u003cli\u003eTerminate a \u003ccode\u003ewhile\u003c/code\u003e loop naturally\u003c/li\u003e \u003cli\u003eLearn about operators used to increment/decrement\u003c/li\u003e \u003cli\u003eUse a \u003ccode\u003edo...while\u003c/code\u003e loop\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThe final piece of using \u003cem\u003estatements\u003c/em\u003e to control the flow of JavaScript execution is \u003cstrong\u003erepetition\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Repetition_thick.png\" alt=\"Repetition Graphic\"\u003e\u003c/p\u003e  \u003cp\u003eWhile the \u003cstrong\u003edefault sequence\u003c/strong\u003e requires JavaScript to execute top-down, left to right, we've seen that we can skip chunks of code using \u003cem\u003eselection\u003c/em\u003e statements (\u003ccode\u003eif\u003c/code\u003e or \u003ccode\u003eswitch\u003c/code\u003e). In some ways the reverse of \u003cem\u003eselection\u003c/em\u003e is \u003cem\u003erepetition\u003c/em\u003e: \"Don't move on,\" we tell JavaScript. \"Instead do something else until I say it's OK to move on.\" The most fundamental \u003cem\u003erepetition\u003c/em\u003e construct, present in pretty much every programming language, is the \u003ccode\u003ewhile\u003c/code\u003e loop.\u003c/p\u003e  \u003ch2\u003eDefine the Basic \u003ccode\u003ewhile\u003c/code\u003e Structure\u003c/h2\u003e  \u003cp\u003eA basic \u003ccode\u003ewhile\u003c/code\u003e loop looks like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewhile (condition expression) {\u003cbr\u003e // stuff to do\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs long as the condition expression is \u003ccode\u003etrue\u003c/code\u003e (or truthy), the code inside the code block will run. Keep in mind the condition expression can be quite rich, using \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, \u003ccode\u003e||\u003c/code\u003e, \u003ccode\u003e()\u003c/code\u003e, etc.\u003c/p\u003e  \u003ch2\u003eWrite an Infinite Loop\u003c/h2\u003e  \u003cp\u003eGiven this definition of \u003ccode\u003ewhile\u003c/code\u003e, any truthy expression will make the loop run forever.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewhile (true) {\u003cbr\u003e  console.log(\"say this forever...\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will output:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esay this forever...\u003cbr\u003esay this forever...\u003cbr\u003esay this forever...\u003cbr\u003esay this forever...\u003cbr\u003esay this forever... ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that the condition expression doesn't need to be the literal value \u003ccode\u003etrue\u003c/code\u003e — any truthy value will have the same effect:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewhile (-1) { // -1 is truthy....\u003cbr\u003e  console.log(\"say this forever...\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBy contrast, a \u003ccode\u003efalse\u003c/code\u003e (or falsey) condition expression will keep the code block from executing at all:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewhile (null) {\u003cbr\u003e  console.log(\"I will never run\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eUse Control-C to Break Out of an Infinitely Looping Program\u003c/h2\u003e  \u003cp\u003eWhen you start writing code and creating loops yourself, you will almost certainly inadvertently create infinite loops from time to time. If you try to run the code and it either logs over and over without end \u003cstrong\u003eor\u003c/strong\u003e never seems to finish, you're probably stuck in an infinite loop.\u003c/p\u003e  \u003cp\u003eIn most programming environments (including repl.it), you can break out of an infinite loop by typing Control-C. That's an old-school UNIX key combination that means INTERRUPT. In order for this to work, you first need to make the terminal portion of the programming environment (where the results of running the code are displayed) the active window by clicking inside it.\u003c/p\u003e  \u003cp\u003eGive it a try here:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/QuietNervousRotation?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eDon't forget to click in the terminal (the window on the bottom) before typing Control-C!\u003c/p\u003e  \u003ch2\u003eTerminate a \u003ccode\u003ewhile\u003c/code\u003e Loop Naturally\u003c/h2\u003e  \u003cp\u003eMost loops aren't meant to run infinitely. There's some condition that they cross, captured in the \u003cem\u003econdition expression\u003c/em\u003e, that tells JavaScript that it's time to return to the \u003cstrong\u003edefault sequence\u003c/strong\u003e and execute the code after the while loop.\u003c/p\u003e  \u003cp\u003eSo, somehow we need to create an expression that's true when the \u003ccode\u003ewhile\u003c/code\u003e begins (so that the code in the \u003ccode\u003e{}\u003c/code\u003e runs), but that eventually becomes false.\u003c/p\u003e  \u003cp\u003eHere's a simple example that uses a very common approach:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet count = 0; // Initialize a counter variable; note that we need to use `let` here\u003cbr\u003ewhile (count \u0026lt; 3) { //A Boolean expression that uses the counter to decide whether to keep looping\u003cbr\u003e  console.log(`I am the ${count}, I love to count!`); // The work the loop does\u003cbr\u003e  count = count + 1; // Update the counter variable; this keeps track of how many times the loop has executed\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the last line, \u003ccode\u003ecount = count + 1\u003c/code\u003e, we are \u003cem\u003eassigning\u003c/em\u003e a new value to the \u003ccode\u003ecount\u003c/code\u003e variable, where the new value is equal to its current value plus 1.\u003c/p\u003e  \u003cp\u003eThe code above produces:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eI am the 0, I love to count!\u003cbr\u003eI am the 1, I love to count!\u003cbr\u003eI am the 2, I love to count! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's say we forgot the line \u003ccode\u003ecount = count + 1\u003c/code\u003e. If our  \u003ccode\u003ecount\u003c/code\u003e variable never changes, our \u003cem\u003econdition expression\u003c/em\u003e would \u003cem\u003ealways\u003c/em\u003e be \u003ccode\u003etrue\u003c/code\u003e and we'd have an infinite loop. (Hint: this is a very common mistake, even for experienced programmers.)\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eYou may wonder why we're starting our counter variable at 0 instead of 1. The answer may sound a bit... opaque. It's because, in computer science, arrays are \u003cem\u003eindexed\u003c/em\u003e starting with 0 instead of 1. In other words, we need to use the \u003cem\u003eindex\u003c/em\u003e value of 0 to retrieve the first element from an array. Because loops are frequently used to access elements in arrays, the \u003cem\u003econvention\u003c/em\u003e is to start loop counter variables at 0 instead of 1. If this doesn't entirely make sense at this point, don't worry — it will become clearer when we learn about arrays.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eLearn About Operators Used to Increment/Decrement\u003c/h2\u003e  \u003cp\u003eLet's look back at that previous example to notice how we're moving from a true or truthy statement to a false or falsey statement. Within each loop, the following code is executed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecount = count + 1 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ewhich slowly moves \u003ccode\u003ecount\u003c/code\u003e to a place where it is no longer less than 3, thus ending the loop.\u003c/p\u003e  \u003cp\u003eBut writing \u003ccode\u003ecount = count + 1\u003c/code\u003e is a bit long-winded (although very explicit; sometimes a few extra keystrokes can save you headaches with debugging, especially when you're first learning to code). This pattern of \"incrementing\" a variable is very common, so JavaScript includes a couple of shorthand operators you can use. It's like a contraction in conversation: very few English speakers say \"can not,\" \"have not,\" or \"would not\" \u003cstrong\u003eall\u003c/strong\u003e the time. You're likely to hear them use \u003cem\u003econtractions\u003c/em\u003e (from the Latin: \"pulling together\") like \"can't,\" \"haven't,\" and \"wouldn't.\" In the code below, we are combining the addition and assignment with the \u003ccode\u003eaddition assignment operator\u003c/code\u003e, \u003ccode\u003e+=\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecount += 1 // take the value of count, add 1 to it and then assign that result to count \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUnsurprisingly \u003ccode\u003e-=\u003c/code\u003e does the reverse of \u003ccode\u003e+=\u003c/code\u003e: it \"decrements\" the variable's value and re-assigns the new value to the variable. JavaScript has a number of other \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators\"\u003eassignment operators\u003c/a\u003e that allow you to use multiplication (\u003ccode\u003e*=\u003c/code\u003e), division (\u003ccode\u003e/=\u003c/code\u003e), and a variety of other operations.\u003c/p\u003e  \u003cp\u003eThe assignment operators will work with any \u003cem\u003enumber\u003c/em\u003e. If you want to add 10 or multiply by 3.14, the assignment operators will do that for you. For the special (but common) case where you want to add (or subtract) 1, however, there is another option: the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Increment_and_decrement\"\u003eincrement and decrement operators\u003c/a\u003e, \u003ccode\u003e++\u003c/code\u003e and \u003ccode\u003e--\u003c/code\u003e. For a case such as the above, where we're using a counter variable to keep track of where we are in our loop, the \u003ccode\u003eincrement operator\u003c/code\u003e is frequently used:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/EuphoricNoteworthyMuse?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eGet comfortable using the different options for incrementation and experiment with writing some loops of your own.\u003c/p\u003e  \u003ch2\u003eUse a \u003ccode\u003edo...while\u003c/code\u003e Loop\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003edo...while\u003c/code\u003e loop is similar to \u003ccode\u003ewhile\u003c/code\u003e, in that it will execute a block of code based on a condition or set of conditions. The difference, however, is that \u003cstrong\u003eit will always execute at least once\u003c/strong\u003e. The reason is that the condition isn't evaluated until \u003cstrong\u003eafter\u003c/strong\u003e the code block executes the first time:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edo { \u003cbr\u003e  console.log(`I will execute once`); \u003cbr\u003e} while (false); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe JavaScript engine will enter the loop, execute the console.log, then evalute the condition. Because the condition returns \u003ccode\u003efalse\u003c/code\u003e the loop will stop executing there.\u003c/p\u003e  \u003cp\u003eThis construction is helpful any time you want to make sure that the loop executes at least once. As an example, this might be useful for asking a user to create a password. The \u003ccode\u003edo while\u003c/code\u003e loop will always ask them to enter their password the first time, and can continue to ask as long as (\u003ccode\u003ewhile\u003c/code\u003e) the value they enter doesn't meet the password requirements.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we have learned how to use a \u003cem\u003erepetition\u003c/em\u003e statement, the \u003ccode\u003ewhile\u003c/code\u003e loop. JavaScript includes some other looping mechanisms that you'll learn about later in the course. But for now, with an understanding of \u003cem\u003esequence\u003c/em\u003e, \u003cem\u003eselection\u003c/em\u003e and now \u003cem\u003erepetition\u003c/em\u003e on top of your experience with expressions, you can write powerful programs! Be sure to experiment with writing your own loops and don't forget, if your code is not responding, you can use Control-C to interrupt the program!\u003c/p\u003e","exportId":"repetition-the-while-loop"},{"id":243579,"title":"Survey - Programming as Conversation Part 2","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Programming as Conversation Part 1 module?\u003c/p\u003e\n\u003c/div\u003e","exportId":"g1103aa73070a08f225a58bf001d3c0ae"}]},{"id":16916,"name":"Programming as Conversation Part 3: Bundling Expressions and Statements into Functions","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gb27d1f7d2476b2d2bd854738650a775f","items":[{"id":157861,"title":"Programming as Conversation Part 3: Introduction","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRevisit abstraction\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eBefore we jump into more code, let's think for a moment about something you encounter pretty much every day when you read a news article or email: the way we organize words to express and clarify meaning. For example, a \u003cstrong\u003eparagraph\u003c/strong\u003e is a collection of sentences, introduced by a topic sentence and bundled up or closed by a closing sentence. A \u003cstrong\u003eparagraph\u003c/strong\u003e can persuade or offend, direct or explain. A paragraph has a \u003cem\u003efunction\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003e\"Code paragraphs\" are called, depending on language, \"functions,\" \"procedures,\" \"methods,\" or \"subroutines.\" They bundle up expressions and statements to accomplish a task. Just as \"Make a Sandwich\" encompasses specific, \"atomic\" actions like \"get slice of bread,\" \"get jelly,\" etc., \u003ccode\u003eexecuteTransfer\u003c/code\u003e encompasses logic like \u003ccode\u003eif (accountStatus === \"open\")\u003c/code\u003e or \u003ccode\u003eif (accountBalance \u0026gt;= transactionAmount)\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eTo have code that is easy to read, debug, and maintain, we need to bundle collections of atomic activities into \"code paragraphs\" that do work. JavaScript calls these \"functions.\"\u003c/p\u003e  \u003ch2\u003eAbstraction\u003c/h2\u003e  \u003cp\u003eThis process of bundling up small atoms into a \u003cem\u003efunction\u003c/em\u003e is called \"abstraction.\" \"Abstraction\" comes from the Latin word for \"to pull away.\" When we're further away, many details are hard to see. Only the most relevant shapes are recognizable. For example, when you're on an airplane and are over a city the details of the cars below — the mileage, what's in the cup holder, the make or model — are invisible, they're not \u003cem\u003eessential\u003c/em\u003e. But what we may be able to see is the vehicle type (car vs. truck) or the color of the car. By abstracting we see what's true at a higher level, or more \u003cem\u003egenerally\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eHere are a few more \"abstractions:\"\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ca href=\"https://en.wikipedia.org/wiki/Jerry_Seinfeld\"\u003eJerry Seinfeld\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/Ruth_Bader_Ginsburg\"\u003eRuth Bader Ginsburg\u003c/a\u003e, and \u003ca href=\"https://en.wikipedia.org/wiki/Cardi_B\"\u003eCardi B\u003c/a\u003e are atomic individuals, but we can refer to them all collectively by the abstraction (or they can be \u003cem\u003eabstracted\u003c/em\u003e into) \"famous New Yorkers\"\u003c/li\u003e \u003cli\u003eBooks about a killer dog, a scary alter ego, and a scary clown can be \u003cem\u003eabstracted\u003c/em\u003e into the name \"horror novels (by Stephen King)\"\u003c/li\u003e \u003cli\u003eIndividuals with strange powers and (usually) strange clothing can be \u003cem\u003eabstracted\u003c/em\u003e into \"superheroes\"\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAbstraction is a natural part of learning to converse. When you're first learning to communicate, you don't know enough to start talking about abstractions. You prefer to think about real, visible, tangible things. But as you learn about opposites, how things are similar (and how perhaps one thing is dissimilar) you grow in your ability to \u003cem\u003eabstract\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eIn fact, the thing that makes most higher learning \"higher\" is that the discussion, work, and discovery is focused on uncovering general principles that allow us to predict how things will work more-or-less most of the time. Amazingly, this was considered a pretty revolutionary idea at the time when Galileo and Newton started doing it. The moment that natural philosophers started looking for these \"general rules of how things work,\" science as we know it was born.\u003c/p\u003e  \u003ch2\u003eNext Steps\u003c/h2\u003e  \u003cp\u003eIn Programming as Conversation 3, we'll learn to take our JavaScript \u003cem\u003eexpressions\u003c/em\u003e and \u003cem\u003estatements\u003c/em\u003e and bundle them up into abstractions called \u003cem\u003efunctions\u003c/em\u003e. Before we get to that, however, we first need to learn a little about \u003cem\u003etesting\u003c/em\u003e in JavaScript.\u003c/p\u003e","exportId":"programming-as-conversation-part-3-introduction"},{"id":157863,"title":"Testing With Javascript","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-what-is-a-test\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eLearn about testing in JavaScript\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eMany of the labs you will complete in this program use tests. Passing the tests verifies that the code you write behaves as desired and produces the expected results. But writing tests is also a way to provide specifics about exactly how the code should function. In a common development strategy known as \u003ca href=\"https://en.wikipedia.org/wiki/Test-driven_development\"\u003etest-driven development\u003c/a\u003e (or TDD), programmers \u003cem\u003efirst\u003c/em\u003e write the test for a specific function of the code \u003cem\u003ethen\u003c/em\u003e write the code to make the tests pass. TDD is considered the most reliable methodology for delivering quality code.\u003c/p\u003e\n\u003cp\u003eWhat this means is that the results of running the tests will be an important tool in figuring out how to get those tests passing. Code testing can feel like an abstract concept at first, but it's worth starting to learn how they work. When you're having difficulty passing a test, being able to read and understand the test output — and the tests themselves — can be an invaluable skill.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. (If you are using a different text editor, the command will be different.)\u003c/p\u003e\n\u003cp\u003eOpen up \u003ccode\u003eindex.js\u003c/code\u003e in your code editor. You are going to see mostly familiar things:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst name = \"Joe\";\u003cbr\u003econst height = 74;\u003cbr\u003econst message = `${name} is ${height} inches tall`;\u003cbr\u003e\u003cbr\u003emodule.exports = {name, height, message}; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should all look familiar except for that last line. You don't need to worry about it for now — just know that line of code makes the variables available to the test file.\u003c/p\u003e\n\u003cp\u003eTake a look at the \u003ccode\u003emessage\u003c/code\u003e variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst message = `${name} is ${height} inches tall`; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can use \u003ccode\u003econsole.log\u003c/code\u003e to take a look at the value of the \u003ccode\u003emessage\u003c/code\u003e variable. To do that, first type \u003ccode\u003econsole.log(message);\u003c/code\u003e on the last line of \u003ccode\u003eindex.js\u003c/code\u003e and save the file. Next, navigate to the terminal, type \u003ccode\u003enode index.js\u003c/code\u003e in the command line and hit enter (be sure you're still in the lab's directory). The \u003ccode\u003enode\u003c/code\u003e command \u003cem\u003eexecutes\u003c/em\u003e the code in whatever file you specify (in this case, \u003ccode\u003eindex.js\u003c/code\u003e). You should see \u003ccode\u003e\"Joe is 74 inches tall\"\u003c/code\u003e logged in the terminal.\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: \u003ccode\u003econsole.log\u003c/code\u003e is one of the debugging tools you can use as you're writing your code. Logging a variable and executing the code will allow you to verify that the value of the variable is what you're expecting.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIn the line of code above, we are using \u003cem\u003estring interpolation\u003c/em\u003e to inject the values of the \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e variables into the message. Recall that, for this to work, you have to wrap the entire string in backticks and wrap the variables themselves in \u003ccode\u003e${}\u003c/code\u003e. If you'd like a refresher, try leaving out the \u003ccode\u003e${}\u003c/code\u003es or switching to a different type of quotes and run your code again to see what the value of \u003ccode\u003emessage\u003c/code\u003e is. The backticks and the \u003ccode\u003e${}\u003c/code\u003e tell Javascript to grab the \u003cem\u003evalue\u003c/em\u003e inside the variable, not just that variable name.\u003c/p\u003e\n\u003ch3\u003eThe Tests\u003c/h3\u003e\n\u003cp\u003eWe have our code, now let's take a look at the tests. They are located in the \u003ccode\u003etest\u003c/code\u003e folder inside a file named \u003ccode\u003eindex-test.js\u003c/code\u003e. In this lesson we'll get familiar with the tests, and then run them in the next lesson.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst index = require(\"../index.js\");\u003cbr\u003e\u003cbr\u003e/*\u003cbr\u003edescribe('what-is-a-test', () =\u0026gt; {\u003cbr\u003e  describe('Name', () =\u0026gt; {\u003cbr\u003e    it('returns \"Susan\"', () =\u0026gt; {\u003cbr\u003e      expect(index.name).toEqual('Susan')\u003cbr\u003e    })\u003cbr\u003e  })\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  describe('Height', () =\u0026gt; {\u003cbr\u003e    it('is less than 40', () =\u0026gt; {\u003cbr\u003e      expect(index.height).toBeLessThan(40)\u003cbr\u003e    })\u003cbr\u003e  })\u003cbr\u003e\u003cbr\u003e  describe('Message', () =\u0026gt; {\u003cbr\u003e    it('gives the name and height', () =\u0026gt; {\u003cbr\u003e      expect(index.message).toInclude(index.name)\u003cbr\u003e      expect(index.message).toInclude(index.height)\u003cbr\u003e    })\u003cbr\u003e  })\u003cbr\u003e})\u003cbr\u003e*/ \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the first line, we're enabling the tests to access the variables in \u003ccode\u003eindex.js\u003c/code\u003e. You don't need to worry about exactly how this works at this point; it's enough to understand that we're creating a variable \u003ccode\u003eindex\u003c/code\u003e that will contain the values of the three variables.\u003c/p\u003e\n\u003cp\u003eThe next thing to notice is that the test code itself is commented out using the \u003ccode\u003e/*\u003c/code\u003e and \u003ccode\u003e*/\u003c/code\u003e block commenting syntax. This is because, as mentioned above, we don't actually want to run the tests yet. In the next lesson, we will remove the \u003ccode\u003e/*\u003c/code\u003e and \u003ccode\u003e*/\u003c/code\u003e so we can run the tests.\u003c/p\u003e\n\u003cp\u003eNext, note that the test code consists of three individual tests (each starting with \u003ccode\u003edescribe\u003c/code\u003e) nested inside a block for the tests as a whole (also starting with \u003ccode\u003edescribe\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eThe first grouping is testing our \u003ccode\u003ename\u003c/code\u003e variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  describe('Name', () =\u0026gt; {\u003cbr\u003e    it('returns \"Susan\"', () =\u0026gt; {\u003cbr\u003e      expect(index.name).toEqual('Susan')\u003cbr\u003e    })\u003cbr\u003e  }) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTake a look at the line that begins with \u003ccode\u003eexpect\u003c/code\u003e. If we read it out loud, we get \"Expect \u003ccode\u003eindex.name\u003c/code\u003e to equal Susan\". That's exactly what it's saying! If we continue down to the Height section you'll see this code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  describe('Height', () =\u0026gt; {\u003cbr\u003e    it('is less than 40', () =\u0026gt; {\u003cbr\u003e      expect(index.height).toBeLessThan(40)\u003cbr\u003e    })\u003cbr\u003e  }) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAgain, reading the line starting with \u003ccode\u003eexpect\u003c/code\u003e out loud, we get \"Expect \u003ccode\u003eindex.height\u003c/code\u003e to be less than 40.\" Again, this is just what the test is checking. Let's look at the final one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  describe('Message', () =\u0026gt; {\u003cbr\u003e    it('gives the name and height', () =\u0026gt; {\u003cbr\u003e      expect(index.message).toInclude(index.name)\u003cbr\u003e      expect(index.message).toInclude(index.height)\u003cbr\u003e    })\u003cbr\u003e  }) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis one has two \u003ccode\u003eexpect\u003c/code\u003e statements. If you read them out as English you'll discover that the tests expect the value of \u003ccode\u003eindex.message\u003c/code\u003e to include both \u003ccode\u003eindex.name\u003c/code\u003e and \u003ccode\u003eindex.height\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOK Great. You now understand what the tests are saying. In the next lesson we are going to cover how to run them, and then you will solve the lab!\u003c/p\u003e\n\u003cp\u003eTo register completion of this lesson, submit the URL for your forked copy of the repo in Canvas.\u003c/p\u003e","exportId":"g7c61bb9be8719fbc9a59b5f0ad74ed64"},{"id":157864,"title":"Testing with JavaScript Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-what-is-a-test-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eRunning tests\u003c/li\u003e\n    \u003cli\u003eReading test results\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eRunning Tests\u003c/h2\u003e\n\u003cp\u003eYou understand how to read tests; now it's time to run the tests.\u003c/p\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. (If you are using a different text editor, the command will be different.) Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003eWhat exactly do we mean by installing dependencies? Open the \u003ccode\u003epackage.json\u003c/code\u003e file and scroll down to the bottom. You'll see a list of 'DevDependencies'. What's listed here are JavaScript \u003cem\u003epackages\u003c/em\u003e: files or sets of files full of existing, reusable code. They are designed to be shared, allowing many developers to use the same code in their own projects. The packages you see listed in \u003ccode\u003epackage.json\u003c/code\u003e make it possible to run the lab's tests. In order to use the packages, we have to install them; \u003ccode\u003enpm install\u003c/code\u003e does that for us.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIf you take a look at \u003ccode\u003eindex.js\u003c/code\u003e and \u003ccode\u003eindex-test.js\u003c/code\u003e, you should see the same code as in the previous lesson. The only difference is that the test code in \u003ccode\u003eindex-test.js\u003c/code\u003e is no longer commented out.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImportant\u003c/strong\u003e: You should never need to make changes to test files unless a lab's instructions specifically tell you to do so.\u003c/p\u003e\n\u003cp\u003eTo run the tests, run \u003ccode\u003enpm test\u003c/code\u003e in the terminal. That's it!\u003c/p\u003e\n\u003cp\u003eThe next step is learning how to read the results that the tests give you.\u003c/p\u003e\n\u003ch2\u003eReading Results of Tests\u003c/h2\u003e\n\u003cp\u003eThe first time you run \u003ccode\u003enpm test\u003c/code\u003e, you should see something that looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; js-functions-lab@0.1.0 test /Users/mbenton/Desktop/curriculum-team/js-what-is-a-test-lab\u003cbr\u003e\u0026gt; mocha -R mocha-multi --reporter-options spec=-,json=.results.json\u003cbr\u003e\u003cbr\u003e  what-is-a-test\u003cbr\u003e    Name\u003cbr\u003e      1) returns \"Susan\"\u003cbr\u003e    Height\u003cbr\u003e      2) is less than 40\u003cbr\u003e    Message\u003cbr\u003e      ✓ gives the name and height\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  1 passing (552ms)\u003cbr\u003e  2 failing\u003cbr\u003e\u003cbr\u003e  1) what-is-a-test\u003cbr\u003e       Name\u003cbr\u003e         returns \"Susan\":\u003cbr\u003e\u003cbr\u003e      Error: Expected 'Joe' to equal 'Susan'\u003cbr\u003e      + expected - actual\u003cbr\u003e\u003cbr\u003e      -Joe\u003cbr\u003e      +Susan\u003cbr\u003e\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\u003cbr\u003e      at Context. (test/index-test.js:6:26)\u003cbr\u003e      at processImmediate (internal/timers.js:461:21)\u003cbr\u003e\u003cbr\u003e  2) what-is-a-test\u003cbr\u003e       Height\u003cbr\u003e         is less than 40:\u003cbr\u003e     Error: Expected 74 to be less than 40\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\u003cbr\u003e      at Context. (test/index-test.js:13:28)\u003cbr\u003e      at processImmediate (internal/timers.js:461:21)\u003cbr\u003e\u003cbr\u003enpm ERR! Test failed.  See above for more details. \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's break this down a bit. If you look about a third of the way down in the output, you'll see a summary of how the tests went:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  1 passing (552ms)\u003cbr\u003e  2 failing \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat! We've already got one test passing! Now let's see how we failed the other two tests.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  1) what-is-a-test\u003cbr\u003e       Name\u003cbr\u003e         returns \"Susan\":\u003cbr\u003e\u003cbr\u003e      Error: Expected 'Joe' to equal 'Susan'\u003cbr\u003e      + expected - actual\u003cbr\u003e\u003cbr\u003e      -Joe\u003cbr\u003e      +Susan\u003cbr\u003e\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\u003cbr\u003e      at Context. (test/index-test.js:6:26)\u003cbr\u003e      at processImmediate (internal/timers.js:461:21)\u003cbr\u003e\u003cbr\u003e  2) what-is-a-test\u003cbr\u003e       Height\u003cbr\u003e         is less than 40:\u003cbr\u003e     Error: Expected 74 to be less than 40\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\u003cbr\u003e      at Context. (test/index-test.js:13:28)\u003cbr\u003e      at processImmediate (internal/timers.js:461:21) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile there is no hard and fast rule, and there will be exceptions, it is most often best to address your test errors in order. So let's take a look at our first error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) what-is-a-test\u003cbr\u003e       Name\u003cbr\u003e         returns \"Susan\":\u003cbr\u003e\u003cbr\u003e      Error: Expected 'Joe' to equal 'Susan'\u003cbr\u003e      + expected - actual\u003cbr\u003e\u003cbr\u003e      -Joe\u003cbr\u003e      +Susan\u003cbr\u003e\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\u003cbr\u003e      at Context. (test/index-test.js:6:26)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere is the specific error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e      Error: Expected 'Joe' to equal 'Susan'\u003cbr\u003e      + expected - actual\u003cbr\u003e\u003cbr\u003e      -Joe\u003cbr\u003e      +Susan \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt tells us what the test is expecting (\u003ccode\u003eExpected 'Joe' to equal 'Susan'\u003c/code\u003e) and then gives us details about the \u003ccode\u003eexpected\u003c/code\u003e and \u003ccode\u003eactual\u003c/code\u003e values. This shows you exactly how the value your code is returning (the \u003ccode\u003eactual\u003c/code\u003e value) differs from what the test is looking for. Make sure you understand what this is telling you — it will come in handy in later labs!\u003c/p\u003e\n\u003cp\u003eThis error makes sense because we have the \u003ccode\u003ename\u003c/code\u003e variable set equal to \"Joe\" in our \u003ccode\u003eindex.js\u003c/code\u003e file. Let's change that line of code to set \u003ccode\u003ename\u003c/code\u003e equal to \"Susan\" instead. Run the tests again by typing \u003ccode\u003enpm test\u003c/code\u003e in the terminal's command line, and you should see that we are now passing 2 of the 3 tests!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  what-is-a-test\u003cbr\u003e    Name\u003cbr\u003e      ✓ returns \"Susan\"\u003cbr\u003e    Height\u003cbr\u003e      1) is less than 40\u003cbr\u003e    Message\u003cbr\u003e      ✓ gives the name and height\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  2 passing (736ms)\u003cbr\u003e  1 failing\u003cbr\u003e\u003cbr\u003e  1) what-is-a-test\u003cbr\u003e       Height\u003cbr\u003e         is less than 40:\u003cbr\u003e     Error: Expected 74 to be less than 40\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\u003cbr\u003e      at Context. (test/index-test.js:13:28)\u003cbr\u003e      at processImmediate (internal/timers.js:461:21) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWoot! You passed another one. Now go ahead and try to pass the remaining test on your own.\u003c/p\u003e\n\u003ch3\u003eCommon Errors\u003c/h3\u003e\n\u003cp\u003eWhile you are solving the other tests you may come across a few errors. Let's go over some common ones:\u003c/p\u003e\n\u003ch4\u003eVariable Not Defined\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eReferenceError: name is not defined \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat one says that the \u003ccode\u003ename\u003c/code\u003e variable is not defined. That makes no sense! We initialized the \u003ccode\u003ename\u003c/code\u003e variable in \u003ccode\u003eindex.js\u003c/code\u003e! What that actually means is that the test couldn't find the variable \u003ccode\u003ename\u003c/code\u003e. You'll get this error if the name of one of your variables is different than the test is expecting. Check to make sure you used the correct variable names and look carefully for typos.\u003c/p\u003e\n\u003ch4\u003eUnexpected Identifier\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003e/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/index.js:1\u003cbr\u003ecnst name = \"Susan\";\u003cbr\u003e     ^^^^\u003cbr\u003e\u003cbr\u003eSyntaxError: Unexpected identifier\u003cbr\u003e    at wrapSafe (internal/modules/cjs/loader.js:979:16)\u003cbr\u003e    at Module._compile (internal/modules/cjs/loader.js:1027:27)\u003cbr\u003e    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\u003cbr\u003e    at Module.load (internal/modules/cjs/loader.js:928:32)\u003cbr\u003e    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\u003cbr\u003e    at Module.require (internal/modules/cjs/loader.js:952:19)\u003cbr\u003e    at require (internal/modules/cjs/helpers.js:88:18)\u003cbr\u003e    at Object. (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/test/index-test.js:1:15)\u003cbr\u003e    at Module._compile (internal/modules/cjs/loader.js:1063:30)\u003cbr\u003e    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\u003cbr\u003e    at Module.load (internal/modules/cjs/loader.js:928:32)\u003cbr\u003e    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\u003cbr\u003e    at Module.require (internal/modules/cjs/loader.js:952:19)\u003cbr\u003e    at require (internal/modules/cjs/helpers.js:88:18)\u003cbr\u003e    at /Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:311:36\u003cbr\u003e    at Array.forEach ()\u003cbr\u003e    at Mocha.loadFiles (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:308:14)\u003cbr\u003e    at Mocha.run (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:849:10)\u003cbr\u003e    at Object.exports.singleRun (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:108:16)\u003cbr\u003e    at exports.runMocha (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:143:13)\u003cbr\u003e    at Object.exports.handler (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run.js:305:3)\u003cbr\u003e    at Object.runCommand (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/lib/command.js:242:26)\u003cbr\u003e    at Object.parseArgs [as _parseArgs] (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:1104:24)\u003cbr\u003e    at Object.parse (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:566:25)\u003cbr\u003e    at Object.exports.main (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/cli.js:68:6)\u003cbr\u003e    at Object. (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/bin/mocha:133:29)\u003cbr\u003e    at Module._compile (internal/modules/cjs/loader.js:1063:30)\u003cbr\u003e    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\u003cbr\u003e    at Module.load (internal/modules/cjs/loader.js:928:32)\u003cbr\u003e    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\u003cbr\u003e    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\u003cbr\u003e    at internal/main/run_main_module.js:17:47\u003cbr\u003enpm ERR! Test failed.  See above for more details. \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhoa! So many words that make no sense. Don't worry though. The most important line is the \u003ccode\u003eSyntaxError: Unexpected identifier\u003c/code\u003e line. What that means is you have some sort of typo or syntax mistake. It could be a HUGE variety of things but usually, JS will try and give you a hint. This time it's pointing to the \u003ccode\u003ecnst name = \"Susan\"\u003c/code\u003e line of code. Take a look and read \u003cem\u003every carefully\u003c/em\u003e: \u003ccode\u003econst\u003c/code\u003e is misspelled. Whoops! Once we fix that everything will work.\u003c/p\u003e\n\u003cp\u003eOne note on this type of error is that it is sort of a catch-all. Tons and tons of problems end in that sort of error message. Whenever you see it, be sure to read over your code with a fine-toothed comb... and you'll find the problem!\u003c/p\u003e\n\u003ch2\u003eType Errors\u003c/h2\u003e\n\u003cp\u003eOn the second test, there is a chance you might see the following error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) what-is-a-test\u003cbr\u003e       Height\u003cbr\u003e         is less than 40:\u003cbr\u003e     Error: The \"actual\" argument in expect(actual).toBeLessThan() must be a number\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\u003cbr\u003e      at Context. (test/index-test.js:13:28)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis error is slightly different than the last two. In this case, the test is giving us a unique message because it recognizes a problem. If we look at this test in \u003ccode\u003etest/index-test.js\u003c/code\u003e, we see this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  describe('Height', () =\u0026gt; {\u003cbr\u003e    it('is less than 40', () =\u0026gt; {\u003cbr\u003e      expect(index.height).toBeLessThan(40)\u003cbr\u003e    })\u003cbr\u003e  }) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see that the word \u003ccode\u003e\"actual\"\u003c/code\u003e in this case is referring to the \u003ccode\u003eindex.height\u003c/code\u003e variable. The error message is telling us that \u003ccode\u003eindex.height\u003c/code\u003e \u003cstrong\u003emust be a number\u003c/strong\u003e. If you're seeing this, make sure that you have set the \u003ccode\u003eheight\u003c/code\u003e variable to a \u003cstrong\u003enumber\u003c/strong\u003e that's less than 40 (e.g. \u003ccode\u003e39\u003c/code\u003e), not a \u003cstrong\u003estring\u003c/strong\u003e (\u003ccode\u003e\"39\"\u003c/code\u003e). The test will interpret the value as a string due to the quotation marks wrapping it.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eOnce you've got all your tests passing, you're ready to move on. Congratulations! You've solved your first JavaScript tests!\u003c/p\u003e","exportId":"g3d984174c7fa0409eaa881c64a847f91"},{"id":157865,"title":"Introduction to Functions in JavaScript","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-intro-to-functions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Objectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eWriting and calling JavaScript functions\u003c/li\u003e \u003cli\u003eUnderstand \u003ccode\u003earguments\u003c/code\u003e and \u003ccode\u003eparameters\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eLearn what a return value is in JavaScript\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll introduce functions and cover how to create and execute them. There are no tests, but be sure to follow along with the examples.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lesson into your local environment. (Since this lesson doesn't have a \"Fork\" button, you'll need to click the GitHub \"octocat\" button at the top of the page to open the lesson's repo, then click the fork button in the upper right corner.) Clone the lesson to your local environment, navigate into the lesson directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. (If you are using a different text editor, the command will be different.) You will be writing your code in the \u003ccode\u003eindex.js\u003c/code\u003e file, and running it by entering \u003ccode\u003enode index.js\u003c/code\u003e in the terminal.\u003c/p\u003e  \u003ch2\u003eWriting and Calling JavaScript Functions\u003c/h2\u003e  \u003cp\u003eSo far, our programs have consisted of writing individual lines of code directly into a REPL. This is a great way to test out JavaScript functionality and to get a feel for how it handles different values and operations, but it's not super extensible. What if, for example, we wanted to log \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e a bunch of times? We could write the statement out repeatedly:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut that quickly gets tiresome, and it's easy to see how even small programs would come to rival \u003cem\u003eWar and Peace\u003c/em\u003e in length.\u003c/p\u003e  \u003cp\u003eThe good news is, there's a better way! We can use a function!\u003c/p\u003e  \u003cp\u003eFunctions are ways of giving instructions to the JavaScript interpreter that can be reused over and over again by \u003cem\u003ecalling\u003c/em\u003e the function. Functions are the basic building blocks of programming in many languages (although they aren't always called \u003cem\u003efunctions\u003c/em\u003e), serving both to store the instructions for how to perform a certain task, and to help organize the code in our programs. By using functions — and giving them meaningful names — we can make our code easier to read, debug and maintain.\u003c/p\u003e  \u003cp\u003eIn JavaScript, functions are written with the \u003ccode\u003efunction\u003c/code\u003e keyword:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction doNothing() {} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs you can see, when we declare a function, we start with the \u003ccode\u003efunction\u003c/code\u003e keyword, followed by a name for the function (in this case, \u003ccode\u003edoNothing\u003c/code\u003e), followed by a pair of parentheses. Next comes a pair of curly braces, which contains the code to be executed when the function is called. In this case, the function, as its name implies, doesn't do much. Copy the function into \u003ccode\u003eindex.js\u003c/code\u003e and then execute it by running \u003ccode\u003enode index.js\u003c/code\u003e in the terminal.\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003eAnything happen? No? Good! This isn't surprising because even though we declared the function, we didn't give it any instructions. (Conventionally, a function that does nothing is called a \"noop\" (pronounced \"no op\") — sometimes they come in handy!)\u003c/p\u003e  \u003cp\u003eLet's declare another function and this time give it something to do. As mentioned above, we put the code that we want to be executed when our function is called inside the curly braces — this is called the \u003cem\u003efunction body\u003c/em\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sayHello() {\u003cbr\u003e  console.log('Hello!');\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we have a function called \u003ccode\u003esayHello\u003c/code\u003e; its body reads \u003ccode\u003econsole.log('Hello!');\u003c/code\u003e. Add this function to \u003ccode\u003eindex.js\u003c/code\u003e and then execute it again.\u003c/p\u003e  \u003cp\u003eWhat happened this time? Still nothing? That's because the code above is just the \u003cem\u003efunction declaration\u003c/em\u003e. So far, all we have done is \u003cem\u003edefine\u003c/em\u003e the function. In order to actually execute the code in the function body, we have to \u003cem\u003ecall\u003c/em\u003e it. To call the function, we simply type the name of the function followed by \u003ccode\u003e()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eAdd the following to \u003ccode\u003eindex.js\u003c/code\u003e, after the function declaration:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esayHello(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow when you execute the code, you should see \u003ccode\u003eHello!\u003c/code\u003e printed in the terminal!\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://i.giphy.com/BoBOKNtlR8rTi.gif\" alt=\"it's working\"\u003e\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eNote: We've just learned that, in order for the code in a function to be executed, the function must be called. Any time you're trying out code, either in a REPL or in your local environment, you'll need to add the function call, as we did above, before executing the code. For \u003cstrong\u003elabs\u003c/strong\u003e, however, you will generally \u003cem\u003enot\u003c/em\u003e need to do this yourself. The tests will take care of it for you.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eSaying hello\u003c/h3\u003e  \u003cp\u003eLet's write a function to say hello to Isabel — be sure to follow along!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sayHelloToIsabel() {\u003cbr\u003e  console.log(\"Hello, Isabel!\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRun this code and see what you get. Don't forget to include the function call!\u003c/p\u003e  \u003cp\u003eNow what if we want to say hello to Sofia? Well, we could write another function and add it to \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sayHelloToSofia() {\u003cbr\u003e  console.log(\"Hello, Sofia!\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we can call it, we should see \u003ccode\u003eHello, Sofia!\u003c/code\u003e written out in the terminal.\u003c/p\u003e  \u003cp\u003eOkay, now we're going to say hello to Brendan — you know the drill!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sayHelloToBrendan() {\u003cbr\u003e  console.log(\"Hello, Brendan!\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow let's call all three!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esayHelloToIsabel();\u003cbr\u003esayHelloToSofia();\u003cbr\u003esayHelloToBrendan(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can stack all three of these calls in \u003ccode\u003eindex.js\u003c/code\u003e and, when we execute the code, we should see all three messages output in the terminal.\u003c/p\u003e  \u003cp\u003eWhile these functions are undoubtedly useful, they're only useful if we only talk to Isabel, Sofia, and Brendan. Every time we want to greet someone new (or use a greeting other than \"Hello,\" for that matter), we need to define a new function.\u003c/p\u003e  \u003cp\u003eWhat if there was some way to take what's similar about these functions — the fact that they all call \u003ccode\u003econsole.log()\u003c/code\u003e with \"Hello,\" a name, and an exclamation point — and substitute what's different (the name) as we go?\u003c/p\u003e  \u003cp\u003eTurns out, we can! We can use something called an \u003cem\u003eargument\u003c/em\u003e to pass information to a function.\u003c/p\u003e  \u003ch2\u003eUnderstand \u003ccode\u003earguments\u003c/code\u003e and \u003ccode\u003eparameters\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eArguments give us a way to pass information into a function to make our functions more flexible. We pass the argument at the time that we \u003cstrong\u003ecall\u003c/strong\u003e the function, by including it inside the parentheses after the name of the function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction doSomething(thing) {\u003cbr\u003e  console.log(thing);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edoSomething('anything'); // passing the argument 'anything' into our function  \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTry this out with a few different arguments. You'll see that whatever value we pass in when we \u003cem\u003ecall\u003c/em\u003e the function is what the function logs. Pretty cool, right?\u003c/p\u003e  \u003cp\u003eWe can easily extend this to our \"say hello to\" example; by using an argument, we no longer need a separate function for each person we want to say hello to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sayHelloTo(firstName) {\u003cbr\u003e  console.log(`Hello, ${firstName}!`);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003esayHelloTo('Isabel'); // \"Hello, Isabel!\"\u003cbr\u003esayHelloTo(\"Jane\"); // \"Hello, Jane!\"\u003cbr\u003esayHelloTo(\"R2-D2\"); // \"Hello, R2-D2!\"\u003cbr\u003esayHelloTo(1); // \"Hello, 1!\"\u003cbr\u003e\u003cbr\u003e// ^ Note that in the above, JavaScript coerces the number 1 to the string \"1\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the example above, you may have noticed that there's also something inside the parentheses in the function \u003cem\u003edeclaration\u003c/em\u003e: \u003ccode\u003efunction sayHelloTo(firstName)\u003c/code\u003e. This is called the \u003cstrong\u003eparameter\u003c/strong\u003e, in this case \u003ccode\u003efirstName\u003c/code\u003e. A \u003cstrong\u003eparameter\u003c/strong\u003e is a placeholder that stores whatever value gets passed in as an \u003cstrong\u003eargument\u003c/strong\u003e. For example, when we run the function call \u003ccode\u003esayHelloTo('Isabel')\u003c/code\u003e, the value of the argument, 'Isabel', gets stored in the parameter \u003ccode\u003efirstName\u003c/code\u003e. Then, inside the function body, we access that value by using the parameter name, interpolate it into the string, and log the string to the terminal.\u003c/p\u003e  \u003cp\u003eEssentially, the arguments are the actual values that we pass to the function, and the parameters are the named references where we store those passed-in values. An argument can be any JavaScript expression —\u0026nbsp;any piece of JavaScript code that evaluates to a value —\u0026nbsp;from something as simple as \u003ccode\u003e5\u003c/code\u003e or \u003ccode\u003e'Avi'\u003c/code\u003e to something as complex as an entire function.\u003c/p\u003e  \u003cp\u003eDefining a parameter in our function declaration ensures that the argument gets stored as a local, function-level variable that's available anywhere in the function body. We access the value simply by using the name of the parameter that it's stored in.\u003c/p\u003e  \u003cp\u003eNote that we can only access parameters within the body of the function. Try adding \u003ccode\u003econsole.log(firstName)\u003c/code\u003e to the end of the \u003ccode\u003eindex.js\u003c/code\u003e and running the code. You should see a \u003ccode\u003eReferenceError\u003c/code\u003e telling you that \u003ccode\u003efirstName\u003c/code\u003e is not defined. This relates to a very important concept in JavaScript, \u003cem\u003evariable scope\u003c/em\u003e.\u003c/p\u003e  \u003ch4\u003eVariable Scope\u003c/h4\u003e  \u003cp\u003eVariables in JavaScript exist within a particular \u003cstrong\u003escope\u003c/strong\u003e. For example, if a variable is defined in a function — whether it's defined as a parameter or inside the body of the function — it can only be accessed inside that function.\u003c/p\u003e  \u003cp\u003eVariables can also be declared in the \u003cem\u003eglobal scope\u003c/em\u003e, i.e., outside of any function. These variables will be accessible (and can potentially be overwritten) everywhere within the program. As a general rule, it is best to avoid global variables as much as possible because they can lead to bugs that can be difficult to track down. Using local variables instead makes it easier to keep track of the values of your variables and makes your code easier to debug and maintain.\u003c/p\u003e  \u003cp\u003eThe topic of scope in JavaScript is quite complex. You will learn more about it, and its implications, later in the course.\u003c/p\u003e  \u003ch3\u003eSaying something new\u003c/h3\u003e  \u003cp\u003eWhat if we want our function to say something other than \"Hello\"? Well, we can move the greeting to a parameter as well:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction say(greeting, firstName) {\u003cbr\u003e  console.log(`${greeting}, ${firstName}!`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAdd the above to your \u003ccode\u003eindex.js\u003c/code\u003e file along with the function call \u003ccode\u003esay(\"Goodbye\", \"Julio\");\u003c/code\u003e. When you run the code you should see \"Goodbye, Julio!\" written out to the terminal.\u003c/p\u003e  \u003ch3\u003eOrder of Arguments\u003c/h3\u003e  \u003cp\u003eWhat if we reversed the order of our arguments? Try this function call:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esay(\"Julio\", \"hello\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou should now see \"Julio, hello!\" in the terminal. It looks like the name is now stored in the \u003ccode\u003egreeting\u003c/code\u003e parameter and the greeting is stored in the \u003ccode\u003ename\u003c/code\u003e variable. We can verify that by adding a couple more \u003ccode\u003econsole.log()\u003c/code\u003es:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction say(greeting, firstName) {\u003cbr\u003e  console.log(\"firstName: \", firstName);\u003cbr\u003e  console.log(\"greeting: \", greeting);\u003cbr\u003e  console.log(`${greeting}, ${firstName}!`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen you run this using the function call above, you should see this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efirstName:  hello\u003cbr\u003egreeting:  Julio\u003cbr\u003eJulio, hello! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou've just illustrated an important point: \u003cstrong\u003ethe parameter names only have meaning to us, the programmer; JavaScript assigns values to parameters based solely on the order of the arguments that are passed.\u003c/strong\u003e\u003c/p\u003e  \u003ch2\u003eReturn Values in JavaScript\u003c/h2\u003e  \u003cp\u003eThese functions we've been coding are pretty cool, but they don't actually do a whole lot — mostly they just print things to the terminal. We've seen how we can make them a little bit more dynamic with arguments, but how do we make them do something for us? For example, we might want to create a function \u003ccode\u003eadd()\u003c/code\u003e that allows us to add together two numbers. Enter the following in \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction add(x, y) {\u003cbr\u003e  return x + y;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we return inside a function, we're giving that value back to the world outside the function. Let's add the function call \u003ccode\u003eadd(1, 2)\u003c/code\u003e and run the code. Wait — nothing happened! What's going on here? Well, our function is \u003cem\u003ereturning\u003c/em\u003e the value of the sum \u003ccode\u003ex + y\u003c/code\u003e but we can't see that because we aren't doing anything with it. So let's use our handy developer tool, \u003ccode\u003econsole.log()\u003c/code\u003e, to see what it's returning. Rerun the code after modifying your function call as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(add(1,2)); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSee that? We got \u003ccode\u003e3\u003c/code\u003e back! What if we pass 80 and 9000 as our arguments instead? Whoa! We got 9080!\u003c/p\u003e  \u003cp\u003eLet's unpack what's happening here. We're \u003cem\u003ecalling\u003c/em\u003e our \u003ccode\u003eadd()\u003c/code\u003e function, passing in two numbers as the arguments. The function is \u003cem\u003ereturning\u003c/em\u003e the value of the sum of the two arguments, and we're \u003cem\u003elogging\u003c/em\u003e that result in the terminal so we can see it. The difference between this and what we were doing before — having the \u003cem\u003efunction itself\u003c/em\u003e log something to the terminal — may seem subtle, but it's actually quite important. Let's look at another example. Be sure to follow along.\u003c/p\u003e  \u003cp\u003eLet's rewrite our \u003ccode\u003esay()\u003c/code\u003e function from above so that now instead of \u003ccode\u003econsole.log()\u003c/code\u003e-ing what it says, it returns it.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction say(greeting, firstName) {\u003cbr\u003e  return `${greeting}, ${firstName}!`\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow when we call \u003ccode\u003econsole.log(say(\"Hello\", \"Sofia\"));\u003c/code\u003e we'll see \u003ccode\u003eHello, Sofia!\u003c/code\u003e, just as we did before. But what if we try logging the result of calling the \u003cem\u003eoriginal\u003c/em\u003e version of the function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction say(greeting, firstName) {\u003cbr\u003e  console.log(`${greeting}, ${firstName}!`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow \u003ccode\u003econsole.log(say(\"Hello\", \"Sofia\"));\u003c/code\u003e will result in the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eHello, Sofia!\u003cbr\u003eundefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe first line comes from the \u003ccode\u003econsole.log()\u003c/code\u003e inside the function body, and the second line comes from logging the result of the function call. What this shows us is that this version of our function \u003cstrong\u003edoes not have a return value\u003c/strong\u003e! This is because a \u003ccode\u003econsole.log()\u003c/code\u003e doesn't return anything — it just writes something out for the developer to see. \u003cstrong\u003eIn JavaScript, in order to have our function return a value, we need to use the \u003ccode\u003ereturn\u003c/code\u003e keyword.\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eWe can also see this if we go back to our \u003ccode\u003eadd()\u003c/code\u003e function, and remove the \u003ccode\u003ereturn\u003c/code\u003e keyword:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction add(x, y) {\u003cbr\u003e  x + y;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if you call the function and log the results:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(add(1,2)); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eyou'll see that the function has no return value. Our function is doing the addition but we can't do anything with the result, which makes it pretty useless. Be sure to add the \u003ccode\u003ereturn\u003c/code\u003e keyword back in.\u003c/p\u003e  \u003cp\u003eSetting up your function to return a value means that value is available to be used elsewhere in your program. So how might we use the return value of our \u003ccode\u003eadd()\u003c/code\u003e function? Let's say we're creating a simple calculator function. A high-level outline of how it could work might be:\u003c/p\u003e  \u003col\u003e \u003cli\u003ethe calculator function asks the user to enter two numbers they want to be added together,\u003c/li\u003e \u003cli\u003ethe values are stored into variables (\u003ccode\u003enum1\u003c/code\u003e and \u003ccode\u003enum2\u003c/code\u003e, perhaps),\u003c/li\u003e \u003cli\u003ethe function then calls the \u003ccode\u003eadd()\u003c/code\u003e function, passing \u003ccode\u003enum1\u003c/code\u003e and \u003ccode\u003enum2\u003c/code\u003e as arguments,\u003c/li\u003e \u003cli\u003ethe \u003ccode\u003eadd()\u003c/code\u003e function \u003cem\u003ereturns\u003c/em\u003e the sum\u003c/li\u003e \u003cli\u003ethe calculator function returns a message to the user telling them what the sum is.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eNote what's happening in step 3: our calculator function is \u003cstrong\u003ecalling\u003c/strong\u003e our add function. This is an important thing to know about functions: they can be called by other functions! Eventually we'll want our calculator to do more than just add. Rather than build one very long function that contains code for adding, subtracting, multiplying, etc., we can \u003cem\u003eencapsulate\u003c/em\u003e the code for each operator into its own function and call them.\u003c/p\u003e  \u003cp\u003eThe code that calls the \u003ccode\u003eadd()\u003c/code\u003e function and creates the message might look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst sum = add(num1,num2);\u003cbr\u003econst message = `The sum of your numbers is: ${sum}.` \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOr, equivalently:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst message = `The sum of your numbers is: ${add(num1, num2)}.` \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003emessage\u003c/code\u003e could then be written out to the screen.\u003c/p\u003e  \u003ch3\u003eOne Last Point About \u003ccode\u003ereturn\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThere's one additional thing it's important to know about \u003ccode\u003ereturn\u003c/code\u003e. If we wanted to both \u003ccode\u003ereturn\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e log a string in our \u003ccode\u003esay()\u003c/code\u003e function, we might try writing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction say(greeting, firstName) {\u003cbr\u003e  return `${greeting}, ${firstName}!`;\u003cbr\u003e  console.log('I was called!');\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's call the function and log the result:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(say(\"Howdy\", \"partner\")); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen you run that code, the return value is logged, but the \u003ccode\u003econsole.log()\u003c/code\u003e inside the function body does not execute!\u003c/p\u003e  \u003cp\u003eThis is because \u003ccode\u003ereturn\u003c/code\u003e \u003cstrong\u003eends the execution inside the function\u003c/strong\u003e. Nothing after the line with the \u003ccode\u003ereturn\u003c/code\u003e will be executed.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e Take a look at the above code in \u003ccode\u003eindex.js\u003c/code\u003e. Depending on which text editor you're using, you may see that the line with the \u003ccode\u003econsole.log()\u003c/code\u003e is \"grayed out.\" This is the text editor giving you a hint that that line of code is unreachable.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eTo both log and return like we want to, we can switch the order around:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction say(greeting, firstName) {\u003cbr\u003e  console.log('I was called!');\u003cbr\u003e  return `${greeting}, ${firstName}!`;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if we rerun the code, we should see the output of both \u003ccode\u003econsole.log()\u003c/code\u003es.\u003c/p\u003e  \u003ch2\u003eYour turn!\u003c/h2\u003e  \u003cp\u003eTry rewriting some of the functions that we've written in this lesson to get used to the difference between \u003ccode\u003ereturn\u003c/code\u003e-ing and printing (\u003ccode\u003econsole.log()\u003c/code\u003e-ing) to the terminal. Try writing a function of your own that returns something.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\"\u003eMDN - Functions\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"introduction-to-functions-in-javascript"},{"id":157866,"title":"Introduction to Functions Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-intro-to-functions-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Objectives\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePractice reading tests and test errors\u003c/li\u003e\n\u003cli\u003ePractice writing functions\u003c/li\u003e\n\u003cli\u003eLearn how to use JavaScript's \u003ccode\u003etoUpperCase()\u003c/code\u003e and \u003ccode\u003etoLowerCase()\u003c/code\u003e methods\u003c/li\u003e\n\u003cli\u003ePractice using \u003ccode\u003ereturn\u003c/code\u003e and \u003ccode\u003econsole.log()\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ePractice creating conditional statements\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eWelcome to the JavaScript functions lab! You'll notice a few new things in this lesson that we haven't encountered before. Don't worry, we'll walk you through them.\u003c/p\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. (If you are using a different text editor, the command will be different.) Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch3\u003eCode-Along\u003c/h3\u003e\n\u003cp\u003eTo start, open up \u003ccode\u003eindex.js\u003c/code\u003e in your text editor. You should see, well, nothing. We'll fix that soon.\u003c/p\u003e\n\u003cp\u003eNow open up \u003ccode\u003etest/root.js\u003c/code\u003e. Hey, there's something! What's all of this stuff doing?\u003c/p\u003e\n\u003cp\u003eAt the very top of the file, you'll see\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eglobal.expect = require('expect');\u003cbr\u003e\u003cbr\u003econst babel = require('babel-core');\u003cbr\u003econst jsdom = require('jsdom');\u003cbr\u003econst path = require('path'); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis might be a bit bewildering, but all we're doing is referencing different \u003cem\u003elibraries\u003c/em\u003e that help us run the tests. You may recall that we talked about \u003cem\u003epackages\u003c/em\u003e in an earlier lesson. A library is similar: it's code that someone else (usually multiple someone elses) wrote for our use. The code above makes the libraries available inside our test environment, which enables us to run the tests.\u003c/p\u003e\n\u003cp\u003eIf you go to \u003ccode\u003etest/index-test.js\u003c/code\u003e, you'll see\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe('shout(string)', function(){\u003cbr\u003e  // there's stuff in here, too\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003edescribe\u003c/code\u003e is a function provided by our test runner (in this case, we're using \u003ca href=\"https://mochajs.org/\"\u003eMocha\u003c/a\u003e) — it's basically a container for our tests.\u003c/p\u003e\n\u003cp\u003eLet's take a closer look at that \u003ccode\u003edescribe()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe('shout(string)', function(){\u003cbr\u003e  it('receives one argument and returns it in all caps', function() {\u003cbr\u003e    // we'll get to this in a sec\u003cbr\u003e  })\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese internal \u003ccode\u003edescribe()\u003c/code\u003e calls are used for \u003cem\u003edescribing\u003c/em\u003e the functions that you're going to write. In this case, the test is saying, \"Okay, I think there's going to be a function called \u003ccode\u003eshout\u003c/code\u003e, and it should take one argument (it doesn't actually matter what the argument is called, but \u003ccode\u003estring\u003c/code\u003e, is nice and specific, don't you think?). It should \u003cem\u003ereturn\u003c/em\u003e that argument in all caps.\u003c/p\u003e\n\u003cp\u003eFinally, we have\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexpect(shout('hello')).toEqual('HELLO'); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ewhich says that it \u003cem\u003eexpects\u003c/em\u003e a call to \u003ccode\u003eshout()\u003c/code\u003e with the string \u003ccode\u003e'hello'\u003c/code\u003e will \u003ccode\u003eequal\u003c/code\u003e the string \u003ccode\u003e'HELLO'\u003c/code\u003e. This is the actual test — otherwise called a spec, expectation, or assertion — for this function. We can have more than one test per function, but let's start with this one.\u003c/p\u003e\n\u003ch3\u003eRunning the Tests\u003c/h3\u003e\n\u003cp\u003eTo run the tests, run \u003ccode\u003enpm test\u003c/code\u003e in the terminal. The first output you'll see will look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; java-script-intro-to-functions-lab@0.1.0 test /Users/mbenton/Desktop/curriculum-team/junk/javascript-intro-to-functions-lab\u003cbr\u003e\u0026gt; mocha -R mocha-multi --reporter-options spec=-,json=.results.json --timeout 10000\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  shout(string)\u003cbr\u003e    1) receives one argument and returns it in all caps\u003cbr\u003e\u003cbr\u003e  whisper(string)\u003cbr\u003e    2) receives one argument and returns it in all lowercase\u003cbr\u003e\u003cbr\u003e  logShout(string)\u003cbr\u003e    3) calls console.log() its one argument in all caps\u003cbr\u003e\u003cbr\u003e  logWhisper(string)\u003cbr\u003e    4) calls console.log() its one argument in all lowercase\u003cbr\u003e\u003cbr\u003e  sayHiToGrandma(string)\u003cbr\u003e    5) returns \"I can't hear you!\" if `string` is lowercase\u003cbr\u003e    6) returns \"YES INDEED!\" if `string` is uppercase\u003cbr\u003e    7) returns \"I love you, too.\" if `string` is \"I love you, Grandma.\"`\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  0 passing (99ms)\u003cbr\u003e  7 failing\u003cbr\u003e\u003cbr\u003e  1) shout(string)\u003cbr\u003e       receives one argument and returns it in all caps:\u003cbr\u003e     ReferenceError: shout is not defined\u003cbr\u003e      at Context. (test/index-test.js:4:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  2) whisper(string)\u003cbr\u003e       receives one argument and returns it in all lowercase:\u003cbr\u003e     ReferenceError: whisper is not defined\u003cbr\u003e      at Context. (test/index-test.js:10:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  3) logShout(string)\u003cbr\u003e       calls console.log() its one argument in all caps:\u003cbr\u003e     ReferenceError: logShout is not defined\u003cbr\u003e      at Context. (test/index-test.js:18:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  4) logWhisper(string)\u003cbr\u003e       calls console.log() its one argument in all lowercase:\u003cbr\u003e     ReferenceError: logWhisper is not defined\u003cbr\u003e      at Context. (test/index-test.js:30:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  5) sayHiToGrandma(string)\u003cbr\u003e       returns \"I can't hear you!\" if `string` is lowercase:\u003cbr\u003e     ReferenceError: sayHiToGrandma is not defined\u003cbr\u003e      at Context. (test/index-test.js:40:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  6) sayHiToGrandma(string)\u003cbr\u003e       returns \"YES INDEED!\" if `string` is uppercase:\u003cbr\u003e     ReferenceError: sayHiToGrandma is not defined\u003cbr\u003e      at Context. (test/index-test.js:44:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  7) sayHiToGrandma(string)\u003cbr\u003e       returns \"I love you, too.\" if `string` is \"I love you, Grandma.\"`:\u003cbr\u003e     ReferenceError: sayHiToGrandma is not defined\u003cbr\u003e      at Context. (test/index-test.js:48:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003enpm ERR! Test failed.  See above for more details. \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHm, seven failed tests. Let's see if we can get that \u003cem\u003efirst\u003c/em\u003e test to pass. Open up \u003ccode\u003eindex.js\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhen we write our code, we follow the guidance of the tests. Let's take a look at that first error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  1) shout(string)\u003cbr\u003e       receives one argument and returns it in all caps:\u003cbr\u003e     ReferenceError: shout is not defined\u003cbr\u003e      at Context. (test/index-test.js:4:5)\u003cbr\u003e      at processImmediate (internal/timers.js:461:21) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe output above comes from this test in \u003ccode\u003eindex-test.js\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe('shout(string)', function() {\u003cbr\u003e  it('receives one argument and returns it in all caps', function() {\u003cbr\u003e    expect(shout('hello')).toEqual('HELLO');\u003cbr\u003e  })\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe know that the test is expecting a function called \u003ccode\u003eshout\u003c/code\u003e that accepts an argument. The error tells us that \u003ccode\u003eshout\u003c/code\u003e isn't defined. So let's start by declaring our function in \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction shout(string) {\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe know we won't pass the test yet because our function doesn't do anything yet. However, if we rerun the test, it should now give us more information about what we need to do:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  1) shout(string)\u003cbr\u003e       receives one argument and returns it in all caps:\u003cbr\u003e     Error: Expected undefined to equal 'HELLO'\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\u003cbr\u003e      at Context. (test/index-test.js:4:28)\u003cbr\u003e      at processImmediate (internal/timers.js:461:21) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnytime you see \u003ccode\u003eError: Expected undefined to equal [something]\u003c/code\u003e, that means that the test is looking for a \u003ccode\u003ereturn\u003c/code\u003e value. We can also see the description of what the function should do: it \u003ccode\u003ereceives one argument and returns it in all caps\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOkay, so with that information, we know that our function should return whatever string is passed in as an argument:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction shout(string) {\u003cbr\u003e  return string;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut we're still missing one piece: how do we make \u003ccode\u003estring\u003c/code\u003e all caps? JavaScript has a built-in method for that! It's called \u003ccode\u003etoUpperCase()\u003c/code\u003e. We can call it on any string:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e'Hello!'.toUpperCase(); // 'HELLO!' \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove, we've called it directly on a literal string but, of course, we can also call it on a variable. So let's try it with our \u003ccode\u003eshout()\u003c/code\u003e function:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction shout(string) {\u003cbr\u003e  return string.toUpperCase();\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand run our tests again. We get:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshout(string)\u003cbr\u003e    ✓ receives one argument and returns it in all caps\u003cbr\u003e\u003cbr\u003e  whisper(string)\u003cbr\u003e    1) receives one argument and returns it in all lowercase\u003cbr\u003e\u003cbr\u003e  logShout(string)\u003cbr\u003e    2) calls console.log() its one argument in all caps\u003cbr\u003e\u003cbr\u003e  logWhisper(string)\u003cbr\u003e    3) calls console.log() its one argument in all lowercase\u003cbr\u003e\u003cbr\u003e  sayHiToGrandma(string)\u003cbr\u003e    4) returns \"I can't hear you!\" if `string` is lowercase\u003cbr\u003e    5) returns \"YES INDEED!\" if `string` is uppercase\u003cbr\u003e    6) returns \"I love you, too.\" if `string` is \"I love you, Grandma.\"`\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  1 passing (108ms)\u003cbr\u003e  6 failing\u003cbr\u003e\u003cbr\u003e  1) whisper(string)\u003cbr\u003e       receives one argument and returns it in all lowercase:\u003cbr\u003e     ReferenceError: whisper is not defined\u003cbr\u003e      at Context. (test/index-test.js:10:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  2) logShout(string)\u003cbr\u003e       calls console.log() its one argument in all caps:\u003cbr\u003e     ReferenceError: logShout is not defined\u003cbr\u003e      at Context. (test/index-test.js:18:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  3) logWhisper(string)\u003cbr\u003e       calls console.log() its one argument in all lowercase:\u003cbr\u003e     ReferenceError: logWhisper is not defined\u003cbr\u003e      at Context. (test/index-test.js:30:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  4) sayHiToGrandma(string)\u003cbr\u003e       returns \"I can't hear you!\" if `string` is lowercase:\u003cbr\u003e     ReferenceError: sayHiToGrandma is not defined\u003cbr\u003e      at Context. (test/index-test.js:40:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  5) sayHiToGrandma(string)\u003cbr\u003e       returns \"YES INDEED!\" if `string` is uppercase:\u003cbr\u003e     ReferenceError: sayHiToGrandma is not defined\u003cbr\u003e      at Context. (test/index-test.js:44:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  6) sayHiToGrandma(string)\u003cbr\u003e       returns \"I love you, too.\" if `string` is \"I love you, Grandma.\"`:\u003cbr\u003e     ReferenceError: sayHiToGrandma is not defined\u003cbr\u003e      at Context. (test/index-test.js:48:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003enpm ERR! Test failed.  See above for more details. \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHey! We got one to pass! Six left.\u003c/p\u003e\n\u003ch2\u003eYour Turn\u003c/h2\u003e\n\u003cp\u003eNow it's your turn to get the rest of the tests to pass. Note that some of them require you to use \u003ccode\u003econsole.log()\u003c/code\u003e instead of \u003ccode\u003ereturn\u003c/code\u003e — follow the guidance of the tests!\u003c/p\u003e\n\u003ch3\u003eInstructions\u003c/h3\u003e\n\u003cp\u003eIn this lab, we're writing functions that \"speak\" at different volumes — they whisper or they shout. The next test is similar to the first:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) whisper(string)\u003cbr\u003e       receives one argument and returns it in all lowercase:\u003cbr\u003e     ReferenceError: whisper is not defined\u003cbr\u003e      at Context. (test/index-test.js:10:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis test is telling us that \u003ccode\u003ewhisper(string)\u003c/code\u003e receives one argument and returns it in all lowercase. At the moment, the test is failing because whisper is not defined.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Just like \u003ccode\u003e.toUpperCase()\u003c/code\u003e changes any string to all uppercase in JavaScript, \u003ccode\u003e.toLowerCase()\u003c/code\u003e (e.g., \u003ccode\u003e'HELLO'.toLowerCase()\u003c/code\u003e) changes any string to all lowercase.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe next two tests are checking to see if a specific string is logged when a function is called. You will still need to use the \u003ccode\u003e.toUpperCase()\u003c/code\u003e and \u003ccode\u003e.toLowerCase()\u003c/code\u003e methods for \u003ccode\u003elogShout(string)\u003c/code\u003e and \u003ccode\u003elogWhisper(string)\u003c/code\u003e. Keep in mind, though, that these tests are not looking for return values, only logs.\u003c/p\u003e\n\u003cp\u003eThe final function you need to create is \u003ccode\u003esayHiToGrandma()\u003c/code\u003e. Grandma is a bit hard of hearing, so whispering can be a bit difficult, but she'll always hear you if you say, \"I love you, Grandma.\" This time, you will need to return different strings depending on the string passed into the function.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Although there are 3 tests for \u003ccode\u003esayHiToGrandma()\u003c/code\u003e, you only need to write \u003cstrong\u003eone\u003c/strong\u003e function. This function should be able to handle all three test conditions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf the string that is passed into the function is all lowercase, the function should return \"I can't hear you!\"\u003c/li\u003e\n\u003cli\u003eIf the string that is passed into the function is all uppercase, the function should return \"YES INDEED!\"\u003c/li\u003e\n\u003cli\u003eIf the string that is passed into the function is equal to \"I love you, Grandma.\", the function should return \"I love you, too.\"\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHow do we check if a string is all lowercase or all uppercase? Let's take a look using a REPL:\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://repl.it/@LizBurton/InsubstantialTanInternet?lite=true\" width=\"100%\" height=\"400px\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\" allowfullscreen=\"allowfullscreen\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003eIn the first line we're defining a string variable. In the next two lines we log the original variable, then the variable after calling \u003ccode\u003etoUpperCase()\u003c/code\u003e on it. Finally, we're checking to see whether those two values are equal. If you click the Run button, you'll see that the original string is mixed case and the upper cased version of it is (not surprisingly) uppercase. It should not come as a surprise, therefore, that comparing them with the equality operator (\u003ccode\u003e===\u003c/code\u003e) returns false. What do you think will happen if we initialize \u003ccode\u003estring\u003c/code\u003e to \"HELLO!\" instead? Play around with different values for \u003ccode\u003estring\u003c/code\u003e and see what happens. Also try doing the same thing with \u003ccode\u003etoLowerCase()\u003c/code\u003e and make sure you understand what's happening.\u003c/p\u003e\n\u003cp\u003eBasically, if we compare a string to its uppercased (or lowercased) version and the two values are equal, then we know that the original string is uppercase (or lowercase). So now that we know how to make these comparisons, how can we use them to conditionally return different strings? If you need a refresher, go back and review the lesson on Selection with Conditionals.\u003c/p\u003e\n\u003cp\u003eRemember that punctuation is important! Humans might be able to understand that \"I love you Grandma\" is close enough to \"I love you, Grandma.\" and means the same thing but JavaScript will not consider these equal!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e As you're working through the tests, you can run your code by running \u003ccode\u003enode index.js\u003c/code\u003e in the terminal. If you want to do this, remember that you'll need to \u003cem\u003ecall\u003c/em\u003e the function inside \u003ccode\u003eindex.js\u003c/code\u003e. If you are just running tests, however, you don't need to include a function call — the tests will handle that for you.\u003c/p\u003e\n\u003cp\u003eGood luck!\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e","exportId":"gfce95e21981d4de81b2ddc9b16753ef3"},{"id":157867,"title":"JavaScript Function Parameters Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-function-parameters-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine a function that uses a parameter\u003c/li\u003e \u003cli\u003eDefine a function that uses two parameters\u003c/li\u003e \u003cli\u003eDefine a function with a parameter that has a default value\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lab, we'll practice using parameters in our functions. We'll also learn how to create a default value for a parameter.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. (If you are using a different text editor, the command will be different.) Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003cp\u003eYou will be writing your code in the \u003ccode\u003eindex.js\u003c/code\u003e file and running the tests by running \u003ccode\u003enpm test\u003c/code\u003e in the terminal.\u003c/p\u003e  \u003ch2\u003eDefine a Function That Uses a Parameter\u003c/h2\u003e  \u003cp\u003e\u003cstrong\u003eInstructions:\u003c/strong\u003e Define a function called \u003ccode\u003eintroduction\u003c/code\u003e that defines a parameter, \u003ccode\u003ename\u003c/code\u003e, and returns the phrase: \"Hi, my name is ${name}.\"\u003c/p\u003e  \u003ch2\u003eDefine a Function That Uses Two Parameters\u003c/h2\u003e  \u003cp\u003eSetting up your function to use two parameters is straightforward: simply include both parameters in the parentheses in the function declaration line, separated by a comma:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction logTwoValues(value1, value2) {\u003cbr\u003e  console.log(`The two values are ${value1} and ${value2}.`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs you might expect, if we instead wanted to log three values — or ten values — we can just continue listing the parameters in the parentheses, with commas between each.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eInstructions:\u003c/strong\u003e To pass the second test, you'll need to define a function called \u003ccode\u003eintroductionWithLanguage\u003c/code\u003e that defines two parameters, \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003elanguage\u003c/code\u003e, and returns the phrase: \"Hi, my name is [name] and I am learning to program in [language].\"\u003c/p\u003e  \u003ch2\u003eDefine a Function That Uses an Optional Parameter\u003c/h2\u003e  \u003cp\u003eIn a previous lesson, we created a function that logs a personalized greeting:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sayHelloTo(firstName) {\u003cbr\u003e  console.log(`Hello, ${firstName}!`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat if we wanted to make this function work \u003cem\u003ewhether or not\u003c/em\u003e a first name is passed in as an argument? We can do this by setting a \u003cem\u003edefault value\u003c/em\u003e for the \u003ccode\u003efirstName\u003c/code\u003e parameter:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sayHelloTo(firstName = \"User\") {\u003cbr\u003e  console.log(`Hello, ${firstName}!`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that we have used the assignment operator (\u003ccode\u003e=\u003c/code\u003e) here to assign a default value. The way this works is, if the function is called \u003cem\u003ewith\u003c/em\u003e an argument, the argument's value will supersede the default value. If it's called \u003cem\u003ewithout\u003c/em\u003e an argument, the function will use the default value, logging \"Hello, User!\"\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eInstructions:\u003c/strong\u003e Copy the function you created for the second test and name it \u003ccode\u003eintroductionWithLanguageOptional\u003c/code\u003e. It should have two parameters, \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003elanguage\u003c/code\u003e, and the second parameter should have a default value of \"JavaScript\".\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e","exportId":"g3dc2f9bbd6e73a3a4ae3e55f81369a8d"},{"id":157868,"title":"JavaScript Calculator Challenge Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-arithmetic-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-arithmetic-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-arithmetic-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePractice doing math with JavaScript\u003c/li\u003e\n\u003cli\u003ePractice writing functions that do things with numbers\u003c/li\u003e\n\u003cli\u003ePractice parsing strings as numbers\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this lab, we're going to practice writing functions and manipulating numbers in JavaScript. First, though, we need to review some basic math. In this lab, we're going to learn about various arithmetic operators. What's an operator, you say? It's a symbol that \u003cem\u003eoperates\u003c/em\u003e on one or more (usually two) objects — \u003ccode\u003e+\u003c/code\u003e is a good example. The \u003ccode\u003e+\u003c/code\u003e operator says \"add what's to the left of \u003ccode\u003e+\u003c/code\u003e and what's to the right of \u003ccode\u003e+\u003c/code\u003e together.\"\u003c/p\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. (If you are using a different text editor, the command will be different.) Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003cp\u003eAs you read through this lesson, you're going to be adding your solutions to \u003ccode\u003eindex.js\u003c/code\u003e. You'll write a total of eight functions. Use the results of running \u003ccode\u003enpm test\u003c/code\u003e to guide you towards the right function names and functionality.\u003c/p\u003e\n\u003ch2\u003eBasic Math\u003c/h2\u003e\n\u003cp\u003eThe most fundamental math operations work as one might expect in JavaScript: \u003ccode\u003e+\u003c/code\u003e adds two numbers; \u003ccode\u003e-\u003c/code\u003e subtracts one number from another; \u003ccode\u003e*\u003c/code\u003e multiplies two numbers; and \u003ccode\u003e/\u003c/code\u003e divides one number by another.\u003c/p\u003e\n\u003cp\u003eTo follow along with the examples in this lesson, we'll be using the \u003cem\u003eterminal window\u003c/em\u003e in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e. You can type any JavaScript statement or expression at the prompt and it will be immediately executed when you hit enter. Give it a try: type each of the following math examples into the terminal. You can use the embedded terminal below or open repl.it in a separate window if you prefer.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1 + 80; //=\u0026gt; 81\u003cbr\u003e60 - 40; //=\u0026gt; 20\u003cbr\u003e2 * 3.4; //=\u0026gt; 6.8\u003cbr\u003e5.0 / 2.5; //=\u0026gt; 2 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ciframe src=\"https://repl.it/@LizBurton/ConstantLoathsomeToolbox?lite=true\u0026amp;outputonly=1\" width=\"100%\" height=\"400px\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\" allowfullscreen=\"allowfullscreen\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003eAt this point, we can fix the first \u003cem\u003eeight\u003c/em\u003e failing tests: we can define functions \u003ccode\u003eadd()\u003c/code\u003e, \u003ccode\u003esubtract()\u003c/code\u003e, \u003ccode\u003emultiply()\u003c/code\u003e, and \u003ccode\u003edivide()\u003c/code\u003e in \u003ccode\u003eindex.js\u003c/code\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: you can also \u003cem\u003edefine and run functions\u003c/em\u003e in the REPL terminal. Try writing your \u003ccode\u003eadd()\u003c/code\u003e function in the terminal first to see how it works.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eMath + Assignment\u003c/h2\u003e\n\u003cp\u003eRecall that we can increment (\u003ccode\u003e++\u003c/code\u003e) and decrement (\u003ccode\u003e--\u003c/code\u003e) a number if it's assigned to a variable. Don't forget to follow along in the REPL's terminal.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet number = 5;\u003cbr\u003e\u003cbr\u003enumber++; //=\u0026gt; 5... hmmmm\u003cbr\u003e\u003cbr\u003enumber; //=\u0026gt; 6 -- the number was incremented after it was evaluated\u003cbr\u003e\u003cbr\u003enumber--; //=\u0026gt; 6\u003cbr\u003e\u003cbr\u003enumber; //=\u0026gt; 5 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can also put the incrementor and decrementor operations before the number, in which case the number is evaluated \u003cem\u003eafter\u003c/em\u003e the operator is executed:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e--number; //=\u0026gt; 4\u003cbr\u003e\u003cbr\u003enumber; //=\u0026gt; 4\u003cbr\u003e\u003cbr\u003e++number; //=\u0026gt; 5\u003cbr\u003e\u003cbr\u003enumber; //=\u0026gt; 5 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut generally, you will see them placed \u003cem\u003eafter\u003c/em\u003e the number (and we recommend that that's where you put them). If you're interested in the difference, take a look at \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment\"\u003ethe documentation on MDN\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAnd, while we're on the subject, you'll usually only want to use these incrementors and decrementors when the shorthand makes what you're writing easier to read (more on when \u003cem\u003eexactly\u003c/em\u003e in a later lesson). Instead, it's best to use the basic arithmetic operators combined with \u003ccode\u003e=\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFollow along in the terminal's REPL. You can pick up where we left off with the previous examples. Start by setting \u003ccode\u003enumber\u003c/code\u003e equal to 5.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e+=\u003c/code\u003e modifies the value to the operator's left by adding to it the value to the operator's right:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003enumber += 3 //=\u0026gt; 8 \u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e-=\u003c/code\u003e modifies the value to the operator's left by subtracting from it the value to the operator's right:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003enumber -= 2 //=\u0026gt; 6 \u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e*=\u003c/code\u003e modifies the value to the operator's left by multiplying it by the value to the operator's right:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003enumber *= 10 //=\u0026gt; 60 \u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e/=\u003c/code\u003e modifies the value to the operator's left by dividing it by the value to the operator's right:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003enumber /= 5 //=\u0026gt; 12 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that these methods modify the variable in place. So, if we have two functions that depend on the same external variable, the order in which they are called matters. Follow along in the terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e//reset number\u003cbr\u003enumber = 10\u003cbr\u003e\u003cbr\u003efunction add5() {\u003cbr\u003e  return number += 5;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction divideBy3() {\u003cbr\u003e  return number /= 3;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edivideBy3(); //=\u0026gt; 3.3333333333333335\u003cbr\u003e\u003cbr\u003eadd5(); //=\u0026gt; 8.333333333333334\u003cbr\u003e\u003cbr\u003e// reset number\u003cbr\u003enumber = 10\u003cbr\u003e\u003cbr\u003eadd5(); //=\u0026gt; 15\u003cbr\u003e\u003cbr\u003edivideBy3(); //=\u0026gt; 5 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eBecause these methods are more explicit, we prefer \u003ccode\u003e+=\u003c/code\u003e to \u003ccode\u003e++\u003c/code\u003e and \u003ccode\u003e-=\u003c/code\u003e to \u003ccode\u003e--\u003c/code\u003e (usually).\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eOkay, now we're ready to write solutions for the next two functions: \u003ccode\u003eincrement(n)\u003c/code\u003e and \u003ccode\u003edecrement(n)\u003c/code\u003e. These methods should take in a number, and increment/decrement the provided value by one, returning the result.\u003c/p\u003e\n\u003ch2\u003eParsing Numbers\u003c/h2\u003e\n\u003cp\u003eSometimes, we'll receive a number wrapped in quotes. We recognize it as a number, but JavaScript will think it's a string. Luckily, JavaScript gives us tools to turn these strings into proper numbers (that is, numbers that JavaScript understands).\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe first such tool is the function \u003ccode\u003eparseInt()\u003c/code\u003e, which accepts two arguments: the value to parse and the base of the value being parsed (called the \u003cem\u003eradix\u003c/em\u003e). \u003cem\u003eUsually\u003c/em\u003e you will want to work with base 10, so a typical call to \u003ccode\u003eparseInt()\u003c/code\u003e looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eparseInt('2', 10); //=\u0026gt; 2 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat happens if we pass a representation of a non-integer to \u003ccode\u003eparseInt()\u003c/code\u003e? Let's try it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eparseInt('2.2222', 10); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we enter the above in the REPL's terminal, we will see that \u003ccode\u003eparseInt()\u003c/code\u003e forces the parsed number to be an integer — which makes sense when we think about it, right?\u003c/p\u003e\n\u003cp\u003eWhat happens, though, if we pass utter nonsense to \u003ccode\u003eparseInt()\u003c/code\u003e? Go ahead and try it — something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eparseInt('nonsense!', 10); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat did it return? \u003ccode\u003eNaN\u003c/code\u003e? What is that?\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eNaN\u003c/code\u003e stands for \"Not a Number\" — pretty handy, right? This is the number (in the JavaScript sense) that JavaScript returns when it can't determine a valid value for a numeric operation.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You may see \u003ccode\u003eparseInt()\u003c/code\u003e used without a radix specified. In most cases, the radix will default to 10, \u003cstrong\u003ebut not always\u003c/strong\u003e! To be safe, you should \u003cstrong\u003ealways specify a radix\u003c/strong\u003e.\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003eparseFloat()\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eAbove, we saw that \u003ccode\u003eparseInt()\u003c/code\u003e lops off everything after the decimal point and only returns integers. If we want to preserve decimals, we'll need to use \u003ccode\u003eparseFloat()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eUnlike \u003ccode\u003eparseInt()\u003c/code\u003e, \u003ccode\u003eparseFloat()\u003c/code\u003e accepts only a single argument, the thing to be parsed. We can use it like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eparseFloat('80.123999'); // 80.123999 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou're now ready to solve the final two tests in this lab, \u003ccode\u003emakeInt(string)\u003c/code\u003e and \u003ccode\u003epreserveDecimal(string)\u003c/code\u003e. \u003ccode\u003emakeInt(string)\u003c/code\u003e should take in a string, parse it into a base 10 integer and return it. \u003ccode\u003epreserveDecimal(string)\u003c/code\u003e should take in a string, parse it into a float and return it.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\"\u003eMDN - parseInt()\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\"\u003eMDN - parseFloat()\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g6ba8a11d91c79c765e0215c2709ef9bd"},{"id":243585,"title":"Survey - Programming as Conversation Part 3","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Programming as Conversation Part 3 module?\u003c/p\u003e\n\u003c/div\u003e","exportId":"g22ccb00b541dd84f8a2b7aeab2987827"}]},{"id":16917,"name":"Working with Data Structures","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gbe6ea64bfaaf776d53a2b63b923dacdc","items":[{"id":157869,"title":"Introduction to Working with Data Structures","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-working-with-data-structures-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-working-with-data-structures-intro/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-working-with-data-structures-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-working-with-data-structures-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCompare collection data types to other data types\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eArray\u003c/code\u003e element\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eArray\u003c/code\u003e index\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eObject\u003c/code\u003e key\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eObject\u003c/code\u003e value\u003c/li\u003e \u003cli\u003eDemonstrate nesting of collection data structures\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThus far, we've been storing simple data in our variables, values like:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eString\u003c/code\u003es\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eBoolean\u003c/code\u003es\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eNumber\u003c/code\u003es\u003c/li\u003e \u003cli\u003eetc.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eBut sometimes we want to refer to a \u003cem\u003ecollection\u003c/em\u003e of values by a common name. This is very natural in conversation: we know \"The Beatles\" refer to four guys from Liverpool who sang \"I Wanna Hold Your Hand.\" \"Grocery List\" is something that contains multiple small elements that we identify by \"the third item on my grocery list, or the last item on my grocery list.\" Ordered lists in JavaScript are called \"Arrays.\"\u003c/p\u003e  \u003cp\u003e  \u003cimg width=\"300\" src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-4/introduction/Image_125_Scroll%20w-List.png\" alt=\"Scroll\"\u003e \u003c/p\u003e  \u003cp\u003eAnother collection type we know about from daily life are dictionaries: we use one thing to \"look up\" a value. We \"look up\" the word \"computer\" in a real dictionary and we are \"pointed to\" a long \u003ccode\u003eString\u003c/code\u003e that tells us what the word means. Lookup tables, or dictionaries, in JavaScript, are called \"Objects.\"\u003c/p\u003e  \u003cp\u003e  \u003cimg width=\"300\" src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-4/introduction/Image_126_Dictionary.png\" alt=\"Dictionary\"\u003e \u003c/p\u003e  \u003cp\u003eLearning to store and to work with the data held in data structures will be the focus of this section. In this lesson, we'll give you a broad, conceptual introduction to collection data types.\u003c/p\u003e  \u003ch2\u003eCompare Collection Data Types to Scalar Data Types\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eString\u003c/code\u003es and \u003ccode\u003eNumber\u003c/code\u003es are scalar data types, they can be put on a scale. A collection type holds multiple pieces of data and allows us to talk about the collection as an \u003cem\u003eabstraction\u003c/em\u003e. \"The Beatles\" is an \u003cem\u003eabstraction\u003c/em\u003e used to refer to the individuals John, Paul, George, and Ringo. Because collection types can't be put on a scale, they \u003cstrong\u003e\u003cem\u003eare not\u003c/em\u003e\u003c/strong\u003e called scalar data types.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eArray\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eAn \u003ccode\u003eArray\u003c/code\u003e is a collection that holds multiple pieces of data under a single name (\"Gryffindors\", \"Countries\"). In daily life, we call them \"lists.\"\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eThe Beatles\u003c/strong\u003e\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\n\u003ctr\u003e     \u003cth\u003eIndex\u003c/th\u003e     \u003cth\u003eData\u003c/th\u003e   \u003c/tr\u003e    \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"John Lennon\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Paul McCartney\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Ringo Starr\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"George Harrison\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eor\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eGroceries\u003c/strong\u003e\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\n\u003ctr\u003e     \u003cth\u003eIndex\u003c/th\u003e     \u003cth\u003eData\u003c/th\u003e   \u003c/tr\u003e    \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Parsnips\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"English Toffee\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Milk\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Sprouted Rye Bread\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eThe individual \u003cem\u003eelements\u003c/em\u003e that make up this collection (or list) name are identified by an \u003cem\u003eindex\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003e   \u003cimg width=\"500\" src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-4/introduction/Image_127_Beatles.png\" alt=\"Beatles\"\u003e \u003c/p\u003e  \u003cp\u003eIt might seem strange that we start our list at \u003ccode\u003e0\u003c/code\u003e instead of \u003ccode\u003e1\u003c/code\u003e. Programmers like \u003ccode\u003e0\u003c/code\u003e and most programming languages start their index at \u003ccode\u003e0\u003c/code\u003e. Otherwise, it's pretty much a list like you've been making most of your life.\u003c/p\u003e  \u003cp\u003eTo define this \"list\" in JavaScript we would type:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst theBeatles = [ \"John Lennon\", \"Paul McCartney\", \"Ringo Starr\", \"George Harrison\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou provide a name (\u003ccode\u003etheBeatles\u003c/code\u003e), an assignment operator (\u003ccode\u003e=\u003c/code\u003e) and then a list of data, separated by commas, that should go in the \u003ccode\u003eArray\u003c/code\u003e, wrapped in \u003ccode\u003e[]\u003c/code\u003e. Each bit of information is often a scalar value, but it could also be another collection (more on that later).\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eArray\u003c/code\u003e Element / Member\u003c/h2\u003e  \u003cp\u003eThe individual pieces of data inside an \u003ccode\u003eArray\u003c/code\u003e are called \u003cem\u003eelements\u003c/em\u003e. Some people also call the \u003cem\u003eelements\u003c/em\u003e the \u003cem\u003emembers\u003c/em\u003e. In a collection of \u003ccode\u003etheBeatles\u003c/code\u003e, the \u003ccode\u003eString\u003c/code\u003e \u003ccode\u003e\"George Harrison\"\u003c/code\u003e is an \u003cem\u003eelement\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eArray\u003c/code\u003e Index\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eArray\u003c/code\u003es provide a number that identifies each \u003cem\u003eelement\u003c/em\u003e called an \u003cem\u003eindex\u003c/em\u003e. The index for the \u003cem\u003eelement\u003c/em\u003e \u003ccode\u003e\"Ringo Starr\"\u003c/code\u003e above is \u003ccode\u003e2\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe'll cover adding, removing, retrieving, and deleting \u003cem\u003eelements\u003c/em\u003e via their \u003cem\u003eindex\u003c/em\u003e in another lesson.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eObject\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eAnother way of thinking about \u003ccode\u003eArray\u003c/code\u003es is that they are like tables that have an identifier that is a \u003ccode\u003eNumber\u003c/code\u003e. If we let the identifier be a \u003ccode\u003eString\u003c/code\u003e \u003cem\u003einstead\u003c/em\u003e of an \u003ccode\u003eNumber\u003c/code\u003e, then we'd basically be describing an \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhat if we wanted to take our list of the Beatles and describe each member not by some \u003ccode\u003eNumber\u003c/code\u003e \u003cem\u003eindex\u003c/em\u003e, but rather by the instrument they played in the band? As a table this might look like:\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\n\u003ctr\u003e     \u003cth\u003eInstrument\u003c/th\u003e     \u003cth\u003eBeatle\u003c/th\u003e   \u003c/tr\u003e    \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"Rhythm Guitar\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"John Lennon\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"Bass\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Paul McCartney\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"Drums\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Ringo Starr\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"Lead Guitar\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"George Harrison\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eAn \u003ccode\u003eObject\u003c/code\u003e is a collection data type that holds multiple pieces of data under a collected name whose members can be read and updated by using a \u003cem\u003ekey\u003c/em\u003e instead of an \u003cem\u003eindex\u003c/em\u003e. In daily conversation we use \u003cem\u003ekeys\u003c/em\u003e to retrieve \u003cem\u003evalues\u003c/em\u003e all the time: \"Who was the guy who played \u003cstrong\u003edrums\u003c/strong\u003e in \u003cstrong\u003eThe Beatles\u003c/strong\u003e?\"\u003c/p\u003e  \u003cp\u003eWe can think of \u003ccode\u003eObject\u003c/code\u003es like a table that looks like this:\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\n\u003ctr\u003e     \u003cth\u003eKey\u003c/th\u003e     \u003cth\u003eValue\u003c/th\u003e   \u003c/tr\u003e    \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"liverpool\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"The Beatles\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"manchester\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"The Smiths\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"coventry\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Delia Derbyshire and the BBC Radiophonic Band\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"london\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Ziggy Stardust and the Spiders from Mars\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eTo define this \"table\" in JavaScript we would type:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst englishBandsByCity = {\u003cbr\u003e \"liverpool\": \"The Beatles\",\u003cbr\u003e \"manchester\": \"The Smiths\",\u003cbr\u003e \"coventry\": \"Delia Derbyshire and the BBC Radiophonic Band\",\u003cbr\u003e \"london\": \"Ziggy Stardust and the Spiders from Mars\"\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou provide a name (\u003ccode\u003eenglishBandsByCity\u003c/code\u003e), an assignment operator (\u003ccode\u003e=\u003c/code\u003e) and then a list of pairs, separated by commas, that should go in the \u003ccode\u003eObject\u003c/code\u003e, wrapped in \u003ccode\u003e{}\u003c/code\u003e. Each pair should have a key, a colon (\u003ccode\u003e:\u003c/code\u003e), and a value. A value is often a scalar value, but it could be another collection; more on that later.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eObject\u003c/code\u003e Key\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eObject\u003c/code\u003es are like tables that have a name that is a piece of data, typically a \u003ccode\u003eSymbol\u003c/code\u003e or a \u003ccode\u003eString\u003c/code\u003e. This identifier is called a \u003cem\u003ekey\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eObject\u003c/code\u003e Value\u003c/h2\u003e  \u003cp\u003eThe value that's returned from asking an \u003ccode\u003eObject\u003c/code\u003e what a given \u003cem\u003ekey\u003c/em\u003e points to is known as the key's \u003cem\u003evalue\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eWe'll cover adding, removing, retrieving, and deleting \u003cem\u003evalues\u003c/em\u003e via their \u003cem\u003ekey\u003c/em\u003e in another lesson.\u003c/p\u003e  \u003ch2\u003eDemonstrate Nesting of Collection Data Structures\u003c/h2\u003e  \u003cp\u003eNow that you know about \u003ccode\u003eArray\u003c/code\u003es (grocery lists, band members, todo lists) and \u003ccode\u003eObject\u003c/code\u003es (abbreviation to full name lookup, a stock symbol to trading value lookup, instrument to band member name lookup) you might be a bit unimpressed. \"Surely the world's data needs are more complex than simple lists and lookup tables,\" you might exclaim.\u003c/p\u003e  \u003cp\u003eYou'd be right, but the amazing thing about collections is that they can contain \u003cem\u003eother\u003c/em\u003e collections as part of a process called \u003cem\u003enesting\u003c/em\u003e. Can you imagine an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eObject\u003c/code\u003es? Or an \u003ccode\u003eObject\u003c/code\u003e of \u003ccode\u003eArrays\u003c/code\u003e of \u003ccode\u003eObject\u003c/code\u003es of \u003ccode\u003eArray\u003c/code\u003es? You can cover a staggeringly huge model of data with nesting of these two data types.\u003c/p\u003e  \u003cp\u003eWe want to provide a really complex example of \u003ccode\u003eArray\u003c/code\u003es and \u003ccode\u003eObject\u003c/code\u003es working together. Most programming texts don't share this concept this early and it makes \"nesting\" sound scary and complex. We're going to give you a short demonstration here so that you can see why you want to have these complex data structures. The details on how to build them etc... will come in later lessons.\u003c/p\u003e  \u003cp\u003eThe \u003cem\u003eelements\u003c/em\u003e in an \u003cem\u003eArray\u003c/em\u003e and the \u003cem\u003evalues\u003c/em\u003e in an \u003cem\u003eObject\u003c/em\u003e can be \u003ccode\u003eObject\u003c/code\u003es or \u003ccode\u003eArray\u003c/code\u003es \u003cem\u003ethemselves\u003c/em\u003e. This leads to \"nesting\" such that you could build a complex data structure like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst englishMusicByCity = {\u003cbr\u003e  \"manchester\": [\u003cbr\u003e    {\u003cbr\u003e      \"bandName\": \"The Smiths\",\u003cbr\u003e      \"memberNames\": [\"Morrissey\", \"Johnny\", \"Andy\", \"Mike\"]\u003cbr\u003e    },\u003cbr\u003e    {\u003cbr\u003e      \"bandName\": \"Joy Division\",\u003cbr\u003e      \"memberNames\": [\"Peter\", \"Stephen\", \"Bernard\", \"Ian\"]\u003cbr\u003e    }\u003cbr\u003e  ]\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cem\u003eabstraction\u003c/em\u003e \u003ccode\u003eenglishMusicByCity\u003c/code\u003e hides the complexity in that piece of data.\u003c/p\u003e  \u003cp\u003eAs a peek ahead, we can use the lookup operator (\u003ccode\u003e[]\u003c/code\u003e) to \"dig into\" this nested collection and get interesting information out:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eenglishMusicByCity[\"manchester\"][0][\"bandName\"] //=\u0026gt; \"The Smiths\"\u003cbr\u003eenglishMusicByCity[\"manchester\"][0][\"memberNames\"] //=\u0026gt; [\"Morrissey\", \"Johnny\", \"Andy\", \"Mike\"]\u003cbr\u003e\u003cbr\u003econsole.log(`There were ${englishMusicByCity[\"manchester\"][0][\"memberNames\"].length} members in ${englishMusicByCity[\"manchester\"][0][\"bandName\"]}`)\u003cbr\u003e//=\u0026gt; \"There were 4 members in The Smiths\" \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThis is has been a broad tour of JavaScript's collection data types, \u003ccode\u003eObject\u003c/code\u003e and \u003ccode\u003eArray\u003c/code\u003e.  Individually, they are data structures that can hold list- and dictionary-like data. Amazingly, they can even \u003cem\u003ehold each other\u003c/em\u003e — and that means we can make very complex data structures from them! We'll practice with these types in the following lessons!\u003c/p\u003e","exportId":"introduction-to-working-with-data-structures"},{"id":157870,"title":"Arrays","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-arrays\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-arrays/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-arrays\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-arrays/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify data structures and \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e \u003cli\u003eCreate \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e \u003cli\u003eAccess the elements in an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eLearn about nested \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e \u003cli\u003eIntroduce \u003ccode\u003eArray\u003c/code\u003e methods\u003c/li\u003e \u003cli\u003eUnderstand mutability\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eSo far, we've been focusing on JavaScript's \u003cem\u003eprimitive\u003c/em\u003e data types — types that represent a single value — in particular, strings, Booleans, and numbers. But sometimes we need a way to store a \u003cem\u003ecollection\u003c/em\u003e of data. For this, we need data structures. In this and the next lesson, we will learn about a very useful data structure: \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eBe sure to follow along with the examples in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003ch2\u003eIdentify Data Structures and Arrays\u003c/h2\u003e  \u003cp\u003eA \u003cem\u003edata structure\u003c/em\u003e is a means for associating and organizing information. Outside of the programming world, we use data structures all the time. For example, we might have a shopping list of the items we need to buy on our next grocery run or an address book for organizing contact information.\u003c/p\u003e  \u003cp\u003eIf we have a lot of related data, it's best to represent it in a related system. Imagine that we're working on a lottery application that has to represent the winning lottery numbers. We could do that as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst firstNumber = 32;\u003cbr\u003econst secondNumber = 9;\u003cbr\u003econst thirdNumber = 14;\u003cbr\u003econst fourthNumber = 33;\u003cbr\u003econst fifthNumber = 48;\u003cbr\u003econst powerBall = 5; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe've represented all six pieces of data, but there's no way to refer to them as a group. Every single time we want to reference that combination of winning numbers, we need to remember and type out six different variable names:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst firstNumber = 32;\u003cbr\u003econst secondNumber = 9;\u003cbr\u003econst thirdNumber = 14;\u003cbr\u003econst fourthNumber = 33;\u003cbr\u003econst fifthNumber = 48;\u003cbr\u003econst powerBall = 5;\u003cbr\u003e\u003cbr\u003efunction logWinningNumbers (first, second, third, fourth, fifth, power) {\u003cbr\u003e  console.log('Winning numbers:', first, second, third, fourth, fifth, power);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elogWinningNumbers(firstNumber, secondNumber, thirdNumber, fourthNumber, fifthNumber, powerBall);\u003cbr\u003e// LOG: Winning numbers: 32 9 14 33 48 5\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat's so much typing! There are much, much better ways to organize data in JavaScript. Let's learn about one of the most common: the \u003cem\u003e\u003ccode\u003eArray\u003c/code\u003e\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eCreate Arrays\u003c/h2\u003e  \u003cp\u003eAn \u003ccode\u003eArray\u003c/code\u003e is a list, with the items listed in a particular order, surrounded by square brackets (\u003ccode\u003e[]\u003c/code\u003e) and separated by commas:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e['This', 'is', 'an', 'array', 'of', 'strings.'];\u003cbr\u003e// =\u0026gt; [\"This\", \"is\", \"an\", \"array\", \"of\", \"strings.\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cem\u003emembers\u003c/em\u003e or \u003cem\u003eelements\u003c/em\u003e in an \u003ccode\u003eArray\u003c/code\u003e can be data of any type in JavaScript:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e['Hello, world!', 42, null, NaN];\u003cbr\u003e// =\u0026gt; [\"Hello, world!\", 42, null, NaN] \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: In some other languages \u003ccode\u003eArray\u003c/code\u003es \u003cem\u003ecannot include elements of multiple types\u003c/em\u003e. In C, C++, Java, Swift, and others you cannot mix types. JavaScript, Python, Ruby, Lisp, and others permit this.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eArrays are \u003cem\u003eordered\u003c/em\u003e, meaning that the elements in them will always appear in the same order. This also means that the \u003ccode\u003eArray\u003c/code\u003e \u003ccode\u003e[1, 2, 3]\u003c/code\u003e is different from the \u003ccode\u003eArray\u003c/code\u003e \u003ccode\u003e[3, 2, 1]\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eJust like any other type of JavaScript data, we can assign an \u003ccode\u003eArray\u003c/code\u003e to a variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37];\u003cbr\u003e\u003cbr\u003econst tvShows = ['Game of Thrones', 'Breaking Bad', 'Veep', 'Mad Men']; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can find out how many elements an \u003ccode\u003eArray\u003c/code\u003e contains by checking the \u003ccode\u003eArray\u003c/code\u003e's built-in \u003ccode\u003elength\u003c/code\u003e property:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = ['This', 'array', 'has', 5, 'elements'];\u003cbr\u003e\u003cbr\u003emyArray.length;\u003cbr\u003e// =\u0026gt; 5 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe defined the above \u003ccode\u003eArray\u003c/code\u003es using the \u003cem\u003earray literal\u003c/em\u003e syntax —\u0026nbsp;that is, we literally typed out the \u003ccode\u003eArray\u003c/code\u003e that we wanted to create, square brackets and all. There are other ways to create new \u003ccode\u003eArray\u003c/code\u003es, but they are only necessary for very rare circumstances. For now, use \u003ccode\u003eArray\u003c/code\u003e literals.\u003c/p\u003e  \u003cp\u003eTo get a sense of just how effective \u003ccode\u003eArray\u003c/code\u003es are at keeping data organized, let's rewrite our lottery code to use an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst winningNumbers = [32, 9, 14, 33, 48, 5];\u003cbr\u003e\u003cbr\u003efunction logWinningNumbers (numbers) {\u003cbr\u003e  console.log('Winning numbers:', numbers);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elogWinningNumbers(winningNumbers);\u003cbr\u003e// LOG: Winning numbers: [32, 9, 14, 33, 48, 5]\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003eArray\u003c/code\u003e provides organization, and we only have to remember \u003cem\u003eone\u003c/em\u003e identifier (\u003ccode\u003ewinningNumbers\u003c/code\u003e) instead of six (\u003ccode\u003efirstNumber\u003c/code\u003e, \u003ccode\u003esecondNumber\u003c/code\u003e, and so on). We can also call \u003ccode\u003eArray\u003c/code\u003es \u003cem\u003eexpressive\u003c/em\u003e because putting all the winning numbers in a shared data structure communicates to other programmers \"Hey, these things go together.\"\u003c/p\u003e  \u003cp\u003eThe one benefit of storing all six lottery numbers separately is that we had a really easy way to access each individual number. For example, we could just reference \u003ccode\u003epowerBall\u003c/code\u003e to grab the sixth number. Luckily, \u003ccode\u003eArray\u003c/code\u003es offer an equally simple syntax for accessing individual members.\u003c/p\u003e  \u003ch2\u003eUsing the Computed Member Access Operator\u003c/h2\u003e  \u003cp\u003eEvery element in an \u003ccode\u003eArray\u003c/code\u003e is assigned a unique index value that corresponds to its place within the collection, \u003cstrong\u003estarting at 0\u003c/strong\u003e. The first element in the \u003ccode\u003eArray\u003c/code\u003e is at index \u003ccode\u003e0\u003c/code\u003e, the fifth element at index \u003ccode\u003e4\u003c/code\u003e, and the 428th element at index \u003ccode\u003e427\u003c/code\u003e. The \u003cem\u003ecomputed member access operator\u003c/em\u003e (\u003ccode\u003e[]\u003c/code\u003e) allows us to access the element at a given index.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Most people just call it \u003cem\u003ebracket notation\u003c/em\u003e or the \u003cem\u003ebracket operator\u003c/em\u003e, so don't worry too much about remembering the term \u003cem\u003ecomputed member access operator\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eAccessing an Element\u003c/h3\u003e  \u003cp\u003eTo access an element, we use the computed member access operator like this: \u003ccode\u003enameOfArray[index]\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst winningNumbers = [32, 9, 14, 33, 48, 5];\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003ewinningNumbers[0];\u003cbr\u003e// =\u0026gt; 32\u003cbr\u003e\u003cbr\u003ewinningNumbers[3];\u003cbr\u003e// =\u0026gt; 33 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's take a minute to think about how we could access the \u003cstrong\u003elast\u003c/strong\u003e element in any \u003ccode\u003eArray\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf \u003ccode\u003emyArray\u003c/code\u003e contains 10 elements, the final element will be at \u003ccode\u003emyArray[9]\u003c/code\u003e. If \u003ccode\u003emyArray\u003c/code\u003e contains 15000 elements, the final element will be at \u003ccode\u003emyArray[14999]\u003c/code\u003e. So the index of the final element is always one less than the number of elements in the \u003ccode\u003eArray\u003c/code\u003e. If only we had an easy way to figure out how many elements are in the \u003ccode\u003eArray\u003c/code\u003e...\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003ealphabet.length;\u003cbr\u003e// =\u0026gt; 26\u003cbr\u003e\u003cbr\u003ealphabet[alphabet.length - 1];\u003cbr\u003e// =\u0026gt; \"z\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is why it's called the \u003cstrong\u003e\u003cem\u003ecomputed\u003c/em\u003e\u003c/strong\u003e \u003cem\u003emember access operator\u003c/em\u003e. We placed an expression (\u003ccode\u003ealphabet.length - 1\u003c/code\u003e) inside the square brackets, and the JavaScript engine \u003cem\u003ecomputed\u003c/em\u003e the value of that expression to determine which element we were trying to access. In this case, \u003ccode\u003ealphabet.length - 1\u003c/code\u003e evaluated to \u003ccode\u003e25\u003c/code\u003e, so \u003ccode\u003ealphabet[alphabet.length - 1]\u003c/code\u003e became \u003ccode\u003ealphabet[25]\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eUpdating the Value of an Element\u003c/h2\u003e  \u003cp\u003eWe can also use the computed member access operator (\u003ccode\u003e[]\u003c/code\u003e) — along with the assignment operator (\u003ccode\u003e=\u003c/code\u003e) — to update the value of an element in the array. To do that, we access the element we want then reassign that element's value using \u003ccode\u003e=\u003c/code\u003e. Say we've defined an array, \u003ccode\u003eplanets\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Juptier\", \"Saturn\", \"Uranus\", \"Neptune\"];\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLooks like we've got a typo. Let's fix it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eplanets[4] = \"Jupiter\"; \u003cbr\u003e//=\u0026gt; \"Jupiter\"\u003cbr\u003e\u003cbr\u003eplanets;\u003cbr\u003e//=\u0026gt; [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You might wonder why that worked, given that we declared \u003ccode\u003eplanets\u003c/code\u003e using \u003ccode\u003econst\u003c/code\u003e. After all, declaring with \u003ccode\u003econst\u003c/code\u003e is supposed to prevent us from reassigning the value of the variable! This is an important thing to know about how \u003ccode\u003econst\u003c/code\u003e works with \u003ccode\u003eArray\u003c/code\u003es. We are not able to reassign the array \u003cem\u003eitself\u003c/em\u003e but we \u003cstrong\u003ecan\u003c/strong\u003e reassign any of its elements. We can also add or delete elements. JavaScript \u003ccode\u003eObject\u003c/code\u003es work similarly when declared using \u003ccode\u003econst\u003c/code\u003e (which isn't surprising, given that \u003ccode\u003eArray\u003c/code\u003es are a special type of \u003ccode\u003eObject\u003c/code\u003e).\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eAdding an Element to the End of an Array\u003c/h3\u003e  \u003cp\u003eWhile it is not the best way to accomplish the task, we can also use the computed member access operator to add an element to the end of an array. If conclusive evidence of the existence of \u003ca href=\"https://en.wikipedia.org/wiki/Planet_Nine\"\u003ePlanet Nine\u003c/a\u003e is ever found, we could add it to the end of our array as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eplanets[planets.length] = \"Planet Nine\"; // Why did we use planets.length here?\u003cbr\u003e// =\u0026gt; \"Planet Nine\"\u003cbr\u003e\u003cbr\u003eplanets;\u003cbr\u003e//=\u0026gt; [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Planet Nine\"]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe will learn better ways to add an element to the end of an array in the next lesson.\u003c/p\u003e  \u003ch2\u003eNested Arrays\u003c/h2\u003e  \u003cp\u003eWe mentioned above that arrays can contain elements of \u003cstrong\u003eany\u003c/strong\u003e data type; this includes \u003cstrong\u003eother \u003ccode\u003eArray\u003c/code\u003es\u003c/strong\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst egregiouslyNestedArray = ['How', ['deep', ['can', ['we', ['go', ['?'], 'Pretty'], 'dang'], 'deep,'], 'it'], 'seems.']; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you examine the array above, you'll see it contains three elements, the second of which is itself an array.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[0];\u003cbr\u003e//=\u0026gt; 'How'\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[1];\u003cbr\u003e//=\u0026gt; [ 'deep', [ 'can', [ 'we', [Array], 'dang' ], 'deep,' ], 'it' ]\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[2];\u003cbr\u003e//=\u0026gt; 'seems.' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo we know we can access the inner array using \u003ccode\u003eegregiouslyNestedArray[1]\u003c/code\u003e, but how do we access the array nested inside \u003cem\u003ethat\u003c/em\u003e array? We simply add another set of brackets:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[1][0];\u003cbr\u003e//=\u0026gt; 'deep'\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[1][1];\u003cbr\u003e//=\u0026gt; [ 'can', [ 'we', [ 'go', [Array], 'Pretty' ], 'dang' ], 'deep,' ]\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[1][2];\u003cbr\u003e//=\u0026gt; 'it' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can continue drilling down in this way, adding another set of brackets for each nested array, until we get to the innermost array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[1][1][1][1][1];\u003cbr\u003e//=\u0026gt; ['?'] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat innermost array contains only one element, so how would we access that?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[1][1][1][1][1][0];\u003cbr\u003e//=\u0026gt; '?' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhile it's great that \u003ccode\u003eArray\u003c/code\u003es allow us to store other \u003ccode\u003eArray\u003c/code\u003es inside them, this is a terrible way to represent a deeply nested data structure. In general, it is best to keep your \u003ccode\u003eArray\u003c/code\u003es to no more than two levels deep. Two levels is perfect for representing two-dimensional things like a tic-tac-toe board:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst board = [\u003cbr\u003e  ['X', 'O', ' '],\u003cbr\u003e  [' ', 'X', 'O'],\u003cbr\u003e  ['X', ' ', 'O']\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003eboard;\u003cbr\u003e// =\u0026gt; [[\"X\", \"O\", \" \"], [\" \", \"X\", \"O\"], [\"X\", \" \", \"O\"]] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe cool thing about representing a game board like that is in how we can access the different squares by specifying coordinates. The first \u003ccode\u003e[]\u003c/code\u003e operator grabs the row that we want, top (\u003ccode\u003eboard[0]\u003c/code\u003e), middle (\u003ccode\u003eboard[1]\u003c/code\u003e), or bottom (\u003ccode\u003eboard[2]\u003c/code\u003e). For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eboard[1];\u003cbr\u003e// =\u0026gt; [\" \", \"X\", \"O\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe second \u003ccode\u003e[]\u003c/code\u003e operator specifies the column, or the square within that row: left (\u003ccode\u003eboard[1][0]\u003c/code\u003e), middle (\u003ccode\u003eboard[1][1]\u003c/code\u003e), or right (\u003ccode\u003eboard[1][2]\u003c/code\u003e). For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eboard[0][0];\u003cbr\u003e// =\u0026gt; \"X\"\u003cbr\u003e\u003cbr\u003eboard[0][2];\u003cbr\u003e// =\u0026gt; \" \"\u003cbr\u003e\u003cbr\u003eboard[2][2];\u003cbr\u003e// =\u0026gt; \"O\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEffectively, we're using X and Y coordinates to refer to data within a two- dimensional structure.\u003c/p\u003e  \u003ch2\u003eArray Methods\u003c/h2\u003e  \u003cp\u003eJavaScript includes a number of built-in \u003ccode\u003eArray\u003c/code\u003e \u003cem\u003emethods\u003c/em\u003e, functions that \u003cem\u003ebelong to\u003c/em\u003e (i.e., can only be called on) \u003ccode\u003eArray\u003c/code\u003es. These methods allow us to manipulate arrays in various ways, for example, to add an element to the beginning or end of an \u003ccode\u003eArray\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe have seen methods already in this course. In an earlier lesson, for example, we learned how to use a String method, \u003ccode\u003etoUpperCase()\u003c/code\u003e, to convert a String to all uppercase:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst string = \"Hello\";\u003cbr\u003e\u003cbr\u003estring.toUpperCase();\u003cbr\u003e//=\u0026gt; \"HELLO\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs shown above, we call String methods \u003cem\u003eon\u003c/em\u003e a string or string variable using the dot notation. \u003ccode\u003eArray\u003c/code\u003e methods work in the same way. Some of them will take one or more arguments — for example, the element we want to add to the array. The arguments are passed in the parentheses after the method name.\u003c/p\u003e  \u003cp\u003eWe will learn about these \u003ccode\u003eArray\u003c/code\u003e methods in the next lesson. Before we get to that, however, we need to introduce one more concept.\u003c/p\u003e  \u003ch2\u003eMutability\u003c/h2\u003e  \u003cp\u003eSome methods update or \u003cem\u003emutate\u003c/em\u003e the object they are called on; these methods are referred to as \u003cem\u003edestructive\u003c/em\u003e. Other methods, known as \u003cem\u003enondestructive\u003c/em\u003e methods, leave the object intact. For example, the String method \u003ccode\u003etoUpperCase()\u003c/code\u003e is \u003cem\u003enondestructive\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst string = \"Hello\";\u003cbr\u003e\u003cbr\u003estring.toUpperCase();\u003cbr\u003e//=\u0026gt; \"HELLO\"\u003cbr\u003e\u003cbr\u003estring;\u003cbr\u003e//=\u0026gt; \"Hello\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003etoUpperCase()\u003c/code\u003e method returns the uppercased version of \u003ccode\u003estring\u003c/code\u003e, it does not \u003cem\u003echange\u003c/em\u003e its value to uppercase.\u003c/p\u003e  \u003cp\u003eSometimes we want to mutate the original object but, in general, it's good practice to avoid mutating a program's state whenever possible. Otherwise, we won't always know what we're dealing with. You will learn more about immutability and why it's important later in the course. But, in the meantime, it's important to know which JavaScript methods are destructive and which are nondestructive so you can choose the appropriate method for what you need to accomplish.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we learned about JavaScript \u003ccode\u003eArray\u003c/code\u003es, including how to create them, access their elements, and change the value of elements. We also learned that arrays can contain elements of any data type, including other \u003ccode\u003eArray\u003c/code\u003es; we refer to these as \u003cem\u003enested\u003c/em\u003e arrays. Finally, we talked a little bit about the concept of mutability. Armed with this knowledge, we are now ready to tackle JavaScript \u003ccode\u003eArray\u003c/code\u003e methods.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"arrays"},{"id":157871,"title":"Array Methods","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-array-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-methods/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003col\u003e \u003cli\u003eAdd elements to an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eRemove elements from an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eReplace elements in an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the last lesson, we learned about JavaScript \u003ccode\u003eArray\u003c/code\u003es, including how to create them and access their elements. In this lab, we will dive into JavaScript's \u003ccode\u003eArray\u003c/code\u003e methods, which enable us to add, remove, and change elements.\u003c/p\u003e  \u003cp\u003eWe discussed the fact that it's important to pay attention to whether the method is \u003cem\u003edestructive\u003c/em\u003e (i.e., it \u003cem\u003emutates\u003c/em\u003e the array) or \u003cem\u003enondestructive\u003c/em\u003e. Another factor to pay attention to is what the \u003cem\u003ereturn value\u003c/em\u003e of each of these methods is. Be sure to follow along and experiment with each method in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e until you understand how it works, what it does to the original array, and what it returns.\u003c/p\u003e  \u003ch2\u003eAdd Elements to an Array\u003c/h2\u003e  \u003cp\u003eWe'll start with the JavaScript methods we can use to add elements to an array: \u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e, which are \u003cem\u003edestructive\u003c/em\u003e methods, and the spread operator, which is \u003cem\u003enondestructive\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThese two methods work in the same way:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ethey take one or more arguments (the element or elements you want to add)\u003c/li\u003e \u003cli\u003ethey \u003cem\u003ereturn\u003c/em\u003e the length of the modified array\u003c/li\u003e \u003cli\u003ethey are \u003cem\u003edestructive\u003c/em\u003e methods\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe difference is that the \u003ccode\u003e.push()\u003c/code\u003e method adds elements to the end of an \u003ccode\u003eArray\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e adds them to the beginning of the array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst superheroes = ['Catwoman', 'She-Hulk', 'Jessica Jones'];\u003cbr\u003e\u003cbr\u003esuperheroes.push('Wonder Woman');\u003cbr\u003e// =\u0026gt; 4\u003cbr\u003e\u003cbr\u003esuperheroes;\u003cbr\u003e// =\u0026gt; [\"Catwoman\", \"She-Hulk\", \"Jessica Jones\", \"Wonder Woman\"]\u003cbr\u003e\u003cbr\u003econst cities = ['New York', 'San Francisco'];\u003cbr\u003e\u003cbr\u003ecities.unshift('Boston', 'Chicago');\u003cbr\u003e// =\u0026gt; 3\u003cbr\u003e\u003cbr\u003ecities;\u003cbr\u003e// =\u0026gt; [\"Boston\", \"Chicago\", \"New York\", \"San Francisco\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBefore moving on, try out the examples above as well as some examples of your own in the REPL.\u003c/p\u003e  \u003ch3\u003eSpread Operator\u003c/h3\u003e  \u003cp\u003eThe \u003cem\u003espread operator\u003c/em\u003e, which looks like an ellipsis: \u003ccode\u003e...\u003c/code\u003e, allows us to \"spread out\" the elements of an existing \u003ccode\u003eArray\u003c/code\u003e into a new \u003ccode\u003eArray\u003c/code\u003e, creating a copy:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst coolCities = ['New York', 'San Francisco'];\u003cbr\u003e\u003cbr\u003econst copyOfCoolCities = [...coolCities];\u003cbr\u003e\u003cbr\u003ecopyOfCoolCities;\u003cbr\u003e//=\u0026gt; [\"New York\", \"San Francisco\"] \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote about copying arrays in Javascript\u003c/strong\u003e You might wonder why we would do this rather than just \u003ccode\u003ecopyOfCoolCities = coolCities\u003c/code\u003e. The answer is that \u003ccode\u003ecoolCities\u003c/code\u003e \u003cem\u003epoints to a location in memory\u003c/em\u003e and when you use the assignment operator to create a copy, you create a second variable that points to the \u003cem\u003esame\u003c/em\u003e location. What this means is that, if you change \u003ccode\u003ecopyOfCoolCities\u003c/code\u003e, \u003ccode\u003ecoolCities\u003c/code\u003e is changed as well (and vice versa).\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eA Second note about copying arrays in JavaScript\u003c/strong\u003e Copying arrays in JavaScript is complicated! Some methods of copying create \u003cem\u003edeep\u003c/em\u003e copies and some create \u003cem\u003eshallow\u003c/em\u003e copies. Using the spread operator to copy an array creates a shallow copy. What this means is that, if you use it to copy a nested array, the inner array (or arrays) \u003cem\u003estill points to the same location in memory\u003c/em\u003e as in the original array. So if you modify the \u003cem\u003einner\u003c/em\u003e array in the copy, it changes the inner array in the original array as well (and vice versa). Don't worry too much about shallow and deep copies at this point: just know that you can safely use the spread operator to clone \u003cem\u003enon-nested\u003c/em\u003e arrays.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eNote that, because the spread operator is an operator rather than a method, it works differently than \u003ccode\u003epush()\u003c/code\u003e and \u003ccode\u003eunshift()\u003c/code\u003e: in the example above, we're constructing an \u003ccode\u003eArray\u003c/code\u003e using \u003cem\u003eliteral\u003c/em\u003e notation (i.e., typing the square brackets) and populating it by using the spread operator on the \u003ccode\u003eArray\u003c/code\u003e we want to copy.\u003c/p\u003e  \u003cp\u003eWhere the spread operator comes in especially handy is when we want to add one or more new elements either before or after the elements in the original array (or both) without mutating the original array. To add an element to the front of the new array, we simply type in the new element before spreading the elements in the original array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst coolCities = ['New York', 'San Francisco'];\u003cbr\u003e\u003cbr\u003econst allCities = ['Los Angeles', ...coolCities];\u003cbr\u003e\u003cbr\u003ecoolCities;\u003cbr\u003e// =\u0026gt; [\"New York\", \"San Francisco\"]\u003cbr\u003e\u003cbr\u003eallCities;\u003cbr\u003e// =\u0026gt; [\"Los Angeles\", \"New York\", \"San Francisco\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd, as you might expect, to add a new item to the end of an \u003ccode\u003eArray\u003c/code\u003e, we type in the new element \u003cem\u003eafter\u003c/em\u003e spreading the elements in the original array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst coolCats = ['Hobbes', 'Felix', 'Tom'];\u003cbr\u003e\u003cbr\u003econst allCats = [...coolCats, 'Garfield'];\u003cbr\u003e\u003cbr\u003ecoolCats;\u003cbr\u003e// =\u0026gt; [\"Hobbes\", \"Felix\", \"Tom\"]\u003cbr\u003e\u003cbr\u003eallCats;\u003cbr\u003e// =\u0026gt; [\"Hobbes\", \"Felix\", \"Tom\", \"Garfield\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that, in both cases, we created a new \u003ccode\u003eArray\u003c/code\u003e instead of modifying the original one —\u0026nbsp;our \u003ccode\u003ecoolCities\u003c/code\u003e and \u003ccode\u003ecoolCats\u003c/code\u003e \u003ccode\u003eArray\u003c/code\u003es were untouched. Because we didn't modify the original array, in order to save the results of our work we had to assign it to a variable.\u003c/p\u003e  \u003cp\u003eBe sure to experiment with the spread operator in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e until you're comfortable with how it works — it will come in handy later!\u003c/p\u003e  \u003ch2\u003eRemove Elements from an Array\u003c/h2\u003e  \u003cp\u003eAs complements for \u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e, respectively, we have \u003ccode\u003e.pop()\u003c/code\u003e and \u003ccode\u003e.shift()\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003e.pop()\u003c/code\u003e and \u003ccode\u003e.shift()\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eAs with \u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e, these two methods work in the same way:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ethey don't take any arguments\u003c/li\u003e \u003cli\u003ethey remove a single element\u003c/li\u003e \u003cli\u003ethey \u003cem\u003ereturn\u003c/em\u003e the element that is removed\u003c/li\u003e \u003cli\u003ethey are \u003cem\u003edestructive\u003c/em\u003e methods\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe \u003ccode\u003e.pop()\u003c/code\u003e method removes the last element in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.pop();\u003cbr\u003e// =\u0026gt; \"Sun\"\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003e.shift()\u003c/code\u003e method removes the first element in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.shift();\u003cbr\u003e// =\u0026gt; \"Mon\"\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice above that both methods returned the removed element and mutated the original array.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003e.slice()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eTo remove elements from an \u003ccode\u003eArray\u003c/code\u003e nondestructively (without mutating the original \u003ccode\u003eArray\u003c/code\u003e), we can use the \u003ccode\u003e.slice()\u003c/code\u003e method. Just as the name implies, \u003ccode\u003e.slice()\u003c/code\u003e returns a portion, or \u003cstrong\u003eslice\u003c/strong\u003e, of an \u003ccode\u003eArray\u003c/code\u003e. The method takes 0, 1, or 2 arguments and returns a new array containing the sliced elements.\u003c/p\u003e  \u003ch4\u003eWith No Arguments\u003c/h4\u003e  \u003cp\u003eIf we don't provide any arguments, \u003ccode\u003e.slice()\u003c/code\u003e will return a copy of the original \u003ccode\u003eArray\u003c/code\u003e with all elements intact:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst primes = [2, 3, 5, 7];\u003cbr\u003e\u003cbr\u003econst copyOfPrimes = primes.slice();\u003cbr\u003e\u003cbr\u003eprimes;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7]\u003cbr\u003e\u003cbr\u003ecopyOfPrimes;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that creating a copy using \u003ccode\u003e.slice()\u003c/code\u003e works the same way as if you use the spread operator: they both create a \u003cem\u003eshallow\u003c/em\u003e copy, and with both the copy points to a different object in memory than the original. If you add an element to one of the arrays, it does \u003cstrong\u003enot\u003c/strong\u003e get added to the others:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst primes = [2, 3, 5, 7];\u003cbr\u003e\u003cbr\u003econst copyOfPrimesUsingSlice = primes.slice();\u003cbr\u003e\u003cbr\u003econst copyOfPrimesUsingSpreadOperator = [...primes];\u003cbr\u003e\u003cbr\u003eprimes.push(11);\u003cbr\u003e// =\u0026gt; 5\u003cbr\u003e\u003cbr\u003eprimes;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7, 11]\u003cbr\u003e\u003cbr\u003ecopyOfPrimesUsingSlice;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7]\u003cbr\u003e\u003cbr\u003ecopyOfPrimesUsingSpreadOperator;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7] \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003eWith Arguments\u003c/h4\u003e  \u003cp\u003eWe can also provide one or two arguments to \u003ccode\u003e.slice()\u003c/code\u003e: the first is the index where the slice should begin and the second is the index \u003cstrong\u003ebefore which\u003c/strong\u003e it should end:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(2, 5);\u003cbr\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf no second argument is provided, the slice will run from the index specified by the first argument to the end of the \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(5);\u003cbr\u003e// =\u0026gt; [\"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo return a new \u003ccode\u003eArray\u003c/code\u003e with the first element removed, we call \u003ccode\u003e.slice(1)\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(1);\u003cbr\u003e// =\u0026gt; [\"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd we can return an array with the last element removed in a way that will look familiar from the previous lesson:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(0, days.length - 1);\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, \u003ccode\u003e.slice()\u003c/code\u003e provides an easier syntax for referencing the last element (or elements) in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(-1);\u003cbr\u003e// =\u0026gt; [\"Sun\"]\u003cbr\u003e\u003cbr\u003edays.slice(-3);\u003cbr\u003e// =\u0026gt; [\"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays.slice(0, -1);\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we provide a negative index, the JavaScript engine knows to start counting from the last element in the \u003ccode\u003eArray\u003c/code\u003e instead of the first.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003e.splice()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eUnlike \u003ccode\u003e.slice()\u003c/code\u003e, which is nondestructive, \u003ccode\u003e.splice()\u003c/code\u003e performs destructive actions. Depending on how many arguments we give it, \u003ccode\u003e.splice()\u003c/code\u003e allows us to remove elements, add elements, or replace elements (or any combination of the three).\u003c/p\u003e  \u003ch4\u003eWith a Single Argument\u003c/h4\u003e \u003cpre\u003e\u003ccode\u003earray.splice(start) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe first argument expected by \u003ccode\u003e.splice()\u003c/code\u003e is the index at which to begin the splice. If we only provide the one argument, \u003ccode\u003e.splice()\u003c/code\u003e will destructively remove a chunk of the original \u003ccode\u003eArray\u003c/code\u003e beginning at the provided index and continuing to the end of the \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.splice(2);\u003cbr\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that \u003ccode\u003e.splice()\u003c/code\u003e \u003cstrong\u003eboth\u003c/strong\u003e mutated the original array (by removing a chunk) \u003cstrong\u003eand\u003c/strong\u003e returned a new array containing the removed chunk.\u003c/p\u003e  \u003cp\u003eWe can use a negative 'start' index with \u003ccode\u003esplice()\u003c/code\u003e, the same as with \u003ccode\u003eslice()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays.splice(-2);\u003cbr\u003e// =\u0026gt; [\"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"] \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003eWith Two Arguments\u003c/h4\u003e \u003cpre\u003e\u003ccode\u003earray.splice(start, deleteCount) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we provide two arguments to \u003ccode\u003e.splice()\u003c/code\u003e, the first is still the index at which to begin splicing, and the second dictates how many elements we want to remove from the \u003ccode\u003eArray\u003c/code\u003e. For example, to remove \u003ccode\u003e3\u003c/code\u003e elements, starting with the element at index \u003ccode\u003e2\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays.splice(2, 3);\u003cbr\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\"]\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere again, we see that \u003ccode\u003esplice()\u003c/code\u003e removed elements from the original array, mutating that array, and returned the removed elements in a new array.\u003c/p\u003e  \u003ch2\u003eReplace Elements in an Array\u003c/h2\u003e  \u003ch3\u003e\n\u003ccode\u003e.splice()\u003c/code\u003e with 3+ arguments\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003earray.splice(start, deleteCount, item1, item2, ...) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter the first two, every additional argument passed to \u003ccode\u003e.splice()\u003c/code\u003e will be inserted into the \u003ccode\u003eArray\u003c/code\u003e at the position indicated by the first argument. We can replace a single element in an \u003ccode\u003eArray\u003c/code\u003e as follows, discarding a card and drawing a new one:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst cards = ['Ace of Spades', 'Jack of Clubs', 'Nine of Clubs', 'Nine of Diamonds', 'Three of Hearts'];\u003cbr\u003e\u003cbr\u003ecards.splice(2, 1, 'Ace of Clubs');\u003cbr\u003e// =\u0026gt; [\"Nine of Clubs\"]\u003cbr\u003e\u003cbr\u003ecards;\u003cbr\u003e// =\u0026gt; [\"Ace of Spades\", \"Jack of Clubs\", \"Ace of Clubs\", \"Nine of Diamonds\", \"Three of Hearts\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe have deleted \"Nine of Clubs\" and inserted \"Ace of Clubs\" in place, effectively \u003cem\u003ereplacing\u003c/em\u003e the original card.\u003c/p\u003e  \u003cp\u003eOr we can remove two elements and insert three new ones as our restaurant expands its vegetarian options:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst menu = ['Jalapeno Poppers', 'Cheeseburger', 'Fish and Chips', 'French Fries', 'Onion Rings'];\u003cbr\u003e\u003cbr\u003emenu.splice(1, 2, 'Veggie Burger', 'House Salad', 'Teriyaki Tofu');\u003cbr\u003e// =\u0026gt; [\"Cheeseburger\", \"Fish and Chips\"]\u003cbr\u003e\u003cbr\u003emenu;\u003cbr\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Veggie Burger\", \"House Salad\", \"Teriyaki Tofu\", \"French Fries\", \"Onion Rings\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe aren't required to remove anything with \u003ccode\u003e.splice()\u003c/code\u003e — we can use it to insert any number of elements anywhere within an \u003ccode\u003eArray\u003c/code\u003e by passing 0 as the second argument. Here we're adding new books to our library in alphabetical order:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst books = ['Bleak House', 'David Copperfield', 'Our Mutual Friend'];\u003cbr\u003e\u003cbr\u003ebooks.splice(2, 0, 'Great Expectations', 'Oliver Twist');\u003cbr\u003e// =\u0026gt; []\u003cbr\u003e\u003cbr\u003ebooks;\u003cbr\u003e// =\u0026gt; [\"Bleak House\", \"David Copperfield\", \"Great Expectations\", \"Oliver Twist\", \"Our Mutual Friend\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that \u003ccode\u003e.splice()\u003c/code\u003e returns an empty \u003ccode\u003eArray\u003c/code\u003e when we provide a second argument of \u003ccode\u003e0\u003c/code\u003e. This makes sense because the return value is the set of elements that were removed, and we're telling it to remove \u003ccode\u003e0\u003c/code\u003e elements.\u003c/p\u003e  \u003cp\u003eKeep playing around with \u003ccode\u003e.splice()\u003c/code\u003e in the REPL to get comfortable with it.\u003c/p\u003e  \u003ch3\u003eUsing the Computed Member Access Operator to Replace Elements\u003c/h3\u003e  \u003cp\u003eRecall from the previous lesson that we can also use the computed member access operator to replace a single element in an \u003ccode\u003eArray\u003c/code\u003e. If we only need to replace one element, this is a simpler approach:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst cards = ['Ace of Spades', 'Jack of Clubs', 'Nine of Clubs', 'Nine of Diamonds', 'Three of Hearts'];\u003cbr\u003e\u003cbr\u003ecards[2] = 'Ace of Clubs';\u003cbr\u003e// =\u0026gt; \"Ace of Clubs\"\u003cbr\u003e\u003cbr\u003ecards;\u003cbr\u003e// =\u0026gt; [\"Ace of Spades\", \"Jack of Clubs\", \"Ace of Clubs\", \"Nine of Diamonds\", \"Three of Hearts\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBoth this approach and \u003ccode\u003esplice()\u003c/code\u003e are destructive —\u0026nbsp;they modify the original \u003ccode\u003eArray\u003c/code\u003e. There's a \u003cem\u003enondestructive\u003c/em\u003e way to replace or add items at arbitrary points within an \u003ccode\u003eArray\u003c/code\u003e; to do it we need to combine the \u003ccode\u003eslice()\u003c/code\u003e method and the spread operator.\u003c/p\u003e  \u003ch3\u003eSlicing and Spreading\u003c/h3\u003e  \u003cp\u003eCombining \u003ccode\u003e.slice()\u003c/code\u003e and the spread operator allows us to replace elements \u003cem\u003enondestructively\u003c/em\u003e, leaving the original \u003ccode\u003eArray\u003c/code\u003e unharmed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst menu = ['Jalapeno Poppers', 'Cheeseburger', 'Fish and Chips', 'French Fries', 'Onion Rings'];\u003cbr\u003e\u003cbr\u003econst newMenu = [...menu.slice(0, 1), 'Veggie Burger', 'House Salad', 'Teriyaki Tofu', ...menu.slice(3)];\u003cbr\u003e\u003cbr\u003emenu;\u003cbr\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Cheeseburger\", \"Fish and Chips\", \"French Fries\", \"Onion Rings\"]\u003cbr\u003e\u003cbr\u003enewMenu;\u003cbr\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Veggie Burger\", \"House Salad\", \"Teriyaki Tofu\", \"French Fries\", \"Onion Rings\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's unpack this a little bit. We're assigning an array to \u003ccode\u003enewMenu\u003c/code\u003e using literal notation. Inside the brackets, we are spreading the result of calling slice on \u003ccode\u003emenu\u003c/code\u003e with the arguments \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e, then typing in three new elements, then spreading the result of calling slice on \u003ccode\u003emenu\u003c/code\u003e with the argument \u003ccode\u003e3\u003c/code\u003e. Here, we are taking advantage of the fact that the \u003ccode\u003eslice()\u003c/code\u003e method \u003cstrong\u003ereturns a new array\u003c/strong\u003e. We can spread the elements in \u003cstrong\u003ethat\u003c/strong\u003e array just as we can with any other array.\u003c/p\u003e  \u003cp\u003ePlay around with this in the REPL until it makes sense; break it down into its component parts and try each piece on its own. It's the trickiest thing that we've encountered in this lesson, so don't sweat it if it takes a little while to sink in!\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we've learned a variety of methods we can use to remove, add, and replace the elements in \u003ccode\u003eArray\u003c/code\u003es. We've learned that some methods are \u003cem\u003edestructive\u003c/em\u003e and some are \u003cem\u003enondestructive\u003c/em\u003e. With this knowledge, you have the tools you need to manipulate \u003ccode\u003eArray\u003c/code\u003es in very complex ways.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/array-methods/javascript-array-methods.jpg\" alt=\"JavaScript Array Methods\"\u003e\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"\u003e\u003ccode\u003e.slice()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"\u003e\u003ccode\u003e.splice()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"array-methods"},{"id":157872,"title":"Arrays Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-array-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice writing arrays\u003c/li\u003e \u003cli\u003ePractice using \u003cem\u003edestructive\u003c/em\u003e methods to manipulate arrays\u003c/li\u003e \u003cli\u003ePractice using \u003cem\u003enondestructive\u003c/em\u003e methods to manipulate arrays\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've learned about how arrays work and about the array methods built in to JavaScript that we can use to manipulate them. Now it's time to practice what we've learned.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eOpen up the \u003ccode\u003etest\u003c/code\u003e folder and take a look at \u003ccode\u003eindexTest.js\u003c/code\u003e. Note that some of the names of the functions you will be writing begin with \u003ccode\u003edestructively\u003c/code\u003e and some don't. This is a clue as to which \u003ccode\u003eArray\u003c/code\u003e method you will need to use for each function.\u003c/p\u003e  \u003cp\u003eNote also that the first test asks for an array called \u003ccode\u003ecats\u003c/code\u003e, set to an initial value of \u003ccode\u003e[\"Milo\", \"Otis\", \"Garfield\"]\u003c/code\u003e. In your functions, you will be accessing and manipulating this array.\u003c/p\u003e  \u003cp\u003eNear the top of \u003ccode\u003eindexTest.js\u003c/code\u003e you will see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e    beforeEach(function () {\u003cbr\u003e      cats.length = 0;\u003cbr\u003e\u003cbr\u003e      cats.push('Milo', 'Otis', 'Garfield');\u003cbr\u003e    }); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat this code does is \u003cem\u003ereset\u003c/em\u003e the array to its original contents before each test is run. The reason we need to do this is because some of your functions will be \u003cem\u003edestructive\u003c/em\u003e — they will change the original \u003ccode\u003ecats\u003c/code\u003e array. This is a problem because it means the input to the remaining functions will be dependent on the outcome of other functions. It also means that the expected return value of a function might change if the tests are run in a different order. This makes it more difficult both to write tests in the first place and to figure out how to get the tests to pass. Resetting the array returns us to a blank slate between tests.\u003c/p\u003e  \u003cp\u003eThis is also a good illustration of why it's generally good practice to avoid mutating a program's state whenever possible. If we use only \u003cem\u003enondestructive\u003c/em\u003e methods, we have complete control over what's going into and coming out of the function. This makes our programs more robust, easier to maintain, and less prone to bugs.\u003c/p\u003e  \u003cp\u003eRemember the workflow:\u003c/p\u003e  \u003col\u003e \u003cli\u003eRun the tests using \u003ccode\u003enpm test\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eRead the errors; vocalize what they're asking you to do.\u003c/li\u003e \u003cli\u003eWrite code; repeat steps 1 and 2 often until a test passes.\u003c/li\u003e \u003cli\u003eRepeat as needed for the remaining tests.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e","exportId":"ged035c7cba9f2fe47cc8a4bd3fde9ff3"},{"id":157873,"title":"Objects","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-objects-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003col\u003e \u003cli\u003eIdentify JavaScript \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e \u003cli\u003eAccess a value stored in an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eLearn about JavaScript's Object methods\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWhile \u003ccode\u003eArray\u003c/code\u003es are great for representing simple, ordered data sets, they're generally not so great at modeling a more complex structure. For that, we need \u003ccode\u003eObject\u003c/code\u003es. In this lesson, we'll begin to learn about \u003ccode\u003eObject\u003c/code\u003es, specifically, what they are, how to create them, and how to access values stored in them. In the next lesson, we'll learn how to modify \u003ccode\u003eObject\u003c/code\u003es, both destructively and nondestructively.\u003c/p\u003e  \u003cp\u003eBe sure to follow along with the examples in this lesson in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: You may have heard about or be familiar with the concept of \u003cem\u003eobject-oriented programming\u003c/em\u003e. Un-helpfully JavaScript called this thing with curly braces (\u003ccode\u003e{}\u003c/code\u003e) an \u003ccode\u003eObject\u003c/code\u003e, but it is not related to object orientation. There was initially no thought that JavaScript would ever need to accommodate object-oriented programming but as it grew in popularity, the ability to use object orientation was added to the language. A JavaScript \u003ccode\u003eObject\u003c/code\u003e, however, is a \u003cem\u003edata structure\u003c/em\u003e consisting of \u003ccode\u003ekey\u003c/code\u003es and \u003ccode\u003evalue\u003c/code\u003es, similar to Ruby's \u003ccode\u003eHash\u003c/code\u003e, Python's \u003ccode\u003eDictionary\u003c/code\u003e or C-like languages' \u003ccode\u003estruct\u003c/code\u003e(ure). It is important not to confuse the two.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eIdentify JavaScript Objects\u003c/h2\u003e  \u003cp\u003eLet's think about how we could represent a company's address in JavaScript. Addresses are made up of words and numbers, so at first it might make sense to store the address as a string:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = '11 Broadway, 2nd Floor, New York, NY 10004'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat looks decent enough, but what happens if the company moves to a different floor in the same building? We just need to modify one piece of the address, but with a string we'd have to involve some pretty complicated find-and-replace pattern matching or replace the entire thing. Instead, let's throw the different pieces of the address into an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = ['11 Broadway', '2nd Floor', 'New York', 'NY', '10004']; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we can just grab the small piece that we want to update and leave the rest as is:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress[1] = '3rd Floor';\u003cbr\u003e\u003cbr\u003eaddress;\u003cbr\u003e//=\u0026gt; [\"11 Broadway\", \"3rd Floor\", \"New York\", \"NY\", \"10004\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis seems like a better solution, but it still has its drawbacks. Namely, \u003ccode\u003eaddress[1]\u003c/code\u003e is a \u003cstrong\u003eterrible\u003c/strong\u003e way to refer to the second line of an address. What if there is no second line, e.g., \u003ccode\u003e['11 Broadway', 'New York', 'NY', '10004']\u003c/code\u003e? Then \u003ccode\u003eaddress[1]\u003c/code\u003e will contain the city name instead of the floor number.\u003c/p\u003e  \u003cp\u003eWe could standardize it, putting an empty string in \u003ccode\u003eaddress[1]\u003c/code\u003e if there's no second line in the address, but it's still poorly named. \u003ccode\u003eaddress[1]\u003c/code\u003e offers very little insight into what data we should expect to find in there. It's a part of an address, sure, but which part?\u003c/p\u003e  \u003cp\u003eTo get around this, we could store the individual pieces of the address in separate, appropriately-named variables:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst street1 = '11 Broadway';\u003cbr\u003econst street2 = '2nd Floor';\u003cbr\u003econst city = 'New York';\u003cbr\u003econst state = 'NY';\u003cbr\u003econst zipCode = '10004'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat's solved one issue but reintroduced the same problem we tackled in the lesson on \u003ccode\u003eArray\u003c/code\u003es: storing pieces of related data in a bunch of unrelated variables is not a great idea! If only there were a best-of-both-worlds solution —\u0026nbsp;a way to store all of our address information in a single data structure while also maintaining a descriptive naming scheme. The data structure we're after here is the \u003cstrong\u003e\u003cem\u003e\u003ccode\u003eObject\u003c/code\u003e\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch3\u003eWhat Is an Object?\u003c/h3\u003e  \u003cp\u003eLike \u003ccode\u003eArray\u003c/code\u003es, JavaScript \u003ccode\u003eObject\u003c/code\u003es are collections of data. They consist of a list of \u003cem\u003eproperties\u003c/em\u003e (\u003cem\u003ekey-value pairs\u003c/em\u003e) bounded by curly braces (\u003ccode\u003e{ }\u003c/code\u003e). The properties can point to values of any data type —\u0026nbsp;even other \u003ccode\u003eObject\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eWe can have empty \u003ccode\u003eObject\u003c/code\u003es:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOr \u003ccode\u003eObject\u003c/code\u003es with a single property:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{ key: value } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we have to represent multiple properties in the same \u003ccode\u003eObject\u003c/code\u003e (which is most of the time), we use commas to separate them:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  key1: value1,\u003cbr\u003e  key2: value2\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can also have nested \u003ccode\u003eObject\u003c/code\u003es, in which the values associated with one or more of the keys is another \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  key1: value1,\u003cbr\u003e  key2: {\u003cbr\u003e    innerKey1: innerValue1,\u003cbr\u003e    innerKey2: innerValue2\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThere is no limit to how deeply nested our \u003ccode\u003eObject\u003c/code\u003es can be.\u003c/p\u003e  \u003cp\u003eFor a real example, let's define our address as an \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street: {\u003cbr\u003e    line1: '11 Broadway',\u003cbr\u003e    line2: '2nd Floor'\u003cbr\u003e  },\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: '10004'\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we're defining \u003ccode\u003eaddress\u003c/code\u003e using \u003ccode\u003eObject\u003c/code\u003e literal syntax: literally typing out the \u003ccode\u003eObject\u003c/code\u003e inside the \u003ccode\u003e{}\u003c/code\u003e. Our address \u003ccode\u003eObject\u003c/code\u003e has four keys: street, city, state, and zipCode. The first key points to another \u003ccode\u003eObject\u003c/code\u003e which itself has two keys: line1 and line2. Note that there's a comma between each key-value pair in both the top-level \u003ccode\u003eObject\u003c/code\u003e and the nested \u003ccode\u003eObject\u003c/code\u003e. Practice creating an object in the REPL; then try leaving out a comma to see what happens.\u003c/p\u003e  \u003cp\u003eMultiple properties can have the same value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst meals = {\u003cbr\u003e  breakfast: 'Avocado toast',\u003cbr\u003e  lunch: 'Avocado toast',\u003cbr\u003e  dinner: 'Avocado toast'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals.breakfast;\u003cbr\u003e// =\u0026gt; \"Avocado toast\"\u003cbr\u003e\u003cbr\u003emeals.dinner;\u003cbr\u003e// =\u0026gt; \"Avocado toast\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut keys must be unique. If the same key is used for multiple properties, only the final value will be retained.\u0026nbsp;The rest will be overwritten:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst meals = {\u003cbr\u003e  breakfast: 'Avocado toast',\u003cbr\u003e  breakfast: 'Oatmeal',\u003cbr\u003e  breakfast: 'Scrambled eggs'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals;\u003cbr\u003e// =\u0026gt; { breakfast: \"Scrambled eggs\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe real data in an \u003ccode\u003eObject\u003c/code\u003e is stored in the \u003cem\u003evalue\u003c/em\u003e half of the key-value pairings. The \u003cem\u003ekey\u003c/em\u003e is what lets us access that value. In the same way we use \u003cem\u003eidentifiers\u003c/em\u003e to name variables and functions, inside an \u003ccode\u003eObject\u003c/code\u003e we assign each value a key. We can then refer to that key and the JavaScript engine knows exactly which value we're trying to access.\u003c/p\u003e  \u003ch2\u003eAccess a Value Stored in an Object\u003c/h2\u003e  \u003cp\u003eWe access an \u003ccode\u003eObject\u003c/code\u003e stored in a variable in the same way we access any variable's value: by typing the variable name. Then, to access one of the values \u003cem\u003einside\u003c/em\u003e our \u003ccode\u003eObject\u003c/code\u003e, we add a reference to the key associated with the value we want; we can do that using either \u003cem\u003edot notation\u003c/em\u003e or \u003cem\u003ebracket notation\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003eDot Notation\u003c/h3\u003e  \u003cp\u003eWith \u003cem\u003edot notation\u003c/em\u003e, we use the \u003cem\u003emember access operator\u003c/em\u003e (a single period) to access values in an \u003ccode\u003eObject\u003c/code\u003e. For example, we can grab the individual pieces of our address, above, as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.street;\u003cbr\u003e//=\u0026gt; { line1: \"11 Broadway\", line2: \"2nd Floor\" }\u003cbr\u003e\u003cbr\u003eaddress.city;\u003cbr\u003e//=\u0026gt; \"New York\"\u003cbr\u003e\u003cbr\u003eaddress.state;\u003cbr\u003e//=\u0026gt; \"NY\"\u003cbr\u003e\u003cbr\u003eaddress.zipCode;\u003cbr\u003e//=\u0026gt; \"10004\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen to access a value inside \u003ccode\u003eaddress.street\u003c/code\u003e, we simply append the inner key, again using dot notation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.street.line1;\u003cbr\u003e//=\u0026gt; \"11 Broadway\"\u003cbr\u003e\u003cbr\u003eaddress.street.line2;\u003cbr\u003e//=\u0026gt; \"2nd Floor\" \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You might initially think we should use \u003ccode\u003eaddress.line1\u003c/code\u003e to access the value associated with the \u003ccode\u003eline1\u003c/code\u003e key, but \u003ccode\u003eaddress\u003c/code\u003e and \u003ccode\u003eaddress.street\u003c/code\u003e are \u003cem\u003eseparate\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003es. \u003ccode\u003eaddress.street\u003c/code\u003e is the \u003cem\u003eidentifier\u003c/em\u003e for the nested \u003ccode\u003eObject\u003c/code\u003e — the one that contains the \u003ccode\u003eline1\u003c/code\u003e key — and we can use dot notation on that just the same as on the top-level \u003ccode\u003eObject\u003c/code\u003e, \u003ccode\u003eaddress\u003c/code\u003e. Experiment in the REPL to make sure you understand how it works.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eDot notation is fantastic for readability, as we can just reference the bare key name (e.g., \u003ccode\u003estreet\u003c/code\u003e or \u003ccode\u003ezipCode\u003c/code\u003e). Because of this simple syntax, it should be your go-to strategy for accessing the properties of an \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Most people just call it \u003cem\u003edot notation\u003c/em\u003e or the \u003cem\u003edot operator\u003c/em\u003e, so don't worry too much about remembering the term \u003cem\u003emember access operator\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch4\u003eAccessing Nonexistent Properties\u003c/h4\u003e  \u003cp\u003eIf we try to access the \u003ccode\u003ecountry\u003c/code\u003e property of our \u003ccode\u003eaddress\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e, what will happen?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.country;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt returns \u003ccode\u003eundefined\u003c/code\u003e because there is no matching key on the \u003ccode\u003eObject\u003c/code\u003e. JavaScript is too nice to throw an error, so it lets us down gently. Keep one thing in mind, though: if you're seeing \u003ccode\u003eundefined\u003c/code\u003e when trying to access an \u003ccode\u003eObject\u003c/code\u003e's properties, you should recheck which properties exist on the \u003ccode\u003eObject\u003c/code\u003e (along with your spelling and capitalization)!\u003c/p\u003e  \u003ch3\u003eBracket Notation\u003c/h3\u003e  \u003cp\u003eWith \u003cem\u003ebracket notation\u003c/em\u003e, we use the \u003cem\u003ecomputed member access operator\u003c/em\u003e, which, recall from the lesson on \u003ccode\u003eArray\u003c/code\u003es, is a pair of square brackets (\u003ccode\u003e[]\u003c/code\u003e). To access the same properties as above, we need to represent them as strings inside the operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress['street'];\u003cbr\u003e//=\u0026gt; { line1: \"11 Broadway\", line2: \"2nd Floor\" }\u003cbr\u003e\u003cbr\u003eaddress['street']['line1'];\u003cbr\u003e//=\u0026gt; \"11 Broadway\"\u003cbr\u003e\u003cbr\u003eaddress['street']['line2'];\u003cbr\u003e//=\u0026gt; \"2nd Floor\"\u003cbr\u003e\u003cbr\u003eaddress['city'];\u003cbr\u003e//=\u0026gt; \"New York\"\u003cbr\u003e\u003cbr\u003eaddress['state'];\u003cbr\u003e//=\u0026gt; \"NY\"\u003cbr\u003e\u003cbr\u003eaddress['zipCode'];\u003cbr\u003e//=\u0026gt; \"10004\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBracket notation is a bit harder to read than dot notation, so we always default to the latter. However, there are two main situations in which we need to use bracket notation.\u003c/p\u003e  \u003ch4\u003eNonstandard Keys\u003c/h4\u003e  \u003cp\u003eIf (for whatever reason) you need to use a nonstandard string as the key in an \u003ccode\u003eObject\u003c/code\u003e, you'll only be able to access the properties with bracket notation. For example, this is a valid \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst wildKeys = {\u003cbr\u003e  'Cash rules everything around me.': 'Wu',\u003cbr\u003e  'C.R.E.A.M.': 'Tang',\u003cbr\u003e  'Get the money.': 'For',\u003cbr\u003e  \"$ $ bill, y'all!\": 'Ever'\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's impossible to access those properties with dot notation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewildKeys.'Cash rules everything around me.';\u003cbr\u003e// ERROR: Uncaught SyntaxError: Unexpected string \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut bracket notation works just fine:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewildKeys[\"$ $ bill, y'all!\"];\u003cbr\u003e//=\u0026gt; \"Ever\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn order to access a property via dot notation, \u003cstrong\u003ethe key must follow the same naming rules applied to variables and functions\u003c/strong\u003e. It's also important to note that under the hood \u003cstrong\u003eall keys are strings\u003c/strong\u003e. Don't waste too much time worrying whether a key is accessible via dot notation. If you follow these rules when naming your keys, everything will work out:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ecamelCaseEverything\u003c/li\u003e \u003cli\u003eStart the key with a lowercase letter\u003c/li\u003e \u003cli\u003eNo spaces or punctuation\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIf you follow those three rules, you'll be able to access all of an \u003ccode\u003eObject\u003c/code\u003e's properties via bracket notation \u003cstrong\u003eor\u003c/strong\u003e dot notation.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Always name your \u003ccode\u003eObject\u003c/code\u003e's keys according to the above three rules. Keeping everything standardized is good, and being able to access properties via dot notation makes the code much more readable.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch4\u003eAccessing Properties Dynamically\u003c/h4\u003e  \u003cp\u003eThe other situation in which bracket notation is required is if we want to dynamically access properties (i.e., using variables rather than literal identifiers). The reason we need to enclose the key inside quotes when we use the literal key is because, when we \u003cstrong\u003edon't\u003c/strong\u003e use the quotes, JavaScript will interpret what's inside the brackets as a variable.\u003c/p\u003e  \u003cp\u003eFrom the lesson on \u003ccode\u003eArray\u003c/code\u003es, remember why we call it the \u003cem\u003ecomputed member access operator\u003c/em\u003e: we can place any expression inside the brackets and JavaScript will \u003cem\u003ecompute\u003c/em\u003e its value to figure out which property to access. For example, we can access the \u003ccode\u003ezipCode\u003c/code\u003e property from our \u003ccode\u003eaddress\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress['zip' + 'Code'];\u003cbr\u003e//=\u0026gt; \"10004\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePretty neat, but the real strength of bracket notation is its ability to compute the value of variables on the fly. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst meals = {\u003cbr\u003e  breakfast: 'Oatmeal',\u003cbr\u003e  lunch: 'Caesar salad',\u003cbr\u003e  dinner: 'Chimichangas'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003elet mealName = 'lunch';\u003cbr\u003e\u003cbr\u003emeals[mealName];\u003cbr\u003e//=\u0026gt; \"Caesar salad\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBy placing \u003ccode\u003emealName\u003c/code\u003e in the square brackets, we're telling the JavaScript engine it needs to \u003cem\u003einterpret\u003c/em\u003e the value inside those brackets. It evalutes \u003ccode\u003emealName\u003c/code\u003e, resolves it to \u003ccode\u003e'lunch'\u003c/code\u003e, and returns \"Caesar salad\". Note that we didn't enclose the key in quotes: the keys themselves are strings, but \u003ccode\u003emealName\u003c/code\u003e is a variable \u003cem\u003econtaining\u003c/em\u003e a string. If we try to use the \u003ccode\u003emealName\u003c/code\u003e variable with dot notation instead, it doesn't work:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emealName = 'dinner';\u003cbr\u003e//=\u0026gt; \"dinner\"\u003cbr\u003e\u003cbr\u003emeals.mealName;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith dot notation, JavaScript doesn't treat \u003ccode\u003emealName\u003c/code\u003e as a variable —\u0026nbsp;instead it checks whether a property exists with the literal key \u003ccode\u003emealName\u003c/code\u003e, only finds properties named \u003ccode\u003ebreakfast\u003c/code\u003e, \u003ccode\u003elunch\u003c/code\u003e, and \u003ccode\u003edinner\u003c/code\u003e, and so returns \u003ccode\u003eundefined\u003c/code\u003e. Essentially, dot notation is for when you know the exact name of the property in advance, and bracket notation is for when you need to compute it when the program runs.\u003c/p\u003e  \u003cp\u003eThe need for bracket notation doesn't stop at dynamically accessing properties on an already-created \u003ccode\u003eObject\u003c/code\u003e. We can also use bracket notation to dynamically set properties \u003cem\u003eduring the creation of a new \u003ccode\u003eObject\u003c/code\u003e\u003c/em\u003e. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst morningMeal = 'breakfast';\u003cbr\u003econst middayMeal = 'lunch';\u003cbr\u003econst eveningMeal = 'dinner';\u003cbr\u003e\u003cbr\u003econst meals = {\u003cbr\u003e  [morningMeal]: 'French toast',\u003cbr\u003e  [middayMeal]: 'Personal pizza',\u003cbr\u003e  [eveningMeal]: 'Fish and chips'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals;\u003cbr\u003e//=\u0026gt; { breakfast: \"French toast\", lunch: \"Personal pizza\", dinner: \"Fish and chips\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOnce again, by wrapping the variable names in square brackets, we're letting JavaScript know that it needs to interpret the contents. Let's try doing the same thing without the square brackets:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst morningMeal = 'breakfast';\u003cbr\u003econst middayMeal = 'lunch';\u003cbr\u003econst eveningMeal = 'dinner';\u003cbr\u003e\u003cbr\u003econst meals = {\u003cbr\u003e  morningMeal: 'French toast',\u003cbr\u003e  middayMeal: 'Personal pizza',\u003cbr\u003e  eveningMeal: 'Fish and chips'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals;\u003cbr\u003e//=\u0026gt; { morningMeal: \"French toast\", middayMeal: \"Personal pizza\", eveningMeal: \"Fish and chips\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWithout the square brackets, JavaScript treated each key as a literal identifier instead of a variable. Bracket notation — the \u003cem\u003ecomputed member access operator\u003c/em\u003e — once again shows its powers of computation!\u003c/p\u003e  \u003cp\u003eBracket notation will really come in handy when we start iterating over \u003ccode\u003eObject\u003c/code\u003es and programmatically accessing and assigning properties.\u003c/p\u003e  \u003ch2\u003eJavaScript's Object Methods\u003c/h2\u003e  \u003cp\u003eJavaScript includes a number of built-in \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\"\u003estatic \u003ccode\u003eObject\u003c/code\u003e methods\u003c/a\u003e (\u003cem\u003estatic\u003c/em\u003e means that these methods are called on the \u003ccode\u003eObject\u003c/code\u003e class itself, rather than on an instance of an \u003ccode\u003eObject\u003c/code\u003e). We will talk briefly about a couple of them here and go into detail about one more in the next lesson.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eObject.keys()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eWe can get a list of the top-level keys in an \u003ccode\u003eObject\u003c/code\u003e by using the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"\u003e\u003ccode\u003eObject.keys()\u003c/code\u003e\u003c/a\u003e static method. We do that by calling \u003ccode\u003eObject.keys()\u003c/code\u003e and passing the \u003ccode\u003eObject\u003c/code\u003e instance as an argument. The return value is an \u003ccode\u003eArray\u003c/code\u003e containing all of the keys at the \u003cem\u003etop level\u003c/em\u003e of the \u003ccode\u003eObject\u003c/code\u003e instance.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst wednesdayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina',\u003cbr\u003e    hard: 'Provolone'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eObject.keys(wednesdayMenu);\u003cbr\u003e//=\u0026gt; [\"cheesePlate\", \"fries\", \"salad\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that it didn't pick up the keys in the nested \u003ccode\u003echeesePlate\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e —\u0026nbsp;just the keys from the properties declared at the top level within \u003ccode\u003ewednesdayMenu\u003c/code\u003e. How do you think we could use \u003ccode\u003eObject.keys()\u003c/code\u003e to get a list of the keys inside the nested \u003ccode\u003eObject\u003c/code\u003e? Try it out in the REPL.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: The sequence in which keys are ordered in the returned \u003ccode\u003eArray\u003c/code\u003e is not consistent across browsers and should not be relied upon. All of the \u003ccode\u003eObject\u003c/code\u003e's keys will be in the \u003ccode\u003eArray\u003c/code\u003e, but you can't count on \u003ccode\u003ekeyA\u003c/code\u003e always being at index \u003ccode\u003e0\u003c/code\u003e of the \u003ccode\u003eArray\u003c/code\u003e and \u003ccode\u003ekeyB\u003c/code\u003e always being at index \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003e\u003ccode\u003eObject.values()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"\u003e\u003ccode\u003eObject.values()\u003c/code\u003e\u003c/a\u003e static method behaves similarly to \u003ccode\u003eObject.keys()\u003c/code\u003e but, as you might expect, returns an array containing values rather than keys. Try this out in the REPL as well.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we identified what an \u003ccode\u003eObject\u003c/code\u003e is and how it gives us a better way to keep track of more complicated sets of related data. We also learned how to access values stored in an \u003ccode\u003eObject\u003c/code\u003e using dot notation and bracket notation, as well as when to use each. In the next lesson, we'll learn how to modify \u003ccode\u003eObject\u003c/code\u003es. We'll also explore the relationship between \u003ccode\u003eObject\u003c/code\u003es and \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eCreating and interacting with \u003ccode\u003eObject\u003c/code\u003es is an important skill in JavaScript programming. Before moving on, be sure to use \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e to practice creating \u003ccode\u003eObject\u003c/code\u003es (including nested \u003ccode\u003eObject\u003c/code\u003es) and accessing properties.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\"\u003eObject basics\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"objects"},{"id":157874,"title":"Modifying Objects","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-modifying-objects\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-modifying-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-modifying-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e property using dot or bracket notation\u003c/li\u003e \u003cli\u003eModify a property using dot or bracket notation\u003c/li\u003e \u003cli\u003eUpdate an \u003ccode\u003eObject\u003c/code\u003e nondestructively using the spread operator\u003c/li\u003e \u003cli\u003eUsing \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eUpdate an \u003ccode\u003eObject\u003c/code\u003e nondestructively using \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eRemove a property from an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eIdentify the relationship between \u003ccode\u003eArray\u003c/code\u003es and \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the previous lesson, we learned the basics of creating \u003ccode\u003eObject\u003c/code\u003es and accessing their properties. In this lesson we'll learn how to modify and remove properties, both destructively and nondestructively. Finally, we'll explore the relationship between \u003ccode\u003eArray\u003c/code\u003es and \u003ccode\u003eObject\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eAs always, don't forget to follow along in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003ch2\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e Property Using Dot or Bracket Notation\u003c/h2\u003e  \u003cp\u003eWe know how to initialize a variable by declaring it and assigning it a value using the assignment operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst city = \"New York\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe process of creating a property inside an existing object is similar; we specify the key and assign it a value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst circle = {}; // Create `circle` and set it to an empty Object\u003cbr\u003e\u003cbr\u003ecircle;\u003cbr\u003e//=\u0026gt; {}\u003cbr\u003e\u003cbr\u003ecircle.radius = 5; // Create the key inside `circle` and set its value to 5 \u003cbr\u003e\u003cbr\u003ecircle;\u003cbr\u003e//=\u0026gt; { radius: 5 } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can do this using either dot or bracket notation, and we can use any expression as the value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst circle = {};\u003cbr\u003e\u003cbr\u003ecircle.radius = 5;\u003cbr\u003e\u003cbr\u003ecircle['diameter'] = 10;\u003cbr\u003e\u003cbr\u003ecircle.circumference = circle.diameter * Math.PI;\u003cbr\u003e//=\u0026gt; 31.41592653589793\u003cbr\u003e\u003cbr\u003ecircle['area'] = Math.PI * circle.radius ** 2;\u003cbr\u003e//=\u0026gt; 78.53981633974483\u003cbr\u003e\u003cbr\u003ecircle;\u003cbr\u003e//=\u0026gt; { radius: 5, diameter: 10, circumference: 31.41592653589793, area: 78.53981633974483 } \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eA Side Note\u003c/strong\u003e: Recall from the lesson on \u003ccode\u003eArray\u003c/code\u003es that we can add, modify or delete elements even if we use \u003ccode\u003econst\u003c/code\u003e to initialize the \u003ccode\u003eArray\u003c/code\u003e. The same thing applies here: we can add, modify or delete properties, but we can't reassign the variable itself.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Note that the process above gives us an alternative to typing out our \u003ccode\u003eObject\u003c/code\u003e using literal syntax: we can initialize an empty object and then use dot notation or bracket notation to create the properties programmatically. This approach is less error-prone than using literal syntax since JavaScript creates the correct \u003ccode\u003eObject\u003c/code\u003e syntax for us. Try it out in the REPL.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eModify a Property Using Dot or Bracket Notation\u003c/h3\u003e  \u003cp\u003eWe can update or overwrite existing properties simply by assigning a new value to an existing key:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mondayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Chèvre',\u003cbr\u003e    semiSoft: 'Gruyère',\u003cbr\u003e    hard: 'Manchego'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Curly',\u003cbr\u003e  salad: 'Cobb'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emondayMenu.fries = 'Sweet potato';\u003cbr\u003e\u003cbr\u003emondayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Cobb\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that modifying an \u003ccode\u003eObject\u003c/code\u003e's properties in the way we did above is \u003cem\u003edestructive\u003c/em\u003e. This means that we're making changes directly to the original \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's take a look at an example. We'll start by creating a function to encapsulate this modification process:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction destructivelyUpdateObject (obj, key, value) {\u003cbr\u003e  obj[key] = value; //Why are we using bracket notation here?\u003cbr\u003e\u003cbr\u003e  return obj;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur function takes three arguments: the original menu \u003ccode\u003eObject\u003c/code\u003e, the \u003ccode\u003ekey\u003c/code\u003e identifying the property we want to update, and the \u003ccode\u003evalue\u003c/code\u003e we want to change its value to.\u003c/p\u003e  \u003cp\u003eAt our restaurant, we've finished serving for the day. It's time to update our \u003ccode\u003emondayMenu\u003c/code\u003e to the \u003ccode\u003etuesdayMenu\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mondayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Chèvre',\u003cbr\u003e    semiSoft: 'Gruyère',\u003cbr\u003e    hard: 'Manchego'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Cobb'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst tuesdayMenu = destructivelyUpdateObject(mondayMenu, 'salad', 'Caesar');\u003cbr\u003e\u003cbr\u003etuesdayMenu\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Caesar\" }\u003cbr\u003e\u003cbr\u003etuesdayMenu.salad;\u003cbr\u003e//=\u0026gt; \"Caesar\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLooks like our \u003ccode\u003etuesdayMenu\u003c/code\u003e came out perfectly. But what about \u003ccode\u003emondayMenu\u003c/code\u003e?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emondayMenu.salad;\u003cbr\u003e//=\u0026gt; \"Caesar\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDang! We don't serve Caesar salad on Mondays. Instead of destructively updating the original menu, is there a way to nondestructively merge the change(s) into a new \u003ccode\u003eObject\u003c/code\u003e, leaving the original intact?\u003c/p\u003e  \u003ch2\u003eUpdate an Object Nondestructively Using the Spread Operator\u003c/h2\u003e  \u003cp\u003eLet's create a new method; it will take the same three arguments as the previous method:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  // Code to return new, updated menu object\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRecall from the lessons on \u003ccode\u003eArray\u003c/code\u003es that we can use the \u003cem\u003espread operator\u003c/em\u003e to copy all the elements of an existing array into a new array. We can do the same thing with \u003ccode\u003eObject\u003c/code\u003es. Let's use the spread operator to copy all of the old menu \u003ccode\u003eObject\u003c/code\u003e's properties into a new \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  const newObj = { ...obj };\u003cbr\u003e\u003cbr\u003e  // Code to return new, updated menu object goes here\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will create a clone of the original object and save it into a new variable. We can then update the newly-created \u003ccode\u003enewObj\u003c/code\u003e with the desired change and return that updated menu, leaving the original menu \u003ccode\u003eObject\u003c/code\u003e unchanged:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  const newObj = { ...obj };\u003cbr\u003e\u003cbr\u003e  newObj[key] = value;\u003cbr\u003e\u003cbr\u003e  return newObj;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst sundayMenu = nondestructivelyUpdateObject(tuesdayMenu, 'fries', 'Shoestring');\u003cbr\u003e\u003cbr\u003etuesdayMenu.fries;\u003cbr\u003e//=\u0026gt; \"Sweet potato\"\u003cbr\u003e\u003cbr\u003esundayMenu.fries;\u003cbr\u003e//=\u0026gt; \"Shoestring\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo review, we are calling our \u003ccode\u003enondestructivelyUpdateObject()\u003c/code\u003e function, passing as our arguments the original menu (\u003ccode\u003etuesdayMenu\u003c/code\u003e) and the key and value representing the desired change. The function first makes a copy of \u003ccode\u003etuesdayMenu\u003c/code\u003e, then changes the value associated with the \u003ccode\u003efries\u003c/code\u003e key to \u003ccode\u003e\"Shoestring\"\u003c/code\u003e. Finally, it returns the updated menu, which is stored into the variable \u003ccode\u003esundayMenu\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhile this works, it's quite a bit to write, and it's not very extensible. If we want to modify more than a single property, we'll have to completely rewrite our function! Luckily, JavaScript has a much better solution for us.\u003c/p\u003e  \u003ch2\u003eUsing \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eIn the previous lesson, we took a look at a couple of JavaScript's static \u003ccode\u003eObject\u003c/code\u003e methods, \u003ccode\u003eObject.keys()\u003c/code\u003e and \u003ccode\u003eObject.values()\u003c/code\u003e. A third method, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003e\u003ccode\u003eObject.assign()\u003c/code\u003e\u003c/a\u003e, will allow us to combine properties from multiple \u003ccode\u003eObject\u003c/code\u003es into a single \u003ccode\u003eObject\u003c/code\u003e. The method takes two or more \u003ccode\u003eObject\u003c/code\u003es as its arguments. The first argument passed to \u003ccode\u003eObject.assign()\u003c/code\u003e is the \u003ccode\u003eObject\u003c/code\u003e into which all of the properties will be merged. Every additional argument is an \u003ccode\u003eObject\u003c/code\u003e whose properties we want to merge into the first \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eObject.assign(initialObject, additionalObject, additionalObject, ...); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe return value of \u003ccode\u003eObject.assign()\u003c/code\u003e is the initial \u003ccode\u003eObject\u003c/code\u003e after all of the additional \u003ccode\u003eObject\u003c/code\u003es' properties have been merged in:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eObject.assign({ eggs: 3 }, { flour: '1 cup' });\u003cbr\u003e//=\u0026gt; { eggs: 3, flour: \"1 cup\" }\u003cbr\u003e\u003cbr\u003eObject.assign({ eggs: 3 }, { chocolateChips: '1 cup', flour: '2 cups' }, { flour: '1/2 cup' });\u003cbr\u003e// { eggs: 3, chocolateChips: \"1 cup\", flour: \"1/2 cup\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePay attention to the \u003ccode\u003eflour\u003c/code\u003e property in the above example. \u003cstrong\u003eIf multiple \u003ccode\u003eObject\u003c/code\u003es have a property with the same key, the last key to be defined wins out\u003c/strong\u003e. Essentially, the last call to \u003ccode\u003eObject.assign()\u003c/code\u003e in the above snippet is wrapping all of the following assignments into a single line of code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst recipe = { eggs: 3 };\u003cbr\u003e\u003cbr\u003erecipe.chocolateChips = '1 cup';\u003cbr\u003e\u003cbr\u003erecipe.flour = '2 cups';\u003cbr\u003e\u003cbr\u003erecipe.flour = '1/2 cup'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTry both approaches out in REPL and verify that they yield the same results.\u003c/p\u003e  \u003cp\u003eNote that the \u003ccode\u003eObject\u003c/code\u003e being passed as the first argument — in this case, recipe — is modified and returned at the end. So simply using \u003ccode\u003eObject.assign()\u003c/code\u003e does not make our function nondestructive. So how do we solve that problem? Well, the first argument we pass \u003cstrong\u003edoes not need to be an existing \u003ccode\u003eObject\u003c/code\u003e\u003c/strong\u003e!\u003c/p\u003e  \u003ch2\u003eUpdate an \u003ccode\u003eObject\u003c/code\u003e Nondestructively Using \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eA common pattern for \u003ccode\u003eObject.assign()\u003c/code\u003e is to provide an empty \u003ccode\u003eObject\u003c/code\u003e as the first argument. That way we're composing an entirely new \u003ccode\u003eObject\u003c/code\u003e instead of modifying or overwriting the properties of an existing \u003ccode\u003eObject\u003c/code\u003e. This pattern allows us to rewrite the above \u003ccode\u003edestructivelyUpdateObject()\u003c/code\u003e function in a nondestructive way:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  return Object.assign({}, obj, { [key]: value });\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe code above takes the first argument (an empty \u003ccode\u003eObject\u003c/code\u003e), adds all the properties in \u003ccode\u003eobj\u003c/code\u003e to it, then adds one final property consisting of the key and value that represent the change we want to make. If that key doesn't already exist in \u003ccode\u003eobj\u003c/code\u003e, it is added and its value is set to \u003ccode\u003evalue\u003c/code\u003e. If it does already exist, its old value is replaced by \u003ccode\u003evalue\u003c/code\u003e. Note that all the arguments to \u003ccode\u003eObject.assign()\u003c/code\u003e must be objects, so we're representing the key-value pair as an \u003ccode\u003eObject\u003c/code\u003e using literal syntax here. Finally, the resulting new \u003ccode\u003eObject\u003c/code\u003e is returned.\u003c/p\u003e  \u003cp\u003eIn other languages (like Ruby), this behavior is called \"merging.\" You take an original base \u003ccode\u003eObject\u003c/code\u003e (maybe with some typical \"standard\" attribute / value pairs already set), and then you \"merge\" in additional Object(s).\u003c/p\u003e  \u003cp\u003eLet's take a look at it using our \u003ccode\u003erecipe\u003c/code\u003e example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  return Object.assign({}, obj, { [key]: value });\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst recipe = { eggs: 3 };\u003cbr\u003e\u003cbr\u003econst newRecipe = nondestructivelyUpdateObject(recipe, 'chocolate', '1 cup');\u003cbr\u003e//=\u0026gt; { eggs: 3, chocolate: \"1 cup\" }\u003cbr\u003e\u003cbr\u003enewRecipe;\u003cbr\u003e//=\u0026gt; { eggs: 3, chocolate: \"1 cup\" }\u003cbr\u003e\u003cbr\u003erecipe;\u003cbr\u003e//=\u0026gt; { eggs: 3 } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's important that we merge everything into a new, empty \u003ccode\u003eObject\u003c/code\u003e. Otherwise, we would be modifying the original \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eSo now let's write a new function for our restaurant that uses this technique. We can also make one additional improvement: we can set up our function to take an \u003ccode\u003eObject\u003c/code\u003e containing the changes we want to make as an argument, rather than a single key and value. This enables us to make multiple changes with one call to the function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction createNewMenu (oldMenu, menuChanges) {\u003cbr\u003e  return Object.assign({}, oldMenu, menuChanges);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst tuesdayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Chèvre',\u003cbr\u003e    semiSoft: 'Gruyère',\u003cbr\u003e    hard: 'Manchego'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Caesar'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst newOfferings = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina',\u003cbr\u003e    hard: 'Provolone'\u003cbr\u003e  },\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst wednesdayMenu = createNewMenu(tuesdayMenu, newOfferings);\u003cbr\u003e\u003cbr\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\", hard: \"Provolone\" }, fries: \"Sweet potato\", salad: \"Southwestern\" }\u003cbr\u003e\u003cbr\u003etuesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Caesar\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that the value for \u003ccode\u003efries\u003c/code\u003e remains the same because our \u003ccode\u003enewOfferings\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e did not contain a change for that property. \u003cstrong\u003eHowever, this does not work for \u003cem\u003enested\u003c/em\u003e \u003ccode\u003eObjects\u003c/code\u003e.\u003c/strong\u003e For example, if \u003ccode\u003enewOfferings\u003c/code\u003e did not have an updated value for \u003ccode\u003ehard\u003c/code\u003e cheese:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst newOfferings = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina'\u003cbr\u003e  },\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur updated menu would not include that property and would look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\"}, fries: \"Sweet potato\", salad: \"Southwestern\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e... instead of the desired outcome of this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\", hard: \"Manchego\"}, fries: \"Sweet potato\", salad: \"Southwestern\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou don't need to worry about this too much for now: just be aware that this method does not create a \u003cem\u003edeep clone\u003c/em\u003e. You will learn how to do that later in the course.\u003c/p\u003e  \u003cp\u003eBon appétit!\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Doing nondestructive updates (i.e. \"creating new things and merging on top\") is a really important pattern. It turns out that, in many places, nondestructive updates are more performant. The main reason for this is when you add something to an existing \u003ccode\u003eObject\u003c/code\u003e, the computer has to make sure that the \u003ccode\u003eObject\u003c/code\u003e has enough room to add what you're saying to add. If it doesn't, the computer needs to do cleanup work, find some more space, copy the old thing over, add the new thing, and then resume work. That \"accounting\" process is actually quite slow.\u003c/p\u003e  \u003cp\u003eFurthermore, in the cloud-based world of programming we're moving to more and more, we can't be sure that two computers will share the same memory. They might be servers separated by centimeters or kilometers. Using nondestructive updates ensures that our functions have \"all they need\" to run a function call independently, i.e., they have their own copy of the data they need and aren't sharing memory with other machines.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eRemove a Property from an Object\u003c/h2\u003e  \u003cp\u003eUh oh, we ran out of Southwestern dressing, so we have to take the salad off the menu. In JavaScript, that's as easy as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst wednesdayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina',\u003cbr\u003e    hard: 'Provolone'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003edelete wednesdayMenu.salad;\u003cbr\u003e//=\u0026gt; true\u003cbr\u003e\u003cbr\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\", hard: \"Provolone\" }, fries: \"Sweet potato\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe pass the property that we'd like to remove to the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e operator, and JavaScript takes care of the rest. Poof! No more \u003ccode\u003esalad\u003c/code\u003e property on the \u003ccode\u003ewednesdayMenu\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eIdentify the Relationship Between Arrays and Objects\u003c/h2\u003e  \u003cp\u003eThink back to the early lesson on data types in JavaScript. We listed off seven types into which all data falls: numbers, strings, booleans, symbols, \u003ccode\u003eObject\u003c/code\u003es, \u003ccode\u003enull\u003c/code\u003e, and \u003ccode\u003eundefined\u003c/code\u003e. Notice anything missing? Arrays!\u003c/p\u003e  \u003cp\u003eWhy isn't an \u003ccode\u003eArray\u003c/code\u003e a fundamental data type in JavaScript? The answer is that \u003cstrong\u003eit's actually a special type of \u003ccode\u003eObject\u003c/code\u003e\u003c/strong\u003e. Yes, that's right: \u003cstrong\u003e\u003cem\u003e\u003ccode\u003eArray\u003c/code\u003es are \u003ccode\u003eObject\u003c/code\u003es\u003c/em\u003e\u003c/strong\u003e. To underscore this point, check out what the \u003ccode\u003etypeof\u003c/code\u003e operator returns when we use it on an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof [];\u003cbr\u003e//=\u0026gt; \"object\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can set properties on an \u003ccode\u003eArray\u003c/code\u003e just like a regular \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = [];\u003cbr\u003e\u003cbr\u003emyArray.summary = 'Empty array!';\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [summary: \"Empty array!\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd we can modify and access those properties, too:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray['summary'] = 'This array is totally empty.';\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [summary: \"This array is totally empty.\"]\u003cbr\u003e\u003cbr\u003emyArray.summary;\u003cbr\u003e//=\u0026gt; \"This array is totally empty.\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn fact, \u003cem\u003eeverything\u003c/em\u003e we just learned how to do to \u003ccode\u003eObject\u003c/code\u003es can also be done to \u003ccode\u003eArray\u003c/code\u003es because \u003ccode\u003eArray\u003c/code\u003es \u003cstrong\u003eare\u003c/strong\u003e \u003ccode\u003eObject\u003c/code\u003es. Just special ones. To see the special stuff, let's \u003ccode\u003e.push()\u003c/code\u003e some values into our \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray.push(2, 3, 5, 7);\u003cbr\u003e//=\u0026gt; 4\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [2, 3, 5, 7, summary: \"This array is totally empty.\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCool, looks like everything's still in there. What's your guess about the \u003ccode\u003eArray\u003c/code\u003e's \u003ccode\u003e.length\u003c/code\u003e?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 4 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHuh, that's interesting. Surely our \u003ccode\u003esummary\u003c/code\u003e must be the first element in the \u003ccode\u003eArray\u003c/code\u003e, no? After all, we did add it before we \u003ccode\u003e.push()\u003c/code\u003eed all those values in.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray[0];\u003cbr\u003e//=\u0026gt; 2 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHm, then maybe it's the last element?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray[myArray.length - 1];\u003cbr\u003e//=\u0026gt; 7 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat the heck? Where is it?\u003c/p\u003e  \u003cp\u003eYou see, one of the 'special' features of an \u003ccode\u003eArray\u003c/code\u003e is that \u003cstrong\u003eits \u003ccode\u003eArray\u003c/code\u003e-style elements are stored separately from its \u003ccode\u003eObject\u003c/code\u003e-style properties\u003c/strong\u003e. The \u003ccode\u003e.length\u003c/code\u003e property of an \u003ccode\u003eArray\u003c/code\u003e describes how many items exist in its special list of elements. Its \u003ccode\u003eObject\u003c/code\u003e-style properties are not included in that calculation.\u003c/p\u003e  \u003cp\u003eThis brings up an interesting question: if we add a new property to an \u003ccode\u003eArray\u003c/code\u003e that has a key of \u003ccode\u003e0\u003c/code\u003e, how does the JavaScript engine know whether it should be an \u003ccode\u003eObject\u003c/code\u003e-style property or an \u003ccode\u003eArray\u003c/code\u003e-style element?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = [];\u003cbr\u003e\u003cbr\u003emyArray[0] = 'Will this be an `Object` property or an `Array` element?';\u003cbr\u003e//=\u0026gt; \"Will this be an `Object` property or an `Array` element?\"\u003cbr\u003e\u003cbr\u003e// Moment of truth...\u003cbr\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [\"Will this be an `Object` property or an `Array` element?\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo JavaScript used that assignment operation to add a new \u003ccode\u003eArray\u003c/code\u003e-style element. What happens if we enclose the integer in quotation marks, turning it into a string?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray['0'] = 'What about this one?';\u003cbr\u003e//=\u0026gt; \"What about this one?\"\u003cbr\u003e\u003cbr\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [\"What about this one?\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is hitting on a fundamental truth: \u003cstrong\u003eall keys in \u003ccode\u003eObject\u003c/code\u003es and all indexes in \u003ccode\u003eArray\u003c/code\u003es are actually strings\u003c/strong\u003e. In \u003ccode\u003emyArray[0]\u003c/code\u003e we're using the integer \u003ccode\u003e0\u003c/code\u003e, but under the hood the JavaScript engine automatically converts that to the string \u003ccode\u003e\"0\"\u003c/code\u003e. When we access elements or properties of an \u003ccode\u003eArray\u003c/code\u003e, the engine routes all integers and integers masquerading as strings (e.g., \u003ccode\u003e'14'\u003c/code\u003e, \u003ccode\u003e\"953\"\u003c/code\u003e, etc.) to the \u003ccode\u003eArray\u003c/code\u003e's special list of elements, and it treats everything else as a simple \u003ccode\u003eObject\u003c/code\u003e property. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = [2, 3, 5, 7];\u003cbr\u003e\u003cbr\u003emyArray['1'] = 'Hi';\u003cbr\u003e//=\u0026gt; \"Hi\"\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [2, \"Hi\", 5, 7]\u003cbr\u003e\u003cbr\u003emyArray['01'] = 'Ho';\u003cbr\u003e//=\u0026gt; \"Ho\"\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [2, \"Hi\", 5, 7, 01: \"Ho\"]\u003cbr\u003e\u003cbr\u003emyArray[01];\u003cbr\u003e//=\u0026gt; \"Hi\"\u003cbr\u003e\u003cbr\u003emyArray['01'];\u003cbr\u003e//=\u0026gt; \"Ho\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter adding our weird \u003ccode\u003e'01'\u003c/code\u003e property, the \u003ccode\u003e.length\u003c/code\u003e property still returns \u003ccode\u003e4\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 4 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo it would stand to reason that \u003ccode\u003eObject.keys()\u003c/code\u003e would only return \u003ccode\u003e'01'\u003c/code\u003e, right?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eObject.keys(myArray);\u003cbr\u003e//=\u0026gt; [\"0\", \"1\", \"2\", \"3\", \"01\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUnfortunately not. The reason why \u003ccode\u003eArray\u003c/code\u003es have this behavior would take us deep inside the JavaScript source code, and it's frankly not that important. Just remember these simple guidelines, and you'll be just fine:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eFor accessing elements in an \u003ccode\u003eArray\u003c/code\u003e, always use integers\u003c/strong\u003e.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eBe wary of setting \u003ccode\u003eObject\u003c/code\u003e-style properties on an \u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e. There's rarely any reason to, and it's usually more trouble than it's worth.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eRemember that all \u003ccode\u003eObject\u003c/code\u003e keys, including \u003ccode\u003eArray\u003c/code\u003e indexes, are strings\u003c/strong\u003e. This will really come into play when we learn how to iterate over \u003ccode\u003eObject\u003c/code\u003es, so keep it in the back of your mind.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this and the previous lesson, we dug deep into \u003ccode\u003eObject\u003c/code\u003es in JavaScript. We identified what an \u003ccode\u003eObject\u003c/code\u003e is and how to access values stored in it. We also covered how to add and remove properties and how to use some of JavaScript's convenience methods (\u003ccode\u003eObject.keys()\u003c/code\u003e, \u003ccode\u003eObject.values()\u003c/code\u003e, and \u003ccode\u003eObject.assign()\u003c/code\u003e). We also explored the relationship between \u003ccode\u003eObject\u003c/code\u003es and \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\"\u003eObject basics\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003e\u003ccode\u003eObject.assign()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"modifying-objects"},{"id":157875,"title":"Objects Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-objects-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003ePerform operations on an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe covered the concepts of \u003ccode\u003eObject\u003c/code\u003es in JavaScript. Now it's time to put the concepts into practice.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eFollow the steps below, running \u003ccode\u003enpm test\u003c/code\u003e as you go to get additional information from the tests.\u003c/p\u003e  \u003cp\u003eLet's say we are working on a program that will keep track of a company's employees. We want to store each \u003ccode\u003eemployee\u003c/code\u003e as an \u003ccode\u003eObject\u003c/code\u003e. We're starting small, so to begin with we'll only keep track of the employee's name and street address.\u003c/p\u003e  \u003cp\u003eTo start, define a \u003ccode\u003eemployee\u003c/code\u003e variable and assign it to an \u003ccode\u003eObject\u003c/code\u003e containing \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003estreetAddress\u003c/code\u003e keys; you can use whatever values you like. Use literal syntax to create your \u003ccode\u003eObject\u003c/code\u003e. Various updates will be applied to this variable (destructively and non-destructively) in this lab.\u003c/p\u003e  \u003cp\u003eOnce you've initialized the \u003ccode\u003eemployee\u003c/code\u003e Object, you'll need to create the following four functions:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eupdateEmployeeWithKeyAndValue()\u003c/code\u003e: this function should take in three arguments: a \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e, a \u003ccode\u003ekey\u003c/code\u003e and a \u003ccode\u003evalue\u003c/code\u003e. This function should not mutate the \u003ccode\u003eemployee\u003c/code\u003e; it should return a \u003cem\u003enew\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003e that has an updated \u003ccode\u003evalue\u003c/code\u003e for the \u003ccode\u003ekey\u003c/code\u003e passed in.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003edestructivelyUpdateEmployeeWithKeyAndValue()\u003c/code\u003e: this function should work the same as \u003ccode\u003eupdateEmployeeWithKeyAndValue()\u003c/code\u003e but it \u003cem\u003eshould\u003c/em\u003e mutate the \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e passed in.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003edeleteFromEmployeeByKey()\u003c/code\u003e: this function should take in a \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e and a \u003ccode\u003ekey\u003c/code\u003e. It should delete the property with that \u003ccode\u003ekey\u003c/code\u003e from the \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e. This should not mutate the original \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e; it should return a \u003cem\u003enew\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003e that doesn't include the identified key-value pair.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003edestructivelyDeleteFromEmployeeByKey()\u003c/code\u003e: this function should work the same as \u003ccode\u003edeleteFromEmployeeByKey()\u003c/code\u003e but it \u003cem\u003eshould\u003c/em\u003e mutate the \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAs you work on your functions, be sure to think about when to use dot notation vs. bracket notation.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lab, we practiced creating an \u003ccode\u003eObject\u003c/code\u003e and performing operations on it.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"\u003eMDN: Object\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"ga2062ca3a560440da1f85f9b41ab4600"},{"id":157876,"title":"Debugging in Node","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-debugging-in-node\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-debugging-in-node\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-debugging-in-node/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUse the Node.js debugger\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWhile \u003ccode\u003econsole.log()\u003c/code\u003e is a valuable debugging tool, it only gets us so far. When we start running JavaScript code in the browser, we will have access to the browser's debugger. The debugger allows you to set \u003ca href=\"https://en.wikipedia.org/wiki/Breakpoint\"\u003ebreakpoints\u003c/a\u003e in your code that will stop the execution of the code at that point. You can then inspect the values of your variables at that point in your code.\u003c/p\u003e  \u003cp\u003eWe will start running JavaScript in the browser a bit later in the course. In the meantime, Node.js (which is the \u003cem\u003eruntime environment\u003c/em\u003e that enables us to run our JavaScript outside the browser) includes a similar debugging tool. In this lesson, we will walk through how to use the \u003ca href=\"https://nodejs.org/api/debugger.html\"\u003eNode.js debugger\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eFork and clone this lesson into your local environment. To do this, click the GitHub \"octocat\" button at the top of the page to open the lesson's GitHub repo, then click \"Fork.\" Once you've cloned it down to your machine, navigate into the lesson's directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. There are no tests so you do not need to run \u003ccode\u003enpm install\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eThe Node.js Debugger\u003c/h2\u003e  \u003cp\u003eOpen \u003ccode\u003eindex.js\u003c/code\u003e and take a look. You will see we have created a simple \u003ccode\u003ewhile\u003c/code\u003e loop that \u003ccode\u003econsole.log()\u003c/code\u003es a message. Run \u003ccode\u003enode index.js\u003c/code\u003e to see it in action.\u003c/p\u003e  \u003cp\u003eUsing the debugger is a simple matter of adding the \u003ccode\u003edebugger\u003c/code\u003e keyword at the point in our code where we want to place a breakpoint (i.e., where we want to pause execution). Modify the code in \u003ccode\u003eindex.js\u003c/code\u003e as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet count = 1;\u003cbr\u003ewhile (count \u0026lt; 5) {\u003cbr\u003e  debugger;\u003cbr\u003e  if (count === 1) {\u003cbr\u003e    console.log(`This loop has executed ${count} time.`);\u003cbr\u003e  } else {\u003cbr\u003e    console.log(`This loop has executed ${count} times.`);\u003cbr\u003e  }\u003cbr\u003e  count += 1;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo start the debugger, run \u003ccode\u003enode inspect index.js\u003c/code\u003e. You should see this in your terminal:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/enter-debugger.png\" alt=\"enter debugger\"\u003e\u003c/p\u003e  \u003cp\u003eNext, enter \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to start executing the code. You will see a \u003ccode\u003e\u0026gt;\u003c/code\u003e pointing to line 3, indicating that the execution of the code has been stopped at that point:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/start-execution.png\" alt=\"start execution\"\u003e\u003c/p\u003e  \u003cp\u003eNow say we want to check the value of our \u003ccode\u003ecount\u003c/code\u003e variable. To do that, we need to enter the debugger's REPL by running \u003ccode\u003erepl\u003c/code\u003e. You will now have a \u003ccode\u003e\u0026gt;\u003c/code\u003e prompt in place of the \u003ccode\u003edebug\u0026gt;\u003c/code\u003e prompt. Type in \u003ccode\u003ecount\u003c/code\u003e to see the current value of the variable:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/enter-repl.png\" alt=\"enter repl\"\u003e\u003c/p\u003e  \u003cp\u003eThen to continue executing the code, we first need to exit the REPL by typing \u003ccode\u003eCtrl-C\u003c/code\u003e, then run \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/second-loop.png\" alt=\"second loop\"\u003e\u003c/p\u003e  \u003cp\u003eNote that our logged message shows at the top of the screenshot above. When we ran \u003ccode\u003econt\u003c/code\u003e, the execution of the code resumed so the \u003ccode\u003econsole.log()\u003c/code\u003e was run, the \u003ccode\u003ecount\u003c/code\u003e variable was incremented, and the execution contined to the next loop. If you enter the REPL and check the value of \u003ccode\u003ecount\u003c/code\u003e, you will see that it's now equal to \u003ccode\u003e2\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eBut what if we wanted to check the value  of \u003ccode\u003ecount\u003c/code\u003e both before \u003cem\u003eand\u003c/em\u003e after the incrementation? We can simply add a second breakpoint:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet count = 1;\u003cbr\u003ewhile (count \u0026lt; 5) {\u003cbr\u003e  debugger;\u003cbr\u003e  if (count === 1) {\u003cbr\u003e    console.log(`This loop has executed ${count} time.`);\u003cbr\u003e  } else {\u003cbr\u003e    console.log(`This loop has executed ${count} times.`);\u003cbr\u003e  }\u003cbr\u003e  count += 1;\u003cbr\u003e  debugger;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn order for the debugger to recognize the change to our code, we'll need to exit and restart it. If you're in the REPL, type \u003ccode\u003ectrl-C\u003c/code\u003e to exit that, then type \u003ccode\u003e.exit\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt or \u003ccode\u003ectrl-C\u003c/code\u003e twice to exit the debugger. Finally, run \u003ccode\u003enode inspect index.js\u003c/code\u003e to relaunch the debugger.\u003c/p\u003e  \u003cp\u003eNow if you run \u003ccode\u003econt\u003c/code\u003e, the code will begin executing and will pause at the first breakpoint. To continue executing the code and advance to the second breakpoint, simply enter \u003ccode\u003econt\u003c/code\u003e again. At any point, you can enter the debugger's REPL to check the value of \u003ccode\u003ecount\u003c/code\u003e, then exit the REPL and continue execution of the code.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson we've learned about using the debugger built in to Node.js. To review, the process is as follows:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ePlace one or more breakpoints in your code using the \u003ccode\u003edebugger\u003c/code\u003e keyword\u003c/li\u003e \u003cli\u003eRun \u003ccode\u003enode inspect \u0026lt;filename\u0026gt;\u003c/code\u003e in the terminal to launch the debugger\u003c/li\u003e \u003cli\u003eRun \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to start execution of the code and advance to the first breakpoint\u003c/li\u003e \u003cli\u003eRun \u003ccode\u003erepl\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to enter the debugger's REPL\u003c/li\u003e \u003cli\u003eCheck the value of any variables by entering the variable name at the \u003ccode\u003e\u0026gt;\u003c/code\u003e prompt\u003c/li\u003e \u003cli\u003eExit the REPL using \u003ccode\u003ectrl-C\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eContinue stepping through the code using \u003ccode\u003econt\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eRun \u003ccode\u003e.exit\u003c/code\u003e or type \u003ccode\u003ectrl-C\u003c/code\u003e twice to exit the debugger\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eDebugging tools will get more and more useful to you as you progress through the curriculum and your programs get more complex. The time you spend now getting comfortable with debugging will pay off in the long run.\u003c/p\u003e  \u003cp\u003eWe will get more practice using the debugger in an upcoming lesson.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.w3schools.com/js/js_debugging.asp\"\u003eW3schools - JavaScript Debugging\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.geeksforgeeks.org/difference-between-node-js-and-javascript/\"\u003eDifference between Node.js and Javascript\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"debugging-in-node"},{"id":157877,"title":"Errors and Stack Traces","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-errors-and-stack-traces\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-errors-and-stack-traces\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-errors-and-stack-traces/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRecognize common JavaScript errors.\u003c/li\u003e \u003cli\u003eRead a stack trace to discern where an error originated.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eNo one writes perfect code the first time. Or the second time. Or the third time.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/errors-and-stack-traces-readme/rakes.gif\" alt=\"Forever stepping on rakes\"\u003e\u003c/p\u003e  \u003cp\u003eWe all make mistakes. One of the biggest advantages an experienced programmer has is knowing how to quickly troubleshoot and fix errors they encounter. You \u003cstrong\u003ewill\u003c/strong\u003e reach this point —\u0026nbsp;it's just a matter of practice. To get started, let's look at some of the common types of error messages you'll encounter when writing JavaScript code.\u003c/p\u003e  \u003ch2\u003e\u003ccode\u003eUncaught ReferenceError: _____ is not defined\u003c/code\u003e\u003c/h2\u003e  \u003cp\u003eThis is one of the simplest and most common errors, and it's pretty explicitly telling us what went wrong. We tried to reference a variable or function that doesn't exist in the current scope. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyVar;\u003cbr\u003e// ERROR: Uncaught ReferenceError: myVar is not defined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt can also arise if you forget to put quotation marks around a string:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eHello, world;\u003cbr\u003e// ERROR: Uncaught ReferenceError: Hello is not defined\u003cbr\u003e\u003cbr\u003e('Hello, world');\u003cbr\u003e// =\u0026gt; \"Hello, world\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you meant to declare the variable in the current scope and simply forgot, declaring the variable should solve the issue:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myVar = 'Hello, world!';\u003cbr\u003e\u003cbr\u003emyVar;\u003cbr\u003e// =\u0026gt; \"Hello, world!\" \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003e\u003ccode\u003eUncaught TypeError: _____ is not a function\u003c/code\u003e\u003c/h2\u003e  \u003cp\u003eThis one usually indicates that you tried to invoke something that isn't actually a function. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myVar = 'Hello, world!';\u003cbr\u003e\u003cbr\u003emyVar();\u003cbr\u003e// ERROR: Uncaught TypeError: myVar is not a function \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eA common variant of this error that you'll run into later in the course is \u003ccode\u003eUncaught TypeError: undefined is not a function\u003c/code\u003e. The JavaScript engine is telling us that we tried to invoke \u003ccode\u003eundefined\u003c/code\u003e, which is obviously not invocable. This happens when we've tried to store a function in a variable but the variable is undefined for some reason.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eAside:\u003c/strong\u003e Wait? We can store functions in variables? Yes we can! In JavaScript, functions are objects, which means we can do anything with them that we can do with any other object: assign it properties, store it in a variable, pass it as an argument, etc.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003e\u003ccode\u003eUncaught SyntaxError: missing ) after argument list\u003c/code\u003e\u003c/h2\u003e  \u003cp\u003eWhen you see this error, it means you tried to invoke a function but forgot the closing parenthesis:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log('Hello,', 'world!';\u003cbr\u003e// ERROR: Uncaught SyntaxError: missing ) after argument list\u003cbr\u003e\u003cbr\u003efunction myAdder (num1, num2) {\u003cbr\u003e  return num1 + num2;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emyAdder(10, 4;\u003cbr\u003e// ERROR: Uncaught SyntaxError: missing ) after argument list \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003e\u003ccode\u003eUncaught TypeError: Assignment to constant variable.\u003c/code\u003e\u003c/h2\u003e  \u003cp\u003eYou're probably familiar with this one by now —\u0026nbsp;it means we accidentally tried to assign a new value to a variable declared with the \u003ccode\u003econst\u003c/code\u003e keyword, which prevents reassignment. However, sometimes you rightfully feel that you didn't try to reassign anything, and it boils down to a small typo:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst snackSelection = 'Pretzels';\u003cbr\u003e\u003cbr\u003eif ((snackSelection = 'Pretzels')) {\u003cbr\u003e  console.log(\"That'll be $1, please!\");\u003cbr\u003e}\u003cbr\u003e// ERROR: Uncaught TypeError: Assignment to constant variable. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, we accidentally used the \u003cem\u003eassignment operator\u003c/em\u003e, a single \u003ccode\u003e=\u003c/code\u003e sign, instead of a comparison operator, such as the \u003cem\u003estrict equality operator\u003c/em\u003e (\u003ccode\u003e===\u003c/code\u003e).\u003c/p\u003e  \u003cp\u003eThis is just a selection of some of the many types of errors you might encounter while writing JavaScript code. The main point is to use the information you're given. The JavaScript engine isn't trying to trick you —\u0026nbsp;on the contrary, it's trying to \u003cstrong\u003ehelp\u003c/strong\u003e you debug.\u003c/p\u003e  \u003ch2\u003eStack traces\u003c/h2\u003e  \u003cp\u003eOne of the really neat pieces of information provided with the error messages is what's called a \u003cem\u003estack trace\u003c/em\u003e. Let's take a look at an example. Fork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, execute the code in \u003ccode\u003eerrors.js\u003c/code\u003e by running \u003ccode\u003enode errors.js\u003c/code\u003e. You should see something like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/errors-and-stack-traces/type-error.png\" alt=\"assignment to constant variable\"\u003e\u003c/p\u003e  \u003cp\u003eWhoa — there's a lot going on there! Let's break it down a bit.\u003c/p\u003e  \u003cp\u003eNear the top, you'll see JavaScript showing us the exact piece of code that's throwing the error. It's even pointing to the exact character it thinks is the problem! (Warning: JavaScript isn't always right.) Below that is the error itself: \u003ccode\u003eTypeError: Assignment to constant variable.\u003c/code\u003e. Hopefully you recognize what's causing the error and how to fix it.\u003c/p\u003e  \u003cp\u003eUnder the identification of the error is the stack trace. For this example, most of the information we're seeing in the stack trace is related to what's going on under the hood in Node.js and, therefore, isn't especially helpful for debugging (we'll look at a more helpful example shortly). But let's look at a couple of things before we move on.\u003c/p\u003e  \u003cp\u003eFirst, you'll see \u003ccode\u003eat Object.\u0026lt;anonymous\u0026gt;\u003c/code\u003e followed by the file path for the \u003ccode\u003eerrors.js\u003c/code\u003e file. The \u003ccode\u003eat Object.\u0026lt;anonymous\u0026gt;\u003c/code\u003e is under-the-hood info: basically, it means that an object is being created by Node when our code runs and that object is not assigned a name. But the file path does contain some helpful information. Notice that it ends with \u003ccode\u003eerrors.js:5:20\u003c/code\u003e. Those numbers at the end are telling us that JavaScript thinks the error is on line 5 of our file, at character 20.\u003c/p\u003e  \u003cp\u003eLet's go ahead and fix our error and run \u003ccode\u003enode errors.js\u003c/code\u003e again. Now you should see something like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/errors-and-stack-traces/reference-error.png\" alt=\"third is not defined\"\u003e\u003c/p\u003e  \u003cp\u003eLooks like we're making some progress! First you'll see the message that was logged by the \u003ccode\u003eif\u003c/code\u003e statement, so we know it's now working. This is followed by the information about the current error: the code that's throwing the error and the error itself. The next three lines give us the stack trace. Note that it's identifying three lines of code: \u003ccode\u003e17\u003c/code\u003e, \u003ccode\u003e13\u003c/code\u003e, and \u003ccode\u003e20\u003c/code\u003e. Let's take a look at those lines:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction first() {\u003cbr\u003e  second(); // Line 13\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction second() {\u003cbr\u003e  third(); // Line 17\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efirst(); // Line 20 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow that we're dealing with a series of function invocations, we can really see the power of the stack trace: it traces the error up through the stack of function calls that led to it. Let's read it backwards and reconstruct the events that led to the error:\u003c/p\u003e  \u003col\u003e \u003cli\u003eThe JavaScript engine reaches line \u003ccode\u003e20\u003c/code\u003e and invokes \u003ccode\u003efirst()\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eInside \u003ccode\u003efirst()\u003c/code\u003e: the engine reaches line \u003ccode\u003e13\u003c/code\u003e and invokes \u003ccode\u003esecond()\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eInside \u003ccode\u003esecond()\u003c/code\u003e: the engine reaches line \u003ccode\u003e17\u003c/code\u003e and sees the identifier \u003ccode\u003ethird\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eThe engine can't find a declared variable or function with that name so it throws an error inside \u003ccode\u003esecond()\u003c/code\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eTo fix the \u003ccode\u003ethird is not defined\u003c/code\u003e error, let's first try declaring \u003ccode\u003ethird\u003c/code\u003e as the simplest thing we know, a variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction first() {\u003cbr\u003e  second();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction second() {\u003cbr\u003e  third();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst third = 'Declaring a new variable.';\u003cbr\u003e\u003cbr\u003efirst(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRemember what we learned earlier in the section on common JavaScript errors. If our understanding is correct, this should fix the \u003ccode\u003ethird is not defined\u003c/code\u003e error and, in its place, throw a new error. Can you guess what the new error will be?\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/errors-and-stack-traces/type-error-2.png\" alt=\"third is not a function\"\u003e\u003c/p\u003e  \u003cp\u003eDid you correctly deduce what the new error would be?\u003c/p\u003e  \u003cp\u003eThe new error is telling us that \u003ccode\u003ethird is not a function\u003c/code\u003e. It may have been pretty easy to figure out that our initial solution would just result in another error, but intentionally breaking your code and seeing whether it breaks in the exact way you predicted is a great technique for improving your debugging and general JavaScript skills. The more you understand the errors and their causes, the easier debugging will become.\u003c/p\u003e  \u003cp\u003eWe'll fix this by declaring \u003ccode\u003ethird()\u003c/code\u003e as a function instead of a simple variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction first() {\u003cbr\u003e  second();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction second() {\u003cbr\u003e  third();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction third() {\u003cbr\u003e  console.log(\"Now I'm a function!\");\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efirst(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we save the file and run the code again, all of the errors should be gone and we should see our two messages logged to the terminal.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eArguably the biggest difference between being a novice and an expert developer is how comfortable you feel with reading and debugging error messages. JavaScript —\u0026nbsp;and, indeed, every programming language —\u0026nbsp;is designed \u003cstrong\u003eby\u003c/strong\u003e programmers \u003cstrong\u003efor\u003c/strong\u003e programmers. The language doesn't intentionally make things more difficult for you. On the contrary, every time you write code that results in some sort of error, JavaScript goes out of its way to provide you with the information you need to find and fix the error. When you see one of those error messages pop up, don't freak out! It's the JavaScript engine starting a friendly dialog with you: \"Hey, I tried to do what you asked of me, but I ran into a problem. Here's where the problem occurred, and here's what happened.\"\u003c/p\u003e  \u003cp\u003eAs you become more comfortable diagnosing and solving error messages, you'll become a faster, better programmer, and writing JavaScript code will become more and more enjoyable!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors\"\u003eMDN —\u0026nbsp;Errors\u003c/a\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined\"\u003e\u003ccode\u003eUncaught ReferenceError: _____ is not defined\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function\"\u003e\u003ccode\u003eUncaught TypeError: _____ is not a function\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\"\u003e\u003ccode\u003eUncaught SyntaxError: missing ) after argument list\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\"\u003e\u003ccode\u003eUncaught TypeError: Assignment to constant variable.\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","exportId":"errors-and-stack-traces"},{"id":157878,"title":"Looping Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-looping-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eBuild a \u003ccode\u003efor\u003c/code\u003e loop.\u003c/li\u003e\n    \u003cli\u003eBuild a \u003ccode\u003ewhile\u003c/code\u003e loop.\u003c/li\u003e\n    \u003cli\u003eExplain the purpose of a loop.\u003c/li\u003e\n    \u003cli\u003eUnderstand when to use each type of loop.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn an earlier lesson, we learned about \u003cem\u003erepetition statements\u003c/em\u003e — statements that allow us to break out of the default sequence and repeat a section of code multiple times. We also learned about two of JavaScript's repetition constructs: the \u003cem\u003ewhile\u003c/em\u003e loop and the \u003cem\u003edo...while\u003c/em\u003e loop. In this lesson we will learn about a third: the \u003cem\u003efor\u003c/em\u003e loop.\u003c/p\u003e\n\u003cp\u003eLet's say we have a bunch of gifts to wrap. They all happen to be the same size and shape, so for every gift, we need to cut a similarly sized piece of wrapping paper, fold it up over the edges of the gift, tape it together, and add a nice little card. Then we set the wrapped gift aside and move on to the next gift.\u003c/p\u003e\n\u003cp\u003eIn programming terms, we can think of our \u003cstrong\u003ecollection\u003c/strong\u003e of gifts as an \u003cstrong\u003e\u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e and the act of wrapping them as a function. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst gifts = [\"teddy bear\", \"drone\", \"doll\"];\u003cbr\u003e\u003cbr\u003efunction wrapGift(gift) {\u003cbr\u003e  console.log(`Wrapped ${gift} and added a bow!`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could then call \u003ccode\u003ewrapGift()\u003c/code\u003e on each gift individually:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewrapGift(gifts[0]);\u003cbr\u003ewrapGift(gifts[1]);\u003cbr\u003ewrapGift(gifts[2]); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, this isn't very efficient or extensible. It's a lot of repetitive code to write out, and if we had more gifts we'd have to write a whole new line for each.\u003c/p\u003e\n\u003cp\u003eThis is where loops come in handy! With a loop, we can just write the repeated action \u003cstrong\u003eonce\u003c/strong\u003e and perform the action on \u003cstrong\u003eevery item in the collection\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eThis is a code-along, so follow along with the instructions in each section. There are tests to make sure you're coding your solutions correctly. If you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eThe \u003ccode\u003efor\u003c/code\u003e loop\u003c/h2\u003e\n\u003cp\u003eOf the loops in JavaScript, the \u003ccode\u003efor\u003c/code\u003e loop is the most common. The \u003ccode\u003efor\u003c/code\u003e loop is made up of four statements in the following structure:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efor ([initialization]; [condition]; [iteration]) {\u003cbr\u003e  [loop body]\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n    \u003cli\u003eInitialization\n        \u003cul\u003e\n            \u003cli\u003eTypically used to initialize a \u003cstrong\u003ecounter\u003c/strong\u003e variable.\u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003eCondition\n        \u003cul\u003e\n            \u003cli\u003eAn expression evaluated before each pass through the loop. If this expression evaluates to \u003ccode\u003etrue\u003c/code\u003e, the statements in the loop body are executed. If the expression evaluates to \u003ccode\u003efalse\u003c/code\u003e, the loop exits.\u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003eIteration\n        \u003cul\u003e\n            \u003cli\u003eAn expression executed at the end of each iteration. Typically, this will involve incrementing or decrementing a counter, bringing the loop ever closer to completion.\u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003eLoop body\n        \u003cul\u003e\n            \u003cli\u003eCode that runs on each pass through the loop.\u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eUsage\u003c/em\u003e\u003c/strong\u003e: Use a \u003ccode\u003efor\u003c/code\u003e loop when you know how many times you want the loop to run (for example, when you're looping through elements in an array).\u003c/p\u003e\n\u003ch4\u003eExamples\u003c/h4\u003e\n\u003cp\u003eLet's take a look at an example and get some practice using the Node debugger. Enter the code below into the \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can, of course, copy/paste the code rather than typing it in yourself, but we recommend typing it in for now. The act of typing code develops muscle memory and helps your brain understand and internalize the syntax.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003efor (let age = 30; age \u0026lt; 40; age++) {\u003cbr\u003e  console.log(`I'm ${age} years old. Happy birthday to me!`);\u003cbr\u003e  debugger;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above code, \u003ccode\u003elet age = 30\u003c/code\u003e is the \u003cstrong\u003einitialization\u003c/strong\u003e: we're creating a variable, \u003ccode\u003eage\u003c/code\u003e, that we'll use in the next three phases of the loop. Notice that we use \u003ccode\u003elet\u003c/code\u003e instead of \u003ccode\u003econst\u003c/code\u003e because we need to increment the value of \u003ccode\u003eage\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003cstrong\u003econdition\u003c/strong\u003e for the above loop is \u003ccode\u003eage \u0026lt; 40\u003c/code\u003e, or, in other words, \"Run the code in the loop body until \u003ccode\u003eage\u003c/code\u003e is NOT less than \u003ccode\u003e40\u003c/code\u003e.\" As long as the condition evaluates to \u003ccode\u003etrue\u003c/code\u003e, the code in the loop body is executed, the value of \u003ccode\u003eage\u003c/code\u003e is incremented, and the condition is reevaluated. As soon as the condition evaluates to \u003ccode\u003efalse\u003c/code\u003e, the loop ends.\u003c/p\u003e\n\u003cp\u003eThe \u003cstrong\u003eiteration\u003c/strong\u003e is \u003ccode\u003eage++\u003c/code\u003e, which increments the value of \u003ccode\u003eage\u003c/code\u003e by \u003ccode\u003e1\u003c/code\u003e after every pass through the loop. We initialized \u003ccode\u003eage\u003c/code\u003e as \u003ccode\u003e30\u003c/code\u003e, and it retains that value during the first pass through the loop. At the end of the first pass, we increment \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e31\u003c/code\u003e, check whether the condition still holds \u003ccode\u003etrue\u003c/code\u003e, and, since it does, run the loop body again with \u003ccode\u003eage\u003c/code\u003e as \u003ccode\u003e31\u003c/code\u003e. After that second loop, we increment \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e32\u003c/code\u003e, and so on.\u003c/p\u003e\n\u003cp\u003eThe \u003cstrong\u003eloop body\u003c/strong\u003e is the set of statements that we want to run when the condition evaluates to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eLet's take a look at what's happening in our loop using debugger. Run \u003ccode\u003enode inspect index.js\u003c/code\u003e in the terminal to start the debugger. You should see the following:\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_1.png\" alt=\"Debugger Output 1\"\u003e\n\u003c/p\u003e\n\u003cp\u003eNow run \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to start executing the loop and advance to the breakpoint. It should look like this:\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_2.png\" alt=\"Debugger Output 2\"\u003e\n\u003c/p\u003e\n\u003cp\u003eNote, in the first line, that the message has been logged and that \u003ccode\u003eage\u003c/code\u003e is equal to 30. To verify that, enter \u003ccode\u003erepl\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to open the REPL, then enter \u003ccode\u003eage\u003c/code\u003e. You should see \u003ccode\u003e30\u003c/code\u003e output. Now type \u003ccode\u003eCtrl-C\u003c/code\u003e to exit the repl, and enter \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to advance to the next iteration of the loop. You should see the following:\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_3.png\" alt=\"Debugger Output 3\"\u003e\n\u003c/p\u003e\n\u003cp\u003eNote that the logged output now shows that age is 31. You can continue to step through the iterations by running \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt. At any point you can verify the value of \u003ccode\u003eage\u003c/code\u003e by entering the REPL and typing \u003ccode\u003eage\u003c/code\u003e at the prompt, then exit the REPL to continue stepping through. When you're done, enter \u003ccode\u003e.exit\u003c/code\u003e or \u003ccode\u003eCtrl-C\u003c/code\u003e twice to exit the debugger.\u003c/p\u003e\n\u003cp\u003eNow let's remove \u003ccode\u003edebugger;\u003c/code\u003e from our code and execute it by running \u003ccode\u003enode index.js\u003c/code\u003e. You should see the following:\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/happy-birthday-to-me.png\" alt=\"Happy Birthday logged\"\u003e\n\u003c/p\u003e\n\u003ch3\u003eUsing \u003ccode\u003efor\u003c/code\u003e with Arrays\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003efor\u003c/code\u003e loop is often used to iterate over every element in an array. Let's rewrite our gift-wrapping action above as a \u003ccode\u003efor\u003c/code\u003e loop. Enter the following code into \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst gifts = [\"teddy bear\", \"drone\", \"doll\"];\u003cbr\u003e\u003cbr\u003efunction wrapGifts(gifts) {\u003cbr\u003e  for (let i = 0; i \u0026lt; gifts.length; i++) {\u003cbr\u003e    console.log(`Wrapped ${gifts[i]} and added a bow!`);\u003cbr\u003e    debugger;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return gifts;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ewrapGifts(gifts); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe started our counter, \u003ccode\u003ei\u003c/code\u003e, at \u003ccode\u003e0\u003c/code\u003e because arrays have zero-based indexes. Our condition states that we should run the code in the loop body while \u003ccode\u003ei\u003c/code\u003e is less than \u003ccode\u003egifts.length\u003c/code\u003e (\u003ccode\u003e3\u003c/code\u003e in the above example). Our iteration, \u003ccode\u003ei++\u003c/code\u003e, increments our counter by \u003ccode\u003e1\u003c/code\u003e at the end of each pass through the loop.\u003c/p\u003e\n\u003cp\u003eRun \u003ccode\u003enode inspect index.js\u003c/code\u003e in the terminal to enter the debugger, and \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to advance to the breakpoint. You should see \u003ccode\u003eWrapped teddy bear and added a bow!\u003c/code\u003e logged. In our loop body, we reference \u003ccode\u003egifts[i]\u003c/code\u003e. Since \u003ccode\u003ei\u003c/code\u003e starts out as \u003ccode\u003e0\u003c/code\u003e, during the first pass through the loop \u003ccode\u003egifts[i]\u003c/code\u003e is \u003ccode\u003egifts[0]\u003c/code\u003e, which is \u003ccode\u003e'teddy bear'\u003c/code\u003e. Continue stepping through the loop by entering \u003ccode\u003econt\u003c/code\u003e at the\u003ccode\u003edebug\u003c/code\u003e prompt and remember you can enter the REPL at any point to check the values of our variables, \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003egifts[i]\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhen you're done, remove the \u003ccode\u003edebugger\u003c/code\u003e and execute the code by running \u003ccode\u003enode index.js\u003c/code\u003e. You should see the following logged to the terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWrapped teddy bear and added a bow!\u003cbr\u003eWrapped drone and added a bow!\u003cbr\u003eWrapped doll and added a bow! \u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eAssignment\u003c/h3\u003e\n\u003cp\u003eIn the previous section, the \u003ccode\u003ewrapGifts()\u003c/code\u003e function allowed us to take any array of gifts and loop over them, logging our own message. Let's practice that with a slightly different idea. To complement our gift wrapping function, your task is to create a thank you card creator.\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Recall the difference between logging and returning values from a function. When we log information we are simply outputting text to a terminal or console. When we return data from a function we will be able to reference and use that information elsewhere because the data is being passed out of the function.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIn \u003ccode\u003eindex.js\u003c/code\u003e, build a function named \u003ccode\u003ewriteCards()\u003c/code\u003e that accepts two arguments: an array of string names, and an event name. Create a \u003ccode\u003efor\u003c/code\u003e loop with a counter that starts at \u003ccode\u003e0\u003c/code\u003e and increments at the end of each loop. The \u003ccode\u003efor\u003c/code\u003e loop should stop once it has iterated over the length of the array.\u003c/p\u003e\n\u003cp\u003eAs with our previous \u003ccode\u003ewrapGifts()\u003c/code\u003e function, you will create a custom message for each name inside the loop. Unlike that example, however, instead of simply logging the messages to the console, you will collect them in a \u003cem\u003enew\u003c/em\u003e array and \u003cstrong\u003ereturn\u003c/strong\u003e this array at the end of the function. (Refer back to the Array Methods lesson if you need a refresher on how we can add an element to an array.) The overall process should be:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003ecreate a new, empty array to hold the messages;\u003c/li\u003e\n    \u003cli\u003eiterate through the input array and, inside the loop, build out the 'thank you' message for each name using string interpolation, then add that message to the new array you created;\u003c/li\u003e\n    \u003cli\u003eafter the loop finishes and all of the messages have been added to the new array, return the new array.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eHere is an example of what a call to the \u003ccode\u003ewriteCards()\u003c/code\u003e function might look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewriteCards([\"Ada\", \"Brendan\", \"Ali\"], \"birthday\"); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we were to call the function using this function call, it should produce the following array as the return value:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e  \"Thank you, Ada, for the wonderful birthday gift!\",\u003cbr\u003e  \"Thank you, Brendan, for the wonderful birthday gift!\",\u003cbr\u003e  \"Thank you, Ali, for the wonderful birthday gift!\"\u003cbr\u003e]; \u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: The debugger isn't just for debugging code — you can also use it to help you write your function! Try building the structure of the loop, putting the \u003ccode\u003edebugger\u003c/code\u003e inside the loop body. Even before you start writing the code, you can enter the debugger's REPL and try out code until you figure out how to create the message and add it to an array. Once it's working in the REPL, transfer the code to \u003ccode\u003eindex.js\u003c/code\u003e, exit the debugger, and run the tests.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eThe \u003ccode\u003ewhile\u003c/code\u003e loop\u003c/h2\u003e\n\u003cp\u003eRecall from the earlier lesson that the \u003ccode\u003ewhile\u003c/code\u003e loop is similar to a \u003ccode\u003efor\u003c/code\u003e loop, repeating an action in a loop based on a condition. Both will continue to loop until that condition evaluates to \u003ccode\u003efalse\u003c/code\u003e. Unlike \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e only requires condition and loop statements:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewhile ([condition]) {\u003cbr\u003e  [loop body]\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe initialization and iteration statements of the \u003ccode\u003efor\u003c/code\u003e loop have not disappeared, though. In fact, we could rewrite our original \u003ccode\u003efor\u003c/code\u003e loop gift wrapping example using a \u003ccode\u003ewhile\u003c/code\u003e loop and achieve the exact same result:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst gifts = [\"teddy bear\", \"drone\", \"doll\"];\u003cbr\u003e\u003cbr\u003efunction wrapGifts(gifts) {\u003cbr\u003e  let i = 0; // the initialization moves OUTSIDE the body of the loop!\u003cbr\u003e  while (i \u0026lt; gifts.length) {\u003cbr\u003e    console.log(`Wrapped ${gifts[i]} and added a bow!`);\u003cbr\u003e    i++; // the iteration moves INSIDE the body of the loop!\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return gifts;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ewrapGifts(gifts);\u003cbr\u003e// LOG: Wrapped teddy bear and added a bow!\u003cbr\u003e// LOG: Wrapped drone and added a bow!\u003cbr\u003e// LOG: Wrapped doll and added a bow!\u003cbr\u003e// =\u0026gt; [\"teddy bear\", \"drone\", \"doll\"] \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that we've just moved the initialization and iteration statements — declaring the \u003ccode\u003ei\u003c/code\u003e variable \u003cem\u003eoutside\u003c/em\u003e the loop, and incrementing it \u003cem\u003einside\u003c/em\u003e the loop.\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eCAUTION\u003c/strong\u003e: When using \u003ccode\u003ewhile\u003c/code\u003e loops, it is easy to forget to involve iteration. Leaving iteration out can result in a condition that \u003cem\u003ealways\u003c/em\u003e evaluates to \u003ccode\u003etrue\u003c/code\u003e, causing an infinite loop!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eUsing a \u003ccode\u003ewhile\u003c/code\u003e loop enables us to check conditions that aren't based on a counter. Take a look at the following \u003cem\u003e\n        \u003ca href=\"https://en.wikipedia.org/wiki/Pseudocode\"\u003epseudocode\u003c/a\u003e\n    \u003c/em\u003e for an example of how we could use \u003ccode\u003ewhile\u003c/code\u003e in a program for planting a garden:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction plantGarden() {\u003cbr\u003e  let keepWorking = true;\u003cbr\u003e  while (keepWorking) {\u003cbr\u003e    chooseSeedLocation();\u003cbr\u003e    plantSeed();\u003cbr\u003e    waterSeed();\u003cbr\u003e    keepWorking = checkForMoreSeeds();\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can imagine that \u003cem\u003ewhile\u003c/em\u003e we have seeds, we take the same steps over and over: choose a location for a seed; plant it; water it. Then, check if there are more seeds. If \u003cem\u003enot\u003c/em\u003e, do not keep working.\u003c/p\u003e\n\u003ch2\u003eWhen to Use \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e\n\u003c/h2\u003e\n\u003cp\u003eJavaScript, like many programming languages, provides a variety of looping options. Loops like \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e are actually just slight variations of the same process. By providing a variety, we as programmers have a larger vocabulary to work with.\u003c/p\u003e\n\u003cp\u003eOften, you will see \u003ccode\u003ewhile\u003c/code\u003e loops simply being used as an alternative to \u003ccode\u003efor\u003c/code\u003e loops:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet countup = 0;\u003cbr\u003ewhile (countup \u0026lt; 10) {\u003cbr\u003e  console.log(countup++);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is perfectly fine as an alternative way to describe:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efor (let countup = 0; countup \u0026lt; 10; countup++) {\u003cbr\u003e  console.log(countup);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you're feeling a bit lost about when to use a \u003ccode\u003efor\u003c/code\u003e vs. a \u003ccode\u003ewhile\u003c/code\u003e loop, take a deep breath. Most of the time, a regular \u003ccode\u003efor\u003c/code\u003e loop will suffice. It's by far the most common looping construct in JavaScript. A general heuristic for choosing which loop to use is to first try a \u003ccode\u003efor\u003c/code\u003e loop. If that doesn't serve your purposes, then go ahead and try a \u003ccode\u003ewhile\u003c/code\u003e loop. Also, remember that you can always refer to the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\"\u003edocumentation on these loops\u003c/a\u003e at any time.\u003c/p\u003e\n\u003cp\u003eJust don't forget: with \u003ccode\u003ewhile\u003c/code\u003e, make sure you are updating the condition on each loop so that the loop eventually terminates!\u003c/p\u003e\n\u003ch2\u003eAssignment\u003c/h2\u003e\n\u003cp\u003eTo get more acquainted with \u003ccode\u003ewhile\u003c/code\u003e, your task is to write a function, \u003ccode\u003ecountDown\u003c/code\u003e, that takes in any positive integer and, starting from that number, counts down to zero using \u003ccode\u003econsole.log()\u003c/code\u003e. Note that this means that running \u003ccode\u003ecountdown(10);\u003c/code\u003e would actually log \u003cem\u003e11\u003c/em\u003e times:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e10\u003cbr\u003e9\u003cbr\u003e8\u003cbr\u003e7\u003cbr\u003e6\u003cbr\u003e5\u003cbr\u003e4\u003cbr\u003e3\u003cbr\u003e2\u003cbr\u003e1\u003cbr\u003e0 \u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eAfter some time programming in JavaScript, writing a \u003ccode\u003efor\u003c/code\u003e loop will come as naturally to you as wrapping one gift after another. Just as you slowly become comfortable using different words and vocabulary to better express yourself, you will become more acquainted with concepts like \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e until you are able to discern the nuanced differences in usage between them.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eCodecademy\n        \u003cul\u003e\n            \u003cli\u003e\n                \u003ca href=\"http://www.codecademy.com/glossary/javascript/loops#for-loops\"\u003e\u003ccode\u003efor\u003c/code\u003e loop\u003c/a\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n                \u003ca href=\"http://www.codecademy.com/glossary/javascript/loops#while-loops\"\u003e\u003ccode\u003ewhile\u003c/code\u003e loop\u003c/a\u003e\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003eMDN\n        \u003cul\u003e\n            \u003cli\u003e\n                \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"\u003e\u003ccode\u003efor\u003c/code\u003e loop\u003c/a\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n                \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\"\u003e\u003ccode\u003ewhile\u003c/code\u003e loop\u003c/a\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n                \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\"\u003eLoops and iteration\u003c/a\u003e\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e","exportId":"gefdcd3675da711f0226308177de916cc"},{"id":157879,"title":"Object Iteration","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-object-iteration\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-object-iteration\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-object-iteration/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eExplain the difference between looping and iteration.\u003c/li\u003e \u003cli\u003eIterate over arrays with the \u003ccode\u003efor...of\u003c/code\u003e statement.\u003c/li\u003e \u003cli\u003eEnumerate an object's properties with the \u003ccode\u003efor...in\u003c/code\u003e statement.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWhen we create a \u003ccode\u003efor\u003c/code\u003e loop to loop over an array, we base the loop's condition off of the \u003ccode\u003e.length\u003c/code\u003e of the array. This works, but it's a lot of syntactic cruft to remember:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (let i = 0; i \u0026lt; array.length; i++) {\u003cbr\u003e  // Loop body\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe problem is that we're using a \u003cem\u003elooping\u003c/em\u003e construct to perform \u003cem\u003eiteration\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eLooping vs. Iteration\u003c/h2\u003e  \u003cp\u003eThere's a pretty fine line separating the concepts of \u003cem\u003elooping\u003c/em\u003e and \u003cem\u003eiteration\u003c/em\u003e, and only the truly pedantic will call you out if you use one in place of the other.\u003c/p\u003e  \u003cp\u003eLooping is the process of executing a set of statements \u003cstrong\u003erepeatedly until a condition is met\u003c/strong\u003e. It's great for when we want to do something a specific number of times (\u003ccode\u003efor\u003c/code\u003e loop) or unlimited times until the condition is met (\u003ccode\u003ewhile\u003c/code\u003e or \u003ccode\u003edo while\u003c/code\u003e loop).\u003c/p\u003e  \u003cp\u003eIteration is the process of executing a set of statements \u003cstrong\u003eonce for each element in a collection\u003c/strong\u003e. We can accomplish this with a \u003ccode\u003efor\u003c/code\u003e loop:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet myArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\u003cbr\u003e\u003cbr\u003efor (let i = 0; i \u0026lt; myArray.length; i++) {\u003cbr\u003e  console.log(myArray[i]);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eor with a \u003ccode\u003ewhile\u003c/code\u003e loop:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet myArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\u003cbr\u003e\u003cbr\u003elet j = 0;\u003cbr\u003e\u003cbr\u003ewhile (j \u0026lt; myArray.length) {\u003cbr\u003e  console.log(myArray[j++]);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ebut neither is very pretty. The \u003ccode\u003efor...of\u003c/code\u003e statement gives us a better to way.\u003c/p\u003e  \u003ch2\u003e\u003ccode\u003efor...of\u003c/code\u003e\u003c/h2\u003e  \u003cp\u003eUsing \u003ccode\u003efor...of\u003c/code\u003e, the code above becomes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\u003cbr\u003e\u003cbr\u003efor (const element of myArray) {\u003cbr\u003e  console.log(element);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUsing a construct that is specifically meant for iteration results in much cleaner code: there's\u0026nbsp;no initialization of a counter, no condition, no incrementing the counter, and no bracket notation to access elements in the array (\u003ccode\u003emyArray[i]\u003c/code\u003e).\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003econst\u003c/code\u003e vs. \u003ccode\u003elet\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eAs you might've noticed, \u003ccode\u003efor...of\u003c/code\u003e allows us to use \u003ccode\u003econst\u003c/code\u003e instead of \u003ccode\u003elet\u003c/code\u003e. In \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e statements, \u003ccode\u003elet\u003c/code\u003e is required because we are incrementing a counter variable. The incrementing process involves taking the counter's current value, adding \u003ccode\u003e1\u003c/code\u003e to it, and then assigning that new value to the variable. That reassignment precludes us from using our beloved \u003ccode\u003econst\u003c/code\u003e, which cannot be reassigned.\u003c/p\u003e  \u003cp\u003eDelightfully, the \u003ccode\u003efor...of\u003c/code\u003e statement involves no such reassignment. On each trip into the loop body (which is a \u003cem\u003eblock\u003c/em\u003e — note the curly braces), we assign the next element in the collection to a \u003cstrong\u003enew\u003c/strong\u003e \u003ccode\u003eelement\u003c/code\u003e variable. Upon reaching the end of the block, the block-scoped variable vanishes, and we return to the top. Then we repeat the process, assigning the next element in the collection to a \u003cstrong\u003enew\u003c/strong\u003e \u003ccode\u003eelement\u003c/code\u003e variable.\u003c/p\u003e  \u003ch3\u003eIterating over... strings?\u003c/h3\u003e  \u003cp\u003eA string is effectively an ordered collection (like an array) of characters, which \u003ccode\u003efor...of\u003c/code\u003e is more than happy to iterate over:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (const char of 'Hello, world!') {\u003cbr\u003e  console.log(char);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: H\u003cbr\u003e// LOG: e\u003cbr\u003e// LOG: l\u003cbr\u003e// LOG: l\u003cbr\u003e// LOG: o\u003cbr\u003e// LOG: ,\u003cbr\u003e// LOG:\u003cbr\u003e// LOG: w\u003cbr\u003e// LOG: o\u003cbr\u003e// LOG: r\u003cbr\u003e// LOG: l\u003cbr\u003e// LOG: d\u003cbr\u003e// LOG: ! \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eUsage\u003c/h3\u003e  \u003cp\u003eUse a \u003ccode\u003efor...of\u003c/code\u003e statement anytime you want to iterate over an array.\u003c/p\u003e  \u003ch2\u003eIterating over objects\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement is similar to \u003ccode\u003efor...of\u003c/code\u003e; it's generally used for iterating over the properties in an object. The statement follows this syntax:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (const [KEY] in [OBJECT]) {\u003cbr\u003e  // Code in the statement body\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement iterates over the properties in an object, but it doesn't pass the entire property into the block. Instead, it only passes in the \u003cem\u003ekeys\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street1: '11 Broadway',\u003cbr\u003e  street2: '2nd Floor',\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: \"10004\";\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(key);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: street1\u003cbr\u003e// LOG: street2\u003cbr\u003e// LOG: city\u003cbr\u003e// LOG: state\u003cbr\u003e// LOG: zipCode \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAccessing the object's values is as simple as combining the passed-in key with the \u003cem\u003ebracket operator\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street1: '11 Broadway',\u003cbr\u003e  street2: '2nd Floor',\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: \"10004\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(address[key]);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: 11 Broadway\u003cbr\u003e// LOG: 2nd Floor\u003cbr\u003e// LOG: New York\u003cbr\u003e// LOG: NY\u003cbr\u003e// LOG: 10004 \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eBut... but I want to use the dot operator!\u003c/h3\u003e  \u003cp\u003eCan you think of why the bracket operator is required? Let's see what happens when we use the \u003cem\u003edot operator\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street1: '11 Broadway',\u003cbr\u003e  street2: '2nd Floor',\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: \"10004\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(address.key);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement iterates over the five properties in \u003ccode\u003eaddress\u003c/code\u003e, successively passing in the object's keys. However, inside the statement body we're trying to access \u003ccode\u003eaddress.key\u003c/code\u003e. If you recall from the lesson on objects, variables don't work with the dot operator because it treats the variable name as a literal key —\u0026nbsp;that is, \u003ccode\u003eaddress.key\u003c/code\u003e is trying to access the property on \u003ccode\u003eaddress\u003c/code\u003e with a key of \u003ccode\u003ekey\u003c/code\u003e. Since there is no \u003ccode\u003ekey\u003c/code\u003e property in \u003ccode\u003eaddress\u003c/code\u003e, it returns \u003ccode\u003eundefined\u003c/code\u003e. To prove this, let's add a \u003ccode\u003ekey\u003c/code\u003e property to \u003ccode\u003eaddress\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.key = \"Let's have a 'key' key!\";\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(address.key);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key! \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eUsage\u003c/h3\u003e  \u003cp\u003eUse a \u003ccode\u003efor...in\u003c/code\u003e statement whenever you want to enumerate the properties of an object.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003efor...in\u003c/code\u003e and order\u003c/h3\u003e  \u003cp\u003eBecause \u003cstrong\u003earrays are objects\u003c/strong\u003e, \u003ccode\u003efor...in\u003c/code\u003e \u003cem\u003ewill work\u003c/em\u003e with arrays. In fact, because \u003ccode\u003efor...of\u003c/code\u003e was added to JavaScript later than \u003ccode\u003efor...in\u003c/code\u003e, you might see older code that uses \u003ccode\u003efor...in\u003c/code\u003e to iterate over arrays. However, as a general rule, \u003cstrong\u003edon't use \u003ccode\u003efor...in\u003c/code\u003e with arrays\u003c/strong\u003e. When iterating over an array, an \u003cstrong\u003eordered\u003c/strong\u003e collection, we would expect the elements in the array to be dealt with \u003cstrong\u003ein order\u003c/strong\u003e. However, because of how \u003ccode\u003efor...in\u003c/code\u003e works under the hood, there's no guarantee of order. From the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003eMDN documentation\u003c/a\u003e:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eA \u003ccode\u003efor...in\u003c/code\u003e loop iterates over the properties of an object in an \u003cstrong\u003earbitrary order\u003c/strong\u003e ... one cannot depend on the seeming orderliness of iteration, at least in a cross-browser setting.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eWhat this means is that, with \u003ccode\u003efor...in\u003c/code\u003e, different browsers might iterate over the same object's properties in different orders. That's not cool! Cross-browser consistency is very important. A lot of progress has been made towards standardizing the behavior of \u003ccode\u003efor...in\u003c/code\u003e across all major browsers, but there's still no reason to use \u003ccode\u003efor...in\u003c/code\u003e with arrays when we have the wonderfully consistent \u003ccode\u003efor...of\u003c/code\u003e tailor-made for the job.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\u003eMDN —\u0026nbsp;\u003ccode\u003efor...of\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003eMDN —\u0026nbsp;\u003ccode\u003efor...in\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"object-iteration"},{"id":157880,"title":"Traversing Nested Objects","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-traversing-nested-objects\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-traversing-nested-objects/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-traversing-nested-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-traversing-nested-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRevisit why nested objects are useful\u003c/li\u003e\n\u003cli\u003eReview how to access inner properties\u003c/li\u003e\n\u003cli\u003eUse recursion to iterate over nested objects and arrays\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou've just been onboarded to the dev team working on Flatbook, the world's\npremier Flatiron School-based social network. Here at Flatbook, we have some\npretty complex data-modeling needs. For instance, think about the breadth of\ninformation we might want to display on each user's profile page:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFirst name\u003c/li\u003e\n\u003cli\u003eLast name\u003c/li\u003e\n\u003cli\u003eEmployer\n\n\u003cul\u003e\n\u003cli\u003eCompany name\u003c/li\u003e\n\u003cli\u003eJob title\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eFriends\n\n\u003cul\u003e\n\u003cli\u003eFirst name\u003c/li\u003e\n\u003cli\u003eLast name\u003c/li\u003e\n\u003cli\u003eEmployer\u003c/li\u003e\n\u003cli\u003eCompany name\u003c/li\u003e\n\u003cli\u003eJob title\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eProjects\n\n\u003cul\u003e\n\u003cli\u003eTitle\u003c/li\u003e\n\u003cli\u003eDescription\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe can already start to see some problems with trying to fit all of this into a\n\u003cem\u003eshallow\u003c/em\u003e (non-nested) JavaScript object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  companyName: 'Flatbook Labs',\u003cbr\u003e  jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend1firstName: 'Nancy',\u003cbr\u003e  friend1lastName: 'Burgess',\u003cbr\u003e  friend1companyName: 'Flatbook Labs',\u003cbr\u003e  friend1jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend2firstName: 'Corinna',\u003cbr\u003e  friend2lastName: 'Jackson',\u003cbr\u003e  friend2companyName: 'Flatbook Labs',\u003cbr\u003e  friend2jobTitle: 'Senior Developer',\u003cbr\u003e  project1title: 'Flatbook',\u003cbr\u003e  project1description: 'The premier Flatiron School-based social network in the world.',\u003cbr\u003e  project2title: 'Scuber',\u003cbr\u003e  project2description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGoodness, that's messy. It would be a nightmare to keep the object updated. If\nAvi un-friends Nancy, do we shift Corinna's info into the \u003ccode\u003efriend1...\u003c/code\u003e slots and\ndelete the \u003ccode\u003efriend2...\u003c/code\u003e properties, or do we leave Corinna as \u003ccode\u003efriend2...\u003c/code\u003e and\ndelete the \u003ccode\u003efriend1...\u003c/code\u003e properties? There are no good answers. Except...\u003c/p\u003e\n\n\u003ch2\u003eObjects in Objects\u003c/h2\u003e\n\n\u003cp\u003eRecall from the lesson on objects that the values in an object can be\n\u003cem\u003eanything\u003c/em\u003e, including another object. If we reorganize the above object a bit,\nit becomes significantly easier to read and update:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  company: {\u003cbr\u003e    name: 'Flatbook Labs',\u003cbr\u003e    jobTitle: 'Developer Apprentice'\u003cbr\u003e  },\u003cbr\u003e  friends: [{\u003cbr\u003e    firstName: 'Nancy',\u003cbr\u003e    lastName: 'Burgess',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Developer Apprentice'\u003cbr\u003e    }\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Corinna',\u003cbr\u003e    lastName: 'Jackson',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Lead Developer'\u003cbr\u003e    }\u003cbr\u003e  }],\u003cbr\u003e  projects: [{\u003cbr\u003e    title: 'Flatbook',\u003cbr\u003e    description: 'The premier Flatiron School-based social network in the world.'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    title: 'Scuber',\u003cbr\u003e    description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e  }]\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe've pared the sixteen messy properties in our first attempt down to a svelte\nfive: \u003ccode\u003efirstName\u003c/code\u003e, \u003ccode\u003elastName\u003c/code\u003e, \u003ccode\u003ecompany\u003c/code\u003e, \u003ccode\u003efriends\u003c/code\u003e, and \u003ccode\u003eprojects\u003c/code\u003e. \u003ccode\u003ecompany\u003c/code\u003e\npoints at another object, and both \u003ccode\u003efriends\u003c/code\u003e and \u003ccode\u003eprojects\u003c/code\u003e point to arrays of\nobjects. Let's practice accessing some of those beautifully nested data points.\nCopy \u003ccode\u003euserInfo\u003c/code\u003e into \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e and follow along.\u003c/p\u003e\n\n\u003cp\u003eTo review, for a property at the top level of our object, we can grab a value\nusing dot notation:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euserInfo.lastName;\u003cbr\u003e//=\u0026gt; \"Flombaum\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the property we're accessing is nested inside another object, we just append\nthe additional key(s):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euserInfo.company.jobTitle;\u003cbr\u003e//=\u0026gt; \"Developer Apprentice\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the property is nested inside an array, we need to specify the index in the\narray for the object that we want. To get the first name of Avi's first friend and the title of his second project:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euserInfo.friends[0].firstName;\u003cbr\u003e//=\u0026gt; \"Nancy\"\u003cbr\u003e\u003cbr\u003euserInfo.projects[1].title;\u003cbr\u003e//=\u0026gt; \"Scuber\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt's worth spending some time getting comfortable with nested data structures\n— you will see a lot of them as you proceed through the curriculum and in\nyour career as a developer. Create your own in the REPL and practice accessing\nvarious pieces of data.\u003c/p\u003e\n\n\u003ch2\u003eArrays in arrays\u003c/h2\u003e\n\n\u003cp\u003eWorking with nested arrays isn't all that different from nested objects. Simply\nreplace the named properties of nested objects with indexes of nested arrays.\nLet's review with an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst letters = ['a', ['b', ['c', ['d', ['e']], 'f']]];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGiven the above nested array, how would we get the letter \u003ccode\u003e'e'\u003c/code\u003e? First, we'd\nneed the second element in \u003ccode\u003eletters\u003c/code\u003e, \u003ccode\u003eletters[1]\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eletters[1];\u003cbr\u003e//=\u0026gt; [\"b\", [\"c\", [\"d\", [\"e\"]], \"f\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen we'd need the second element of that element, so \u003ccode\u003eletters[1][1]\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eletters[1][1];\u003cbr\u003e//=\u0026gt; [\"c\", [\"d\", [\"e\"]], \"f\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen the second element of \u003cstrong\u003ethat\u003c/strong\u003e element, \u003ccode\u003eletters[1][1][1]\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eletters[1][1][1];\u003cbr\u003e//=\u0026gt; [\"d\", [\"e\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd the second element of \u003cstrong\u003e\u003cem\u003ethat\u003c/em\u003e\u003c/strong\u003e element, \u003ccode\u003eletters[1][1][1][1]\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eletters[1][1][1][1];\u003cbr\u003e//=\u0026gt; [\"e\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFinally, we want the first element in that final nested array, \u003ccode\u003eletters[1][1][1][1][0]\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eletters[1][1][1][1][0];\u003cbr\u003e//=\u0026gt; \"e\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhew! That's a lot to keep track of. Just remember that each lookup (each set of\nsquare brackets) \"drills down\" into each successive nested array.\u003c/p\u003e\n\n\u003ch2\u003eIterating over nested objects and arrays\u003c/h2\u003e\n\n\u003cp\u003eOur initial shallow object had a lot of drawbacks, but one advantage of it is\nthat it was very easy to iterate over all of the information:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  companyName: 'Flatbook Labs',\u003cbr\u003e  jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend1firstName: 'Nancy',\u003cbr\u003e  friend1lastName: 'Burgess',\u003cbr\u003e  friend1companyName: 'Flatbook Labs',\u003cbr\u003e  friend1jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend2firstName: 'Corinna',\u003cbr\u003e  friend2lastName: 'Jackson',\u003cbr\u003e  friend2companyName: 'Flatbook Labs',\u003cbr\u003e  friend2jobTitle: 'Senior Developer',\u003cbr\u003e  project1title: 'Flatbook',\u003cbr\u003e  project1description: 'The premier Flatiron School-based social network in the world.',\u003cbr\u003e  project2title: 'Scuber',\u003cbr\u003e  project2description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction shallowIterator(target) {\u003cbr\u003e  for (const key in target) {\u003cbr\u003e    console.log(target[key]);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eshallowIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Senior Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can also use it with arrays:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst primes = [2, 3, 5, 7, 11];\u003cbr\u003e\u003cbr\u003eshallowIterator(primes);\u003cbr\u003e// LOG: 2\u003cbr\u003e// LOG: 3\u003cbr\u003e// LOG: 5\u003cbr\u003e// LOG: 7\u003cbr\u003e// LOG: 11\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: our \u003ccode\u003eshallowIterator()\u003c/code\u003e function uses \u003ccode\u003efor...in\u003c/code\u003e to iterate through the object that's passed to it. We learned in the previous lesson that \u003ccode\u003efor...in\u003c/code\u003e is not the best iterator to use with arrays. Because we're not currently working in the browser (and therefore cross-browser consistency isn't an issue), we can safely ignore that problem for the moment. Since this example is fairly complicated, we'll work through the process using \u003ccode\u003efor...in\u003c/code\u003e first then, once we've got that working, build a modification that will handle arrays appropriately.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eUnfortunately, as you may be able to guess from its name, our \u003ccode\u003eshallowIterator()\u003c/code\u003e\nfunction can't handle nested collections:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst numbers = [1, [2, [4, [5, [6]], 3]]];\u003cbr\u003e\u003cbr\u003eshallowIterator(numbers);\u003cbr\u003e// LOG: 1\u003cbr\u003e// LOG: [2, [4, [5, [6]], 3]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt's trained to iterate over the passed-in array's elements or object's\nproperties, but our function has no concept of \u003cem\u003edepth\u003c/em\u003e. When it tries to iterate\nover the above nested \u003ccode\u003enumbers\u003c/code\u003e array, it sees only two elements at the top\nlevel of the array: the number \u003ccode\u003e1\u003c/code\u003e and \u003cstrong\u003eanother\u003c/strong\u003e array, \u003ccode\u003e[2, [4, [5, [6]],\n3]]\u003c/code\u003e. It \u003ccode\u003econsole.log()\u003c/code\u003es out both of those elements and calls it a day, never\nrealizing that we also want it to print out the elements inside the nested\narray.\u003c/p\u003e\n\n\u003cp\u003eIt behaves similarly with objects. If we passed the nested version of \u003ccode\u003euserInfo\u003c/code\u003e\nto it, the values at the top level of the object (\"Avi\" and \"Flombaum\") would be\nlogged correctly, but for the \u003ccode\u003ecompany\u003c/code\u003e key, the object it points to would be\nlogged, and, for \u003ccode\u003efriends\u003c/code\u003e and \u003ccode\u003eprojects\u003c/code\u003e, arrays of objects would be logged.\nTry it out for yourself in the REPL.\u003c/p\u003e\n\n\u003cp\u003eLet's modify our function so that if it encounters a nested object or array, it\nwill additionally print out all of the data contained therein. We can do this\nusing an \u003ccode\u003eif\u003c/code\u003e condition and the \u003ccode\u003etypeof\u003c/code\u003e operator:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction shallowIterator(target) {\u003cbr\u003e  for (const key in target) {\u003cbr\u003e    if (typeof target[key] === 'object') {\u003cbr\u003e      for (const nestedKey in target[key]) {\u003cbr\u003e        console.log(target[key][nestedKey]);\u003cbr\u003e      }\u003cbr\u003e    } else {\u003cbr\u003e      console.log(target[key]);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eshallowIterator(numbers);\u003cbr\u003e// LOG: 1\u003cbr\u003e// LOG: 2\u003cbr\u003e// LOG: [4, [5, [6]], 3]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we've gone two levels deep, which gets us a bit closer to our goal. However,\nthere are two pretty clear drawbacks to this strategy:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWe'll have to add a new \u003ccode\u003efor...in\u003c/code\u003e statement for every level of nesting,\nquickly ballooning our function out to an unmanageable size.\u003c/li\u003e\n\u003cli\u003eSince we need to add a separate \u003ccode\u003efor...in\u003c/code\u003e statement for each additional\nlevel, we'll have to know exactly what the target structure looks like ahead\nof time and update our function accordingly. That's a lot of repetitive,\nerror-prone work, and it results in a function that can only be used for data\nwith that particular structure.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/looping-and-iteration/traversing-nested-objects-readme/no_there_has_to_be_another_way.gif\" alt=\"No! There has to be another way.\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eRecursion\u003c/h3\u003e\n\n\u003cp\u003eLucky for us, there \u003cstrong\u003eis\u003c/strong\u003e another way: recursion. It's one of the more powerful\nconcepts in programming, but it's also pretty hard to grasp at first. \u003cstrong\u003eDon't\nsweat it if it doesn't click immediately\u003c/strong\u003e. We'll introduce the concept here but\ncome back to it periodically throughout the rest of the JavaScript material.\nEssentially, \u003cstrong\u003ea recursive function is a function that calls itself\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at a better way to write our \u003ccode\u003eshallowIterator()\u003c/code\u003e to take\nadvantage of recursion:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen we invoke \u003ccode\u003edeepIterator()\u003c/code\u003e with an argument, the function first checks if\nthe argument is an object (recall that the \u003ccode\u003etypeof\u003c/code\u003e operator returns \u003ccode\u003e\"object\"\u003c/code\u003e\nfor arrays as well). If the argument \u003cstrong\u003eisn't\u003c/strong\u003e an object, \u003ccode\u003edeepIterator()\u003c/code\u003e\nsimply \u003ccode\u003econsole.log()\u003c/code\u003es out the argument and exits. However, if the argument\n\u003cstrong\u003eis\u003c/strong\u003e an object, we iterate over the properties (or elements) in the object,\npassing each to \u003ccode\u003edeepIterator()\u003c/code\u003e and \u003cstrong\u003ere-invoking the function\u003c/strong\u003e. That's\nrecursion!\u003c/p\u003e\n\n\u003cp\u003eLet's see it in action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst numbers = [1, [2, [4, [5, [6]], 3]]];\u003cbr\u003e\u003cbr\u003edeepIterator(numbers);\u003cbr\u003e// LOG: 1\u003cbr\u003e// LOG: 2\u003cbr\u003e// LOG: 4\u003cbr\u003e// LOG: 5\u003cbr\u003e// LOG: 6\u003cbr\u003e// LOG: 3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo help us see what's going on here let's use a REPL. Notice that, in the\nversion of the function in the REPL, we've added a \u003ccode\u003econsole.log()\u003c/code\u003e at the top of\nthe function that will log whatever argument was passed to our function. We've\nalso added a label to the second \u003ccode\u003econsole.log()\u003c/code\u003e so you can see the values that\nare getting logged from the \u003ccode\u003eelse\u003c/code\u003e statement. If you press the \"Run\" button, you\nwill see an \"Argument\" logged for each time the function is called. You will\nalso see a \"Logged value\" for each time the code in the \u003ccode\u003eelse\u003c/code\u003e executes.\nReferring to the output of the \u003ccode\u003econsole.log()\u003c/code\u003es, step through the function for\neach element to trace what's happening.\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/UprightWiryCopyleft?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eOur function also works with combinations of nested objects and arrays:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  company: {\u003cbr\u003e    name: 'Flatbook Labs',\u003cbr\u003e    jobTitle: 'Developer Apprentice'\u003cbr\u003e  },\u003cbr\u003e  friends: [{\u003cbr\u003e    firstName: 'Nancy',\u003cbr\u003e    lastName: 'Burgess',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Developer Apprentice'\u003cbr\u003e    }\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Corinna',\u003cbr\u003e    lastName: 'Jackson',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Lead Developer'\u003cbr\u003e    }\u003cbr\u003e  }],\u003cbr\u003e  projects: [{\u003cbr\u003e    title: 'Flatbook',\u003cbr\u003e    description: 'The premier Flatiron School-based social network in the world.'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    title: 'Scuber',\u003cbr\u003e    description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e  }]\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Lead Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo keep track of how many times our function is recursively invoking itself, it might be helpful to use a counter variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet counter = 0;\u003cbr\u003e\u003cbr\u003efunction deepIterator(target) {\u003cbr\u003e  counter++;\u003cbr\u003e\u003cbr\u003e  if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Lead Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\u003cbr\u003e\u003cbr\u003ecounter;\u003cbr\u003e//=\u0026gt; 26\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo we invoked \u003ccode\u003edeepIterator()\u003c/code\u003e once, and it invoked itself 25 additional times!\nIf we look closely at our nested \u003ccode\u003euserInfo\u003c/code\u003e object, we can see that it contains\ntwo arrays, seven nested objects, and sixteen key-value pairs where the value is\na string. Add those all up (2 + 7 + 16), and you get our 25 recursive\ninvocations! (If you're following along in the REPL, you can check the value of\n\u003ccode\u003ecounter\u003c/code\u003e in the terminal after running the code.)\u003c/p\u003e\n\n\u003ch2\u003eModifying our Program to Better Handle Arrays\u003c/h2\u003e\n\n\u003cp\u003eIn our \u003ccode\u003edeepIterator()\u003c/code\u003e function, we're using an \u003ccode\u003eif\u003c/code\u003e statement to evaluate the\nargument that's passed in. We do one thing if \u003ccode\u003etarget\u003c/code\u003e is an object and\nsomething else if it's not. Now we want to modify our function to handle one\nmore situation: when \u003ccode\u003etarget\u003c/code\u003e is an array. Doing this is a simple matter of\nadding an \u003ccode\u003eelse if\u003c/code\u003e to our \u003ccode\u003eif\u003c/code\u003e statement; its code block will execute \u003cstrong\u003eif\u003c/strong\u003e\n\u003ccode\u003etarget\u003c/code\u003e is an array.\u003c/p\u003e\n\n\u003cp\u003eWe can determine whether a variable is an array using an \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#static_methods\"\u003eArray Static\nMethod\u003c/a\u003e, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\"\u003e\u003ccode\u003eArray.isArray()\u003c/code\u003e\u003c/a\u003e. Let's use that in our new\ncondition. We'll also add a new \u003ccode\u003econsole.log()\u003c/code\u003e to verify that our code is\ncorrectly detecting the arrays (we've commented out the final \u003ccode\u003econsole.log()\u003c/code\u003e\nfor now):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else if (Array.isArray(target)) {\u003cbr\u003e    console.log(\"We found an array\");\u003cbr\u003e    // iterate through the array\u003cbr\u003e  } else {\u003cbr\u003e    // console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow if we run the code, we see ...nothing. For some reason, our code isn't\ndetecting the arrays. Remember that \u003cstrong\u003earrays are objects\u003c/strong\u003e, so our \u003ccode\u003eif\u003c/code\u003e\ncondition returns true for arrays as well as objects and the \u003ccode\u003eelse if\u003c/code\u003e never\nexecutes. We can fix this by reversing the order of our conditions. Let's also\nput the second \u003ccode\u003econsole.log()\u003c/code\u003e back in, and try running the code again.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (Array.isArray(target)) {\u003cbr\u003e    // iterate through the array\u003cbr\u003e    console.log(\"We found an array\");\u003cbr\u003e  } else if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: We found an array\u003cbr\u003e// LOG: We found an array\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMuch better! The logs are working for the primitive values and the non-array\nobject, so now we just need to code the body of our new \u003ccode\u003eif\u003c/code\u003e statement, using\n\u003ccode\u003efor...of\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (Array.isArray(target)) {\u003cbr\u003e    for (const element of target) {\u003cbr\u003e      deepIterator(element);\u003cbr\u003e    }\u003cbr\u003e  } else if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Lead Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhew!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThis is very advanced stuff, and you should absolutely not get discouraged if it\ndoesn't click at first. Create some other nested data structures and traverse\nover them with \u003ccode\u003eshallowIterator()\u003c/code\u003e and \u003ccode\u003edeepIterator()\u003c/code\u003e, noting the limitations\nof the former. Use the debugging tools available to you to get a handle on\nwhat's happening at each step of the process.\u003c/p\u003e\n\n\u003cp\u003eYou got this!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.microsoft.com/en-us/scripting/javascript/advanced/recursion-javascript\"\u003eMDN: Recursion (JavaScript)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f\"\u003efreeCodeCamp: Recursion in JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://javascript.info/debugging-chrome\"\u003eJavaScript.info: Debugging in Chrome\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"traversing-nested-objects"},{"id":243599,"title":"Survey - Working with Data Structures","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Working with Data Structures module?\u003c/p\u003e\n\u003c/div\u003e","exportId":"gced431eb0e426afe9405833f0e214f00"}]},{"id":16918,"name":"Manipulating the DOM","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gebee1a5bb03474b249588d48276e785f","items":[{"id":157881,"title":"Introduction to the DOM","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify the Document Object Model (DOM)\u003c/li\u003e \u003cli\u003eExplain how the DOM is created\u003c/li\u003e \u003cli\u003eIdentify the DOM as accessed by JavaScript objects\u003c/li\u003e \u003cli\u003eIntroduce the Console and Chrome DevTools\u003c/li\u003e \u003cli\u003eLearn how to open HTML files in the browser\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe have learned how to write HTML and style it with CSS. We have also built our JavaScript programming skills. With this knowledge, we're now ready to learn \u003cstrong\u003eDocument_Object Model (DOM) programming\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eDOM programming consists of using JavaScript to:\u003c/p\u003e  \u003col\u003e \u003cli\u003eAsk the DOM to find or select an HTML element or elements in the rendered page\u003c/li\u003e \u003cli\u003eRemove and/or insert one or more elements\u003c/li\u003e \u003cli\u003eAdjust a property of selected element(s)\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIn other words, we can use DOM programming to create and modify content that users see in their browsers and add interactivity to our web pages.\u003c/p\u003e  \u003ch2\u003eIdentify the Document Object Model\u003c/h2\u003e  \u003cp\u003eLet's start with a biology metaphor. Your DNA represents a code-based version of \u003cem\u003eyou\u003c/em\u003e. The DOM represents a code-based version of \u003cem\u003ea web page\u003c/em\u003e. If something edits your DNA, changes will be made in your body (perhaps giving you mutant powers). Similarly, when you change something in the DOM, you change what's displayed in the browser.\u003c/p\u003e  \u003cp\u003eBut what exactly \u003cstrong\u003e\u003cem\u003eis\u003c/em\u003e\u003c/strong\u003e the DOM? You can think of it as a \"middle layer\" between the user and the underlying HTML, CSS, and JavaScript that makes up the page. What the user is actually seeing on the page is the DOM. When the page initially loads, the DOM represents the underlying HTML, CSS and JavaScript. When we use JavaScript and DOM programming to modify the DOM and change what the user sees, the underlying code is not modified: if we refresh the page, it goes back to its original state.\u003c/p\u003e  \u003ch3\u003eExplain How the DOM Is Created\u003c/h3\u003e  \u003cp\u003eThe DOM is created when the page loads from the HTML/CSS/JavaScript that the web server provides to the browser. Let's examine this process step-by-step:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: To ensure that instructions and screenshots match up with your experience, be sure to use the \u003ca href=\"https://www.google.com/chrome/browser/desktop/index.html\"\u003eGoogle Chrome\u003c/a\u003e browser.\u003c/p\u003e \u003c/blockquote\u003e  \u003col\u003e \u003cli\u003eIn Google Chrome, open a tab and navigate to the \u003ca href=\"https://en.wikipedia.org/wiki/Ada_Lovelace\"\u003eWikipedia page for Ada Lovelace\u003c/a\u003e.\u003c/li\u003e \u003cli\u003eTo see the HTML of this page, add \u003ccode\u003eview-source:\u003c/code\u003e to the front of the URL in the URL bar. Using the \u003ccode\u003eview-source\u003c/code\u003e URL prefix will display all the page's source HTML. It will look something like this: \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/intro-to-the-dom/html-source.png\" alt=\"html-source\"\u003e\n\u003c/li\u003e \u003cli\u003eThe browser reads this HTML, along with CSS and JavaScript defined in \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tags, to create the DOM inside the browser. At this point, nothing is displayed on the screen. This time when nothing is displayed is very brief so our human eyes never really catch it.\u003c/li\u003e \u003cli\u003eThe browser then uses the DOM object to create the rendered page. While we often learn that browsers \"display HTML,\" that's not exactly accurate. Browsers use the HTML to create a \"middleman\" that they, in turn, use to display the structured and styled content.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eIdentify the DOM as Accessed by JavaScript Objects\u003c/h3\u003e  \u003cp\u003eWe can access the DOM, using JavaScript and DOM programming, through two \u003cem\u003evariables\u003c/em\u003e: \u003ccode\u003ewindow\u003c/code\u003e and \u003ccode\u003edocument\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003ewindow\u003c/code\u003e variable points to an \u003cem\u003eobject\u003c/em\u003e that represents Chrome's information about the browser, well, \"window.\" It has many functions, but the main one is \"it's a place where everything is.\" Not to be Zen here, but a browser without a \u003ccode\u003ewindow\u003c/code\u003e is like the universe before the Big Bang; there's just... \u003cem\u003enothing\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eLike all objects, the \u003ccode\u003ewindow\u003c/code\u003e has properties and methods. For example, we can access operating system browser information like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewindow.innerHeight;\u003cbr\u003e// returns the inner height of the browser window. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFor the most part, we won't interact with \u003ccode\u003ewindow\u003c/code\u003e: we don't want to mess with the container of everything or with operating system stuff. We want, rather, to change content. To do that, we'll focus on an object called \u003ccode\u003edocument\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eAs an \u003cem\u003eobject\u003c/em\u003e, \u003ccode\u003edocument\u003c/code\u003e has \u003cem\u003eproperties\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.URL; //=\u0026gt; https://en.wikipedia.org/wiki/Ada_Lovelace \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs an \u003cem\u003eobject\u003c/em\u003e, \u003ccode\u003edocument\u003c/code\u003e also has \u003cem\u003emethods\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.querySelector(\"h1\"); //=\u0026gt; Returns the element on the page with an id attribute equal to \"firstHeading\"  \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cem\u003emethods\u003c/em\u003e and \u003cem\u003eproperties\u003c/em\u003e that the DOM provides via its objects is called the DOM's \"Application Programming Interface,\" or \"API.\" It's just a programming word that you're likely to see online. But it just means \"the things that these objects know how to do.\"\u003c/p\u003e  \u003ch2\u003eThe Browser Console and Chrome Developer Tools\u003c/h2\u003e  \u003cp\u003eEvery major browser comes with a built-in set of developer tools that you can use to inspect, modify, and debug the content of a web page. To \u003ca href=\"https://developers.google.com/web/tools/chrome-devtools/console/#open_as_panel\"\u003eopen the dev tools in Chrome\u003c/a\u003e, press \u003ccode\u003eCtrl+Shift+J\u003c/code\u003e (Windows / Linux) or \u003ccode\u003eCmd+Opt+J\u003c/code\u003e (Mac). Chrome ships with a whole suite of useful developer tools, but the only one we care about for now is the JavaScript console.\u003c/p\u003e  \u003cp\u003eThe console is an environment in the browser where we can type and run JavaScript code in the context of the current browser window. The console is \u003cem\u003esandboxed\u003c/em\u003e, meaning the only resources it has access to are those loaded on the current page. Once we start declaring variables and functions in separate JavaScript files, we'll be able to access and play around with them in the console. The console is the single best tool for debugging JavaScript in the browser, so start familiarizing yourself with it now.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003eCtrl+Shift+J\u003c/code\u003e / \u003ccode\u003eCmd+Opt+J\u003c/code\u003e command should open up straight into the console. If for whatever reason, it doesn't, you can always click on \u003ccode\u003eConsole\u003c/code\u003e in the dropdown (when the DevTools are collapsed) or in the list of tabs:\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/opening_the_console.gif\" alt=\"Opening the console\"\u003e \u003c/p\u003e  \u003cp\u003eIf at any point the console becomes cluttered with errors, warnings, or anything else, click the \u003ccode\u003eClear console\u003c/code\u003e button:\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/clearing_the_console.gif\" alt=\"Clearing the console\"\u003e \u003c/p\u003e  \u003cp\u003eOkay, okay, enough background and setup. Let's write some code!\u003c/p\u003e  \u003ch3\u003eCoding in the Console\u003c/h3\u003e  \u003cp\u003eYou can write and test out JavaScript code in the console. We'll start off with some simple math. In the console, type \u003ccode\u003e1 + 1\u003c/code\u003e and press enter. You should see the number \u003ccode\u003e2\u003c/code\u003e appear.\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/math_in_console.gif\" alt=\"Math in the console\"\u003e \u003c/p\u003e  \u003cp\u003eTry out some other mathematical expressions and see what they return.\u003c/p\u003e  \u003cp\u003eNext up, let's write some text. To make sure the JavaScript engine knows that we're trying to write some literal text, we need to wrap it in quotation marks, like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\"This is some literal text in JavaScript!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGo ahead and type that classic phrase, \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e, into the console and press enter. It returned \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e right back to us. Try typing some more literal text into the console, such as your name. Don't forget the quotation marks!\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/text_in_console_300.gif\" alt=\"Text in the console\"\u003e\u003c/p\u003e  \u003cp\u003eWe can go far beyond simple literal expressions: we can create variables, loops, or if statements in the console. We can even define and run functions!\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It's impossible to overstate how important practice is when you're learning a new programming language. As you continue moving through the JavaScript curriculum, you should almost always have a browser console open. Code along with every example. Get used to the syntax and familiarize yourself with the errors that arise when you mistype something. Clear the console or simply refresh the page whenever you need a clean slate. Code, code, code, \u003cstrong\u003ecode\u003c/strong\u003e, \u003cstrong\u003e\u003cem\u003ecode\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eOpening Files in the Browser\u003c/h2\u003e  \u003cp\u003eIn this section, you will begin working with HTML files (most often, \u003ccode\u003eindex.html\u003c/code\u003e). In order to view the results of the coding you'll be doing, you'll need to open the file in the browser. Instructions for each programming environment are as follows:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eLocal environment on Mac\u003c/strong\u003e: Run \u003ccode\u003eopen index.html\u003c/code\u003e in the terminal.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eLocal environment using WSL/Ubuntu\u003c/strong\u003e: Run \u003ccode\u003eexplorer.exe index.html\u003c/code\u003e in the terminal.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eAWS IDE\u003c/strong\u003e: right-click on the \u003ccode\u003eindex.html\u003c/code\u003e file in the file tree and select \"Preview.\" There will be a button in the upper right corner that will \"pop\" the page into a new tab in the browser.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eKeep these instructions handy — you will be doing this often.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e In order for these instructions to work, you will need to have Google Chrome set as your default browser. You can find \u003ca href=\"https://support.google.com/chrome/answer/95417?hl=en\u0026amp;co=GENIE.Platform=Desktop\"\u003einstructions for Mac and Windows here\u003c/a\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson we learned about the DOM, which is a \"middle layer\" that presents the HTML, CSS and JavaScript loaded by the browser when we visit a page. We normally interact with it through the \u003ccode\u003edocument\u003c/code\u003e object. Because it is the \"source of truth\" for what browsers display, changes to the DOM create changes in the browser screen. We also learned how to access the Chrome Developer Tools and use the Console to try out code as we're building our programs.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://css-tricks.com/dom/\"\u003eCSS Tricks - What is the DOM?\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\"\u003eMDN - The DOM\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"introduction-to-the-dom"},{"id":157882,"title":"DOM Editing Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-editing-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIdentify that DOM nodes are written as HTML\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eWe've started looking at the DOM and how it's created. Now it's time to see its structure.\u003c/p\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eIdentify That DOM Nodes Are Written As HTML\u003c/h2\u003e\n\u003cp\u003eIn the previous lesson, we learned that, when we load a web page in a browser, the content we see in the DOM is a representation of the underlying HTML, CSS and JavaScript. If we were to view the DOM in Chrome Dev Tools (we'll learn how to do that shortly), we would see HTML that is a clone of the HTML found in the source HTML file. As we learned earlier in the course, that HTML consists of \u003cem\u003eelements\u003c/em\u003e that in turn consist of HTML \u003cem\u003etags\u003c/em\u003e and their content.\u003c/p\u003e\n\u003cp\u003eWhen we're working in the DOM, the structure is the same. We can access objects in the DOM (called \u003cem\u003enodes\u003c/em\u003e) that consist of tags, just like the HTML elements that make up the base HTML. Nodes and elements are not the same thing — all elements in the DOM are nodes but not all nodes are HTML elements. However, when we're working in the DOM, the nodes we access and modify are virtually always HTML elements.\u003c/p\u003e\n\u003ch3\u003eThe Structure of DOM Content\u003c/h3\u003e\n\u003cp\u003eWe'll start by going over how content in the DOM is structured using nodes. The information below should be familiar from what you've learned about HTML elements.\u003c/p\u003e\n\u003cp\u003eDOM nodes most often have a starting tag and an ending tag. Examples include a paragraph:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;I am a paragraph.\u0026lt;/p\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eor a \u003ccode\u003emain\u003c/code\u003e section:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;main\u0026gt;\u003cbr\u003e\u0026lt;/main\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause they have both starting and ending tags, we can nest other nodes inside them. The inner node is called a child node, and the outer node is called a parent node. To nest items, we simply add the child node and its content between its parent's starting and ending tags:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;main\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;I am a nested paragraph, inside the main element, inside the body!\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/main\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSome nodes only have a starting tag. Those are called \u003cem\u003eself-closing elements\u003c/em\u003e or \u003cem\u003evoid elements\u003c/em\u003e. Void elements do not have any content nested inside of them and cannot be parent nodes.\u003c/p\u003e\n\u003cp\u003eAn example of a self-closing tag is an image:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\" alt=\"A policeman\"\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn self-closing tags, the trailing \u003ccode\u003e/\u003c/code\u003e is optional. This is valid too:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\" alt=\"A policeman\" /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEnough review, let's write some HTML!\u003c/p\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eStart by running the tests and taking a look through the errors. You'll see that the tests are looking for certain content to be present in the HTML file.\u003c/p\u003e\n\u003cp\u003eNext, open the \u003ccode\u003eindex.html\u003c/code\u003e file in the browser using the instructions in the previous lesson for your development environment.\u003c/p\u003e\n\u003cp\u003eJust to speed things up a bit, paste the following code into \u003ccode\u003eindex.html\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html lang=\"en\"\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;meta charset=\"UTF-8\"\u0026gt;\u003cbr\u003e    \u0026lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u0026gt;\u003cbr\u003e    \u0026lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;Introduction to the DOM Lab\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;!--All our work for this lesson will go here--\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRefresh the browser page to see the changes.\u003c/p\u003e\n\u003cp\u003eOpen the Google Developer Tools by clicking on the \"View\" menu and selecting Developer -\u0026gt; Developer Tools. The Elements tab should be selected but, if it isn't, click on it. Here we have the DOM representation of the HTML source loaded by the browser. You should see the \u003ccode\u003ehead\u003c/code\u003e and \u003ccode\u003ebody\u003c/code\u003e elements nested inside the \u003ccode\u003ehtml\u003c/code\u003e element. If the \u003ccode\u003ebody\u003c/code\u003e element is collapsed, use the disclosure triangle to expand it. You should see that the \u003ccode\u003ebody\u003c/code\u003e element is, temporarily, child-less. Let's go ahead and start adding some content in \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cblockquote\u003eNote: the \u003cem\u003edisclosure triangle\u003c/em\u003e is the triangle to the left of the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e tag. When you first open the Elements tab, the nodes are generally collapsed, hiding their contents. You can click the triangle to expand the node and see its contents. Disclosure triangles are standard for hiding information throughout Chrome DevTools. If you want to see more, feel free to click on the triangle! You're not going to break anything.\u003c/blockquote\u003e\n\u003cp\u003eFirst, let's add a title to our page:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;My HTML adventure\u0026lt;/h1\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRefresh the page to see the changes displayed in the browser. If you view the Elements tab again, you should see that a new child node is nested inside the \u003ccode\u003ebody\u003c/code\u003e. Finally, run the tests again; the first test should now be passing.\u003c/p\u003e\n\u003cp\u003eNext, we'll add a paragraph below the title. We'll also add some highlighted bits of text to the paragraph to make it stand out a little.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003cbr\u003e  We're writing HTML markup to display in our \u0026lt;strong\u0026gt;browser\u0026lt;/strong\u0026gt;.\u003cbr\u003e  We're basically telling computers what to do. \u0026lt;em\u0026gt;Neat!\u0026lt;/em\u0026gt;\u003cbr\u003e\u0026lt;/p\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSave the file and check out the page in the 'Elements' tab. What's happening above is that we added some inline elements, \u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e to our paragraph to style things a little. The \u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e tag makes any text within look \u003cstrong\u003eimportant\u003c/strong\u003e. It's usually bold in browsers by default. The \u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e tag allows us to \u003cem\u003eemphasize\u003c/em\u003e certain text. This text is typically rendered as italic in browsers.\u003c/p\u003e\n\u003cp\u003eRun the tests again; you should now have all but two of the tests passing.\u003c/p\u003e\n\u003cp\u003eLet's add a link to MDN to define HTML. We'll use the\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag for this. Add this to our existing \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWe're writing \u0026lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\"\u0026gt;HTML\u0026lt;/a\u0026gt; markup to display in our \u0026lt;strong\u0026gt;browser\u0026lt;/strong\u0026gt;.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that HTML attributes (in this case, the \u003ccode\u003ehref\u003c/code\u003e attribute) are shown alongside their opening tag.\u003c/p\u003e\n\u003cp\u003eLastly, we'll add a table below the paragraph to recap some of the stuff in this lesson:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u003cbr\u003e  \u0026lt;thead\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;th\u0026gt;Element name\u0026lt;/th\u0026gt;\u003cbr\u003e      \u0026lt;th\u0026gt;Display value\u0026lt;/th\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;/thead\u0026gt;\u003cbr\u003e  \u0026lt;tbody\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;h1\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;block\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;p\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;block\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;strong\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;inline\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;em\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;inline\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;/tbody\u0026gt;\u003cbr\u003e\u0026lt;/table\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWoah. That's a \u003cstrong\u003elot\u003c/strong\u003e of markup! If you take a look at the result, though, you'll see that it's a fairly complex visual — it's a table! Our table consists of a header and a body. The header allows us to give the columns a name, and the table body contains the rows of content. Both \u003ccode\u003e\u0026lt;thead\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;tbody\u0026gt;\u003c/code\u003e tags contains rows, which are represented as \u003ccode\u003e\u0026lt;tr\u0026gt;\u003c/code\u003e (table row). These rows then contain cells which form the table's columns. In the \u003ccode\u003e\u0026lt;thead\u0026gt;\u003c/code\u003e row, cells are represented as \u003ccode\u003e\u0026lt;th\u0026gt;\u003c/code\u003e, while cells in \u003ccode\u003e\u0026lt;tbody\u0026gt;\u003c/code\u003e have their content in \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e tags.\u003c/p\u003e\n\u003cp\u003eThat's a \u003cem\u003elot\u003c/em\u003e of nesting.\u003c/p\u003e\n\u003cp\u003eLook again at the Elements tab. Expand out all the children of the \u003ccode\u003etable\u003c/code\u003e. This is the DOM tree!\u003c/p\u003e\n\u003cp\u003eWhen you're done, go ahead and run the tests. They should now all be passing.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e","exportId":"g2c641a4ff71ec694fc16158be8b93242"},{"id":157883,"title":"Changing The DOM with DevTools and JavaScript","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-dev-tools\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-dev-tools\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-dev-tools/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDemonstrate viewing the DOM through Chrome DevTools\u003c/li\u003e \u003cli\u003eSelect an element with Chrome DevTools\u003c/li\u003e \u003cli\u003eDelete an element with Chrome DevTools\u003c/li\u003e \u003cli\u003eDemonstrate that the source is not changed when the DOM is\u003c/li\u003e \u003cli\u003eDemonstrate opening the DevTools' JavaScript console\u003c/li\u003e \u003cli\u003eSelect an element with JavaScript\u003c/li\u003e \u003cli\u003eDelete an element with JavaScript\u003c/li\u003e \u003cli\u003eStoring node references in variables\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've read that updating the DOM will update the browser's rendered page. Let's try this out. We're going to change the DOM in two ways. First, we'll use Chrome's Developer Tools (\"DevTools\") and our mouse to remove an element from the DOM. Then we'll use the DevTools' JavaScript console to run JavaScript that does the same thing.\u003c/p\u003e  \u003ch2\u003eDemonstrate Viewing the DOM Through Chrome DevTools\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/ada-wiki.png\" alt=\"ada-wiki\"\u003e\u003c/p\u003e  \u003cp\u003eLet's head back to the \u003ca href=\"https://en.wikipedia.org/wiki/Ada_Lovelace\"\u003eWikipedia page for Ada Lovelace\u003c/a\u003e. From this web page, look at the Chrome menu bar at the top of the page. Click on \"View\", then select \"Developer\", then \"Developer Tools.\" This will open the Google Developer Tools. Click on the \"Elements\" tab. Here we see the DOM representation of the HTML source that was loaded into the browser.\u003c/p\u003e  \u003ch3\u003eSelect an Element With Chrome DevTools\u003c/h3\u003e  \u003cp\u003eScroll through the Elements panel. You will see some HTML: \u003ccode\u003ehead\u003c/code\u003e tags, \u003ccode\u003ebody\u003c/code\u003e tags, \u003ccode\u003ediv\u003c/code\u003es, etc. If the \u003ccode\u003ebody\u003c/code\u003e element is collapsed, use the disclosure triangle to expand it. Notice that you can mouse over different elements in the Elements panel and see them highlighted in the browser window. Locate the \u003ccode\u003ediv\u003c/code\u003e nested inside \u003ccode\u003ebody\u003c/code\u003e that has an \u003ccode\u003eid\u003c/code\u003e attribute of \"content\" and expand that as well.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/content-element.png\" alt=\"content-element\"\u003e\u003c/p\u003e  \u003cp\u003eNext, locate the \u003ccode\u003eh1\u003c/code\u003e element nested inside the \"content\" div. It should look something like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/h1-element.png\" alt=\"h1-element\"\u003e\u003c/p\u003e  \u003cp\u003eClick on the \u003ccode\u003eh1\u003c/code\u003e element; you'll see that it's highlighted in the Elements panel. You've now selected an element with the DevTools.\u003c/p\u003e  \u003ch3\u003eDelete an Element With Chrome DevTools\u003c/h3\u003e  \u003cp\u003ePress the delete button on your keyboard. The element will vanish from the browser's rendered page.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/deleted-header.png\" alt=\"deleted-header\"\u003e\u003c/p\u003e  \u003ch3\u003eDemonstrate That the Source is Not Changed When the DOM Is\u003c/h3\u003e  \u003cp\u003eView the page source. In the Chrome menu bar, click on \"View\", then select \"Developer\", then \"View Source.\" You will see that the HTML is just as it always was, with the deleted element still present.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/html-source.png\" alt=\"html-source\"\u003e\u003c/p\u003e  \u003cp\u003eThe changes in the DOM do not affect the HTML file on the server. When you think about it, that makes sense. If that were true then anyone could be changing carefully-written HTML. (Of course, in the case of Wikipedia, people \u003cem\u003ecan\u003c/em\u003e edit the content using Wikipedia's editor, but they aren't directly accessing the underlying HTML.)\u003c/p\u003e  \u003cp\u003eThe HTML, which lives on the server, \u003cstrong\u003eis unchanged\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eRefresh the page by going to \"View\" and choosing \"Reload this Page.\" You will be reloading the DOM \u003cem\u003efrom the source\u003c/em\u003e. The page content will come back.\u003c/p\u003e  \u003ch3\u003eDemonstrate Opening the DevTools' JavaScript Console\u003c/h3\u003e  \u003cp\u003eAbove, we deleted an element by selecting it in the DevTools and pressing the delete key. We can accomplish the same thing using JavaScript.\u003c/p\u003e  \u003cp\u003eIn DevTools, click the \u003cstrong\u003eConsole\u003c/strong\u003e tab. At the prompt, type the word \u003ccode\u003edocument\u003c/code\u003e and press \"Enter.\" You'll get a \u003ccode\u003e#document\u003c/code\u003e returned. If you hover your mouse over the element, you'll see the entire page highlighted in the browser window. If you expand it, you'll see that it's the exact HTML that you saw in the \u003cstrong\u003eElements\u003c/strong\u003e tab.\u003c/p\u003e  \u003cp\u003eRecall that \u003ccode\u003edocument\u003c/code\u003e is an \u003ccode\u003eobject\u003c/code\u003e; as such, it has properties and \u003ccode\u003emethods\u003c/code\u003e, including a number of different methods that can be used to return elements. Let's find or \u003ccode\u003eselect\u003c/code\u003e an element by speaking JavaScript with the DOM.\u003c/p\u003e  \u003ch3\u003eSelect an Element With JavaScript\u003c/h3\u003e  \u003cp\u003eIn the \u003cstrong\u003eConsole\u003c/strong\u003e type:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  document.querySelector('h1'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will return something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\"\u0026gt;...\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGo ahead and click on that disclosure triangle to see more.\u003c/p\u003e  \u003cp\u003eThe return value of \u003ccode\u003edocument.querySelector('h1');\u003c/code\u003e is the DOM node, which is also a JavaScript \u003ccode\u003eobject\u003c/code\u003e. This means that it, in turn, can have methods called on it! This is called \u003cem\u003emethod chaining\u003c/em\u003e. Let's use \u003cem\u003emethod chaining\u003c/em\u003e to remove our node from the DOM.\u003c/p\u003e  \u003ch3\u003eDelete an Element with JavaScript\u003c/h3\u003e  \u003cp\u003eNow type:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  document.querySelector('h1').remove(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe heading is gone! We called \u003ccode\u003edocument.querySelector('h1')\u003c/code\u003e to get the node; we then used \u003cem\u003emethod chaining\u003c/em\u003e to call the \u003ccode\u003eremove()\u003c/code\u003e method on the node object. We use dot notation to \u003cem\u003echain\u003c/em\u003e the calls.\u003c/p\u003e  \u003cp\u003eFollow the same process we used earlier to verify that the source has not changed. To restore it, simply refresh the page (i.e. reload the DOM).\u003c/p\u003e  \u003ch3\u003eStoring Node References in Variables\u003c/h3\u003e  \u003cp\u003eQuery methods like \u003ccode\u003equerySelector()\u003c/code\u003e and the other methods we'll be learning about are expressions: they return a value (specifically, a DOM node). As such, we can save the results of the query into a variable. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst header = document.querySelector('h1'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe now have a reference to that node with a meaningful name; we can simply use \u003ccode\u003eheader\u003c/code\u003e any time we need to refer to our node, rather than always having to look it up with \u003ccode\u003edocument.querySelector()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eYou can perhaps imagine how, if we have a program that selects, creates, modifies, or removes a large number of nodes, using this approach will result in code that's easier to read, debug and maintain.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eDOM programming is using JavaScript to:\u003c/p\u003e  \u003col\u003e \u003cli\u003eAsk the DOM to find or \u003ccode\u003eselect\u003c/code\u003e an HTML element or elements in the rendered page\u003c/li\u003e \u003cli\u003eRemove the selected element(s) and/or insert new element(s)\u003c/li\u003e \u003cli\u003eAdjust a property of the selected element(s)\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIn this lesson you just did all that stuff! Learning to duplicate what you can do in DevTools with JavaScript \u003cstrong\u003e\u003cem\u003eis\u003c/em\u003e\u003c/strong\u003e DOM programming. The next lessons are going to give you more methods for selecting elements and changing them, but you just changed the DOM. High fives are in order.\u003c/p\u003e","exportId":"changing-the-dom-with-devtools-and-javascript"},{"id":157884,"title":"The DOM Is a Tree","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-is-a-tree\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-is-a-tree/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-is-a-tree\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-is-a-tree/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe how the DOM works as a tree\u003c/li\u003e\n\u003cli\u003eDefine the computer science version of \"Tree\"\u003c/li\u003e\n\u003cli\u003eAsk the DOM to find or \"select\" an HTML element or elements in the rendered\npage\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eDOM programming is using JavaScript to:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAsk the DOM to find an HTML element or elements in the rendered page\u003c/li\u003e\n\u003cli\u003eRemove the selected element(s) or add a new element next to the selected\nelement\u003c/li\u003e\n\u003cli\u003eAdjust a property of the selected element(s)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn previous lessons we were given the command to find the HTML element we\nwanted:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.querySelector(selector)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003cem\u003eselector\u003c/em\u003e is like a query string that lets us find things within an HTML\npage. What is the syntax of this \u003cem\u003eselector\u003c/em\u003e? How does the \u003cem\u003eselector\u003c/em\u003e navigate\nthrough our document to find the DOM nodes that we want to work with (update,\nmove, even delete!)?\u003c/p\u003e\n\n\u003cp\u003eTo understand those queries or \u003cem\u003eselectors\u003c/em\u003e, we first need to talk about how the\nDOM tree (i.e. what we see in the 'Elements' panel of our DevTools) is used to\nhelp the DOM's \u003ccode\u003emethods\u003c/code\u003e find the right nodes.\u003c/p\u003e\n\n\u003ch3\u003eDefine the Computer Science Version of \"Tree\"\u003c/h3\u003e\n\n\u003cp\u003eWhat do we mean when we say that the DOM is a tree? Trees make a good metaphor\nfor the DOM because almost everyone has seen a tree. Starting at the bottom, you\ncan climb up the tree and out to the farthest — and smallest —\nbranches. The thicker a branch is, the stronger its connections are and the more\nit holds within it. Likewise, the thinner a branch is, the less it holds inside.\u003c/p\u003e\n\n\u003cp\u003eThe DOM works basically the same way, except we usually talk about the root as\nbeing at the top of the DOM and the leaves being the most deeply nested HTML\nelements. So basically, we can imagine a tree upside down.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-the-dom-tree/Image_6_DomTree.png\" alt=\"DOM Tree Graphic\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe HTML for this \"tree\" would be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE HTML\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;My Title\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;A heading\u0026lt;/h1\u0026gt;\u0026lt;a href=\"http://example.com\"\u0026gt;Link text\u0026lt;/a\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eDescribe How the DOM Works as a Tree\u003c/h3\u003e\n\n\u003cp\u003eEvery tree can contain subtrees, which we can treat independently of their\nparent trees. They repeat the pattern and appearance of the full tree, despite\nbeing a smaller part of a tree, like branches. Every child has experienced this\nsense of wonder when they take a fallen branch and stick it in the ground and\nthink that they've planted their own tree.\u003c/p\u003e\n\n\u003cp\u003ePractically speaking, the DOM begins at \u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e, but for now we should avoid\nchanging what's between the \u003ccode\u003e\u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;\u003c/code\u003e tags. Most of the time, we will look\nat the DOM subtree with its root at \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e and only change things that will be\nvisible on the page. We might also deal with subtrees. For example, if we have\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Hi!\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Bye!\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur tree looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e        body\u003cbr\u003e        /  \\\u003cbr\u003e      div   div\u003cbr\u003e      /      \\\u003cbr\u003e     p        p\u003cbr\u003e    /          \\\u003cbr\u003e \"Hi!\"        \"Bye!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSimilarly, if we had a DOM subtree that looked like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Hello!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;h5\u0026gt;Sup?\u0026lt;/h5\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe tree would look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e         div\u003cbr\u003e        /  \\\u003cbr\u003e      div   div\u003cbr\u003e      /      \\\u003cbr\u003e    h1        h5\u003cbr\u003e    /          \\\u003cbr\u003e \"Hello!\"     \"Sup?\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eAsk the DOM to Find or \"select\" an HTML Element or Elements in the Rendered Page\u003c/h3\u003e\n\n\u003cp\u003eIn creating the HTML for a page, including \u003cem\u003emetadata\u003c/em\u003e for a node (e.g., a \u003ccode\u003eclass\u003c/code\u003e\nor \u003ccode\u003eid\u003c/code\u003e attribute) will not only provide useful information about that node, but\nwill also make it and its children easier to find. The more specific the\nmetadata is, the more helpful it is for finding the desired element.\u003c/p\u003e\n\n\u003cp\u003eFor the following exercises, you can experiment with any web page you like. It's\nfun to change \u003cem\u003eThe New York Times\u003c/em\u003e or Facebook.\u003c/p\u003e\n\n\u003ch4\u003eFinding a Node\u003c/h4\u003e\n\n\u003cp\u003eJavaScript exposes a few ways of finding DOM nodes, either directly or in\nstages, courtesy of the \u003ccode\u003edocument\u003c/code\u003e object. We will introduce three here, in\norder from most to least specific: \u003ccode\u003egetElementByID()\u003c/code\u003e,\n\u003ccode\u003egetElementsByClassName()\u003c/code\u003e, and \u003ccode\u003egetElementsByTagName()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003edocument.getElementById()\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis method provides the quickest access to a node, but it requires that we know\na very specific piece of information — its \u003ccode\u003eid\u003c/code\u003e. This method can only\nreturn one element, since CSS \u003ccode\u003eid\u003c/code\u003es are expected to be unique.\u003c/p\u003e\n\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;h5 id=\"greeting\"\u0026gt;Hello!\u0026lt;/h5\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could find the \u003ccode\u003eh5\u003c/code\u003e element with \u003ccode\u003edocument.getElementById('greeting')\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNotice how the \u003ccode\u003eid\u003c/code\u003e that we pass to \u003ccode\u003egetElementById\u003c/code\u003e is identical to the \u003ccode\u003eid\u003c/code\u003e in\n\u003ccode\u003e\u0026lt;h5 id=\"greeting\"\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can use either single(\u003ccode\u003e''\u003c/code\u003e) or double(\u003ccode\u003e\"\"\u003c/code\u003e) quotes around the \u003ccode\u003eid\u003c/code\u003e\nwithin the parentheses in \u003ccode\u003edocument.getElementById('yourIDGoesHere')\u003c/code\u003e, as long\nas you use the same kind to open and close them!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eOpen up your DevTools and find an element on the page that has an \u003ccode\u003eid\u003c/code\u003e\nattribute. Then open up your console, type\n\u003ccode\u003edocument.getElementById('theIdOfTheElement')\u003c/code\u003e, and check out your handy-dandy\nDOM node.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis one is also very commonly used in DOM programming.\u003c/p\u003e\n\n\u003cp\u003eThis method finds elements by their \u003ccode\u003eclassName\u003c/code\u003e. Unlike the previous method,\nclass names do not need to be unique, so this method returns an \u003ccode\u003eHTMLCollection\u003c/code\u003e\nof all the elements with the given class. An \u003ccode\u003eHTMLCollection\u003c/code\u003e is an array-like\nstructure containing a list of elements. You can iterate over an\n\u003ccode\u003eHTMLCollection\u003c/code\u003e with a simple \u003ccode\u003efor\u003c/code\u003e loop.\u003c/p\u003e\n\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- the `className` attribute is called `class` in HTML  --\u0026gt;\u003cbr\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;div class=\"banner\"\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Hello!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div class=\"banner\"\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Sup?\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div class=\"banner\"\u0026gt;\u003cbr\u003e    \u0026lt;h5\u0026gt;Tinier heading\u0026lt;/h5\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could find all of the elements with the class name \"banner\" by calling\n\u003ccode\u003edocument.getElementsByClassName('banner')\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eInspect your web page again, this time making note of a \u003ccode\u003eclass\u003c/code\u003e. Get all\nelements with that \u003ccode\u003eclass\u003c/code\u003e and give 'em a look. On the returned object you can\nuse the \u003ccode\u003e.length\u003c/code\u003e property to find out how many came back.\u003c/p\u003e\n\n\u003cp\u003eIf you recall the \u003ccode\u003efor\u003c/code\u003e loop syntax you might try to write a loop which prints\nout the \u003ccode\u003einnerHTML\u003c/code\u003e property of every element in the collection. You might find\ndoing so much easier if you save the results of\n\u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e to a variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst elements = document.getElementsByClassName('yourClassNameHere');\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\u003ccode\u003edocument.getElementsByTagName()\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eYou can use this method if you \u003cem\u003edon't\u003c/em\u003e know an element's \u003ccode\u003eid\u003c/code\u003e or \u003ccode\u003eclass\u003c/code\u003e, but\nyou \u003cem\u003edo\u003c/em\u003e know its tag name (the tag name is the thing between the \u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e, e.g.,\n\u003ccode\u003e'div'\u003c/code\u003e, \u003ccode\u003e'h1'\u003c/code\u003e, \u003ccode\u003eheader\u003c/code\u003e, \u003ccode\u003earticle\u003c/code\u003e etc.).  Since tag names aren't unique, this\nmethod also returns an \u003ccode\u003eHTMLCollection\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eExplore the DOM in the console by typing \u003ccode\u003edocument.getElementsByTagName('div')\u003c/code\u003e.\nYou can iterate through these elements using a simple \u003ccode\u003efor\u003c/code\u003e loop as well.\u003c/p\u003e\n\n\u003ch4\u003eFinding a Node Without Knowing Anything About It\u003c/h4\u003e\n\n\u003cp\u003eWhat if we don't have an \u003ccode\u003eid\u003c/code\u003e or \u003ccode\u003eclassName\u003c/code\u003e to help us find a particular\nelement? This is where our knowledge of trees comes in handy!\u003c/p\u003e\n\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;main\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/main\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow would we go about changing only the second \"Hello!\" to \"Goodbye!\"?\u003c/p\u003e\n\n\u003cp\u003eHere we're going to use a mix of different \u003ccode\u003emethods\u003c/code\u003e to accomplish the goal.\u003c/p\u003e\n\n\u003cp\u003eLet's start by getting the \u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e element\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst main = document.getElementsByTagName('main')[0];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can get the children of \u003ccode\u003emain\u003c/code\u003e using \u003ccode\u003emain.children\u003c/code\u003e. This returns an\n\u003ccode\u003eHTMLCollection\u003c/code\u003e, so we can get the second child with \u003ccode\u003emain.children[1]\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst secondChild = main.children[1];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, we can get our \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e element. To constrain the search to just the children\nof the second child, we can call \u003ccode\u003egetElementsByTagName()\u003c/code\u003e \u003cstrong\u003edirectly on\n\u003ccode\u003esecondChild\u003c/code\u003e\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst p = secondChild.getElementsByTagName('p')[0];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd lastly we can change an attribute on the \u003ccode\u003ep\u003c/code\u003e node:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ep.textContent = \"Goodbye!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eObviously, this way of accessing that text isn't very efficient and won't work\non all pages but it does a good job of demonstrating the basic tools available\nto us for finding and manipulating HTML elements.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eUnderstanding the tree structure of the DOM helps us navigate all kinds of\ntrees. In subtrees and branches we can find the nodes we need by IDs, class\nnames or tag names, or by using element attributes like \u003ccode\u003echildren\u003c/code\u003e. Once we've\nselected our elements, we can use JavaScript to manipulate them. By using these\ntechniques, we can start to build a richer user experience.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\"\u003eMDN - Document Object Model\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"the-dom-is-a-tree"},{"id":157885,"title":"JavaScript Query Selector Methods","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-query-selector-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-query-selector-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-query-selector-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUse \u003ccode\u003equerySelector()\u003c/code\u003e and \u003ccode\u003equerySelectorAll()\u003c/code\u003e to find nested nodes\u003c/li\u003e \u003cli\u003eModify attributes of DOM nodes\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eOne of the most essential skills in our web development toolbox is finding elements in the DOM.\u003c/p\u003e  \u003cp\u003eWhile \u003ccode\u003edocument.getElementById()\u003c/code\u003e and \u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e are good, we can improve our search when we use document structure (tag, \u003ccode\u003eid\u003c/code\u003e, \u003ccode\u003eclass\u003c/code\u003e) \u003cstrong\u003ealong with\u003c/strong\u003e the tree structure of the DOM. It turns out CSS is a \u003cem\u003egreat\u003c/em\u003e language for expressing those relationships! With the \u003ccode\u003equerySelector()\u003c/code\u003e and \u003ccode\u003equerySelectorAll()\u003c/code\u003e methods, we provide one or more CSS selectors as an argument and we get back the matching element or elements. Because they can take a string containing multiple selectors, they allow us to create very specific, complex queries.\u003c/p\u003e  \u003ch2\u003eUse \u003ccode\u003equerySelector()\u003c/code\u003e and \u003ccode\u003equerySelectorAll()\u003c/code\u003e to Find Nested Nodes\u003c/h2\u003e  \u003cp\u003eIf you would like to follow along in the console, fork and clone this lesson, open the files in your text editor, and open \u003ccode\u003eindex.html\u003c/code\u003e in Google Chrome. As you go, copy each HTML example into \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003equerySelector()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003equerySelector()\u003c/code\u003e method takes one argument, a string of one or more CSS-compatible \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors\"\u003eselectors\u003c/a\u003e, and returns the \u003cem\u003efirst\u003c/em\u003e element that matches.\u003c/p\u003e  \u003cp\u003eGiven a document like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    Hello!\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    Goodbye!\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we called \u003ccode\u003edocument.querySelector('div')\u003c/code\u003e, the method would return the first \u003ccode\u003ediv\u003c/code\u003e. If we check its \u003ccode\u003einnerHTML\u003c/code\u003e, we should see \u003ccode\u003eHello!\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eSelectors aren't limited to one tag name, though. Otherwise, why not just use \u003ccode\u003edocument.getElementsByTagName('div')[0]\u003c/code\u003e? We can get very specific.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;ul class=\"ranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;\u003cbr\u003e        \u0026lt;div\u0026gt;\u003cbr\u003e          \u0026lt;ul\u0026gt;\u003cbr\u003e            \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e          \u0026lt;/ul\u0026gt;\u003cbr\u003e        \u0026lt;/div\u0026gt;\u003cbr\u003e      \u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;3\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;ul class=\"unranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;6\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;\u003cbr\u003e        \u0026lt;div\u0026gt;4\u0026lt;/div\u0026gt;\u003cbr\u003e      \u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst li2 = document.querySelector('ul.ranked-list li ul li');\u003cbr\u003eli2;\u003cbr\u003e//=\u0026gt; \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e\u003cbr\u003econst div4 = document.querySelector('ul.unranked-list li div');\u003cbr\u003ediv4;\u003cbr\u003e//=\u0026gt; \u0026lt;div\u0026gt;4\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the above example, the first query says, \"Starting from \u003ccode\u003edocument\u003c/code\u003e (the object we've called \u003ccode\u003equerySelector()\u003c/code\u003e on), find a \u003ccode\u003eul\u003c/code\u003e with a \u003ccode\u003eclassName\u003c/code\u003e of \u003ccode\u003eranked-list\u003c/code\u003e (recall from CSS that the \u003ccode\u003e.\u003c/code\u003e indicates that \u003ccode\u003eranked-list\u003c/code\u003e is a \u003ccode\u003eclassName\u003c/code\u003e). Then find an \u003ccode\u003eli\u003c/code\u003e that is a descendant of that \u003ccode\u003eul\u003c/code\u003e. Next find a  \u003ccode\u003eul\u003c/code\u003e that is a descendant (but not necessarily a direct child) of that \u003ccode\u003eli\u003c/code\u003e.  Finally, find an \u003ccode\u003eli\u003c/code\u003e that is a descendant of that (second) \u003ccode\u003eul\u003c/code\u003e.\"\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The HTML property \u003ccode\u003eclass\u003c/code\u003e is referred to as \u003ccode\u003eclassName\u003c/code\u003e in JavaScript.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eWhat does the second call to \u003ccode\u003equerySelector()\u003c/code\u003e say? Think about it for a minute, and then read on.\u003c/p\u003e  \u003cp\u003eWait for it...\u003c/p\u003e  \u003cp\u003eThe second call says, \"Starting from \u003ccode\u003edocument\u003c/code\u003e, find a \u003ccode\u003eul\u003c/code\u003e with a \u003ccode\u003eclassName\u003c/code\u003e of \u003ccode\u003eunranked-list\u003c/code\u003e. Then find an \u003ccode\u003eli\u003c/code\u003e descended from \u003ccode\u003eul.unranked-list\u003c/code\u003e and a \u003ccode\u003ediv\u003c/code\u003e descended from that \u003ccode\u003eli\u003c/code\u003e.\"\u003c/p\u003e  \u003ch4\u003eCSS Selectors\u003c/h4\u003e  \u003cp\u003eIf using CSS to target elements isn't feeling natural, now might be a good time to brush up on \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors\"\u003eselectors\u003c/a\u003e. Play around on the MDN page, then come back when you're ready.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003equerySelectorAll()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003e\u003ccode\u003equerySelectorAll()\u003c/code\u003e works a lot like \u003ccode\u003equerySelector()\u003c/code\u003e — it accepts a string containing one or more selectors as its argument, and it searches starting from the object that it's called on  (either \u003ccode\u003edocument\u003c/code\u003e or an element). However, instead of returning the first match, it returns a \u003ccode\u003eNodeList\u003c/code\u003e collection of all matching elements. A \u003ccode\u003eNodeList\u003c/code\u003e is similar to an \u003ccode\u003eHTMLCollection\u003c/code\u003e: it is an array-like structure containing, in this case, a list of DOM nodes.\u003c/p\u003e  \u003cp\u003eGiven a document like\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;main id=\"app\"\u0026gt;\u003cbr\u003e    \u0026lt;ul class=\"ranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;ul class=\"ranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;10\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;11\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/main\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we called\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.getElementById('app').querySelectorAll('ul.ranked-list li'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe'd get back a list of nodes corresponding to: \u003ccode\u003e\u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;10\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;11\u0026lt;/li\u0026gt;\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThe DOM selection methods \u003ccode\u003edocument.querySelector()\u003c/code\u003e and \u003ccode\u003edocument.querySelectorAll()\u003c/code\u003e are powerful tools for finding the elements we need to update and change. They use the familiar CSS selector syntax and allow us to create very specific queries that give us access to elements in complex DOM trees.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\"\u003edocument.querySelector()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\"\u003edocument.querySelectorAll()\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"javascript-query-selector-methods"},{"id":157886,"title":"Creating and Inserting DOM Nodes Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-modifying-elements-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate DOM elements programmatically\u003c/li\u003e \u003cli\u003eAdd elements to the DOM\u003c/li\u003e \u003cli\u003eUpdate elements using \u003ccode\u003einnerHTML\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eChange properties on DOM nodes\u003c/li\u003e \u003cli\u003eRemove elements from the DOM\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eNow that you have an understanding of the DOM and powerful tools for selecting the right elements, it's time to learn how to:\u003c/p\u003e  \u003col\u003e \u003cli\u003ecreate new nodes\u003c/li\u003e \u003cli\u003edelete nodes\u003c/li\u003e \u003cli\u003eupdate node properties\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eCreate DOM Elements Programmatically\u003c/h2\u003e  \u003ch3\u003e\u003ccode\u003edocument.createElement()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eCreating an element in JavaScript is an easy process. You simply call \u003ccode\u003edocument.createElement('tagName')\u003c/code\u003e, where \u003ccode\u003etagName\u003c/code\u003e is the name of any valid HTML tag (\u003ccode\u003e'p'\u003c/code\u003e, \u003ccode\u003e'div'\u003c/code\u003e, \u003ccode\u003e'span'\u003c/code\u003e, etc.).\u003c/p\u003e  \u003cp\u003eOpen the \u003ccode\u003eindex.html\u003c/code\u003e file in your browser and open up the browser's console. In the console, enter:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst element = document.createElement('div'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ethen take a look at the Elements tab. The element doesn't show up on the page. Why not?\u003c/p\u003e  \u003ch2\u003eAdd Elements to the DOM\u003c/h2\u003e  \u003cp\u003eTo get an element to appear in the DOM, we have to \u003ccode\u003eappend\u003c/code\u003e it to an existing DOM node. To go back to our tree metaphor, we have to glue our new leaf onto a branch that's already there. We can start as high up on the tree as \u003ccode\u003edocument.body\u003c/code\u003e, or we can find a more specific element using any of the methods we've learned for traversing the DOM.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eappendChild()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eLet's append \u003ccode\u003eelement\u003c/code\u003e to \u003ccode\u003ebody\u003c/code\u003e to start:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.body.appendChild(element); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if you look at the Elements tab, you'll see our new (empty) \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e nested inside the \u003ccode\u003ebody\u003c/code\u003e element. Let's give it some content:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst ul = document.createElement('ul');\u003cbr\u003e\u003cbr\u003efor (let i = 0; i \u0026lt; 3; i++) {\u003cbr\u003e  const li = document.createElement('li');\u003cbr\u003e  li.innerHTML = (i + 1).toString();\u003cbr\u003e  ul.appendChild(li);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eelement.appendChild(ul); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou should now see the unordered list rendered on the page, and see the new elements in the \"Elements\" tab.\u003c/p\u003e  \u003cp\u003eNote that, each time we create a new element, we create a variable and save a reference to it. That makes it quite easy to make additional updates and to add it to the DOM using \u003ccode\u003eappendChild()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eAdd Elements to the DOM via \u003ccode\u003einnerHTML\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eCreating elements and then appending them into the DOM is a multi-step process. It's also the \u003cstrong\u003e\u003cem\u003esafest and most reliable way\u003c/em\u003e\u003c/strong\u003e to add content to the DOM. Most repeated code can be removed by using variables, functions and loops. It's The Right Way.\u003c/p\u003e  \u003cp\u003eThat said, however, there's another process that will also work, using \u003ccode\u003eElement.innerHTML\u003c/code\u003e. Inside our loop above, we create an \u003ccode\u003eli\u003c/code\u003e element and set its \u003ccode\u003einnerHTML\u003c/code\u003e property to a simple number (expressed as a string) that represents the current iteration through the loop. Once we append the \u003ccode\u003eli\u003c/code\u003e to the \u003ccode\u003eul\u003c/code\u003e and the \u003ccode\u003eul\u003c/code\u003e to the document \u003ccode\u003ebody\u003c/code\u003e, we see our unordered list in the browser window. This is a perfectly valid way to use \u003ccode\u003einnerHTML\u003c/code\u003e to add content to the DOM. Imagine, however, that we want to add content that's more complicated.\u003c/p\u003e  \u003cp\u003eAssume our HTML includes a \u003ccode\u003ediv\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \"header.\" We can grab that element and set its \u003ccode\u003einnerHTML\u003c/code\u003e attribute to any HTML we like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst header = document.getElementById('header');\u003cbr\u003eheader.innerHTML = \"\u0026lt;h1\u0026gt;Poodles!\u0026lt;/h1\u0026gt;\u0026lt;h3\u0026gt;An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a post-Frankfurt School Appropriationist Perspective\u0026lt;/h3\u0026gt;\u0026lt;p\u0026gt;\u0026lt;em\u0026gt;By: Byron Q. Poodle, Esq., BA.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt;\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we are using one big, long string, complete with multiple HTML tags, to create the following HTML in the DOM:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"header\"\u0026gt;\u003cbr\u003e  \u0026lt;h1\u0026gt;Poodles!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;h3\u0026gt;An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a post-Frankfurt School Appropriationist Perspective\u0026lt;/h3\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;\u0026lt;em\u0026gt;By: Byron Q. Poodle, Esq., BA.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis process works but it is \u003cstrong\u003enot\u003c/strong\u003e recommended for several reasons. First, it's more error-prone, and the errors can be difficult to find. Second, it can negatively impact site performance. Finally, if you're inserting user-derived data (e.g., comments) into the DOM using \u003ccode\u003einnerHTML\u003c/code\u003e, you can expose your site to the risk of users \u003ca href=\"https://www.reddit.com/r/learnjavascript/comments/9502x5/is_innerhtml_still_considered_bad/e3p31go/?utm_source=share\u0026amp;utm_medium=web2x\u0026amp;context=3\"\u003einjecting malicious code\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eProgrammatically creating and appending elements is safer and more efficient, and it results in code that's easier to read, easier to debug, and easier to maintain.\u003c/p\u003e  \u003ch2\u003eChange Properties on DOM Nodes\u003c/h2\u003e  \u003cp\u003eWe can change the appearance of a DOM node using its \u003ccode\u003estyle\u003c/code\u003e attribute:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.style.backgroundColor = '#27647B'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou've changed what's on the screen!\u003c/p\u003e  \u003cp\u003eFeel free to set as many properties as you'd like — this is a good chance to look around and explore different properties of DOM elements.\u003c/p\u003e  \u003cp\u003eLet's adjust the display:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.style.fontSize = '24px';\u003cbr\u003eelement.style.marginLeft = '30px';\u003cbr\u003eelement.style.lineHeight = 2; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePerhaps the most common way to change how things appear in the DOM is by changing an element's \u003ccode\u003eclass\u003c/code\u003e attribute. As you know from CSS, we often change the way a bit of rendered HTML appears by adding or removing a class.\u003c/p\u003e  \u003cp\u003eFor example, we could create an \u003ccode\u003ealert\u003c/code\u003e class that turns the text red (using the CSS \u003ccode\u003ecolor\u003c/code\u003e attribute) and makes it big (using the CSS \u003ccode\u003efont-size\u003c/code\u003e attribute). We can then use JavaScript to first grab the element and then add the class by updating the element's \u003ccode\u003eclassName\u003c/code\u003e property. This has the same effect as setting the \u003ccode\u003eclass\u003c/code\u003e property in the HTML. The \u003ccode\u003eclassName\u003c/code\u003e property expects a \u003ccode\u003eString\u003c/code\u003e with one or more class names, separated by spaces:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.className = \"dog\";\u003cbr\u003eelement.className = \"pet-listing dog\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnother way to accomplish the same thing is by using the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\"\u003e\u003ccode\u003eElement.classList\u003c/code\u003e property\u003c/a\u003e. This property has \u003ccode\u003e.add()\u003c/code\u003e and \u003ccode\u003e.remove()\u003c/code\u003e methods that can be used as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.classList.remove(\"unneeded-class\");\u003cbr\u003eelement.classList.add(\"pet-listing\", \"dog\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis approach allows you to easily add and remove classes programmatically, without having to create a long string of class names.\u003c/p\u003e  \u003ch3\u003eSeparation of Concerns\u003c/h3\u003e  \u003cp\u003eAn important thing to bear in mind is that we only want to use JavaScript to change the appearance of an element when we need to make a change dynamically, i.e., in response to user actions. This goes back to a fundamental programming concept about separating concerns between technologies:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHTML defines the structure of the website (not appearance or functionality)\u003c/li\u003e \u003cli\u003eJavaScript defines functionality of the website (not structure or styling)\u003c/li\u003e \u003cli\u003eCSS defines the visualization and style of the website (not structure or functionality)\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eDefining the base CSS should still happen in the CSS files that are loaded into the DOM when the page is opened.\u003c/p\u003e  \u003ch2\u003eRemove Elements from the DOM\u003c/h2\u003e  \u003cp\u003eWe know how to add elements and change their attributes. What if we want to remove an element from a page?\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eremoveChild()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eWe use \u003ccode\u003eremoveChild()\u003c/code\u003e, as you might guess, to remove a particular child of an element:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esomeElement.removeChild(someChildElement); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's take a look at a more complex example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst ul = document.getElementsByTagName('ul')[0];\u003cbr\u003eul.removeChild(ul.querySelector('li:nth-child(2)')); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere you can see the power of \u003ccode\u003equerySelector()\u003c/code\u003e: we can use it to find the second \u003ccode\u003eli\u003c/code\u003e element of \u003ccode\u003eul\u003c/code\u003e. We then pass that element as the argument to our \u003ccode\u003eremoveChild\u003c/code\u003e method, which removes the element from our \u003ccode\u003eul\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhat if we want to remove the whole unordered list (\u003ccode\u003eul\u003c/code\u003e)?\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eelement.remove()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eWe can just call \u003ccode\u003eremove()\u003c/code\u003e on the element itself:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eul.remove(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd it's gone!\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eFrom this point forward, many of the labs will work a little differently from ones you've done before. Specifically, the tests will mock the process of 1) running JavaScript code in the browser and 2) seeing the results of that code represented in the DOM. Take a look at \u003ccode\u003etest/indexTest.js\u003c/code\u003e to see the tests' descriptions of the changes your code should be making to the DOM elements.\u003c/p\u003e  \u003cp\u003eNote that you do not need to create functions for this lab. Just create the line or lines of JavaScript necessary to pass each test. As usual, you will write your code in the \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\"\u003edocument.createElement()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild\"\u003eappendChild()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild\"\u003eremoveChild()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove\"\u003eelement.remove()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\"\u003eclassList Property\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g7649dd13a45288d51284f6856b677b77"},{"id":243603,"title":"Survey - Manipulating the DOM","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Manipulating the DOM module?\u003c/p\u003e\n\u003c/div\u003e","exportId":"gdd4baa9eaf6831d902b4fd5f06c246df"}]},{"id":16919,"name":"JavaScript Events","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g2fb4ec548aa53a94903b354b924227c1","items":[{"id":157887,"title":"JavaScript Events","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a JavaScript event\u003c/li\u003e\n\u003cli\u003eIdentify different types of user events\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've experimented with selecting and manipulating nodes in the DOM using\nJavaScript: deleting nodes, editing nodes, etc. But most web applications are\n\u003cem\u003enot\u003c/em\u003e used by people opening up the console and editing the DOM using Chrome's\nDevTools. Instead, people \u003cem\u003edo something\u003c/em\u003e and then \u003cem\u003ework happens\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\"Doing work\" in response to \"something happening\" is known as \u003cem\u003eevent handling\u003c/em\u003e.\n\u003cem\u003eEvents\u003c/em\u003e are the \"something the user does\" and the \"\u003cem\u003ecallback function\u003c/em\u003e\" is the\nwork that will happen in response to the event being triggered.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson we'll go over some of the most commonly-used JavaScript events.\nIn the following lessons, we'll learn how to use \u003cem\u003eevent listeners\u003c/em\u003e to tell\nJavaScript which event or events we want it to listen for. We'll also learn how\nto implement \u003cem\u003ecallback functions\u003c/em\u003e to handle the \u003cem\u003ework happens\u003c/em\u003e part of event\nhandling.\u003c/p\u003e\n\n\u003ch2\u003eDefine a JavaScript Event\u003c/h2\u003e\n\n\u003cp\u003eJavaScript has the ability to \"listen\" for things that happen inside the\nbrowser. It can listen for events like whether the browser is resized, or\nwhether someone clicked on a specific image on the screen. The event you're\nprobably most familiar with is \"click.\"\u003c/p\u003e\n\n\u003cp\u003eWe'll go over a few of the more common types of events in this lesson.\u003c/p\u003e\n\n\u003ch2\u003eIdentify Different Types of User Events\u003c/h2\u003e\n\n\u003ch3\u003eMouse Click\u003c/h3\u003e\n\n\u003cp\u003eMouse or trackpad events are some of the most common ones you'll be handling\nusing JavaScript eventing. For example, JavaScript can recognize a single click\non an element in the page and change the styling of the element to highlight it.\nOr it can recognize a double-click on an element and open a zoomed-in view of\nthat element.\u003c/p\u003e\n\n\u003cp\u003eThere are many other mouse events you can use; take a look at the list of\nJavaScript's \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#Mouse_events\"\u003emouse events here\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3\u003eKey Press\u003c/h3\u003e\n\n\u003cp\u003eWhile click events will likely make up the majority of events you'll use, the\nkeyboard is another important source of events. JavaScript currently includes\ntwo \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#Keyboard_events\"\u003ekeyboard events\u003c/a\u003e: \u003ccode\u003ekeydown\u003c/code\u003e and \u003ccode\u003ekeyup\u003c/code\u003e. (A third, \u003ccode\u003ekeypress\u003c/code\u003e,\nhas been deprecated.) When a key is pressed, these events provide a code to\nindicate which key it was. For example, a game program might listen for\n\u003ccode\u003ekeydown\u003c/code\u003e events and, if the space bar was pressed, make the character jump over\nthe hole.\u003c/p\u003e\n\n\u003ch3\u003eForm Submission\u003c/h3\u003e\n\n\u003cp\u003eHTML pages often use a submit button to submit a form to a server. When a user\nsubmits a form, the \u003ccode\u003esubmit\u003c/code\u003e event is fired. An event handler here might pop up\na thank you overlay or log in the user and take them to their home page.\u003c/p\u003e\n\n\u003ch3\u003eOther Events\u003c/h3\u003e\n\n\u003cp\u003eAs you seek to build more complicated applications, you'll need to handle and\ntrigger work on many more events than the few we've discussed in this lesson.\nSome other common events you are likely to encounter are \u003ccode\u003escroll\u003c/code\u003e, \u003ccode\u003emouseenter\u003c/code\u003e\nand \u003ccode\u003emouseleave\u003c/code\u003e, \u003ccode\u003efocus\u003c/code\u003e, \u003ccode\u003eblur\u003c/code\u003e,  and \u003ccode\u003eonchange\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOne important thing to keep in mind is that not all JavaScript events are\nsupported by all browsers. This \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#standard_events\"\u003elist of browser events\u003c/a\u003e includes the ones\nthat can be used in most browsers.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eJavaScript allows us to trigger work when it detects events. You set up an event\nhandler and, when JavaScript recognizes that event, it will execute the event\nhandler's work, which is stored in a \u003cem\u003ecallback function\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eTake a few minutes to look through the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#standard_events\"\u003elist of common events\u003c/a\u003e to\nfamiliarize yourself with the many many ways you can use event handling to\nenhance your users' experience.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events\"\u003eMDN - Web Events\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"javascript-events"},{"id":157888,"title":"JavaScript Event Listeners Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events-event-listening-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eCreate event listeners on DOM nodes using \u003ccode\u003eaddEventListener()\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this lab we will learn how to teach nodes to \"listen\" for an event using \u003ccode\u003eaddEventListener()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eCreate Event Listeners on DOM Nodes with \u003ccode\u003eaddEventListener()\u003c/code\u003e\n\u003c/h2\u003e\n\u003cp\u003eIn order for JavaScript to handle an event, we first need to tell it to listen for that event. We do this by calling the \u003ccode\u003eaddEventListener()\u003c/code\u003e method on the element we want to add the listener to, and passing it two arguments:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003ethe name of the event to listen for, and\u003c/li\u003e\n    \u003cli\u003ea \u003cem\u003ecallback function\u003c/em\u003e to \"handle\" the event\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOpen up \u003ccode\u003eindex.html\u003c/code\u003e in the browser. When you click in the \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e area, nothing happens. Let's set up some \u003cem\u003eevent handling\u003c/em\u003e. Specifically, let's add an event listener for the \u003ccode\u003eclick\u003c/code\u003e event on the \u003ccode\u003einput#input\u003c/code\u003e element in \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eTry out the following in the Chrome DevTools console:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst input = document.getElementById('input');\u003cbr\u003einput.addEventListener('click', function() {\u003cbr\u003e  alert('I was clicked!');\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow when you click inside of \u003ccode\u003einput#input\u003c/code\u003e, you will get an alert box.\u003c/p\u003e\n\u003cp\u003eLet's review what's happening in this code.\u003c/p\u003e\n\u003cp\u003eFirst, we grab the element that we want to add the event listener to and save a reference to it in the \u003ccode\u003einput\u003c/code\u003e variable.\u003c/p\u003e\n\u003cp\u003eNext, we call \u003ccode\u003eaddEventListener()\u003c/code\u003e on that element to tell JavaScript to listen for the event. We pass two arguments to \u003ccode\u003eaddEventListener()\u003c/code\u003e: the name of the event to listen for (in this case, \u003ccode\u003eclick\u003c/code\u003e) and a \u003cem\u003ecallback function\u003c/em\u003e that will be executed when the event is \"heard.\"\u003c/p\u003e\n\u003cp\u003e\n    \u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\"\u003eAccording to MDN\u003c/a\u003e:\n\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003eA callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThat's exactly what's happening here: we're passing a callback function as the second argument to the \u003ccode\u003eaddEventListener()\u003c/code\u003e function; the callback will be invoked as soon as the event occurs.\u003c/p\u003e\n\u003cp\u003eLet's pull out that second argument and take a look at it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction() {\u003cbr\u003e  alert('I was clicked!');\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis function has all the components of functions we've seen before (the \u003ccode\u003efunction\u003c/code\u003e keyword, a pair of parentheses, and the body of the function enclosed in curly braces) \u003cem\u003eexcept one\u003c/em\u003e: it doesn't have a name assigned to it. This is what's called an \u003cem\u003eanonymous\u003c/em\u003e function. Because it doesn't have a name, it can't be invoked directly. But the event listener knows to execute whatever function is passed as the second argument when it detects the event, so it doesn't need to be named.\u003c/p\u003e\n\u003cp\u003eIf we are only calling our callback function in that one place, using an anonymous function makes sense. However, what if we wanted to use that same alert message on a bunch of elements? In that case, it would make more sense to create a separate, named function that could be called by all of our event listeners. With this approach, we would pass the \u003cem\u003efunction name\u003c/em\u003e as the second argument to \u003ccode\u003eaddEventListener()\u003c/code\u003e rather than the function itself:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst input = document.getElementById('input');\u003cbr\u003e\u003cbr\u003efunction clickAlert() {\u003cbr\u003e  alert('I was clicked!');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003einput.addEventListener('click', clickAlert); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could then hook up as many elements as we'd like to our \u003ccode\u003eclickAlert\u003c/code\u003e. Just as we did for the \u003ccode\u003einput\u003c/code\u003e element, we would first use our CSS selector skills to grab the desired element and save it to a variable, then add the \u003ccode\u003eclick\u003c/code\u003e event listener to that element. Give it a try!\u003c/p\u003e\n\u003cp\u003eWith this approach, even if we're using our \u003ccode\u003eclickAlert\u003c/code\u003e with a whole bunch of elements, if we decide later that we want to change the text of the alert to \"Hee hee, that tickles!\" instead, we would only need to make that change in one place: inside our \u003ccode\u003eclickAlert()\u003c/code\u003e function.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: we pass \u003ccode\u003eclickAlert\u003c/code\u003e as the argument, not \u003ccode\u003eclickAlert()\u003c/code\u003e. This is because we don't want to \u003cem\u003einvoke\u003c/em\u003e the function in this line of code. Instead, we want to pass a \u003cem\u003ereference\u003c/em\u003e to the function to \u003ccode\u003eaddEventListener()\u003c/code\u003e so \u003cem\u003eit\u003c/em\u003e can call the function when the time comes.\u003c/p\u003e\n\u003cp\u003eRefresh your browser and try out the latest version of the code in the console to verify that it works. Also try passing \u003ccode\u003eclickAlert()\u003c/code\u003e as the second argument rather than \u003ccode\u003eclickAlert\u003c/code\u003e and see what happens.\u003c/p\u003e\n\u003ch2\u003ePassing the Tests\u003c/h2\u003e\n\u003cp\u003eNow let's set up \u003ccode\u003eindex.js\u003c/code\u003e to do the same thing so we can get our test passing. To do that, simply copy the code into the \u003ccode\u003eindex.js\u003c/code\u003e file's \u003ccode\u003eaddingEventListener()\u003c/code\u003e function and run the test. Either version should pass the test — just make sure that the code creating the event listener is \u003cstrong\u003einside\u003c/strong\u003e the \u003ccode\u003eaddingEventListener()\u003c/code\u003e function.\u003c/p\u003e\n\u003ch4\u003eChecking the Code in the Browser\u003c/h4\u003e\n\u003cp\u003eWe know that the code works in the console and passes the test, but we should also check our changes to \u003ccode\u003eindex.js\u003c/code\u003e in the browser. Because you've added the \u003ccode\u003eaddEventListener()\u003c/code\u003e function \u003cem\u003einside\u003c/em\u003e the \u003ccode\u003eaddingEventListener()\u003c/code\u003e function, recall that you will need to call the outer function in \u003ccode\u003eindex.js\u003c/code\u003e to execute \u003ccode\u003eaddEventListener()\u003c/code\u003e and activate the event listener. Be sure to refresh the page to load the new code in \u003ccode\u003eindex.js\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events\"\u003eMDN - Web Events\u003c/a\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e","exportId":"g9b2e2b384b3f4722d46569ecce91eb7e"},{"id":157889,"title":"Moving Things with JavaScript by Acting on Events","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events-acting-on-events-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePractice moving elements on the page\u003c/li\u003e\n\u003cli\u003eDemonstrate how to move an element in response to a browser event\u003c/li\u003e\n\u003cli\u003eDemonstrate how to update an element's position on the page conditionally\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThink back to the first video game you played.\u003c/p\u003e\n\u003cp\u003eThink about the mechanics of that game. When you \u003cem\u003etilted\u003c/em\u003e a joystick or \u003cem\u003epressed\u003c/em\u003e a button it responded to your whims. It pulled you into its story by giving you a window into its world and a way of interacting with — shaping, even — that world. When you performed an \u003cstrong\u003e\u003cem\u003eevent\u003c/em\u003e\u003c/strong\u003e, the computer made the world respond: the little plumber from Brooklyn jumped (\u003cem\u003eSuper Mario Franchise\u003c/em\u003e), the undead warrior slashed at an evil foe (\u003cem\u003eDark Souls\u003c/em\u003e), or the banana-yellow guy ate the power pellet (\u003cem\u003ePac-Man\u003c/em\u003e).\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-acting-on-events/Image_36_VideoGame.png\" alt=\"Controlling classic video game characters Mario and Pacman\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eProgramming means that you can create such a world for other people.\u003c/em\u003e Sure, it'll be a while before you're ready to build something like one of the classic games above, but we can start with the essential steps. In this lab we'll learn how to move an element on a page in response to an \u003cem\u003eevent\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003cp\u003eGo ahead and run the tests. You'll see that you need to create two functions to get the tests passing: \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e and \u003ccode\u003emoveDodgerRight()\u003c/code\u003e. We'll write \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e together, then you'll create \u003ccode\u003emoveDodgerRight()\u003c/code\u003e on your own.\u003c/p\u003e\n\u003ch2\u003ePractice Moving Elements on the Page\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/acting-on-events-lab/rock-dodger.png\" alt=\"Rock Dodger!\"\u003e\u003c/p\u003e\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in the browser. You'll see a black square which represents the game field and a white rectangle at the bottom of that field which is our game piece, the dodger. Now open DevTools and click on the Elements tab. You'll see that the game field is a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \"game.\" Expand that \u003ccode\u003ediv\u003c/code\u003e and you'll see that the game piece is a second, nested \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \"dodger.\"\u003c/p\u003e\n\u003cp\u003eClick on the game \u003ccode\u003ediv\u003c/code\u003e and take a look at its CSS in the styles tab. You'll see that the game field has a height and width of 400px. Now click on the dodger and note that it has a height of 20px and a width of 40px. Finally, take a look at the inline style on the dodger \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e: the \u003ccode\u003ebottom\u003c/code\u003e and \u003ccode\u003eleft\u003c/code\u003e properties define the dodger's starting position \u003cem\u003erelative to its parent element, the game field\u003c/em\u003e. In other words, the lower left corner of the game field corresponds to\u003ccode\u003eleft\u003c/code\u003e and \u003ccode\u003ebottom\u003c/code\u003e positions of 0px. The starting values of the dodger's \u003ccode\u003ebottom\u003c/code\u003e and \u003ccode\u003eleft\u003c/code\u003e properties are what places it at the bottom center of the game field when our game launches.\u003c/p\u003e\n\u003cp\u003eBefore we can use JavaScript to move the dodger, we first need to grab it and save a reference to it in a variable. Enter the following in the console:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst dodger = document.getElementById(\"dodger\"); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAwesome. Now let's change its color:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edodger.style.backgroundColor = \"#000000\"; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhoa, where'd it go? Well, we changed the color to \u003ccode\u003e#000000\u003c/code\u003e, another way of expressing \"black.\" So it just blends in with the background.\u003c/p\u003e\n\u003cp\u003eLet's change it to something more visible.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edodger.style.backgroundColor = \"#FF69B4\"; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMuch better!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/skills-based-js/pink_dodger.png\" alt=\"pink dodger\"\u003e\u003c/p\u003e\n\u003cp\u003eAccessing the \u003ccode\u003estyle\u003c/code\u003e property of the \u003ccode\u003edodger\u003c/code\u003e element allows us to change things like the \u003ccode\u003ebackgroundColor\u003c/code\u003e, \u003ccode\u003eheight\u003c/code\u003e, \u003ccode\u003ewidth\u003c/code\u003e, etc. We can also use it to change an element's position on the page.\u003c/p\u003e\n\u003cp\u003eLet's start by moving the element up:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edodger.style.bottom = \"100px\"; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/skills-based-js/pink_dodger_bottom_100.png\" alt=\"up 100px\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Even though we're talking about \u003cem\u003enumeric\u003c/em\u003e coordinates, note that we need to move the dodger by assigning a new \u003cem\u003estring value\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWe can verify our dodger's current position by simply typing \u003ccode\u003edodger.style.left\u003c/code\u003e or \u003ccode\u003edodger.style.bottom\u003c/code\u003e into the console.\u003c/p\u003e\n\u003cp\u003eLet's return it to where it started by resetting the \u003ccode\u003ebottom\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edodger.style.bottom = \"0px\"; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's visually verify that the dodger's position is determined relative to the game field by changing its \u003ccode\u003eleft\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edodger.style.left = \"0px\"; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see the dodger nestled up against the bottom left corner of the game field.\u003c/p\u003e\n\u003ch2\u003eDemonstrate How to Move an Element in Response to a Browser Event\u003c/h2\u003e\n\u003cp\u003eNow that we know how to write the code to move the dodger, let's figure out how to tie that action to an event.\u003c/p\u003e\n\u003cp\u003eLet's say we want the user to be able to move the dodger to the left using the left arrow key. We learned in an earlier lesson that, when a key is pressed, the \u003ccode\u003ekeydown\u003c/code\u003e event provides a code to indicate which key it was. So the first thing we have to do is figure out what code is used to identify the left arrow key. We could look it up, but we're programmers — let's explore!\u003c/p\u003e\n\u003cp\u003eSo what do we mean when we say that an event provides a code? Any time an event listener is in place and the event it's listening for is triggered, a JavaScript object containing a bunch of information about the event is \u003cstrong\u003eautomatically\u003c/strong\u003e passed as an argument to the callback function. We can access that object and the information it contains by defining a parameter for the callback. It looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"keydown\", function(event) {\u003cbr\u003e  console.log(event);\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy defining the \u003ccode\u003eevent\u003c/code\u003e parameter in the parentheses, we've given the body of the callback access to that event object, which is what allows us to log it to the console. Note that, as with any JavaScript parameter (and, in fact, any JavaScript variable), we can give it any valid JavaScript variable name we like. By convention, and in keeping with programming best practice of using meaningful variable names, the name JavaScript programmers use for this parameter is usually either \u003ccode\u003eevent\u003c/code\u003e or \u003ccode\u003ee\u003c/code\u003e. You will see these in a lot of JavaScript code, and we recommend you use them as well.\u003c/p\u003e\n\u003cp\u003eThis pattern, when you first encounter it, is tricky to wrap your head around. Don't worry if it doesn't make total sense yet — it will become clearer as you continue through the curriculum. You might also want to read the excellent accepted answer in \u003ca href=\"https://stackoverflow.com/questions/35936365/what-exactly-is-the-parameter-e-event-and-why-pass-it-to-javascript-functions\"\u003ethis Stack Overflow thread\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eLet's take a look at what that event object looks like. Enter the code above into the console then click in the browser window (where the game field and dodger are rendered). Now, if you press the left arrow key, you should see a \u003ccode\u003eKeyboardEvent\u003c/code\u003e logged in the console. Expand the event and you'll see its properties listed; the one we're interested in is the \u003ccode\u003ekey\u003c/code\u003e property. Try pressing some other keys as well and check out their \u003ccode\u003ekey\u003c/code\u003e properties.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/acting-on-events-lab/keyboard-event.png\" alt=\"Keyboard Event\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e You can explore other event types as well: just change the name of the event in the code above.\u003c/p\u003e\n\u003cp\u003eNow that we know the code the event uses to identify the left arrow key, we can write the JavaScript code to move the dodger left when the key is pressed:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"keydown\", function(event) {\u003cbr\u003e  if (event.key === \"ArrowLeft\") {\u003cbr\u003e    const leftNumbers = dodger.style.left.replace(\"px\", \"\");\u003cbr\u003e    const left = parseInt(leftNumbers, 10);\u003cbr\u003e\u003cbr\u003e    dodger.style.left = `${left - 1}px`;\u003cbr\u003e  }\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo what are we doing here? Well, when our event listener detects a \u003ccode\u003ekeydown\u003c/code\u003e event, we first check to see whether the \u003ccode\u003ekey\u003c/code\u003e property of the event object has the value \"ArrowLeft.\" If it does, we get the current value of the dodger's \u003ccode\u003estyle.left\u003c/code\u003e property and use the \u003ca href=\"https://www.w3schools.com/jsref/jsref_replace.asp\"\u003eString \u003ccode\u003ereplace()\u003c/code\u003e method\u003c/a\u003e to strip out the \"px\", then store the result in \u003ccode\u003eleftNumbers\u003c/code\u003e. Next, we parse \u003ccode\u003eleftNumbers\u003c/code\u003e as an integer and store that result in \u003ccode\u003eleft\u003c/code\u003e. Finally, we update the dodger's \u003ccode\u003estyle.left\u003c/code\u003e property using string interpolation, injecting the current value minus 1. If the key that's pressed is \u003cem\u003enot\u003c/em\u003e the left arrow key, we do zilch. Try it out in the browser yourself!! (Be sure to refresh the page first.)\u003c/p\u003e\n\u003cp\u003eWe do still have a problem, though. Even though we're only going one pixel at a time, eventually our dodger will zoom (well, relatively speaking) right out of view.\u003c/p\u003e\n\u003cp\u003eHow can we prevent this? We need to check where the left edge of the dodger is and only move it if it hasn't yet reached the left edge of the game field.\u003c/p\u003e\n\u003ch2\u003eUpdate an Element's Position on the Page Conditionally\u003c/h2\u003e\n\u003cp\u003eOur callback function is starting to get pretty complex. This is probably a good time to break the dodger's movement out into a separate function. We want to move the dodger left if our \u003ccode\u003eif\u003c/code\u003e statement returns true, so let's pull out the body of that \u003ccode\u003eif\u003c/code\u003e statement into a function called \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eRefresh the page so we're starting with a blank slate, then grab the dodger again:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst dodger = document.getElementById(\"dodger\"); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we'll build our \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e function, adding a check on the current position of the dodger:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction moveDodgerLeft() {\u003cbr\u003e  const leftNumbers = dodger.style.left.replace(\"px\", \"\");\u003cbr\u003e  const left = parseInt(leftNumbers, 10);\u003cbr\u003e\u003cbr\u003e  if (left \u0026gt; 0) {\u003cbr\u003e    dodger.style.left = `${left - 1}px`;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe're doing essentially the same thing, but we first ensure that the dodger's left edge has not reached the left edge of its container.\u003c/p\u003e\n\u003cp\u003eNow let's wire this up to our event listener:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"keydown\", function(e) {\u003cbr\u003e  if (e.key === \"ArrowLeft\") {\u003cbr\u003e    moveDodgerLeft();\u003cbr\u003e  }\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow try moving the dodger past the left edge. No can do!\u003c/p\u003e\n\u003cp\u003eCopy the final code into \u003ccode\u003eindex.js\u003c/code\u003e and run the tests. You should now have the first one passing.\u003c/p\u003e\n\u003ch2\u003eLab\u003c/h2\u003e\n\u003cp\u003eNow it's your turn. With the code implemented from the code-along, think about what needs to change to make a \u003ccode\u003emoveDodgerRight()\u003c/code\u003e function. You'll need to add another condition to your event listener's callback function to call \u003ccode\u003emoveDodgerRight()\u003c/code\u003e. Then, inside the function, instead of moving the dodger \u003ccode\u003e${left - 1}px\u003c/code\u003e, you'll be moving it \u003ccode\u003e${left + 1}px\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It may seem logical that you would use the dodger's \u003ccode\u003estyle.right\u003c/code\u003e property to move the dodger right, but that won't work. The reason is that changing the \u003ccode\u003estyle.right\u003c/code\u003e property \u003cem\u003edoesn't change\u003c/em\u003e the \u003ccode\u003estyle.left\u003c/code\u003e property, which means we'd have conflicting information about where the dodger should be on the screen. JavaScript solves this problem by giving precedence to \u003ccode\u003estyle.left\u003c/code\u003e. In other words, once the user presses the left arrow key for the first time and the value of \u003ccode\u003estyle.left\u003c/code\u003e is changed, any subsequent changes to \u003ccode\u003estyle.right\u003c/code\u003e will be ignored.\u003c/p\u003e\n\u003cp\u003eFinally, implement the code needed to prevent the dodger from escaping off the right-hand side. How can we check whether the \u003cem\u003eright\u003c/em\u003e edge of the dodger has reached the \u003cem\u003eright\u003c/em\u003e edge of the game field? (Keep in mind that the dodger is 40px wide.)\u003c/p\u003e\n\u003cp\u003eOnce you've completed the work to get the tests to pass, the last step is to \"try out\" your application. Make sure it works the way you expect in the browser. In professional applications, tests can't cover 100% of the use of the application. It's important to realize that \"passing all the tests\" \u003cem\u003eis not the same\u003c/em\u003e as \"building a working application.\"\u003c/p\u003e\n\u003cp\u003eBe sure to do a human-level manual \"play through\" with your dodger to make sure your working code \u003cem\u003ereally works\u003c/em\u003e!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/vvLWidwZNYH5e/200w_d.gif\" alt=\"Passing the Tests is only part of the job\"\u003e\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eEvents and event handling are vital to web programming. JavaScript allows for dynamic page rendering, so users can interact with the contents of the page in real time. Knowledge of the basic techniques we've learned so far sets you on the road toward being able to create complex interactions like those in video games you may have played before!\u003c/p\u003e","exportId":"g24c4d93361a80fbf21c9467cc2025562"},{"id":243612,"title":"Survey - JavaScript Events","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the JavaScript Events module?\u003c/p\u003e\n\u003c/div\u003e","exportId":"g190a90cde5117edd395c6e12dfee5837"}]},{"id":16920,"name":"Project Mode","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gaab04510c412903286d60c9932fb013e","items":[{"id":157890,"title":"Hosting a Website on GitHub Pages","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"hosting-on-github-pages\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/hosting-on-github-pages\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/hosting-on-github-pages/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the earlier days of the internet, if you wanted to publish a custom website, your options were limited, and the process was often complicated. Hosting a site required registering a domain, paying a hosting service, then going through a trial and error process of uploading your website's files to that service.\u003c/p\u003e  \u003cp\u003eNow, things are a bit different. Hosting services are still around and you can still register custom domains, but there are many ways to publish websites online now, including a few ways that are totally free for basic websites.\u003c/p\u003e  \u003cp\u003eIn this lesson, we're going to walk through one free option for hosting HTML and JavaScript based websites. As it happens, we'll be using a service we're already familiar with — GitHub!\u003c/p\u003e  \u003ch2\u003eHosting on GitHub\u003c/h2\u003e  \u003cp\u003eAny repository on GitHub can be published as a website — even if the repo doesn't contain any HTML files. By default, GitHub will take a repository's \u003ccode\u003eREADME.md\u003c/code\u003e file and convert it to an HTML page. This lesson's repo, for instance, \u003ca href=\"https://learn-co-curriculum.github.io/hosting-on-github-pages/\"\u003eis also published as a GitHub Page\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eIn addition to this behavior, if we include an \u003ccode\u003eindex.html\u003c/code\u003e in the repository beside the \u003ccode\u003eREADME.md\u003c/code\u003e file, GitHub will automatically display the HTML file instead! This is how we'll be publishing our site.\u003c/p\u003e  \u003cp\u003eTo create and publish your own personal website, the overall process will be:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eCreate a local repository folder\u003c/li\u003e \u003cli\u003eCreate a remote GitHub repository\u003c/li\u003e \u003cli\u003eAdd the new remote to the local repository\u003c/li\u003e \u003cli\u003eCreate an \u003ccode\u003eindex.html\u003c/code\u003e file with some basic content\u003c/li\u003e \u003cli\u003eAdd, commit and push the new content to the remote\u003c/li\u003e \u003cli\u003eEnable GitHub Pages in the remote repository's settings\u003c/li\u003e \u003cli\u003eCheck out the published site\u003c/li\u003e \u003cli\u003eContinue building out the HTML and add CSS and JavaScript files\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eCreating a Local Repository Folder\u003c/h2\u003e  \u003cp\u003eIn the terminal, choose a good location to store your local repository and navigate to it.\u003c/p\u003e  \u003cp\u003eNext, choose a good name for your repo. Names are important. Once you've chosen, create a folder with \u003ccode\u003emkdir\u003c/code\u003e then \u003ccode\u003ecd\u003c/code\u003e into it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emkdir example-repository\u003cbr\u003ecd example-repository \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe'll come back to this folder in just a few moments. Next, we need to create a GitHub remote repository.\u003c/p\u003e  \u003ch2\u003eCreating a New GitHub Repository\u003c/h2\u003e  \u003cp\u003eTo create a new GitHub repository, go to \u003ca href=\"https://github.com/\"\u003ehttps://github.com/\u003c/a\u003e, click the \u003cstrong\u003e+\u003c/strong\u003e icon in the upper-right corner of the screen, and choose 'New repository' in the drop-down menu.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-new-repository-drop-down.png\" alt=\"new repo drop down\"\u003e\u003c/p\u003e  \u003cp\u003eThis will bring you to a page where you can set the new repository's name and other settings\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-new-repository-name.png\" alt=\"set new repo name\"\u003e\u003c/p\u003e  \u003cp\u003eChoose a good name. Names are important. Once the repository is given a name, we'll leave the other options as they are and click the \"Create Repository\" button.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-create-repository.png\" alt=\"create repo\"\u003e\u003c/p\u003e  \u003cp\u003eAn empty repository will be created.\u003c/p\u003e  \u003ch2\u003eAdd The New Remote To Your Local Repository\u003c/h2\u003e  \u003cp\u003eBecause it has no content, you'll be presented with a set of different options for getting things started. This time, we'll choose to \u003cstrong\u003ecreate a new repository on the command line\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-add-remote-repository.png\" alt=\"add remote repo\"\u003e\u003c/p\u003e  \u003cp\u003eNotice that some of the commands shown here have information unique to the repository and GitHub user. Your commands will differ slightly from the examples because of this.\u003c/p\u003e  \u003cp\u003eAll the commands we need to get set up are provided here. You can choose to copy and paste these commands from GitHub one at a time or copy and paste them all at once. We recommend you take a moment to review what each command does:\u003c/p\u003e  \u003cp\u003e1) \u003ccode\u003eecho \"# example-repository\" \u0026gt;\u0026gt; README.md\u003c/code\u003e creates a \u003ccode\u003eREADME.md\u003c/code\u003e file and    adds some markdown. 2) \u003ccode\u003egit init\u003c/code\u003e initializes a local repository in the folder you're currently in    on the command line 3) \u003ccode\u003egit add README.md\u003c/code\u003e stages the newly created \u003ccode\u003eREADME.md\u003c/code\u003e file, getting it    ready to be committed 4) \u003ccode\u003egit commit -m \"first commit\"\u003c/code\u003e creates the repository's first commit,    preserving the newly created \u003ccode\u003eREADME.md\u003c/code\u003e file in the history of the    repository 5) \u003ccode\u003egit branch -M main\u003c/code\u003e ensures the default repository branch is set to \u003ccode\u003emain\u003c/code\u003e 6) \u003ccode\u003egit remote add origin git@github...\u003c/code\u003e associates the remote GitHub repository    with the new local repository. This association is given the name \u003ccode\u003eorigin\u003c/code\u003e. 7) \u003ccode\u003egit push -u origin main\u003c/code\u003e pushes the commit we just created to the remote    repository.\u003c/p\u003e  \u003cp\u003eOnce all commands are executed, refresh your GitHub repository and you should see that the \u003ccode\u003eREADME.md\u003c/code\u003e file now appears on GitHub. With a repository set up, the next step is to create a basic HTML file to serve as the start of our website.\u003c/p\u003e  \u003ch2\u003eBuild an HTML file\u003c/h2\u003e  \u003cp\u003eIn the terminal, create an \u003ccode\u003eindex.html\u003c/code\u003e file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etouch index.html \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOpen this file in your text editor so we can add some basic HTML content. In the file, we'll start with the minimum — a \u003ccode\u003eDOCTYPE\u003c/code\u003e tag indicating HTML and an \u003ccode\u003ehtml\u003c/code\u003e tag containing \u003ccode\u003ehead\u003c/code\u003e and \u003ccode\u003ebody\u003c/code\u003e tags:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html lang=\"en\"\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's give this HTML a \u003ccode\u003etitle\u003c/code\u003e tag and place it inside \u003ccode\u003ehead\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;My Website\u0026lt;/title\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFinally, we'll add a bit of starter content in the \u003ccode\u003ebody\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIncluding some example text to start is important — when we publish the site, we'll be looking for this message to confirm everything worked. The completed file should look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html lang=\"en\"\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;My Website\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSave the file. We now need to commit this file and push it to GitHub:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add index.html\u003cbr\u003egit commit -m \"create basic HTML file\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTime to head back to GitHub!\u003c/p\u003e  \u003ch2\u003ePublish HTML as a GitHub Page\u003c/h2\u003e  \u003cp\u003eIn your GitHub repository, click the \u003cstrong\u003eSettings\u003c/strong\u003e tab:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-settings-tab.png\" alt=\"settings tab\"\u003e\u003c/p\u003e  \u003cp\u003eScroll through the settings until you find the \u003cstrong\u003eGitHub Pages\u003c/strong\u003e section:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-settings.png\" alt=\"settings\"\u003e\u003c/p\u003e  \u003cp\u003eTo enable GitHub Pages, first we need to set the \u003cstrong\u003eSource\u003c/strong\u003e to the default branch. Click the drop-down that says \"None,\" then choose \u003ccode\u003emain\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-select-branch.png\" alt=\"select branch\"\u003e\u003c/p\u003e  \u003cp\u003eOnce set, click \u003cstrong\u003eSave\u003c/strong\u003e:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-save-button.png\" alt=\"save button\"\u003e\u003c/p\u003e  \u003cp\u003eThe page will refresh. Along the top, a banner should appear that states the GitHub Page source was saved:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-source-saved.png\" alt=\"source saved\"\u003e\u003c/p\u003e  \u003cp\u003eScroll back to the \u003cstrong\u003eGitHub Page\u003c/strong\u003e settings. A new message will be present that includes a link to the newly published page:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-site-is-ready-to-be-published.png\" alt=\"site is ready to be published\"\u003e\u003c/p\u003e  \u003cp\u003eNotice the URL isn't \u003ccode\u003egithub.com/\u0026lt;your-username\u0026gt;\u003c/code\u003e, but instead, \u003ccode\u003e\u0026lt;your-username\u0026gt;.github.io\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eClicking on this link immediately may bring you to an error page. It can typically take up to ten minutes for the page to appear after being published, so wait a little bit and refresh. On refresh, you should see your HTML page rendered:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-published-site.png\" alt=\"site published on GitHub\"\u003e\u003c/p\u003e  \u003cp\u003eWoo-hoo!\u003c/p\u003e  \u003ch2\u003eTroubleshooting\u003c/h2\u003e  \u003cp\u003eIn the event that it isn't a woo-hoo for you, here are a few troubleshooting options to try:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eDouble check the GitHub Page settings and make sure \u003ccode\u003emain\u003c/code\u003e is set as the source\u003c/li\u003e \u003cli\u003eIf settings are correct, review the \u003ccode\u003eindex.html\u003c/code\u003e file to make sure there are no typos or syntax errors\u003c/li\u003e \u003cli\u003eCreate a new repository again, but hold off on creating an HTML file. Instead, only create a \u003ccode\u003eREADME.md\u003c/code\u003e file with some example text and use GitHub Pages to publish the repo. Once the Readme file is displaying as a GitHub Page, start going through the HTML file creation process again.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eContinuing To Build\u003c/h2\u003e  \u003cp\u003eWith an \u003ccode\u003eindex.html\u003c/code\u003e file created, it is possible to add additional files to the site to incorporate CSS and JavaScript. One of the great things about GitHub Pages is that your published website will automatically update as you make changes to the repository files and push them to your remote. The process for updating becomes:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eCreate or modify a file\u003c/li\u003e \u003cli\u003eAdd, commit, and push it to your remote\u003c/li\u003e \u003cli\u003eWait a few minutes for GitHub to update your page\u003c/li\u003e \u003cli\u003eVisit your GitHub Page to see the newest changes\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eFrom here, you can choose to do whatever you like and customize your site as you please. However, we recommend adding and connecting two files now: a CSS file to style your HTML, and a JavaScript file to run code and manipulate the DOM.\u003c/p\u003e  \u003ch3\u003eAdd and Connect a CSS File\u003c/h3\u003e  \u003cp\u003eIn the terminal, create a CSS file alongside your \u003ccode\u003eindex.html\u003c/code\u003e file\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etouch style.css \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBefore we connect this file to our HTML, let's add a basic style rule to the file and save it so we'll know when the styling is working.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ebody {\u003cbr\u003e  background: blue;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, to connect this CSS file to our \u003ccode\u003eindex.html\u003c/code\u003e, we need to modify the HTML \u003ccode\u003ehead\u003c/code\u003e to include a \u003ccode\u003elink\u003c/code\u003e tag:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;link rel=\"stylesheet\" href=\"style.css\"\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;My Website\u0026lt;/title\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003elink\u003c/code\u003e tag is used to connect files to the HTML page. Note the tag has two atttributes. The first is \u003ccode\u003erel\u003c/code\u003e, which specifies how the connected file relates to the HTML. In this case, we're indicating that we're relating a \u003cem\u003estylesheet\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eThe second attribute is \u003ccode\u003ehref\u003c/code\u003e, which specifies the location of the file we're linking. Since we've put \u003ccode\u003estyle.css\u003c/code\u003e right beside \u003ccode\u003eindex.html\u003c/code\u003e in our repository, we can just provide the file name here.\u003c/p\u003e  \u003cp\u003eSave the HTML file and open it locally. Your page should now be very blue.\u003c/p\u003e  \u003cp\u003eGo ahead and add some better styling, then add, commit, and push the changes you've made. Remember, since you've added a \u003ccode\u003estyle.css\u003c/code\u003e file and modified the \u003ccode\u003eindex.html\u003c/code\u003e file, we'll need to add both files before committing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add style.css\u003cbr\u003egit add index.html\u003cbr\u003egit commit -m \"add style.css, connect to index.html\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eAdd and Connect a JavaScript File\u003c/h3\u003e  \u003cp\u003eIn the terminal, create a JS file alongside \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etouch script.js \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's add some basic code so we can see something once we've connected the JS file to our HTML file.\u003c/p\u003e  \u003cp\u003eIn \u003ccode\u003escript.js\u003c/code\u003e, let's create an \u003ccode\u003eh2\u003c/code\u003e element and add some text content to it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst h2 = document.createElement('h2');\u003cbr\u003eh2.textContent = \"This content added by JavaScript\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we'll include code to add this \u003ccode\u003eh2\u003c/code\u003e element to the \u003ccode\u003ebody\u003c/code\u003e element in the DOM.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.querySelector('body').appendChild(h2); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSave this and switch over to \u003ccode\u003eindex.html\u003c/code\u003e. To connect \u003ccode\u003escript.js\u003c/code\u003e to our HTML, we add a \u003ccode\u003escript\u003c/code\u003e tag inside \u003ccode\u003ebody\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;script src=\"script.js\"\u0026gt;\u0026lt;/script\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis tag includes a \u003ccode\u003esrc\u003c/code\u003e attribute. Like \u003ccode\u003ehref\u003c/code\u003e from the \u003ccode\u003elink\u003c/code\u003e tag, \u003ccode\u003esrc\u003c/code\u003e specifies the location of the script we want to run. Since \u003ccode\u003escript.js\u003c/code\u003e is side by side with \u003ccode\u003eindex.html\u003c/code\u003e, we just write the file name.\u003c/p\u003e  \u003cp\u003eAfter adding the \u003ccode\u003escript\u003c/code\u003e tag for JavaScript and the \u003ccode\u003elink\u003c/code\u003e tag for CSS, our HTML will look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html lang=\"en\"\u0026gt;\u003cbr\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;link rel=\"stylesheet\" href=\"style.css\"\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;My Website\u0026lt;/title\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt;\u003cbr\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;script src=\"script.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOpen the file locally. In addition to \"Hello World!\" being displayed, you should also see \"This content added by JavaScript,\" confirming the code successfully ran.\u003c/p\u003e  \u003cp\u003eGo ahead and add other JavaScript if you'd like, then add, commit, and push the changes you've made. Since you've added a \u003ccode\u003escript.js\u003c/code\u003e file and modified the \u003ccode\u003eindex.html\u003c/code\u003e file, we'll need to add both files before committing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add script.js\u003cbr\u003egit add index.html\u003cbr\u003egit commit -m \"add script.js, connect to index.html\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRemember when you push changes to GitHub, they will take a few moments to appear in GitHub Pages.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eAs it turns out, the technology we were already using to store our code is also useful for publishing websites. If you have any existing repositories that include HTML, you can now quickly turn your work there into shareable websites.\u003c/p\u003e  \u003cp\u003eIt makes sense if you consider GitHub is \u003cem\u003ealready\u003c/em\u003e storing your code. The work required to display the contents of an HTML file in your browser versus \u003cem\u003erender\u003c/em\u003e that HTML file is similar.\u003c/p\u003e  \u003cp\u003eAs you continue your programming journey, you'll eventually start building parts of websites that can't be published using GitHub. Sites that require a server to store data, for instance, can't be published on GitHub Pages. GitHub is just rendering files it already has; it won't do more work than that. It turns out, that is actually quite a lot, though.\u003c/p\u003e  \u003cp\u003eMany websites are made up of two pieces, a frontend and a backend. The frontend is what the client experiences, what renders in the browser, while the backend handles data storage and other work we don't want to burden the frontend with. GitHub Pages will work well as a host for most frontends, even those using modern frameworks like React. You'll soon see that frontends alone can actually be quite interesting and useful, even without a backend.\u003c/p\u003e  \u003cp\u003eFor simpler websites — personal sites, projects, etc... — GitHub pages is a great, free option for publishing content online.\u003c/p\u003e","exportId":"hosting-a-website-on-github-pages"},{"id":157891,"title":"Project: Build a Personal Website","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-final-project\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-final-project/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-final-project\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-final-project/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Objectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild a website\u003c/li\u003e\n\u003cli\u003ePublish a website\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou've been learning HTML, CSS, and JavaScript over the previous lessons. You've been\nreceiving specific guidance (\"Use a \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag!\") and have been steered by\nour documentation or tests. In an effort to help you build your confidence, we're\ngoing to give you \u003cem\u003enothing\u003c/em\u003e except some specifications and leave the document\nstructure and styling \u003cem\u003eto you\u003c/em\u003e.  It's time to tie all your learning together\ninto one project. You must create...\u003c/p\u003e\n\n\u003cp\u003e...\u003cem\u003ea personal website\u003c/em\u003e!\u003c/p\u003e\n\n\u003cp\u003eProfessional software engineers and web developers often have a personal\nwebsite. In some ways, it is the industry's alternative to a business card. A\npersonal website can showcase your abilities while also giving visitors a sense\nof your personality.\u003c/p\u003e\n\n\u003ch2\u003eRequirements\u003c/h2\u003e\n\n\u003cp\u003eThis project is an opportunity to showcase what you've learned so far, so it is\nimportant that HTML, CSS, and JavaScript are incorporated into the project in\nsome way. For example, you could use a \u003ccode\u003emouseover\u003c/code\u003e event to change the\nappearance of an element when the user mouses over it. Or use a \u003ccode\u003eclick\u003c/code\u003e event to\ntoggle some content between being visible and hidden. There are a variety of\nways to do this using the CSS and JavaScript you've learned so far, but don't\nforget you can always use Google if you get stuck. Google is an invaluable tool\nfor developers! Try to use this project as an opportunity to stretch your coding\nskills!\u003c/p\u003e\n\n\u003cp\u003eThe content, styling, and functionality of your site are up to you. Keep in mind\nthat you may show this project to your peers and future instructors, so be\nconsiderate of content/subject matter and your potential audience.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started and a Recommended Workflow\u003c/h2\u003e\n\n\u003cp\u003eReview the previous lesson, \u003cstrong\u003eHost a Site on GitHub\u003c/strong\u003e, for guidance on setting\nup the necessary HTML, CSS, and JS files, and instructions on how to publish a\nsite on GitHub Pages.\u003c/p\u003e\n\n\u003cp\u003eWe recommend going through these steps first — create and connect the necessary\nfiles \u003cem\u003eand\u003c/em\u003e get them published before diving into writing too much HTML and\nJavaScript. If you've got everything published, you'll be able to continuously\npush updates to your site \u003cem\u003eas you build it\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn general, when it comes to building code-related projects, it is often best to\nestablish a routine of making small improvements, checking to make sure those\nimprovements work and don't break things. After creating the basic files and\nconnecting them, open your HTML file in a browser tab and your files in a code\neditor, this routine might look something like the following:\u003c/p\u003e\n\n\u003cp\u003e1) Write some HTML, CSS or JavaScript\n2) Go to your browser and refresh the page to see the changes\n3) Adjust your code and repeat until you're satisfied\n4) Move on to the next task and repeat the process\u003c/p\u003e\n\n\u003cp\u003eIt is very common to get lost in coding and to keep going from one task to the\nnext without checking your work. The problem here is that if you make a mistake\nit becomes more and more difficult to spot the error and can cause you to\nbacktrack and spend extra time debugging.\u003c/p\u003e\n\n\u003cp\u003eBy frequently checking your work, you'll set your own project milestones — at\neach one, you can verify everything is working so when you \u003cem\u003edo\u003c/em\u003e make a mistake,\nyou'll know it was made recently.\u003c/p\u003e\n\n\u003ch2\u003eProfessional Git Development Workflow\u003c/h2\u003e\n\n\u003cp\u003eWhen it comes to Git, there is ultimately no rule that says you \u003cem\u003emust\u003c/em\u003e do things\na certain way. However, if there was anything we could impart to you regarding\ngood version control habits, it would be this — commit code frequently.\u003c/p\u003e\n\n\u003cp\u003eAs mentioned, it is a common habit to dive into the code of a project and write\nas much as you can, for as long as you can. However, not only does this increase\nthe chance for bugs, it will result in very large Git commits or just \u003cem\u003eone\u003c/em\u003e big\ncommit for everything.\u003c/p\u003e\n\n\u003cp\u003eRepositories with a good commit history can relay a story about their\ndevelopment from just the commit messages alone. For example, instead of the\ncommit history looking like this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCommit 1: \"Initialize Repository\"\u003c/li\u003e\n\u003cli\u003eCommit 2: \"Finish website\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA good history might look closer to this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCommit 1: \"Initialize Repository\"\u003c/li\u003e\n\u003cli\u003eCommit 2: \"Add basic HTML, CSS and JavaScript files\"\u003c/li\u003e\n\u003cli\u003eCommit 3: \"Create initial HTML content\"\u003c/li\u003e\n\u003cli\u003eCommit 4: \"Add CSS rules\"\u003c/li\u003e\n\u003cli\u003eCommit 5: \"Fix syntax issue in HTML\"\u003c/li\u003e\n\u003cli\u003eCommit 6: \"Finish bio/about section\"\u003c/li\u003e\n\u003cli\u003eCommit 7: \"Add JS event listeners\"\u003c/li\u003e\n\u003cli\u003eetc...\u003c/li\u003e\n\u003cli\u003eCommit 22: \"Adjust styling for new HTML layout\"\u003c/li\u003e\n\u003cli\u003eCommit 23: \"Finish website\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe commit messages here suggest that each commit above addressed a small, often\n\u003cem\u003esingular\u003c/em\u003e task.\u003c/p\u003e\n\n\u003cp\u003eGood commit practices are critical for large companies and organizations where\nmany developers are working on large code-bases — in these cases, limiting\nthe size of commits makes it easier for others to understand what changes the\ncommit brings. If a commit introduces a bug into the code base, it is fairly\neasy to revert a \u003cem\u003esmall\u003c/em\u003e commit. A big commit, on the other hand, may require\nlots of extra work to untangle and fix.\u003c/p\u003e\n\n\u003cp\u003eFor personal development, though, the same concerns apply. In addition, when you\nstart building more complex projects, you may find yourself in situations where\nyou'd like to go back to an earlier version of a project. Taking the time now to\nbuild good habits will help you many times over in the future. Think of good\nversion control habits as a favor to your future self!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eOnce you've finished building your website, make sure to push it all up to\nGitHub. If you followed our advice and set up GitHub Pages first, you've now\nsuccessfully built \u003cem\u003eand\u003c/em\u003e published a website! Fantastic work!\u003c/p\u003e","exportId":"project-build-a-personal-website"},{"id":243614,"title":"Survey - Project Mode","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Project Mode module?\u003c/p\u003e\n\u003c/div\u003e","exportId":"gca6f7c6c7e6d29c80fd72994225d7988"}]},{"id":18583,"name":"End of Phase Assessment","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gfa4552b1e5e19f9c04f70dcbaaf922fb","items":[{"id":170557,"title":"Phase 0/Pre-Work Assessment","type":"Quizzes::Quiz","indent":0,"locked":false,"assignmentExportId":"ge75a0cd65a357241646ceeac7e747e12","questionCount":36,"timeLimit":null,"attempts":3,"graded":true,"pointsPossible":36.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cp\u003eThis quiz is meant to assess what you've learned from pre-work and includes questions on the major concepts we've covered. We recommend reviewing the Git, HTML, CSS, and JavaScript topics discussed so far.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eIf you don't know the answer to a question, you can select \"I don't know\". It's OK not to know everything and to admit when we're unsure.\u003c/span\u003e\u003c/p\u003e","exportId":"g73c88b26f11a092929bb5af223eb18cf"}]},{"id":18586,"name":"Preparing for Phase 1","status":"unlocked","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g1755be116b4fb3e78b7394c06161434e","items":[{"id":170560,"title":"Configuring the Flatiron Student Portal","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"macos-env-flatiron-student-portal\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/macos-env-flatiron-student-portal/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/macos-env-flatiron-student-portal\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/macos-env-flatiron-student-portal/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eAs you continue your journey into programming, you will learn to use many tools to make your work easier that you only \u003cem\u003esort of\u003c/em\u003e understand. Node packages, Ruby gems, libraries, command-line applications, frontend frameworks, etc... many of these tools are actually built out of \u003cem\u003eother\u003c/em\u003e tools, things you may never have heard of. That is okay.\u003c/p\u003e  \u003cp\u003eThanks to the collective work of many programmers around the world, we're able to tap in to a diverse ecosystem of tools. We don't need to know how they all work together for them to be useful to us. You might one day know JavaScript well enough to build your own version of \u003ca href=\"https://reactjs.org/\"\u003eReact\u003c/a\u003e, but you'll be able to use React long before you know how all the parts work. Many of these tools are designed to solve problems so we can focus our energy and time elsewhere.\u003c/p\u003e  \u003cp\u003eWe've already used a few tools to help us get started with programming. If you recall from the previous installation instructions, we've installed NVM, the Node Version Manager, which manages which version of Node you're using on your computer. We've been using NPM, Node \u003cstrong\u003ePackage\u003c/strong\u003e Manager, to run local tests. We've also been using Git in the command line to interface remotely with GitHub.\u003c/p\u003e  \u003cp\u003eIn this lesson, we're going to introduce another tool that will help us going forward, the \u003ccode\u003elearn-co\u003c/code\u003e gem.\u003c/p\u003e  \u003ch2\u003eThe \u003ccode\u003elearn-co\u003c/code\u003e Gem\u003c/h2\u003e  \u003cp\u003eSo, if all these tools we use are meant to solve problems, what problems does the \u003ccode\u003elearn-co\u003c/code\u003e gem solve?\u003c/p\u003e  \u003cp\u003eIn your assignments so far, after cloning a repository, you typically do a few things while working through the assignment:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eRun \u003ccode\u003enpm install\u003c/code\u003e or \u003ccode\u003ebundle\u003c/code\u003e to install any necessary dependencies for the repository (\u003cem\u003e...tools others have built to make things easier for us\u003c/em\u003e)\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eRun \u003ccode\u003enpm test\u003c/code\u003e or \u003ccode\u003erspec\u003c/code\u003e to run tests\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eGit commit and push your work to your GitHub remote repo\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eOnce you've pushed your solution up to GitHub, you then have to submit a link in Canvas.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003elearn-co\u003c/code\u003e gem will take care of all of these steps using a single command, \u003ccode\u003elearn test\u003c/code\u003e! Let's get the gem installed and configured so we can test it out.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The instructions here assume you've successfully installed Ruby and Node in the previous environment setup instructions.\u003c/p\u003e  \u003ch2\u003eInstall the \u003ccode\u003elearn-co\u003c/code\u003e Gem\u003c/h2\u003e  \u003cp\u003eTo install the gem, run the following in your terminal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egem install learn-co \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBefore we can use the gem, we'll need to do a few things:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eConnect your Flatiron School Portal account to GitHub\u003c/li\u003e \u003cli\u003eConnect the local gem to your Flatiron School Portal account\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eConnect Your GitHub Account to your Flatiron School Portal Account\u003c/h2\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \u003ca href=\"https://portal.flatironschool.com\"\u003eFlatiron School Student Portal webpage\u003c/a\u003e (\u003ca href=\"https://portal.flatironschool.com\"\u003ehttps://portal.flatironschool.com\u003c/a\u003e) \u003cem\u003e(Note: you need to be logged in to Flatiron School Student Portal.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eNavigate to your \u003ca href=\"https://learn.co/account\"\u003eAccount Management page\u003c/a\u003e (\u003ca href=\"https://learn.co/account\"\u003ehttps://learn.co/account\u003c/a\u003e) via the drop-down menu in the upper right corner of the page\u003c/li\u003e \u003cli\u003eOpen the \u003ca href=\"https://learn.co/account/github\"\u003eConnected Apps tab\u003c/a\u003e (\u003ca href=\"https://learn.co/account/github\"\u003ehttps://learn.co/account/github\u003c/a\u003e) \u003cem\u003e(Note: you may be asked to log in. Use your Flatiron School Student Portal username and password here.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eConnect your GitHub account to your Flatiron School Portal account\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eYou should now see something similar to this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/configuring-the-flatiron-student-portal/Github_connected.png\" alt=\"Github Successfully Connected\"\u003e\u003c/p\u003e  \u003ch2\u003eConfigure the \u003ccode\u003elearn-co\u003c/code\u003e Gem\u003c/h2\u003e  \u003cp\u003eThis step will ask you to do work both in your browser and your terminal.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application (or \"Ubuntu\" for WSL users).\u003c/li\u003e \u003cli\u003eType \u003ccode\u003etouch ~/.netrc \u0026amp;\u0026amp; chmod 0600 ~/.netrc\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. \u003cem\u003e(Note: you may be asked to enter your password.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eGo to your \u003ca href=\"https://portal.flatironschool.com/account/profile\"\u003ePublic Profile Management webpage\u003c/a\u003e (\u003ca href=\"https://portal.flatironschool.com/account/profile\"\u003ehttps://portal.flatironschool.com/account/profile\u003c/a\u003e) in your browser. \u003cem\u003e(Note: if you’re not logged in, you will need to log in again.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eLook for the \"Username\" heading and copy your username, but do not copy the text \u003ccode\u003ehttps://learn.co/\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eGo to your Flatiron School Student Portal Profile page (\"\u003ca href=\"https://portal.flatironschool.com/\"\u003ehttps://portal.flatironschool.com/\u003c/a\u003e\" + your username).\u003c/li\u003e \u003cli\u003eScroll all the way to the bottom of the page to the heading \"The information below is sensitive and unique to your account. Only you can view this information.\" with a red background.\u003c/li\u003e \u003cli\u003eCopy the string of characters under the \"OAuth token\" header.\u003c/li\u003e \u003cli\u003eGo back to the terminal, type \u003ccode\u003elearn whoami\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e.\u003c/li\u003e \u003cli\u003ePaste the string of characters at the prompt and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003cp\u003eType \u003ccode\u003elearn whoami\u003c/code\u003e in the terminal. If you see a message with your name, username, and email, you've successfully configured the gem.\u003c/p\u003e  \u003ch2\u003eUsing the \u003ccode\u003elearn-co\u003c/code\u003e Gem\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003elearn-co\u003c/code\u003e gem replaces some steps in the assignment workflow you've learned so far and alters others. Let's walk through the updated process. Use this assignment to follow along:\u003c/p\u003e  \u003cp\u003e1) On this assignment's Canvas page, click the \u003cstrong\u003eFork\u003c/strong\u003e button in the upper    right corner of the page:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fork-link.png\" alt=\"fork buttton\"\u003e\u003c/p\u003e  \u003cp\u003eYou should notice a change in the button's behavior — rather than bringing    you to the fork page in GitHub, you'll be redirected to your repository    \u003cem\u003ealready in the process\u003c/em\u003e of being forked.\u003c/p\u003e  \u003cp\u003e2) Once your fork is ready, click the \u003cstrong\u003eCode\u003c/strong\u003e button and copy the \u003cstrong\u003eSSH\u003c/strong\u003e     repository info by clicking the clipboard button.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/canvas-welcome/clone-with-ssh.png\" alt=\"clone with SSH\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Make sure you're choosing SSH and not HTTPS.\u003c/p\u003e  \u003cp\u003e3) In your terminal, navigate to where you'd like to put this repository     locally, clone it down and navigate into the folder.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit clone git@github.com:/macos-env-flatiron-student-portal.git\u003cbr\u003ecd macos-env-flatiron-student-portal \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e4) Instead of running \u003ccode\u003enpm install\u003c/code\u003e and \u003ccode\u003enpm test\u003c/code\u003e (or \u003ccode\u003ebundle\u003c/code\u003e and \u003ccode\u003erspec\u003c/code\u003e),     you can now run one command, \u003ccode\u003elearn test\u003c/code\u003e, to handle this step.  This command     will automatically run the installation and test commands. You should see a     flurry of text as dependencies are installed, then the results of your test.     This assignment has the same test as the previous \u003cstrong\u003eComplete Your First     Software Engineering Assignment\u003c/strong\u003e. By cloning this assignment down, you've     already passed the test!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eThis assignment\u003cbr\u003e    ✓ has been correctly cloned to your local environment\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  1 passing (5ms)  \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen all tests are passing, you can head back to the assignment on Canvas. Refresh the assignment page and you should see that Canvas now registers the assignment as both \u003cstrong\u003eSubmitted\u003c/strong\u003e and \u003cstrong\u003eComplete\u003c/strong\u003e. A URL to your fork of the assignment has been submitted in Canvas, so you are ready to move on to the next lesson.\u003c/p\u003e  \u003cp\u003eEach assignment will be different and will include instructions on what is required to complete it. Some labs will have many tests. You can run \u003ccode\u003elearn test\u003c/code\u003e as many times as you'd like while working to solve these labs. You will submit your work to Canvas each time you do, but the assignment will be marked \u003cstrong\u003eIncomplete\u003c/strong\u003e until all tests are passing.\u003c/p\u003e  \u003ch3\u003eYour Work in GitHub\u003c/h3\u003e  \u003cp\u003eEvery time you run \u003ccode\u003elearn test\u003c/code\u003e, all the changes you've made locally will be stored on your GitHub fork of the repo. If you head back to your repo after running \u003ccode\u003elearn test\u003c/code\u003e, you should see a message that a new branch, \u003ccode\u003efis-wip\u003c/code\u003e, has been created. This branch contains the work you've done so far. If you ever want to go back to a previous solution, go to that repository on GitHub and switch to the \u003ccode\u003efis-wip\u003c/code\u003e branch.\u003c/p\u003e  \u003cp\u003eYou no longer need to commit and push your local work for these assignments.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e if you see the following message on your repo's page in GitHub, please disregard it: \u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/configuring-the-student-portal/fis-wip.jpg\" alt=\"pr_prompt\"\u003e\u003c/p\u003e  \u003ch2\u003eTypes of Assignments\u003c/h2\u003e  \u003cp\u003eFor most assignments, you will go through the process we just walked through. In our curriculum, these assignments are often referred to as \u003cstrong\u003elabs\u003c/strong\u003e — coding lessons that include tests. There are a few other types of assignments, though, that require slightly different submission steps:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eCode-alongs:\u003c/strong\u003e These also require code, but will guide you through what needs to be written. There are no tests to pass, but you will still need to go through forking, cloning, and running \u003ccode\u003elearn test\u003c/code\u003e. You should see a message stating that no tests were found, but if you check the assignment in Canvas, you should see it is marked as \u003cstrong\u003eComplete\u003c/strong\u003e.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003ePortfolio Projects:\u003c/strong\u003e For these assignments, you'll be building fully functional applications. Some guidelines and requirements will be provided, but it will be up to you to design and create your own app. These will eventually become the projects you showcase to potential employers! You will submit your projects in Canvas by submitting a link to your GitHub repo.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eBlog Submissions:\u003c/strong\u003e Blogs are a required part of our Software Engineering courses. They help to develop your online presence and are a great way to reinforce the concepts you learn. You'll write your blog posts on a different platform, but submit links to them in Canvas.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eSubmitting Projects and Blogs\u003c/h2\u003e  \u003cp\u003eFor both portfolio projects and blog posts, you'll need to manually submit a link to your work on Canvas. While viewing the assignment, you should see a \u003cstrong\u003eSubmit Assignment\u003c/strong\u003e button in the upper-right section of the page.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/canvas-welcome/submit-assignment-canvas.png\" alt=\"submit assignment button\"\u003e\u003c/p\u003e  \u003cp\u003eClicking this button will bring you to the bottom of the page where you can submit a URL link to your work.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/canvas-welcome/submit-assignment-canvas-form.png\" alt=\"submit assignment form\"\u003e\u003c/p\u003e  \u003cp\u003eUpon submission you should see confetti appear, indicating that your submission has been accepted.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It is possible to submit lab and code-along assignments manually this way. However, the assignment will only be marked as \u003cstrong\u003eSubmitted\u003c/strong\u003e, not \u003cstrong\u003eComplete\u003c/strong\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eYou've completed your first assignment using the \u003ccode\u003elearn-co\u003c/code\u003e gem! You now know how to work on and submit assignments going forward:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eClick the \u003cstrong\u003eFork\u003c/strong\u003e button on the Canvas assignment\u003c/li\u003e \u003cli\u003eOnce the assignment is forked, clone it down to your local machine\u003c/li\u003e \u003cli\u003eComplete any required work, then run \u003ccode\u003elearn test\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eIf all tests pass, the assignment will be submitted to Canvas and marked as \u003cstrong\u003eComplete\u003c/strong\u003e\n\u003c/li\u003e \u003cli\u003eYour work will also be pushed to GitHub and will be available on the \u003ccode\u003efis-wip\u003c/code\u003e branch\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eEquipped with this knowledge, you are now ready to tackle greater challenges!\u003c/p\u003e","exportId":"g8b8ee3a8e0ba8f4de8dd8f7f431e6679"}]}],"pages":[{"exportId":"expanding-your-html-vocabulary-via-mdn","title":"Expanding Your HTML Vocabulary via MDN","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-basics-expanding-html-vocabulary\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-expanding-html-vocabulary\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-expanding-html-vocabulary/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify the Mozilla Foundation and MDN\u003c/li\u003e \u003cli\u003eNavigate the MDN Reference Guide\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eBecause of the pace of change in web technologies, it often feels like as soon as you learn something it's already obsolete. How can a developer stay up-to-date? Developers need to be able to reference the latest documentation in a just-in-time fashion.\u003c/p\u003e  \u003cp\u003eWhen you have a question, you should consult the best source, take what you need, and use it. The purpose of this README is to help you get oriented with a popular source of HTML documentation, the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\"\u003eMozilla Developer Network (MDN)\u003c/a\u003e.\u003c/p\u003e  \u003ch2\u003eIdentify the Mozilla Foundation and MDN\u003c/h2\u003e  \u003cp\u003eThe Mozilla Foundation is an open-source company that has a long history with browsers and browser technology.\u003c/p\u003e  \u003cp\u003eMozilla is a reliable reference for the latest HTML tags.  There are many other sites online that exist to discuss these tags, but when you want a thorough explanation of a tag, Mozilla is often a great choice.\u003c/p\u003e  \u003cp\u003eThere are some drawbacks in using MDN.  Because Mozilla is so trusted, their information tends to be ... \u003cem\u003eexhaustive\u003c/em\u003e.  Because it's so \u003cem\u003eahem\u003c/em\u003e thorough, it can sometimes be hard to digest.  Their information tends to be for \u003cem\u003ereference\u003c/em\u003e, not \u003cem\u003etutorial\u003c/em\u003e purposes.\u003c/p\u003e  \u003cp\u003eDrawbacks aside, MDN is a good solid starting place for research and it can take you from \"Does something like this exist?\" to \"Now I know that this thing exists, maybe I can find a tutorial!\"\u003c/p\u003e  \u003ch2\u003eNavigate the MDN Reference Guide\u003c/h2\u003e  \u003cp\u003eThe \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\"\u003eMDN HTML Reference Guide\u003c/a\u003e is a list of HTML tags grouped together by their functions. These sections are not entirely \"human readable,\" which makes it a bit difficult to understand where to start looking.  Some of the headings are very technical-sounding.\u003c/p\u003e  \u003cp\u003eTo help you find what you need  in this listing, we've created this helpful table to help you convert between MDN-ese and  the HTML terms you have learned. We've also listed only the MDN content  sections that you're most likely to use:\u003c/p\u003e  \u003cp\u003e\u003cem\u003eSummary of the MDN HTML reference guide\u003c/em\u003e\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\u003ctr\u003e     \u003cth\u003eMDN Section Title\u003c/th\u003e     \u003cth\u003eHuman-Friendly Section Title\u003c/th\u003e     \u003cth\u003eSummary\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eMain Root\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eThe \u003ccode\u003ehtml\u003c/code\u003e tag\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eThe \u003ccode\u003ehtml\u003c/code\u003e tag and that's it!\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eDocument metadata\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eWebsite data that goes in the \u003ccode\u003ehead\u003c/code\u003e tag\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eMetadata contains information about the page. Information about styles, scripts and data to help software (search engines,\u0026nbsp;browsers, etc.) use and render the page.\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e     \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eSectioning Root\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eThe \u003ccode\u003ebody\u003c/code\u003e tag\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eThe \u003ccode\u003ebody\u003c/code\u003e tag and that's it!\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eContent sectioning\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eHeadings, titles, divs, sections, footers, etc.\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eContent sectioning elements allow you to organize the document content into logical pieces.\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eText content\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eFormatting for text: list items, horizontal rules, figures listings for under images\u003c/td\u003e     \u003ctd\u003eUse HTML text content elements to organize blocks or sections of content placed between the opening and closing\u0026nbsp;\u003ccode\u003ebody\u003c/code\u003e\u0026nbsp;tags.\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eInline text semantics\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eCitation, emphasis, underlines, etc.\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eUse the HTML inline text semantics to define the meaning, structure, or style of a word, line, or any arbitrary piece of text.\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eImage and multimedia\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eAdding pictures and media!\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eHTML supports various multimedia resources such as images, audio, and video.\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eEmbedded content\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eAdvanced: Using material hosted elsewhere on other servers, \u003ccode\u003eiframe\u003c/code\u003e is the biggie here\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eIn addition to regular multimedia content, HTML can include a variety of other content, even if it's not always easy to interact with.\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eScripting\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eAdvanced: JavaScript and Drawing Support (Vector Graphics)\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eIn order to create dynamic content and Web applications, HTML supports the use of scripting languages, most prominently JavaScript. Certain elements support this capability.\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eTable content\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eTables\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eTables\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003cstrong\u003eForms\u003c/strong\u003e\u003c/td\u003e     \u003ctd\u003eAdvanced: Tags for building forms for sign-up or login, for example\u003c/td\u003e     \u003ctd\u003e\u003cem\u003eHTML provides a number of elements that can be used together to create forms which the user can fill out and submit to the Web site or application. There's a great deal of further information about this available in the\u0026nbsp;HTML forms guide.\u003c/em\u003e\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eAs developers, we will often feel uncomfortable with the fact that the technologies we depend on are always growing and changing. With authoritative guides like \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\"\u003eMDN\u003c/a\u003e, we have found out that we can learn just the little bit we need as we need it.\u003c/p\u003e","frontPage":false},{"exportId":"the-dom-is-a-tree","title":"The DOM Is a Tree","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-is-a-tree\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-is-a-tree/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-is-a-tree\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-is-a-tree/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDescribe how the DOM works as a tree\u003c/li\u003e\n\u003cli\u003eDefine the computer science version of \"Tree\"\u003c/li\u003e\n\u003cli\u003eAsk the DOM to find or \"select\" an HTML element or elements in the rendered\npage\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eDOM programming is using JavaScript to:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAsk the DOM to find an HTML element or elements in the rendered page\u003c/li\u003e\n\u003cli\u003eRemove the selected element(s) or add a new element next to the selected\nelement\u003c/li\u003e\n\u003cli\u003eAdjust a property of the selected element(s)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn previous lessons we were given the command to find the HTML element we\nwanted:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.querySelector(selector)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003cem\u003eselector\u003c/em\u003e is like a query string that lets us find things within an HTML\npage. What is the syntax of this \u003cem\u003eselector\u003c/em\u003e? How does the \u003cem\u003eselector\u003c/em\u003e navigate\nthrough our document to find the DOM nodes that we want to work with (update,\nmove, even delete!)?\u003c/p\u003e\n\n\u003cp\u003eTo understand those queries or \u003cem\u003eselectors\u003c/em\u003e, we first need to talk about how the\nDOM tree (i.e. what we see in the 'Elements' panel of our DevTools) is used to\nhelp the DOM's \u003ccode\u003emethods\u003c/code\u003e find the right nodes.\u003c/p\u003e\n\n\u003ch3\u003eDefine the Computer Science Version of \"Tree\"\u003c/h3\u003e\n\n\u003cp\u003eWhat do we mean when we say that the DOM is a tree? Trees make a good metaphor\nfor the DOM because almost everyone has seen a tree. Starting at the bottom, you\ncan climb up the tree and out to the farthest — and smallest —\nbranches. The thicker a branch is, the stronger its connections are and the more\nit holds within it. Likewise, the thinner a branch is, the less it holds inside.\u003c/p\u003e\n\n\u003cp\u003eThe DOM works basically the same way, except we usually talk about the root as\nbeing at the top of the DOM and the leaves being the most deeply nested HTML\nelements. So basically, we can imagine a tree upside down.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-the-dom-tree/Image_6_DomTree.png\" alt=\"DOM Tree Graphic\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe HTML for this \"tree\" would be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE HTML\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;My Title\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;A heading\u0026lt;/h1\u0026gt;\u0026lt;a href=\"http://example.com\"\u0026gt;Link text\u0026lt;/a\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eDescribe How the DOM Works as a Tree\u003c/h3\u003e\n\n\u003cp\u003eEvery tree can contain subtrees, which we can treat independently of their\nparent trees. They repeat the pattern and appearance of the full tree, despite\nbeing a smaller part of a tree, like branches. Every child has experienced this\nsense of wonder when they take a fallen branch and stick it in the ground and\nthink that they've planted their own tree.\u003c/p\u003e\n\n\u003cp\u003ePractically speaking, the DOM begins at \u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e, but for now we should avoid\nchanging what's between the \u003ccode\u003e\u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;\u003c/code\u003e tags. Most of the time, we will look\nat the DOM subtree with its root at \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e and only change things that will be\nvisible on the page. We might also deal with subtrees. For example, if we have\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Hi!\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;Bye!\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur tree looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e        body\u003cbr\u003e        /  \\\u003cbr\u003e      div   div\u003cbr\u003e      /      \\\u003cbr\u003e     p        p\u003cbr\u003e    /          \\\u003cbr\u003e \"Hi!\"        \"Bye!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSimilarly, if we had a DOM subtree that looked like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Hello!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;h5\u0026gt;Sup?\u0026lt;/h5\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe tree would look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e         div\u003cbr\u003e        /  \\\u003cbr\u003e      div   div\u003cbr\u003e      /      \\\u003cbr\u003e    h1        h5\u003cbr\u003e    /          \\\u003cbr\u003e \"Hello!\"     \"Sup?\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eAsk the DOM to Find or \"select\" an HTML Element or Elements in the Rendered Page\u003c/h3\u003e\n\n\u003cp\u003eIn creating the HTML for a page, including \u003cem\u003emetadata\u003c/em\u003e for a node (e.g., a \u003ccode\u003eclass\u003c/code\u003e\nor \u003ccode\u003eid\u003c/code\u003e attribute) will not only provide useful information about that node, but\nwill also make it and its children easier to find. The more specific the\nmetadata is, the more helpful it is for finding the desired element.\u003c/p\u003e\n\n\u003cp\u003eFor the following exercises, you can experiment with any web page you like. It's\nfun to change \u003cem\u003eThe New York Times\u003c/em\u003e or Facebook.\u003c/p\u003e\n\n\u003ch4\u003eFinding a Node\u003c/h4\u003e\n\n\u003cp\u003eJavaScript exposes a few ways of finding DOM nodes, either directly or in\nstages, courtesy of the \u003ccode\u003edocument\u003c/code\u003e object. We will introduce three here, in\norder from most to least specific: \u003ccode\u003egetElementByID()\u003c/code\u003e,\n\u003ccode\u003egetElementsByClassName()\u003c/code\u003e, and \u003ccode\u003egetElementsByTagName()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003edocument.getElementById()\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis method provides the quickest access to a node, but it requires that we know\na very specific piece of information — its \u003ccode\u003eid\u003c/code\u003e. This method can only\nreturn one element, since CSS \u003ccode\u003eid\u003c/code\u003es are expected to be unique.\u003c/p\u003e\n\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;h5 id=\"greeting\"\u0026gt;Hello!\u0026lt;/h5\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could find the \u003ccode\u003eh5\u003c/code\u003e element with \u003ccode\u003edocument.getElementById('greeting')\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNotice how the \u003ccode\u003eid\u003c/code\u003e that we pass to \u003ccode\u003egetElementById\u003c/code\u003e is identical to the \u003ccode\u003eid\u003c/code\u003e in\n\u003ccode\u003e\u0026lt;h5 id=\"greeting\"\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can use either single(\u003ccode\u003e''\u003c/code\u003e) or double(\u003ccode\u003e\"\"\u003c/code\u003e) quotes around the \u003ccode\u003eid\u003c/code\u003e\nwithin the parentheses in \u003ccode\u003edocument.getElementById('yourIDGoesHere')\u003c/code\u003e, as long\nas you use the same kind to open and close them!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eOpen up your DevTools and find an element on the page that has an \u003ccode\u003eid\u003c/code\u003e\nattribute. Then open up your console, type\n\u003ccode\u003edocument.getElementById('theIdOfTheElement')\u003c/code\u003e, and check out your handy-dandy\nDOM node.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis one is also very commonly used in DOM programming.\u003c/p\u003e\n\n\u003cp\u003eThis method finds elements by their \u003ccode\u003eclassName\u003c/code\u003e. Unlike the previous method,\nclass names do not need to be unique, so this method returns an \u003ccode\u003eHTMLCollection\u003c/code\u003e\nof all the elements with the given class. An \u003ccode\u003eHTMLCollection\u003c/code\u003e is an array-like\nstructure containing a list of elements. You can iterate over an\n\u003ccode\u003eHTMLCollection\u003c/code\u003e with a simple \u003ccode\u003efor\u003c/code\u003e loop.\u003c/p\u003e\n\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- the `className` attribute is called `class` in HTML  --\u0026gt;\u003cbr\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;div class=\"banner\"\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Hello!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div class=\"banner\"\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Sup?\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div class=\"banner\"\u0026gt;\u003cbr\u003e    \u0026lt;h5\u0026gt;Tinier heading\u0026lt;/h5\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could find all of the elements with the class name \"banner\" by calling\n\u003ccode\u003edocument.getElementsByClassName('banner')\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eInspect your web page again, this time making note of a \u003ccode\u003eclass\u003c/code\u003e. Get all\nelements with that \u003ccode\u003eclass\u003c/code\u003e and give 'em a look. On the returned object you can\nuse the \u003ccode\u003e.length\u003c/code\u003e property to find out how many came back.\u003c/p\u003e\n\n\u003cp\u003eIf you recall the \u003ccode\u003efor\u003c/code\u003e loop syntax you might try to write a loop which prints\nout the \u003ccode\u003einnerHTML\u003c/code\u003e property of every element in the collection. You might find\ndoing so much easier if you save the results of\n\u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e to a variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst elements = document.getElementsByClassName('yourClassNameHere');\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003e\u003ccode\u003edocument.getElementsByTagName()\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eYou can use this method if you \u003cem\u003edon't\u003c/em\u003e know an element's \u003ccode\u003eid\u003c/code\u003e or \u003ccode\u003eclass\u003c/code\u003e, but\nyou \u003cem\u003edo\u003c/em\u003e know its tag name (the tag name is the thing between the \u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e, e.g.,\n\u003ccode\u003e'div'\u003c/code\u003e, \u003ccode\u003e'h1'\u003c/code\u003e, \u003ccode\u003eheader\u003c/code\u003e, \u003ccode\u003earticle\u003c/code\u003e etc.).  Since tag names aren't unique, this\nmethod also returns an \u003ccode\u003eHTMLCollection\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eExplore the DOM in the console by typing \u003ccode\u003edocument.getElementsByTagName('div')\u003c/code\u003e.\nYou can iterate through these elements using a simple \u003ccode\u003efor\u003c/code\u003e loop as well.\u003c/p\u003e\n\n\u003ch4\u003eFinding a Node Without Knowing Anything About It\u003c/h4\u003e\n\n\u003cp\u003eWhat if we don't have an \u003ccode\u003eid\u003c/code\u003e or \u003ccode\u003eclassName\u003c/code\u003e to help us find a particular\nelement? This is where our knowledge of trees comes in handy!\u003c/p\u003e\n\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;main\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/main\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHow would we go about changing only the second \"Hello!\" to \"Goodbye!\"?\u003c/p\u003e\n\n\u003cp\u003eHere we're going to use a mix of different \u003ccode\u003emethods\u003c/code\u003e to accomplish the goal.\u003c/p\u003e\n\n\u003cp\u003eLet's start by getting the \u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e element\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst main = document.getElementsByTagName('main')[0];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can get the children of \u003ccode\u003emain\u003c/code\u003e using \u003ccode\u003emain.children\u003c/code\u003e. This returns an\n\u003ccode\u003eHTMLCollection\u003c/code\u003e, so we can get the second child with \u003ccode\u003emain.children[1]\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst secondChild = main.children[1];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, we can get our \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e element. To constrain the search to just the children\nof the second child, we can call \u003ccode\u003egetElementsByTagName()\u003c/code\u003e \u003cstrong\u003edirectly on\n\u003ccode\u003esecondChild\u003c/code\u003e\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst p = secondChild.getElementsByTagName('p')[0];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd lastly we can change an attribute on the \u003ccode\u003ep\u003c/code\u003e node:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ep.textContent = \"Goodbye!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eObviously, this way of accessing that text isn't very efficient and won't work\non all pages but it does a good job of demonstrating the basic tools available\nto us for finding and manipulating HTML elements.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eUnderstanding the tree structure of the DOM helps us navigate all kinds of\ntrees. In subtrees and branches we can find the nodes we need by IDs, class\nnames or tag names, or by using element attributes like \u003ccode\u003echildren\u003c/code\u003e. Once we've\nselected our elements, we can use JavaScript to manipulate them. By using these\ntechniques, we can start to build a richer user experience.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\"\u003eMDN - Document Object Model\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"project-build-a-personal-website","title":"Project: Build a Personal Website","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-final-project\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-final-project/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-final-project\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-final-project/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Objectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild a website\u003c/li\u003e\n\u003cli\u003ePublish a website\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou've been learning HTML, CSS, and JavaScript over the previous lessons. You've been\nreceiving specific guidance (\"Use a \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag!\") and have been steered by\nour documentation or tests. In an effort to help you build your confidence, we're\ngoing to give you \u003cem\u003enothing\u003c/em\u003e except some specifications and leave the document\nstructure and styling \u003cem\u003eto you\u003c/em\u003e.  It's time to tie all your learning together\ninto one project. You must create...\u003c/p\u003e\n\n\u003cp\u003e...\u003cem\u003ea personal website\u003c/em\u003e!\u003c/p\u003e\n\n\u003cp\u003eProfessional software engineers and web developers often have a personal\nwebsite. In some ways, it is the industry's alternative to a business card. A\npersonal website can showcase your abilities while also giving visitors a sense\nof your personality.\u003c/p\u003e\n\n\u003ch2\u003eRequirements\u003c/h2\u003e\n\n\u003cp\u003eThis project is an opportunity to showcase what you've learned so far, so it is\nimportant that HTML, CSS, and JavaScript are incorporated into the project in\nsome way. For example, you could use a \u003ccode\u003emouseover\u003c/code\u003e event to change the\nappearance of an element when the user mouses over it. Or use a \u003ccode\u003eclick\u003c/code\u003e event to\ntoggle some content between being visible and hidden. There are a variety of\nways to do this using the CSS and JavaScript you've learned so far, but don't\nforget you can always use Google if you get stuck. Google is an invaluable tool\nfor developers! Try to use this project as an opportunity to stretch your coding\nskills!\u003c/p\u003e\n\n\u003cp\u003eThe content, styling, and functionality of your site are up to you. Keep in mind\nthat you may show this project to your peers and future instructors, so be\nconsiderate of content/subject matter and your potential audience.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started and a Recommended Workflow\u003c/h2\u003e\n\n\u003cp\u003eReview the previous lesson, \u003cstrong\u003eHost a Site on GitHub\u003c/strong\u003e, for guidance on setting\nup the necessary HTML, CSS, and JS files, and instructions on how to publish a\nsite on GitHub Pages.\u003c/p\u003e\n\n\u003cp\u003eWe recommend going through these steps first — create and connect the necessary\nfiles \u003cem\u003eand\u003c/em\u003e get them published before diving into writing too much HTML and\nJavaScript. If you've got everything published, you'll be able to continuously\npush updates to your site \u003cem\u003eas you build it\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn general, when it comes to building code-related projects, it is often best to\nestablish a routine of making small improvements, checking to make sure those\nimprovements work and don't break things. After creating the basic files and\nconnecting them, open your HTML file in a browser tab and your files in a code\neditor, this routine might look something like the following:\u003c/p\u003e\n\n\u003cp\u003e1) Write some HTML, CSS or JavaScript\n2) Go to your browser and refresh the page to see the changes\n3) Adjust your code and repeat until you're satisfied\n4) Move on to the next task and repeat the process\u003c/p\u003e\n\n\u003cp\u003eIt is very common to get lost in coding and to keep going from one task to the\nnext without checking your work. The problem here is that if you make a mistake\nit becomes more and more difficult to spot the error and can cause you to\nbacktrack and spend extra time debugging.\u003c/p\u003e\n\n\u003cp\u003eBy frequently checking your work, you'll set your own project milestones — at\neach one, you can verify everything is working so when you \u003cem\u003edo\u003c/em\u003e make a mistake,\nyou'll know it was made recently.\u003c/p\u003e\n\n\u003ch2\u003eProfessional Git Development Workflow\u003c/h2\u003e\n\n\u003cp\u003eWhen it comes to Git, there is ultimately no rule that says you \u003cem\u003emust\u003c/em\u003e do things\na certain way. However, if there was anything we could impart to you regarding\ngood version control habits, it would be this — commit code frequently.\u003c/p\u003e\n\n\u003cp\u003eAs mentioned, it is a common habit to dive into the code of a project and write\nas much as you can, for as long as you can. However, not only does this increase\nthe chance for bugs, it will result in very large Git commits or just \u003cem\u003eone\u003c/em\u003e big\ncommit for everything.\u003c/p\u003e\n\n\u003cp\u003eRepositories with a good commit history can relay a story about their\ndevelopment from just the commit messages alone. For example, instead of the\ncommit history looking like this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCommit 1: \"Initialize Repository\"\u003c/li\u003e\n\u003cli\u003eCommit 2: \"Finish website\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA good history might look closer to this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCommit 1: \"Initialize Repository\"\u003c/li\u003e\n\u003cli\u003eCommit 2: \"Add basic HTML, CSS and JavaScript files\"\u003c/li\u003e\n\u003cli\u003eCommit 3: \"Create initial HTML content\"\u003c/li\u003e\n\u003cli\u003eCommit 4: \"Add CSS rules\"\u003c/li\u003e\n\u003cli\u003eCommit 5: \"Fix syntax issue in HTML\"\u003c/li\u003e\n\u003cli\u003eCommit 6: \"Finish bio/about section\"\u003c/li\u003e\n\u003cli\u003eCommit 7: \"Add JS event listeners\"\u003c/li\u003e\n\u003cli\u003eetc...\u003c/li\u003e\n\u003cli\u003eCommit 22: \"Adjust styling for new HTML layout\"\u003c/li\u003e\n\u003cli\u003eCommit 23: \"Finish website\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe commit messages here suggest that each commit above addressed a small, often\n\u003cem\u003esingular\u003c/em\u003e task.\u003c/p\u003e\n\n\u003cp\u003eGood commit practices are critical for large companies and organizations where\nmany developers are working on large code-bases — in these cases, limiting\nthe size of commits makes it easier for others to understand what changes the\ncommit brings. If a commit introduces a bug into the code base, it is fairly\neasy to revert a \u003cem\u003esmall\u003c/em\u003e commit. A big commit, on the other hand, may require\nlots of extra work to untangle and fix.\u003c/p\u003e\n\n\u003cp\u003eFor personal development, though, the same concerns apply. In addition, when you\nstart building more complex projects, you may find yourself in situations where\nyou'd like to go back to an earlier version of a project. Taking the time now to\nbuild good habits will help you many times over in the future. Think of good\nversion control habits as a favor to your future self!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eOnce you've finished building your website, make sure to push it all up to\nGitHub. If you followed our advice and set up GitHub Pages first, you've now\nsuccessfully built \u003cem\u003eand\u003c/em\u003e published a website! Fantastic work!\u003c/p\u003e","frontPage":false},{"exportId":"traversing-nested-objects","title":"Traversing Nested Objects","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-traversing-nested-objects\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-traversing-nested-objects/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-traversing-nested-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-traversing-nested-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRevisit why nested objects are useful\u003c/li\u003e\n\u003cli\u003eReview how to access inner properties\u003c/li\u003e\n\u003cli\u003eUse recursion to iterate over nested objects and arrays\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou've just been onboarded to the dev team working on Flatbook, the world's\npremier Flatiron School-based social network. Here at Flatbook, we have some\npretty complex data-modeling needs. For instance, think about the breadth of\ninformation we might want to display on each user's profile page:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFirst name\u003c/li\u003e\n\u003cli\u003eLast name\u003c/li\u003e\n\u003cli\u003eEmployer\n\n\u003cul\u003e\n\u003cli\u003eCompany name\u003c/li\u003e\n\u003cli\u003eJob title\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eFriends\n\n\u003cul\u003e\n\u003cli\u003eFirst name\u003c/li\u003e\n\u003cli\u003eLast name\u003c/li\u003e\n\u003cli\u003eEmployer\u003c/li\u003e\n\u003cli\u003eCompany name\u003c/li\u003e\n\u003cli\u003eJob title\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eProjects\n\n\u003cul\u003e\n\u003cli\u003eTitle\u003c/li\u003e\n\u003cli\u003eDescription\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe can already start to see some problems with trying to fit all of this into a\n\u003cem\u003eshallow\u003c/em\u003e (non-nested) JavaScript object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  companyName: 'Flatbook Labs',\u003cbr\u003e  jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend1firstName: 'Nancy',\u003cbr\u003e  friend1lastName: 'Burgess',\u003cbr\u003e  friend1companyName: 'Flatbook Labs',\u003cbr\u003e  friend1jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend2firstName: 'Corinna',\u003cbr\u003e  friend2lastName: 'Jackson',\u003cbr\u003e  friend2companyName: 'Flatbook Labs',\u003cbr\u003e  friend2jobTitle: 'Senior Developer',\u003cbr\u003e  project1title: 'Flatbook',\u003cbr\u003e  project1description: 'The premier Flatiron School-based social network in the world.',\u003cbr\u003e  project2title: 'Scuber',\u003cbr\u003e  project2description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGoodness, that's messy. It would be a nightmare to keep the object updated. If\nAvi un-friends Nancy, do we shift Corinna's info into the \u003ccode\u003efriend1...\u003c/code\u003e slots and\ndelete the \u003ccode\u003efriend2...\u003c/code\u003e properties, or do we leave Corinna as \u003ccode\u003efriend2...\u003c/code\u003e and\ndelete the \u003ccode\u003efriend1...\u003c/code\u003e properties? There are no good answers. Except...\u003c/p\u003e\n\n\u003ch2\u003eObjects in Objects\u003c/h2\u003e\n\n\u003cp\u003eRecall from the lesson on objects that the values in an object can be\n\u003cem\u003eanything\u003c/em\u003e, including another object. If we reorganize the above object a bit,\nit becomes significantly easier to read and update:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  company: {\u003cbr\u003e    name: 'Flatbook Labs',\u003cbr\u003e    jobTitle: 'Developer Apprentice'\u003cbr\u003e  },\u003cbr\u003e  friends: [{\u003cbr\u003e    firstName: 'Nancy',\u003cbr\u003e    lastName: 'Burgess',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Developer Apprentice'\u003cbr\u003e    }\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Corinna',\u003cbr\u003e    lastName: 'Jackson',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Lead Developer'\u003cbr\u003e    }\u003cbr\u003e  }],\u003cbr\u003e  projects: [{\u003cbr\u003e    title: 'Flatbook',\u003cbr\u003e    description: 'The premier Flatiron School-based social network in the world.'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    title: 'Scuber',\u003cbr\u003e    description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e  }]\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe've pared the sixteen messy properties in our first attempt down to a svelte\nfive: \u003ccode\u003efirstName\u003c/code\u003e, \u003ccode\u003elastName\u003c/code\u003e, \u003ccode\u003ecompany\u003c/code\u003e, \u003ccode\u003efriends\u003c/code\u003e, and \u003ccode\u003eprojects\u003c/code\u003e. \u003ccode\u003ecompany\u003c/code\u003e\npoints at another object, and both \u003ccode\u003efriends\u003c/code\u003e and \u003ccode\u003eprojects\u003c/code\u003e point to arrays of\nobjects. Let's practice accessing some of those beautifully nested data points.\nCopy \u003ccode\u003euserInfo\u003c/code\u003e into \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e and follow along.\u003c/p\u003e\n\n\u003cp\u003eTo review, for a property at the top level of our object, we can grab a value\nusing dot notation:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euserInfo.lastName;\u003cbr\u003e//=\u0026gt; \"Flombaum\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the property we're accessing is nested inside another object, we just append\nthe additional key(s):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euserInfo.company.jobTitle;\u003cbr\u003e//=\u0026gt; \"Developer Apprentice\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the property is nested inside an array, we need to specify the index in the\narray for the object that we want. To get the first name of Avi's first friend and the title of his second project:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003euserInfo.friends[0].firstName;\u003cbr\u003e//=\u0026gt; \"Nancy\"\u003cbr\u003e\u003cbr\u003euserInfo.projects[1].title;\u003cbr\u003e//=\u0026gt; \"Scuber\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt's worth spending some time getting comfortable with nested data structures\n— you will see a lot of them as you proceed through the curriculum and in\nyour career as a developer. Create your own in the REPL and practice accessing\nvarious pieces of data.\u003c/p\u003e\n\n\u003ch2\u003eArrays in arrays\u003c/h2\u003e\n\n\u003cp\u003eWorking with nested arrays isn't all that different from nested objects. Simply\nreplace the named properties of nested objects with indexes of nested arrays.\nLet's review with an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst letters = ['a', ['b', ['c', ['d', ['e']], 'f']]];\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGiven the above nested array, how would we get the letter \u003ccode\u003e'e'\u003c/code\u003e? First, we'd\nneed the second element in \u003ccode\u003eletters\u003c/code\u003e, \u003ccode\u003eletters[1]\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eletters[1];\u003cbr\u003e//=\u0026gt; [\"b\", [\"c\", [\"d\", [\"e\"]], \"f\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen we'd need the second element of that element, so \u003ccode\u003eletters[1][1]\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eletters[1][1];\u003cbr\u003e//=\u0026gt; [\"c\", [\"d\", [\"e\"]], \"f\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen the second element of \u003cstrong\u003ethat\u003c/strong\u003e element, \u003ccode\u003eletters[1][1][1]\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eletters[1][1][1];\u003cbr\u003e//=\u0026gt; [\"d\", [\"e\"]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd the second element of \u003cstrong\u003e\u003cem\u003ethat\u003c/em\u003e\u003c/strong\u003e element, \u003ccode\u003eletters[1][1][1][1]\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eletters[1][1][1][1];\u003cbr\u003e//=\u0026gt; [\"e\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFinally, we want the first element in that final nested array, \u003ccode\u003eletters[1][1][1][1][0]\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eletters[1][1][1][1][0];\u003cbr\u003e//=\u0026gt; \"e\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhew! That's a lot to keep track of. Just remember that each lookup (each set of\nsquare brackets) \"drills down\" into each successive nested array.\u003c/p\u003e\n\n\u003ch2\u003eIterating over nested objects and arrays\u003c/h2\u003e\n\n\u003cp\u003eOur initial shallow object had a lot of drawbacks, but one advantage of it is\nthat it was very easy to iterate over all of the information:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  companyName: 'Flatbook Labs',\u003cbr\u003e  jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend1firstName: 'Nancy',\u003cbr\u003e  friend1lastName: 'Burgess',\u003cbr\u003e  friend1companyName: 'Flatbook Labs',\u003cbr\u003e  friend1jobTitle: 'Developer Apprentice',\u003cbr\u003e  friend2firstName: 'Corinna',\u003cbr\u003e  friend2lastName: 'Jackson',\u003cbr\u003e  friend2companyName: 'Flatbook Labs',\u003cbr\u003e  friend2jobTitle: 'Senior Developer',\u003cbr\u003e  project1title: 'Flatbook',\u003cbr\u003e  project1description: 'The premier Flatiron School-based social network in the world.',\u003cbr\u003e  project2title: 'Scuber',\u003cbr\u003e  project2description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction shallowIterator(target) {\u003cbr\u003e  for (const key in target) {\u003cbr\u003e    console.log(target[key]);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eshallowIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Senior Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can also use it with arrays:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst primes = [2, 3, 5, 7, 11];\u003cbr\u003e\u003cbr\u003eshallowIterator(primes);\u003cbr\u003e// LOG: 2\u003cbr\u003e// LOG: 3\u003cbr\u003e// LOG: 5\u003cbr\u003e// LOG: 7\u003cbr\u003e// LOG: 11\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: our \u003ccode\u003eshallowIterator()\u003c/code\u003e function uses \u003ccode\u003efor...in\u003c/code\u003e to iterate through the object that's passed to it. We learned in the previous lesson that \u003ccode\u003efor...in\u003c/code\u003e is not the best iterator to use with arrays. Because we're not currently working in the browser (and therefore cross-browser consistency isn't an issue), we can safely ignore that problem for the moment. Since this example is fairly complicated, we'll work through the process using \u003ccode\u003efor...in\u003c/code\u003e first then, once we've got that working, build a modification that will handle arrays appropriately.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eUnfortunately, as you may be able to guess from its name, our \u003ccode\u003eshallowIterator()\u003c/code\u003e\nfunction can't handle nested collections:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst numbers = [1, [2, [4, [5, [6]], 3]]];\u003cbr\u003e\u003cbr\u003eshallowIterator(numbers);\u003cbr\u003e// LOG: 1\u003cbr\u003e// LOG: [2, [4, [5, [6]], 3]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt's trained to iterate over the passed-in array's elements or object's\nproperties, but our function has no concept of \u003cem\u003edepth\u003c/em\u003e. When it tries to iterate\nover the above nested \u003ccode\u003enumbers\u003c/code\u003e array, it sees only two elements at the top\nlevel of the array: the number \u003ccode\u003e1\u003c/code\u003e and \u003cstrong\u003eanother\u003c/strong\u003e array, \u003ccode\u003e[2, [4, [5, [6]],\n3]]\u003c/code\u003e. It \u003ccode\u003econsole.log()\u003c/code\u003es out both of those elements and calls it a day, never\nrealizing that we also want it to print out the elements inside the nested\narray.\u003c/p\u003e\n\n\u003cp\u003eIt behaves similarly with objects. If we passed the nested version of \u003ccode\u003euserInfo\u003c/code\u003e\nto it, the values at the top level of the object (\"Avi\" and \"Flombaum\") would be\nlogged correctly, but for the \u003ccode\u003ecompany\u003c/code\u003e key, the object it points to would be\nlogged, and, for \u003ccode\u003efriends\u003c/code\u003e and \u003ccode\u003eprojects\u003c/code\u003e, arrays of objects would be logged.\nTry it out for yourself in the REPL.\u003c/p\u003e\n\n\u003cp\u003eLet's modify our function so that if it encounters a nested object or array, it\nwill additionally print out all of the data contained therein. We can do this\nusing an \u003ccode\u003eif\u003c/code\u003e condition and the \u003ccode\u003etypeof\u003c/code\u003e operator:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction shallowIterator(target) {\u003cbr\u003e  for (const key in target) {\u003cbr\u003e    if (typeof target[key] === 'object') {\u003cbr\u003e      for (const nestedKey in target[key]) {\u003cbr\u003e        console.log(target[key][nestedKey]);\u003cbr\u003e      }\u003cbr\u003e    } else {\u003cbr\u003e      console.log(target[key]);\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eshallowIterator(numbers);\u003cbr\u003e// LOG: 1\u003cbr\u003e// LOG: 2\u003cbr\u003e// LOG: [4, [5, [6]], 3]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we've gone two levels deep, which gets us a bit closer to our goal. However,\nthere are two pretty clear drawbacks to this strategy:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWe'll have to add a new \u003ccode\u003efor...in\u003c/code\u003e statement for every level of nesting,\nquickly ballooning our function out to an unmanageable size.\u003c/li\u003e\n\u003cli\u003eSince we need to add a separate \u003ccode\u003efor...in\u003c/code\u003e statement for each additional\nlevel, we'll have to know exactly what the target structure looks like ahead\nof time and update our function accordingly. That's a lot of repetitive,\nerror-prone work, and it results in a function that can only be used for data\nwith that particular structure.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/looping-and-iteration/traversing-nested-objects-readme/no_there_has_to_be_another_way.gif\" alt=\"No! There has to be another way.\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eRecursion\u003c/h3\u003e\n\n\u003cp\u003eLucky for us, there \u003cstrong\u003eis\u003c/strong\u003e another way: recursion. It's one of the more powerful\nconcepts in programming, but it's also pretty hard to grasp at first. \u003cstrong\u003eDon't\nsweat it if it doesn't click immediately\u003c/strong\u003e. We'll introduce the concept here but\ncome back to it periodically throughout the rest of the JavaScript material.\nEssentially, \u003cstrong\u003ea recursive function is a function that calls itself\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at a better way to write our \u003ccode\u003eshallowIterator()\u003c/code\u003e to take\nadvantage of recursion:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen we invoke \u003ccode\u003edeepIterator()\u003c/code\u003e with an argument, the function first checks if\nthe argument is an object (recall that the \u003ccode\u003etypeof\u003c/code\u003e operator returns \u003ccode\u003e\"object\"\u003c/code\u003e\nfor arrays as well). If the argument \u003cstrong\u003eisn't\u003c/strong\u003e an object, \u003ccode\u003edeepIterator()\u003c/code\u003e\nsimply \u003ccode\u003econsole.log()\u003c/code\u003es out the argument and exits. However, if the argument\n\u003cstrong\u003eis\u003c/strong\u003e an object, we iterate over the properties (or elements) in the object,\npassing each to \u003ccode\u003edeepIterator()\u003c/code\u003e and \u003cstrong\u003ere-invoking the function\u003c/strong\u003e. That's\nrecursion!\u003c/p\u003e\n\n\u003cp\u003eLet's see it in action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst numbers = [1, [2, [4, [5, [6]], 3]]];\u003cbr\u003e\u003cbr\u003edeepIterator(numbers);\u003cbr\u003e// LOG: 1\u003cbr\u003e// LOG: 2\u003cbr\u003e// LOG: 4\u003cbr\u003e// LOG: 5\u003cbr\u003e// LOG: 6\u003cbr\u003e// LOG: 3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo help us see what's going on here let's use a REPL. Notice that, in the\nversion of the function in the REPL, we've added a \u003ccode\u003econsole.log()\u003c/code\u003e at the top of\nthe function that will log whatever argument was passed to our function. We've\nalso added a label to the second \u003ccode\u003econsole.log()\u003c/code\u003e so you can see the values that\nare getting logged from the \u003ccode\u003eelse\u003c/code\u003e statement. If you press the \"Run\" button, you\nwill see an \"Argument\" logged for each time the function is called. You will\nalso see a \"Logged value\" for each time the code in the \u003ccode\u003eelse\u003c/code\u003e executes.\nReferring to the output of the \u003ccode\u003econsole.log()\u003c/code\u003es, step through the function for\neach element to trace what's happening.\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/UprightWiryCopyleft?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eOur function also works with combinations of nested objects and arrays:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst userInfo = {\u003cbr\u003e  firstName: 'Avi',\u003cbr\u003e  lastName: 'Flombaum',\u003cbr\u003e  company: {\u003cbr\u003e    name: 'Flatbook Labs',\u003cbr\u003e    jobTitle: 'Developer Apprentice'\u003cbr\u003e  },\u003cbr\u003e  friends: [{\u003cbr\u003e    firstName: 'Nancy',\u003cbr\u003e    lastName: 'Burgess',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Developer Apprentice'\u003cbr\u003e    }\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    firstName: 'Corinna',\u003cbr\u003e    lastName: 'Jackson',\u003cbr\u003e    company: {\u003cbr\u003e      name: 'Flatbook Labs',\u003cbr\u003e      jobTitle: 'Lead Developer'\u003cbr\u003e    }\u003cbr\u003e  }],\u003cbr\u003e  projects: [{\u003cbr\u003e    title: 'Flatbook',\u003cbr\u003e    description: 'The premier Flatiron School-based social network in the world.'\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    title: 'Scuber',\u003cbr\u003e    description: 'A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.'\u003cbr\u003e  }]\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Lead Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo keep track of how many times our function is recursively invoking itself, it might be helpful to use a counter variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet counter = 0;\u003cbr\u003e\u003cbr\u003efunction deepIterator(target) {\u003cbr\u003e  counter++;\u003cbr\u003e\u003cbr\u003e  if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Lead Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\u003cbr\u003e\u003cbr\u003ecounter;\u003cbr\u003e//=\u0026gt; 26\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo we invoked \u003ccode\u003edeepIterator()\u003c/code\u003e once, and it invoked itself 25 additional times!\nIf we look closely at our nested \u003ccode\u003euserInfo\u003c/code\u003e object, we can see that it contains\ntwo arrays, seven nested objects, and sixteen key-value pairs where the value is\na string. Add those all up (2 + 7 + 16), and you get our 25 recursive\ninvocations! (If you're following along in the REPL, you can check the value of\n\u003ccode\u003ecounter\u003c/code\u003e in the terminal after running the code.)\u003c/p\u003e\n\n\u003ch2\u003eModifying our Program to Better Handle Arrays\u003c/h2\u003e\n\n\u003cp\u003eIn our \u003ccode\u003edeepIterator()\u003c/code\u003e function, we're using an \u003ccode\u003eif\u003c/code\u003e statement to evaluate the\nargument that's passed in. We do one thing if \u003ccode\u003etarget\u003c/code\u003e is an object and\nsomething else if it's not. Now we want to modify our function to handle one\nmore situation: when \u003ccode\u003etarget\u003c/code\u003e is an array. Doing this is a simple matter of\nadding an \u003ccode\u003eelse if\u003c/code\u003e to our \u003ccode\u003eif\u003c/code\u003e statement; its code block will execute \u003cstrong\u003eif\u003c/strong\u003e\n\u003ccode\u003etarget\u003c/code\u003e is an array.\u003c/p\u003e\n\n\u003cp\u003eWe can determine whether a variable is an array using an \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#static_methods\"\u003eArray Static\nMethod\u003c/a\u003e, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\"\u003e\u003ccode\u003eArray.isArray()\u003c/code\u003e\u003c/a\u003e. Let's use that in our new\ncondition. We'll also add a new \u003ccode\u003econsole.log()\u003c/code\u003e to verify that our code is\ncorrectly detecting the arrays (we've commented out the final \u003ccode\u003econsole.log()\u003c/code\u003e\nfor now):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else if (Array.isArray(target)) {\u003cbr\u003e    console.log(\"We found an array\");\u003cbr\u003e    // iterate through the array\u003cbr\u003e  } else {\u003cbr\u003e    // console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow if we run the code, we see ...nothing. For some reason, our code isn't\ndetecting the arrays. Remember that \u003cstrong\u003earrays are objects\u003c/strong\u003e, so our \u003ccode\u003eif\u003c/code\u003e\ncondition returns true for arrays as well as objects and the \u003ccode\u003eelse if\u003c/code\u003e never\nexecutes. We can fix this by reversing the order of our conditions. Let's also\nput the second \u003ccode\u003econsole.log()\u003c/code\u003e back in, and try running the code again.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (Array.isArray(target)) {\u003cbr\u003e    // iterate through the array\u003cbr\u003e    console.log(\"We found an array\");\u003cbr\u003e  } else if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: We found an array\u003cbr\u003e// LOG: We found an array\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMuch better! The logs are working for the primitive values and the non-array\nobject, so now we just need to code the body of our new \u003ccode\u003eif\u003c/code\u003e statement, using\n\u003ccode\u003efor...of\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction deepIterator(target) {\u003cbr\u003e  if (Array.isArray(target)) {\u003cbr\u003e    for (const element of target) {\u003cbr\u003e      deepIterator(element);\u003cbr\u003e    }\u003cbr\u003e  } else if (typeof target === 'object') {\u003cbr\u003e    for (const key in target) {\u003cbr\u003e      deepIterator(target[key]);\u003cbr\u003e    }\u003cbr\u003e  } else {\u003cbr\u003e    console.log(target);\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edeepIterator(userInfo);\u003cbr\u003e// LOG: Avi\u003cbr\u003e// LOG: Flombaum\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Nancy\u003cbr\u003e// LOG: Burgess\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Developer Apprentice\u003cbr\u003e// LOG: Corinna\u003cbr\u003e// LOG: Jackson\u003cbr\u003e// LOG: Flatbook Labs\u003cbr\u003e// LOG: Lead Developer\u003cbr\u003e// LOG: Flatbook\u003cbr\u003e// LOG: The premier Flatiron School-based social network in the world.\u003cbr\u003e// LOG: Scuber\u003cbr\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhew!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThis is very advanced stuff, and you should absolutely not get discouraged if it\ndoesn't click at first. Create some other nested data structures and traverse\nover them with \u003ccode\u003eshallowIterator()\u003c/code\u003e and \u003ccode\u003edeepIterator()\u003c/code\u003e, noting the limitations\nof the former. Use the debugging tools available to you to get a handle on\nwhat's happening at each step of the process.\u003c/p\u003e\n\n\u003cp\u003eYou got this!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.microsoft.com/en-us/scripting/javascript/advanced/recursion-javascript\"\u003eMDN: Recursion (JavaScript)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f\"\u003efreeCodeCamp: Recursion in JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://javascript.info/debugging-chrome\"\u003eJavaScript.info: Debugging in Chrome\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"files-extensions-and-file-types","title":"Files, Extensions, and File Types","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-basics-files-and-filetypes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-basics-files-and-filetypes/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-files-and-filetypes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-files-and-filetypes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a file\u003c/li\u003e\n\u003cli\u003eContrast \u003cem\u003etext files\u003c/em\u003e and \u003cem\u003ebinary files\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003eIdentify the function of file extensions\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eHave you tried to memorize a phone number \"for a second\" as you tried to write\nit down? Maybe you kept repeating it over and over? Have you ever felt a little\noverwhelmed when someone was giving you too much information at once and you were\ntrying to keep up--but felt relief when you finally \"got it\"? As humans, we can\nonly hold a few things in our heads before they start to, well, vanish or get \nmixed up. Our \u003cem\u003eworking memory\u003c/em\u003e is not too reliable!\u003c/p\u003e\n\n\u003cp\u003eComputers also have limited working memory. Just like us, they keep things in\nworking memory that they're, well, working with.\u003c/p\u003e\n\n\u003cp\u003eWhen computers or people run out of space, they write down information stored in\ntheir \u003cem\u003eworking memory\u003c/em\u003e. Humans sometimes use a napkin, Post-It Notes or the back\nof their hands. Computers use \u003cem\u003efiles\u003c/em\u003e. The stuff computers write into their\nfiles fits into two main categories:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eInformation humans can read (\"text files\")\u003c/li\u003e\n\u003cli\u003eInformation only computers can read (\"binary files\")\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eDevelopers create \u003cem\u003elots\u003c/em\u003e of files. This README will help us all get on the same\npage with how to talk about them.\u003c/p\u003e\n\n\u003ch2\u003eDefine a File\u003c/h2\u003e\n\n\u003cp\u003eA file is a thing computers use to store facts (\"data\") or processes\n(\"programs\") for later use.\u003c/p\u003e\n\n\u003ch2\u003eContrast \u003cem\u003eText Files\u003c/em\u003e and \u003cem\u003eBinary Files\u003c/em\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eComputers think in electricity.\u003c/p\u003e\n\n\u003cp\u003eWhoa!\u003c/p\u003e\n\n\u003cp\u003eComputers' thoughts are usually shown as 1's and 0's. This is called \u003cem\u003ebinary\ncode\u003c/em\u003e. When computers write things down, they often write them down in files in\n\u003cem\u003etheir\u003c/em\u003e language, \u003cem\u003ebinary\u003c/em\u003e. These files are \u003cem\u003ebinary files\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eTypes of \u003cem\u003ebinary\u003c/em\u003e files are images, music, and software programs. We can create\nthese files with Adobe Photoshop, the C programming language, or Ableton.\u003c/p\u003e\n\n\u003cp\u003eNobody is exactly sure how humans think. That's a question for science or\nphilosophy. When we write our ideas down, we write them in files in \u003cem\u003eour\u003c/em\u003e\nlanguage, \u003cem\u003etext\u003c/em\u003e. These files are \u003cem\u003etext files\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eTypes of \u003cem\u003etext\u003c/em\u003e files are HTML, letters to grandma, a list of student\ngrades for a grade book program, directions to Carnegie Hall, etc. We create\nthese \u003cem\u003etext\u003c/em\u003e files with \u003cem\u003etext editors\u003c/em\u003e like the LearnIDE editor, Atom, Sublime\nText, vim, or emacs.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE:\u003c/strong\u003e You might hear some developers call text files\n\"\u003ca href=\"https://en.wikipedia.org/wiki/Plain_text\"\u003eplaintext\u003c/a\u003e\" or \"\u003ca href=\"https://en.wikipedia.org/wiki/Plain_text\"\u003eplain text\u003c/a\u003e files\" They all mean the\nsame thing.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eThe Curious Case of Word Processing Files\u003c/h3\u003e\n\n\u003cp\u003eWhat about files made by word processors Microsoft Word or MacOSX's TextEdit?\nWhile you're typing text, those programs store the text \u003cem\u003eas well as\ninformation\u003c/em\u003e about the text (which font to use, which words are in bold,\nwhether these next five lines are part of a bullet-list, etc.) in the \u003cem\u003esame\u003c/em\u003e\nfile.  To make the loading and saving fast, these programs save the file in\n\u003cem\u003ebinary\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3\u003eWord Processors and HTML, Code\u003c/h3\u003e\n\n\u003cp\u003eSince word processing programs store their output in \u003cem\u003ebinary\u003c/em\u003e files and\nprograms that read HTML (like browsers) or run code (like Ruby, Python,\nJavaScript, or Java) need \u003cem\u003etext\u003c/em\u003e, \u003cstrong\u003eWord Processors should not be used to\ncreate HTML or code. Developers do their work in \u003cem\u003etext editors\u003c/em\u003e, not \u003cem\u003eword\nprocessors\u003c/em\u003e.\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eIdentify the Function of File Extensions\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/files-filetypes/Image_49_FileTypeAssets.png\" alt=\"Common Filetypes and File Extensions\"\u003e\u003c/p\u003e\n\n\u003cp\u003eMany file names have an \"extension\" that comes after a \u003ccode\u003e.\u003c/code\u003e. It is not a\nrequirement, but it's a best practice. The extension is a \"hint\" to the\noperating system of which program should be used to work with the file.  For\nexample, \u003ccode\u003eLetterToGrandma.docx\u003c/code\u003e has a \u003cem\u003edocx\u003c/em\u003e \u003cem\u003eextension\u003c/em\u003e which \u003cem\u003ehints\u003c/em\u003e to the\nOS that it should open the file with the Word word processing program by\nMicrosoft. The file \u003ccode\u003ejob_offer.pdf\u003c/code\u003e \u003cem\u003ehints\u003c/em\u003e to the OS that it could open the\nfile with either Acrobat or MacOSX's Preview application. When the OS finds\nmany good options, it will ask for the user's help in selecting the right program.\u003c/p\u003e\n\n\u003cp\u003eChanging an extension \u003cstrong\u003edoes not\u003c/strong\u003e change the type of file you have. A text\nfile called \u003ccode\u003egroceries.txt\u003c/code\u003e could be renamed \u003ccode\u003egroceries.mp3\u003c/code\u003e \u003cstrong\u003ebut it would\nstill be a text file\u003c/strong\u003e. A Toyota with a BMW medallion does not suddenly become\na BMW. Our \u003ccode\u003egroceries\u003c/code\u003e did not suddenly become music because we changed the\nextension.\u003c/p\u003e\n\n\u003cp\u003eSome operating systems, like MacOSX, \u003cem\u003ehide\u003c/em\u003e the file extension by default.  They reckon\nthat most users \"no longer care about it.\" Since we're\ndevelopers, though, we will frequently dig below the \"end-user\" layer. When in\na terminal, we will see full file names - including extensions.\u003c/p\u003e\n\n\u003cp\u003eHere's a table to help train your instincts in seeing text- files versus\nbinary-files:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/files-filetypes/Image_49B_FileTypeChart.png\" alt=\"Table of file types\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we have taken some time to get to know files. Files are things\nin which computers store data that needs to last a while or which their users\nmight want to refer to again later. We've noted that files generally come in\nbinary and text formats. And we saw that many files also have an extension\nthat provides hints about which program should be used to work with the file.\u003c/p\u003e","frontPage":false},{"exportId":"programming-as-conversation-part-3-introduction","title":"Programming as Conversation Part 3: Introduction","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRevisit abstraction\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eBefore we jump into more code, let's think for a moment about something you encounter pretty much every day when you read a news article or email: the way we organize words to express and clarify meaning. For example, a \u003cstrong\u003eparagraph\u003c/strong\u003e is a collection of sentences, introduced by a topic sentence and bundled up or closed by a closing sentence. A \u003cstrong\u003eparagraph\u003c/strong\u003e can persuade or offend, direct or explain. A paragraph has a \u003cem\u003efunction\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003e\"Code paragraphs\" are called, depending on language, \"functions,\" \"procedures,\" \"methods,\" or \"subroutines.\" They bundle up expressions and statements to accomplish a task. Just as \"Make a Sandwich\" encompasses specific, \"atomic\" actions like \"get slice of bread,\" \"get jelly,\" etc., \u003ccode\u003eexecuteTransfer\u003c/code\u003e encompasses logic like \u003ccode\u003eif (accountStatus === \"open\")\u003c/code\u003e or \u003ccode\u003eif (accountBalance \u0026gt;= transactionAmount)\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eTo have code that is easy to read, debug, and maintain, we need to bundle collections of atomic activities into \"code paragraphs\" that do work. JavaScript calls these \"functions.\"\u003c/p\u003e  \u003ch2\u003eAbstraction\u003c/h2\u003e  \u003cp\u003eThis process of bundling up small atoms into a \u003cem\u003efunction\u003c/em\u003e is called \"abstraction.\" \"Abstraction\" comes from the Latin word for \"to pull away.\" When we're further away, many details are hard to see. Only the most relevant shapes are recognizable. For example, when you're on an airplane and are over a city the details of the cars below — the mileage, what's in the cup holder, the make or model — are invisible, they're not \u003cem\u003eessential\u003c/em\u003e. But what we may be able to see is the vehicle type (car vs. truck) or the color of the car. By abstracting we see what's true at a higher level, or more \u003cem\u003egenerally\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eHere are a few more \"abstractions:\"\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ca href=\"https://en.wikipedia.org/wiki/Jerry_Seinfeld\"\u003eJerry Seinfeld\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/Ruth_Bader_Ginsburg\"\u003eRuth Bader Ginsburg\u003c/a\u003e, and \u003ca href=\"https://en.wikipedia.org/wiki/Cardi_B\"\u003eCardi B\u003c/a\u003e are atomic individuals, but we can refer to them all collectively by the abstraction (or they can be \u003cem\u003eabstracted\u003c/em\u003e into) \"famous New Yorkers\"\u003c/li\u003e \u003cli\u003eBooks about a killer dog, a scary alter ego, and a scary clown can be \u003cem\u003eabstracted\u003c/em\u003e into the name \"horror novels (by Stephen King)\"\u003c/li\u003e \u003cli\u003eIndividuals with strange powers and (usually) strange clothing can be \u003cem\u003eabstracted\u003c/em\u003e into \"superheroes\"\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAbstraction is a natural part of learning to converse. When you're first learning to communicate, you don't know enough to start talking about abstractions. You prefer to think about real, visible, tangible things. But as you learn about opposites, how things are similar (and how perhaps one thing is dissimilar) you grow in your ability to \u003cem\u003eabstract\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eIn fact, the thing that makes most higher learning \"higher\" is that the discussion, work, and discovery is focused on uncovering general principles that allow us to predict how things will work more-or-less most of the time. Amazingly, this was considered a pretty revolutionary idea at the time when Galileo and Newton started doing it. The moment that natural philosophers started looking for these \"general rules of how things work,\" science as we know it was born.\u003c/p\u003e  \u003ch2\u003eNext Steps\u003c/h2\u003e  \u003cp\u003eIn Programming as Conversation 3, we'll learn to take our JavaScript \u003cem\u003eexpressions\u003c/em\u003e and \u003cem\u003estatements\u003c/em\u003e and bundle them up into abstractions called \u003cem\u003efunctions\u003c/em\u003e. Before we get to that, however, we first need to learn a little about \u003cem\u003etesting\u003c/em\u003e in JavaScript.\u003c/p\u003e","frontPage":false},{"exportId":"intro-to-version-control","title":"Intro to Version Control","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"git-version-control-introduction-to-version-control\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/git-version-control-introduction-to-version-control/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-version-control-introduction-to-version-control\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-version-control-introduction-to-version-control/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the purpose of a version control system\u003c/li\u003e\n\u003cli\u003eIdentify benefits of version control systems\u003c/li\u003e\n\u003cli\u003eRecognize useful Git vocabulary terms\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLet's imagine a very stressful situation. Your manager comes to you and says:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eHi there, we're looking to present a report to investors. If we get this\ninvestment, we'll all be millionaires. If we don't get this investment, we're\ngoing to have to close down the company. The key to success is going to be a\nreport that \u003cstrong\u003eyou\u003c/strong\u003e are going to manage. Three things will make it stand out:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIt must be absolutely correct: no errors, no typos, the math has to check\nout in every figure.\u003c/li\u003e\n\u003cli\u003eIt must have the most up-to-date information\u003c/li\u003e\n\u003cli\u003eThe investors will tolerate \u003cem\u003eslightly\u003c/em\u003e older data if it means that we can\nbe \u003cem\u003esure\u003c/em\u003e the facts are correct.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOne last requirement is that for auditing purposes we need to be able to save\na unique version of all the versions of this report. We have to know what the\nreport looked like, for example, 3 days ago, or 3 weeks ago.\u003c/p\u003e\n\n\u003cp\u003eSuman, Nibaal, and Taylor will all be doing research for you and contributing\nnew data as much as possible. You have to make sure that all the parts\nintegrate correctly. Thanks! And we're all counting on you!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eHow could you achieve these goals? Take a few minutes to imagine, or sketch out\nwhat your strategy might be.\u003c/p\u003e\n\n\u003ch2\u003eNaive Strategy\u003c/h2\u003e\n\n\u003cp\u003eA \u003cem\u003enaive\u003c/em\u003e way of managing \u003cem\u003eversions\u003c/em\u003e would be to start with a file called\n\u003ccode\u003einvestor-report-latest.txt\u003c/code\u003e. You'd also copy that to\n\u003ccode\u003einvestor-report-master.txt\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou'd share \u003ccode\u003einvestor-report-latest.txt\u003c/code\u003e with Suman, Nibaal, and Taylor.\u003c/p\u003e\n\n\u003cp\u003eWhen they made a change to the report, you'd find the changes, verify them, and\nthen update them into \u003ccode\u003einvestor-report-master.txt\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou'd make a copy of \u003ccode\u003einvestor-report-master.txt\u003c/code\u003e and give it a date-stamp like\n\u003ccode\u003einvestor-report-2019-02-13T1017.txt\u003c/code\u003e (here you've added an \u003ca href=\"https://en.wikipedia.org/wiki/ISO_8601\"\u003eISO8601\u003c/a\u003e\ndate-time label to the end of the file. This means when \u003ccode\u003els\u003c/code\u003e prints out the\ndirectory all the file names will be shown in ascending date order).\u003c/p\u003e\n\n\u003cp\u003eYou'd then overwrite \u003ccode\u003einvestor-report-latest.txt\u003c/code\u003e with\n\u003ccode\u003einvestor-report-master.txt\u003c/code\u003e and tell everyone to start working off of the\nnewly updated \u003ccode\u003einvestor-report-latest.txt\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBefore long, we might have a directory full of files like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einvestor-report-2019-1-01T1017.txt\u003cbr\u003einvestor-report-2019-1-02T1123.txt\u003cbr\u003einvestor-report-2019-1-04T4340.txt\u003cbr\u003einvestor-report-2019-1-05T1017.txt\u003cbr\u003einvestor-report-2019-1-08T2217.txt\u003cbr\u003einvestor-report-2019-2-08T2317.txt\u003cbr\u003einvestor-report-2019-2-09T0017.txt\u003cbr\u003einvestor-report-2019-2-10T914.txt\u003cbr\u003einvestor-report-2019-2-13T1017.txt\u003cbr\u003einvestor-report-2019-2-15T1127.txt\u003cbr\u003einvestor-report-2019-2-20T1237.txt\u003cbr\u003einvestor-report-2019-2-21T1330.txt\u003cbr\u003einvestor-report-2019-2-22T1545.txt\u003cbr\u003einvestor-report-latest.txt\u003cbr\u003einvestor-report-master.txt\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWow! What a mess! And there are other messes waiting.\u003c/p\u003e\n\n\u003cp\u003eWhat if Suman and Taylor both start work from the latest\n\u003ccode\u003einvestor-report-latest.txt\u003c/code\u003e and Taylor makes changes to the same section Suman\nwas working on. Taylor gets their work in first and that gets integrated by you.\nNow Suman's changes no longer apply. Suman is frustrated because their work will\nhave to be re-done!\u003c/p\u003e\n\n\u003ch2\u003eReflection\u003c/h2\u003e\n\n\u003cp\u003eThis is a pretty stressful bit of imagination. You've got to make sure that a\nreport is as current as possible and absolutely, positively, correct. You might\nthink this manager is a jerk or that these expectations are unreasonable. Maybe\nthis could be possible with \u003cem\u003eone\u003c/em\u003e writer, not \u003cem\u003efour\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eBut the expectations that manager gave you for the report are \u003cstrong\u003e\u003cem\u003ethe exact same\nexpectations we have for code\u003c/em\u003e\u003c/strong\u003e. It should be as good as possible, absolutely\ncorrect, and ready to ship to users at a moments' notice.\u003c/p\u003e\n\n\u003cp\u003eThe great news is that \u003cem\u003eall\u003c/em\u003e the manual work you had to do (and so much more!)\ncan be done by a type of software called a \u003cem\u003eversion control system (VCS)\u003c/em\u003e. That\nis, software that \u003cem\u003econtrols\u003c/em\u003e our collection of \u003cem\u003eversions\u003c/em\u003e. The most popular VCS\nis called \"Git.\" When we have a VCS on our side we can work confidently; we can\neven experiment without fear. Getting back to a \"last known good state\" is just\na few key-clicks away. You're going to love writing code, text, letters,\nknowing a VCS is on your side!\u003c/p\u003e\n\n\u003ch2\u003eDefine the Purpose of a Version Control System\u003c/h2\u003e\n\n\u003cp\u003e\"Version Control System (VCS)\" describes a whole group of software. VCS\nsoftware includes Git, Mercurial, Subversion, and others. Some other web-based\napplications like Google Docs have embraced the idea of \"versions\" and have\nadded features like \"tracked changes\" or \"view change history.\"\u003c/p\u003e\n\n\u003cp\u003eThe key benefit of version control is that you can experiment and \u003cstrong\u003ethrow away\nbad ideas\u003c/strong\u003e and \u003cem\u003einstantly\u003c/em\u003e get back to your last-known \"good\" state.\u003c/p\u003e\n\n\u003cp\u003eThink about it this way: when you were learning arithmetic, you knew the way to\nundo a bad calculation was to turn the pencil upside down and erase. As a result,\nyou were \u003cstrong\u003efree\u003c/strong\u003e to try, experiment, and explore, knowing you could always\neasily get back to the original starting point. Because of this, most of us\ndid our math homework in pencil, not ink!\u003c/p\u003e\n\n\u003cp\u003eBecause of the \u003cstrong\u003efreedom\u003c/strong\u003e that VCS provides, we can be \u003cstrong\u003eunafraid\u003c/strong\u003e to look\nat an ugly bit of code and \u003cem\u003etry\u003c/em\u003e something new. We can take a new technique a\nco-worker told us about and we can \u003cem\u003etry\u003c/em\u003e to replace our old code with this new idea.\nWe can read about a new feature provided in a framework and \u003cem\u003etry\u003c/em\u003e it out in our\nold code. \u003cstrong\u003eVCS helps us be unafraid to try new and improved techniques\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e The programmer, entrepreneur, and venture capitalist Paul Graham\nnotes that oil paints unlocked a revolution in experimentation in visual arts\nbecause they were undo-able. Oils provided the \u003cstrong\u003efreedom\u003c/strong\u003e to err and recover\nthat other paint media did not provide (e.g. watercolor). Because of this\n\u003cstrong\u003efreedom\u003c/strong\u003e these painters were free to explore perspective, light, and\ncomposition in completely new ways. Because of their \u003cem\u003etools\u003c/em\u003e they had more\n\u003cem\u003efreedom\u003c/em\u003e and were able to make their burst of exploration a \u003cem\u003emovement\u003c/em\u003e: The\nRenaissance.  \u003c/p\u003e\n\n\u003cp\u003eRead more in his essay \u003ca href=\"http://www.paulgraham.com/hp.html\"\u003e\"Hackers and Painters.\"\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eIdentify Benefits of Version Control Systems\u003c/h2\u003e\n\n\u003cp\u003eBeyond the advantage of being able to safely experiment, there are several\n\u003cem\u003eother\u003c/em\u003e benefits we get when we manage our work with Git:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAutomatically create a backup of your work\u003c/li\u003e\n\u003cli\u003eProvide an easy way to undo mistakes and restore a previous version of your work\u003c/li\u003e\n\u003cli\u003eDocument changes, including a log of what's changed with messages explaining why it was changed\u003c/li\u003e\n\u003cli\u003eKeep file names and hierarchies consistent and organized\u003c/li\u003e\n\u003cli\u003eBranch work off into multiple \"sandboxes\" that can be experimented with but won't impact each other\u003c/li\u003e\n\u003cli\u003eCollaborate with others without disturbing each other's or our own work\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd beyond these are even more advanced features that will help you optimize\nyour workflow, once you master the basics. If that feels daunting, it's OK. Most\npeople learn a few patterns of Git and never learn more until they absolutely\nhave to. Over years they build up a rich set of techniques, but it's rare to find\nsomeone who knows \u003cstrong\u003eeverything\u003c/strong\u003e about Git. You don't need to memorize every command\nand optional flag to get some of its best benefits.\u003c/p\u003e\n\n\u003ch2\u003eRecognize Useful Git Vocabulary Terms\u003c/h2\u003e\n\n\u003cp\u003eWe're about to get busy learning Git, but we first need to establish some common\nvocabulary. Git, perhaps more than any other software, has some special words\nthat you'll hear a lot. Don't worry if you're not sure how some of these terms\nwork in practice—that part will come later.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003erepository (or repo, for short)\u003c/strong\u003e: A directory of files that are \u003cem\u003etracked\u003c/em\u003e by\nGit.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003etrack\u003c/strong\u003e: When a file is \u003cem\u003etracked\u003c/em\u003e by Git, it means that Git will notice any\nchanges to that file. We call these changes \"differences\" or \"diffs\". Git will\nallow you to choose whether to \u003cem\u003eadd\u003c/em\u003e the change, or \"diff,\" in order to keep it\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ediff\u003c/strong\u003e: Short for \"difference,\" the \"diff\" of a file is all the changes that\nhappened in it since the last \u003cem\u003ecommit\u003c/em\u003e. The \"diff\" of a repo is all the diffs\nin all the \u003cem\u003etracked\u003c/em\u003e files in the \u003cem\u003erepo\u003c/em\u003e that have been made, but which have not\nyet been \u003cem\u003ecommitted\u003c/em\u003e (sometimes programmers call this \"the diffset\").\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ecommit\u003c/strong\u003e: When a diff is decided to be a good thing to save, we \u003cem\u003ecommit\u003c/em\u003e the\ndiff to the repo's history using the \u003ccode\u003ecommit\u003c/code\u003e command. When we make a commit we\nare asked to write a \"log\" message which describes what happened in the diff.\nEach commit also knows when it happened and what the repo's \"diff\" was.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003elog\u003c/strong\u003e: The record of what happened in each commit\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003elocal/remote\u003c/strong\u003e: When we start working with a git repo, we \"clone\" it from a\n\u003cem\u003eremote\u003c/em\u003e source and have a copy of that directory on our own system. We call\nthe repo on our personal system the \u003cem\u003elocal\u003c/em\u003e repo. (We'll talk more about the\n\"clone\" command later.)\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003e\u003ccode\u003emaster\u003c/code\u003e branch\u003c/strong\u003e: You'll learn in advanced Git that a repo can support multiple\nbranches (we called those \"sandboxes\" earlier). For the moment, just remember this:\nby default, when you create a Git repo, you will be working on the \u003ccode\u003emaster\u003c/code\u003e branch.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ebranch\u003c/strong\u003e: The combined history of all the changes of all the files in the repo.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIf we are afraid to edit our code we won't remove complicated code that's hard\nto work with, try awesome new libraries, or take chances with fun new features.\nVersion control helps us maintain the overall stability of our code so that we\ncan feel free to explore.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://git-scm.com/book/en/Getting-Started-About-Version-Control\"\u003eGetting Started - About Version Control\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://git-scm.com/video/what-is-git\"\u003eGit Basics - What is Git?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"array-methods","title":"Array Methods","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-array-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-methods/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003col\u003e \u003cli\u003eAdd elements to an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eRemove elements from an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eReplace elements in an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the last lesson, we learned about JavaScript \u003ccode\u003eArray\u003c/code\u003es, including how to create them and access their elements. In this lab, we will dive into JavaScript's \u003ccode\u003eArray\u003c/code\u003e methods, which enable us to add, remove, and change elements.\u003c/p\u003e  \u003cp\u003eWe discussed the fact that it's important to pay attention to whether the method is \u003cem\u003edestructive\u003c/em\u003e (i.e., it \u003cem\u003emutates\u003c/em\u003e the array) or \u003cem\u003enondestructive\u003c/em\u003e. Another factor to pay attention to is what the \u003cem\u003ereturn value\u003c/em\u003e of each of these methods is. Be sure to follow along and experiment with each method in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e until you understand how it works, what it does to the original array, and what it returns.\u003c/p\u003e  \u003ch2\u003eAdd Elements to an Array\u003c/h2\u003e  \u003cp\u003eWe'll start with the JavaScript methods we can use to add elements to an array: \u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e, which are \u003cem\u003edestructive\u003c/em\u003e methods, and the spread operator, which is \u003cem\u003enondestructive\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThese two methods work in the same way:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ethey take one or more arguments (the element or elements you want to add)\u003c/li\u003e \u003cli\u003ethey \u003cem\u003ereturn\u003c/em\u003e the length of the modified array\u003c/li\u003e \u003cli\u003ethey are \u003cem\u003edestructive\u003c/em\u003e methods\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe difference is that the \u003ccode\u003e.push()\u003c/code\u003e method adds elements to the end of an \u003ccode\u003eArray\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e adds them to the beginning of the array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst superheroes = ['Catwoman', 'She-Hulk', 'Jessica Jones'];\u003cbr\u003e\u003cbr\u003esuperheroes.push('Wonder Woman');\u003cbr\u003e// =\u0026gt; 4\u003cbr\u003e\u003cbr\u003esuperheroes;\u003cbr\u003e// =\u0026gt; [\"Catwoman\", \"She-Hulk\", \"Jessica Jones\", \"Wonder Woman\"]\u003cbr\u003e\u003cbr\u003econst cities = ['New York', 'San Francisco'];\u003cbr\u003e\u003cbr\u003ecities.unshift('Boston', 'Chicago');\u003cbr\u003e// =\u0026gt; 3\u003cbr\u003e\u003cbr\u003ecities;\u003cbr\u003e// =\u0026gt; [\"Boston\", \"Chicago\", \"New York\", \"San Francisco\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBefore moving on, try out the examples above as well as some examples of your own in the REPL.\u003c/p\u003e  \u003ch3\u003eSpread Operator\u003c/h3\u003e  \u003cp\u003eThe \u003cem\u003espread operator\u003c/em\u003e, which looks like an ellipsis: \u003ccode\u003e...\u003c/code\u003e, allows us to \"spread out\" the elements of an existing \u003ccode\u003eArray\u003c/code\u003e into a new \u003ccode\u003eArray\u003c/code\u003e, creating a copy:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst coolCities = ['New York', 'San Francisco'];\u003cbr\u003e\u003cbr\u003econst copyOfCoolCities = [...coolCities];\u003cbr\u003e\u003cbr\u003ecopyOfCoolCities;\u003cbr\u003e//=\u0026gt; [\"New York\", \"San Francisco\"] \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote about copying arrays in Javascript\u003c/strong\u003e You might wonder why we would do this rather than just \u003ccode\u003ecopyOfCoolCities = coolCities\u003c/code\u003e. The answer is that \u003ccode\u003ecoolCities\u003c/code\u003e \u003cem\u003epoints to a location in memory\u003c/em\u003e and when you use the assignment operator to create a copy, you create a second variable that points to the \u003cem\u003esame\u003c/em\u003e location. What this means is that, if you change \u003ccode\u003ecopyOfCoolCities\u003c/code\u003e, \u003ccode\u003ecoolCities\u003c/code\u003e is changed as well (and vice versa).\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eA Second note about copying arrays in JavaScript\u003c/strong\u003e Copying arrays in JavaScript is complicated! Some methods of copying create \u003cem\u003edeep\u003c/em\u003e copies and some create \u003cem\u003eshallow\u003c/em\u003e copies. Using the spread operator to copy an array creates a shallow copy. What this means is that, if you use it to copy a nested array, the inner array (or arrays) \u003cem\u003estill points to the same location in memory\u003c/em\u003e as in the original array. So if you modify the \u003cem\u003einner\u003c/em\u003e array in the copy, it changes the inner array in the original array as well (and vice versa). Don't worry too much about shallow and deep copies at this point: just know that you can safely use the spread operator to clone \u003cem\u003enon-nested\u003c/em\u003e arrays.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eNote that, because the spread operator is an operator rather than a method, it works differently than \u003ccode\u003epush()\u003c/code\u003e and \u003ccode\u003eunshift()\u003c/code\u003e: in the example above, we're constructing an \u003ccode\u003eArray\u003c/code\u003e using \u003cem\u003eliteral\u003c/em\u003e notation (i.e., typing the square brackets) and populating it by using the spread operator on the \u003ccode\u003eArray\u003c/code\u003e we want to copy.\u003c/p\u003e  \u003cp\u003eWhere the spread operator comes in especially handy is when we want to add one or more new elements either before or after the elements in the original array (or both) without mutating the original array. To add an element to the front of the new array, we simply type in the new element before spreading the elements in the original array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst coolCities = ['New York', 'San Francisco'];\u003cbr\u003e\u003cbr\u003econst allCities = ['Los Angeles', ...coolCities];\u003cbr\u003e\u003cbr\u003ecoolCities;\u003cbr\u003e// =\u0026gt; [\"New York\", \"San Francisco\"]\u003cbr\u003e\u003cbr\u003eallCities;\u003cbr\u003e// =\u0026gt; [\"Los Angeles\", \"New York\", \"San Francisco\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd, as you might expect, to add a new item to the end of an \u003ccode\u003eArray\u003c/code\u003e, we type in the new element \u003cem\u003eafter\u003c/em\u003e spreading the elements in the original array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst coolCats = ['Hobbes', 'Felix', 'Tom'];\u003cbr\u003e\u003cbr\u003econst allCats = [...coolCats, 'Garfield'];\u003cbr\u003e\u003cbr\u003ecoolCats;\u003cbr\u003e// =\u0026gt; [\"Hobbes\", \"Felix\", \"Tom\"]\u003cbr\u003e\u003cbr\u003eallCats;\u003cbr\u003e// =\u0026gt; [\"Hobbes\", \"Felix\", \"Tom\", \"Garfield\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that, in both cases, we created a new \u003ccode\u003eArray\u003c/code\u003e instead of modifying the original one —\u0026nbsp;our \u003ccode\u003ecoolCities\u003c/code\u003e and \u003ccode\u003ecoolCats\u003c/code\u003e \u003ccode\u003eArray\u003c/code\u003es were untouched. Because we didn't modify the original array, in order to save the results of our work we had to assign it to a variable.\u003c/p\u003e  \u003cp\u003eBe sure to experiment with the spread operator in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e until you're comfortable with how it works — it will come in handy later!\u003c/p\u003e  \u003ch2\u003eRemove Elements from an Array\u003c/h2\u003e  \u003cp\u003eAs complements for \u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e, respectively, we have \u003ccode\u003e.pop()\u003c/code\u003e and \u003ccode\u003e.shift()\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003e.pop()\u003c/code\u003e and \u003ccode\u003e.shift()\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eAs with \u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e, these two methods work in the same way:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ethey don't take any arguments\u003c/li\u003e \u003cli\u003ethey remove a single element\u003c/li\u003e \u003cli\u003ethey \u003cem\u003ereturn\u003c/em\u003e the element that is removed\u003c/li\u003e \u003cli\u003ethey are \u003cem\u003edestructive\u003c/em\u003e methods\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe \u003ccode\u003e.pop()\u003c/code\u003e method removes the last element in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.pop();\u003cbr\u003e// =\u0026gt; \"Sun\"\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003e.shift()\u003c/code\u003e method removes the first element in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.shift();\u003cbr\u003e// =\u0026gt; \"Mon\"\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice above that both methods returned the removed element and mutated the original array.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003e.slice()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eTo remove elements from an \u003ccode\u003eArray\u003c/code\u003e nondestructively (without mutating the original \u003ccode\u003eArray\u003c/code\u003e), we can use the \u003ccode\u003e.slice()\u003c/code\u003e method. Just as the name implies, \u003ccode\u003e.slice()\u003c/code\u003e returns a portion, or \u003cstrong\u003eslice\u003c/strong\u003e, of an \u003ccode\u003eArray\u003c/code\u003e. The method takes 0, 1, or 2 arguments and returns a new array containing the sliced elements.\u003c/p\u003e  \u003ch4\u003eWith No Arguments\u003c/h4\u003e  \u003cp\u003eIf we don't provide any arguments, \u003ccode\u003e.slice()\u003c/code\u003e will return a copy of the original \u003ccode\u003eArray\u003c/code\u003e with all elements intact:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst primes = [2, 3, 5, 7];\u003cbr\u003e\u003cbr\u003econst copyOfPrimes = primes.slice();\u003cbr\u003e\u003cbr\u003eprimes;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7]\u003cbr\u003e\u003cbr\u003ecopyOfPrimes;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that creating a copy using \u003ccode\u003e.slice()\u003c/code\u003e works the same way as if you use the spread operator: they both create a \u003cem\u003eshallow\u003c/em\u003e copy, and with both the copy points to a different object in memory than the original. If you add an element to one of the arrays, it does \u003cstrong\u003enot\u003c/strong\u003e get added to the others:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst primes = [2, 3, 5, 7];\u003cbr\u003e\u003cbr\u003econst copyOfPrimesUsingSlice = primes.slice();\u003cbr\u003e\u003cbr\u003econst copyOfPrimesUsingSpreadOperator = [...primes];\u003cbr\u003e\u003cbr\u003eprimes.push(11);\u003cbr\u003e// =\u0026gt; 5\u003cbr\u003e\u003cbr\u003eprimes;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7, 11]\u003cbr\u003e\u003cbr\u003ecopyOfPrimesUsingSlice;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7]\u003cbr\u003e\u003cbr\u003ecopyOfPrimesUsingSpreadOperator;\u003cbr\u003e// =\u0026gt; [2, 3, 5, 7] \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003eWith Arguments\u003c/h4\u003e  \u003cp\u003eWe can also provide one or two arguments to \u003ccode\u003e.slice()\u003c/code\u003e: the first is the index where the slice should begin and the second is the index \u003cstrong\u003ebefore which\u003c/strong\u003e it should end:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(2, 5);\u003cbr\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf no second argument is provided, the slice will run from the index specified by the first argument to the end of the \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(5);\u003cbr\u003e// =\u0026gt; [\"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo return a new \u003ccode\u003eArray\u003c/code\u003e with the first element removed, we call \u003ccode\u003e.slice(1)\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(1);\u003cbr\u003e// =\u0026gt; [\"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd we can return an array with the last element removed in a way that will look familiar from the previous lesson:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(0, days.length - 1);\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, \u003ccode\u003e.slice()\u003c/code\u003e provides an easier syntax for referencing the last element (or elements) in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.slice(-1);\u003cbr\u003e// =\u0026gt; [\"Sun\"]\u003cbr\u003e\u003cbr\u003edays.slice(-3);\u003cbr\u003e// =\u0026gt; [\"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays.slice(0, -1);\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we provide a negative index, the JavaScript engine knows to start counting from the last element in the \u003ccode\u003eArray\u003c/code\u003e instead of the first.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003e.splice()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eUnlike \u003ccode\u003e.slice()\u003c/code\u003e, which is nondestructive, \u003ccode\u003e.splice()\u003c/code\u003e performs destructive actions. Depending on how many arguments we give it, \u003ccode\u003e.splice()\u003c/code\u003e allows us to remove elements, add elements, or replace elements (or any combination of the three).\u003c/p\u003e  \u003ch4\u003eWith a Single Argument\u003c/h4\u003e \u003cpre\u003e\u003ccode\u003earray.splice(start) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe first argument expected by \u003ccode\u003e.splice()\u003c/code\u003e is the index at which to begin the splice. If we only provide the one argument, \u003ccode\u003e.splice()\u003c/code\u003e will destructively remove a chunk of the original \u003ccode\u003eArray\u003c/code\u003e beginning at the provided index and continuing to the end of the \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e\u003cbr\u003edays.splice(2);\u003cbr\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that \u003ccode\u003e.splice()\u003c/code\u003e \u003cstrong\u003eboth\u003c/strong\u003e mutated the original array (by removing a chunk) \u003cstrong\u003eand\u003c/strong\u003e returned a new array containing the removed chunk.\u003c/p\u003e  \u003cp\u003eWe can use a negative 'start' index with \u003ccode\u003esplice()\u003c/code\u003e, the same as with \u003ccode\u003eslice()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays.splice(-2);\u003cbr\u003e// =\u0026gt; [\"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"] \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003eWith Two Arguments\u003c/h4\u003e \u003cpre\u003e\u003ccode\u003earray.splice(start, deleteCount) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we provide two arguments to \u003ccode\u003e.splice()\u003c/code\u003e, the first is still the index at which to begin splicing, and the second dictates how many elements we want to remove from the \u003ccode\u003eArray\u003c/code\u003e. For example, to remove \u003ccode\u003e3\u003c/code\u003e elements, starting with the element at index \u003ccode\u003e2\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003cbr\u003e\u003cbr\u003edays.splice(2, 3);\u003cbr\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\"]\u003cbr\u003e\u003cbr\u003edays;\u003cbr\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Sat\", \"Sun\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere again, we see that \u003ccode\u003esplice()\u003c/code\u003e removed elements from the original array, mutating that array, and returned the removed elements in a new array.\u003c/p\u003e  \u003ch2\u003eReplace Elements in an Array\u003c/h2\u003e  \u003ch3\u003e\n\u003ccode\u003e.splice()\u003c/code\u003e with 3+ arguments\u003c/h3\u003e \u003cpre\u003e\u003ccode\u003earray.splice(start, deleteCount, item1, item2, ...) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter the first two, every additional argument passed to \u003ccode\u003e.splice()\u003c/code\u003e will be inserted into the \u003ccode\u003eArray\u003c/code\u003e at the position indicated by the first argument. We can replace a single element in an \u003ccode\u003eArray\u003c/code\u003e as follows, discarding a card and drawing a new one:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst cards = ['Ace of Spades', 'Jack of Clubs', 'Nine of Clubs', 'Nine of Diamonds', 'Three of Hearts'];\u003cbr\u003e\u003cbr\u003ecards.splice(2, 1, 'Ace of Clubs');\u003cbr\u003e// =\u0026gt; [\"Nine of Clubs\"]\u003cbr\u003e\u003cbr\u003ecards;\u003cbr\u003e// =\u0026gt; [\"Ace of Spades\", \"Jack of Clubs\", \"Ace of Clubs\", \"Nine of Diamonds\", \"Three of Hearts\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe have deleted \"Nine of Clubs\" and inserted \"Ace of Clubs\" in place, effectively \u003cem\u003ereplacing\u003c/em\u003e the original card.\u003c/p\u003e  \u003cp\u003eOr we can remove two elements and insert three new ones as our restaurant expands its vegetarian options:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst menu = ['Jalapeno Poppers', 'Cheeseburger', 'Fish and Chips', 'French Fries', 'Onion Rings'];\u003cbr\u003e\u003cbr\u003emenu.splice(1, 2, 'Veggie Burger', 'House Salad', 'Teriyaki Tofu');\u003cbr\u003e// =\u0026gt; [\"Cheeseburger\", \"Fish and Chips\"]\u003cbr\u003e\u003cbr\u003emenu;\u003cbr\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Veggie Burger\", \"House Salad\", \"Teriyaki Tofu\", \"French Fries\", \"Onion Rings\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe aren't required to remove anything with \u003ccode\u003e.splice()\u003c/code\u003e — we can use it to insert any number of elements anywhere within an \u003ccode\u003eArray\u003c/code\u003e by passing 0 as the second argument. Here we're adding new books to our library in alphabetical order:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst books = ['Bleak House', 'David Copperfield', 'Our Mutual Friend'];\u003cbr\u003e\u003cbr\u003ebooks.splice(2, 0, 'Great Expectations', 'Oliver Twist');\u003cbr\u003e// =\u0026gt; []\u003cbr\u003e\u003cbr\u003ebooks;\u003cbr\u003e// =\u0026gt; [\"Bleak House\", \"David Copperfield\", \"Great Expectations\", \"Oliver Twist\", \"Our Mutual Friend\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that \u003ccode\u003e.splice()\u003c/code\u003e returns an empty \u003ccode\u003eArray\u003c/code\u003e when we provide a second argument of \u003ccode\u003e0\u003c/code\u003e. This makes sense because the return value is the set of elements that were removed, and we're telling it to remove \u003ccode\u003e0\u003c/code\u003e elements.\u003c/p\u003e  \u003cp\u003eKeep playing around with \u003ccode\u003e.splice()\u003c/code\u003e in the REPL to get comfortable with it.\u003c/p\u003e  \u003ch3\u003eUsing the Computed Member Access Operator to Replace Elements\u003c/h3\u003e  \u003cp\u003eRecall from the previous lesson that we can also use the computed member access operator to replace a single element in an \u003ccode\u003eArray\u003c/code\u003e. If we only need to replace one element, this is a simpler approach:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst cards = ['Ace of Spades', 'Jack of Clubs', 'Nine of Clubs', 'Nine of Diamonds', 'Three of Hearts'];\u003cbr\u003e\u003cbr\u003ecards[2] = 'Ace of Clubs';\u003cbr\u003e// =\u0026gt; \"Ace of Clubs\"\u003cbr\u003e\u003cbr\u003ecards;\u003cbr\u003e// =\u0026gt; [\"Ace of Spades\", \"Jack of Clubs\", \"Ace of Clubs\", \"Nine of Diamonds\", \"Three of Hearts\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBoth this approach and \u003ccode\u003esplice()\u003c/code\u003e are destructive —\u0026nbsp;they modify the original \u003ccode\u003eArray\u003c/code\u003e. There's a \u003cem\u003enondestructive\u003c/em\u003e way to replace or add items at arbitrary points within an \u003ccode\u003eArray\u003c/code\u003e; to do it we need to combine the \u003ccode\u003eslice()\u003c/code\u003e method and the spread operator.\u003c/p\u003e  \u003ch3\u003eSlicing and Spreading\u003c/h3\u003e  \u003cp\u003eCombining \u003ccode\u003e.slice()\u003c/code\u003e and the spread operator allows us to replace elements \u003cem\u003enondestructively\u003c/em\u003e, leaving the original \u003ccode\u003eArray\u003c/code\u003e unharmed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst menu = ['Jalapeno Poppers', 'Cheeseburger', 'Fish and Chips', 'French Fries', 'Onion Rings'];\u003cbr\u003e\u003cbr\u003econst newMenu = [...menu.slice(0, 1), 'Veggie Burger', 'House Salad', 'Teriyaki Tofu', ...menu.slice(3)];\u003cbr\u003e\u003cbr\u003emenu;\u003cbr\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Cheeseburger\", \"Fish and Chips\", \"French Fries\", \"Onion Rings\"]\u003cbr\u003e\u003cbr\u003enewMenu;\u003cbr\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Veggie Burger\", \"House Salad\", \"Teriyaki Tofu\", \"French Fries\", \"Onion Rings\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's unpack this a little bit. We're assigning an array to \u003ccode\u003enewMenu\u003c/code\u003e using literal notation. Inside the brackets, we are spreading the result of calling slice on \u003ccode\u003emenu\u003c/code\u003e with the arguments \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e, then typing in three new elements, then spreading the result of calling slice on \u003ccode\u003emenu\u003c/code\u003e with the argument \u003ccode\u003e3\u003c/code\u003e. Here, we are taking advantage of the fact that the \u003ccode\u003eslice()\u003c/code\u003e method \u003cstrong\u003ereturns a new array\u003c/strong\u003e. We can spread the elements in \u003cstrong\u003ethat\u003c/strong\u003e array just as we can with any other array.\u003c/p\u003e  \u003cp\u003ePlay around with this in the REPL until it makes sense; break it down into its component parts and try each piece on its own. It's the trickiest thing that we've encountered in this lesson, so don't sweat it if it takes a little while to sink in!\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we've learned a variety of methods we can use to remove, add, and replace the elements in \u003ccode\u003eArray\u003c/code\u003es. We've learned that some methods are \u003cem\u003edestructive\u003c/em\u003e and some are \u003cem\u003enondestructive\u003c/em\u003e. With this knowledge, you have the tools you need to manipulate \u003ccode\u003eArray\u003c/code\u003es in very complex ways.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/array-methods/javascript-array-methods.jpg\" alt=\"JavaScript Array Methods\"\u003e\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"\u003e\u003ccode\u003e.slice()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"\u003e\u003ccode\u003e.splice()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"using-your-browsers-developer-tools","title":"Using Your Browser's Developer Tools","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-using-browser-dev-tools\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-using-browser-dev-tools/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-using-browser-dev-tools\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-using-browser-dev-tools/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eExamine the developer tools\u003c/li\u003e\n\u003cli\u003eUse the developer tools to locate and inspect elements\u003c/li\u003e\n\u003cli\u003eUse the developer tools to edit HTML\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eBy now, you're pretty familiar with HTML structural elements, and how they relate to each other on the page. You might even feel pretty comfortable writing your own valid HTML. But much of the time as developers, we'll be jumping in on projects that are already in progress. We'll need a way to view existing HTML and CSS, and potentially a way to play around with elements on live pages to see how we might potentially adjust things. Luckily for us, most browsers have those kinds of tools already built in, called \u003ccode\u003edeveloper tools\u003c/code\u003e, or \u003ccode\u003edev tools\u003c/code\u003e for short. In this lesson, we'll look at the \u003ccode\u003edev tools\u003c/code\u003e on \u003ca href=\"https://www.google.com/chrome/\"\u003eGoogle Chrome\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eExamine the Developer Tools\u003c/h2\u003e\n\u003cp\u003eThe Developer tools that browsers provide you are a great way to experiment with HTML and CSS, and immediately see how those changes are rendered in the browser.\u003c/p\u003e\n\u003cp\u003eFor this lesson, please open the \u003ca href=\"https://en.wikipedia.org/wiki/Alan_Turing\"\u003eWikipedia page for Alan Turing\u003c/a\u003e in Chrome.\u003c/p\u003e\n\u003cp\u003eOnce the page is open, right click on the title of the page — the header containing his name. You should get a list of options. We want to click on the one that says \u003ccode\u003eInspect\u003c/code\u003e. This is going to bring up a window at the bottom of the page that contains all of the HTML that makes up the Wikipedia page.\u003c/p\u003e\n\u003ch2\u003eUse the Developer Tools to Locate and Inspect Elements\u003c/h2\u003e\n\u003cp\u003eIf you hover over elements, you should see different colored boxes appear over different parts of the page. We're going to hover over the HTML until we find the section that contains the title of the page (\"Alan Turing\"). It should look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1 id=\"firstHeading\" class=\"firstHeading\"\u0026gt;...\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eUse the Developer Tools to Edit HTML\u003c/h2\u003e\n\u003cp\u003eThere should be a drop down arrow next to the first \u003ccode\u003e\u0026lt;h1 ...\u0026gt;\u003c/code\u003e If you don't already see the text nested under that \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e, click on the arrow to expose it. Right click that text and select \u003ccode\u003eEdit as HTML\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eA new window will pop up in Dev Tools where we can actually go in and type. Try deleting \"Alan Turing\" and replacing it with \"Puppies Puppies Puppies.\" Once you're done, just click outside of the text window, and take a look back at the header in the browser. It should now say \"Puppies Puppies Puppies.\"\u003c/p\u003e\n\u003cp\u003eIf you refresh the page, your text will disappear. We're just editing HTML in our own web browser, not on Wikipedia's web server. Feel free to scroll around on the page and play with all sorts of different HTML elements and see what happens.\u003c/p\u003e\n\u003ch3\u003eEditing Images\u003c/h3\u003e\n\u003cp\u003eNow, right click on Alan Turing's picture and choose \"Inspect\". Right click on the image tag in the HTML and again select \u003ccode\u003eEdit as HTML\u003c/code\u003e. Let's replace the entire \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tag with another image from a website. For example, you might change it to this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"http://images2.fanpop.com/image/photos/9400000/Aaaaaawwwwwwwwww-Sweet-puppies-9415255-1600-1200.jpg\" alt=\"Puppies\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour puppy image should now be displaying on the page, but it's pretty big. Let's add an attribute to our \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tag to set the image's size. It should look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"http://images2.fanpop.com/image/photos/9400000/Aaaaaawwwwwwwwww-Sweet-puppies-9415255-1600-1200.jpg\" width=\"200\" alt=\"Puppies\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis attribute sets the width of the image to 200px and adjusts the height accordingly. Much better!\u003c/p\u003e\n\u003cp\u003eFeel free to play with other HTML elements and watch things change on the page.\u003c/p\u003e\n\u003ch3\u003eBonus\u003c/h3\u003e\n\u003cp\u003eIf you want to attempt to change any of the styles of the page, take a look at the right-hand column. CSS, which stands for Cascading Style Sheets, manages all the styles of your page (think background color, font size, placement of different items on the page, etc).\u003c/p\u003e\n\u003cp\u003eFeel free to play around, check and uncheck boxes, change colors, change pixels. It's okay if you \"mess things up\". Just refresh the browser and it will all go back to how it was!\u003c/p\u003e","frontPage":false},{"exportId":"organizing-your-work-for-this-course","title":"Organizing Your Work for this Course","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"organizing-work-on-your-computer\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/organizing-work-on-your-computer/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/organizing-work-on-your-computer\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/organizing-work-on-your-computer/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eFrom now on, you'll be executing code on you own computer. For each and every lab, you'll be copying the code to your computer using \u003ca href=\"https://git-scm.com\"\u003eGit\u003c/a\u003e.  You will then be able to run and test your code in your terminal, and submit your work using the learn-co gem.  \u003c/p\u003e\n\n\u003ch3\u003eSetting Up Your Directory Structure\u003c/h3\u003e\n\n\u003ciframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/H-6D2rOBVrg\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e**Note for WSL Users: Although the video above is for the macOS, the commands shown in the terminal will be the same in\nyour Ubuntu shell. When you open Ubuntu, you should start in your home directory. Confirm this with the command \u003ccode\u003epwd\u003c/code\u003e. In\nUbuntu, your home directory will start off empty, so there will not be a \u003ccode\u003eDevelopment\u003c/code\u003e folder present, and running \u003ccode\u003els\u003c/code\u003e will\nnot produce any results. You can create a \u003ccode\u003eDevelopment\u003c/code\u003e folder with \u003ccode\u003emkdir Development\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e","frontPage":false},{"exportId":"mac-nodejs-install","title":"Mac NodeJS Install","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-nodejs\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-nodejs/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-nodejs\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-nodejs/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eInstall Node Version Manager (NVM)\u003c/h2\u003e\n\n\u003cp\u003eNode Version Manager (NVM) is a tool that will allow you to download and install\nmultiple versions of Node.js, one of the environments for the JavaScript\nprogramming language that we teach at Flatiron School. Installing NVM is the\nfirst step in installing Node.js on your macOS operating system.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | zsh\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e\n\u003cli\u003eReopen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/3Unf__nC4nk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a message ending with \"Note: to remove, delete, or uninstall nvm\",\ncontinue below.\u003c/p\u003e\n\n\u003ch2\u003eInstall Node.js\u003c/h2\u003e\n\n\u003cp\u003eFor our JavaScript labs and lessons, we expect that students use Node.js on\ntheir macOS operating system. If Node Version Manager (NVM) has been\nsuccessfully installed, you can quickly install Node.js with a couple of\ncommands.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm install node\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm list\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tOqRJJaCAVY\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a message starting with \"-\u0026gt; v14.13.0\" (or any higher number, like \"-\u0026gt; v14.13.10\" or \"-\u0026gt; v15.0.0\"), continue to the next lesson,\n\u003cstrong\u003eInstalling Ruby on macOS\u003c/strong\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"booleans","title":"Booleans","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-booleans\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-booleans/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-booleans\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-booleans/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain What a Boolean Expression Is\u003c/li\u003e\n\u003cli\u003eDescribe Truthy and Falsey Values in JavaScript\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eQuite commonly in our computer programs, we want to execute code\n\u003cem\u003econditionally\u003c/em\u003e, i.e., if some condition is true (or false). For example:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cem\u003eIf\u003c/em\u003e the user has entered the correct login credentials, \u003cem\u003ethen\u003c/em\u003e log them into our web app\u003c/li\u003e\n\u003cli\u003e\n\u003cem\u003eIf\u003c/em\u003e there isn't enough money in the user's account to execute the transfer,\n\u003cem\u003ethen\u003c/em\u003e send them an error message\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the following lessons, we will learn about operators we can use to construct\nthose conditional statements. Before we get to that, however, we need to\nunderstand \u003cem\u003eboolean expressions\u003c/em\u003e and the concepts of \u003cem\u003etruthyness\u003c/em\u003e and\n\u003cem\u003efalseyness\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eExplain What a Boolean Expressions Is\u003c/h2\u003e\n\n\u003cp\u003eWe have learned that \u003cem\u003eexpressions\u003c/em\u003e are code statements that return a value: the\n\u003cem\u003econstant expression\u003c/em\u003e returns the value of the constant, the \u003cem\u003eassignment\nexpression\u003c/em\u003e returns the value that is assigned, and the \u003cem\u003evariable lookup\nexpression\u003c/em\u003e returns the value of a variable. We have also learned that\nJavaScript has a \u003ccode\u003eBoolean\u003c/code\u003e data type that has only two values: \u003ccode\u003etrue\u003c/code\u003e or\n\u003ccode\u003efalse\u003c/code\u003e. As you might expect, therefore, a \u003cem\u003eBoolean expression\u003c/em\u003e is an expression\nthat returns either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDescribe the Difference Between Truthy and Falsey Values\u003c/h2\u003e\n\n\u003cp\u003eAll values in Javascript, of any data type (\u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eNumber\u003c/code\u003e, etc.), are\ntreated as either \u003cem\u003etruthy\u003c/em\u003e or \u003cem\u003efalsey\u003c/em\u003e. The following values are \u003cstrong\u003efalsey\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efalse\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAn empty string (\u003ccode\u003e\"\"\u003c/code\u003e, \u003ccode\u003e''\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eEvery other value is truthy\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo check whether a value is truthy or falsey, we can pass it to the global\n\u003ccode\u003eBoolean\u003c/code\u003e object, which converts the value into its boolean equivalent. You may\nwant to try these out yourself in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eBoolean(false);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(null);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(undefined);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(0);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(NaN);\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean('');\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003eBoolean(true);\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eBoolean(42);\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eBoolean('Hello, world!');\u003cbr\u003e// =\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDon't worry if this seems a little theoretical at this point. We will learn how\nthis information is used in constructing Boolean expressions in the following\nlessons.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we've learned what a \u003cem\u003eBoolean expression\u003c/em\u003e is. We've also learned\nwhich values in JavaScript are considered \u003cem\u003etruthy\u003c/em\u003e and which are considered\n\u003cem\u003efalsey\u003c/em\u003e. With these understandings, we are now ready to learn how to construct\nBoolean expressions that return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMDN\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\u003eTruthy\u003c/a\u003e and \u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"\u003efalsey\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"nested-html-tags-and-attributes","title":"Nested HTML Tags And Attributes","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-basics-nested-tags-and-attributes\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-nested-tags-and-attributes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-nested-tags-and-attributes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eAssess HTML document structure\u003c/li\u003e \u003cli\u003eIdentify HTML tag attributes and their purposes\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWhen you take a look at an entire HTML document, it's sometimes challenging to keep track of where tags begin and end. But understanding more about HTML tag nesting and attributes can help everything fall into place.\u003c/p\u003e  \u003ch2\u003eAssess HTML Document Structure\u003c/h2\u003e  \u003cp\u003eWhenever we nest an HTML tag inside of another tag, we indent the inner tag so that the overall tag hierarchy is clear. Take a look at the following example of a well-structured HTML document.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;Web development course\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;header\u0026gt;\u003cbr\u003e    \u0026lt;!-- header element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header --\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;nav id=\"main-navigation\"\u0026gt;\u003cbr\u003e      \u0026lt;!-- nav element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav --\u0026gt;\u003cbr\u003e\u003cbr\u003e        \u0026lt;ul\u0026gt;\u003cbr\u003e        \u0026lt;!-- ul element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul --\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;li\u0026gt;\u0026lt;a href=\"/web\"\u0026gt;Introduction to the web\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e          \u0026lt;!-- li element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li --\u0026gt;\u003cbr\u003e\u003cbr\u003e          \u0026lt;li\u0026gt;\u0026lt;a href=\"/html\"\u0026gt;Learn HTML\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e        \u0026lt;/ul\u0026gt;\u003cbr\u003e      \u0026lt;/nav\u0026gt;\u003cbr\u003e    \u0026lt;/header\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eKeeping your HTML well indented so that every tag and \"level\" of nesting is aligned will make your code easier to read and maintain.\u003c/p\u003e  \u003ch2\u003eIdentify HTML Tag Attributes and Their Purposes\u003c/h2\u003e  \u003cp\u003eAn HTML attribute is extra information we can add to a tag to identify, classify, style or modify the default behavior of the element the tag contains.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  \u0026lt;element attribute_name=attribute_value another_attribute_name=another_attribute_value\u0026gt;\u0026lt;/element\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eA common use case for HTML attributes is element identification (\u003ccode\u003eid\u003c/code\u003e attribute) and/or classification (\u003ccode\u003eclass\u003c/code\u003e attribute). The \u003ccode\u003eid\u003c/code\u003e attribute is used to uniquely identify an element within the whole document. The \u003ccode\u003eclass\u003c/code\u003e attribute is used to group together similar elements.\u003c/p\u003e  \u003cp\u003eBoth \u003ccode\u003e\u0026lt;id\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;class\u0026gt;\u003c/code\u003e attributes are often used for styling purposes since they allow us to find a specific element or style similar elements with a single style declaration.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  \u0026lt;p id='main_paragraph'\u0026gt;This element can be uniquely identified  using the 'main_paragraph' id HTML attribute\u0026lt;/p\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;p class='other_paragraphs'\u0026gt;This element belongs to a group of elements who share the 'other_paragraphs' HTML class attribute\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;p class='other_paragraphs'\u0026gt;This element also belongs to a group of elements who share the 'other_paragraphs' HTML class attribute\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAttributes that identify or classify are not necessary for the HTML tag to work as intended, but other attributes \u003cem\u003eare\u003c/em\u003e — for example, an \u003ccode\u003ea\u003c/code\u003e tag, which links a piece of text to another location on our own web page or another web page.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  \u0026lt;a href=\"https://flatironschool.com/\"\u0026gt;Flatiron School\u0026lt;/a\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we use the \u003ccode\u003ehref\u003c/code\u003e attribute to tell the HTML tag where the destination of the linked text should be. Without this information, our link won't work and we won't be able to send more people to the Flatiron School website. Certain attributes go hand in hand with certain HTML tags, and as you learn the tags, you'll learn their attributes.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWe use nesting to keep the elements of our HTML document organized, and we use attributes to give our elements more power. With these strategies, we can construct a solid HTML structure that serves as a foundation for anything else we want to build.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"http://www.bu.edu/tech/services/cccs/websites/www/non-wordpress/start/html-introduction/syntax/nesting-tags/\"\u003eNested Tags\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.thoughtco.com/nesting-html-tags-3466475\"\u003eTags\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://www.iraqtimeline.com/maxdesign/basicdesign/principles/prinnest.html\"\u003eBest Practices Web Design\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.w3schools.com/html/html_attributes.asp\"\u003eHTML Attributes\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.tutorialspoint.com/html/html_attributes.htm\"\u003eAttributes\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"git-basics","title":"Git Basics","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"git-version-control-basics-phase-0\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/git-version-control-basics-phase-0/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-version-control-basics-phase-0\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-version-control-basics-phase-0/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify how to initialize a Git repository with \u003ccode\u003egit init\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eCheck the status of a repository with \u003ccode\u003egit status\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eKeep track of file changes with \u003ccode\u003egit add\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eCreate a commit and apply a commit message with \u003ccode\u003egit commit\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn our overview of version control systems, we saw that using a VCS helps us\norganize our work and keep track of changes we make. We also determined that the\nVCS we're going to use is Git. Now we can begin learning the commands we need to\nmake Git work for us.\u003c/p\u003e\n\n\u003ch2\u003eIdentify How to Initialize a Git Repository with \u003ccode\u003egit init\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eGit operates on a directory level. When we have a new directory that we want to\ntrack our files in, we need to \u003cem\u003einitialize\u003c/em\u003e the directory as a Git repository.\nThat means Git will then pay attention to what goes on in the directory and give\nus all the Git superpowers.\u003c/p\u003e\n\n\u003cp\u003eTo get started, we'll create a new directory. In your terminal, type the \nfollowing:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eREMEMBER\u003c/strong\u003e: Don't type the \u003ccode\u003e$\u003c/code\u003e. That's the universal symbol for a command prompt. It's how technical documentation says \"Here's a thing for the shell to process.\"\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003e~ $ mkdir my-git-project\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis command creates new a directory. Then:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e~ $ cd my-git-project\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis command moves into the newly created directory.\u003c/p\u003e\n\n\u003cp\u003eNow that we're in the directory where we want Git to watch for changes (adding,\nremoving, and editing files), let's set up this directory by \u003cem\u003einitializing\u003c/em\u003e it.\nIn the terminal type \u003ccode\u003egit init\u003c/code\u003e. It should look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ git init\u003cbr\u003eInitialized empty Git repository in /Users/avi/my-git-project/.git/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGit lets us know that it has put \u003ccode\u003e/Users/avi/my-git-project\u003c/code\u003e under its protection.\nGit also tells us that it stores its own data in the \u003ccode\u003e.git\u003c/code\u003e directory. This hidden\ndirectory, \u003ccode\u003e.git\u003c/code\u003e, is where Git keeps important stuff, like the commit\nhistory. Don't go in there and start randomly deleting things! That said, if ever\nyou do \u003ccode\u003egit init\u003c/code\u003e in the wrong directory, you can \u003ccode\u003erm -rf .git\u003c/code\u003e and return the\ndirectory to a plain-old, unprotected directory.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eBe careful about making an entire directory, like our home directory or our\ndesktop, into a Git repository accidentally. Make sure you only type \u003ccode\u003egit init\u003c/code\u003e\n\u003cem\u003ewithin\u003c/em\u003e the directory you want \u003ccode\u003egit\u003c/code\u003e to track.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eCheck the Status of a Repository with \u003ccode\u003egit status\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eNow that we have Git watching this directory, let's see what it can tell us about the\ndirectory. The command we use for this is \u003ccode\u003egit status\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ git status\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince we have not added any files yet, we'll see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eOn branch master\u003cbr\u003e\u003cbr\u003eNo commits yet\u003cbr\u003e\u003cbr\u003enothing to commit (create/copy files and use \"git add\" to track)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Newer repositories may state \u003ccode\u003eOn branch main\u003c/code\u003e.  Branching is beyond the scope of\nthis lesson, but to briefly explain - \u003ccode\u003emain\u003c/code\u003e and \u003ccode\u003emaster\u003c/code\u003e both refer to the same thing - the\ncore (\u003cem\u003e\u003cstrong\u003emain\u003c/strong\u003e, get it?\u003c/em\u003e) branch of a repository. A single repository can have many branches, but always\nhas only \u003cem\u003eone\u003c/em\u003e core branch. In the past, this branch defaulted to the name \u003ccode\u003emaster\u003c/code\u003e. Going forward,\nthe branch will be named \u003ccode\u003emain\u003c/code\u003e. You'll likely see both as you work with repositories new and\nold.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eLet's create a \u003ccode\u003eREADME.md\u003c/code\u003e that describes the project. Make our new file by\ntyping \u003ccode\u003etouch README.md\u003c/code\u003e from within the \u003ccode\u003emy-git-project\u003c/code\u003e directory. We won't\nsee any output after \u003ccode\u003etouch\u003c/code\u003e, but we will see a new file has been created if we\ntype \u003ccode\u003els\u003c/code\u003e (which gives a list of all the files in the directory).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ touch README.md\u003cbr\u003emy-git-project $ ls\u003cbr\u003eREADME.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith at least one new project file we can enable Git to start tracking changes.\nType \u003ccode\u003egit status\u003c/code\u003e. Git will show us what our current repository looks like and\nwhat changes it sees.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ git status\u003cbr\u003eOn branch master\u003cbr\u003e\u003cbr\u003eNo commits yet\u003cbr\u003e\u003cbr\u003eUntracked files:\u003cbr\u003e  (use \"git add ...\" to include in what will be committed)\u003cbr\u003e\u003cbr\u003e  README.md\u003cbr\u003e\u003cbr\u003enothing added to commit but untracked files present (use `git add` to track)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGit confirms that it's aware of the file \u003ccode\u003eREADME.md\u003c/code\u003e, but it's not \"tracking\" it.\nGit's not doing anything with the file and the file is not doing anything with\nGit...\u003cem\u003eyet\u003c/em\u003e. Let's change that!\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eIMPORTANT\u003c/strong\u003e: Whenever we want to check the status of our Git repository — which we do\noften — type \u003ccode\u003egit status\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eKeep Track of File Changes with \u003ccode\u003egit add\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eCurrently, the file in our repository is not being tracked by Git. We\nhave to tell Git about all the files we want it to keep track of and consider as\npart of our project. We can do this by \u003cem\u003eadding\u003c/em\u003e the files to our \u003ccode\u003egit\u003c/code\u003e repository\nwith \u003ccode\u003egit add \u0026lt;filename or path\u0026gt;\u003c/code\u003e. To add our new \u003ccode\u003eREADME.md\u003c/code\u003e to the repository\nand check the status, we type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ git add README.md\u003cbr\u003emy-git-project $ git status\u003cbr\u003eOn branch master\u003cbr\u003e\u003cbr\u003eNo commits yet\u003cbr\u003e\u003cbr\u003eChanges to be committed:\u003cbr\u003e  (use \"git rm --cached ...\" to unstage)\u003cbr\u003e\u003cbr\u003e  new file:   README.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can now see that Git is ready to keep track of \u003ccode\u003eREADME.md\u003c/code\u003e. All the changes\nin the file at the time we \u003ccode\u003eadded\u003c/code\u003e it are \"staged.\" If we were to change \u003ccode\u003eREADME.md\u003c/code\u003e,\nwe'd need to re-add the file. As it happens here, this staged change is \"create the\nfile, nothing inside of it\" because \u003ccode\u003etouch\u003c/code\u003e created an empty file.\u003c/p\u003e\n\n\u003cp\u003eTo save a new \u003cem\u003eversion\u003c/em\u003e of this new file (or, later, to \"capture\" changes\nto a file) we need to \u003cem\u003ecommit\u003c/em\u003e the set of changes or \"diff.\" We \"save\" the changes\nin our repository by making \u003cem\u003ecommits\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eCreate a Commit and Apply a Commit Message with \u003ccode\u003egit commit\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eRemember: \u003ccode\u003egit add\u003c/code\u003e got our changes to the repository ready in the previous step. Those\nchanges are the ones that will be \"captured\" in the commit.\u003c/p\u003e\n\n\u003cp\u003eTo make our first commit, type: \u003ccode\u003egit commit -m \"Initial commit\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis tells \u003ccode\u003egit\u003c/code\u003e that our commit message, represented by the \u003ccode\u003e-m\u003c/code\u003e flag, is \u003ccode\u003e\"Initial commit\"\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ git commit -m \"Initial commit\"\u003cbr\u003e[master (root-commit) e55477d] Initial commit\u003cbr\u003e 1 file changed, 0 insertions(+), 0 deletions(-)\u003cbr\u003e create mode 100644 README.md\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see that Git has created a new version of our repo, represented by the\n\u003cem\u003eSHA\u003c/em\u003e \u003ccode\u003ee55477d\u003c/code\u003e. SHAs are the identification system that \u003ccode\u003egit\u003c/code\u003e uses to keep track\nof versions; they're long complex numbers and letters that are unlikely to be\nduplicated.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecommit\u003c/code\u003e command committed 1 file.\u003c/p\u003e\n\n\u003cp\u003eNow, if we type \u003ccode\u003egit status\u003c/code\u003e, we'll see\nthat it is at a \"clean state\", and there is nothing to commit and no new changes.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ git status\u003cbr\u003eOn branch master\u003cbr\u003enothing to commit, working directory clean\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we make another change, for example, to README.md, we can add another commit\nwith this new set of changes with\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit commit -am \"A message\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e-a\u003c/code\u003e flag refers to adding 'all changes' on all tracked files and \u003ccode\u003e-m\u003c/code\u003e\nspecifies a commit message of \u003ccode\u003e\"Updates README.md\"\u003c/code\u003e. To review some of your\nUnix CLI skills, this could also be written as: \u003ccode\u003egit commit -a -m \"Updates README.md\"\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe commit would look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emy-git-project $ git commit -am \"Updates README.md\"\u003cbr\u003e[master (root-commit) e55477d] Updates README.md\u003cbr\u003e 1 file changed, 4 insertions(+), 0 deletions(2)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGood work! Commits are amazingly powerful in Git. They are the heart of many of Git's advanced\nfeatures. Understanding the basic workflow of Git initialization and setup\nis the foundation for success.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eTo make a new Git repository out of a directory — which we'll only have to do once\nper project — use \u003ccode\u003egit init\u003c/code\u003e. Whenever you make a change to a file or create a\nnew file, you can check the status of these changes with \u003ccode\u003egit status\u003c/code\u003e. When\nyou're ready to preserve changes, you can add the files (or directories of files) with the\n\u003ccode\u003egit add \u0026lt;filename or path\u0026gt;\u003c/code\u003e command.\u003c/p\u003e\n\n\u003cp\u003eOnce your changes have been added, or \"staged,\" use \u003ccode\u003egit commit -m\u003c/code\u003e to commit them\nwith an explanatory message. You can shorten the \u003ccode\u003eadd\u003c/code\u003e + \u003ccode\u003ecommit\u003c/code\u003e process, provided\nthat all the files are being tracked by using \u003ccode\u003egit commit -am \"A message\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf we've followed all these steps, our \u003ccode\u003emy-git-project\u003c/code\u003e directory is now a local \u003ccode\u003egit\u003c/code\u003e\nrepository.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://git-scm.com/book/en/v1/Git-Basics\"\u003eGit Basics at git-scm.com\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"bash-navigation","title":"Bash Navigation","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"cli-essentials-bash-navigation\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-navigation/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-navigation\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-navigation/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDemonstrate How to Navigate with \u003ccode\u003ebash\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eIdentify our \"home directory\"\u003c/li\u003e\n\u003cli\u003eIdentify my logged-in username with \u003ccode\u003ewhoami\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eIdentify the \"current working directory\" with \u003ccode\u003epwd\u003c/code\u003e (\"print working directory\")\u003c/li\u003e\n\u003cli\u003eNavigate up one directory in the file system\u003c/li\u003e\n\u003cli\u003eChange directories using \u003ccode\u003ecd\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eUsing the CLI (command line interface) might seem like a big challenge to first-\ntime users who are afraid of making mistakes that could break their computers or\nruin their files. Fear not! We'll step you through it.\u003c/p\u003e\n\n\u003cp\u003eThe command-line interfaces, or \"shells\", used on OSX, Linux, and the \"Windows\nSubsystem for Linux (WSL),\" are called \u003ccode\u003ebash\u003c/code\u003e. We'll document how to use the\n\u003ccode\u003ebash\u003c/code\u003e CLI in this module.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: if you are using a Windows machine, you will not be able to use the \ncommands covered in this lesson until you have set up WSL.\u003c/p\u003e\n\n\u003ch2\u003eDemonstrate How to Navigate with \u003ccode\u003ebash\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eTo review: \u003ccode\u003ebash\u003c/code\u003e is a text-based interpreter that provides a \u003cem\u003ecommand-line\ninterface\u003c/em\u003e for controlling your computer (or operating system).\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: Bash is actually an acronym which stands for \u003cstrong\u003eB\u003c/strong\u003eourne-\u003cstrong\u003eA\u003c/strong\u003egain\n\u003cstrong\u003eSH\u003c/strong\u003eell. As the word \"again\" suggests, there are \u003cem\u003eother\u003c/em\u003e shells, some of\nwhich came before \u003ccode\u003ebash\u003c/code\u003e. There are also shells that have come along \u003cem\u003esince\u003c/em\u003e\n\u003ccode\u003ebash\u003c/code\u003e. Nevertheless most programmers use \u003ccode\u003ebash\u003c/code\u003e or something very similar.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eA great place to start learning about the CLI is by using it to do a task\nyou're already familiar with: looking to see what's inside folders like\nyour directories and desktop. Programmers call this activity: \u003cem\u003enavigating\u003c/em\u003e.\nIn the CLI we imagine that we're \"traveling\" to different places. We'll use\nmetaphors like \"go into the folder\" or \"go up one folder\" or \"visit the location\nat such-and-such \u003cem\u003epath\u003c/em\u003e.\"\u003c/p\u003e\n\n\u003cp\u003eAs you learn to navigate with the shell and get to used to it, you'll see that\nit's friendlier than it might seem at first. In no time, you'll be looking like\nthis typing-machine from \"Ghost in the Shell:\"\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://i.giphy.com/fsoCk5kgOcYMM.gif\" alt=\"\u0026quot;Ghost in the Shell\u0026quot;\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eIdentify Our \"Home Directory\"\u003c/h3\u003e\n\n\u003cp\u003eWhenever you open a terminal session (new window, new terminal tab, launching\nthe program for the first time after a reboot), you will be placed in (remember\nour \"travel\" metaphor!) your home directory. Directory names on Unix systems are\nwritten like:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e/parentdirectory/subdirectory/another/subdirectory/\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eWe call a bit of text meant to communicate location on a file system a \u003cem\u003epath\u003c/em\u003e.\nPaths use \u003ccode\u003e/\u003c/code\u003e to show levels of \"nesting.\"\u003c/p\u003e\n\n\u003cp\u003eFor example, a user's home directory is often written like: \u003ccode\u003e/Users/username\u003c/code\u003e or\n\u003ccode\u003e/home/username\u003c/code\u003e. The \u003ccode\u003e/\u003c/code\u003e on the far left of the path name means the very top of\nthe file system \"tree.\" The \u003ccode\u003e/\u003c/code\u003e directory is also called the \"root\" directory.\nIt contains all the \"top-level directories\" that can contain sub-directories\n(...which can contain sub-directories, which can contain sub-directories, on and\non).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e When navigating through a directory, it often helps if we picture the\nfile structure like a tree. With this visualization, we can refer to \"moving\nup\" or \"moving down\" between directory levels, and keep better track of not\nonly where our files are but where we are among our files. Here's an example:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/cli-essentials/bash-navigation/Image_58_DirectoryStructureDiagram.png\" alt=\"\u0026quot;Directory tree structure diagram\u0026quot;\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's take a second to look at some typical home directories:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e/Users/username\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis means the \"root\" contains a directory called \u003ccode\u003eUsers\u003c/code\u003e and \u003ccode\u003eUsers\u003c/code\u003e contains\n\u003ccode\u003eusername\u003c/code\u003e. Paths like this are typical for Mac OSX.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e/home/username\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis means the \"root\" contains a directory called \u003ccode\u003ehome\u003c/code\u003e and \u003ccode\u003ehome\u003c/code\u003e contains\n\u003ccode\u003eusername\u003c/code\u003e. Paths like this are typical for Linux.\u003c/p\u003e\n\n\u003cp\u003eObviously, our names (well, most of our names) are not \u003ccode\u003eusername\u003c/code\u003e. Instead we\nlog into our systems as \u003ccode\u003eByron Poodle\u003c/code\u003e or \u003ccode\u003eNancy the Cat\u003c/code\u003e. How can we find out\nwhat our logged-in-user name is?\u003c/p\u003e\n\n\u003cp\u003eLet's ask the shell to tell us who it thinks we are. We'll use \u003ccode\u003ewhoami\u003c/code\u003e to do\njust this in the next section.\u003c/p\u003e\n\n\u003ch3\u003eIdentify My Logged-In Username with \u003ccode\u003ewhoami\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eLet's start simply. Let's ask the computer who I am logged in as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ whoami\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/prework/whoami.jpg\" alt=\"\u0026quot;whoami\u0026quot;\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ewhoami\u003c/code\u003e command lets you see which user account you're logged in to from\nthe CLI. This might seem obvious, especially if you're logged in on your\npersonal computer. But Unix machines have multiple accounts by default (though\nyou may not have seen them yet).\u003c/p\u003e\n\n\u003cp\u003eMy system says I am \u003ccode\u003ekellyegreene\u003c/code\u003e. Based on what we learned about home\ndirectories, what do you think my home directory \u003cem\u003epath\u003c/em\u003e is? In the next section,\nwe'll ask the shell to tell us what our home directory's path is.\u003c/p\u003e\n\n\u003ch3\u003eIdentify the \"Current Working Directory\" With \u003ccode\u003epwd\u003c/code\u003e (\"print working directory\")\u003c/h3\u003e\n\u003cpre\u003e\u003ccode\u003e$ pwd\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003eAny time you see the\u003c/em\u003e \u003ccode\u003e$\u003c/code\u003e \u003cem\u003echaracter, you shouldn't type it in. This\nis just a standard way to represent a bash prompt. Yours may or may not be a\u003c/em\u003e\n\u003ccode\u003e$\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou should see some output describing the directory you are currently in. It's\nprobably something like \u003ccode\u003e/Users/byron_the_poodle\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003epwd\u003c/code\u003e command stands for \"\u003cstrong\u003ep\u003c/strong\u003erint \u003cstrong\u003ew\u003c/strong\u003eorking \u003cstrong\u003ed\u003c/strong\u003eirectory\". As you\n\"navigate\" your file system, you might get lost. Just like wandering in a big\ncity, you can look for street signs to find out where you are. The \u003ccode\u003epwd\u003c/code\u003e command\nacts like those street signs. You'll never be lost again!\u003c/p\u003e\n\n\u003cp\u003eWe've just used \u003ccode\u003epwd\u003c/code\u003e to demonstrate that when we open a \u003ccode\u003ebash\u003c/code\u003e session the\noperating system automatically \"puts\" us in our home directory. Let's now do\nsome real \"navigation.\" In the next section we'll learn to move \"up\" one\ncontaining directory.\u003c/p\u003e\n\n\u003ch3\u003eNavigate Up One Directory in the File System\u003c/h3\u003e\n\n\u003cp\u003eTry typing this in the command line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ cd ..\u003cbr\u003e$ pwd\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou \"moved up\" one level of nesting, so you should now see that you are one\nlevel up from where you were and one level closer to the \"root\" directory.\nIn your terminal see this by using \u003ccode\u003epwd\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e/Users\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecd\u003c/code\u003e command stands for \"\u003cstrong\u003ec\u003c/strong\u003ehange \u003cstrong\u003ed\u003c/strong\u003eirectory\".\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e..\u003c/code\u003e is a shortcut for the directory \u003cem\u003eabove\u003c/em\u003e the working directory. The\n\u003ccode\u003ebash\u003c/code\u003e shell provides a series of \"shortcuts\" for some commonly-used file system\npaths. \u003ccode\u003e..\u003c/code\u003e means \"this directory's containing folder. These shortcuts look\nstrange but they're designed to be \u003cem\u003eshort\u003c/em\u003e and therefore \u003cem\u003eeasy to type\u003c/em\u003e and\ntherefore \u003cem\u003efast\u003c/em\u003e and, as we've hinted, the CLI is all about speed.\u003c/p\u003e\n\n\u003cp\u003eSo in this command example we said: \u003ccode\u003echange directory to the parent folder\u003c/code\u003e. You\ncan do this all the way back up to the \u003ccode\u003e/\u003c/code\u003e directory.\u003c/p\u003e\n\n\u003cp\u003eLet's use \u003ccode\u003ecd\u003c/code\u003e to get back to our home directory.\u003c/p\u003e\n\n\u003ch3\u003eChange Directories Using \u003ccode\u003ecd\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003ebash\u003c/code\u003e shell provides default shortcut for your home directory: \u003ccode\u003e~\u003c/code\u003e. Use \u003ccode\u003ecd\n..\u003c/code\u003e to go \"up\" a few directories (why not all the way to the root?).\u003c/p\u003e\n\n\u003cp\u003eThen, when you run this command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ cd ~\u003cbr\u003e$ pwd\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou'll see you're back in your home directory. Use \u003ccode\u003epwd\u003c/code\u003e to verify!\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eSHORTCUT\u003c/strong\u003e By the way, if you enter \u003ccode\u003ecd\u003c/code\u003e with no argument, you'll\nbe taken to your home directory.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAnother shortcut, that might seem not too useful at first, is \u003ccode\u003e.\u003c/code\u003e meaning \"the\ncurrent directory I'm in.\u003c/p\u003e\n\n\u003cp\u003eIf you try this command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ cd .\u003cbr\u003e$ pwd\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see you are still in the same directory where you wrote\nthe command.\u003c/p\u003e\n\n\u003cp\u003eInstead of using shortcuts like \u003ccode\u003e..\u003c/code\u003e, \u003ccode\u003e.\u003c/code\u003e, or \u003ccode\u003e~\u003c/code\u003e, you can give a\npath to \u003ccode\u003ecd\u003c/code\u003e and it will \"take\" you there.\u003c/p\u003e\n\n\u003cp\u003eTry \u003ccode\u003ecd /Applications\u003c/code\u003e or even \u003ccode\u003ecd /\u003c/code\u003e. You can run a \u003ccode\u003epwd\u003c/code\u003e in these directories\nand see that you've \"navigated into\" them. Try \u003ccode\u003ecd alksdjfalksdjfalskdjf\u003c/code\u003e. What\nerror does \u003ccode\u003ebash\u003c/code\u003e give you? Is that what you expected? We'll discuss more\nabout the types of paths you can give \u003ccode\u003ebash\u003c/code\u003e in the next section.\u003c/p\u003e\n\n\u003ch3\u003ePaths in Shell\u003c/h3\u003e\n\n\u003cp\u003eThe path supplied to the \u003ccode\u003ecd\u003c/code\u003e command can be either \u003cem\u003eabsolute\u003c/em\u003e or \u003cem\u003erelative\u003c/em\u003e\npaths. An absolute path is a path that always gets you to the same folder. You\ncan recognize them because they start with \u003ccode\u003e/\u003c/code\u003e. For example\n\u003ccode\u003e/Users/kellyegreene\u003c/code\u003e, is an absolute path.\u003c/p\u003e\n\n\u003cp\u003eA relative path is a path \u003cstrong\u003erelative\u003c/strong\u003e to the working directory you're \"in\" at\nthe time you write the command. They start\nwith the name of a directory or a file. For example \u003ccode\u003ekellyegreene/Documents\u003c/code\u003e, is\na relative path.\u003c/p\u003e\n\n\u003cp\u003eIf I were in my home directory \u003ccode\u003e/Users/kellyegreene\u003c/code\u003e and said \u003ccode\u003ecd\nmixtapes/the-masked-rapper-vol-1\u003c/code\u003e, it would work! If I were in\n\u003ccode\u003e/Users/annoyingbrother\u003c/code\u003e and said \u003ccode\u003ecd mixtapes/the-masked-rapper-vol-1\u003c/code\u003e, \u003ccode\u003ebash\u003c/code\u003e\nwould return an error because that sub-directory doesn't exist there (because\nI, Kellye Greene, am the Masked Rapper, while my brother can't rhyme).\u003c/p\u003e\n\n\u003cp\u003eAbsolute paths and relative paths might sound confusing in CLI universe, but\nwe intuitively understand this difference in our day-to-day lives. We usually call\nthis difference \u003cem\u003econtext\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf someone asks if you want to go get a slice of pizza for lunch they're probably\nthinking of somewhere close to where you're currently located –\nsomewhere close \u003cem\u003erelatively\u003c/em\u003e speaking. They're expecting you to say something like:\u003c/p\u003e\n\n\u003cp\u003e\"Oh yeah, let's go West on 18th street, cross 6th Avenue and go to the place on\nthe corner.\"\u003c/p\u003e\n\n\u003cp\u003eWhat would surprise the heck out of them would be if you gave them absolute\ncoordinates; and it would be \u003cem\u003eeven more\u003c/em\u003e surprising if that location were far\naway. How might they react if you said:\u003c/p\u003e\n\n\u003cp\u003e\"Oh yeah, let's go to 41.890221 and -87.633904!\"\u003c/p\u003e\n\n\u003cp\u003eLatitude and longitude give \u003cem\u003eabsolute\u003c/em\u003e directions based on the Equator and Prime Meridian. They're not\ncommonly used by humans to make decisions on where to get lunch (even if\nthey point, in fact, to one of our favorite pizzerias in Chicago).\u003c/p\u003e\n\n\u003cp\u003eSo far we've been finding out where we are in the file system \"tree,\" how about\nwe find out what's \u003cem\u003ein\u003c/em\u003e these directories (besides other directories)? We'll\ncover that in our next lesson.\u003c/p\u003e\n\n\u003ch2\u003eTime-Saving Tip: Tab Completion\u003c/h2\u003e\n\n\u003cp\u003eAs you type in commands in the shell, you can use \"tab completion.\" Tab\ncompletion allows the shell to be smart and to try and guess what command you\nwant to run when you hit the tab.  If there's only one logical way to complete\nyour command, \u003ccode\u003ebash\u003c/code\u003e will fill in the rest for you, or will show you the\npossibilities and you can add more letters until you can tab-complete your\ncommand.\u003c/p\u003e\n\n\u003cp\u003eFor example let's say we have the following directory structure with two sub-\ndirectories:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eflatiron_school/\u003cbr\u003eflatiron_building/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf I type \u003ccode\u003e$ cd f\u003c/code\u003e and then hit tab, it will fill in everything up until the\nconflict so I'll see \u003ccode\u003e$ cd flatiron_\u003c/code\u003e.  If I then add the \u003ccode\u003es\u003c/code\u003e and hit tab it\nwill fill in \u003ccode\u003e$ cd flatiron_school\u003c/code\u003e and I can hit enter.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAs we keep exploring and working with the command line, we will start to unlock\nand understand its full potential! Adopting the terminal\ncan allow us to become more productive users.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything\"\u003eLifehacker on the Command Line\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://cbednarski.com/articles/understanding-environment-variables-and-the-unix-path/\"\u003eEnvironment Variables\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html\"\u003eBuilt-in Shell Commands\u003c/a\u003e \u003cem\u003eVery useful\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.thegeekstuff.com/2010/08/bash-shell-builtin-commands/\"\u003e15 Useful Bash Commands\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://blog.seldomatt.com/blog/2012/10/08/bash-and-the-one-true-path/\"\u003eThe One True Path\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Path_(computing)\"\u003eMore on paths - Wikipedia\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"logical-operators","title":"Logical Operators","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-logical-operators\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-logical-operators/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-logical-operators\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-logical-operators/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDescribe how to use \u003ccode\u003e!\u003c/code\u003e to negate an expression\u003c/li\u003e\n\u003cli\u003eDescribe how to convert an expression to a Boolean using \u003ccode\u003e!!\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eDefine the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e operators\u003c/li\u003e\n\u003cli\u003eDescribe how to link conditions using the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e operators\u003c/li\u003e\n\u003cli\u003ePractice What We Learned\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we will continue to expand our toolset for creating Boolean\nexpressions by learning about logical operators. Using JavaScript's three\nlogical operators, NOT (\u003ccode\u003e!\u003c/code\u003e), AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e), and OR (\u003ccode\u003e||\u003c/code\u003e), we'll learn how to\nnegate and combine expressions. These operators, in combination with the\nequality and relational operators we learned earlier, will enable us to create\nmore complex and sophisticated Boolean expressions.\u003c/p\u003e\n\n\u003ch2\u003eDescribe How to Use \u003ccode\u003e!\u003c/code\u003e to Negate an Expression\u003c/h2\u003e\n\n\u003ch3\u003e\n\u003ccode\u003e!\u003c/code\u003e NOT\u003c/h3\u003e\n\n\u003cp\u003eIn an earlier lesson, we learned about truthy and falsey values in JavaScript.\nThe logical NOT operator (\u003ccode\u003e!\u003c/code\u003e), also called the \u003cem\u003ebang operator\u003c/em\u003e, operates on an\nexpression, returning the opposite of the expression's truthiness. If \u003ccode\u003ex\u003c/code\u003e\nresolves to a truthy value, \u003ccode\u003e!x\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e. If \u003ccode\u003ex\u003c/code\u003e is falsey, \u003ccode\u003e!x\u003c/code\u003e returns\n\u003ccode\u003etrue\u003c/code\u003e:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/UniqueAnotherAutomaticvectorization?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you click the Run button you'll see the bang operator in action, returning\nthe reverse of \u003ccode\u003etruthyValue\u003c/code\u003e's truthiness. Then modify the code on line 4 to\nverify that it works for the falsey value as well.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e Recall that you will need to click \"open in repl.it\" in the \nupper right corner of the REPL window to open it in a new browser tab, then\nsign in to your repl.it account before you can fork the code and modify it.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eDescribe How to Convert an Expression to a Boolean Using \u003ccode\u003e!!\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eIn an earlier lesson, we passed values into the \u003ccode\u003eBoolean()\u003c/code\u003e \u003cem\u003econstructor\nfunction\u003c/em\u003e to check their truthiness. We'll learn all about constructor functions\nlater in the course; for now, just think of \u003ccode\u003eBoolean()\u003c/code\u003e as a function that takes\nin some input, \u003cem\u003econstructs\u003c/em\u003e a new Boolean from that input, and outputs the\nnewly constructed Boolean.\u003c/p\u003e\n\n\u003cp\u003eAs a shorter way to convert any value into a Boolean, we can use two NOT\noperators:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/WanGrimyFunction?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eThe JavaScript engine reads from left to right: it sees the first \u003ccode\u003e!\u003c/code\u003e and looks\nto the right to check what we're asking it to invert (\u003ccode\u003e!truthyValue\u003c/code\u003e). It then\nsees the second \u003ccode\u003e!\u003c/code\u003e and looks to the right \u003cem\u003eagain\u003c/em\u003e, this time finding our\n\u003ccode\u003etruthyValue\u003c/code\u003e variable. At this point, the engine resolves \u003ccode\u003etruthyValue\u003c/code\u003e to\n\u003ccode\u003e\"This value is truthy.\"\u003c/code\u003e, which (as it tells us) is truthy. It then executes\nthe inner \u003ccode\u003e!\u003c/code\u003e operator on it. \u003ccode\u003e!truthyValue\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e, so instead of\n\u003ccode\u003e!!truthyValue\u003c/code\u003e JavaScript is now evaluating \u003ccode\u003e!false\u003c/code\u003e. Executing the outer \u003ccode\u003e!\u003c/code\u003e\noperator on \u003ccode\u003efalse\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTry inverting various values in the REPL above to get a feel for the NOT\noperator. See what happens when you stack a ton of them: \u003ccode\u003e!!!!!!!!!truthyValue\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can edit line 3 in \u003ccode\u003eindex.js\u003c/code\u003e \u003cem\u003eor\u003c/em\u003e add lines of code below the current code. If you add lines, when you click the Run button, the value\nreturned in the console tab will be the return value of the \u003cem\u003elast expression evaluated\u003c/em\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOn to the next!\u003c/p\u003e\n\n\u003ch2\u003eDefine the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e Operators\u003c/h2\u003e\n\n\u003ch3\u003e\n\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e (AND)\u003c/h3\u003e\n\n\u003cp\u003eThe logical AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e) operator takes two expressions:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexpression1 \u0026amp;\u0026amp; expression2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe return value of the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator is always \u003cstrong\u003eone of the two expressions\u003c/strong\u003e.\nIf the first expression is falsey, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns the value of the first\nexpression. If the first expression is truthy, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns the value of the\nsecond expression.\u003c/p\u003e\n\n\u003cp\u003eAgain, if the first expression is falsey, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns that value and exits\n\u003cem\u003ewithout ever checking the second expression\u003c/em\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efalse \u0026amp;\u0026amp; 'Anything';\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e// 4 * 0 returns 0, which is falsey\u003cbr\u003e4 * 0 \u0026amp;\u0026amp; 'Anything';\u003cbr\u003e// =\u0026gt; 0\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the first expression is truthy, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e then returns whatever the second\nexpression evaluates to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etrue \u0026amp;\u0026amp; false;\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e1 + 1 \u0026amp;\u0026amp; 'Whatever';\u003cbr\u003e// =\u0026gt; \"Whatever\"\u003cbr\u003e\u003cbr\u003e'The truthiest of truthy strings' \u0026amp;\u0026amp; 9 * 9;\u003cbr\u003e// =\u0026gt; 81\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere are three different ways the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator can be evaluated:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\n\u003ctr\u003e\n    \u003cth\u003eLeft side\u003c/th\u003e\n    \u003cth\u003eRight side\u003c/th\u003e\n    \u003cth\u003eReturn value\u003c/th\u003e\n    \u003cth\u003eTruthiness of return value\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n    \u003ctd\u003eDoesn't matter\u003c/td\u003e\n    \u003ctd\u003eLeft side\u003c/td\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n    \u003ctd\u003eRight side\u003c/td\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n    \u003ctd\u003eRight side\u003c/td\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003col\u003e\n\u003cli\u003eIf the left-side expression is falsey, the right-side expression doesn't\nmatter at all. The \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator returns the left side's falsey value and\nfinishes.\u003c/li\u003e\n\u003cli\u003eIf the left-side expression is truthy, the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator returns the right\nside's value (whether it's truthy or falsey) and finishes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWhat this means is that the return value of the expression will be truthy if the\nvalues on either side of the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e are \u003cem\u003eboth\u003c/em\u003e truthy, and falsey otherwise.\u003c/p\u003e\n\n\u003cp\u003eIf you're feeling a little confused, that's ok. This is one of those concepts\nthat's a bit hard to understand unless you've played around with it in code. You\nwill have an opportunity to practice at the end of the lesson.\u003c/p\u003e\n\n\u003ch3\u003e\n\u003ccode\u003e||\u003c/code\u003e (OR)\u003c/h3\u003e\n\n\u003cp\u003eThe logical OR (\u003ccode\u003e||\u003c/code\u003e) operator also takes two expressions:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexpression1 || expression2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs with \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, the return value of the \u003ccode\u003e||\u003c/code\u003e operator is always \u003cstrong\u003eone of the two\nexpressions\u003c/strong\u003e. If the first expression is truthy, \u003ccode\u003e||\u003c/code\u003e returns the value of the\nfirst expression. If the first expression is falsey, \u003ccode\u003e||\u003c/code\u003e returns the value of\nthe second expression.\u003c/p\u003e\n\n\u003cp\u003eIf the first expression is truthy, that value is immediately returned and the\nsecond expression is never evaluated:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etrue || 'Whatever';\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e1 + 1 || 'Whatever';\u003cbr\u003e// =\u0026gt; 2\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf the first expression is falsey, \u003ccode\u003e||\u003c/code\u003e returns whatever the second expression\nevaluates to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efalse || 'Whatever';\u003cbr\u003e// =\u0026gt; \"Whatever\"\u003cbr\u003e\u003cbr\u003e1 === 2 || 8 * 8;\u003cbr\u003e// =\u0026gt; 64\u003cbr\u003e\u003cbr\u003e'' || 'Not ' + 'an ' + 'empty ' + 'string';\u003cbr\u003e// =\u0026gt; \"Not an empty string\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere are three different ways the \u003ccode\u003e||\u003c/code\u003e operator can be evaluated:\u003c/p\u003e\n\n\u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e\n  \u003ctbody\u003e\n\u003ctr\u003e\n    \u003cth\u003eLeft side\u003c/th\u003e\n    \u003cth\u003eRight side\u003c/th\u003e\n    \u003cth\u003eReturn value\u003c/th\u003e\n    \u003cth\u003eTruthiness of return value\u003c/th\u003e\n  \u003c/tr\u003e\n  \n  \u003ctr\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n    \u003ctd\u003eDoesn't matter\u003c/td\u003e\n    \u003ctd\u003eLeft side\u003c/td\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n    \u003ctd\u003eRight side\u003c/td\u003e\n    \u003ctd\u003eTruthy\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n    \u003ctd\u003eRight side\u003c/td\u003e\n    \u003ctd\u003eFalsey\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003col\u003e\n\u003cli\u003eIf the left-side expression is truthy, the right-side expression doesn't\nmatter at all. The \u003ccode\u003e||\u003c/code\u003e operator returns the left side's truthy value and\ncompletes.\u003c/li\u003e\n\u003cli\u003eIf the left-side expression is falsey, the \u003ccode\u003e||\u003c/code\u003e operator returns the right\nside's value (regardless of whether it's truthy or falsey) and completes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWhat this means is that the return value of the expression will be truthy if\n\u003cem\u003eone or both\u003c/em\u003e of the values on either side of the \u003ccode\u003e||\u003c/code\u003e are truthy, and falsey\notherwise.\u003c/p\u003e\n\n\u003ch2\u003ePracticing What We've Learned\u003c/h2\u003e\n\n\u003cp\u003eThe REPL below contains a number of expressions that use the logical operators\nwe've learned about in this lesson:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/EmbellishedPresentOrigin?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eBefore we get to that, however...\u003c/p\u003e\n\n\u003ch3\u003eA Note About Comments in Code\u003c/h3\u003e\n\n\u003cp\u003eNote that most of the lines in the REPL currently have the characters \u003ccode\u003e//\u003c/code\u003e at\nthe front. The \u003ccode\u003e//\u003c/code\u003e is used in JavaScript to 'comment out' lines of code. Any\nline in your code that has \u003ccode\u003e//\u003c/code\u003e at the front will \u003cem\u003enot be interpreted\u003c/em\u003e by the\nJavaScript engine. This enables us to do two things: 1) include text (i.e.,\nmessages meant for humans) in our code files without JavaScript throwing an\nerror, and 2) \u003cem\u003etemporarily\u003c/em\u003e keep lines of code from being interpreted; this \nsecond use can be especially handy when debugging code.\u003c/p\u003e\n\n\u003cp\u003eTry removing the \u003ccode\u003e//\u003c/code\u003e at the beginning of line 1 and clicking the Run button.\nNot surprisingly, JavaScript doesn't know what to do with that line of 'code'.\nThe \u003ccode\u003e//\u003c/code\u003e enables programmers to include messages to other programmers — or\nto their own future selves — for documentation or clarification purposes.\nDon't forget to re-comment out line 1 before you move on.\u003c/p\u003e\n\n\u003ch3\u003eInstructions\u003c/h3\u003e\n\n\u003cp\u003eOkay, let's get some practice with logical operators. Take a look at line 4 in\nthe REPL (the only un-commented out line). What do you think the expression will\nreturn? Think it through and come up with an answer, then click Run to check\nwhether you're right. When you're done with the first expression, work your way\ndown, un-commenting out each expression in turn. Be sure you think each example\nthrough and figure out your answer before clicking Run.\u003c/p\u003e\n\n\u003cp\u003eIf you're having difficulty with the examples, try following this procedure:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eEvaluate each side of the operator individually: what is the \u003cem\u003ereturn value\u003c/em\u003e\nof each individual expression, and what is the \u003cem\u003etruthiness\u003c/em\u003e of each of those\nvalues?\u003c/li\u003e\n\u003cli\u003eFind the corresponding row in the appropriate table above and refer to the\n'Return value' column to determine the return value of the full expression.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFinally, once you're done with the provided expressions, experiment with some\nexamples of your own to cement your understanding.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn the last few lessons, we've been introduced to powerful tools for creating\nBoolean expressions: comparison operators (equality and relational) and logical\noperators. With these tools, we can construct very sophisticated expressions. A\nbit later in the course, we will learn how to use these expressions to execute\ncode conditionally, which will enable us to implement powerful logic in our\nprograms.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/\"\u003eMDN\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators\"\u003eLogical operators\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals\"\u003eReview of conditionals, comparisons, and logical operators\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"debugging-in-node","title":"Debugging in Node","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-debugging-in-node\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-debugging-in-node\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-debugging-in-node/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUse the Node.js debugger\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWhile \u003ccode\u003econsole.log()\u003c/code\u003e is a valuable debugging tool, it only gets us so far. When we start running JavaScript code in the browser, we will have access to the browser's debugger. The debugger allows you to set \u003ca href=\"https://en.wikipedia.org/wiki/Breakpoint\"\u003ebreakpoints\u003c/a\u003e in your code that will stop the execution of the code at that point. You can then inspect the values of your variables at that point in your code.\u003c/p\u003e  \u003cp\u003eWe will start running JavaScript in the browser a bit later in the course. In the meantime, Node.js (which is the \u003cem\u003eruntime environment\u003c/em\u003e that enables us to run our JavaScript outside the browser) includes a similar debugging tool. In this lesson, we will walk through how to use the \u003ca href=\"https://nodejs.org/api/debugger.html\"\u003eNode.js debugger\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eFork and clone this lesson into your local environment. To do this, click the GitHub \"octocat\" button at the top of the page to open the lesson's GitHub repo, then click \"Fork.\" Once you've cloned it down to your machine, navigate into the lesson's directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. There are no tests so you do not need to run \u003ccode\u003enpm install\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eThe Node.js Debugger\u003c/h2\u003e  \u003cp\u003eOpen \u003ccode\u003eindex.js\u003c/code\u003e and take a look. You will see we have created a simple \u003ccode\u003ewhile\u003c/code\u003e loop that \u003ccode\u003econsole.log()\u003c/code\u003es a message. Run \u003ccode\u003enode index.js\u003c/code\u003e to see it in action.\u003c/p\u003e  \u003cp\u003eUsing the debugger is a simple matter of adding the \u003ccode\u003edebugger\u003c/code\u003e keyword at the point in our code where we want to place a breakpoint (i.e., where we want to pause execution). Modify the code in \u003ccode\u003eindex.js\u003c/code\u003e as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet count = 1;\u003cbr\u003ewhile (count \u0026lt; 5) {\u003cbr\u003e  debugger;\u003cbr\u003e  if (count === 1) {\u003cbr\u003e    console.log(`This loop has executed ${count} time.`);\u003cbr\u003e  } else {\u003cbr\u003e    console.log(`This loop has executed ${count} times.`);\u003cbr\u003e  }\u003cbr\u003e  count += 1;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo start the debugger, run \u003ccode\u003enode inspect index.js\u003c/code\u003e. You should see this in your terminal:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/enter-debugger.png\" alt=\"enter debugger\"\u003e\u003c/p\u003e  \u003cp\u003eNext, enter \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to start executing the code. You will see a \u003ccode\u003e\u0026gt;\u003c/code\u003e pointing to line 3, indicating that the execution of the code has been stopped at that point:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/start-execution.png\" alt=\"start execution\"\u003e\u003c/p\u003e  \u003cp\u003eNow say we want to check the value of our \u003ccode\u003ecount\u003c/code\u003e variable. To do that, we need to enter the debugger's REPL by running \u003ccode\u003erepl\u003c/code\u003e. You will now have a \u003ccode\u003e\u0026gt;\u003c/code\u003e prompt in place of the \u003ccode\u003edebug\u0026gt;\u003c/code\u003e prompt. Type in \u003ccode\u003ecount\u003c/code\u003e to see the current value of the variable:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/enter-repl.png\" alt=\"enter repl\"\u003e\u003c/p\u003e  \u003cp\u003eThen to continue executing the code, we first need to exit the REPL by typing \u003ccode\u003eCtrl-C\u003c/code\u003e, then run \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/second-loop.png\" alt=\"second loop\"\u003e\u003c/p\u003e  \u003cp\u003eNote that our logged message shows at the top of the screenshot above. When we ran \u003ccode\u003econt\u003c/code\u003e, the execution of the code resumed so the \u003ccode\u003econsole.log()\u003c/code\u003e was run, the \u003ccode\u003ecount\u003c/code\u003e variable was incremented, and the execution contined to the next loop. If you enter the REPL and check the value of \u003ccode\u003ecount\u003c/code\u003e, you will see that it's now equal to \u003ccode\u003e2\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eBut what if we wanted to check the value  of \u003ccode\u003ecount\u003c/code\u003e both before \u003cem\u003eand\u003c/em\u003e after the incrementation? We can simply add a second breakpoint:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet count = 1;\u003cbr\u003ewhile (count \u0026lt; 5) {\u003cbr\u003e  debugger;\u003cbr\u003e  if (count === 1) {\u003cbr\u003e    console.log(`This loop has executed ${count} time.`);\u003cbr\u003e  } else {\u003cbr\u003e    console.log(`This loop has executed ${count} times.`);\u003cbr\u003e  }\u003cbr\u003e  count += 1;\u003cbr\u003e  debugger;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn order for the debugger to recognize the change to our code, we'll need to exit and restart it. If you're in the REPL, type \u003ccode\u003ectrl-C\u003c/code\u003e to exit that, then type \u003ccode\u003e.exit\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt or \u003ccode\u003ectrl-C\u003c/code\u003e twice to exit the debugger. Finally, run \u003ccode\u003enode inspect index.js\u003c/code\u003e to relaunch the debugger.\u003c/p\u003e  \u003cp\u003eNow if you run \u003ccode\u003econt\u003c/code\u003e, the code will begin executing and will pause at the first breakpoint. To continue executing the code and advance to the second breakpoint, simply enter \u003ccode\u003econt\u003c/code\u003e again. At any point, you can enter the debugger's REPL to check the value of \u003ccode\u003ecount\u003c/code\u003e, then exit the REPL and continue execution of the code.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson we've learned about using the debugger built in to Node.js. To review, the process is as follows:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ePlace one or more breakpoints in your code using the \u003ccode\u003edebugger\u003c/code\u003e keyword\u003c/li\u003e \u003cli\u003eRun \u003ccode\u003enode inspect \u0026lt;filename\u0026gt;\u003c/code\u003e in the terminal to launch the debugger\u003c/li\u003e \u003cli\u003eRun \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to start execution of the code and advance to the first breakpoint\u003c/li\u003e \u003cli\u003eRun \u003ccode\u003erepl\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to enter the debugger's REPL\u003c/li\u003e \u003cli\u003eCheck the value of any variables by entering the variable name at the \u003ccode\u003e\u0026gt;\u003c/code\u003e prompt\u003c/li\u003e \u003cli\u003eExit the REPL using \u003ccode\u003ectrl-C\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eContinue stepping through the code using \u003ccode\u003econt\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eRun \u003ccode\u003e.exit\u003c/code\u003e or type \u003ccode\u003ectrl-C\u003c/code\u003e twice to exit the debugger\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eDebugging tools will get more and more useful to you as you progress through the curriculum and your programs get more complex. The time you spend now getting comfortable with debugging will pay off in the long run.\u003c/p\u003e  \u003cp\u003eWe will get more practice using the debugger in an upcoming lesson.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.w3schools.com/js/js_debugging.asp\"\u003eW3schools - JavaScript Debugging\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.geeksforgeeks.org/difference-between-node-js-and-javascript/\"\u003eDifference between Node.js and Javascript\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"windows-wsl2-ruby-installation","title":"Windows WSL2 Ruby Installation","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-ruby\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eInstall Ruby Environment Manager (RVM) on Ubuntu\u003c/h2\u003e  \u003cp\u003eRuby Environment Manager (RVM) is a tool that will allow you to download and install multiple versions of Ruby, one of the programming languages that we teach at Flatiron School. Installing RVM is the first step in installing Ruby on your Ubuntu operating system.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esudo apt-get install software-properties-common\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eYou may be asked to enter your Ubuntu terminal password\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esudo -E apt-add-repository -y ppa:rael-gc/rvm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esudo apt-get update\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esudo apt-get install rvm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: if you are asked \"Do you want to continue [Y/n]\", type \"Y\" and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esource /etc/profile.d/rvm.sh\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecurl -sSL https://raw.githubusercontent.com/flatiron-school/dotfiles/master/rvm-shell-script \u0026gt;\u0026gt; ~/.bashrc\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eClose the \"Ubuntu\" application\u003c/li\u003e \u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ervm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/GErkBvGIGu0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you see a long message ending in \"For additional documentation, please visit \u003ca href=\"https://rvm.io\"\u003ehttps://rvm.io\u003c/a\u003e\", continue below. If \u003ccode\u003ervm\u003c/code\u003e is not found, check out the troubleshooting steps in the \u003cstrong\u003eVerify and Troubleshoot your WSL2 Environment Setup\u003c/strong\u003e lesson later on in this module.\u003c/p\u003e  \u003ch2\u003eInstall Ruby Version 2.7.2 on Ubuntu\u003c/h2\u003e  \u003cp\u003eFor our Ruby labs and lessons, we expect that students use Ruby version 2.7.2 on Ubuntu. If Ruby Environment Manager (RVM) has been successfully installed, you can quickly install Ruby with a couple of commands.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eIf the \"Ubuntu\" application is still open from the last step, close and re-open to prevent errors with running the next command.\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ervm install 2.7.2\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eEnter your Ubuntu password if prompted\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ervm list\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RVwo7RPviNI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you see a message starting with \u003ccode\u003e=* ruby-2.7.2\u003c/code\u003e, continue below.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you see that Ruby 2.7.2 is installed, but does not display \u003ccode\u003e=*\u003c/code\u003e before it, close and reopen the \"Ubuntu\" application, then run \u003ccode\u003ervm use 2.7.2 --default\u003c/code\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eTroubleshooting Ruby Installs\u003c/h2\u003e  \u003cp\u003eIf you encounter issues installing a version of Ruby via RVM, try the following in Ubuntu: \u003c/p\u003e  \u003cul\u003e \u003cli\u003eRun \u003ccode\u003ervm group add rvm $USER\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eClose Ubuntu and reopen\u003c/li\u003e \u003cli\u003eRun \u003ccode\u003ervm fix-permissions\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAfter running the last command, try installing Ruby again with \u003ccode\u003ervm install 2.7.2\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eIf you are continuing to have issues installing RVM, try running the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esudo usermod -a -G rvm $USER \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter running, try installing Ruby again.\u003c/p\u003e  \u003ch2\u003eInstall Ruby Gems on Ubuntu\u003c/h2\u003e  \u003cp\u003eRuby Gems are small programs written in Ruby that help you to code more easily in Ruby. The gems you will install today include: Bundler, which allows you to keep track of which gems your projects need to work, and Pry, which allows you to pause your Ruby code when it runs and inspect it.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem update --system\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem install bundler\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem install pry\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem list | wc -l\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003cp\u003eIf you are able to complete each step without any issues and you see an output of a number around or above 40 from the last command, continue to the next lesson, \u003cstrong\u003eConfiguring Git and GitHub on WSL2\u003c/strong\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-canvas","title":"Introduction To Canvas","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"welcome-intro-to-canvas\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-intro-to-canvas\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-intro-to-canvas/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eCanvas is a learning platform used by universities and educational institutions across the country and the world. Flatiron School uses Canvas to deliver all curriculum content for your program.\u003c/p\u003e  \u003cp\u003eCanvas is where all official Flatiron School communication, assignment submission, grading, attendance, etc. will take place for the entirety of your course. You should check Canvas multiple times a day for updates, announcements, assignments, and the day's schedule. Canvas hosts many features which you will become familiar with over the course of your time with Flatiron School. The following lessons will introduce you to and explain some of these most important functions. You can also download the Canvas app from the App Store.\u003c/p\u003e","frontPage":false},{"exportId":"javascript-variables","title":"JavaScript Variables","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-js-variables\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-variables\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-variables/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine what a variable is\u003c/li\u003e \u003cli\u003eVariable names in JavaScript\u003c/li\u003e \u003cli\u003eInitializing variables in JavaScript\u003c/li\u003e \u003cli\u003eRetrieving and changing the value of variables\u003c/li\u003e \u003cli\u003eIdentify when to use \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e for declaring variables\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn an earlier lesson, we talked about using the \u003cem\u003eassignment expression\u003c/em\u003e to save information into a variable. \"Saving\" to a variable allows us to \u003cem\u003estore\u003c/em\u003e a result so we can use it again later. Storing calculations to \u003cem\u003etemporary storage places\u003c/em\u003e is the heart of making efficient programs. It's a simple idea that has powerful consequences.\u003c/p\u003e  \u003ch2\u003eWhat is a Variable?\u003c/h2\u003e  \u003cp\u003eA variable is a container in which we can store values for later retrieval.\u003c/p\u003e  \u003cp\u003eImagine a box that can hold any type of data: a number, a string, etc. We take some data that we want to store, place it inside the box, and hand the box off to the JavaScript engine, which stores it in memory. All done! Our data is safely cached until we need to access it again.\u003c/p\u003e  \u003cp\u003eBut wait! When we ask for the data back, how will the JavaScript engine know \u003cem\u003ewhich\u003c/em\u003e box to retrieve? We need to assign a name to our variable —\u0026nbsp;a label for our box — so that we can use the \u003cem\u003evariable lookup expression\u003c/em\u003e to tell the engine exactly which piece of stored data we want to access.\u003c/p\u003e  \u003ch2\u003eVariable Names in JavaScript\u003c/h2\u003e  \u003cp\u003eVariable names in JavaScript can sometimes be complicated, but if you follow these three rules you'll be fine:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eStart every variable name with a lowercase letter. Variable names starting with a number are not valid.\u003c/li\u003e \u003cli\u003eDon't use spaces. If a variable name consists of multiple words, \u003ccode\u003ecamelCaseYourVariableNames\u003c/code\u003e (see the camel humps?) instead of \u003ccode\u003esnake_casing_them\u003c/code\u003e (think of the underscore as a snake that swallowed the words).\u003c/li\u003e \u003cli\u003eDon't use JavaScript \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Reserved_keywords_as_of_ECMAScript_2015\"\u003ereserved words\u003c/a\u003e or \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Future_reserved_keywords\"\u003efuture reserved words\u003c/a\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIt's important to note that case matters, so \u003ccode\u003ejavaScript\u003c/code\u003e, \u003ccode\u003ejavascript\u003c/code\u003e, \u003ccode\u003eJavaScript\u003c/code\u003e, and \u003ccode\u003eJAVASCRIPT\u003c/code\u003e are four different variables.\u003c/p\u003e  \u003ch2\u003eInitializing Variables in JavaScript\u003c/h2\u003e  \u003cp\u003eInitializing variables in JavaScript is really a two-step process: first, we \u003cem\u003edeclare\u003c/em\u003e the variable, then we \u003cem\u003eassign a value\u003c/em\u003e to it.\u003c/p\u003e  \u003cp\u003eTo declare the variable, we use either the \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e reserved word. (And, in fact, there's a third option as well: \u003ccode\u003evar\u003c/code\u003e. We'll talk about when to use each a bit later in this lesson. For now, just know that when you see \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, or \u003ccode\u003evar\u003c/code\u003e, those are reserved words that are used to declare a variable.)\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe JavaScript engine sets aside a chunk of memory to store the declared variable. Then, we assign a value to that variable using the \u003cem\u003eassignment expression\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epi = 3.14159;\u003cbr\u003e//=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can make our code a bit more efficient by packaging both initialization steps —\u0026nbsp;declaration and assignment —\u0026nbsp;in a single line of code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou will encounter cases later on where it makes sense to declare a variable without immediately assigning a value to it, but combining the two steps will work most of the time.\u003c/p\u003e  \u003ch3\u003eInitializing Multiple Variables\u003c/h3\u003e  \u003cp\u003eLet's say I needed to declare and define multiple variables. It feels like a lot to have to repeat \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e over and over again. To alleviate this pain, JavaScript allows us to initialize multiple variables in a single line of code. The variables must be separated with commas, and the entire line must end with a semicolon.\u003c/p\u003e  \u003cp\u003eLet's condense the below code into one line:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst a = 5;\u003cbr\u003econst b = 2;\u003cbr\u003econst c = 3;\u003cbr\u003econst d = \"Hello\";\u003cbr\u003econst e = \"World\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe above is equivalent to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst a = 5,\u003cbr\u003e      b = 2,\u003cbr\u003e      c = 3,\u003cbr\u003e      d = \"Hello\",\u003cbr\u003e      e = \"World\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ewhich can be converted to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst a = 5, b = 2, c = 3, d = \"Hello\", e = \"World\"; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eRetrieving and Changing the Value of Variables\u003c/h2\u003e  \u003cp\u003eSay we've declared a variable \u003ccode\u003epi\u003c/code\u003e and set its value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo retrieve the value of \u003ccode\u003epi\u003c/code\u003e, we use the \u003cem\u003evariable lookup expression\u003c/em\u003e, i.e., we simply type in its name:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epi;\u003cbr\u003e//=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we want to change (reassign) that value, we use the \u003cem\u003eassignment expression\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epi;\u003cbr\u003e//=\u0026gt; 3.14159\u003cbr\u003epi = 3.14;\u003cbr\u003epi;\u003cbr\u003e//=\u0026gt; 3.14; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eIdentify When to Use \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e for Declaring Variables\u003c/h2\u003e  \u003cp\u003eIn the past, \u003ccode\u003evar\u003c/code\u003e was the only option available in JavaScript for declaring variables. Then, in 2015, the language underwent a major revision that, among many other changes, added two new options: \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Delving into the history of JavaScript and the many changes and improvements that were made to it in 2015 is outside the scope of this lesson. However, as you're learning to code in JavaScript you may see references to \u003ccode\u003eECMAScript 2015\u003c/code\u003e, \u003ccode\u003eES2015\u003c/code\u003e, or \u003ccode\u003eES6\u003c/code\u003e. These terms are interchangeable and refer to that major revision. (ECMAScript is the \"offical\" name of JavaScript.) There are some resources listed at the end of this lesson if you're interested in learning more about \u003ccode\u003eES2015\u003c/code\u003e and the history of JavaScript.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eThe addition of \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e was in response to significant problems that the use of \u003ccode\u003evar\u003c/code\u003e can cause. In particular, it can create scope issues (which is a whole other topic that you'll learn about later) that lead to unpredictable and difficult to diagnose bugs in your code. You will likely see \u003ccode\u003evar\u003c/code\u003e used a lot in legacy code and older StackOverflow posts, so it's important to be familiar with it. \u003cstrong\u003e\u003cem\u003eHowever, there is no good reason to use \u003ccode\u003evar\u003c/code\u003e to declare variables in your own code, and good reasons not to\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003elet\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe main advantage of using \u003ccode\u003elet\u003c/code\u003e for declaring a variable is that, unlike \u003ccode\u003evar\u003c/code\u003e, it will throw an error if you try to declare the same variable a second time:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003elet pi = \"the ratio between a circle's circumference and diameter\";\u003cbr\u003e//=\u0026gt; Uncaught SyntaxError: Identifier 'pi' has already been declared \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhy is this a good thing? Well, you can imagine how easy it could be, especially in a lengthy program, to accidentally reuse a variable name. Doing so can cause unpredictable behavior because the value associated with the variable in one part of the program may be changed by code in a different part of the program. These types of problems can be very difficult to track down and debug. Using \u003ccode\u003elet\u003c/code\u003e to declare your variables will reduce the likelihood of introducing such errors into your code.\u003c/p\u003e  \u003cp\u003eWhile we can't \u003cem\u003eredeclare\u003c/em\u003e a variable that is declared using \u003ccode\u003elet\u003c/code\u003e, we can still \u003cem\u003ereassign\u003c/em\u003e its value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003epi = \"the ratio between a circle's circumference and diameter\";\u003cbr\u003e//=\u0026gt; \"the ratio between a circle's circumference and diameter\"\u003cbr\u003e\u003cbr\u003epi;\u003cbr\u003e//=\u0026gt; \"the ratio between a circle's circumference and diameter\" \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003e\u003ccode\u003econst\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003econst\u003c/code\u003e reserved word should be your go-to option for declaring variables in JavaScript. When you declare a variable with \u003ccode\u003econst\u003c/code\u003e, not only can it not be redeclared but it also \u003cstrong\u003e\u003cem\u003ecannot be reassigned\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003epi = 2.71828;\u003cbr\u003e//=\u0026gt; Uncaught TypeError: Assignment to constant variable. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen you (or another developer) sees that \u003ccode\u003epi\u003c/code\u003e has been declared with \u003ccode\u003econst\u003c/code\u003e, you immediately know that the variable points to the same value every other time it's referenced in the program. For variables declared with \u003ccode\u003elet\u003c/code\u003e (or \u003ccode\u003evar\u003c/code\u003e), you cannot be so sure and will have to keep track of how those variables change throughout the program. The extra information provided by \u003ccode\u003econst\u003c/code\u003e is valuable, and it comes at no extra cost to you! Just use \u003ccode\u003econst\u003c/code\u003e whenever possible and reap the benefits.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: With \u003ccode\u003elet\u003c/code\u003e, it's possible to declare a variable without assigning a value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet pi;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003e\u003cbr\u003epi = 3.14159;\u003cbr\u003e//=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, because \u003ccode\u003econst\u003c/code\u003e doesn't allow reassignment after the variable is initialized, we \u003cstrong\u003emust\u003c/strong\u003e assign a value right away:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst pi;\u003cbr\u003e//=\u0026gt; Uncaught SyntaxError: Missing initializer in const declaration\u003cbr\u003e\u003cbr\u003econst pi = 3.14159;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e  \u003cp\u003eAs your JavaScript powers increase with experience, you'll develop a more nuanced understanding of what to use where. However, for now, this is a good rule of thumb:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003evar\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e never.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003elet\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e when you know the value of a variable will change. For example, a \u003ccode\u003ecounter\u003c/code\u003e variable that starts at \u003ccode\u003e0\u003c/code\u003e and is subsequently incremented to \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e2\u003c/code\u003e, \u003ccode\u003e3\u003c/code\u003e, and so on. In the lessons on looping and iteration in JavaScript, \u003ccode\u003elet\u003c/code\u003e will have its moment in the spotlight.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003econst\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e for \u003cem\u003eevery\u003c/em\u003e other variable.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eBest practice is to always declare variables with \u003ccode\u003econst\u003c/code\u003e and then, if you later realize that the value has to change over the course of your program, circle back to change it to \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWe covered what a variable is, how to initialize and retrieve it, and how to assign or reassign its value. We also looked at best practices for naming variables and for when to use \u003ccode\u003elet\u003c/code\u003e, \u003ccode\u003econst\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics#Variables\"\u003eMDN —\u0026nbsp;Language basics crash course: Variables\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003eMDN —\u0026nbsp;\u003ccode\u003elet\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003eMDN —\u0026nbsp;\u003ccode\u003econst\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003eMDN —\u0026nbsp;\u003ccode\u003evar\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75\"\u003eJavaScript ES6+: \u003ccode\u003evar\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, or \u003ccode\u003econst\u003c/code\u003e?\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/JavaScript#History\"\u003eW3C - A Short History of JavaScript\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/ECMAScript#Versions\"\u003eWikipedia - ECMAScript: Versions\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"welcome-to-html","title":"Welcome to HTML","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-basics-welcome-to-html\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-basics-welcome-to-html/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-welcome-to-html\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-welcome-to-html/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWelcome to the HTML Basics unit!\u003c/p\u003e\n\n\u003ch2\u003ePreview\u003c/h2\u003e\n\n\u003cp\u003eIn the next few lessons, we'll be introducing you to HTML (HyperText\nMarkup Language).\u003c/p\u003e\n\n\u003cp\u003eHTML is a \u003cem\u003edocumentation-based\u003c/em\u003e technology. The word \u003cem\u003edocumentation\u003c/em\u003e probably\ninspires a mental image of someone carrying heaps of papers, folders, files.\nBut what is a \u003cem\u003edocument\u003c/em\u003e in the digital realm?\u003c/p\u003e\n\n\u003cp\u003eWe'll start our exploration of HTML by thinking about files and learning the\nvocabulary technologists use to discuss them in the process of creating HTML\ndocuments. This will assist your searches for help and your ability to interact\nwith professionals on the topic.\u003c/p\u003e\n\n\u003cp\u003eWe'll then proceed to a collaborative lab where you'll be guided in editing a\nsimple HTML document. The point here is not to memorize the full detail of\nHTML's vocabulary, but to experience the joy and excitement of being able to\nadjust and customize HTML.\u003c/p\u003e\n\n\u003cp\u003eAfter that, we'll learn a core set of HTML features that will enable you to create\nsimple HTML documents with less-explicit guidance. Around this time, you'll then\nbegin tying these discoveries together and will start creating your first\nHTML documents.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/welcome-to-html/Image_48_HTMLBannerGraphic.png\" alt=\"Welcome to HTML\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eRepetition \u0026amp; Getting Stuck\u003c/h2\u003e\n\n\u003cp\u003eIn the lessons ahead, many of the ideas are deliberately repeated. You might not \nget \"attributes\" the first time you see them, but, after some hands-on experience,\nthey'll make sense the second time you see them.\u003c/p\u003e\n\n\u003ch2\u003eBeyond\u003c/h2\u003e\n\n\u003cp\u003eAt the close of the unit, you'll be ready to learn a series of HTML expressions\nthat will allow you to create a meaningful web page. \u003c/p\u003e","frontPage":false},{"exportId":"comparisons-in-javascript","title":"Comparisons in JavaScript","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-comparisons-in-javascript\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-comparisons-in-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-comparisons-in-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify equality operators\u003c/li\u003e \u003cli\u003eCompare numbers using relational operators\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eNow that we know what \u003cem\u003eBoolean expressions\u003c/em\u003e are we'll start learning how to create them. In this lesson we'll learn about comparison operators, which enable us to check to see if a value is what we're expecting. Follow along with the examples below in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e JavaScript includes both \u003cem\u003estrict\u003c/em\u003e and \u003cem\u003eloose\u003c/em\u003e comparison operators. When writing JavaScript, you should strongly prefer the \u003cstrong\u003estrict\u003c/strong\u003e operators. The reason for this is the loose operators will return true even if the data types aren't the same, which can result in unexpected behavior and bugs that can be difficult to track down. Even if you find you need to compare two values of different data types, you should avoid using loose operators. You will be better off converting the data type of one of the variables so they have the same type, then comparing them using a strict operator.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eIdentify equality operators\u003c/h2\u003e  \u003cp\u003eJavaScript includes four equality operators:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003estrict equality operator\u003c/strong\u003e (\u003ccode\u003e===\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003estrict inequality operator\u003c/strong\u003e (\u003ccode\u003e!==\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eloose equality operator\u003c/strong\u003e (\u003ccode\u003e==\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eloose inequality operator\u003c/strong\u003e (\u003ccode\u003e!=\u003c/code\u003e)\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThese operators allow us to compare values and determine whether they are the same.\u003c/p\u003e  \u003ch3\u003eStrict Equality Operator \u003ccode\u003e===\u003c/code\u003e and Strict Inequality Operator \u003ccode\u003e!==\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThe \u003cstrong\u003estrict equality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are equal \u003cem\u003ewithout performing type conversions\u003c/em\u003e. Even if the values on both sides of the operator look similar (e.g., \u003ccode\u003e'42' === 42\u003c/code\u003e), the \u003ccode\u003e===\u003c/code\u003e operator will only return \u003ccode\u003etrue\u003c/code\u003e if the data types also match:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e42 === 42\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e42 === '42'\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003etrue === 1\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e'0' === false\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003enull === undefined\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e' ' === 0\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is logical and accurate!\u003c/p\u003e  \u003cp\u003eThe \u003cstrong\u003estrict inequality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are \u003cem\u003enot\u003c/em\u003e equal \u003cem\u003ewithout\u003c/em\u003e performing type conversions:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9000 !== 9001\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e9001 !== '9001'\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e[] !== ''\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003e\u003cem\u003eYou should prefer \u003ccode\u003e===\u003c/code\u003e and \u003ccode\u003e!==\u003c/code\u003e for comparisons\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch3\u003eLoose Equality Operator \u003ccode\u003e==\u003c/code\u003e and Loose Inequality Operator \u003ccode\u003e!=\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThe \u003cstrong\u003eloose equality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are equal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e42 == 42\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, it will \u003cem\u003ealso\u003c/em\u003e return \u003ccode\u003etrue\u003c/code\u003e if it can perform a type conversion (e.g., changing the string \u003ccode\u003e'42'\u003c/code\u003e into the number \u003ccode\u003e42\u003c/code\u003e) that makes the two values equal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e42 == '42'\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003etrue == 1\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e'0' == false\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003enull == undefined\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e' ' == 0\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cstrong\u003eloose inequality operator\u003c/strong\u003e is the opposite of \u003ccode\u003e==\u003c/code\u003e. It returns \u003ccode\u003etrue\u003c/code\u003e if two values are \u003cem\u003enot\u003c/em\u003e equal, performing type conversions as necessary:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e9000 != 9001\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e9001 != '9001'\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e[] != ''\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is confusing and inaccurate! It makes no sense that the string \u003ccode\u003e'0'\u003c/code\u003e is equal to the boolean \u003ccode\u003efalse\u003c/code\u003e or that \u003ccode\u003enull\u003c/code\u003e and \u003ccode\u003eundefined\u003c/code\u003e — two \u003cstrong\u003ecompletely different\u003c/strong\u003e data types — are equivalent.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eYou should prefer \u003ccode\u003e===\u003c/code\u003e and \u003ccode\u003e!==\u003c/code\u003e for comparisons\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch2\u003eCompare Numbers with Relational Operators\u003c/h2\u003e  \u003cp\u003eJavaScript includes four relational operators:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003egreater than\u003c/strong\u003e (\u003ccode\u003e\u0026gt;\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003egreater than or equals\u003c/strong\u003e (\u003ccode\u003e\u0026gt;=\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eless than\u003c/strong\u003e (\u003ccode\u003e\u0026lt;\u003c/code\u003e)\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eless than or equals\u003c/strong\u003e (\u003ccode\u003e\u0026lt;=\u003c/code\u003e)\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe behavior of these operators is consistent with the meaning of the corresponding symbols in mathematics:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e88 \u0026gt; 9\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e88 \u0026gt;= 88\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003e88 \u0026lt; 9\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHowever, beware of type conversion when comparing non-numbers against numbers. For instance, when a string is compared with a number, the JavaScript engine tries to convert the string to a number:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e88 \u0026gt; '9'\u003cbr\u003e// =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the engine can't convert the string into a number, the comparison will always return \u003ccode\u003efalse\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e88 \u0026gt;= 'hello'\u003cbr\u003e// =\u0026gt; false\u003cbr\u003e\u003cbr\u003e88 \u0026lt;= 'hello'\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eStrings are compared with other strings lexicographically, meaning character-by-character from left-to-right. The following returns \u003ccode\u003efalse\u003c/code\u003e because the Unicode value of \u003ccode\u003e8\u003c/code\u003e, the first character in \u003ccode\u003e88\u003c/code\u003e, is less than the Unicode value of \u003ccode\u003e9\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'88' \u0026gt; '9'\u003cbr\u003e// =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you aren't sure what data type you are going to be receiving, but you still need to compare them, make sure that you tell JavaScript to \u003ca href=\"https://gomakethings.com/converting-strings-to-numbers-with-vanilla-javascript/\"\u003econvert the string to a number first\u003c/a\u003e, and then compare.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Stick to comparing \u003cem\u003enumerical\u003c/em\u003e values with the relational operators and you'll be golden.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eJavaScript contains both equality and relational operators that we can use in writing code to compare two values. The resulting statements are \u003cem\u003eBoolean expressions\u003c/em\u003e — they always return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eMake sure you're using the strict equality operators whenever possible, and only comparing numerical values using the relational operators, and you'll avoid annoying errors that can be time consuming to troubleshoot!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\"\u003eComparison operators\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\"\u003eEquality comparisons and sameness\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://dorey.github.io/JavaScript-Equality-Table/\"\u003eJavaScript Equality Table\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://forum.freecodecamp.org/t/javascript-comparison-operators/14660\"\u003efreeCodeCamp Forum —\u0026nbsp;JavaScript Comparison Operators\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"programming-as-conversation-2-introduction","title":"Programming as Conversation 2: Introduction","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-intro/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine a statement versus an expression\u003c/li\u003e \u003cli\u003eUnderstand the Default Execution Order\u003c/li\u003e \u003cli\u003eIdentify two core categories of code statements\u003c/li\u003e \u003cli\u003eProvide an example of selection statement\u003c/li\u003e \u003cli\u003eProvide an example of repetition statement\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWelcome to Programming as Conversation, Part 2! In this module, we'll be enriching the kinds of conversations we have with JavaScript. In Part 1, we learned to recognize \u003cem\u003eexpressions\u003c/em\u003e and saw that the data and operations they are comprised of are \u003cem\u003eevaluated\u003c/em\u003e to produce a result or \"return value.\" We also learned three important expressions: the constant expression, the assignment expression, and the variable lookup expression. In this next module, we'll see that evaluations of expressions, while powerful, need \u003cem\u003estatements\u003c/em\u003e to control when (sequence), whether (selection), and how many times (repetition) they are \u003cem\u003eevaluated\u003c/em\u003e. Code of this type is called a \"statement.\"\u003c/p\u003e  \u003cp\u003eWe can see a parallel between expressions and statements with how children \u003cem\u003efirst\u003c/em\u003e learn to speak and how they enrich their communication with time. Learning to talk is a gigantic achievement. It's a much-loved moment for parents when a child learns to communicate through words instead of screaming fits. In this early phase, however, some of their statements lack politeness and sensitivity.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Image_92_CookieNOW.png\" alt=\"Raw id, uncouth expression of desire for a cookie\"\u003e\u003c/p\u003e  \u003cp\u003ePart of growing in their ability to converse is learning to wrap their desires in politeness and consideration for the listener. \"Would you mind giving me a cookie?\" and \"Would you care to join me for a cookie?\" both express the same desire as our \"rougher\" example above, but show maturity.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Image_93_CookiePolite.png\" alt=\"A mannerly cookie request\"\u003e\u003c/p\u003e  \u003cp\u003eThe same is true in code: we can do a great amount of work using just \u003cem\u003eexpressions\u003c/em\u003e. However, \u003cem\u003emature\u003c/em\u003e \"speakers\" of code learn to wrap their \u003cem\u003eexpressions\u003c/em\u003e in other \u003cem\u003edecisions\u003c/em\u003e and \u003cem\u003econtext\u003c/em\u003e. This ensures not only that the right thing happens, \u003cstrong\u003e\u003cem\u003ebut also\u003c/em\u003e\u003c/strong\u003e that others can understand the code easily. Learning to \"wrap\" expressions in reader-friendly context will continue into Programming as Conversation Part 3 as well.\u003c/p\u003e  \u003cp\u003eLet's start learning how to wrap our \u003cem\u003eexpressions\u003c/em\u003e in \u003cem\u003estatements\u003c/em\u003e that will give us greater flexibility \u003cstrong\u003eand\u003c/strong\u003e enrich our communication.\u003c/p\u003e  \u003ch2\u003eDefine a Statement Versus an Expression\u003c/h2\u003e  \u003cp\u003eWe have learned that all JavaScript expressions have a return value. JavaScript statements, on the other hand, don't necessarily. We can think of a statement as an \u003cem\u003einstruction\u003c/em\u003e for some action we want to carry out.\u003c/p\u003e  \u003cp\u003eWe've already seen one type of statement: the variable declaration. A variable declaration has no return value; this is the case regardless of whether we assign a value at the time the variable is declared:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst string = \"Hello\";\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003elet string2;\u003cbr\u003e//=\u0026gt; undefined\u003cbr\u003estring2 = \"World\";\u003cbr\u003e//=\u0026gt; \"World\"\u003cbr\u003estring2;\u003cbr\u003e//=\u0026gt; \"World\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eA \u003cem\u003evariable declaration\u003c/em\u003e is a statement, while a \u003cem\u003evariable assignment\u003c/em\u003e and a \u003cem\u003evariable lookup\u003c/em\u003e (as we have learned) are expressions.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you recall the previous lesson on data types, \u003ccode\u003eundefined\u003c/code\u003e is \u003cem\u003etechnically\u003c/em\u003e its own \u003cstrong\u003ething\u003c/strong\u003e in JavaScript. However, it is used to represent a \u003cem\u003elack\u003c/em\u003e of any particular value, so we treat it as such when we say that variable declaration has no return value.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eOne type of statement you will encounter frequently as you learn JavaScript is a \u003cem\u003eblock statement\u003c/em\u003e. A block statement (also called a \u003cem\u003ecode block\u003c/em\u003e) consists of one or more expressions or statements wrapped inside curly brackets (\u003ccode\u003e{}\u003c/code\u003e). We will see them in action in upcoming lessons.\u003c/p\u003e  \u003cp\u003eSome of the most commonly used statements in JavaScript and other languages allow us to alter the order in which code is evaluated, in other words, to change the \u003cem\u003edefault execution order\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eUnderstand the Default Execution Order\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Sequence_thick.png\" alt=\"Sequence Image\"\u003e\u003c/p\u003e  \u003cp\u003eJavaScript by default will read our code according to the rules of a \u003cstrong\u003edefault sequence\u003c/strong\u003e or \u003cstrong\u003edefault flow\u003c/strong\u003e: \"every line, top to bottom, left to right as ruled by order of operations.\" The \"icon\" above represents that rule. When you see it in the following lessons, you should immediately think about \"execution order.\"\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst result = 1 + 1;\u003cbr\u003eresult; //=\u0026gt; 2 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou probably have an intuitive model of the \u003cstrong\u003edefault sequence\u003c/strong\u003e since you have the general mindset that English text is read \"top to bottom, left to right\" and expect that to apply to code. It does! Isn't it nice when things meet our default assumptions?\u003c/p\u003e  \u003cp\u003eThis is why you intuitively grasp why JavaScript would throw an error with the following code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eresult; //=\u0026gt; Error\u003cbr\u003econst result = 1 + 1; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis error makes sense because this code is trying to do a variable lookup \u003cem\u003ebefore\u003c/em\u003e initializing the variable that is looked up.\u003c/p\u003e  \u003ch2\u003eIdentify Two Core Categories of Code Statements\u003c/h2\u003e  \u003cp\u003eThere are two types of statements that affect whether code is executed and in what order:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eSelection\u003c/strong\u003e: Given the default order (or \"sequence\"), can we choose to run certain lines of code and not others? How do we do so?\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eRepetition\u003c/strong\u003e: Given the default order (or \"sequence\"), can we choose to do something until a condition is met or until code has run some number of times?\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eProvide An Example of Selection Statement\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Selection_thick.png\" alt=\"Seelection Image\"\u003e\u003c/p\u003e  \u003cp\u003eAs represented in the icon above, sometimes we need to deviate from the default \u003cstrong\u003esequence\u003c/strong\u003e. We might need to \u003cstrong\u003eselect\u003c/strong\u003e a different path. There's a \u003ca href=\"https://www.poetryfoundation.org/poems/44272/the-road-not-taken\"\u003epoem by Robert Frost\u003c/a\u003e about it.\u003c/p\u003e  \u003cp\u003eIn this case, the traveler is JavaScript, traveling fatefully down the default sequence. We, as programmers, create a fork, a \"split\" in fate, and ask JavaScript to take one path (or the other, or a third, or a fourth...and so on) based on a Boolean \"test\" expression's return value. We ask JavaScript to \u003cem\u003eselect\u003c/em\u003e the path.\u003c/p\u003e  \u003cp\u003eThe first  \u003cstrong\u003eselection\u003c/strong\u003e tool we'll learn is \u003ccode\u003eif\u003c/code\u003e. The \u003ccode\u003eif\u003c/code\u003e statement disrupts the \"default sequence\" by asking JavaScript to run a test, decide whether to follow the path, and then move back to the default sequence.\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/UntimelyKnowledgeableNumerator?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003e\u003cstrong\u003eSelection\u003c/strong\u003e lets us disrupt default flow by \u003cem\u003emaking a choice\u003c/em\u003e. JavaScript evaluates the condition in the parentheses and, if it returns \u003ccode\u003etrue\u003c/code\u003e, executes the code inside the \u003cem\u003eblock\u003c/em\u003e (the code enclosed in \u003ccode\u003e{}\u003c/code\u003e). If \u003ccode\u003efavoriteNumber\u003c/code\u003e were assigned \u003ccode\u003e0\u003c/code\u003e at the time the \u003ccode\u003eif\u003c/code\u003e statement is evaluated, it would skip over the code inside the block. That's why our icon shows the default flow \"hopping\" from one point to another, skipping what's in the middle.\u003c/p\u003e  \u003cp\u003eTry changing the initial value of \u003ccode\u003efavoriteNumber\u003c/code\u003e or using a different comparison operator and see what happens.\u003c/p\u003e  \u003ch2\u003eProvide An Example of Repetition Statement\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Repetition_thick.png\" alt=\"Repetition Graphic\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eRepetition\u003c/strong\u003e lets us disrupt default flow by \u003cem\u003erepeating\u003c/em\u003e. The \u003ccode\u003ewhile\u003c/code\u003e loop, which we will introduce formally in a few lessons, means \"do something \u003ccode\u003ewhile\u003c/code\u003e (or \"as long as\") some condition is true.\" That \"something\" is held inside a code block:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/SturdyJubilantRar?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003e\u003cstrong\u003eRepetition\u003c/strong\u003e lets us disrupt default flow by marking off a set of commands that should be re-evaluated multiple times before resuming default flow. It's even possible to get into a repetition statement that you never exit. Programmers call that an \"infinite loop.\" Most of the time, that's not a desirable situation. Our icon shows the more desirable situation of us following default sequence, then finding a block that we repeat multiple times, then returning to default sequence.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThis concludes our introduction to this module. This module is like a writing class: we know how to write basic \u003cem\u003esentences\u003c/em\u003e with a simple subject and a simple verb. We're now going to try to write complete sentences with conjunctions and punctuation (like the cookie examples!). We improve our basic sentences by using SELECTION or REPETITION statements that allow us to create code that deviates from the default \"flow\" or SEQUENCE.\u003c/p\u003e","frontPage":false},{"exportId":"errors-and-stack-traces","title":"Errors and Stack Traces","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-errors-and-stack-traces\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-errors-and-stack-traces\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-errors-and-stack-traces/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRecognize common JavaScript errors.\u003c/li\u003e \u003cli\u003eRead a stack trace to discern where an error originated.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eNo one writes perfect code the first time. Or the second time. Or the third time.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/principles/errors-and-stack-traces-readme/rakes.gif\" alt=\"Forever stepping on rakes\"\u003e\u003c/p\u003e  \u003cp\u003eWe all make mistakes. One of the biggest advantages an experienced programmer has is knowing how to quickly troubleshoot and fix errors they encounter. You \u003cstrong\u003ewill\u003c/strong\u003e reach this point —\u0026nbsp;it's just a matter of practice. To get started, let's look at some of the common types of error messages you'll encounter when writing JavaScript code.\u003c/p\u003e  \u003ch2\u003e\u003ccode\u003eUncaught ReferenceError: _____ is not defined\u003c/code\u003e\u003c/h2\u003e  \u003cp\u003eThis is one of the simplest and most common errors, and it's pretty explicitly telling us what went wrong. We tried to reference a variable or function that doesn't exist in the current scope. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyVar;\u003cbr\u003e// ERROR: Uncaught ReferenceError: myVar is not defined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt can also arise if you forget to put quotation marks around a string:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eHello, world;\u003cbr\u003e// ERROR: Uncaught ReferenceError: Hello is not defined\u003cbr\u003e\u003cbr\u003e('Hello, world');\u003cbr\u003e// =\u0026gt; \"Hello, world\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you meant to declare the variable in the current scope and simply forgot, declaring the variable should solve the issue:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myVar = 'Hello, world!';\u003cbr\u003e\u003cbr\u003emyVar;\u003cbr\u003e// =\u0026gt; \"Hello, world!\" \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003e\u003ccode\u003eUncaught TypeError: _____ is not a function\u003c/code\u003e\u003c/h2\u003e  \u003cp\u003eThis one usually indicates that you tried to invoke something that isn't actually a function. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myVar = 'Hello, world!';\u003cbr\u003e\u003cbr\u003emyVar();\u003cbr\u003e// ERROR: Uncaught TypeError: myVar is not a function \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eA common variant of this error that you'll run into later in the course is \u003ccode\u003eUncaught TypeError: undefined is not a function\u003c/code\u003e. The JavaScript engine is telling us that we tried to invoke \u003ccode\u003eundefined\u003c/code\u003e, which is obviously not invocable. This happens when we've tried to store a function in a variable but the variable is undefined for some reason.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eAside:\u003c/strong\u003e Wait? We can store functions in variables? Yes we can! In JavaScript, functions are objects, which means we can do anything with them that we can do with any other object: assign it properties, store it in a variable, pass it as an argument, etc.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003e\u003ccode\u003eUncaught SyntaxError: missing ) after argument list\u003c/code\u003e\u003c/h2\u003e  \u003cp\u003eWhen you see this error, it means you tried to invoke a function but forgot the closing parenthesis:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log('Hello,', 'world!';\u003cbr\u003e// ERROR: Uncaught SyntaxError: missing ) after argument list\u003cbr\u003e\u003cbr\u003efunction myAdder (num1, num2) {\u003cbr\u003e  return num1 + num2;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003emyAdder(10, 4;\u003cbr\u003e// ERROR: Uncaught SyntaxError: missing ) after argument list \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003e\u003ccode\u003eUncaught TypeError: Assignment to constant variable.\u003c/code\u003e\u003c/h2\u003e  \u003cp\u003eYou're probably familiar with this one by now —\u0026nbsp;it means we accidentally tried to assign a new value to a variable declared with the \u003ccode\u003econst\u003c/code\u003e keyword, which prevents reassignment. However, sometimes you rightfully feel that you didn't try to reassign anything, and it boils down to a small typo:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst snackSelection = 'Pretzels';\u003cbr\u003e\u003cbr\u003eif ((snackSelection = 'Pretzels')) {\u003cbr\u003e  console.log(\"That'll be $1, please!\");\u003cbr\u003e}\u003cbr\u003e// ERROR: Uncaught TypeError: Assignment to constant variable. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, we accidentally used the \u003cem\u003eassignment operator\u003c/em\u003e, a single \u003ccode\u003e=\u003c/code\u003e sign, instead of a comparison operator, such as the \u003cem\u003estrict equality operator\u003c/em\u003e (\u003ccode\u003e===\u003c/code\u003e).\u003c/p\u003e  \u003cp\u003eThis is just a selection of some of the many types of errors you might encounter while writing JavaScript code. The main point is to use the information you're given. The JavaScript engine isn't trying to trick you —\u0026nbsp;on the contrary, it's trying to \u003cstrong\u003ehelp\u003c/strong\u003e you debug.\u003c/p\u003e  \u003ch2\u003eStack traces\u003c/h2\u003e  \u003cp\u003eOne of the really neat pieces of information provided with the error messages is what's called a \u003cem\u003estack trace\u003c/em\u003e. Let's take a look at an example. Fork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, execute the code in \u003ccode\u003eerrors.js\u003c/code\u003e by running \u003ccode\u003enode errors.js\u003c/code\u003e. You should see something like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/errors-and-stack-traces/type-error.png\" alt=\"assignment to constant variable\"\u003e\u003c/p\u003e  \u003cp\u003eWhoa — there's a lot going on there! Let's break it down a bit.\u003c/p\u003e  \u003cp\u003eNear the top, you'll see JavaScript showing us the exact piece of code that's throwing the error. It's even pointing to the exact character it thinks is the problem! (Warning: JavaScript isn't always right.) Below that is the error itself: \u003ccode\u003eTypeError: Assignment to constant variable.\u003c/code\u003e. Hopefully you recognize what's causing the error and how to fix it.\u003c/p\u003e  \u003cp\u003eUnder the identification of the error is the stack trace. For this example, most of the information we're seeing in the stack trace is related to what's going on under the hood in Node.js and, therefore, isn't especially helpful for debugging (we'll look at a more helpful example shortly). But let's look at a couple of things before we move on.\u003c/p\u003e  \u003cp\u003eFirst, you'll see \u003ccode\u003eat Object.\u0026lt;anonymous\u0026gt;\u003c/code\u003e followed by the file path for the \u003ccode\u003eerrors.js\u003c/code\u003e file. The \u003ccode\u003eat Object.\u0026lt;anonymous\u0026gt;\u003c/code\u003e is under-the-hood info: basically, it means that an object is being created by Node when our code runs and that object is not assigned a name. But the file path does contain some helpful information. Notice that it ends with \u003ccode\u003eerrors.js:5:20\u003c/code\u003e. Those numbers at the end are telling us that JavaScript thinks the error is on line 5 of our file, at character 20.\u003c/p\u003e  \u003cp\u003eLet's go ahead and fix our error and run \u003ccode\u003enode errors.js\u003c/code\u003e again. Now you should see something like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/errors-and-stack-traces/reference-error.png\" alt=\"third is not defined\"\u003e\u003c/p\u003e  \u003cp\u003eLooks like we're making some progress! First you'll see the message that was logged by the \u003ccode\u003eif\u003c/code\u003e statement, so we know it's now working. This is followed by the information about the current error: the code that's throwing the error and the error itself. The next three lines give us the stack trace. Note that it's identifying three lines of code: \u003ccode\u003e17\u003c/code\u003e, \u003ccode\u003e13\u003c/code\u003e, and \u003ccode\u003e20\u003c/code\u003e. Let's take a look at those lines:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction first() {\u003cbr\u003e  second(); // Line 13\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction second() {\u003cbr\u003e  third(); // Line 17\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efirst(); // Line 20 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow that we're dealing with a series of function invocations, we can really see the power of the stack trace: it traces the error up through the stack of function calls that led to it. Let's read it backwards and reconstruct the events that led to the error:\u003c/p\u003e  \u003col\u003e \u003cli\u003eThe JavaScript engine reaches line \u003ccode\u003e20\u003c/code\u003e and invokes \u003ccode\u003efirst()\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eInside \u003ccode\u003efirst()\u003c/code\u003e: the engine reaches line \u003ccode\u003e13\u003c/code\u003e and invokes \u003ccode\u003esecond()\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eInside \u003ccode\u003esecond()\u003c/code\u003e: the engine reaches line \u003ccode\u003e17\u003c/code\u003e and sees the identifier \u003ccode\u003ethird\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eThe engine can't find a declared variable or function with that name so it throws an error inside \u003ccode\u003esecond()\u003c/code\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eTo fix the \u003ccode\u003ethird is not defined\u003c/code\u003e error, let's first try declaring \u003ccode\u003ethird\u003c/code\u003e as the simplest thing we know, a variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction first() {\u003cbr\u003e  second();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction second() {\u003cbr\u003e  third();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst third = 'Declaring a new variable.';\u003cbr\u003e\u003cbr\u003efirst(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRemember what we learned earlier in the section on common JavaScript errors. If our understanding is correct, this should fix the \u003ccode\u003ethird is not defined\u003c/code\u003e error and, in its place, throw a new error. Can you guess what the new error will be?\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/errors-and-stack-traces/type-error-2.png\" alt=\"third is not a function\"\u003e\u003c/p\u003e  \u003cp\u003eDid you correctly deduce what the new error would be?\u003c/p\u003e  \u003cp\u003eThe new error is telling us that \u003ccode\u003ethird is not a function\u003c/code\u003e. It may have been pretty easy to figure out that our initial solution would just result in another error, but intentionally breaking your code and seeing whether it breaks in the exact way you predicted is a great technique for improving your debugging and general JavaScript skills. The more you understand the errors and their causes, the easier debugging will become.\u003c/p\u003e  \u003cp\u003eWe'll fix this by declaring \u003ccode\u003ethird()\u003c/code\u003e as a function instead of a simple variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction first() {\u003cbr\u003e  second();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction second() {\u003cbr\u003e  third();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction third() {\u003cbr\u003e  console.log(\"Now I'm a function!\");\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efirst(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we save the file and run the code again, all of the errors should be gone and we should see our two messages logged to the terminal.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eArguably the biggest difference between being a novice and an expert developer is how comfortable you feel with reading and debugging error messages. JavaScript —\u0026nbsp;and, indeed, every programming language —\u0026nbsp;is designed \u003cstrong\u003eby\u003c/strong\u003e programmers \u003cstrong\u003efor\u003c/strong\u003e programmers. The language doesn't intentionally make things more difficult for you. On the contrary, every time you write code that results in some sort of error, JavaScript goes out of its way to provide you with the information you need to find and fix the error. When you see one of those error messages pop up, don't freak out! It's the JavaScript engine starting a friendly dialog with you: \"Hey, I tried to do what you asked of me, but I ran into a problem. Here's where the problem occurred, and here's what happened.\"\u003c/p\u003e  \u003cp\u003eAs you become more comfortable diagnosing and solving error messages, you'll become a faster, better programmer, and writing JavaScript code will become more and more enjoyable!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors\"\u003eMDN —\u0026nbsp;Errors\u003c/a\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined\"\u003e\u003ccode\u003eUncaught ReferenceError: _____ is not defined\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function\"\u003e\u003ccode\u003eUncaught TypeError: _____ is not a function\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\"\u003e\u003ccode\u003eUncaught SyntaxError: missing ) after argument list\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\"\u003e\u003ccode\u003eUncaught TypeError: Assignment to constant variable.\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"installing-ruby-on-macos","title":"Installing Ruby on macOS","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-ruby\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eInstall the GMP and GnuPG Packages\u003c/h2\u003e  \u003cp\u003eBefore installing RVM and Ruby, we will need to add two tools which help us to verify that we're installing the software that we're expecting.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ebrew install gmp\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ebrew install gnupg\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/YO14TLJvun0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you get an error saying \"Warning: gnupg-1.4.19 already installed\", GnuPG is installed, but it may not be linked properly. To fix:\u003c/p\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ebrew link gnupg\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eInstall Ruby Environment Manager (RVM) on macOS\u003c/h2\u003e  \u003cp\u003eRuby Environment Manager (RVM) is a tool that will allow you to download and install multiple versions of Ruby, one of the programming languages that we teach at Flatiron School. This is the first step in installing Ruby on your macOS operating system.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecurl -sSL https://rvm.io/mpapis.asc | gpg --import -\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecurl -sSL https://rvm.io/pkuczynski.asc | gpg --import -\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003e\\curl -sSL https://get.rvm.io | bash\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e \u003cli\u003eReopen the \"Terminal\" application\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ervm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/9_bo5wVw-XQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you see a long message ending in \"For additional documentation please visit \u003ca href=\"https://rvm.io\"\u003ehttps://rvm.io\u003c/a\u003e\", continue below.\u003c/p\u003e  \u003cp\u003eIf \u003ccode\u003ervm\u003c/code\u003e is not found, check out the troubleshooting steps in the \u003cstrong\u003eVerify and Troubleshoot your macOS Environment Setup\u003c/strong\u003e lesson later on in this module.\u003c/p\u003e  \u003ch2\u003eInstall Ruby version 2.7.2 on macOS\u003c/h2\u003e  \u003cp\u003eFor our Ruby labs and lessons, we expect that students use Ruby version 2.7.2. If Ruby Environment Manager (RVM) has been successfully installed, you can quickly install Ruby with a couple of commands.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ervm install 2.7.2\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ervm list\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/TguTS-q83EE\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you see a message starting with \"=* ruby-2.7.2\", continue below.\u003c/p\u003e  \u003ch2\u003eInstall Ruby Gems\u003c/h2\u003e  \u003cp\u003eRuby Gems are small programs written in Ruby that help you to code more easily in Ruby. The gems you will install today include: Bundler, which allows you to keep track of which gems your projects need to work, and Pry, which allows you to pause Ruby code execution when it runs and inspect it.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem update --system\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem install bundler\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem install pry\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egem list | wc -l\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003cp\u003eIf you can complete each step without any issues and you see an output of a number around or above 40 from the last command, continue to the next lesson, \u003cstrong\u003eConfiguring Git and GitHub on macOS\u003c/strong\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"changing-the-dom-with-devtools-and-javascript","title":"Changing The DOM with DevTools and JavaScript","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-dev-tools\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-dev-tools\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-dev-tools/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDemonstrate viewing the DOM through Chrome DevTools\u003c/li\u003e \u003cli\u003eSelect an element with Chrome DevTools\u003c/li\u003e \u003cli\u003eDelete an element with Chrome DevTools\u003c/li\u003e \u003cli\u003eDemonstrate that the source is not changed when the DOM is\u003c/li\u003e \u003cli\u003eDemonstrate opening the DevTools' JavaScript console\u003c/li\u003e \u003cli\u003eSelect an element with JavaScript\u003c/li\u003e \u003cli\u003eDelete an element with JavaScript\u003c/li\u003e \u003cli\u003eStoring node references in variables\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've read that updating the DOM will update the browser's rendered page. Let's try this out. We're going to change the DOM in two ways. First, we'll use Chrome's Developer Tools (\"DevTools\") and our mouse to remove an element from the DOM. Then we'll use the DevTools' JavaScript console to run JavaScript that does the same thing.\u003c/p\u003e  \u003ch2\u003eDemonstrate Viewing the DOM Through Chrome DevTools\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/ada-wiki.png\" alt=\"ada-wiki\"\u003e\u003c/p\u003e  \u003cp\u003eLet's head back to the \u003ca href=\"https://en.wikipedia.org/wiki/Ada_Lovelace\"\u003eWikipedia page for Ada Lovelace\u003c/a\u003e. From this web page, look at the Chrome menu bar at the top of the page. Click on \"View\", then select \"Developer\", then \"Developer Tools.\" This will open the Google Developer Tools. Click on the \"Elements\" tab. Here we see the DOM representation of the HTML source that was loaded into the browser.\u003c/p\u003e  \u003ch3\u003eSelect an Element With Chrome DevTools\u003c/h3\u003e  \u003cp\u003eScroll through the Elements panel. You will see some HTML: \u003ccode\u003ehead\u003c/code\u003e tags, \u003ccode\u003ebody\u003c/code\u003e tags, \u003ccode\u003ediv\u003c/code\u003es, etc. If the \u003ccode\u003ebody\u003c/code\u003e element is collapsed, use the disclosure triangle to expand it. Notice that you can mouse over different elements in the Elements panel and see them highlighted in the browser window. Locate the \u003ccode\u003ediv\u003c/code\u003e nested inside \u003ccode\u003ebody\u003c/code\u003e that has an \u003ccode\u003eid\u003c/code\u003e attribute of \"content\" and expand that as well.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/content-element.png\" alt=\"content-element\"\u003e\u003c/p\u003e  \u003cp\u003eNext, locate the \u003ccode\u003eh1\u003c/code\u003e element nested inside the \"content\" div. It should look something like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/h1-element.png\" alt=\"h1-element\"\u003e\u003c/p\u003e  \u003cp\u003eClick on the \u003ccode\u003eh1\u003c/code\u003e element; you'll see that it's highlighted in the Elements panel. You've now selected an element with the DevTools.\u003c/p\u003e  \u003ch3\u003eDelete an Element With Chrome DevTools\u003c/h3\u003e  \u003cp\u003ePress the delete button on your keyboard. The element will vanish from the browser's rendered page.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/deleted-header.png\" alt=\"deleted-header\"\u003e\u003c/p\u003e  \u003ch3\u003eDemonstrate That the Source is Not Changed When the DOM Is\u003c/h3\u003e  \u003cp\u003eView the page source. In the Chrome menu bar, click on \"View\", then select \"Developer\", then \"View Source.\" You will see that the HTML is just as it always was, with the deleted element still present.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/html-source.png\" alt=\"html-source\"\u003e\u003c/p\u003e  \u003cp\u003eThe changes in the DOM do not affect the HTML file on the server. When you think about it, that makes sense. If that were true then anyone could be changing carefully-written HTML. (Of course, in the case of Wikipedia, people \u003cem\u003ecan\u003c/em\u003e edit the content using Wikipedia's editor, but they aren't directly accessing the underlying HTML.)\u003c/p\u003e  \u003cp\u003eThe HTML, which lives on the server, \u003cstrong\u003eis unchanged\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eRefresh the page by going to \"View\" and choosing \"Reload this Page.\" You will be reloading the DOM \u003cem\u003efrom the source\u003c/em\u003e. The page content will come back.\u003c/p\u003e  \u003ch3\u003eDemonstrate Opening the DevTools' JavaScript Console\u003c/h3\u003e  \u003cp\u003eAbove, we deleted an element by selecting it in the DevTools and pressing the delete key. We can accomplish the same thing using JavaScript.\u003c/p\u003e  \u003cp\u003eIn DevTools, click the \u003cstrong\u003eConsole\u003c/strong\u003e tab. At the prompt, type the word \u003ccode\u003edocument\u003c/code\u003e and press \"Enter.\" You'll get a \u003ccode\u003e#document\u003c/code\u003e returned. If you hover your mouse over the element, you'll see the entire page highlighted in the browser window. If you expand it, you'll see that it's the exact HTML that you saw in the \u003cstrong\u003eElements\u003c/strong\u003e tab.\u003c/p\u003e  \u003cp\u003eRecall that \u003ccode\u003edocument\u003c/code\u003e is an \u003ccode\u003eobject\u003c/code\u003e; as such, it has properties and \u003ccode\u003emethods\u003c/code\u003e, including a number of different methods that can be used to return elements. Let's find or \u003ccode\u003eselect\u003c/code\u003e an element by speaking JavaScript with the DOM.\u003c/p\u003e  \u003ch3\u003eSelect an Element With JavaScript\u003c/h3\u003e  \u003cp\u003eIn the \u003cstrong\u003eConsole\u003c/strong\u003e type:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  document.querySelector('h1'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will return something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\"\u0026gt;...\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGo ahead and click on that disclosure triangle to see more.\u003c/p\u003e  \u003cp\u003eThe return value of \u003ccode\u003edocument.querySelector('h1');\u003c/code\u003e is the DOM node, which is also a JavaScript \u003ccode\u003eobject\u003c/code\u003e. This means that it, in turn, can have methods called on it! This is called \u003cem\u003emethod chaining\u003c/em\u003e. Let's use \u003cem\u003emethod chaining\u003c/em\u003e to remove our node from the DOM.\u003c/p\u003e  \u003ch3\u003eDelete an Element with JavaScript\u003c/h3\u003e  \u003cp\u003eNow type:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  document.querySelector('h1').remove(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe heading is gone! We called \u003ccode\u003edocument.querySelector('h1')\u003c/code\u003e to get the node; we then used \u003cem\u003emethod chaining\u003c/em\u003e to call the \u003ccode\u003eremove()\u003c/code\u003e method on the node object. We use dot notation to \u003cem\u003echain\u003c/em\u003e the calls.\u003c/p\u003e  \u003cp\u003eFollow the same process we used earlier to verify that the source has not changed. To restore it, simply refresh the page (i.e. reload the DOM).\u003c/p\u003e  \u003ch3\u003eStoring Node References in Variables\u003c/h3\u003e  \u003cp\u003eQuery methods like \u003ccode\u003equerySelector()\u003c/code\u003e and the other methods we'll be learning about are expressions: they return a value (specifically, a DOM node). As such, we can save the results of the query into a variable. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst header = document.querySelector('h1'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe now have a reference to that node with a meaningful name; we can simply use \u003ccode\u003eheader\u003c/code\u003e any time we need to refer to our node, rather than always having to look it up with \u003ccode\u003edocument.querySelector()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eYou can perhaps imagine how, if we have a program that selects, creates, modifies, or removes a large number of nodes, using this approach will result in code that's easier to read, debug and maintain.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eDOM programming is using JavaScript to:\u003c/p\u003e  \u003col\u003e \u003cli\u003eAsk the DOM to find or \u003ccode\u003eselect\u003c/code\u003e an HTML element or elements in the rendered page\u003c/li\u003e \u003cli\u003eRemove the selected element(s) and/or insert new element(s)\u003c/li\u003e \u003cli\u003eAdjust a property of the selected element(s)\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIn this lesson you just did all that stuff! Learning to duplicate what you can do in DevTools with JavaScript \u003cstrong\u003e\u003cem\u003eis\u003c/em\u003e\u003c/strong\u003e DOM programming. The next lessons are going to give you more methods for selecting elements and changing them, but you just changed the DOM. High fives are in order.\u003c/p\u003e","frontPage":false},{"exportId":"javascript-query-selector-methods","title":"JavaScript Query Selector Methods","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-query-selector-methods\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-query-selector-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-query-selector-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUse \u003ccode\u003equerySelector()\u003c/code\u003e and \u003ccode\u003equerySelectorAll()\u003c/code\u003e to find nested nodes\u003c/li\u003e \u003cli\u003eModify attributes of DOM nodes\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eOne of the most essential skills in our web development toolbox is finding elements in the DOM.\u003c/p\u003e  \u003cp\u003eWhile \u003ccode\u003edocument.getElementById()\u003c/code\u003e and \u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e are good, we can improve our search when we use document structure (tag, \u003ccode\u003eid\u003c/code\u003e, \u003ccode\u003eclass\u003c/code\u003e) \u003cstrong\u003ealong with\u003c/strong\u003e the tree structure of the DOM. It turns out CSS is a \u003cem\u003egreat\u003c/em\u003e language for expressing those relationships! With the \u003ccode\u003equerySelector()\u003c/code\u003e and \u003ccode\u003equerySelectorAll()\u003c/code\u003e methods, we provide one or more CSS selectors as an argument and we get back the matching element or elements. Because they can take a string containing multiple selectors, they allow us to create very specific, complex queries.\u003c/p\u003e  \u003ch2\u003eUse \u003ccode\u003equerySelector()\u003c/code\u003e and \u003ccode\u003equerySelectorAll()\u003c/code\u003e to Find Nested Nodes\u003c/h2\u003e  \u003cp\u003eIf you would like to follow along in the console, fork and clone this lesson, open the files in your text editor, and open \u003ccode\u003eindex.html\u003c/code\u003e in Google Chrome. As you go, copy each HTML example into \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003equerySelector()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003equerySelector()\u003c/code\u003e method takes one argument, a string of one or more CSS-compatible \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors\"\u003eselectors\u003c/a\u003e, and returns the \u003cem\u003efirst\u003c/em\u003e element that matches.\u003c/p\u003e  \u003cp\u003eGiven a document like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    Hello!\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    Goodbye!\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we called \u003ccode\u003edocument.querySelector('div')\u003c/code\u003e, the method would return the first \u003ccode\u003ediv\u003c/code\u003e. If we check its \u003ccode\u003einnerHTML\u003c/code\u003e, we should see \u003ccode\u003eHello!\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eSelectors aren't limited to one tag name, though. Otherwise, why not just use \u003ccode\u003edocument.getElementsByTagName('div')[0]\u003c/code\u003e? We can get very specific.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;ul class=\"ranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;\u003cbr\u003e        \u0026lt;div\u0026gt;\u003cbr\u003e          \u0026lt;ul\u0026gt;\u003cbr\u003e            \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e          \u0026lt;/ul\u0026gt;\u003cbr\u003e        \u0026lt;/div\u0026gt;\u003cbr\u003e      \u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;3\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div\u0026gt;\u003cbr\u003e    \u0026lt;ul class=\"unranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;6\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;\u003cbr\u003e        \u0026lt;div\u0026gt;4\u0026lt;/div\u0026gt;\u003cbr\u003e      \u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econst li2 = document.querySelector('ul.ranked-list li ul li');\u003cbr\u003eli2;\u003cbr\u003e//=\u0026gt; \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e\u003cbr\u003econst div4 = document.querySelector('ul.unranked-list li div');\u003cbr\u003ediv4;\u003cbr\u003e//=\u0026gt; \u0026lt;div\u0026gt;4\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the above example, the first query says, \"Starting from \u003ccode\u003edocument\u003c/code\u003e (the object we've called \u003ccode\u003equerySelector()\u003c/code\u003e on), find a \u003ccode\u003eul\u003c/code\u003e with a \u003ccode\u003eclassName\u003c/code\u003e of \u003ccode\u003eranked-list\u003c/code\u003e (recall from CSS that the \u003ccode\u003e.\u003c/code\u003e indicates that \u003ccode\u003eranked-list\u003c/code\u003e is a \u003ccode\u003eclassName\u003c/code\u003e). Then find an \u003ccode\u003eli\u003c/code\u003e that is a descendant of that \u003ccode\u003eul\u003c/code\u003e. Next find a  \u003ccode\u003eul\u003c/code\u003e that is a descendant (but not necessarily a direct child) of that \u003ccode\u003eli\u003c/code\u003e.  Finally, find an \u003ccode\u003eli\u003c/code\u003e that is a descendant of that (second) \u003ccode\u003eul\u003c/code\u003e.\"\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The HTML property \u003ccode\u003eclass\u003c/code\u003e is referred to as \u003ccode\u003eclassName\u003c/code\u003e in JavaScript.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eWhat does the second call to \u003ccode\u003equerySelector()\u003c/code\u003e say? Think about it for a minute, and then read on.\u003c/p\u003e  \u003cp\u003eWait for it...\u003c/p\u003e  \u003cp\u003eThe second call says, \"Starting from \u003ccode\u003edocument\u003c/code\u003e, find a \u003ccode\u003eul\u003c/code\u003e with a \u003ccode\u003eclassName\u003c/code\u003e of \u003ccode\u003eunranked-list\u003c/code\u003e. Then find an \u003ccode\u003eli\u003c/code\u003e descended from \u003ccode\u003eul.unranked-list\u003c/code\u003e and a \u003ccode\u003ediv\u003c/code\u003e descended from that \u003ccode\u003eli\u003c/code\u003e.\"\u003c/p\u003e  \u003ch4\u003eCSS Selectors\u003c/h4\u003e  \u003cp\u003eIf using CSS to target elements isn't feeling natural, now might be a good time to brush up on \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors\"\u003eselectors\u003c/a\u003e. Play around on the MDN page, then come back when you're ready.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003equerySelectorAll()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003e\u003ccode\u003equerySelectorAll()\u003c/code\u003e works a lot like \u003ccode\u003equerySelector()\u003c/code\u003e — it accepts a string containing one or more selectors as its argument, and it searches starting from the object that it's called on  (either \u003ccode\u003edocument\u003c/code\u003e or an element). However, instead of returning the first match, it returns a \u003ccode\u003eNodeList\u003c/code\u003e collection of all matching elements. A \u003ccode\u003eNodeList\u003c/code\u003e is similar to an \u003ccode\u003eHTMLCollection\u003c/code\u003e: it is an array-like structure containing, in this case, a list of DOM nodes.\u003c/p\u003e  \u003cp\u003eGiven a document like\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;main id=\"app\"\u0026gt;\u003cbr\u003e    \u0026lt;ul class=\"ranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;ul class=\"ranked-list\"\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;10\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;11\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/main\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we called\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.getElementById('app').querySelectorAll('ul.ranked-list li'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe'd get back a list of nodes corresponding to: \u003ccode\u003e\u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;10\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;11\u0026lt;/li\u0026gt;\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThe DOM selection methods \u003ccode\u003edocument.querySelector()\u003c/code\u003e and \u003ccode\u003edocument.querySelectorAll()\u003c/code\u003e are powerful tools for finding the elements we need to update and change. They use the familiar CSS selector syntax and allow us to create very specific queries that give us access to elements in complex DOM trees.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\"\u003edocument.querySelector()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\"\u003edocument.querySelectorAll()\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"html-lists-images-and-links","title":"HTML Lists, Images and Links","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-fundamentals-lists-images-links\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-fundamentals-lists-images-links/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-fundamentals-lists-images-links\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-fundamentals-lists-images-links/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIdentify ordered, unordered and definition lists\u003c/li\u003e\n\u003cli\u003eIdentify images\u003c/li\u003e\n\u003cli\u003eIdentify links\u003c/li\u003e\n\u003cli\u003eIdentify HTML validation tools\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou might be wondering what else is available to use to build out full webpages\nnow that you are more familiar with the basics of HTML. How do you display an\nimage? How do you add a formatted list of topics? How do you link page elements\nbeyond text? Now you're ready to explore these fundamental tools. Here's a\nhigh-level overview before you dive into practicing with the labs.\u003c/p\u003e\n\n\u003ch3\u003eIdentify Ordered, Unordered and Definition Lists\u003c/h3\u003e\n\n\u003cp\u003eWhen we want to present a list of items in a clear, readable format, we turn to\nthe HTML unordered list, represented by the the \u003ccode\u003eul\u003c/code\u003e tag.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;One item\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Another item\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf it's important to distinguish a particular order of the items (as for a\nrecipe or ranking), we use an ordered list, or the \u003ccode\u003eol\u003c/code\u003e tag.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;First item\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Second item\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ol\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice the nesting of our items within the lists. Each \u003ccode\u003eli\u003c/code\u003e is a list item\ncontained in the larger \u003ccode\u003eul\u003c/code\u003e or \u003ccode\u003eol\u003c/code\u003e container.\u003c/p\u003e\n\n\u003cp\u003eAnother type of list we can use is a definition list, which defines specific\ntypes of items.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;dl\u0026gt;\u003cbr\u003e  \u0026lt;dt\u0026gt;First term\u0026lt;/dt\u0026gt;\u003cbr\u003e  \u0026lt;dd\u0026gt;Term definition\u0026lt;/dd\u0026gt;\u003cbr\u003e\u0026lt;/dl\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eIdentify Images\u003c/h3\u003e\n\n\u003cp\u003eTo include an image in our page, we use an \u003ccode\u003eimg\u003c/code\u003e tag.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"myimage.jpg\" alt=\"Alternative Text\" title=\"Display Title\"\u003cbr\u003ewidth=\"800\" height=\"600\"\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere are two notable things about the \u003ccode\u003eimg\u003c/code\u003e tag: The first is that it does not\nhave a closing tag. The image tag closes itself. Secondly, it handles a lot of\n\u003cem\u003eattributes\u003c/em\u003e. Attributes are special keywords used on the tag to control the\nelement's behavior, or provide additional information about the HTML element.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ealt\u003c/code\u003e attribute provides descriptive text the browser can display if it\ncan't find the image file. The browser can also display the \u003ccode\u003etitle\u003c/code\u003e text to give\nthe user more information about the image. The \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e attributes\ndefine the size of the image that shows up in the browser. \u003c/p\u003e\n\n\u003ch3\u003eIdentify Links\u003c/h3\u003e\n\n\u003cp\u003eYou might be familiar with basic link structure already, but here are other ways\nwe can use them.\u003c/p\u003e\n\n\u003cp\u003eBeginning with a standard text hyperlink, we can wrap other elements inside of them.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;a href=\"http://example.com/\"\u0026gt;This is a link\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat if we want to link an image instead of text? We can replace the text within\nthe \u003ccode\u003ea\u003c/code\u003e tags with our image tag.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;a href=\"http://example.com/\"\u0026gt;\u003cbr\u003e  \u0026lt;img src=\"myimage.jpg\" alt=\"Alternative Text\"\u0026gt;\u003cbr\u003e\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat about a link that will direct to an email address?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;a href=\"mailto:webmaster@example.com\"\u0026gt;Send an email\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSometimes we might want to link to a specific location on the same\nwebpage. We can then target an element that we identified or classified earlier.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;p id=\"tips\"\u0026gt;Useful Tips Section\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;a href=\"#tips\"\u0026gt;Jump to the Useful Tips Section\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen considering what location links point to, you will choose between relative\nor absolute links. A relative link directs to content within the same website.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;a href=\"about.html\"\u0026gt;This is a relative URL link\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAn absolute link, on the other hand, links to external content and requires a\nfully defined URL path. This is likely the type of link you see most often.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;a href=\"http://example.com/\"\u0026gt;This is an absolute URL link\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eIdentify HTML validation tools\u003c/h3\u003e\n\n\u003cp\u003eAn HTML validator is used to check HTML markup elements for syntax errors.\nSyntax errors, such as open tags, extra spaces, or forgotten quotation marks,\ncan cause a web page to look drastically different than the creator intended, or\nrender correctly in one browser, but not in another.\u003c/p\u003e\n\n\u003cp\u003eIt's easy to forget a closing HTML tag or miss a piece of punctuation when\nwriting HTML. Fortunately, we have a tool that will check our markup for us and\npoint out any errors. To validate our HTML, we can use the \u003ca href=\"http://validator.w3.org\"\u003eW3 HTML validator\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNow that you've taken a first look at these new HTML elements, you'll be better\nprepared to practice them in labs, where you'll learn more about each one and\nhow to use it effectively.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=tuDKQxfiXmY\"\u003eHTML Fundamentals overview video\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"windows-wsl2-nodejs-installation","title":"Windows WSL2 NodeJS Installation","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-nodejs\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-nodejs/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-nodejs\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-nodejs/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eInstall Node Version Manager (NVM) on Ubuntu\u003c/h2\u003e\n\n\u003cp\u003eNode Version Manager (NVM) is a tool that will allow you to download and install\nmultiple versions of Node.js, one of the environments for the JavaScript\nprogramming language that we teach at Flatiron School. Installing NVM is the\nfirst step in installing Node.js on your Ubuntu operating system.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.36.0/install.sh | bash\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecurl -sSL https://raw.githubusercontent.com/flatiron-school/dotfiles/master/nvm-shell-script \u0026gt;\u0026gt; ~/.bashrc\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eClose the \"Ubuntu\" application\u003c/li\u003e\n\u003cli\u003eReopen the \"Ubuntu\" application\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003cp\u003eIf you see a message ending with \"Note: to remove, delete, or uninstall nvm\",\ncontinue below.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If \u003ccode\u003envm\u003c/code\u003e is not recognized, or you are seeing new errors when\nrestarting the \"Ubuntu\" application, check out the troubleshooting steps\nin the \u003cstrong\u003eVerify and Troubleshoot your WSL2 Environment\nSetup\u003c/strong\u003e lesson later on in this module.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eInstall Node.js on Ubuntu\u003c/h2\u003e\n\n\u003cp\u003eFor our JavaScript labs and lessons, we expect that students use Node.js on\nUbuntu. If Node Version Manager (NVM) has been successfully installed, you can\nquickly install Node.js with a couple of commands.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm install node\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm list\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/bOajXY2CMq4\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a message starting with \"-\u0026gt; v14.13.0\" (or any higher number, like \"-\u0026gt; v14.13.10\" or \"-\u0026gt; v15.0.0\"), continue to the next lesson,\n\u003cstrong\u003eInstalling Ruby on WSL2\u003c/strong\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-programming-as-conversation","title":"Introduction to Programming as Conversation","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-intro\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-intro/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eWelcome! In this module, we’re going to start learning how to program in JavaScript.\u003c/p\u003e\n\u003cp\u003eIt will be a long process and you will have moments of elation, excitement and, sometimes, frustration. But we \u003cem\u003epromise\u003c/em\u003e you, learning to think in the disciplined way that programming teaches will change your life for the better.\u003c/p\u003e\n\u003ch2\u003eProgramming as Conversation\u003c/h2\u003e\n\u003cp\u003eOur method for teaching programming starts from a different place than you might expect. If you've ever looked at a programming tutorial or book you might be expecting lectures on how to convert decimal numbers to binary numbers, data types, variables, or something like that. We've designed our curriculum to \u003cem\u003enot\u003c/em\u003e do that.\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_50_SadHead.png\" alt=\"Confused by code being front-loaded\"\u003e\n\u003c/p\u003e\n\u003cp\u003eWe think there's a different, and better, way: we start instead by thinking deeply about having \u003cem\u003econversations\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_51_HappyHead.png\" alt=\"Conversations are a natural model for thinking about programming\"\u003e\n\u003c/p\u003e\n\u003cp\u003eMany of the ideas we’ll share in this module ask you to reflect on \"when you learned to talk\" or \"when you’re talking with a friend.\" We call this \"programming as conversation\" and it gets you to think about \u003cem\u003ecommunicating\u003c/em\u003e instead of \"memorizing strange programmer words, facts, and symbols.\" You'll learn those strange words and symbols eventually, of course, but you'll see them as part of the act of communication, something you find natural right now.\u003c/p\u003e\n\u003ch2\u003eProgramming is About Communication\u003c/h2\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_53_TwoHeads_Evaluation.png\" alt=\"Turning Gears in Communication\"\u003e\n\u003c/p\u003e\n\u003cp\u003eAt its heart, programming is about communicating strategies for solving problems. You:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003eDocument these strategies for yourself\u003c/li\u003e\n    \u003cli\u003eCommunicate these documented strategies to others\u003c/li\u003e\n    \u003cli\u003eAnd then, lastly, ask a computer to run these strategies \u003cem\u003every fast\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA \"program\" then is actually a strategy for solving a problem that people use to communicate with one another \u003cem\u003eas well as\u003c/em\u003e give to a machine.\u003c/p\u003e\n\u003cp\u003eA recipe for a fancy dish is a good comparison: you \u003cstrong\u003edocument\u003c/strong\u003e the ingredients and preparation for yourself using human language. You can then \u003cstrong\u003ecommunicate\u003c/strong\u003e that plan for food preparation by sharing the recipe with a friend.\u003c/p\u003e\n\u003ch2\u003ePrograms are Written in Notation\u003c/h2\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_82_GraphicNotationSystems.png\" alt=\"Notation Systems\"\u003e\n\u003c/p\u003e\n\u003cp\u003eEven in recipes, we commonly use special \u003cem\u003enotation\u003c/em\u003e like \u003ccode\u003e3g\u003c/code\u003e for \"3 grams\" or \u003ccode\u003e½C.\u003c/code\u003e for \"½ Imperial Cup.\" In recipes, we usually use \u003cem\u003enotation\u003c/em\u003e to save time so our wrists don't get tired. But with computers, we have to communicate using notation. Human language is often vague and imprecise and computers are \u003cem\u003eterrible\u003c/em\u003e about handling unclear directions. To help prevent communication breakdowns, we converse with them using a special notation. The \"special notation\" is the programming language's rules or \"syntax.\"\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eDEFINITION\u003c/strong\u003e Notation: A specialized vocabulary or system of symbols for communication. \u003cstrong\u003eExamples\u003c/strong\u003e Musical notation, arithmetic symbols, chemistry symbols, traffic signs, or knitting patterns.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eProgramming Defined\u003c/h2\u003e\n\u003cp\u003eLet's propose a definition of programming:\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eDEFINITION\u003c/strong\u003e Programming: The act of creating programs, documents written in a notation system that can be understood by other humans \u003cem\u003eas well as\u003c/em\u003e computers.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eProgramming Language Defined\u003c/h2\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eDEFINITION\u003c/strong\u003e Programming Language: A programming language defines the rules of notation (\"syntax\") that are required for it to ask the computer to do work on your behalf.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWhen programmers say \"I prefer Ruby to JavaScript\" they're saying \"I like the notation system that Ruby uses for expressing problems and their solutions.\" It's a lot like why some people like to play one instrument over another. In your heart you might \u003cem\u003efeel\u003c/em\u003e like a bassoonist, tuba player, or pianist — but all those instruments play a Middle-C note at the same frequency. Programming languages are similar: while their notation varies, they all ask the chips inside the computer to do the same work at the end of the day.\u003c/p\u003e\n\u003cp\u003eAs such, a lot of the \"fashion parade\" of \"what's hot\" in the technical scene is just fashion. The really important thing to learn is: \"What kind of problems or solutions does this language make easier to express?\"\u003c/p\u003e\n\u003ch2\u003eWe Converse With Computers\u003c/h2\u003e\n\u003cp\u003eOne of the most essential ways of communicating, that we've all practiced thousands of times, is a \u003cem\u003econversation\u003c/em\u003e. \"Conversation\" comes from the Latin words meaning \"by taking turns.\" In conversation, we \"take turns\" \u003cem\u003eexpressing\u003c/em\u003e ourselves.\u003c/p\u003e\n\u003cp\u003eA unit of \"ideas\" is an \u003cem\u003eexpression\u003c/em\u003e. When a listener hears an \u003cem\u003eexpression\u003c/em\u003e they interpret the words and symbols and sounds in the \u003cem\u003eexpression\u003c/em\u003e into a \u003cem\u003emeaning\u003c/em\u003e. We call the work they're doing \u003cem\u003eevaluation\u003c/em\u003e. The result of \u003cem\u003eevaluation\u003c/em\u003e for a human is \"understanding.\" Computers show their understanding by returning the result of that evaluation. That value is called a \u003cem\u003ereturn\u003c/em\u003e value.\u003c/p\u003e\n\u003cp\u003eConsider this diagram:\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_52_TwoHeadsConversingSummary.png\" alt=\"Conversational Summary Graphic\"\u003e\n\u003c/p\u003e\n\u003cp\u003eIn the next lessons, we're going to see how JavaScript acts as a \"listener\" in a conversation. When given an \u003cem\u003eexpression\u003c/em\u003e, JavaScript will \u003cem\u003eevaluate\u003c/em\u003e it and, like a good friend, give you a reaction about \u003cem\u003ehow\u003c/em\u003e it evaluated your expression. In the programming world, we call responses from the programming language a \u003cem\u003ereturn value\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eWhen expressions are evaluated, they return something\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSometimes our expressions might not make sense to JavaScript, just like sometimes our conversations with friends don't \u003cem\u003equite\u003c/em\u003e make sense to them.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWork, you stupid machine\u003c/code\u003e is not part of the valid notation of JavaScript. Below, we've embedded a tool that can read JavaScript. To see what happens when JavaScript tries to evaluate the expression, press the play button at the top.\u003c/p\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://repl.it/@MaxwellBenton2/RoyalblueWeakBash?lite=1\" width=\"100%\" height=\"600px\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\" allowfullscreen=\"allowfullscreen\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eHere we've broken the rules of the notation system. This is known as a \u003cem\u003esyntax error\u003c/em\u003e. Computers require us to honor \u003cem\u003etheir\u003c/em\u003e \u003cstrong\u003e\u003cem\u003elimited\u003c/em\u003e\u003c/strong\u003e vocabulary. Syntax errors are prompts from the programming language to help steer \u003cem\u003eour\u003c/em\u003e communication to be more precise.\u003c/p\u003e\n\u003cp\u003eWhen we follow the rules and adhere to the syntax, JavaScript will return something to us:\u003c/p\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://repl.it/@MaxwellBenton2/pac-0-1?lite=1\" width=\"100%\" height=\"600px\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\" allowfullscreen=\"allowfullscreen\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eSometimes, we might get something unexpected:\u003c/p\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://repl.it/@MaxwellBenton2/PuzzlingTrustworthyCgi?lite=1\" width=\"100%\" height=\"600px\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\" allowfullscreen=\"allowfullscreen\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eBut we'll get \u003cem\u003esomething\u003c/em\u003e in return.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eCongratulations! You've finished your first lesson in thinking about programming as a conversation. As you might guess, \u003cem\u003eexpressions\u003c/em\u003e are important because they're how we \"push\" ideas to computers and other programmers. We're going to spend the remainder of this module learning to build expressions and understanding how JavaScript will \u003cem\u003eevaluate\u003c/em\u003e them. Make sure you've integrated the vocabulary words of \"expression,\" \"evaluation,\" and \"return value\" before moving on.\u003c/p\u003e","frontPage":false},{"exportId":"default-sequence-and-comments","title":"Default Sequence and Comments","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-default-sequence-and-comments\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-default-sequence-and-comments\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-default-sequence-and-comments/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRecognize the comment marker\u003c/li\u003e \u003cli\u003eAdd a comment to code\u003c/li\u003e \u003cli\u003e'Comment out' code\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eAs said in the introduction to this section:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eJavaScript by default will read our code according to the rules of a \u003cstrong\u003edefault sequence\u003c/strong\u003e or \u003cstrong\u003edefault flow\u003c/strong\u003e: \"every line, top to bottom, left to right as ruled by order of operations.\"\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eUsing SELECTION statements we can make JavaScript \"skip\" over code if some Boolean \u003cem\u003eevaluation\u003c/em\u003e is (or is not) \u003ccode\u003etrue\u003c/code\u003e. Using REPETITION statements, we can make JavaScript \"stay put\" on one line and do it over and over until some Boolean \u003cem\u003eevaluation\u003c/em\u003e is (or is not) \u003ccode\u003etrue\u003c/code\u003e. The only way to make JavaScript \"not see\" a line without a Boolean \u003cem\u003eevaluation\u003c/em\u003e at play is to \"hide\" it from JavaScript using a \u003cem\u003ecomment\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eBe sure to \"play along\" with the examples below by keying in this code into \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e. We need to build comfort with working along with the lessons.\u003c/p\u003e  \u003ch2\u003eRecognize the Comment Marker\u003c/h2\u003e  \u003cp\u003eWe can exclude a line from the \u003cstrong\u003edefault sequence\u003c/strong\u003e by starting the line with the comment marker: \u003ccode\u003e//\u003c/code\u003e. After JavaScript sees a \u003ccode\u003e//\u003c/code\u003e, it will ignore from the \u003ccode\u003e//\u003c/code\u003e to the next line.\u003c/p\u003e  \u003cp\u003eBe careful! A comment placed in the middle of an expression can confuse JavaScript.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// Don't do this:\u003cbr\u003econst sum = ( 1 //+ 1); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs a rule of thumb, try to comment out whole lines only (i.e., place the comment marker at the beginning of the line). As you get more comfortable with JavaScript, you might find clever ways to use comments, but best keep things simple for now.\u003c/p\u003e  \u003ch2\u003eAdd a Comment to Code\u003c/h2\u003e  \u003cp\u003eComments are \u003cstrong\u003eprimarily\u003c/strong\u003e used to provide references or explanations about what's going on in code.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// Perform a constant expression evaluation\u003cbr\u003e3;\u003cbr\u003e// Assign constant 3 to variable triangleSides\u003cbr\u003econst triangleSides = 3; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eComments such as these are not particularly helpful. They're just restating what the code does. More often we add comments with motivation, or references, or blog posts, or bug reports:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// From the Three Dog Night song: \"Joy to the World (Jeremiah was a Bullfrog)\"\u003cbr\u003econst lineOne = \"Joy to the world\";\u003cbr\u003econst lineTwo = \"All the boys and girls\";\u003cbr\u003econst lineThree = \"Joy to the fishes in the deep blue sea\";\u003cbr\u003econst lineFour = \"Joy to you and me\";\u003cbr\u003e\u003cbr\u003e// The '\\n' inserts a new line into the string\u003cbr\u003econst chorus = `${lineOne}\\n${lineTwo}\\n${lineThree}\\n${lineFour}`;\u003cbr\u003e\u003cbr\u003echorus; \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eA-HA! Moment\u003c/strong\u003e. Recall that the \"return value\" documentation shorthand \u003ccode\u003e//=\u0026gt;\u003c/code\u003e starts with a comment marker. This indicates that what's after \u003ccode\u003e//\u003c/code\u003e is not part of the code itself. That's why it's used as an \"in-code\" documentation convention.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eComment Out code\u003c/h2\u003e  \u003cp\u003eAnother way to use comments is to \"comment out\" code, to \"hide\" or \"mute\" buggy or unused code from the \u003cstrong\u003edefault sequence\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eWith our current code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst lineOne = \"Joy to the world\";\u003cbr\u003econst lineTwo = \"All the boys and girls\";\u003cbr\u003econst lineThree = \"Joy to the fishes in the deep blue sea\";\u003cbr\u003econst lineFour = \"Joy to you and me\";\u003cbr\u003e\u003cbr\u003econst chorus = `${lineOne}\\n${lineTwo}\\n${lineThree}\\n${lineFour}`;\u003cbr\u003e\u003cbr\u003echorus; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eDefault sequence\u003c/strong\u003e satisfies our expectations by returning:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eJoy to the world\u003cbr\u003eAll the boys and girls\u003cbr\u003eJoy to the fishes in the deep blue sea\u003cbr\u003eJoy to you and me \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow let's \"comment out\" \u003ccode\u003elineThree\u003c/code\u003e. We'll also need to modify \u003ccode\u003echorus\u003c/code\u003e accordingly. (If you aren't sure why, try \u003cstrong\u003ejust\u003c/strong\u003e commenting out \u003ccode\u003elineThree\u003c/code\u003e in your REPL and see what happens when you run the code.) We'll comment out the current version of \u003ccode\u003echorus\u003c/code\u003e to save it and modify a copy:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst lineOne = \"Joy to the world\";\u003cbr\u003econst lineTwo = \"All the boys and girls\";\u003cbr\u003e//const lineThree = \"Joy to the fishes in the deep blue sea\";\u003cbr\u003econst lineFour = \"Joy to you and me\";\u003cbr\u003e\u003cbr\u003e// const chorus = `${lineOne}\\n${lineTwo}\\n${lineThree}\\n${lineFour}`;\u003cbr\u003econst chorus = `${lineOne}\\n${lineTwo}\\n${lineFour}`;\u003cbr\u003e\u003cbr\u003echorus;\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we run this code, it returns:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eJoy to the world\u003cbr\u003eAll the boys and girls\u003cbr\u003eJoy to you and me \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we want to go back to the original version, we simply \"comment back in\" \u003ccode\u003elineThree\u003c/code\u003e and the original \u003ccode\u003echorus\u003c/code\u003e variable, and comment out or delete the modified version of \u003ccode\u003echorus\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf we want to comment out \u003cem\u003emultiple\u003c/em\u003e lines, we can either place the comment marker at the beginning of each line, \u003cem\u003eor\u003c/em\u003e we can wrap the lines with \u003ccode\u003e/*\u003c/code\u003e and \u003ccode\u003e*/\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e/*\u003cbr\u003econst lineOne = \"Joy to the world\";\u003cbr\u003econst lineTwo = \"All the boys and girls\";\u003cbr\u003econst lineThree = \"Joy to the fishes in the deep blue sea\"; \u003cbr\u003e*/\u003cbr\u003econst lineFour = \"Joy to you and me\";\u003cbr\u003e\u003cbr\u003elineFour; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's common for developers to test two code paths (in effect, doing a selection statement's work by hand!) by \"commenting out\" and \"commenting back in\" code.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThe \u003cstrong\u003edefault sequence\u003c/strong\u003e is how JavaScript reads and executes each of the statements and commands in JavaScript code. To \"hide\" a line of code from being seen by the JavaScript engine, start the line with the comment marker \u003ccode\u003e//\u003c/code\u003e. We use comments to provide lightweight documentation or to hide code while we debug or test it.\u003c/p\u003e","frontPage":false},{"exportId":"getting-code-with-git","title":"Getting Code with Git","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"git-getting-code-phase-0\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/git-getting-code-phase-0/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-getting-code-phase-0\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-getting-code-phase-0/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCopy a repository to your local machine with \u003ccode\u003egit clone\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eList remotes with \u003ccode\u003egit remote\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eDuplicate other organizations' repositories into your own via GitHub with the \"Fork\" button\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eGit repositories let us create logged histories of the versions of the files\nwe \"track.\" Just think, right now, around the world people are using Git\nto track their projects: Star Trek Fan Fiction, resumes, Ruby Code, JavaScript\ncode, PhD theses, etc.\u003c/p\u003e\n\n\u003cp\u003eGit not only lets you track files in a local repo on your machine, you can \"share\"\nyour repo on the internet so that others can use your code. In this lesson\nwe'll discuss how to get others' repositories.\u003c/p\u003e\n\n\u003cp\u003eIn a later lesson we'll cover how to push \u003cem\u003eour\u003c/em\u003e locally-created repositories onto the\ninternet so that others can see our projects.\u003c/p\u003e\n\n\u003ch2\u003eCopy a Repository to Your Local Machine with \u003ccode\u003egit clone\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eWe use \u003ccode\u003egit clone\u003c/code\u003e to copy someone else's repo from the internet to our \u003cem\u003elocal\u003c/em\u003e machine.\nWe are not getting \u003cem\u003etheir\u003c/em\u003e repo from \u003cem\u003etheir\u003c/em\u003e local machine (that would be very creepy).\u003c/p\u003e\n\n\u003cp\u003eInstead, they must have\nalready \"mirrored\" their \u003cem\u003elocal\u003c/em\u003e repository onto the internet. In Git-speak we'd say\nthey would have had to have created a \u003cem\u003eremote repository\u003c/em\u003e: a copy of their local repository,\nbut on the internet. We'll be cloning that \u003cem\u003eremote repository\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's get the code for the popular ReactJS framework.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Navigate to the \u003ca href=\"https://github.com/facebook/react\"\u003ehttps://github.com/facebook/react\u003c/a\u003e repository.\u003c/li\u003e\n\u003cli\u003e Click the green \"Code\" button on the right.\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMake sure you select \u003ccode\u003eUse SSH\u003c/code\u003e as your URL type.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/git-clone-using-ssh.png\" width=\"400px\" alt=\"SSH Clone\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eClick the \"Copy to clipboard\" button (highlighted below). This will copy the\nURL for us to use when we clone.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/copy-clone-command-button.png\" alt=\"Copy command to clone repo button\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIn the terminal, run the \u003ccode\u003egit clone\u003c/code\u003e command. It takes the URL we just copied as an argument, like so:\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e$ git clone your-copied-github-url\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will create a \u003cem\u003elocal\u003c/em\u003e copy of the GitHub repository on our own machine.\u003c/p\u003e\n\n\u003ch2\u003eList Remotes with \u003ccode\u003egit remote\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eIf you use the \u003ccode\u003els\u003c/code\u003e command, you'll see Git created a directory called\n\u003ccode\u003ereact\u003c/code\u003e. Use \u003ccode\u003ecd\u003c/code\u003e to enter that directory.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ cd react\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eType \u003ccode\u003egit remote\u003c/code\u003e to see the names of each remote repository (or, \"remote\") available.\u003c/p\u003e\n\n\u003cp\u003eSince you cloned your repository, you should see a remote name called \u003ccode\u003eorigin\u003c/code\u003e. The remote\nname \u003ccode\u003eorigin\u003c/code\u003e is the default name Git gives to the remote you cloned from:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git remote\u003cbr\u003eorigin\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's prove that the \u003ccode\u003eorigin\u003c/code\u003e name has some relationship to the address GitHub gave us.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$  git remote show origin\u003cbr\u003e* remote origin\u003cbr\u003e  Fetch URL: git@github.com:facebook/react.git\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \"remote address\" \u003ccode\u003egit@github.com:facebook/react.git\u003c/code\u003e assigned to the\n\"remote name\" - \u003ccode\u003eorigin\u003c/code\u003e - is the same thing you copied from the\nGitHub web interface. This confirms that the \u003cem\u003eremote repository\u003c/em\u003e you\n\u003cem\u003ecloned\u003c/em\u003e automatically set up a \u003cem\u003eremote name\u003c/em\u003e called \u003ccode\u003eorigin\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDuplicate Other Organizations' Repositories into Your Own via GitHub with the \"Fork\" Button\u003c/h2\u003e\n\n\u003cp\u003eForking a GitHub repository is just a way to create a personal, online duplicate\nof it. When you fork a repository, GitHub creates a duplicate of that repository\nunder your control.\u003c/p\u003e\n\n\u003cp\u003eIf my GitHub username were \u003ccode\u003eoctocat\u003c/code\u003e and I \"forked\" \u003ccode\u003efacebook/react\u003c/code\u003e, GitHub would\ncopy the remote repository \u003ccode\u003efacebook/react\u003c/code\u003e and create it under my name as\n\u003ccode\u003eoctocat/react\u003c/code\u003e. It's making a copy of one \u003cem\u003eremote repository\u003c/em\u003e to a new \u003cem\u003eremote\nrepository\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIt's like saying \"Hey, can I have the Louvre's version of \u003cem\u003eThe Mona Lisa\u003c/em\u003e?\" The\nLouvre would say, \"No.\" If you were to create a perfect online duplicate by \u003cem\u003eforking\u003c/em\u003e\nit from \u003ccode\u003elouvre/mona_lisa\u003c/code\u003e to \u003ccode\u003eyour-name/mona_lisa\u003c/code\u003e, and then were to clone\nfrom \u003cem\u003ethat\u003c/em\u003e remote repository, then the Louvre can keep their copy and you can\nupdate your copy as you choose.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com/fork_button.jpg\" alt=\"Fork Button\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's try a \u003cem\u003efork\u003c/em\u003e and \u003cem\u003eclone\u003c/em\u003e workflow.\u003c/p\u003e\n\n\u003cp\u003eClick the GitHub \u003cstrong\u003eOctocat\u003c/strong\u003e icon at the top of this page:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/git-logo-gray.png\" alt=\"GitHub Octocat Icon\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis will bring you to the \"learn-co-curriculum\" version of this lesson. Click the\n'Fork' button in the upper right corner of the page. You will be prompted to\nchoose where the repository should be forked to, so go ahead and choose your\naccount. GitHub will take a few moments to create the fork, then navigate to\nyour copy of the repository. \u003c/p\u003e\n\n\u003cp\u003eIf all has gone well, you will see your username at\nthe top of the page, followed by a \u003ccode\u003e/\u003c/code\u003e and the name of the repository, along\nwith a link just below to the original repository. (\u003ca href=\"https://help.github.com/enterprise/2.2/user/articles/fork-a-repo/\"\u003eMore on forking in the GitHub docs\u003c/a\u003e.)\u003c/p\u003e\n\n\u003cp\u003eThe important take away is to \u003cstrong\u003enot\u003c/strong\u003e misuse the words \"fork\" and \"clone\" when speaking\nwith other Git users. To get a local copy: \u003cstrong\u003eclone\u003c/strong\u003e; to make an online copy of\na repository to your personal organization so that you have the ability to\nupdate its \u003ccode\u003emaster\u003c/code\u003e (or \u003ccode\u003emain\u003c/code\u003e) branch, \u003cstrong\u003efork\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2\u003eImportant Note for Assignments on Canvas\u003c/h2\u003e\n\n\u003cp\u003eAll Software Engineering lessons in Canvas will have an \u003cstrong\u003eOctocat\u003c/strong\u003e icon linking to a\nrepository of that lesson. Using the process discussed in this lesson, you can fork any\nlesson you'd like.\u003c/p\u003e\n\n\u003cp\u003eFor \u003cem\u003eassignments\u003c/em\u003e in Canvas, you will also see an additional \u003cstrong\u003eFork\u003c/strong\u003e button beside the \u003cstrong\u003eOctocat\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fork-link.png\" alt=\"fork button\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe encourage you to use this button when you see it to start the forking process. During this phase of\nthe course, the \u003cstrong\u003eFork\u003c/strong\u003e button in Canvas will do the same thing as clicking GitHub's \u003cstrong\u003eFork\u003c/strong\u003e button.\nLater on in the course, the Canvas \u003cstrong\u003eFork\u003c/strong\u003e button will behave differently as some assignment steps will \nbe automated.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eGitHub gives developers many ways to collaborate. Using GitHub's \"Fork\" button and \u003ccode\u003egit clone\u003c/code\u003e together allows you to make copies of others' code.\u003c/p\u003e\n\n\u003cp\u003eOften, the original authors will include license information regarding how you\ncan use their repository, so make sure to check before you publish, sell or\ndistribute any material you've forked, cloned and modified.\u003c/p\u003e","frontPage":false},{"exportId":"hosting-a-website-on-github-pages","title":"Hosting a Website on GitHub Pages","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"hosting-on-github-pages\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/hosting-on-github-pages\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/hosting-on-github-pages/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the earlier days of the internet, if you wanted to publish a custom website, your options were limited, and the process was often complicated. Hosting a site required registering a domain, paying a hosting service, then going through a trial and error process of uploading your website's files to that service.\u003c/p\u003e  \u003cp\u003eNow, things are a bit different. Hosting services are still around and you can still register custom domains, but there are many ways to publish websites online now, including a few ways that are totally free for basic websites.\u003c/p\u003e  \u003cp\u003eIn this lesson, we're going to walk through one free option for hosting HTML and JavaScript based websites. As it happens, we'll be using a service we're already familiar with — GitHub!\u003c/p\u003e  \u003ch2\u003eHosting on GitHub\u003c/h2\u003e  \u003cp\u003eAny repository on GitHub can be published as a website — even if the repo doesn't contain any HTML files. By default, GitHub will take a repository's \u003ccode\u003eREADME.md\u003c/code\u003e file and convert it to an HTML page. This lesson's repo, for instance, \u003ca href=\"https://learn-co-curriculum.github.io/hosting-on-github-pages/\"\u003eis also published as a GitHub Page\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eIn addition to this behavior, if we include an \u003ccode\u003eindex.html\u003c/code\u003e in the repository beside the \u003ccode\u003eREADME.md\u003c/code\u003e file, GitHub will automatically display the HTML file instead! This is how we'll be publishing our site.\u003c/p\u003e  \u003cp\u003eTo create and publish your own personal website, the overall process will be:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eCreate a local repository folder\u003c/li\u003e \u003cli\u003eCreate a remote GitHub repository\u003c/li\u003e \u003cli\u003eAdd the new remote to the local repository\u003c/li\u003e \u003cli\u003eCreate an \u003ccode\u003eindex.html\u003c/code\u003e file with some basic content\u003c/li\u003e \u003cli\u003eAdd, commit and push the new content to the remote\u003c/li\u003e \u003cli\u003eEnable GitHub Pages in the remote repository's settings\u003c/li\u003e \u003cli\u003eCheck out the published site\u003c/li\u003e \u003cli\u003eContinue building out the HTML and add CSS and JavaScript files\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eCreating a Local Repository Folder\u003c/h2\u003e  \u003cp\u003eIn the terminal, choose a good location to store your local repository and navigate to it.\u003c/p\u003e  \u003cp\u003eNext, choose a good name for your repo. Names are important. Once you've chosen, create a folder with \u003ccode\u003emkdir\u003c/code\u003e then \u003ccode\u003ecd\u003c/code\u003e into it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emkdir example-repository\u003cbr\u003ecd example-repository \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe'll come back to this folder in just a few moments. Next, we need to create a GitHub remote repository.\u003c/p\u003e  \u003ch2\u003eCreating a New GitHub Repository\u003c/h2\u003e  \u003cp\u003eTo create a new GitHub repository, go to \u003ca href=\"https://github.com/\"\u003ehttps://github.com/\u003c/a\u003e, click the \u003cstrong\u003e+\u003c/strong\u003e icon in the upper-right corner of the screen, and choose 'New repository' in the drop-down menu.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-new-repository-drop-down.png\" alt=\"new repo drop down\"\u003e\u003c/p\u003e  \u003cp\u003eThis will bring you to a page where you can set the new repository's name and other settings\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-new-repository-name.png\" alt=\"set new repo name\"\u003e\u003c/p\u003e  \u003cp\u003eChoose a good name. Names are important. Once the repository is given a name, we'll leave the other options as they are and click the \"Create Repository\" button.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-create-repository.png\" alt=\"create repo\"\u003e\u003c/p\u003e  \u003cp\u003eAn empty repository will be created.\u003c/p\u003e  \u003ch2\u003eAdd The New Remote To Your Local Repository\u003c/h2\u003e  \u003cp\u003eBecause it has no content, you'll be presented with a set of different options for getting things started. This time, we'll choose to \u003cstrong\u003ecreate a new repository on the command line\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-add-remote-repository.png\" alt=\"add remote repo\"\u003e\u003c/p\u003e  \u003cp\u003eNotice that some of the commands shown here have information unique to the repository and GitHub user. Your commands will differ slightly from the examples because of this.\u003c/p\u003e  \u003cp\u003eAll the commands we need to get set up are provided here. You can choose to copy and paste these commands from GitHub one at a time or copy and paste them all at once. We recommend you take a moment to review what each command does:\u003c/p\u003e  \u003cp\u003e1) \u003ccode\u003eecho \"# example-repository\" \u0026gt;\u0026gt; README.md\u003c/code\u003e creates a \u003ccode\u003eREADME.md\u003c/code\u003e file and    adds some markdown. 2) \u003ccode\u003egit init\u003c/code\u003e initializes a local repository in the folder you're currently in    on the command line 3) \u003ccode\u003egit add README.md\u003c/code\u003e stages the newly created \u003ccode\u003eREADME.md\u003c/code\u003e file, getting it    ready to be committed 4) \u003ccode\u003egit commit -m \"first commit\"\u003c/code\u003e creates the repository's first commit,    preserving the newly created \u003ccode\u003eREADME.md\u003c/code\u003e file in the history of the    repository 5) \u003ccode\u003egit branch -M main\u003c/code\u003e ensures the default repository branch is set to \u003ccode\u003emain\u003c/code\u003e 6) \u003ccode\u003egit remote add origin git@github...\u003c/code\u003e associates the remote GitHub repository    with the new local repository. This association is given the name \u003ccode\u003eorigin\u003c/code\u003e. 7) \u003ccode\u003egit push -u origin main\u003c/code\u003e pushes the commit we just created to the remote    repository.\u003c/p\u003e  \u003cp\u003eOnce all commands are executed, refresh your GitHub repository and you should see that the \u003ccode\u003eREADME.md\u003c/code\u003e file now appears on GitHub. With a repository set up, the next step is to create a basic HTML file to serve as the start of our website.\u003c/p\u003e  \u003ch2\u003eBuild an HTML file\u003c/h2\u003e  \u003cp\u003eIn the terminal, create an \u003ccode\u003eindex.html\u003c/code\u003e file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etouch index.html \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOpen this file in your text editor so we can add some basic HTML content. In the file, we'll start with the minimum — a \u003ccode\u003eDOCTYPE\u003c/code\u003e tag indicating HTML and an \u003ccode\u003ehtml\u003c/code\u003e tag containing \u003ccode\u003ehead\u003c/code\u003e and \u003ccode\u003ebody\u003c/code\u003e tags:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html lang=\"en\"\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's give this HTML a \u003ccode\u003etitle\u003c/code\u003e tag and place it inside \u003ccode\u003ehead\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;My Website\u0026lt;/title\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFinally, we'll add a bit of starter content in the \u003ccode\u003ebody\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIncluding some example text to start is important — when we publish the site, we'll be looking for this message to confirm everything worked. The completed file should look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html lang=\"en\"\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;My Website\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSave the file. We now need to commit this file and push it to GitHub:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add index.html\u003cbr\u003egit commit -m \"create basic HTML file\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTime to head back to GitHub!\u003c/p\u003e  \u003ch2\u003ePublish HTML as a GitHub Page\u003c/h2\u003e  \u003cp\u003eIn your GitHub repository, click the \u003cstrong\u003eSettings\u003c/strong\u003e tab:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-settings-tab.png\" alt=\"settings tab\"\u003e\u003c/p\u003e  \u003cp\u003eScroll through the settings until you find the \u003cstrong\u003eGitHub Pages\u003c/strong\u003e section:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-settings.png\" alt=\"settings\"\u003e\u003c/p\u003e  \u003cp\u003eTo enable GitHub Pages, first we need to set the \u003cstrong\u003eSource\u003c/strong\u003e to the default branch. Click the drop-down that says \"None,\" then choose \u003ccode\u003emain\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-select-branch.png\" alt=\"select branch\"\u003e\u003c/p\u003e  \u003cp\u003eOnce set, click \u003cstrong\u003eSave\u003c/strong\u003e:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-save-button.png\" alt=\"save button\"\u003e\u003c/p\u003e  \u003cp\u003eThe page will refresh. Along the top, a banner should appear that states the GitHub Page source was saved:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-source-saved.png\" alt=\"source saved\"\u003e\u003c/p\u003e  \u003cp\u003eScroll back to the \u003cstrong\u003eGitHub Page\u003c/strong\u003e settings. A new message will be present that includes a link to the newly published page:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-site-is-ready-to-be-published.png\" alt=\"site is ready to be published\"\u003e\u003c/p\u003e  \u003cp\u003eNotice the URL isn't \u003ccode\u003egithub.com/\u0026lt;your-username\u0026gt;\u003c/code\u003e, but instead, \u003ccode\u003e\u0026lt;your-username\u0026gt;.github.io\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eClicking on this link immediately may bring you to an error page. It can typically take up to ten minutes for the page to appear after being published, so wait a little bit and refresh. On refresh, you should see your HTML page rendered:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/github-pages-lesson/github-pages-published-site.png\" alt=\"site published on GitHub\"\u003e\u003c/p\u003e  \u003cp\u003eWoo-hoo!\u003c/p\u003e  \u003ch2\u003eTroubleshooting\u003c/h2\u003e  \u003cp\u003eIn the event that it isn't a woo-hoo for you, here are a few troubleshooting options to try:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eDouble check the GitHub Page settings and make sure \u003ccode\u003emain\u003c/code\u003e is set as the source\u003c/li\u003e \u003cli\u003eIf settings are correct, review the \u003ccode\u003eindex.html\u003c/code\u003e file to make sure there are no typos or syntax errors\u003c/li\u003e \u003cli\u003eCreate a new repository again, but hold off on creating an HTML file. Instead, only create a \u003ccode\u003eREADME.md\u003c/code\u003e file with some example text and use GitHub Pages to publish the repo. Once the Readme file is displaying as a GitHub Page, start going through the HTML file creation process again.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eContinuing To Build\u003c/h2\u003e  \u003cp\u003eWith an \u003ccode\u003eindex.html\u003c/code\u003e file created, it is possible to add additional files to the site to incorporate CSS and JavaScript. One of the great things about GitHub Pages is that your published website will automatically update as you make changes to the repository files and push them to your remote. The process for updating becomes:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eCreate or modify a file\u003c/li\u003e \u003cli\u003eAdd, commit, and push it to your remote\u003c/li\u003e \u003cli\u003eWait a few minutes for GitHub to update your page\u003c/li\u003e \u003cli\u003eVisit your GitHub Page to see the newest changes\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eFrom here, you can choose to do whatever you like and customize your site as you please. However, we recommend adding and connecting two files now: a CSS file to style your HTML, and a JavaScript file to run code and manipulate the DOM.\u003c/p\u003e  \u003ch3\u003eAdd and Connect a CSS File\u003c/h3\u003e  \u003cp\u003eIn the terminal, create a CSS file alongside your \u003ccode\u003eindex.html\u003c/code\u003e file\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etouch style.css \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBefore we connect this file to our HTML, let's add a basic style rule to the file and save it so we'll know when the styling is working.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ebody {\u003cbr\u003e  background: blue;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, to connect this CSS file to our \u003ccode\u003eindex.html\u003c/code\u003e, we need to modify the HTML \u003ccode\u003ehead\u003c/code\u003e to include a \u003ccode\u003elink\u003c/code\u003e tag:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;link rel=\"stylesheet\" href=\"style.css\"\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;My Website\u0026lt;/title\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003elink\u003c/code\u003e tag is used to connect files to the HTML page. Note the tag has two atttributes. The first is \u003ccode\u003erel\u003c/code\u003e, which specifies how the connected file relates to the HTML. In this case, we're indicating that we're relating a \u003cem\u003estylesheet\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eThe second attribute is \u003ccode\u003ehref\u003c/code\u003e, which specifies the location of the file we're linking. Since we've put \u003ccode\u003estyle.css\u003c/code\u003e right beside \u003ccode\u003eindex.html\u003c/code\u003e in our repository, we can just provide the file name here.\u003c/p\u003e  \u003cp\u003eSave the HTML file and open it locally. Your page should now be very blue.\u003c/p\u003e  \u003cp\u003eGo ahead and add some better styling, then add, commit, and push the changes you've made. Remember, since you've added a \u003ccode\u003estyle.css\u003c/code\u003e file and modified the \u003ccode\u003eindex.html\u003c/code\u003e file, we'll need to add both files before committing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add style.css\u003cbr\u003egit add index.html\u003cbr\u003egit commit -m \"add style.css, connect to index.html\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eAdd and Connect a JavaScript File\u003c/h3\u003e  \u003cp\u003eIn the terminal, create a JS file alongside \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etouch script.js \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's add some basic code so we can see something once we've connected the JS file to our HTML file.\u003c/p\u003e  \u003cp\u003eIn \u003ccode\u003escript.js\u003c/code\u003e, let's create an \u003ccode\u003eh2\u003c/code\u003e element and add some text content to it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst h2 = document.createElement('h2');\u003cbr\u003eh2.textContent = \"This content added by JavaScript\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we'll include code to add this \u003ccode\u003eh2\u003c/code\u003e element to the \u003ccode\u003ebody\u003c/code\u003e element in the DOM.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.querySelector('body').appendChild(h2); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSave this and switch over to \u003ccode\u003eindex.html\u003c/code\u003e. To connect \u003ccode\u003escript.js\u003c/code\u003e to our HTML, we add a \u003ccode\u003escript\u003c/code\u003e tag inside \u003ccode\u003ebody\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;script src=\"script.js\"\u0026gt;\u0026lt;/script\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis tag includes a \u003ccode\u003esrc\u003c/code\u003e attribute. Like \u003ccode\u003ehref\u003c/code\u003e from the \u003ccode\u003elink\u003c/code\u003e tag, \u003ccode\u003esrc\u003c/code\u003e specifies the location of the script we want to run. Since \u003ccode\u003escript.js\u003c/code\u003e is side by side with \u003ccode\u003eindex.html\u003c/code\u003e, we just write the file name.\u003c/p\u003e  \u003cp\u003eAfter adding the \u003ccode\u003escript\u003c/code\u003e tag for JavaScript and the \u003ccode\u003elink\u003c/code\u003e tag for CSS, our HTML will look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html lang=\"en\"\u0026gt;\u003cbr\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;link rel=\"stylesheet\" href=\"style.css\"\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;My Website\u0026lt;/title\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt;\u003cbr\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;script src=\"script.js\"\u0026gt;\u0026lt;/script\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOpen the file locally. In addition to \"Hello World!\" being displayed, you should also see \"This content added by JavaScript,\" confirming the code successfully ran.\u003c/p\u003e  \u003cp\u003eGo ahead and add other JavaScript if you'd like, then add, commit, and push the changes you've made. Since you've added a \u003ccode\u003escript.js\u003c/code\u003e file and modified the \u003ccode\u003eindex.html\u003c/code\u003e file, we'll need to add both files before committing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add script.js\u003cbr\u003egit add index.html\u003cbr\u003egit commit -m \"add script.js, connect to index.html\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRemember when you push changes to GitHub, they will take a few moments to appear in GitHub Pages.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eAs it turns out, the technology we were already using to store our code is also useful for publishing websites. If you have any existing repositories that include HTML, you can now quickly turn your work there into shareable websites.\u003c/p\u003e  \u003cp\u003eIt makes sense if you consider GitHub is \u003cem\u003ealready\u003c/em\u003e storing your code. The work required to display the contents of an HTML file in your browser versus \u003cem\u003erender\u003c/em\u003e that HTML file is similar.\u003c/p\u003e  \u003cp\u003eAs you continue your programming journey, you'll eventually start building parts of websites that can't be published using GitHub. Sites that require a server to store data, for instance, can't be published on GitHub Pages. GitHub is just rendering files it already has; it won't do more work than that. It turns out, that is actually quite a lot, though.\u003c/p\u003e  \u003cp\u003eMany websites are made up of two pieces, a frontend and a backend. The frontend is what the client experiences, what renders in the browser, while the backend handles data storage and other work we don't want to burden the frontend with. GitHub Pages will work well as a host for most frontends, even those using modern frameworks like React. You'll soon see that frontends alone can actually be quite interesting and useful, even without a backend.\u003c/p\u003e  \u003cp\u003eFor simpler websites — personal sites, projects, etc... — GitHub pages is a great, free option for publishing content online.\u003c/p\u003e","frontPage":false},{"exportId":"a-quick-tour-of-the-web","title":"A Quick Tour of the Web","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-basics-quick-tour-of-the-web\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/html-basics-quick-tour-of-the-web/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-quick-tour-of-the-web\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-quick-tour-of-the-web/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDefine \"internet\"\u003c/li\u003e\n\u003cli\u003eDefine \"server\" role\u003c/li\u003e\n\u003cli\u003eDefine \"client\" role\u003c/li\u003e\n\u003cli\u003eIdentify which role possesses the data that browsers display\u003c/li\u003e\n\u003cli\u003eIdentify what type of content defines what's seen in browsers\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eWelcome to the web, the largest canvas in the world. Roughly 40% of the world's population has access to the web. Never before has it been possible to reach so many across such vast distances!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10A.png\" alt=\"Welcome to the Web!\"\u003e\u003c/p\u003e\n\u003cp\u003eTo orient you in these first steps of your study of HTML and web programming we want to give a broad overview of the web and how it works in the broadest terms. While you might have heard \"web,\" and \"internet\" and \"server\" in many different contexts and places over the years, it's possible that you've never built a cohesive model in your mind that connects those concepts.\u003c/p\u003e\n\u003cp\u003eIn this lesson, we'll go over the essential steps in how the web works.\u003c/p\u003e\n\u003ch2\u003eDefine \"internet\"\u003c/h2\u003e\n\u003cp\u003eWhen people share information, great things can happen. Politics can change. Our place in the universe can change. Disease can be conquered. The ability to share knowledge is \u003cem\u003epower\u003c/em\u003e. In the earliest days of computing, engineers looked for ways to have computers share information. Technical limits meant networked computers had to be within the same office.\u003c/p\u003e\n\u003cp\u003eEventually, improvements allowed small networks to \"inter\"-\"network\" with each other. This discipline was called \"internetworking.\" By the technology and knowledge of \"internetworking,\" these small local networks (or, \"local area networks\" or LANs) became \"internetworked\" into \"Wide Area Networks\" or WANs.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_18_VisualInternet.png\" alt=\"Visual Internet\"\u003e\u003c/p\u003e\n\u003cp\u003eThe natural next dream was to \"internetwork\" WANs into some sort of \"larger\" inter-network, something city-scale, country-scale, or global scale. Technology for \"inter-networking\" WANs was difficult and slow to develop, but eventually produced a backbone internetwork, \"\u003cstrong\u003eThe Internet\u003c/strong\u003ework\" which encompassed all of its constituent WANs and their constituent LANs. Eventually, in common usage, it became called \"The Internet.\"\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10B.png\" alt=\"The internet\"\u003e\u003c/p\u003e\n\u003cp\u003eIt was upon \u003cem\u003ethis\u003c/em\u003e \"The Internet\" that \"The Web\" was built.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e For many reasons, style guides no longer capitalize \"internet\" or \"web.\" The global network linking computers globally is \"the internet.\"\u003c/p\u003e\n\u003ch2\u003eDefine \"server\" Role\u003c/h2\u003e\n\u003cp\u003eAll machines on the internet are computers. For ease of discussion, we're going to discuss them in two \"roles:\" client and server. Historically a \"server\" would be a larger, more powerful computer with more memory, bigger hard drives, and more computer chips. But today, \"server\" roles can be handled quite well by Arduino devices no bigger than a credit card! Nevertheless, in diagrams and on whiteboards they tend to be drawn as large \"tower-style\" computers.\u003c/p\u003e\n\u003cp\u003eRegardless of its size, a \"server\" has the responsibility of arranging the data that is presented to the \"client.\" It's because of this \"arranging\" being computationally demanding that servers have tended to have extra resources.\u003c/p\u003e\n\u003cp\u003eHistorically, computers were very expensive and well-appointed servers were very, very expensive. As such, when possible, it was more economical for servers to do heavy processing and for the clients to request updates.\u003c/p\u003e\n\u003ch2\u003eDefine \"client\" Role\u003c/h2\u003e\n\u003cp\u003eA computer fulfilling a client role has the responsibility of presenting the data that is sent from the server. Historically, these machines could be more lightly equipped (and thus cheaper). You'll generally see them drawn in diagrams or on whiteboards as laptops.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003eclient\u003c/em\u003e displays data that is provided to it by the \u003cem\u003eserver\u003c/em\u003e. A verb that's commonly used is \"render\" as in, \"The client \u003cem\u003erenders\u003c/em\u003e data provided by the server.\" That is, it only displays the server's data and any change to the data has to be done \u003cem\u003eby the server\u003c/em\u003e, caused by a \u003cem\u003erequest\u003c/em\u003e from the \u003cem\u003eclient\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_19_BasicClientServer.png\" alt=\"Client/Server Role\"\u003e\u003c/p\u003e\n\u003ch2\u003eClient/Server Example\u003c/h2\u003e\n\u003cp\u003eLet's take a moment to consider client/server in a common scenario: the supermarket.\u003c/p\u003e\n\u003cp\u003eIf you ask the cashier for the price of a bottle of water, they can look it up for you. But their client computer's \"source of truth\" on the price lives on the server. The \u003cem\u003eclient\u003c/em\u003e must request this information by \"asking\" or \"sending a request\" to the \u003cem\u003eserver\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eSimilarly, when you buy that bottle of water, the (lightweight) client says \"Sold a bottle of water!\" to a server. The server, in turn, updates its inventory record to show \u003ccode\u003e-1\u003c/code\u003e water bottle.\u003c/p\u003e\n\u003cp\u003eNow, at the end of the sales day, the management team would like to do some analytics about how profitable they were that day. They \u003cem\u003ecould\u003c/em\u003e go to each client computer, determine its revenue for the day and which departments contributed to that number, but on a cheap client machine that process would be s..l...o.....w — like trying to play a PS4 game on an iPhone!\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eHowever\u003c/em\u003e, if each client computer merely logged its actions to the server by sending requests, the management could ask that high-power machine to print out analytics in an economical and efficient fashion. Many businesses still have their IT architecture on this model, known as \"the client/server\" model.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10C_ClientServerExample.png\" alt=\"Client/Server Illustration\"\u003e\u003c/p\u003e\n\u003ch2\u003eIdentify Which Role Possesses the Data That Browsers Display\u003c/h2\u003e\n\u003cp\u003eThe web was developed with a client/server model. Home PCs were relatively underpowered (like our checkstands) \u003cem\u003eclients\u003c/em\u003e and web content sharing programs were installed on high-power \u003cem\u003eservers\u003c/em\u003e. Thus web \u003cem\u003eclients\u003c/em\u003e running \u003cem\u003ebrowser\u003c/em\u003e software were created that would send a \u003cem\u003erequest\u003c/em\u003e for a web page and the server would return the web page.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_81_WebAppStack.png\" alt=\"Web Application Stack\"\u003e\u003c/p\u003e\n\u003cp\u003eThe specification on how \u003cem\u003eclients\u003c/em\u003e and \u003cem\u003eservers\u003c/em\u003e interact is called HTTP (HyperText Transfer Protocol). This is why URLs start with \u003ccode\u003ehttp://\u003c/code\u003e: you're telling the browser: \"Browser, act as a client and use the HTTP standard to talk to \u003ccode\u003eflatironschool.com\u003c/code\u003e and find a file called \u003ccode\u003eindex.html\u003c/code\u003e.\" The browser expresses this wish by transmitting a message that looks like:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eGET flatironschool.com /index.html\u003c/code\u003e \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10D_BrowserClientInteraction.png\" alt=\"Browser as Client Illustration\"\u003e\u003c/p\u003e\n\u003cp\u003eHere it asks \u003ccode\u003eflatironschool.com\u003c/code\u003e for an HTML file called \u003ccode\u003eindex\u003c/code\u003e. We'll explore this \u003cem\u003emuch\u003c/em\u003e more in subsequent lessons!\u003c/p\u003e\n\u003cp\u003eIn return, the \u003cem\u003eserver\u003c/em\u003e returns... HTML that's contained in the \u003ccode\u003eindex.html\u003c/code\u003e file.\u003c/p\u003e\n\u003ch2\u003eIdentify What Type of Content Defines What's Seen in Browsers\u003c/h2\u003e\n\u003cp\u003eHaving been told which file on \u003cem\u003eits\u003c/em\u003e hard drive to consult, the web \u003cem\u003eserver\u003c/em\u003e takes the contents of a file, pushes them across the internet \u003cem\u003eback\u003c/em\u003e to the \u003cem\u003eclient\u003c/em\u003e. The client then receives the raw HTML. It looks something like this:\u003c/p\u003e\n\u003cpre\u003e\u003cspan class=\"pl-c1\"\u003e\u0026lt;!DOCTYPE html\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ehtml\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003elang\u003c/span\u003e=\"\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003ehead\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etitle\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003eHome | The Metropolitan Museum of Art\u003cspan class=\"pl-kos\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003etitle\u003c/span\u003e\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003emeta\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003echarset\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eUTF-8\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003emeta\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eviewport\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003econtent\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ewidth=device-width, initial-scale=1.0\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003emeta\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003etitle\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003econtent\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eHome\u003c/span\u003e\" /\u0026gt;\n        \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003emeta\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003ekeywords\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003econtent\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eMetropolitan Museum, Met, Metropolitan Museum of Art, Met Museum, Metropolitan\u003c/span\u003e\" /\u0026gt;\n        \u003cspan class=\"pl-kos\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"pl-ent\"\u003emeta\u003c/span\u003e \u003cspan class=\"pl-c1\"\u003ename\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003edescription\u003c/span\u003e\" \u003cspan class=\"pl-c1\"\u003econtent\u003c/span\u003e=\"\u003cspan class=\"pl-s\"\u003eThe Metropolitan Museum of Art is a...\u003c/span\u003e\"\u003cspan class=\"pl-kos\"\u003e\u0026gt;\u003c/span\u003e\n        ...\u003c/pre\u003e\n\u003cp\u003eObviously, this is \u003cem\u003enot\u003c/em\u003e what you see when you visit \u003ca href=\"http://www.metmuseum.org\"\u003ehttp://www.metmuseum.org\u003c/a\u003e. The difference hinges on that special verb \u003cem\u003erender\u003c/em\u003e. Your \u003cem\u003eclient's\u003c/em\u003e browser \u003cem\u003erenders\u003c/em\u003e the \"raw\" HTML and turns it into something \u003cem\u003ehumans\u003c/em\u003e find nice to read.\u003c/p\u003e\n\u003cp\u003eAnd this is the essence of how the web works!\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn conclusion, we've talked about the history of the word \u003cem\u003einternet\u003c/em\u003e and how it connects computers fulfilling \u003cem\u003eclient\u003c/em\u003e and \u003cem\u003eserver\u003c/em\u003e roles. We've identified that \u003cem\u003eclient\u003c/em\u003e machines use web browsers to make \u003cem\u003erequests\u003c/em\u003e of the \u003cem\u003eserver\u003c/em\u003e, according to the HTTP standard, and \u003cem\u003eserver\u003c/em\u003e return HTML data, stored on their hard drives in files \u003cem\u003eback\u003c/em\u003e to the requesting \u003cem\u003eclient\u003c/em\u003e. The \u003cem\u003eclient\u003c/em\u003e machine, running browser software, then converts that raw HTML data into a \u003cem\u003erendered\u003c/em\u003e format which is what you experience as a web page.\u003c/p\u003e\n\u003cp\u003eAs a summarizing video, we've provided the following video of our dean, Avi Flombaum, giving a short introduction to the web. If you are only interested in building web pages, you can stop at 3:48; if you are studying a web programming technology e.g. Ruby or JavaScript, we recommend watching the entire video.\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.youtube.com/embed/7AS96jRnquI?rel=0\u0026amp;modestbranding=1\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=7AS96jRnquI\"\u003eThe Web in a Nutshell\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.google.com/presentation/d/1m6SPR13MdfF7YRhfx7HtvkOmFnrRyVQOEFgWhI8Bc0I/edit?usp=sharing\"\u003eSlides\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/World_Wide_Web\"\u003eWorld Wide Web - Wikipedia\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics\"\u003eHTML basics - Mozilla Developer Network\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\"\u003eAn overview of HTTP - Mozilla Developer Network\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://noahveltman.com/static-dynamic/\"\u003eStatic vs Dynamic\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Client%E2%80%93server_model\"\u003eClient Server Model - Wikipedia\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"mac-git-and-github-configuration","title":"Mac Git And Github Configuration","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-git-github\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-git-github\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-git-github/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eInstall \u003ccode\u003egit\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eGit generally comes pre-installed with most operating systems, but you can check by running \u003ccode\u003egit version\u003c/code\u003e in the terminal. If this gives you an error or does not come back with a version number, you'll need to install Git. You can install it using Homebrew.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ebrew install git\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e \u003cli\u003eReopen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit version\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/6uqtJKuqbrU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you see a message starting with \"git version...\", continue below.\u003c/p\u003e  \u003ch2\u003eCreate a GitHub Account\u003c/h2\u003e  \u003cp\u003eTo work on and get credit for the labs and lessons that you work on during the program, you will need to sign up for a GitHub account \u003cem\u003eif you don’t already have one\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/w-U97mW2XvI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003col\u003e \u003cli\u003eOpen the \u003ca href=\"https://github.com/join\"\u003eGitHub signup webpage\u003c/a\u003e (\u003ca href=\"https://github.com/join\"\u003ehttps://github.com/join\u003c/a\u003e)\u003c/li\u003e \u003cli\u003eFill out the form and create your account\u003c/li\u003e \u003cli\u003eVerify the email address connected to your GitHub account\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003cp\u003eIf you were able to verify your email address, continue below.\u003c/p\u003e  \u003ch2\u003eConfigure Git and GitHub\u003c/h2\u003e  \u003cp\u003eGit is the tool that we’ll use to download and upload the work that we do in labs and lessons. To use Git without signing in every time, you can create a Secure Shell (SSH) key and associate that to your GitHub account. Lastly, you will want to run a few commands to make sure that when you use Git, you get the proper credit for your work. This step will ask you to do work both in your browser and your terminal.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global color.ui true\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global user.name\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + your name and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: this should be your full name, not your GitHub username, in quotes.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global user.email\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + the email address you used to sign up to GitHub and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global init.defaultBranch main\u003c/code\u003e to \u003ca href=\"https://github.com/github/renaming\"\u003eupdate the default branch name\u003c/a\u003e to \u003ccode\u003emain\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003essh-keygen\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eFor each prompt \u003cstrong\u003edo not type anything\u003c/strong\u003e, just continue to press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecat ~/.ssh/id_rsa.pub | pbcopy\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. This will copy your SSH key to your clipboard\u003c/li\u003e \u003cli\u003eOpen the \u003ca href=\"https://github.com/settings/ssh/new\"\u003eGitHub New SSH key form\u003c/a\u003e (\u003ca href=\"https://github.com/settings/ssh/new\"\u003ehttps://github.com/settings/ssh/new\u003c/a\u003e) \u003cem\u003e(Note: you need to be logged in to GitHub to access that link.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eType \"My personal Mac\" in the \"Title\" input field\u003c/li\u003e \u003cli\u003ePaste what’s on your clipboard from step seven in the \"Key\" input field\u003c/li\u003e \u003cli\u003eClick \"Add SSH Key\"\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tvzcHODIIhQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you see your new SSH key beneath the \"SSH keys\" heading, continue to the next lesson, \u003cstrong\u003eVerify and Troubleshoot Your Environment Setup on macOS\u003c/strong\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"objects","title":"Objects","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-objects-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003col\u003e \u003cli\u003eIdentify JavaScript \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e \u003cli\u003eAccess a value stored in an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eLearn about JavaScript's Object methods\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWhile \u003ccode\u003eArray\u003c/code\u003es are great for representing simple, ordered data sets, they're generally not so great at modeling a more complex structure. For that, we need \u003ccode\u003eObject\u003c/code\u003es. In this lesson, we'll begin to learn about \u003ccode\u003eObject\u003c/code\u003es, specifically, what they are, how to create them, and how to access values stored in them. In the next lesson, we'll learn how to modify \u003ccode\u003eObject\u003c/code\u003es, both destructively and nondestructively.\u003c/p\u003e  \u003cp\u003eBe sure to follow along with the examples in this lesson in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: You may have heard about or be familiar with the concept of \u003cem\u003eobject-oriented programming\u003c/em\u003e. Un-helpfully JavaScript called this thing with curly braces (\u003ccode\u003e{}\u003c/code\u003e) an \u003ccode\u003eObject\u003c/code\u003e, but it is not related to object orientation. There was initially no thought that JavaScript would ever need to accommodate object-oriented programming but as it grew in popularity, the ability to use object orientation was added to the language. A JavaScript \u003ccode\u003eObject\u003c/code\u003e, however, is a \u003cem\u003edata structure\u003c/em\u003e consisting of \u003ccode\u003ekey\u003c/code\u003es and \u003ccode\u003evalue\u003c/code\u003es, similar to Ruby's \u003ccode\u003eHash\u003c/code\u003e, Python's \u003ccode\u003eDictionary\u003c/code\u003e or C-like languages' \u003ccode\u003estruct\u003c/code\u003e(ure). It is important not to confuse the two.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eIdentify JavaScript Objects\u003c/h2\u003e  \u003cp\u003eLet's think about how we could represent a company's address in JavaScript. Addresses are made up of words and numbers, so at first it might make sense to store the address as a string:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = '11 Broadway, 2nd Floor, New York, NY 10004'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat looks decent enough, but what happens if the company moves to a different floor in the same building? We just need to modify one piece of the address, but with a string we'd have to involve some pretty complicated find-and-replace pattern matching or replace the entire thing. Instead, let's throw the different pieces of the address into an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = ['11 Broadway', '2nd Floor', 'New York', 'NY', '10004']; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we can just grab the small piece that we want to update and leave the rest as is:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress[1] = '3rd Floor';\u003cbr\u003e\u003cbr\u003eaddress;\u003cbr\u003e//=\u0026gt; [\"11 Broadway\", \"3rd Floor\", \"New York\", \"NY\", \"10004\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis seems like a better solution, but it still has its drawbacks. Namely, \u003ccode\u003eaddress[1]\u003c/code\u003e is a \u003cstrong\u003eterrible\u003c/strong\u003e way to refer to the second line of an address. What if there is no second line, e.g., \u003ccode\u003e['11 Broadway', 'New York', 'NY', '10004']\u003c/code\u003e? Then \u003ccode\u003eaddress[1]\u003c/code\u003e will contain the city name instead of the floor number.\u003c/p\u003e  \u003cp\u003eWe could standardize it, putting an empty string in \u003ccode\u003eaddress[1]\u003c/code\u003e if there's no second line in the address, but it's still poorly named. \u003ccode\u003eaddress[1]\u003c/code\u003e offers very little insight into what data we should expect to find in there. It's a part of an address, sure, but which part?\u003c/p\u003e  \u003cp\u003eTo get around this, we could store the individual pieces of the address in separate, appropriately-named variables:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst street1 = '11 Broadway';\u003cbr\u003econst street2 = '2nd Floor';\u003cbr\u003econst city = 'New York';\u003cbr\u003econst state = 'NY';\u003cbr\u003econst zipCode = '10004'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat's solved one issue but reintroduced the same problem we tackled in the lesson on \u003ccode\u003eArray\u003c/code\u003es: storing pieces of related data in a bunch of unrelated variables is not a great idea! If only there were a best-of-both-worlds solution —\u0026nbsp;a way to store all of our address information in a single data structure while also maintaining a descriptive naming scheme. The data structure we're after here is the \u003cstrong\u003e\u003cem\u003e\u003ccode\u003eObject\u003c/code\u003e\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003ch3\u003eWhat Is an Object?\u003c/h3\u003e  \u003cp\u003eLike \u003ccode\u003eArray\u003c/code\u003es, JavaScript \u003ccode\u003eObject\u003c/code\u003es are collections of data. They consist of a list of \u003cem\u003eproperties\u003c/em\u003e (\u003cem\u003ekey-value pairs\u003c/em\u003e) bounded by curly braces (\u003ccode\u003e{ }\u003c/code\u003e). The properties can point to values of any data type —\u0026nbsp;even other \u003ccode\u003eObject\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eWe can have empty \u003ccode\u003eObject\u003c/code\u003es:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOr \u003ccode\u003eObject\u003c/code\u003es with a single property:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{ key: value } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we have to represent multiple properties in the same \u003ccode\u003eObject\u003c/code\u003e (which is most of the time), we use commas to separate them:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  key1: value1,\u003cbr\u003e  key2: value2\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can also have nested \u003ccode\u003eObject\u003c/code\u003es, in which the values associated with one or more of the keys is another \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  key1: value1,\u003cbr\u003e  key2: {\u003cbr\u003e    innerKey1: innerValue1,\u003cbr\u003e    innerKey2: innerValue2\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThere is no limit to how deeply nested our \u003ccode\u003eObject\u003c/code\u003es can be.\u003c/p\u003e  \u003cp\u003eFor a real example, let's define our address as an \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street: {\u003cbr\u003e    line1: '11 Broadway',\u003cbr\u003e    line2: '2nd Floor'\u003cbr\u003e  },\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: '10004'\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we're defining \u003ccode\u003eaddress\u003c/code\u003e using \u003ccode\u003eObject\u003c/code\u003e literal syntax: literally typing out the \u003ccode\u003eObject\u003c/code\u003e inside the \u003ccode\u003e{}\u003c/code\u003e. Our address \u003ccode\u003eObject\u003c/code\u003e has four keys: street, city, state, and zipCode. The first key points to another \u003ccode\u003eObject\u003c/code\u003e which itself has two keys: line1 and line2. Note that there's a comma between each key-value pair in both the top-level \u003ccode\u003eObject\u003c/code\u003e and the nested \u003ccode\u003eObject\u003c/code\u003e. Practice creating an object in the REPL; then try leaving out a comma to see what happens.\u003c/p\u003e  \u003cp\u003eMultiple properties can have the same value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst meals = {\u003cbr\u003e  breakfast: 'Avocado toast',\u003cbr\u003e  lunch: 'Avocado toast',\u003cbr\u003e  dinner: 'Avocado toast'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals.breakfast;\u003cbr\u003e// =\u0026gt; \"Avocado toast\"\u003cbr\u003e\u003cbr\u003emeals.dinner;\u003cbr\u003e// =\u0026gt; \"Avocado toast\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut keys must be unique. If the same key is used for multiple properties, only the final value will be retained.\u0026nbsp;The rest will be overwritten:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst meals = {\u003cbr\u003e  breakfast: 'Avocado toast',\u003cbr\u003e  breakfast: 'Oatmeal',\u003cbr\u003e  breakfast: 'Scrambled eggs'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals;\u003cbr\u003e// =\u0026gt; { breakfast: \"Scrambled eggs\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe real data in an \u003ccode\u003eObject\u003c/code\u003e is stored in the \u003cem\u003evalue\u003c/em\u003e half of the key-value pairings. The \u003cem\u003ekey\u003c/em\u003e is what lets us access that value. In the same way we use \u003cem\u003eidentifiers\u003c/em\u003e to name variables and functions, inside an \u003ccode\u003eObject\u003c/code\u003e we assign each value a key. We can then refer to that key and the JavaScript engine knows exactly which value we're trying to access.\u003c/p\u003e  \u003ch2\u003eAccess a Value Stored in an Object\u003c/h2\u003e  \u003cp\u003eWe access an \u003ccode\u003eObject\u003c/code\u003e stored in a variable in the same way we access any variable's value: by typing the variable name. Then, to access one of the values \u003cem\u003einside\u003c/em\u003e our \u003ccode\u003eObject\u003c/code\u003e, we add a reference to the key associated with the value we want; we can do that using either \u003cem\u003edot notation\u003c/em\u003e or \u003cem\u003ebracket notation\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003eDot Notation\u003c/h3\u003e  \u003cp\u003eWith \u003cem\u003edot notation\u003c/em\u003e, we use the \u003cem\u003emember access operator\u003c/em\u003e (a single period) to access values in an \u003ccode\u003eObject\u003c/code\u003e. For example, we can grab the individual pieces of our address, above, as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.street;\u003cbr\u003e//=\u0026gt; { line1: \"11 Broadway\", line2: \"2nd Floor\" }\u003cbr\u003e\u003cbr\u003eaddress.city;\u003cbr\u003e//=\u0026gt; \"New York\"\u003cbr\u003e\u003cbr\u003eaddress.state;\u003cbr\u003e//=\u0026gt; \"NY\"\u003cbr\u003e\u003cbr\u003eaddress.zipCode;\u003cbr\u003e//=\u0026gt; \"10004\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen to access a value inside \u003ccode\u003eaddress.street\u003c/code\u003e, we simply append the inner key, again using dot notation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.street.line1;\u003cbr\u003e//=\u0026gt; \"11 Broadway\"\u003cbr\u003e\u003cbr\u003eaddress.street.line2;\u003cbr\u003e//=\u0026gt; \"2nd Floor\" \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You might initially think we should use \u003ccode\u003eaddress.line1\u003c/code\u003e to access the value associated with the \u003ccode\u003eline1\u003c/code\u003e key, but \u003ccode\u003eaddress\u003c/code\u003e and \u003ccode\u003eaddress.street\u003c/code\u003e are \u003cem\u003eseparate\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003es. \u003ccode\u003eaddress.street\u003c/code\u003e is the \u003cem\u003eidentifier\u003c/em\u003e for the nested \u003ccode\u003eObject\u003c/code\u003e — the one that contains the \u003ccode\u003eline1\u003c/code\u003e key — and we can use dot notation on that just the same as on the top-level \u003ccode\u003eObject\u003c/code\u003e, \u003ccode\u003eaddress\u003c/code\u003e. Experiment in the REPL to make sure you understand how it works.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eDot notation is fantastic for readability, as we can just reference the bare key name (e.g., \u003ccode\u003estreet\u003c/code\u003e or \u003ccode\u003ezipCode\u003c/code\u003e). Because of this simple syntax, it should be your go-to strategy for accessing the properties of an \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Most people just call it \u003cem\u003edot notation\u003c/em\u003e or the \u003cem\u003edot operator\u003c/em\u003e, so don't worry too much about remembering the term \u003cem\u003emember access operator\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch4\u003eAccessing Nonexistent Properties\u003c/h4\u003e  \u003cp\u003eIf we try to access the \u003ccode\u003ecountry\u003c/code\u003e property of our \u003ccode\u003eaddress\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e, what will happen?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.country;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt returns \u003ccode\u003eundefined\u003c/code\u003e because there is no matching key on the \u003ccode\u003eObject\u003c/code\u003e. JavaScript is too nice to throw an error, so it lets us down gently. Keep one thing in mind, though: if you're seeing \u003ccode\u003eundefined\u003c/code\u003e when trying to access an \u003ccode\u003eObject\u003c/code\u003e's properties, you should recheck which properties exist on the \u003ccode\u003eObject\u003c/code\u003e (along with your spelling and capitalization)!\u003c/p\u003e  \u003ch3\u003eBracket Notation\u003c/h3\u003e  \u003cp\u003eWith \u003cem\u003ebracket notation\u003c/em\u003e, we use the \u003cem\u003ecomputed member access operator\u003c/em\u003e, which, recall from the lesson on \u003ccode\u003eArray\u003c/code\u003es, is a pair of square brackets (\u003ccode\u003e[]\u003c/code\u003e). To access the same properties as above, we need to represent them as strings inside the operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress['street'];\u003cbr\u003e//=\u0026gt; { line1: \"11 Broadway\", line2: \"2nd Floor\" }\u003cbr\u003e\u003cbr\u003eaddress['street']['line1'];\u003cbr\u003e//=\u0026gt; \"11 Broadway\"\u003cbr\u003e\u003cbr\u003eaddress['street']['line2'];\u003cbr\u003e//=\u0026gt; \"2nd Floor\"\u003cbr\u003e\u003cbr\u003eaddress['city'];\u003cbr\u003e//=\u0026gt; \"New York\"\u003cbr\u003e\u003cbr\u003eaddress['state'];\u003cbr\u003e//=\u0026gt; \"NY\"\u003cbr\u003e\u003cbr\u003eaddress['zipCode'];\u003cbr\u003e//=\u0026gt; \"10004\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBracket notation is a bit harder to read than dot notation, so we always default to the latter. However, there are two main situations in which we need to use bracket notation.\u003c/p\u003e  \u003ch4\u003eNonstandard Keys\u003c/h4\u003e  \u003cp\u003eIf (for whatever reason) you need to use a nonstandard string as the key in an \u003ccode\u003eObject\u003c/code\u003e, you'll only be able to access the properties with bracket notation. For example, this is a valid \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst wildKeys = {\u003cbr\u003e  'Cash rules everything around me.': 'Wu',\u003cbr\u003e  'C.R.E.A.M.': 'Tang',\u003cbr\u003e  'Get the money.': 'For',\u003cbr\u003e  \"$ $ bill, y'all!\": 'Ever'\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's impossible to access those properties with dot notation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewildKeys.'Cash rules everything around me.';\u003cbr\u003e// ERROR: Uncaught SyntaxError: Unexpected string \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut bracket notation works just fine:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewildKeys[\"$ $ bill, y'all!\"];\u003cbr\u003e//=\u0026gt; \"Ever\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn order to access a property via dot notation, \u003cstrong\u003ethe key must follow the same naming rules applied to variables and functions\u003c/strong\u003e. It's also important to note that under the hood \u003cstrong\u003eall keys are strings\u003c/strong\u003e. Don't waste too much time worrying whether a key is accessible via dot notation. If you follow these rules when naming your keys, everything will work out:\u003c/p\u003e  \u003cul\u003e \u003cli\u003ecamelCaseEverything\u003c/li\u003e \u003cli\u003eStart the key with a lowercase letter\u003c/li\u003e \u003cli\u003eNo spaces or punctuation\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIf you follow those three rules, you'll be able to access all of an \u003ccode\u003eObject\u003c/code\u003e's properties via bracket notation \u003cstrong\u003eor\u003c/strong\u003e dot notation.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Always name your \u003ccode\u003eObject\u003c/code\u003e's keys according to the above three rules. Keeping everything standardized is good, and being able to access properties via dot notation makes the code much more readable.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch4\u003eAccessing Properties Dynamically\u003c/h4\u003e  \u003cp\u003eThe other situation in which bracket notation is required is if we want to dynamically access properties (i.e., using variables rather than literal identifiers). The reason we need to enclose the key inside quotes when we use the literal key is because, when we \u003cstrong\u003edon't\u003c/strong\u003e use the quotes, JavaScript will interpret what's inside the brackets as a variable.\u003c/p\u003e  \u003cp\u003eFrom the lesson on \u003ccode\u003eArray\u003c/code\u003es, remember why we call it the \u003cem\u003ecomputed member access operator\u003c/em\u003e: we can place any expression inside the brackets and JavaScript will \u003cem\u003ecompute\u003c/em\u003e its value to figure out which property to access. For example, we can access the \u003ccode\u003ezipCode\u003c/code\u003e property from our \u003ccode\u003eaddress\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress['zip' + 'Code'];\u003cbr\u003e//=\u0026gt; \"10004\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePretty neat, but the real strength of bracket notation is its ability to compute the value of variables on the fly. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst meals = {\u003cbr\u003e  breakfast: 'Oatmeal',\u003cbr\u003e  lunch: 'Caesar salad',\u003cbr\u003e  dinner: 'Chimichangas'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003elet mealName = 'lunch';\u003cbr\u003e\u003cbr\u003emeals[mealName];\u003cbr\u003e//=\u0026gt; \"Caesar salad\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBy placing \u003ccode\u003emealName\u003c/code\u003e in the square brackets, we're telling the JavaScript engine it needs to \u003cem\u003einterpret\u003c/em\u003e the value inside those brackets. It evalutes \u003ccode\u003emealName\u003c/code\u003e, resolves it to \u003ccode\u003e'lunch'\u003c/code\u003e, and returns \"Caesar salad\". Note that we didn't enclose the key in quotes: the keys themselves are strings, but \u003ccode\u003emealName\u003c/code\u003e is a variable \u003cem\u003econtaining\u003c/em\u003e a string. If we try to use the \u003ccode\u003emealName\u003c/code\u003e variable with dot notation instead, it doesn't work:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emealName = 'dinner';\u003cbr\u003e//=\u0026gt; \"dinner\"\u003cbr\u003e\u003cbr\u003emeals.mealName;\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith dot notation, JavaScript doesn't treat \u003ccode\u003emealName\u003c/code\u003e as a variable —\u0026nbsp;instead it checks whether a property exists with the literal key \u003ccode\u003emealName\u003c/code\u003e, only finds properties named \u003ccode\u003ebreakfast\u003c/code\u003e, \u003ccode\u003elunch\u003c/code\u003e, and \u003ccode\u003edinner\u003c/code\u003e, and so returns \u003ccode\u003eundefined\u003c/code\u003e. Essentially, dot notation is for when you know the exact name of the property in advance, and bracket notation is for when you need to compute it when the program runs.\u003c/p\u003e  \u003cp\u003eThe need for bracket notation doesn't stop at dynamically accessing properties on an already-created \u003ccode\u003eObject\u003c/code\u003e. We can also use bracket notation to dynamically set properties \u003cem\u003eduring the creation of a new \u003ccode\u003eObject\u003c/code\u003e\u003c/em\u003e. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst morningMeal = 'breakfast';\u003cbr\u003econst middayMeal = 'lunch';\u003cbr\u003econst eveningMeal = 'dinner';\u003cbr\u003e\u003cbr\u003econst meals = {\u003cbr\u003e  [morningMeal]: 'French toast',\u003cbr\u003e  [middayMeal]: 'Personal pizza',\u003cbr\u003e  [eveningMeal]: 'Fish and chips'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals;\u003cbr\u003e//=\u0026gt; { breakfast: \"French toast\", lunch: \"Personal pizza\", dinner: \"Fish and chips\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOnce again, by wrapping the variable names in square brackets, we're letting JavaScript know that it needs to interpret the contents. Let's try doing the same thing without the square brackets:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst morningMeal = 'breakfast';\u003cbr\u003econst middayMeal = 'lunch';\u003cbr\u003econst eveningMeal = 'dinner';\u003cbr\u003e\u003cbr\u003econst meals = {\u003cbr\u003e  morningMeal: 'French toast',\u003cbr\u003e  middayMeal: 'Personal pizza',\u003cbr\u003e  eveningMeal: 'Fish and chips'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emeals;\u003cbr\u003e//=\u0026gt; { morningMeal: \"French toast\", middayMeal: \"Personal pizza\", eveningMeal: \"Fish and chips\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWithout the square brackets, JavaScript treated each key as a literal identifier instead of a variable. Bracket notation — the \u003cem\u003ecomputed member access operator\u003c/em\u003e — once again shows its powers of computation!\u003c/p\u003e  \u003cp\u003eBracket notation will really come in handy when we start iterating over \u003ccode\u003eObject\u003c/code\u003es and programmatically accessing and assigning properties.\u003c/p\u003e  \u003ch2\u003eJavaScript's Object Methods\u003c/h2\u003e  \u003cp\u003eJavaScript includes a number of built-in \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\"\u003estatic \u003ccode\u003eObject\u003c/code\u003e methods\u003c/a\u003e (\u003cem\u003estatic\u003c/em\u003e means that these methods are called on the \u003ccode\u003eObject\u003c/code\u003e class itself, rather than on an instance of an \u003ccode\u003eObject\u003c/code\u003e). We will talk briefly about a couple of them here and go into detail about one more in the next lesson.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eObject.keys()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eWe can get a list of the top-level keys in an \u003ccode\u003eObject\u003c/code\u003e by using the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"\u003e\u003ccode\u003eObject.keys()\u003c/code\u003e\u003c/a\u003e static method. We do that by calling \u003ccode\u003eObject.keys()\u003c/code\u003e and passing the \u003ccode\u003eObject\u003c/code\u003e instance as an argument. The return value is an \u003ccode\u003eArray\u003c/code\u003e containing all of the keys at the \u003cem\u003etop level\u003c/em\u003e of the \u003ccode\u003eObject\u003c/code\u003e instance.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst wednesdayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina',\u003cbr\u003e    hard: 'Provolone'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eObject.keys(wednesdayMenu);\u003cbr\u003e//=\u0026gt; [\"cheesePlate\", \"fries\", \"salad\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that it didn't pick up the keys in the nested \u003ccode\u003echeesePlate\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e —\u0026nbsp;just the keys from the properties declared at the top level within \u003ccode\u003ewednesdayMenu\u003c/code\u003e. How do you think we could use \u003ccode\u003eObject.keys()\u003c/code\u003e to get a list of the keys inside the nested \u003ccode\u003eObject\u003c/code\u003e? Try it out in the REPL.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: The sequence in which keys are ordered in the returned \u003ccode\u003eArray\u003c/code\u003e is not consistent across browsers and should not be relied upon. All of the \u003ccode\u003eObject\u003c/code\u003e's keys will be in the \u003ccode\u003eArray\u003c/code\u003e, but you can't count on \u003ccode\u003ekeyA\u003c/code\u003e always being at index \u003ccode\u003e0\u003c/code\u003e of the \u003ccode\u003eArray\u003c/code\u003e and \u003ccode\u003ekeyB\u003c/code\u003e always being at index \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003e\u003ccode\u003eObject.values()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"\u003e\u003ccode\u003eObject.values()\u003c/code\u003e\u003c/a\u003e static method behaves similarly to \u003ccode\u003eObject.keys()\u003c/code\u003e but, as you might expect, returns an array containing values rather than keys. Try this out in the REPL as well.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we identified what an \u003ccode\u003eObject\u003c/code\u003e is and how it gives us a better way to keep track of more complicated sets of related data. We also learned how to access values stored in an \u003ccode\u003eObject\u003c/code\u003e using dot notation and bracket notation, as well as when to use each. In the next lesson, we'll learn how to modify \u003ccode\u003eObject\u003c/code\u003es. We'll also explore the relationship between \u003ccode\u003eObject\u003c/code\u003es and \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eCreating and interacting with \u003ccode\u003eObject\u003c/code\u003es is an important skill in JavaScript programming. Before moving on, be sure to use \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e to practice creating \u003ccode\u003eObject\u003c/code\u003es (including nested \u003ccode\u003eObject\u003c/code\u003es) and accessing properties.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\"\u003eObject basics\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"object-iteration","title":"Object Iteration","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-object-iteration\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-object-iteration\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-object-iteration/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eExplain the difference between looping and iteration.\u003c/li\u003e \u003cli\u003eIterate over arrays with the \u003ccode\u003efor...of\u003c/code\u003e statement.\u003c/li\u003e \u003cli\u003eEnumerate an object's properties with the \u003ccode\u003efor...in\u003c/code\u003e statement.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWhen we create a \u003ccode\u003efor\u003c/code\u003e loop to loop over an array, we base the loop's condition off of the \u003ccode\u003e.length\u003c/code\u003e of the array. This works, but it's a lot of syntactic cruft to remember:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (let i = 0; i \u0026lt; array.length; i++) {\u003cbr\u003e  // Loop body\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe problem is that we're using a \u003cem\u003elooping\u003c/em\u003e construct to perform \u003cem\u003eiteration\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eLooping vs. Iteration\u003c/h2\u003e  \u003cp\u003eThere's a pretty fine line separating the concepts of \u003cem\u003elooping\u003c/em\u003e and \u003cem\u003eiteration\u003c/em\u003e, and only the truly pedantic will call you out if you use one in place of the other.\u003c/p\u003e  \u003cp\u003eLooping is the process of executing a set of statements \u003cstrong\u003erepeatedly until a condition is met\u003c/strong\u003e. It's great for when we want to do something a specific number of times (\u003ccode\u003efor\u003c/code\u003e loop) or unlimited times until the condition is met (\u003ccode\u003ewhile\u003c/code\u003e or \u003ccode\u003edo while\u003c/code\u003e loop).\u003c/p\u003e  \u003cp\u003eIteration is the process of executing a set of statements \u003cstrong\u003eonce for each element in a collection\u003c/strong\u003e. We can accomplish this with a \u003ccode\u003efor\u003c/code\u003e loop:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet myArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\u003cbr\u003e\u003cbr\u003efor (let i = 0; i \u0026lt; myArray.length; i++) {\u003cbr\u003e  console.log(myArray[i]);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eor with a \u003ccode\u003ewhile\u003c/code\u003e loop:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet myArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\u003cbr\u003e\u003cbr\u003elet j = 0;\u003cbr\u003e\u003cbr\u003ewhile (j \u0026lt; myArray.length) {\u003cbr\u003e  console.log(myArray[j++]);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ebut neither is very pretty. The \u003ccode\u003efor...of\u003c/code\u003e statement gives us a better to way.\u003c/p\u003e  \u003ch2\u003e\u003ccode\u003efor...of\u003c/code\u003e\u003c/h2\u003e  \u003cp\u003eUsing \u003ccode\u003efor...of\u003c/code\u003e, the code above becomes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\u003cbr\u003e\u003cbr\u003efor (const element of myArray) {\u003cbr\u003e  console.log(element);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUsing a construct that is specifically meant for iteration results in much cleaner code: there's\u0026nbsp;no initialization of a counter, no condition, no incrementing the counter, and no bracket notation to access elements in the array (\u003ccode\u003emyArray[i]\u003c/code\u003e).\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003econst\u003c/code\u003e vs. \u003ccode\u003elet\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eAs you might've noticed, \u003ccode\u003efor...of\u003c/code\u003e allows us to use \u003ccode\u003econst\u003c/code\u003e instead of \u003ccode\u003elet\u003c/code\u003e. In \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e statements, \u003ccode\u003elet\u003c/code\u003e is required because we are incrementing a counter variable. The incrementing process involves taking the counter's current value, adding \u003ccode\u003e1\u003c/code\u003e to it, and then assigning that new value to the variable. That reassignment precludes us from using our beloved \u003ccode\u003econst\u003c/code\u003e, which cannot be reassigned.\u003c/p\u003e  \u003cp\u003eDelightfully, the \u003ccode\u003efor...of\u003c/code\u003e statement involves no such reassignment. On each trip into the loop body (which is a \u003cem\u003eblock\u003c/em\u003e — note the curly braces), we assign the next element in the collection to a \u003cstrong\u003enew\u003c/strong\u003e \u003ccode\u003eelement\u003c/code\u003e variable. Upon reaching the end of the block, the block-scoped variable vanishes, and we return to the top. Then we repeat the process, assigning the next element in the collection to a \u003cstrong\u003enew\u003c/strong\u003e \u003ccode\u003eelement\u003c/code\u003e variable.\u003c/p\u003e  \u003ch3\u003eIterating over... strings?\u003c/h3\u003e  \u003cp\u003eA string is effectively an ordered collection (like an array) of characters, which \u003ccode\u003efor...of\u003c/code\u003e is more than happy to iterate over:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (const char of 'Hello, world!') {\u003cbr\u003e  console.log(char);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: H\u003cbr\u003e// LOG: e\u003cbr\u003e// LOG: l\u003cbr\u003e// LOG: l\u003cbr\u003e// LOG: o\u003cbr\u003e// LOG: ,\u003cbr\u003e// LOG:\u003cbr\u003e// LOG: w\u003cbr\u003e// LOG: o\u003cbr\u003e// LOG: r\u003cbr\u003e// LOG: l\u003cbr\u003e// LOG: d\u003cbr\u003e// LOG: ! \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eUsage\u003c/h3\u003e  \u003cp\u003eUse a \u003ccode\u003efor...of\u003c/code\u003e statement anytime you want to iterate over an array.\u003c/p\u003e  \u003ch2\u003eIterating over objects\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement is similar to \u003ccode\u003efor...of\u003c/code\u003e; it's generally used for iterating over the properties in an object. The statement follows this syntax:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efor (const [KEY] in [OBJECT]) {\u003cbr\u003e  // Code in the statement body\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement iterates over the properties in an object, but it doesn't pass the entire property into the block. Instead, it only passes in the \u003cem\u003ekeys\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street1: '11 Broadway',\u003cbr\u003e  street2: '2nd Floor',\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: \"10004\";\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(key);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: street1\u003cbr\u003e// LOG: street2\u003cbr\u003e// LOG: city\u003cbr\u003e// LOG: state\u003cbr\u003e// LOG: zipCode \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAccessing the object's values is as simple as combining the passed-in key with the \u003cem\u003ebracket operator\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street1: '11 Broadway',\u003cbr\u003e  street2: '2nd Floor',\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: \"10004\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(address[key]);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: 11 Broadway\u003cbr\u003e// LOG: 2nd Floor\u003cbr\u003e// LOG: New York\u003cbr\u003e// LOG: NY\u003cbr\u003e// LOG: 10004 \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eBut... but I want to use the dot operator!\u003c/h3\u003e  \u003cp\u003eCan you think of why the bracket operator is required? Let's see what happens when we use the \u003cem\u003edot operator\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst address = {\u003cbr\u003e  street1: '11 Broadway',\u003cbr\u003e  street2: '2nd Floor',\u003cbr\u003e  city: 'New York',\u003cbr\u003e  state: 'NY',\u003cbr\u003e  zipCode: \"10004\"\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(address.key);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined\u003cbr\u003e// LOG: undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement iterates over the five properties in \u003ccode\u003eaddress\u003c/code\u003e, successively passing in the object's keys. However, inside the statement body we're trying to access \u003ccode\u003eaddress.key\u003c/code\u003e. If you recall from the lesson on objects, variables don't work with the dot operator because it treats the variable name as a literal key —\u0026nbsp;that is, \u003ccode\u003eaddress.key\u003c/code\u003e is trying to access the property on \u003ccode\u003eaddress\u003c/code\u003e with a key of \u003ccode\u003ekey\u003c/code\u003e. Since there is no \u003ccode\u003ekey\u003c/code\u003e property in \u003ccode\u003eaddress\u003c/code\u003e, it returns \u003ccode\u003eundefined\u003c/code\u003e. To prove this, let's add a \u003ccode\u003ekey\u003c/code\u003e property to \u003ccode\u003eaddress\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaddress.key = \"Let's have a 'key' key!\";\u003cbr\u003e\u003cbr\u003efor (const key in address) {\u003cbr\u003e  console.log(address.key);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key!\u003cbr\u003e// LOG: Let's have a 'key' key! \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eUsage\u003c/h3\u003e  \u003cp\u003eUse a \u003ccode\u003efor...in\u003c/code\u003e statement whenever you want to enumerate the properties of an object.\u003c/p\u003e  \u003ch3\u003e\n\u003ccode\u003efor...in\u003c/code\u003e and order\u003c/h3\u003e  \u003cp\u003eBecause \u003cstrong\u003earrays are objects\u003c/strong\u003e, \u003ccode\u003efor...in\u003c/code\u003e \u003cem\u003ewill work\u003c/em\u003e with arrays. In fact, because \u003ccode\u003efor...of\u003c/code\u003e was added to JavaScript later than \u003ccode\u003efor...in\u003c/code\u003e, you might see older code that uses \u003ccode\u003efor...in\u003c/code\u003e to iterate over arrays. However, as a general rule, \u003cstrong\u003edon't use \u003ccode\u003efor...in\u003c/code\u003e with arrays\u003c/strong\u003e. When iterating over an array, an \u003cstrong\u003eordered\u003c/strong\u003e collection, we would expect the elements in the array to be dealt with \u003cstrong\u003ein order\u003c/strong\u003e. However, because of how \u003ccode\u003efor...in\u003c/code\u003e works under the hood, there's no guarantee of order. From the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003eMDN documentation\u003c/a\u003e:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eA \u003ccode\u003efor...in\u003c/code\u003e loop iterates over the properties of an object in an \u003cstrong\u003earbitrary order\u003c/strong\u003e ... one cannot depend on the seeming orderliness of iteration, at least in a cross-browser setting.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eWhat this means is that, with \u003ccode\u003efor...in\u003c/code\u003e, different browsers might iterate over the same object's properties in different orders. That's not cool! Cross-browser consistency is very important. A lot of progress has been made towards standardizing the behavior of \u003ccode\u003efor...in\u003c/code\u003e across all major browsers, but there's still no reason to use \u003ccode\u003efor...in\u003c/code\u003e with arrays when we have the wonderfully consistent \u003ccode\u003efor...of\u003c/code\u003e tailor-made for the job.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\u003eMDN —\u0026nbsp;\u003ccode\u003efor...of\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003eMDN —\u0026nbsp;\u003ccode\u003efor...in\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"introduction-to-macos-environment-setup","title":"Introduction to MacOS Environment Setup","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003cp\u003eIn this module, we will walk through the process of setting up your macOS local development environment.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are not using a Mac computer for this course, skip the lessons in this module.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eBrief History\u003c/h2\u003e\n\u003ch3\u003eUnderstanding Environments\u003c/h3\u003e\n\u003cp\u003eA \u003cstrong\u003esoftware environment\u003c/strong\u003e describes the set of tools that work together to enable you to develop and execute the code that you write. Environments typically include the operating system, databases, programming languages, and related tools like text editors or browsers.\u003c/p\u003e\n\u003ch3\u003eComparing Environments with Machines\u003c/h3\u003e\n\u003cp\u003eYou may hear us use the term \"software environment\" and \"machine\" to mean similar things. A \u003cstrong\u003emachine\u003c/strong\u003e describes the physical hardware that your software environment runs on. You'll hear the term machine and computer used interchangeably. Different machines (like PCs and Macs) use different hardware to run the programs that they use. Differences in those machines mean that setting up your development environment on one type of machine could look much different than setting it up on another.\u003c/p\u003e\n\u003ch3\u003emacOS Operating System\u003c/h3\u003e\n\u003cp\u003eTo work around some of the differences between machines, and specifically between operating systems, we recommend that all students whose computers come pre-installed with the Windows operating system use a tool called \u003cstrong\u003eWindows Subsystem for Linux (WSL)\u003c/strong\u003e. Windows Subsystem for Linux provides a Linux-based environment for interfacing with and developing on a Windows operating system.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003emacOS\u003c/strong\u003e is a UNIX-based operating system. UNIX-based operating systems are very commonly used in professional software engineering settings. Learning how to use a UNIX-based operating system will be valuable for your future software engineering career. You may have heard of other UNIX-based operating systems like Ubuntu, Debian, or Fedora, which include the Linux kernel (core software). These types of operating systems work similarly.\u003c/p\u003e\n\u003ch3\u003eTerminals and Shells\u003c/h3\u003e\n\u003cp\u003eYou may be familiar with opening files and applications on your computer by clicking icons, or viewing a website by typing an address into the address bar and seeing what pops up. These \u003cstrong\u003egraphical user interfaces (GUIs)\u003c/strong\u003e created a revolution in computing and are still extremely helpful in getting work done for many non-technical computer users.\u003c/p\u003e\n\u003cp\u003eBefore graphical user interfaces (GUIs), the way to tell the computer to do something was through a \u003cstrong\u003eterminal\u003c/strong\u003e. The terminal included a screen, which would display only text, and a keyboard. The screen and keyboard were connected to a computer and you type into the keyboard what you wanted the computer to do. Then, you press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e and would wait for the computer to finish.\u003c/p\u003e\n\u003cp\u003eTerminals are still used frequently today, especially in software development. We can connect to another computer on the internet, give it instructions by typing in commands, and view the result on our screen. The way that modern computers emulate the terminals of yesterday is through a program called a \u003cstrong\u003ecommand-line interface\u003c/strong\u003e, or a \u003cstrong\u003eshell\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eSimilar to operating systems, there are many different types of shells. The shell that Flatiron School supports on the macOS operating system is called \u003cstrong\u003ezsh\u003c/strong\u003e, short for Z Shell.\u003c/p\u003e\n\u003ch3\u003emacOS Terminal\u003c/h3\u003e\n\u003cp\u003eThe \"Terminal\" application is a text-based way to browse and work with files on your computer. We will be using the \"Terminal\" application during the environment setup and the duration of the program. For now, let's start to see what \"Terminal\" and more generally, \u003cstrong\u003eshell\u003c/strong\u003es can do.\u003c/p\u003e\n\u003ch2\u003eView Your Desktop in \"Finder\" and \"Terminal\" Applications\u003c/h2\u003e\n\u003cp\u003eTo complete the environment setup, you will need to be able to open applications. You can open new applications by using the search bar at the bottom of your screen. The search bar says, \"Type here to search\".\u003c/p\u003e\n\u003ch3\u003eAction Item: View Your Desktop in the \"Finder\"\u003c/h3\u003e\n\u003cp\u003eThe \"Finder\" application is a visual way to browse the files on your computer. You may already be familiar with the \"Finder\" application. This application allows you to quickly see the files on your desktop, downloads, documents, pictures, music, videos, and much more.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eClick on the \"Spotlight Search\" magnifying glass icon in the top-right corner of your window\u003c/li\u003e\n\u003cli\u003eType \"Finder\" and open the application\u003c/li\u003e\n\u003cli\u003eFind and open the \"Desktop\" folder in your \"Finder\" application\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eAction Item: View Your Desktop in the \"Command Prompt\" Shell\u003c/h3\u003e\n\u003cp\u003eThe \"Terminal\" application is the terminal that will allow us to interface with our computer through a shell. This action item is to primarily get you comfortable running commands in \u003cem\u003eany\u003c/em\u003e shell so that you can work through the environment setup on your own.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using the \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecd /Users\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003els\u003c/code\u003e (lowercase \u003ccode\u003eL\u003c/code\u003e and lowercase \u003ccode\u003eS\u003c/code\u003e together) into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eLook for your username in the list\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecd\u003c/code\u003e into the terminal, add a space, and type your name as it appears in the list and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003els\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eLook for the \"Desktop\" folder in the list\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecd Desktop\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003els\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: if prompted, allow \"Terminal\" to access files in your Desktop folder.)\u003c/em\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.youtube.com/embed/_saQ1GkvpZk\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003eIf you were able to open your desktop in the \"Finder\" application and you were able to open the \"Terminal\" application and \u003ccode\u003ecd\u003c/code\u003e to your desktop in that application, you should see that you can see the same list of files in both the \u003cstrong\u003egraphical user interface (GUI)\u003c/strong\u003e and in the \u003cstrong\u003ecommand-line interface (CLI)\u003c/strong\u003e or shell.\u003c/p\u003e\n\u003cp\u003eThis may be your first time using the \"Terminal\" application or any terminal or shell. Now you know how to see the items on your desktop through the \"Finder\" application \u003cem\u003eand\u003c/em\u003e through the \"Terminal\" application.\u003c/p\u003e\n\u003ch2\u003ePreparing for Your Environment Setup\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eDuring the environment setup, you will be spending a lot of time in your \"Terminal\" application.\u003c/li\u003e\n\u003cli\u003eAs much as possible, copy and paste commands that we ask you to run there instead of typing by hand to prevent environment setup issues.\u003c/li\u003e\n\u003cli\u003eSpecific keys that you need to press will be surrounded by \u003ccode\u003e\u0026lt;\u003c/code\u003e \u003ccode\u003e\u0026gt;\u003c/code\u003e (for example, \u003ccode\u003e\u0026lt;Shift\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eYou will need to be comfortable switching between windows; we will primarily be using the browser and the \"Terminal\" application.\u003c/li\u003e\n\u003cli\u003eYou should be able to start and stop the environment setup.\u003c/li\u003e\n\u003cli\u003eIf you get stuck, reach out to your classmates or an instructor.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-the-local-environment-setup-instructions","title":"Introduction to the Local Environment Setup Instructions","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-environment-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-environment-intro/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-environment-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-environment-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eWe believe that it's important for each student to have confidence in creating code on their own computers. Many of our lessons also include feedback in the form of code tests - these will only run in an environment set up for JavaScript and Ruby. For these reasons, we ask students to set up their local environments as early as possible. The next set of lessons will walk through the installing and configuring the tools you'll need. Separate instructions are provided for Mac and Windows users, and an alternative environment setup is also provided if you run into any issues setting up your local machine.\u003c/p\u003e  \u003cp\u003eLocal environment setup may take anywhere from 1 to 4 hours total depending on how fast your computer is and your internet speeds. As you have time throughout the week, try to install each of the tools and technologies listed in the setup instructions and write down any issues that you run into. It is okay to install the programs over the course of a few days. \u003c/p\u003e  \u003cp\u003eIf you encounter consistent issues while setting up your local environment, the alternative environment can be used temporarily so you can continue working through the beginning of this course.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: If you are using a Mac then you will work through the steps in the \u003cstrong\u003eMacOS Environment Setup\u003c/strong\u003e module and ignore the Windows set up. If you will be using a Windows-based PC then you can skip past the Mac set up and work through the steps in the \u003cstrong\u003eWindows Environment Setup\u003c/strong\u003e module.\u003c/p\u003e \u003c/blockquote\u003e","frontPage":false},{"exportId":"programming-with-expressions","title":"Programming with Expressions","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-programming-with-expressions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-programming-with-expressions/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-programming-with-expressions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-programming-with-expressions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify the Ternary Expression\u003c/li\u003e \u003cli\u003eWrite a program with conditional logic using expressions\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eYou've traveled quite a road! You started, from a conversational perspective, mute and unable to interact, and now you can converse with JavaScript.\u003c/p\u003e  \u003cp\u003eAs conversationalists with computers, we are now able to construct complex, sophisticated \u003cem\u003eexpressions\u003c/em\u003e. But so far our expressions have followed a single track: \u003cem\u003eevaluate\u003c/em\u003e this one single expression, or line of thought. It's like a world of absolute certainty in every statement: \"My outfit today: rain boots\" or \"My outfit today: sun hat.\" In real life, however, we sometimes need to base our decisions on a test of some sort. \"\u003cstrong\u003eIF\u003c/strong\u003e it's raining: rain boots... \u003cstrong\u003eOTHERWISE\u003c/strong\u003e: sun hat.\" This means that \u003cem\u003ecomplexity\u003c/em\u003e is entering our expressions; we \u003cem\u003eneed\u003c/em\u003e that complexity so that we can express our problem-solving strategies in code.\u003c/p\u003e  \u003cp\u003eWe will now learn how to write an expression that expresses \"conditional thinking\" or \"if-then\" logic. It's called the \u003cstrong\u003eternary expression\u003c/strong\u003e. It's an expression that takes a Boolean value or expression and returns one of two values, depending on the truth-status of that first expression.\u003c/p\u003e  \u003ch2\u003eIdentify the Ternary Expression\u003c/h2\u003e  \u003cp\u003eThe ternary expression looks like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/programming-with-expressions/ternary.jpg\" alt=\"Ternary Graphic\"\u003e\u003c/p\u003e  \u003cp\u003eOr, in code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ebooleanExpression ? \"thingToReturnIfTrue\" : \"thingToReturnIfFalse\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the expression in the first position evaluates to a truthy value, then the return value of the ternary expression is whatever is in the second position; here, \u003ccode\u003e\"thingToReturnIfTrue\"\u003c/code\u003e. If the expression in the first position is falsey, however, whatever is in the last position is returned; here, \u003ccode\u003e\"thingToReturnIfFalse\"\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's try an example:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/SweetNativeQuadrant?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eThe expression in the first position evaluates to \u003ccode\u003etrue\u003c/code\u003e, so the ternary expression returns the value after the question mark, \"rain boots\". Try changing the variable \u003ccode\u003elikelyToRain\u003c/code\u003e with the \u003cem\u003eassignment expression\u003c/em\u003e from \u003ccode\u003etrue\u003c/code\u003e to \u003ccode\u003efalse\u003c/code\u003e. Then run the ternary expression again. The return value of our ternary expression should now be \u003ccode\u003esun hat\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe now have the ability to express conditional logic. You should try writing several ternary expressions yourself in the REPL to make sure you've gotten the hang of things.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eLEARNING TIP\u003c/strong\u003e: Developers learn their craft by making slight experiments to given code: be sure you're adopting that habit now.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eMoving Beyond Boolean Values\u003c/h3\u003e  \u003cp\u003eAbove we had a variable, \u003ccode\u003elikelyToRain\u003c/code\u003e, in which the literal Boolean value \u003ccode\u003etrue\u003c/code\u003e was stored and we used that as our Boolean expression in our ternary. But we can, in fact, use \u003cem\u003eany\u003c/em\u003e Boolean expression, not just literal Boolean values. Specifically, we can use the comparison operators and logical operators that we learned about in the previous lessons to construct our expression.\u003c/p\u003e  \u003cp\u003eLet's look at an example:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/RashUnconsciousSigns?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eHere we see we can make a decision based on a \u003cem\u003ecomparison\u003c/em\u003e. \u003cem\u003eIf\u003c/em\u003e the chance of rain is greater than 30%, we know we should take our rain boots; \u003cem\u003eotherwise\u003c/em\u003e we'll grab our sun hat. Try different values for \u003ccode\u003erainPercentage\u003c/code\u003e and see what happens.\u003c/p\u003e  \u003cp\u003eWith this understanding of ternary expressions, we are now ready to write a program using expressions.\u003c/p\u003e  \u003ch2\u003eWrite a Program with Conditional Logic Using Expressions\u003c/h2\u003e  \u003cp\u003eGuess what? We've already done this! \u003ca href=\"https://en.wikipedia.org/wiki/Computer_program\"\u003eAccording to Wikipedia\u003c/a\u003e, a program is \"a collection of instructions that can be executed by a computer to perform a specific task.\" The ternary (set of instructions) we looked at above is an \u003cem\u003eexpression\u003c/em\u003e that performs the task of \u003cem\u003eevaluating a condition\u003c/em\u003e and, based on the results, \u003cem\u003ereturning a value\u003c/em\u003e. But of course we can expand on this, making our conditions more sophisticated and our return values more informative:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/HungryWealthyVertex?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eNow we have three variables and we're using them not only to construct ternary expressions but also to output a more informative message. Try experimenting with the values of the variables and see how it affects the return value.\u003c/p\u003e  \u003cp\u003eLet's take a closer look at the code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e//Input values: we could easily imagine asking a user for these values.\u003cbr\u003econst name = \"Byron the Poodle\";\u003cbr\u003econst probabilityOfRain = 0.2;\u003cbr\u003econst temperatureInC = 26;\u003cbr\u003e\u003cbr\u003e`Hello, ${name}, with a rain chance of ${probabilityOfRain * 100}% and a temperature of ${temperatureInC}C we recommend that you ` + (rainPercentage \u0026gt; 0.3 ? \"take an umbrella\" : \"enjoy this rain-free day\") + `${temperatureInC \u0026gt;= 26 ? ' and watch out for heatstroke.' : ' and bask in this fine weather.'}`; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAlthough this code works — JavaScript knows what we want it to do — that doesn't make it good code. Recall that programming is \u003cem\u003econversation\u003c/em\u003e, not just with the JavaScript engine but \u003cem\u003ealso\u003c/em\u003e with other programmers or ourselves in the future. How easy is it to read the line of code that defines our return value? How much work does it take to figure out how it works? Writing good code means writing code that not only works but is also as clean and readable as we can make it.\u003c/p\u003e  \u003cp\u003eLet's do some \u003cem\u003erefactoring\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eWe have learned that, in assigning values to variables, we can use constant values:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst name = \"Byron the Poodle\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOr values evaluated from an expression:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst rainPercentage = 0.2 * 100; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can also include variables as part of the evaluated expression:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst rainPercentage = probabilityOfRain * 100; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn fact, \u003cstrong\u003e\u003cem\u003eyou can assign virtually any \u003cem\u003eexpression\u003c/em\u003e as the value of a variable\u003c/em\u003e\u003c/strong\u003e, including \u003cem\u003ecomparison\u003c/em\u003e expressions. So to start, let's use our new \u003ccode\u003erainPercentage\u003c/code\u003e variable and also create a couple of appropriately named variables to store the conditions we're checking in our ternary statements. The condition \u003ccode\u003erainPercentage \u0026gt; 0.3\u003c/code\u003e is basically checking whether it's likely to rain, while the condition \u003ccode\u003etemperatureInC \u0026gt;= 26\u003c/code\u003e is checking whether it's hot enough that we should stay out of the sun. Once we've created the variables we can then use them in our ternary statements:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst name = \"Byron the Poodle\";\u003cbr\u003econst probabilityOfRain = 0.2;\u003cbr\u003econst temperatureInC = 26;\u003cbr\u003e\u003cbr\u003econst likelyToRain = probabilityOfRain \u0026gt; 0.3;\u003cbr\u003econst sunIsDangerous = temperatureInC \u0026gt;= 26;\u003cbr\u003econst rainPercentage = probabilityOfRain * 100;\u003cbr\u003e\u003cbr\u003e`Hello, ${name}, with a rain chance of ${rainPercentage}% and a temperature of ${temperatureInC}C we recommend that you ` + (likelyToRain ? \"take an umbrella\" : \"enjoy this rain-free day\") + `${sunIsDangerous ? ' and watch out for heatstroke!' : ' and bask in this fine weather.'}` \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is already a bit easier to read: we've moved the math and some of the logic out of our return value; we've also used meaningful variable names that make it clearer how we're using our conditions and, by extension, what the ternary expressions are doing. But we can do better.\u003c/p\u003e  \u003cp\u003eWe mentioned above that we can assign virtually any expression as the value of a variable; this includes \u003cem\u003eternary expressions\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst rainAdvice = likelyToRain ? \"take an umbrella\" : \"enjoy this rain-free day\";\u003cbr\u003econst sunAdvice = sunIsDangerous ? \"and watch out for heatstroke\" : \"and bask in this fine weather\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eA ternary expression returns a value, just like any other expression; the value it returns is what is assigned to the variable.\u003c/p\u003e  \u003cp\u003eLet's update our code, implementing this improvement:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst name = \"Byron the Poodle\"\u003cbr\u003econst probabilityOfRain = 0.2;\u003cbr\u003econst temperatureInC = 26;\u003cbr\u003e\u003cbr\u003econst likelyToRain = probabilityOfRain \u0026gt; 0.3;\u003cbr\u003econst sunIsDangerous = temperatureInC \u0026gt;= 26;\u003cbr\u003econst rainPercentage = probabilityOfRain * 100;\u003cbr\u003e\u003cbr\u003econst rainAdvice = likelyToRain ? \"take an umbrella\" : \"enjoy this rain-free day\";\u003cbr\u003econst sunAdvice = sunIsDangerous ? \" and watch out for heatstroke\" : \" and bask in this fine weather\";\u003cbr\u003e\u003cbr\u003e`Hello, ${name}, with a rain chance of ${rainPercentage}% and a temperature of ${temperatureInC}C we recommend that you ` + rainAdvice + sunAdvice; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMuch better! But there are still some improvements we can make. For one thing, it looks a little strange that we're using both interpolation and the \u003ccode\u003e+\u003c/code\u003e operator; let's fix that. And, while we're at it, we can take the \" and\" and the punctuation out of the \u003ccode\u003esunAdvice\u003c/code\u003e ternary and incorporate them into our return value instead. This not only improves the readability of our return message, it also makes our code more flexible: if we decide to reverse the order of \u003ccode\u003erainAdvice\u003c/code\u003e and \u003ccode\u003esunAdvice\u003c/code\u003e in our message, or to add a third piece of advice, we don't need to go back and edit the values returned by the ternary.\u003c/p\u003e  \u003cp\u003eOnce we've done all that, the code defining our return value is much easier to read: it no longer includes a jumble of mathematical, comparison, and ternary expressions. Furthermore, by using meaningful variable names, we've made it clear what the final message will consist of:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/BitterTeemingAbandonware?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eNice!\u003c/p\u003e  \u003cp\u003eOne final note before we move on. In the example above, we used simple \u003ccode\u003eString\u003c/code\u003es as the return values in our ternary expressions. But we can use any data type here — numbers, Booleans, objects, etc. And, of course, we can also use more complex expressions. Let's look at an example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst first = 2;\u003cbr\u003econst second = 1;\u003cbr\u003econst problemCount = 99;\u003cbr\u003econst luckyNumber = (first \u0026gt; second) ? ( (problemCount - 1) / 2 ) : ( problemCount / 3 );\u003cbr\u003eluckyNumber; //=\u0026gt; ??? (Test it out yourself!) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat's the value of \u003ccode\u003eluckyNumber\u003c/code\u003e? Step through the expressions to make sure you understand what happens step by step.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eSTYLE TIP\u003c/strong\u003e: To make reading the expressions in each of the ternary statement's positions easier, we wrap them in \u003ccode\u003e()\u003c/code\u003e. It is not required: it's done for readability and to prevent accidental order of operations bugs.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eThe ternary expression enables us to make a leap upward in the complexity of our expression-writing. An important thing to remember is that a ternary is an expression that, itself, is made up of three \"inner\" expressions.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Those familiar with programming languages might be wondering, why not use \u003ccode\u003eif/else\u003c/code\u003e statements. We'll work our way up to them, but for now we have the ability to implement simple conditional decisions in one line of code!\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eCongratulations, you've learned the art of conversing with JavaScript at a basic level. You should be proud of this accomplishment. Learning any programming language generally follows these same steps. It's a proven general structure for finding your bearings in a programming language. Feel free to return to it.\u003c/p\u003e  \u003cp\u003eAs you build code in future lessons, be sure to try to make tiny changes and make sure the code still works. Flatiron School has learned that the students who are most successful in our programs are those who make the most \"small hops\" away from the given content to make the content their own. Programmers usually call this \"playing with the code.\" Try swapping out a conditional expression, nesting a ternary within a ternary, turning a conditional from \u0026lt; to \u0026lt;=, etc. As you move on, make sure you continue to play with all the skills you've learned so far. If you need help making those \"small hops\" be sure to work with your community via Slack. You won't regret the investment.\u003c/p\u003e  \u003cp\u003eBy the way, doing this exact work is how most programmers orient themselves to a new language. Having the skill of getting started in a new language is a rocket booster for your career.\u003c/p\u003e  \u003cp\u003eBut to take your skills to the next level, you need to learn a new type of construction: a statement. Unlike an expression which always returns a value, statements are used to help choose which expressions to evaluate or to do repetitive tasks. That's Programming as Conversation Part II: Statements. Take a virtual high-five from us! You've come a long way!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\"\u003eConditional (ternary) operator\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"working-with-programs-in-bash","title":"Working with Programs in Bash","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"cli-essentials-bash-programming\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-programming/blob/master/README.md\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-programming/blob/master/README.md/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eView file contents with \u003ccode\u003ecat\u003c/code\u003e and \u003ccode\u003eopen\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003ePrint text with \u003ccode\u003eecho\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eRedirect text\u003c/li\u003e \u003cli\u003eSet \u003ccode\u003ePATH\u003c/code\u003e and environment variables\u003c/li\u003e \u003cli\u003eLook up Bash documentation with \u003ccode\u003eman\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eSometimes when we interact with computers via the graphical user interface (GUI), it takes several clicks or deep dives into the controls to accomplish what we want. We've started to see in the earlier lessons that interacting via the command line interface (CLI) can make us faster!\u003c/p\u003e  \u003cp\u003eAs we begin to build applications, it will become important to also be familiar with tasks related to displaying files, editing them with a code editor, or getting information from the operating system.\u003c/p\u003e  \u003ch2\u003eView File Contents With \u003ccode\u003ecat\u003c/code\u003e and \u003ccode\u003eopen\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eWe can print the contents of a file by using the \u003ccode\u003ecat\u003c/code\u003e command. Entering \u003ccode\u003e$ cat [filename]\u003c/code\u003e reads a file and prints the content to your command line. (In the previous command \u003ccode\u003e[filename]\u003c/code\u003e is just a placeholder  for where you would write out a valid file name).\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: \u003ccode\u003ecat\u003c/code\u003e comes from \u003ccode\u003ecatenate\u003c/code\u003e a middle-English word that means \"make like a chain\". Unix thinks of a file as a \"chain of bytes\" that it feeds to the screen.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003eAny time you see the\u003c/em\u003e \u003ccode\u003e$\u003c/code\u003e \u003cem\u003echaracter, you shouldn't type it in. This is just a standard way to represent a bash prompt. Yours may or may not be a\u003c/em\u003e \u003ccode\u003e$\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003eopen\u003c/code\u003e command is interesting because it will trigger the default action associated with the file type. \"Default actions\" are defined by the operating system. This command is only available on Mac OSX.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003e$ open .\u003c/code\u003e will popup a Finder window with the current directory in finder (recall: \u003ccode\u003e.\u003c/code\u003e is an alias to the current directory). Entering \u003ccode\u003e$ open hello_world.rb\u003c/code\u003e will run the default program for files of a \"Ruby\" type – usually a code editor. Some other platforms have adopted an \u003ccode\u003eopen\u003c/code\u003e program because they liked OSX's idea. Try it out on your computer and see if it's supported.\u003c/p\u003e  \u003ch2\u003ePrint Text With \u003ccode\u003eecho\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eDevelopers will often find themselves needing to write text in the terminal. The \u003ccode\u003eecho\u003c/code\u003e command has a number of uses -- probably the most common is to have a program display a message or instructions, such as \"Please enter Y or N\" in a dialog with users.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003eecho\u003c/code\u003e command takes a string and prints it to the screen.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ echo \"Hi world\"\u003cbr\u003eHi world \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eRedirect Text\u003c/h2\u003e  \u003cp\u003eYou can \"redirect\" \u003ccode\u003eecho\u003c/code\u003e text into a file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eecho \"I'm printing to the screen\" \u0026gt;\u0026gt; [filename] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is called \u003cem\u003eredirection\u003c/em\u003e. We're \"redirecting\" what we see on the monitor into a file. The \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e symbol will \u003cstrong\u003e\u003cem\u003eappend\u003c/em\u003e\u003c/strong\u003e content into the file while \u003ccode\u003e\u0026gt;\u003c/code\u003e means \u003cstrong\u003e\u003cem\u003eoverwrite\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eBE CAREFUL\u003c/strong\u003e Using \u003ccode\u003e\u0026gt;\u003c/code\u003e when you mean \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e can make you real sad because \u003ccode\u003e\u0026gt;\u003c/code\u003e \"clobbers\" or \"overwrites\" the file. Some files on your system are \u003cstrong\u003every\u003c/strong\u003e important and \"clobbering\" them could hurt your machine!\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eSet \u003ccode\u003ePATH\u003c/code\u003e and Environment Variables\u003c/h2\u003e  \u003cp\u003eAn \u003cem\u003eenvironment variable\u003c/em\u003e is a variable which can be configured to change the way the shell works and used by multiple applications or processes. You might tell the shell, via an environment variable \"use colors whenever you can\" or \"never use colors in output\". Discussing how to set these up is beyond our scope right now. But it's important to see that environment variables, like directory path shortcuts, or those mysterious \u003cem\u003ehidden files\u003c/em\u003e configure and adjust our CLI experience.\u003c/p\u003e  \u003cp\u003eFor example, \u003ccode\u003ePATH\u003c/code\u003e is a very important environment variable. In Unix, programs are often installed in many different directories. Directories whose names are listed in the \u003ccode\u003ePATH\u003c/code\u003e variable can have their programs run without having to \u003ccode\u003ecd\u003c/code\u003e to the directory where they are to run them (OR provide a long absolute path).\u003c/p\u003e  \u003cp\u003ePaths are assigned to the \u003ccode\u003ePATH\u003c/code\u003e and separated by \u003ccode\u003e:\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's try viewing the current \u003ccode\u003ePATH\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eecho $PATH\u003cbr\u003e/Users/kellyegreene/.rvm/gems/ruby-2.4.1/bin:/Users/kellyegreene/.rvm/gems/ruby-2.4.1@global/bin:/Users/kellyegreene/.rvm/rubies/ruby-2.4.1/bin:/Users/kellyegreene/.nvm/versions/node/v8.9.4/bin:/Applications/Postgres.app/Contents/Versions/9.4/bin:/usr/local/share/npm/lib/node_modules/grunt-cli/bin:/usr/local:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/kellyegreene/Library/Android/sdk/tools:/Users/kellyegreene/Library/Android/sdk/platform-tools:/Users/kellyegreene/Library/Android/sdk/tools:/Users/kellyegreene/Library/Android/sdk/platform-tools:/Users/kellyegreene/.rvm/bin \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAny program in these directories can be run by simply typing the program name. When \u003ccode\u003ekellyegreene\u003c/code\u003e types \u003ccode\u003eruby\u003c/code\u003e the shell starts by looking at the first directory in the \u003ccode\u003ePATH\u003c/code\u003e to see if it finds a program that matches.\u003c/p\u003e  \u003cp\u003eIn this case it \u003cem\u003ewould\u003c/em\u003e find the \u003ccode\u003eruby\u003c/code\u003e program in \u003ccode\u003e/Users/kellyegreene/.rvm/gems/ruby-2.4.1/bin\u003c/code\u003e and run it. The first match in the \u003ccode\u003ePATH\u003c/code\u003e variable wins so the order of the \u003ccode\u003ePATH\u003c/code\u003e is important.\u003c/p\u003e  \u003cp\u003eIf this directory \u003cstrong\u003ewere not\u003c/strong\u003e in the \u003ccode\u003ePATH\u003c/code\u003e, \u003ccode\u003ekellyegreene\u003c/code\u003e would have to do one of the following to run \u003ccode\u003eruby -v\u003c/code\u003e — a command that shows the program's version.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecd /Users/kellyegreene/.rvm/gems/ruby-2.4.1/bin ./ruby -v \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eor\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e/Users/kellyegreene/.rvm/gems/ruby-2.4.1/bin/ruby -v \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the shell, all programs that are not in the path have to be run with an absolute path. In both of these examples, you should see how we send the shell a full absolute path (remember what \u003ccode\u003e.\u003c/code\u003e means!).\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e \u003cem\u003eIf you want to find out where the program being run is located when you type a command at the command line, use the which command; entering\u003c/em\u003e \u003ccode\u003e$ which ruby\u003c/code\u003e \u003cem\u003ewill tell you where the Ruby binary is located.\u003c/em\u003e Whenever you type a command the path is going to be searched in order until it finds an executable that matches name\u003c/p\u003e  \u003cp\u003eThere are a lot of environment variables and, as you grow as a developer, you will encounter more of them. Others you might see include:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eExecution mode (e.g., production, development, staging, etc.)\u003c/li\u003e \u003cli\u003eDomain names\u003c/li\u003e \u003cli\u003eAPI URL/URIs\u003c/li\u003e \u003cli\u003eGIT_AUTHOR\u003c/li\u003e \u003cli\u003eGIT\u003cem\u003eAUTHOR\u003c/em\u003eEMAIL\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eEventually, you'll learn to configure your shell environment to help you do work more efficiently. You'll define variables like \u003ccode\u003eBIG_PROJECT_DIRECTORY\u003c/code\u003e or write custom programs that you can run from the CLI that make you more efficient.\u003c/p\u003e  \u003ch2\u003eLook Up Bash Documentation With \u003ccode\u003eman\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003eman\u003c/code\u003e command is the key to command line wisdom. It brings up a \u003cstrong\u003eman\u003c/strong\u003eual page for almost any command. It's the equivalent of a help system for the command line. When Unix was first invented, its manuals were so big and heavy and expensive to print the developers had the idea to write the \u003ccode\u003eman\u003c/code\u003eual in the operating system itself. This is an idea that's been popular with programmers and environmentalists and mail-carriers ever since.\u003c/p\u003e  \u003cp\u003eFor example, if you're curious what the options on \u003ccode\u003eps\u003c/code\u003e mean, you can go to your terminal and enter:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ man ps \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the terminal output, read about what the \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eu\u003c/code\u003e options do. Notice that the \u003ccode\u003ex\u003c/code\u003e option is a suffix on the \u003ccode\u003ea\u003c/code\u003e option. The \u003ccode\u003eman\u003c/code\u003e command reveals very useful reference documentation on the various bash commands. You'll notice that your command prompt has disappeared. Don't panic! You're just inside the documentation. Enter \u003ccode\u003e$ q\u003c/code\u003e (\"\u003cstrong\u003eq\u003c/strong\u003euit\") to return to your command prompt.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eSoftware developers still rely heavily on command-line interfaces to perform tasks more efficiently, configure their machine, or access programs and program features that are not available through a graphical interface. File interactions and process management may be difficult for new CLI users to grasp because the tools used are different from their graphical counterparts. However, with a little practice, these new ways of working will become your ally.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.freecodecamp.org/news/the-cat-command-in-linux-how-to-create-a-text-file-with-cat-or-touch/\"\u003eUsing The Terminal Command ‘cat’ To View The Contents Of Files\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"the-constant-expression","title":"The Constant Expression","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-the-constant-expression\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-constant-expression\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-constant-expression/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify the \u003cem\u003econstant expression\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eExplain how the \u003cem\u003econstant expression\u003c/em\u003e stops evaluation\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eLets repeat our definition of \u003cem\u003eexpression\u003c/em\u003e\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eDefinition\u003c/strong\u003e: Expression: A combination of information, called \u003cem\u003edata\u003c/em\u003e, and \u003cem\u003esymbols\u003c/em\u003e indicating how to combine \u003cem\u003edata\u003c/em\u003e, called \u003cem\u003eoperators\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eWhat if we were to make an expression that had no \u003cem\u003eoperators\u003c/em\u003e? What if it only had \u003cem\u003edata\u003c/em\u003e. For example, what if we just pass \u003ccode\u003e9000\u003c/code\u003e into a REPL:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@MaxwellBenton2/FlatPrimaryLanservers?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eIn response, we get \u003ccode\u003e9000\u003c/code\u003e. This type of expression is known as the \u003cem\u003econstant expression\u003c/em\u003e and it's very important, although very boring.\u003c/p\u003e  \u003cp\u003eIt's boring because it doesn't \u003cem\u003edo\u003c/em\u003e anything except be itself. But it's important because it confirms that JavaScript knows when to stop applying operations. It tells JavaScript to \u003cem\u003estop\u003c/em\u003e, you have an answer.\u003c/p\u003e  \u003ch3\u003eExplain How the \u003cem\u003eConstant Expression\u003c/em\u003e Stops Evaluation\u003c/h3\u003e  \u003cp\u003eLet's consider a simple arithmetic expression. Keep in mind we apply operators in \"\u003ca href=\"https://en.wikipedia.org/wiki/Order_of_operations\"\u003ePEMDAS\u003c/a\u003e\" order: parenthesis, exponents, multiplication, division, addition, subtraction.\u003c/p\u003e  \u003cp\u003eWe'll start with the expression:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step0.png\" alt=\"Math Expression: Step 0\"\u003e\u003c/p\u003e  \u003cp\u003eJavaScript's mission is to find a constant piece of data or a \u003cem\u003econstant expression\u003c/em\u003e. Because of \u003ccode\u003e()\u003c/code\u003e, it goes there first. The \u003ccode\u003e(10 - 4)\u003c/code\u003e is clearly \u003cstrong\u003enot\u003c/strong\u003e a constant expression because of the \u003ccode\u003e-\u003c/code\u003e operator's presence. JavaScript makes a \"tree\" of the two sides of the operator (\u003ccode\u003e-\u003c/code\u003e) and then looks on each side to see whether those sides are \u003cem\u003econstant expressions\u003c/em\u003e i.e. \"plain old data.\"\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step1.5.png\" alt=\"Math Expression: Step 1\"\u003e\u003c/p\u003e  \u003cp\u003eSince both \u003ccode\u003e4\u003c/code\u003e and \u003ccode\u003e10\u003c/code\u003e are plain old data, it can apply \u003ccode\u003e-\u003c/code\u003e to them and produce \u003ccode\u003e6\u003c/code\u003e — a \u003cem\u003econstant expression\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eSo what JavaScript now sees looks like this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step4.png\" alt=\"Math Expression: Step 2\"\u003e\u003c/p\u003e  \u003cp\u003eHere again, JavaScript checks both sides of the operator \u003ccode\u003e*\u003c/code\u003e and, because both sides are now \u003cem\u003econstant expressions\u003c/em\u003e, applies the \u003ccode\u003e*\u003c/code\u003e to \u003ccode\u003e3\u003c/code\u003e and \u003ccode\u003e6\u003c/code\u003e and creates a new \u003cem\u003econstant expression\u003c/em\u003e, the answer (or \"return value\"):\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step5.png\" alt=\"Math Expression: Step 3\"\u003e\u003c/p\u003e  \u003cp\u003eWhew! Fortunately, JavaScript does \u003cem\u003eall this work\u003c/em\u003e of building a tree of operators and returning a value very quickly!\u003c/p\u003e  \u003cp\u003eThe \u003cem\u003econstant expression\u003c/em\u003e is \u003cem\u003ealways\u003c/em\u003e the last expression in a complex expression. It's how JavaScript knows it has \u003cem\u003edata\u003c/em\u003e that it can work with and that no other operations need to be applied.\u003c/p\u003e  \u003ch2\u003eTable Explanation\u003c/h2\u003e  \u003cp\u003eAnother way of looking at this process might be to look at a table. We'll repeat all the same things we just showed graphically, but if a table makes more sense for you, then you'll like this one better!\u003c/p\u003e  \u003cp\u003eThis is an important strategy when learning to program: if you like thinking in code, try out the code; if you prefer diagrams, draw a diagram; if tables make more sense to you, build a table. An important part of learning to be a technologist is learning to build the tools that will help you learn.\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\u003ctr\u003e     \u003cth\u003eExpression\u003c/th\u003e     \u003cth\u003eHas Operators?\u003c/th\u003e     \u003cth\u003eOperators\u003c/th\u003e     \u003cth\u003eAre we done?\u003c/th\u003e     \u003cth\u003eNext Step\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e3*(10-4)\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003e\n\u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e()\u003c/code\u003e\n\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eZoom in on new sub-expression in \u003ccode\u003e()\u003c/code\u003e because of [PEMDAS][]\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e(10-4)\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eEvaluate sub-expressions\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e10\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eNONE\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003eZoom in on expression \u003ccode\u003e10\u003c/code\u003e. Constant expression! Return the value of the constant, we're done!\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e4\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eNONE\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003eZoom in on expression \u003ccode\u003e4\u003c/code\u003e. Constant expression! Return the value of the constant, we're done!\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e(10-4)\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eReplace \u003ccode\u003e( 10 - 4 )\u003c/code\u003e with application of \u003ccode\u003e-\u003c/code\u003e to \u003ccode\u003e10\u003c/code\u003e and \u003ccode\u003e4\u003c/code\u003e making \u003ccode\u003e6\u003c/code\u003e\n\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e3*6\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eZoom out and replace the sub-expression with its value we just determined\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eNONE\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003eZoom in on expression \u003ccode\u003e3\u003c/code\u003e. Constant expression! Return the value of the constant, we're done!\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e6\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eNONE\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003eZoom in on expression \u003ccode\u003e6\u003c/code\u003e. Constant expression! Return the value of the constant, we're done!\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e3*6\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eApply \u003ccode\u003e*\u003c/code\u003e to \u003ccode\u003e3\u003c/code\u003e and \u003ccode\u003e6\u003c/code\u003e making \u003ccode\u003e18\u003c/code\u003e\n\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e18\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eNO\u003c/td\u003e     \u003ctd\u003eNONE\u003c/td\u003e     \u003ctd\u003eYES\u003c/td\u003e     \u003ctd\u003eConstant expression! Return the value of the constant, we're done!\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWhile the \u003cem\u003econstant expression\u003c/em\u003e might seem dull, it lets us (and JavaScript) know when expression evaluation is done \u003cem\u003eand\u003c/em\u003e establishes a groundwork for all the following expressions. The first rule of Aristotle's logic is \u003ccode\u003eA is A\u003c/code\u003e; the constant expression provides a similar \"foundation\" for programming.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.mathsisfun.com/operation-order-pemdas.html\"\u003eOrder of Operations: PEMDAS\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"verify-and-troubleshoot-your-wsl2-environment-setup","title":"Verify and Troubleshoot your WSL2 Environment Setup","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-verification\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-verification\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-verification/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eAction Item\u003c/h2\u003e  \u003col\u003e \u003cli\u003eOpen your \"Ubuntu\" application\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecurl -so- https://raw.githubusercontent.com/learn-co-curriculum/flatiron-manual-setup-validator/master/wsl-phase-0-manual-setup-validator.sh | bash 2\u0026gt; /dev/null\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eCheck Your Work\u003c/h2\u003e  \u003cp\u003eIf all checks pass, you have completed your environment setup and are ready to move on!\u003c/p\u003e  \u003cp\u003eIt may be that you are setup correctly, but the validator script can't tell. If there is some sort of error, revisit the instructions for the item that is not passing. If you can run the commands listed in the \u003cstrong\u003eCheck Your Work\u003c/strong\u003e section of that item, you should be all set and can disregard the validator.\u003c/p\u003e  \u003ch3\u003eFixing NVM and RVM Issues for WSL2\u003c/h3\u003e  \u003cp\u003eIf you are having trouble getting RVM, Ruby, NVM, or Node to work, you may have an issue with your \u003ccode\u003e.bashrc\u003c/code\u003e file. To fix, we need to run two commands.\u003c/p\u003e  \u003cp\u003eThe first command makes a backup of your current \u003ccode\u003e.bashrc\u003c/code\u003e file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emv ~/.bashrc{,.bak} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe second command replaces the contents of your \u003ccode\u003e.bashrc\u003c/code\u003e file with a default file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecurl -sSL https://raw.githubusercontent.com/flatiron-school/dotfiles/master/minimal-bashrc \u0026gt; ~/.bashrc \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eClose and reopen your terminal. With a new \u003ccode\u003e.bashrc\u003c/code\u003e file, we can now test out each tool.\u003c/p\u003e  \u003ch4\u003eVerify RVM is Installed\u003c/h4\u003e  \u003cp\u003eTo confirm that RVM is working, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ervm \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see a long message ending in \u003ccode\u003e“For additional documentation please visit https://rvm.io”\u003c/code\u003e, RVM is installed. \u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf the command \u003ccode\u003ervm\u003c/code\u003e is not recognized, do the following in your terminal:\u003c/p\u003e  \u003col\u003e \u003cli\u003eType \u003ccode\u003esudo apt-get install software-properties-common\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esudo -E apt-add-repository -y ppa:rael-gc/rvm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esudo apt-get update\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esudo apt-get install rvm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003esource /etc/profile.d/rvm.sh\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eClose the \"Ubuntu\" application\u003c/li\u003e \u003cli\u003eReopen the \"Ubuntu\" application\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ervm\u003c/code\u003e and press \u003c/li\u003e \u003c/ol\u003e \u003c/blockquote\u003e  \u003ch4\u003eVerify Ruby is Installed\u003c/h4\u003e  \u003cp\u003eTo confirm Ruby is installed, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ervm list \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see \u003ccode\u003e=* ruby-2.7.2\u003c/code\u003e, Ruby is installed and 2.7.2 set as the default version and you are all set for Ruby.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf you do not see \u003ccode\u003eruby-2.7.2\u003c/code\u003e at all, install it with the following command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ervm install ruby-2.7.2 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf \u003ccode\u003eruby-2.7.2\u003c/code\u003e is listed, but is not preceded by \u003ccode\u003e=*\u003c/code\u003e, make it the default version by running:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ervm use 2.7.2 --default \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e  \u003ch4\u003eVerify NVM is installed\u003c/h4\u003e  \u003cp\u003eTo confirm NVM is installed, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003envm \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see a message ending with \u003ccode\u003e“Note: to remove, delete, or uninstall nvm…”\u003c/code\u003e, NVM is installed. \u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf the \u003ccode\u003envm\u003c/code\u003e command is not recognized, install NVM with the following command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.36.0/install.sh | bash \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eClose and reopen the \"Terminal\" application, then run \u003ccode\u003envm\u003c/code\u003e again.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch4\u003eVerify Node is Installed\u003c/h4\u003e  \u003cp\u003eTo confirm Node is installed, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003envm list \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see a message starting with “-\u0026gt; v14.13.0” (or any number higher than this), a version of Node is installed that will work for this course. \u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf you don't see this number, install a new version of Node:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003envm install node \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e  \u003ch3\u003eEnabling Virtualization In the BIOS\u003c/h3\u003e  \u003cp\u003eFor most Windows machines, enabling WSL and the Virtual Machine Platform should be enough to get Ubuntu running. Some devices, however, require an additional step - enabling hardware virtualization in the BIOS.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eWARNING:\u003c/strong\u003e Fiddling with your BIOS settings can \u003cstrong\u003etrash your PC\u003c/strong\u003e! Be careful when making changes. Consult your manufacturer’s help pages or search for online advice about your specific make and model.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eAccessing your BIOS is typically done by rebooting your computer and hitting a specific key, usually \u003ccode\u003eDEL\u003c/code\u003e, \u003ccode\u003eF2\u003c/code\u003e, or \u003ccode\u003eF10\u003c/code\u003e, as the system starts. In the BIOS, look for \u003cstrong\u003eVirtualization Technology, VTx\u003c/strong\u003e or something similar.\u003c/p\u003e","frontPage":false},{"exportId":"css-validation-lab","title":"CSS Validation Lab","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"css-essentials-css-issue-bot-9000\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-css-issue-bot-9000/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-css-issue-bot-9000\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-css-issue-bot-9000/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eAlthough today's browsers are becoming more capable of handing errors in CSS,\nsome errors are not always caught gracefully. This variable can make it\nextremely difficult to apply style or layout consistently. What can be done to\nquickly scan our CSS documents for issues? Let's practice using the W3C's CSS\nValidator!\u003c/p\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eChange invalid CSS to valid CSS\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eChange Invalid CSS to Valid CSS\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we will be taking the invalid CSS in \u003ccode\u003ecss/style.css\u003c/code\u003e and changing it to valid.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eClick the \"OPEN\" button. \u003c/li\u003e\n\u003cli\u003eOpen index.html in your browser. Notice how our styles don't look quite right? \u003c/li\u003e\n\u003cli\u003eOpen css/style.css in your text editor.\u003c/li\u003e\n\u003cli\u003eVisit the W3C CSS validator \u003ca href=\"http://jigsaw.w3.org/css-validator/#validate_by_input\"\u003ehttp://jigsaw.w3.org/css-validator/#validate\u003cem\u003eby\u003c/em\u003einput\u003c/a\u003e. If not already selected, click on the tab labeled \"By direct input\".\u003c/li\u003e\n\u003cli\u003eCopy the code from css/style.css and paste it into the text area. Click the \"Check\" button.\u003c/li\u003e\n\u003cli\u003eUse the error messages to correct the CSS. \u003c/li\u003e\n\u003cli\u003eRepeat steps 3-5 until your readout states \"Congratulations! No Error Found.\".\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eRemember to check your progress in \u003ccode\u003eindex.html\u003c/code\u003e in your browser!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith a CSS validator, you can work your way through cleaning up errors in a CSS\ndocument and reduce the likelihood of display errors across platforms. Using the\nW3C CSS validator will help you quickly and efficiently troubleshoot your CSS.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"http://jigsaw.w3.org/css-validator/#validate_by_input\"\u003eW3C CSS Validator - Validate Direct Input\u003c/a\u003e\u003c/p\u003e","frontPage":false},{"exportId":"configuring-git-and-github-on-wsl2","title":"Configuring Git and GitHub on WSL2","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-git-github\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-git-github\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-git-github/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eCreate a GitHub Account\u003c/h2\u003e  \u003cp\u003eTo work on and get credit for the labs and lessons that you work on during the program, you will need to sign up for a GitHub account \u003cem\u003eif you don’t already have one\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \u003ca href=\"https://github.com/join\"\u003eGitHub signup webpage\u003c/a\u003e at \u003ca href=\"https://github.com/join\"\u003ehttps://github.com/join\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003eFill out the form and create your account\u003c/li\u003e \u003cli\u003eVerify the email address connected to your GitHub account\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/mFZOVj8hago\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you were able to verify your email address, continue below.\u003c/p\u003e  \u003ch2\u003eConfigure Git and GitHub\u003c/h2\u003e  \u003cp\u003eGit is the tool that we’ll use to download and upload the work we do in labs and lessons. To use Git without signing in every time, you can create a Secure Shell (SSH) key and associate that to your GitHub account. Lastly, you will want to run a few commands to make sure that when you use Git, you get the proper credit for your work. This step will ask you to do work both in your browser and your terminal.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global color.ui true\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global user.name\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + your name and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global user.email\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + the email address you used to sign up to GitHub and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003essh-keygen\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e, for each prompt \u003cstrong\u003edo not type anything\u003c/strong\u003e, just continue to press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global init.defaultBranch main\u003c/code\u003e to \u003ca href=\"https://github.com/github/renaming\"\u003eupdate the default branch name\u003c/a\u003e to \u003ccode\u003emain\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecat ~/.ssh/id_rsa.pub | clip.exe\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. This will copy your SSH key to your clipboard\u003c/li\u003e \u003cli\u003eOpen the \u003ca href=\"https://github.com/settings/ssh/new\"\u003eGitHub New SSH key form\u003c/a\u003e (\u003ca href=\"https://github.com/settings/ssh/new\"\u003ehttps://github.com/settings/ssh/new\u003c/a\u003e) \u003cem\u003e(Note: you need to be logged in to GitHub to access that link.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eType \"My personal PC\" in the \"Title\" input field\u003c/li\u003e \u003cli\u003ePaste what’s on your clipboard from step seven in the \"Key\" input field\u003c/li\u003e \u003cli\u003eClick \"Add SSH Key\"\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ZosWXqhYD00\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you see your new SSH key beneath the \"SSH keys\" heading, continue to the next lesson, \u003cstrong\u003eVerify and Troubleshoot Your WSL2 Environment Setup\u003c/strong\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"html-validation","title":"HTML Validation","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-fundamentals-validation\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-fundamentals-validation/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-fundamentals-validation\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-fundamentals-validation/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eIdentify W3C organization\u003c/li\u003e\n\u003cli\u003eValidate sample HTML\u003c/li\u003e\n\u003cli\u003eIdentify HTML errors\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou have written a few HTML pages by now. Did you accidentally break nesting and\nput emphasis on a whole page? Or did you type \u003ccode\u003e\u0026lt;he\u0026gt;\u003c/code\u003e instead of \u003ccode\u003e\u0026lt;h3\u0026gt;\u003c/code\u003e? How can\nwe guard HTML? Many editors try to catch errors for us, and most browsers are\npretty good at guessing what you meant. But what happens when Windows Edge\nguesses differently than Google Chrome? How can we be certain that our HTML\nmeets standards and is error free? Luckily, the W3C – the people who define the\ntags of HTML – have a validation service we can use. We'll explain the W3C and\ntheir validator in this lesson.\u003c/p\u003e\n\n\u003ch2\u003eIdentify W3C organization\u003c/h2\u003e\n\n\u003cp\u003eThe World Wide Web Consortium (W3C) is an international community that develops\nopen standards to ensure the long-term growth of the web. It operates under a\nstrict \u003ca href=\"https://www.w3.org/Consortium/cepc/\"\u003ecode of ethics and professional\nconduct\u003c/a\u003e and provides many \u003ca href=\"https://www.w3.org/developers/tools/\"\u003efree\ntools\u003c/a\u003e for developers.\u003c/p\u003e\n\n\u003ch2\u003eValidate sample HTML\u003c/h2\u003e\n\n\u003cp\u003eTake a look at this file: \u003ca href=\"https://curriculum-content.s3.amazonaws.com/web-development/html-validation/example_code.html\"\u003e\u003ccode\u003eexample_code.html\u003c/code\u003e\u003c/a\u003e in a new tab. We'll\ncall this the \u003cstrong\u003eviewing tab\u003c/strong\u003e. It looks relatively OK, right? There's some\noddness happening with the list at the bottom (we might not have wanted\neverything hyperlinked), and there's an odd bullet point with no content, but\neverything else looks pretty good.\u003c/p\u003e\n\n\u003cp\u003eNow let's try validating the code to identify where we went wrong.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIn your \u003cstrong\u003eviewing tab\u003c/strong\u003e, navigate View → Developer → View Source\n\u003cem\u003eor\u003c/em\u003e press Command-Option-U. This will give you the \"Source View\" of the\ndocument\u003c/li\u003e\n\u003cli\u003eSelect the whole of the HTML contents in the file, and copy them\u003c/li\u003e\n\u003cli\u003eIn your web browser, open a new tab to \u003ca href=\"https://validator.w3.org/#validate_by_input\"\u003eW3C's HTML Validator\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eIf not already selected, select the tab that says \"Validate by Direct Input\"\u003c/li\u003e\n\u003cli\u003ePaste all of your copied HTML in the text box labeled \"Enter the Markup to\nvalidate:\"\u003c/li\u003e\n\u003cli\u003eClick the button labeled \"Check\"\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAs you scroll down the page, you should see a list of errors, or invalid HTML.\u003c/p\u003e\n\n\u003ch3\u003eWhat is HTML Validation?\u003c/h3\u003e\n\n\u003cp\u003eLike all other programming languages, HTML can contain all kinds of different\nerrors. These can range from missing angle brackets to wrong or missing opening\nor closing tags, unnecessary or missing attributes, and many other issues. Our\nweb browsers are pretty good at filling in the missing pieces but we can't\nalways count on it being the same experience with every one. Tools like W3C's\nHTML Validator can catch these errors and prevent our user from having a poor\nexperience.\u003c/p\u003e\n\n\u003ch2\u003eIdentifying HTML Errors\u003c/h2\u003e\n\n\u003cp\u003eNow that we have a page full of HTML validation errors, how do we start fixing\nthem? There are several parts of the error message that will help us parse the\nerror, and figure out exactly where it is and what we can do to fix it.\u003c/p\u003e\n\n\u003ch3\u003eError Description\u003c/h3\u003e\n\n\u003cp\u003eThe first line of the error is our error description. This is a narrative that\ngives us a little bit more information about our error.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/html-error-description.png\" alt=\"HTMLValidationErrors\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn this case, it's saying that there was an ending \u003ccode\u003e\u0026lt;/h2\u0026gt;\u003c/code\u003e tag, but there was a\ndifferent opening tag that came before it.\u003c/p\u003e\n\n\u003ch3\u003eError Location\u003c/h3\u003e\n\n\u003cp\u003eThe second and third lines of this error give us the exact location of the\nerror, as well as a highlighted snippet of our HTML to help us exactly locate\nwhere the error is.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/html-error-location.png\" alt=\"HTMLValidationErrorLocation\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn this case, it's letting us know that our error is on line 10, from column\n34-38. Line numbers will become very important in troubleshooting errors, in\nJavaScript and CSS as well as HTML. These error messages can serve as a road map\nto us, and help us troubleshoot much more efficiently.\u003c/p\u003e\n\n\u003ch3\u003eA Valid HTML Experience  Now, let's see what a valid HTML file returns\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://curriculum-content.s3.amazonaws.com/web-development/html-validation/example_code_passing_validation.html\"\u003e\u003ccode\u003eexample_code_passing_validation.html\u003c/code\u003e\u003c/a\u003e file in a new\ntab. This will now be our new \u003cstrong\u003eviewing tab\u003c/strong\u003e\n\u003c/li\u003e\n\u003cli\u003eIn your \u003cstrong\u003eviewing tab\u003c/strong\u003e, navigate View → Developer → View Source\n\u003cem\u003eor\u003c/em\u003e press Command-Option-U. This will give you the \"Source View\" of the\ndocument\u003c/li\u003e\n\u003cli\u003eSelect the whole of the HTML contents in the file, and copy them\u003c/li\u003e\n\u003cli\u003eIn your web browser, navigate to \u003ca href=\"https://validator.w3.org/#validate_by_input\"\u003eW3C's HTML Validator\u003c/a\u003e in a new\ntab\u003c/li\u003e\n\u003cli\u003eIf not already selected, select the tab that says \"Validate by Direct\nInput\"\u003c/li\u003e\n\u003cli\u003ePaste all of your copied HTML in the text box labeled \"Enter the Markup to\nvalidate:\"\u003c/li\u003e\n\u003cli\u003eClick the button labeled \"Check\"\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eYou should see a green bar denoting that there are no errors or warnings to\nshow.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/html-passing-validation.png\" alt=\"HTMLValidationPassed\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.w3.org/\"\u003eW3C\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://validator.w3.org/\"\u003eHTML Validation Tool\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://validator.w3.org/docs/why.html\"\u003eWhy Validate?\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=nYglnxMUixM\"\u003eVideo Walk-Through of HTML Validation\u003c/a\u003e\u003c/p\u003e","frontPage":false},{"exportId":"setting-up-wsl2","title":"Setting Up WSL2","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-windows-subsystem-linux\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-windows-subsystem-linux\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-windows-subsystem-linux/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eWindows Subsystem Linux (WSL) is \u003cstrong\u003enot\u003c/strong\u003e automatically enabled on windows. So, to start, we need to enable it!\u003c/p\u003e  \u003ch2\u003eEnable the Windows Subsystem for Linux (WSL) and Virtual Machine Platform\u003c/h2\u003e  \u003cp\u003eNow that we know your computer is ready for the rest of the environment setup, we need to enable two more settings before moving on. We’ll be using the Windows Subsystem for Linux (WSL) and the Virtual Machine Platform to create a space on our computer for our Ubuntu operating system.\u003c/p\u003e  \u003ch3\u003eAction Item: Enable Windows Subsystem for Linux (WSL) and Virtual Machine Platform Settings\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Turn windows features on and off\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eCheck the box next to \"Virtual Machine Platform\"\u003c/li\u003e \u003cli\u003eCheck the box next to \"Windows Subsystem for Linux\"\u003c/li\u003e \u003cli\u003eClick \"OK\" to save your work; your computer should restart\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/FNW1CktP_m8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you can check both of those checkboxes and your computer restarts, continue below. Otherwise, reach out to your teaching team for next steps.\u003c/p\u003e  \u003ch2\u003eSet up the \"Ubuntu\" Application\u003c/h2\u003e  \u003cp\u003eAfter you have installed the \"Ubuntu\" application from the Microsoft Store and enabled Windows Subsystem for Linux (WSL) and the Virtual Machine Platform, we have to set up the Ubuntu operating system.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eWhen it says \"Enter new UNIX username:\" add a simple username and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: usernames may not start with a number, usernames may not include capital letters)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eWhere it says \"New password:\" add a simple password and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: you will not see any text when you are typing your password.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eWhere it says \"Retype new password:\" retype the same password from before and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eThe terminal should output \"Installation successful!\" and then print about 50 lines that you can ignore\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ZFXI7vGFdng\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eNow, the last line in your \"Ubuntu\" application should say your username + \"@DESKTOP\" + some random numbers and letters. If you see that, continue below.\u003c/p\u003e  \u003ch2\u003eUpdate the Windows Subsystem for Linux (WSL) to WSL 2\u003c/h2\u003e  \u003cp\u003eNow that we have the Windows Subsystem for Linux (WSL) enabled and we have the \"Ubuntu\" application installed, we can update WSL to version 2 and update the \"Ubuntu\" application to use WSL 2.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eDownload the WSL Update file by visiting the following webpage in your browser: \u003ca href=\"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\"\u003ehttps://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003eOpen the file, follow the prompts, allow the program to make changes to your device, and click \"Finish\"\u003c/li\u003e \u003cli\u003eSearch for the \"Command Prompt\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eSelect \"Run as administrator\" from the right side of the search window\u003c/li\u003e \u003cli\u003eAllow the program to make changes to your device and wait for the \"Command Prompt\" application to open\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ewsl --set-default-version 2\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e (Note: you should see a message starting with \"For information on key differences…\")\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ewsl --set-version Ubuntu 2\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eWait for the \"Conversion complete\" or \"This distribution is already the requested version\" message in the terminal\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/7IxV_ARTAoo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dvqSkrK-q6g\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you saw the \"Conversion complete\" or \"This distribution is already the requested version\" message in the \"Command Prompt\" application, close the \"Command Prompt\" application and continue below.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you encounter an error message that you need to enable the Virtual Machine Platform, but you've already enabled it, you may not be able to use WSL2. However, you may still be able to use WSL1. Run  \u003ccode\u003ewsl --set-default-version 1\u003c/code\u003e, then run \u003ccode\u003ewsl --set-version Ubuntu 1\u003c/code\u003e. Wait for  the \"Conversion complete\" or \"This distribution is already the requested  version\" message in the terminal, then continue on with these instructions.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConfigure VS Code to Work with WSL\u003c/h2\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Visual Studio Code\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eClick \"View\" in the toolbar, then click \"Extensions\" in the dropdown menu, or use the shortcut \u003ccode\u003e\u0026lt;Control\u0026gt;\u003c/code\u003e + \u003ccode\u003e\u0026lt;Shift\u0026gt;\u003c/code\u003e + X\u003c/li\u003e \u003cli\u003eSearch for \"Remote - WSL\" and click on the item in the list with the same name (Note: the description should start with \"Open any folder in the Windows Subsystem for Linux (WSL) …\")\u003c/li\u003e \u003cli\u003eClick the \"Install\" button near the top of the page\u003c/li\u003e \u003cli\u003eClick \"Terminal\" in the toolbar, then click \"New Terminal\" (Note: a new terminal should appear at the bottom of your VS Code window)\u003c/li\u003e \u003cli\u003eClick on the dropdown in the terminal that says \"1: powershell\" and choose \"Select Default Profile\"\u003c/li\u003e \u003cli\u003eA dropdown should appear at the top of your VS Code window\u003c/li\u003e \u003cli\u003eClick on \"Ubuntu (WSL)\" to enable VS Code to display your Ubuntu terminal\u003c/li\u003e \u003cli\u003eClose the \"Visual Studio Code\" application\u003c/li\u003e \u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecode\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wUmNR1ip7ck\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/giY_9z096vo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf the \"Visual Studio Code\" application opens when you type \u003ccode\u003ecode\u003c/code\u003e in the \"Ubuntu\" application, continue to the next lesson, \u003cstrong\u003eInstalling Node on WSL2\u003c/strong\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"intro-to-css","title":"Intro to CSS","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"css-essentials-introduction-to-css\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-introduction-to-css/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-introduction-to-css\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-introduction-to-css/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify the differences between HTML and CSS\u003c/li\u003e\n\u003cli\u003eList the basic characteristics of CSS\u003c/li\u003e\n\u003cli\u003eDeclare CSS properties and values\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eBrowsers combine the content (HTML) and presentation (CSS) layers to\ndisplay web pages. CSS — Cascading Style Sheets — is the language we use for styling web pages.\u003c/p\u003e\n\n\u003cp\u003eCSS instructions live apart from the HTML elements and have a different look and\nfeel (\"syntax\"). CSS directives give web pages their specific appearance. If you\nhave ever been impressed by how a website can be displayed on a desktop browser\nwhile the same content looks great on a mobile device, you have CSS to thank for\nit!\u003c/p\u003e\n\n\u003cp\u003eOne of the most amazing displays of the power of CSS is the\n\u003ca href=\"http://www.csszengarden.com/\"\u003eCSS Zen Garden\u003c/a\u003e where people take the \u003cem\u003eexact\nsame\u003c/em\u003e HTML page and use CSS to create \u003cem\u003ewildly\u003c/em\u003e different pages. Take a look!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/introduction-to-css/zengarden1.png\" alt=\"CSS Zen Garden 1\" title=\"A long-scrolling single-page CSS Zen Garden design\"\u003e\n\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/introduction-to-css/zengarden2.png\" alt=\"CSS Zen Garden 2\" title=\"An animated CSS, full-screen browser single-page style Zen Garden design\"\u003e\n\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/introduction-to-css/zengarden3.png\" alt=\"CSS Zen Garden 3\" title=\"Blog-like CSS Zen Garden designs\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLike we said: all the difference between these images is created by CSS!\nAstounding, right!?\u003c/p\u003e\n\n\u003cp\u003eWe know now what CSS is and its purpose, so how does it differ from HTML and\nhow can we use it?\u003c/p\u003e\n\n\u003ch2\u003eIdentify the Differences Between HTML and CSS\u003c/h2\u003e\n\n\u003cp\u003eHTML and CSS play two different roles. When we write HTML, we focus on\nstructure, hierarchy, and meaning — the \"marking-up\" of content.\nQuestions in the mind of an HTML author are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIs it best to list these members' names with numbers, or bullets?\u003c/li\u003e\n\u003cli\u003eDoes this menu belong in the navigation in the header?\u003c/li\u003e\n\u003cli\u003eShould this additional reference be an aside, or a separate section?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese questions deal with structure, hierarchy, and meaning, which\nare concerns of the content layer (HTML).\u003c/p\u003e\n\n\u003cp\u003eWhen defining the presentation layer (CSS), here are the questions we ask\nourselves:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDo we want the header menu to be stationary, or does it scroll with the\nbrowser window?\u003c/li\u003e\n\u003cli\u003eHow do we want the content to display inside of a container? For example,\ndoes it fill the whole area, edge-to-edge? Is there white space around\nthe content and/or the container?\u003c/li\u003e\n\u003cli\u003eHow large should an \u003ccode\u003eH1\u003c/code\u003e be relative to an \u003ccode\u003eH2\u003c/code\u003e? What about an \u003ccode\u003eH3\u003c/code\u003e?\u003c/li\u003e\n\u003cli\u003eWhat properties should links have? Underline or no underline?\nWhich color for the normal state versus the hover state? Should the\nvisited link state be different?\u003c/li\u003e\n\u003cli\u003eHow should the content appear when on a desktop machine versus a\nmobile device?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAs you ask yourself these questions, your focus is on the \u003cem\u003eaesthetic\u003c/em\u003e quality\nof the page. For each bit of \u003cem\u003econtent\u003c/em\u003e we can define a \u003cem\u003epresentation rule\u003c/em\u003e\nthat will change the way the HTML is displayed.\u003c/p\u003e\n\n\u003ch2\u003eList the Basic Characteristics of CSS\u003c/h2\u003e\n\n\u003cp\u003eFor each \u003cem\u003epresentation rule\u003c/em\u003e, there are 3 things to keep in mind:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWhat is the specific HTML we want to style?\u003c/li\u003e\n\u003cli\u003eWhat are the qualities we want to modify (e.g. the properties of text\nin a paragraph)?\u003c/li\u003e\n\u003cli\u003e\n\u003cem\u003eHow\u003c/em\u003e do we want to modify the qualities of the element (e.g. font\nfamily, font color, font size, line height, letter spacing etc.)?\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOnce you've decided what to modify and how, we can start writing CSS rules.\u003c/p\u003e\n\n\u003cp\u003eCSS selectors are a way of declaring which HTML elements you wish to style.\nSelectors can appear a few different ways:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe type of HTML element(\u003ccode\u003eh1\u003c/code\u003e, \u003ccode\u003ep\u003c/code\u003e, \u003ccode\u003ediv\u003c/code\u003e, etc.)\u003c/li\u003e\n\u003cli\u003eThe value of an element's \u003ccode\u003eid\u003c/code\u003e or \u003ccode\u003eclass\u003c/code\u003e (\u003ccode\u003e\u0026lt;p id='idvalue'\u0026gt;\u0026lt;/p\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;p\nclass='classname'\u0026gt;\u0026lt;/p\u0026gt;\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eThe value of an element's attributes (\u003ccode\u003evalue=\"hello\"\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eThe element's relationship with surrounding elements (a \u003ccode\u003ep\u003c/code\u003e within an element\nwith class of \u003ccode\u003e.infobox\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor example if you want the body of the page to have a black background, your\nselector syntax may be \u003ccode\u003ehtml\u003c/code\u003e or \u003ccode\u003ebody\u003c/code\u003e. For anchors, your selector would be\n\u003ccode\u003ea\u003c/code\u003e. A few more examples are listed below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/*\u003cbr\u003eThe CSS comment syntax is text between \"slash-star\" and \"star-slash\"\u003cbr\u003e*/\u003cbr\u003e\u003cbr\u003e/*\u003cbr\u003eselects all anchor tag elements in the document (e.g. \u0026lt;a href=\"page-link.html\"\u0026gt;Page Link\u0026lt;/a\u0026gt;)\u003cbr\u003e*/\u003cbr\u003ea\u003cbr\u003e\u003cbr\u003e/*\u003cbr\u003eselects all headers of type h3 in the document (e.g. \u0026lt;h3\u0026gt;Type selectors\u0026lt;/h3\u0026gt;)\u003cbr\u003e*/\u003cbr\u003eh3\u003cbr\u003e\u003cbr\u003e/*\u003cbr\u003eselects all paragraph elements in the document (e.g. \u0026lt;p\u0026gt;Type selectors are used\u003cbr\u003eto...\u0026lt;/p\u0026gt;)\u003cbr\u003e*/\u003cbr\u003ep\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\"\u003eType selectors documentation\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe element type \u003ccode\u003eclass\u003c/code\u003e is a commonly used selector. Class selectors are used\nto \u003cstrong\u003eselect all elements that share a given class name\u003c/strong\u003e. The class selector\nsyntax is: \u003ccode\u003e.classname\u003c/code\u003e. Prefix the class name with a '.'(period).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/*\u003cbr\u003eselect all elements that have the 'important-topic' classname (e.g. \u0026lt;h1 class='important-topic'\u0026gt;\u003cbr\u003eand \u0026lt;h1 class='important-topic'\u0026gt;)\u003cbr\u003e*/\n.important-topic\u003cbr\u003e\u003cbr\u003e/*\u003cbr\u003eselect all elements that have the 'helpful-hint' classname (e.g. \u0026lt;p class='helpful-hint'\u0026gt;\u003cbr\u003eand \u0026lt;p class='helpful-hint'\u0026gt;)\u003cbr\u003e*/\n.helpful-hint\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can also use the \u003ccode\u003eid\u003c/code\u003e selector to style elements. However, \u003cstrong\u003ethere should\nbe only one element with a given id\u003c/strong\u003e in an HTML document. This can make\nstyling with the ID selector ideal for one-off styles. The \u003ccode\u003eid\u003c/code\u003e selector syntax\nis: \u003ccode\u003e#idvalue\u003c/code\u003e. Prefix the id attribute of an element with a \u003ccode\u003e#\u003c/code\u003e (which is\ncalled \"octothorpe,\" \"pound sign\", or \"hashtag\").\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/*\u003cbr\u003eselects the HTML element with the id 'main-header' (e.g. \u0026lt;h1 id='main-header'\u0026gt;)\u003cbr\u003e*/\u003cbr\u003e#main-header\u003cbr\u003e\u003cbr\u003e/*\u003cbr\u003eselects the HTML element with the id 'welcome-message' (e.g. \u0026lt;p id='welcome-message'\u0026gt;)\u003cbr\u003e*/\u003cbr\u003e#welcome-message\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors\"\u003eid selectors documentation\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eDeclare CSS Properties and Values\u003c/h2\u003e\n\n\u003cp\u003eEach element has a list of qualities that can be styled. CSS \"property\" names\nidentify those qualities. For text styling, examples of property names include\ntext \u003ccode\u003ecolor\u003c/code\u003e, \u003ccode\u003etext-align\u003c/code\u003e and \u003ccode\u003eline-height\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eCSS Property Values are directly related to property names. If we are working\nwith the \u003ccode\u003ecolor\u003c/code\u003e property, the value could be a named color such as \u003ccode\u003ered\u003c/code\u003e, or\n\u003ccode\u003e#660000\u003c/code\u003e. Some properties have their values set with words, others with\nnumbers, and some can take both.\u003c/p\u003e\n\n\u003cp\u003eA CSS property name with a CSS property value is a \u003cstrong\u003eCSS declaration\u003c/strong\u003e.\nTo apply a CSS declaration like \u003ccode\u003ecolor: blue\u003c/code\u003e to a specific HTML\nelement, you need to combine your CSS declaration with a CSS selector. The\nassociation between one or more CSS declarations and a CSS selector is called a\n\u003cstrong\u003eCSS declaration block\u003c/strong\u003e. CSS declarations (one or more) that applied to a\nspecific selector are wrapped by curly braces (\u003ccode\u003e{ }\u003c/code\u003e).  Each declaration inside\na declaration block \u003cstrong\u003emust\u003c/strong\u003e be separated by a semi-colon (\u003ccode\u003e;\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eBelow is a sample CSS declaration block.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eselector {\u003cbr\u003e  color: blue;\u003cbr\u003e}\u003cbr\u003e/*\u003cbr\u003eThis is a css declaration for a selector\u003cbr\u003e'color' is a property name and 'blue' is a css property value\u003cbr\u003e!!!!! CSS declarations must end with a semi-colon (;) !!!!!\u003cbr\u003e*/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's write a more complete example declaration block.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e/*\u003cbr\u003eThe CSS declaration block below:\u003cbr\u003e* Will apply to all `h1` elements\u003cbr\u003e* Will change the text color to blue\u003cbr\u003e* Will set the font family to Georgia\u003cbr\u003e*/\u003cbr\u003eh1 {\u003cbr\u003e  color: blue;\u003cbr\u003e  font-family: Georgia;\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith the combination of HTML and CSS, you are able to define content,\nstructure, and style to websites. Using a CSS selector like \u003ccode\u003eh1\u003c/code\u003e or \u003ccode\u003ep\u003c/code\u003e paired\nwith a declaration block, you will change the display of that element.\nDeclaration blocks are collections of CSS properties and values.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS\"\u003eMozilla Developer Network: Introduction to CSS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"verify-and-troubleshoot-your-macos-environment-setup","title":"Verify and Troubleshoot your macOS Environment Setup","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-verification\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-verification\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-verification/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eAction Item\u003c/h2\u003e  \u003col\u003e \u003cli\u003eOpen your \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecurl -so- https://raw.githubusercontent.com/learn-co-curriculum/flatiron-manual-setup-validator/master/mac-os-phase-0-validation-script | zsh 2\u0026gt; /dev/null\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eCheck Your Work\u003c/h2\u003e  \u003cp\u003eIf all checks pass, you have completed your environment setup and are ready to move on!\u003c/p\u003e  \u003cp\u003eIf something does not pass, that is okay. Revisit the installation instructions for the item that did not pass. If you are able to run the commands listed in the \u003cstrong\u003eCheck Your Work\u003c/strong\u003e section for that item, this may just be an issue with the validator.\u003c/p\u003e  \u003ch2\u003eTroubleshooting\u003c/h2\u003e  \u003ch3\u003eFixing NVM and RVM Dotfile Issues for MacOS\u003c/h3\u003e  \u003cp\u003eIf you are having trouble getting RVM, Ruby, NVM, or Node to work, you may have an issue with your \u003ccode\u003e.zshrc\u003c/code\u003e file. To fix, we need to run two commands.\u003c/p\u003e  \u003cp\u003eThe first command makes a backup of your current \u003ccode\u003e.zshrc\u003c/code\u003e file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emv ~/.zshrc{,.bak} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe second command replaces the contents of your \u003ccode\u003e.zshrc\u003c/code\u003e file with a default dot file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecurl -sSL https://raw.githubusercontent.com/flatiron-school/dotfiles/master/.zshrc \u0026gt; ~/.zshrc \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eClose and reopen your terminal. With a new \u003ccode\u003e.zshrc\u003c/code\u003e file, we can now test out each tool.\u003c/p\u003e  \u003ch3\u003eVerify RVM is Installed\u003c/h3\u003e  \u003cp\u003eTo confirm that RVM is working, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ervm \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see a long message ending in \u003ccode\u003e“For additional documentation please visit https://rvm.io”\u003c/code\u003e, RVM is installed.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf the command \u003ccode\u003ervm\u003c/code\u003e is not recognized, do the following in your terminal:\u003c/p\u003e  \u003col\u003e \u003cli\u003eType \u003ccode\u003ebrew install gmp\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ebrew install gnupg\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecurl -sSL https://rvm.io/mpapis.asc | gpg --import -\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecurl -sSL https://rvm.io/pkuczynski.asc | gpg --import -\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003e\\curl -sSL https://get.rvm.io | bash\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e \u003cli\u003eReopen the \"Terminal\" application\u003c/li\u003e \u003c/ol\u003e \u003c/blockquote\u003e  \u003ch3\u003eVerify Ruby is Installed\u003c/h3\u003e  \u003cp\u003eTo confirm Ruby is installed, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ervm list \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see \u003ccode\u003e=* ruby-2.7.2\u003c/code\u003e, Ruby is installed and 2.7.2 set as the default version and you are all set for Ruby.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf you do not see \u003ccode\u003eruby-2.7.2\u003c/code\u003e at all, install it with the following command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026gt; rvm install ruby-2.7.2\u003cbr\u003e\u0026gt; ```\u003cbr\u003e\u003cbr\u003eIf `ruby-2.7.2` is listed, but is not preceded by `=*`, make it the default version by running:\u003cbr\u003e\u003cbr\u003e```sh\u003cbr\u003e\u0026gt; rvm use 2.7.2 --default\u003cbr\u003e\u0026gt; ``` \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e  \u003ch3\u003eVerify NVM is installed\u003c/h3\u003e  \u003cp\u003eTo confirm NVM is installed, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003envm \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see a message ending with \u003ccode\u003e“Note: to remove, delete, or uninstall nvm…”\u003c/code\u003e, NVM is installed. \u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf the \u003ccode\u003envm\u003c/code\u003e command is not recognized or you see an error \u003ccode\u003ecomplete:13: command not found: compdef\u003c/code\u003e, run the following command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026gt; curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\u003cbr\u003e\u0026gt; ``` \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e  \u003ch3\u003eVerify Node is Installed\u003c/h3\u003e  \u003cp\u003eTo confirm Node is installed, run:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003envm list \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see a message starting with “-\u0026gt; v14.13.0” (or any number higher than this), a version of Node is installed that will work for this course.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eIf you don't see this number, install the newest version of Node:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026gt; nvm install node\u003cbr\u003e\u0026gt; ``` \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e","frontPage":false},{"exportId":"working-with-strings","title":"Working With Strings","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-working-with-strings\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-working-with-strings\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-working-with-strings/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eRecognize how to declare a \u003ccode\u003eString\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003cem\u003einterpolation\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eExplain how different quote characters allow flexibility\u003c/li\u003e \u003cli\u003eJoin \u003ccode\u003eString\u003c/code\u003es using \u003ccode\u003e+\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThus far in programming as conversation, we've used numbers as data most of the time. Numbers are great because they reach across languages and cultures. But there are times when we need our programs to return information in the form of text. In this lesson, we'll learn more about using text (i.e. \u003ccode\u003eString\u003c/code\u003es) in our JavaScript expressions.\u003c/p\u003e  \u003ch2\u003eRecognize How to Declare a \u003ccode\u003eString\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eWe declare \u003ccode\u003eString\u003c/code\u003es most often by enclosing our text in double quotes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst greeting = \"Hello, folks\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe letters inside of a \u003ccode\u003eString\u003c/code\u003e are often called \"characters.\"\u003c/p\u003e  \u003cp\u003eThe pair of matching \u003ccode\u003e\"\u003c/code\u003es are called \"\u003ccode\u003eString\u003c/code\u003e delimiters\" because they form a boundary or \u003cem\u003elimit\u003c/em\u003e around the characters that make up the \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe can also declare \u003ccode\u003eString\u003c/code\u003es by putting the characters in single quotes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst greeting = 'Hello, folks'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eor backticks:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst greeting = `Hello, folks`; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSingle quotes and double quotes can be used interchangeably in JavaScript — they are treated the same. Using backticks to enclose a string, however, brings some additional capabilities. A string enclosed in backticks forms a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"\u003etemplate literal\u003c/a\u003e, which allows you to \u003cem\u003einterpolate\u003c/em\u003e data into the \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eDefine \u003cem\u003einterpolation\u003c/em\u003e\n\u003c/h2\u003e  \u003cp\u003eString \u003cem\u003einterpolation\u003c/em\u003e is the process of injecting the value of an expression (often, but not necessarily, the \u003cem\u003evariable lookup expression\u003c/em\u003e) into a \u003ccode\u003eString\u003c/code\u003e. You wrap the expression inside the \u003cem\u003einterpolation operator\u003c/em\u003e which lets JavaScript know that it should interpret the value of the expression, convert it to a \u003ccode\u003eString\u003c/code\u003e if necessary, and insert it into the containing \u003ccode\u003eString\u003c/code\u003e where the \u003cem\u003einterpolation operator\u003c/em\u003e appeared.\u003c/p\u003e  \u003cp\u003eThe \u003cem\u003einterpolation operator\u003c/em\u003e looks like this: \u003ccode\u003e${}\u003c/code\u003e. When it appears in a backtick-delimited \u003ccode\u003eString\u003c/code\u003e, the return value of the expression inside the operator is \"plugged in\" to the containing \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIn a single or double-quoted \u003ccode\u003eString\u003c/code\u003e there is no interpolation possible. JavaScript would not interpret the value inside the \u003ccode\u003e${}\u003c/code\u003e; instead, it would create a literal string containing the operator and whatever expression is inside it.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst barkCount = 3\u003cbr\u003econst backtick = `Byron barks ${barkCount} times` //=\u0026gt; \"Byron barks 3 times\"\u003cbr\u003econst singleQuote = 'Byron barks ${barkCount} times' //=\u0026gt; \"Byron barks ${barkCount} times\"\u003cbr\u003econst doubleQuote = \"Byron barks ${barkCount} times\" //=\u0026gt; \"Byron barks ${barkCount} times\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe expression inside the \u003ccode\u003e${}\u003c/code\u003e does not need to be a variable lookup. Any expression, i.e., any statement that returns a value, can be used:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst byron = `Byron is ${2+3} years old` //=\u0026gt; \"Byron is 5 years old\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere JavaScript knows to interpret the value inside the interpolation operator because the string is enclosed in backticks. It evaluates the expression (\u003ccode\u003e2 + 3\u003c/code\u003e yields the value \u003ccode\u003e5\u003c/code\u003e), turns the result into a string and inserts it in place.\u003c/p\u003e  \u003ch2\u003eExplain How Different Quote Characters Allow Flexibility\u003c/h2\u003e  \u003cp\u003eWhat if you needed to store some \u003cem\u003edialog\u003c/em\u003e as a \u003ccode\u003eString\u003c/code\u003e:\u003c/p\u003e  \u003cp\u003eIn the book it would look like:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\"Wait,\" said Jo, \"Do not go without me!\"\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eIf we want to create a string containing this text, we might try wrapping the whole thing in quotes, like this:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\"\"Wait,\" said Jo, \"Do not go without me!\"\"\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eHowever, because \u003ccode\u003e\"\u003c/code\u003e is the \u003ccode\u003eString\u003c/code\u003e delimiter, JavaScript would get confused. It would attempt to end the \u003ccode\u003eString\u003c/code\u003e right before the \u003ccode\u003eW\u003c/code\u003e as the two \u003ccode\u003e\"\u003c/code\u003es \"delimit\" the \u003ccode\u003eString\u003c/code\u003e.  Not what we wanted.\u003c/p\u003e  \u003cp\u003eTo fix this, we can use single quotes as our delimiter instead:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst littleWomanEsque = '\"Wait,\" said Jo, \"Do not go without me!\"' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBecause the opening delimiter of the \u003ccode\u003eString\u003c/code\u003e was \u003ccode\u003e'\u003c/code\u003e, JavaScript will \"close\" the \u003ccode\u003eString\u003c/code\u003e at the next \u003ccode\u003e'\u003c/code\u003e — at the very end. Inside of the single quotes, the \u003ccode\u003e\"\u003c/code\u003e loses its meaning of \"here's a \u003ccode\u003eString\u003c/code\u003e\" and, instead, is just a plain literal,  letter-like character \u003ccode\u003e\"\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eBut oh my goodness, what if the speaker said \u003ccode\u003eDon't\u003c/code\u003e instead of \u003ccode\u003eDo not\u003c/code\u003e.  That would break our \u003ccode\u003eString\u003c/code\u003e \u003cem\u003eagain\u003c/em\u003e as JavaScript attempted to use the \u003ccode\u003e'\u003c/code\u003e inside \u003ccode\u003eDon't\u003c/code\u003e as the closing delimiter.\u003c/p\u003e  \u003cp\u003eSometimes we need to tell JavaScript, \"Don't use this \u003ccode\u003e'\u003c/code\u003e or \u003ccode\u003e\"\u003c/code\u003e as a \u003ccode\u003eString\u003c/code\u003e delimiter. To do this we need \u003cem\u003eescaping\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eWe can \"escape\" the power of \u003ccode\u003e\"\u003c/code\u003e or \u003ccode\u003e'\u003c/code\u003e to close a \u003ccode\u003eString\u003c/code\u003e by putting a \u003ccode\u003e\\\u003c/code\u003e in front of it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst littleWomanEsque = '\"Wait,\" said Jo, \"Don\\'t go without me!\"' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWithout the backslash, JavaScript would interpret the apostrophe inside \u003ccode\u003e\"Don't\"\u003c/code\u003e as the end of the string, and we'd end up with a mess. \u003cstrong\u003e\u003cem\u003eBUT\u003c/em\u003e\u003c/strong\u003e since there is a \u003ccode\u003e\\\u003c/code\u003e immediately before the second \u003ccode\u003e'\u003c/code\u003e (the apostrophe), thus \u003cem\u003eescaping\u003c/em\u003e it, JavaScript says \"Oh you mean to use this as a character, not as a \u003ccode\u003eString\u003c/code\u003e delimiter. I'll find the next unescaped \u003ccode\u003e'\u003c/code\u003e.\"\u003c/p\u003e  \u003cp\u003eIt doesn't find an unescaped \u003ccode\u003e'\u003c/code\u003e until the very end, just like we want.\u003c/p\u003e  \u003ch2\u003eJoin \u003ccode\u003eString\u003c/code\u003es using \u003ccode\u003e+\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eWe already know that we can use \u003ccode\u003e+\u003c/code\u003e as an arithmetical operator to add two \u003ccode\u003eNumber\u003c/code\u003es together. But we can also use it as a \u003ccode\u003eString\u003c/code\u003e operator: when placed between two \u003ccode\u003eString\u003c/code\u003es, it joins them and returns a \u003cstrong\u003e\u003cem\u003enew\u003c/em\u003e\u003c/strong\u003e \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eYou may want to follow along with the examples in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst firstName = \"Byronius\";\u003cbr\u003econst clanName = \"Karbitus\";\u003cbr\u003econst commonName = \"Maris\";\u003cbr\u003elet fullName;\u003cbr\u003e\u003cbr\u003e// With +\u003cbr\u003efullName = firstName + \" \" + clanName + \" \" + commonName; //=\u0026gt; \"Byronius Karbitus Maris\"\u003cbr\u003e\u003cbr\u003e// Or, with interpolation\u003cbr\u003efullName = `${firstName} ${clanName} ${commonName}`; //=\u0026gt; \"Byronius Karbitus Maris\"\u003cbr\u003e\u003cbr\u003e// Keep in mind it returns a _new_ String; therefore:\u003cbr\u003efirstName;  //=\u0026gt; \"Byronius\"\u003cbr\u003eclanName;   //=\u0026gt; \"Karbitus\"\u003cbr\u003ecommonName; //=\u0026gt; \"Maris\"\u003cbr\u003efullName;   //=\u0026gt; \"Byronius Karbitus Maris\" \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eA Warning About Mixing Data Types\u003c/h3\u003e  \u003cp\u003eRecall from the lesson on data types that JavaScript, unlike some other programming languages, will bend over backwards to return a value instead of throwing a type error. This means that the following will work in JavaScript:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst fact = \"Byron is \"; // fact is of type `String`\u003cbr\u003econst tail = \" years old\"; // tail is of type `String`\u003cbr\u003econst age = 5; // age is of type `Number`\u003cbr\u003e\u003cbr\u003efact + age + tail; //=\u0026gt; \"Byron is 5 years old\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we were to try this in Ruby or Python, we would get an error, but JavaScript returns what it \u003cem\u003ethinks\u003c/em\u003e we meant to do. While in this case this seems pretty reasonable, there are times when JavaScript's behavior will yield unexpected results. For this reason, best practice is \u003cstrong\u003enot\u003c/strong\u003e to depend on JavaScript to handle mixed data types in this way. A better way to handle this situation is by using interpolation instead:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst fact = \"Byron is\"; \u003cbr\u003econst tail = \"years old\"; \u003cbr\u003econst age = 5; \u003cbr\u003e\u003cbr\u003e`${fact} ${age} ${tail}`; //=\u0026gt; \"Byron is 5 years old\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, by using backticks and the interpolation operator, we are explicitly telling JavaScript to \u003cem\u003einterpret\u003c/em\u003e the expression inside the \u003ccode\u003e${}\u003c/code\u003e, convert it to a string (if necessary), and insert it into our String.\u003c/p\u003e  \u003cp\u003eAnother alternative is to use JavaScript's \u003ccode\u003etoString()\u003c/code\u003e method:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst fact = \"Byron is \"; // fact is of type `String`\u003cbr\u003econst tail = \" years old\"; // tail is of type `String`\u003cbr\u003econst age = 5; // age is of type `Number`\u003cbr\u003e\u003cbr\u003efact + age.toString() + tail; //=\u0026gt; \"Byron is 5 years old\" \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eWhen to Use \u003ccode\u003e+\u003c/code\u003e vs. \u003ccode\u003e${}\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThe choice of whether to use \u003ccode\u003e+\u003c/code\u003e or interpolation is, to a certain extent, a matter of personal preference — you can accomplish what you need to using either method. That said, however, JavaScript programmers tend to use interpolation more often than \u003ccode\u003e+\u003c/code\u003e. As you gain experience working with strings, you may find that using interpolation results in cleaner code that's easier to read. As a general rule, if the string you're constructing is simple and short, using \u003ccode\u003e+\u003c/code\u003e may be cleaner but you may want to consider using interpolation with more complex strings.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we learned how to declare \u003ccode\u003eString\u003c/code\u003es, how to interpolate the value of expressions into \u003ccode\u003eString\u003c/code\u003es, how to use different quote delimiters and escaping to create more complicated \u003ccode\u003eString\u003c/code\u003es, and a couple different methods for joining \u003ccode\u003eString\u003c/code\u003es.\u003c/p\u003e","frontPage":false},{"exportId":"variation-on-selection","title":"Variation on Selection","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-switch-statements\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-switch-statements/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-switch-statements\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-switch-statements/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn to use the \u003ccode\u003eswitch\u003c/code\u003e statement\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've now learned about two of the three \u003cem\u003eselection\u003c/em\u003e tools available to us in\nJavaScript: the \u003ccode\u003eif\u003c/code\u003e statement and the \u003ccode\u003eternary\u003c/code\u003e expression. In this lesson,\nwe'll learn about a third: the \u003ccode\u003eswitch\u003c/code\u003e statement. The \u003ccode\u003eswitch\u003c/code\u003e statement\nprovides an alternate way of expressing conditional code that is less repetitive\nin cases where you want to test multiple conditions against a single value.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-2/sequence-and-comments/Selection_thick.png\" alt=\"Seelection Image\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eLearn to Use the Switch Statement\u003c/h2\u003e\n\n\u003cp\u003eLet's say we have a program that includes a variable containing a person's name\nand we want to execute certain code depending on what that person's name is.\nUsing an \u003ccode\u003eif...else if\u003c/code\u003e construction, that might look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst name = \"Alice\";\u003cbr\u003elet greeting;\u003cbr\u003e\u003cbr\u003eif (name === \"Alice\") {\u003cbr\u003e  greeting = \"Hello, Alice!\"\u003cbr\u003e} else if (name === \"The White Rabbit\") {\u003cbr\u003e  greeting = \"Don't be late, White Rabbit\"\u003cbr\u003e} else if (name === \"The Mad Hatter\") {\u003cbr\u003e  greeting = \"Welcome to the tea party, Mad Hatter\"\u003cbr\u003e} else if (name === \"The Queen of Hearts\") {\u003cbr\u003e  greeting = \"Please don't chop off my head!\"\u003cbr\u003e} else {\u003cbr\u003e  greeting = \"Whoooo are you?\"\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003egreeting;\u003cbr\u003e//=\u0026gt; \"Hello, Alice!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs we can see, there's quite a bit of repetition here: we always test \u003ccode\u003ename\u003c/code\u003e and\nwe always compare with \u003ccode\u003e===\u003c/code\u003e. This is a pretty common selection need. It's so\nstandard that the \u003ccode\u003eswitch\u003c/code\u003e statement was created to enable us to streamline our\ncode. Here's the \u003ccode\u003eswitch\u003c/code\u003e version of the code above:\u003c/p\u003e\n\n\u003cp\u003e\u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/PreemptiveSlipperyPassword?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\n\u003cp\u003eThe JavaScript engine compares the value passed in to the \u003ccode\u003eswitch\u003c/code\u003e statement\n(here, \u003ccode\u003ename\u003c/code\u003e) against each of the \u003ccode\u003ecase\u003c/code\u003e values \u003cem\u003eusing strict equality\u003c/em\u003e\n(\u003ccode\u003e===\u003c/code\u003e). When a match is found, the statements nested under that \u003ccode\u003ecase\u003c/code\u003e are\nexecuted. In this example, by using the \u003ccode\u003eswitch\u003c/code\u003e statement, we avoid the need to\nrepeat the \u003ccode\u003eif (name === _____)\u003c/code\u003e line for each possibility.\u003c/p\u003e\n\n\u003cp\u003eWe can also assign the same set of statements to multiple cases:\u003c/p\u003e\n\n\u003cp\u003e\u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/AgedTubbyUserinterface?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the above example, if the \u003ccode\u003ename\u003c/code\u003e variable matches the names of any of the\ndwarves, the \u003ccode\u003echaracterType\u003c/code\u003e variable will be set to \"dwarf\".\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003edefault\u003c/code\u003e and \u003ccode\u003ebreak\u003c/code\u003e keywords are both \u003cem\u003eoptional\u003c/em\u003e in \u003ccode\u003eswitch\u003c/code\u003e statements,\nbut can be useful. In more complicated statements, they become necessary to\nensure the correct flow.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003edefault\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003edefault\u003c/code\u003e keyword is similar to the \u003ccode\u003eelse\u003c/code\u003e clause in an \u003ccode\u003eif...else\u003c/code\u003e\nconstruction. It specifies a set of statements to run after all of the \u003ccode\u003eswitch\u003c/code\u003e\nstatement's \u003ccode\u003ecase\u003c/code\u003es have been checked. However, it is different from an \u003ccode\u003eelse\u003c/code\u003e\nin that \u003cstrong\u003ethe only time it does \u003cem\u003enot\u003c/em\u003e run is if the engine hits a \u003ccode\u003ebreak\u003c/code\u003e in one\nof the \u003ccode\u003ecase\u003c/code\u003e statements\u003c/strong\u003e. If you only want one code block in your \u003ccode\u003eswitch\u003c/code\u003e\nstatement to execute, you should always include the \u003ccode\u003ebreak\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eIn the previous example, \u003ccode\u003ebreak\u003c/code\u003e is used to stop the \u003ccode\u003eswitch\u003c/code\u003e statement from\ncontinuing to look at case statements once it finds a match. If we left out the\n\u003ccode\u003ebreak\u003c/code\u003e keywords, the \"Grumpy\" case would match and \"dwarf\" would be assigned to\n\u003ccode\u003echaracterType\u003c/code\u003e. However, since we didn't break after that assignment, the code\nwould continue to execute and \u003ccode\u003echaracterType\u003c/code\u003e would wind up being reset to\n\"minor character.\" To keep that from happening, we use \u003ccode\u003ebreak\u003c/code\u003e to tell the\nJavaScript engine to stop executing the \u003ccode\u003eswitch\u003c/code\u003e statement as soon as it finds a\nmatch. You will often see switch statements where \u003ccode\u003ebreak\u003c/code\u003e is used in every case\nas a way to ensure there is no unexpected behavior from multiple cases\nexecuting.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e Sometimes we \u003cem\u003ewant\u003c/em\u003e to potentially match multiple cases, and we\nwill need to leave out \u003ccode\u003ebreak\u003c/code\u003e in order to do this. Let's revisit an example\nfrom the lesson on \u003ccode\u003eif\u003c/code\u003e statements:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst age = 20;\u003cbr\u003elet isAdult, canWork, canEnlist, canDrink;\u003cbr\u003e\u003cbr\u003eif (age \u0026gt;= 21) {\u003cbr\u003e  isAdult = true;\u003cbr\u003e  canWork = true;\u003cbr\u003e  canEnlist = true;\u003cbr\u003e  canDrink = true;\u003cbr\u003e} else if (age \u0026gt;= 18) {\u003cbr\u003e  isAdult = true;\u003cbr\u003e  canWork = true;\u003cbr\u003e  canEnlist = true;\u003cbr\u003e} else if (age \u0026gt;= 16) {\u003cbr\u003e  canWork = true;\u003cbr\u003e}\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanWork;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanEnlist;\u003cbr\u003e// =\u0026gt; true\u003cbr\u003e\u003cbr\u003ecanDrink;\u003cbr\u003e// =\u0026gt; undefined\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can refactor the above \u003ccode\u003eif...else if...else\u003c/code\u003e chain as a more compact, less\nrepetitious \u003ccode\u003eswitch\u003c/code\u003e statement. To make it work, we will employ a neat little\ntrick: we'll use comparisons for our \u003ccode\u003ecase\u003c/code\u003e statements instead of a simple\nvalue.\u003c/p\u003e\n\n\u003cp\u003e\u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/CleanMammothUsers?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\n\u003cp\u003eWe specified \u003ccode\u003etrue\u003c/code\u003e as the value to \u003ccode\u003eswitch\u003c/code\u003e on. All of our \u003ccode\u003ecase\u003c/code\u003es are\n\u003cem\u003ecomparison expressions\u003c/em\u003e that return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. Therefore, if a\ncomparison returns \u003ccode\u003etrue\u003c/code\u003e, its statements will be run. Because we did not include\nany \u003ccode\u003ebreak\u003c/code\u003e statements, once \u003cem\u003eone\u003c/em\u003e case statement matches, all subsequent\nstatements will execute. This is what we want here: if \u003ccode\u003eage\u003c/code\u003e is greater than 21,\nit's also greater than 18 and 16, so we want \u003cem\u003eall\u003c/em\u003e the assignments to be made.\u003c/p\u003e\n\n\u003cp\u003eIf we set \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e20\u003c/code\u003e in the above example, the first \u003ccode\u003ecase\u003c/code\u003e, \u003ccode\u003eage \u0026gt;= 21\u003c/code\u003e,\nreturns \u003ccode\u003efalse\u003c/code\u003e and the assignment of \u003ccode\u003ecanDrink\u003c/code\u003e never happens. The engine then\nproceeds to the next \u003ccode\u003ecase\u003c/code\u003e, \u003ccode\u003eage \u0026gt;= 18\u003c/code\u003e, which returns \u003ccode\u003etrue\u003c/code\u003e, assigning the\nvalue \u003ccode\u003etrue\u003c/code\u003e to \u003ccode\u003eisAdult\u003c/code\u003e and \u003ccode\u003ecanEnlist\u003c/code\u003e. Since it encounters no \u003ccode\u003ebreak\u003c/code\u003e\nstatement, it then proceeds to the last case statement where \u003ccode\u003ecanWork\u003c/code\u003e is set to\ntrue as well.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eYou now have three different tools available to you to use \u003cem\u003eselection\u003c/em\u003e in\nJavaScript: the \u003ccode\u003eif\u003c/code\u003e statement, the \u003ccode\u003eternary\u003c/code\u003e expression, and the \u003ccode\u003eswitch\u003c/code\u003e\nstatement. The \u003ccode\u003eif\u003c/code\u003e statement is the one you will use most often — in\nfact, you can \u003cem\u003ealways\u003c/em\u003e construct your conditional code using some combination of\n\u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eelse if\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e. It may not be the most efficient way to write the\ncode, but it will always do the trick.\u003c/p\u003e\n\n\u003cp\u003eAs a rule of thumb, you may find it makes sense to start with \u003ccode\u003eif\u003c/code\u003e statements\nand, once you've got the code working, consider refactoring it to use a ternary\nor switch statement if they're better suited for what you need to do.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMDN\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003e\u003ccode\u003eswitch\u003c/code\u003e statement\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"modifying-objects","title":"Modifying Objects","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-modifying-objects\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-modifying-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-modifying-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e property using dot or bracket notation\u003c/li\u003e \u003cli\u003eModify a property using dot or bracket notation\u003c/li\u003e \u003cli\u003eUpdate an \u003ccode\u003eObject\u003c/code\u003e nondestructively using the spread operator\u003c/li\u003e \u003cli\u003eUsing \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eUpdate an \u003ccode\u003eObject\u003c/code\u003e nondestructively using \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eRemove a property from an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eIdentify the relationship between \u003ccode\u003eArray\u003c/code\u003es and \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the previous lesson, we learned the basics of creating \u003ccode\u003eObject\u003c/code\u003es and accessing their properties. In this lesson we'll learn how to modify and remove properties, both destructively and nondestructively. Finally, we'll explore the relationship between \u003ccode\u003eArray\u003c/code\u003es and \u003ccode\u003eObject\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eAs always, don't forget to follow along in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003ch2\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e Property Using Dot or Bracket Notation\u003c/h2\u003e  \u003cp\u003eWe know how to initialize a variable by declaring it and assigning it a value using the assignment operator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst city = \"New York\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe process of creating a property inside an existing object is similar; we specify the key and assign it a value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst circle = {}; // Create `circle` and set it to an empty Object\u003cbr\u003e\u003cbr\u003ecircle;\u003cbr\u003e//=\u0026gt; {}\u003cbr\u003e\u003cbr\u003ecircle.radius = 5; // Create the key inside `circle` and set its value to 5 \u003cbr\u003e\u003cbr\u003ecircle;\u003cbr\u003e//=\u0026gt; { radius: 5 } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can do this using either dot or bracket notation, and we can use any expression as the value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst circle = {};\u003cbr\u003e\u003cbr\u003ecircle.radius = 5;\u003cbr\u003e\u003cbr\u003ecircle['diameter'] = 10;\u003cbr\u003e\u003cbr\u003ecircle.circumference = circle.diameter * Math.PI;\u003cbr\u003e//=\u0026gt; 31.41592653589793\u003cbr\u003e\u003cbr\u003ecircle['area'] = Math.PI * circle.radius ** 2;\u003cbr\u003e//=\u0026gt; 78.53981633974483\u003cbr\u003e\u003cbr\u003ecircle;\u003cbr\u003e//=\u0026gt; { radius: 5, diameter: 10, circumference: 31.41592653589793, area: 78.53981633974483 } \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eA Side Note\u003c/strong\u003e: Recall from the lesson on \u003ccode\u003eArray\u003c/code\u003es that we can add, modify or delete elements even if we use \u003ccode\u003econst\u003c/code\u003e to initialize the \u003ccode\u003eArray\u003c/code\u003e. The same thing applies here: we can add, modify or delete properties, but we can't reassign the variable itself.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Note that the process above gives us an alternative to typing out our \u003ccode\u003eObject\u003c/code\u003e using literal syntax: we can initialize an empty object and then use dot notation or bracket notation to create the properties programmatically. This approach is less error-prone than using literal syntax since JavaScript creates the correct \u003ccode\u003eObject\u003c/code\u003e syntax for us. Try it out in the REPL.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eModify a Property Using Dot or Bracket Notation\u003c/h3\u003e  \u003cp\u003eWe can update or overwrite existing properties simply by assigning a new value to an existing key:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mondayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Chèvre',\u003cbr\u003e    semiSoft: 'Gruyère',\u003cbr\u003e    hard: 'Manchego'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Curly',\u003cbr\u003e  salad: 'Cobb'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003emondayMenu.fries = 'Sweet potato';\u003cbr\u003e\u003cbr\u003emondayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Cobb\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that modifying an \u003ccode\u003eObject\u003c/code\u003e's properties in the way we did above is \u003cem\u003edestructive\u003c/em\u003e. This means that we're making changes directly to the original \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's take a look at an example. We'll start by creating a function to encapsulate this modification process:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction destructivelyUpdateObject (obj, key, value) {\u003cbr\u003e  obj[key] = value; //Why are we using bracket notation here?\u003cbr\u003e\u003cbr\u003e  return obj;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur function takes three arguments: the original menu \u003ccode\u003eObject\u003c/code\u003e, the \u003ccode\u003ekey\u003c/code\u003e identifying the property we want to update, and the \u003ccode\u003evalue\u003c/code\u003e we want to change its value to.\u003c/p\u003e  \u003cp\u003eAt our restaurant, we've finished serving for the day. It's time to update our \u003ccode\u003emondayMenu\u003c/code\u003e to the \u003ccode\u003etuesdayMenu\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mondayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Chèvre',\u003cbr\u003e    semiSoft: 'Gruyère',\u003cbr\u003e    hard: 'Manchego'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Cobb'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst tuesdayMenu = destructivelyUpdateObject(mondayMenu, 'salad', 'Caesar');\u003cbr\u003e\u003cbr\u003etuesdayMenu\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Caesar\" }\u003cbr\u003e\u003cbr\u003etuesdayMenu.salad;\u003cbr\u003e//=\u0026gt; \"Caesar\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLooks like our \u003ccode\u003etuesdayMenu\u003c/code\u003e came out perfectly. But what about \u003ccode\u003emondayMenu\u003c/code\u003e?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emondayMenu.salad;\u003cbr\u003e//=\u0026gt; \"Caesar\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eDang! We don't serve Caesar salad on Mondays. Instead of destructively updating the original menu, is there a way to nondestructively merge the change(s) into a new \u003ccode\u003eObject\u003c/code\u003e, leaving the original intact?\u003c/p\u003e  \u003ch2\u003eUpdate an Object Nondestructively Using the Spread Operator\u003c/h2\u003e  \u003cp\u003eLet's create a new method; it will take the same three arguments as the previous method:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  // Code to return new, updated menu object\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRecall from the lessons on \u003ccode\u003eArray\u003c/code\u003es that we can use the \u003cem\u003espread operator\u003c/em\u003e to copy all the elements of an existing array into a new array. We can do the same thing with \u003ccode\u003eObject\u003c/code\u003es. Let's use the spread operator to copy all of the old menu \u003ccode\u003eObject\u003c/code\u003e's properties into a new \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  const newObj = { ...obj };\u003cbr\u003e\u003cbr\u003e  // Code to return new, updated menu object goes here\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will create a clone of the original object and save it into a new variable. We can then update the newly-created \u003ccode\u003enewObj\u003c/code\u003e with the desired change and return that updated menu, leaving the original menu \u003ccode\u003eObject\u003c/code\u003e unchanged:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  const newObj = { ...obj };\u003cbr\u003e\u003cbr\u003e  newObj[key] = value;\u003cbr\u003e\u003cbr\u003e  return newObj;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst sundayMenu = nondestructivelyUpdateObject(tuesdayMenu, 'fries', 'Shoestring');\u003cbr\u003e\u003cbr\u003etuesdayMenu.fries;\u003cbr\u003e//=\u0026gt; \"Sweet potato\"\u003cbr\u003e\u003cbr\u003esundayMenu.fries;\u003cbr\u003e//=\u0026gt; \"Shoestring\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo review, we are calling our \u003ccode\u003enondestructivelyUpdateObject()\u003c/code\u003e function, passing as our arguments the original menu (\u003ccode\u003etuesdayMenu\u003c/code\u003e) and the key and value representing the desired change. The function first makes a copy of \u003ccode\u003etuesdayMenu\u003c/code\u003e, then changes the value associated with the \u003ccode\u003efries\u003c/code\u003e key to \u003ccode\u003e\"Shoestring\"\u003c/code\u003e. Finally, it returns the updated menu, which is stored into the variable \u003ccode\u003esundayMenu\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhile this works, it's quite a bit to write, and it's not very extensible. If we want to modify more than a single property, we'll have to completely rewrite our function! Luckily, JavaScript has a much better solution for us.\u003c/p\u003e  \u003ch2\u003eUsing \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eIn the previous lesson, we took a look at a couple of JavaScript's static \u003ccode\u003eObject\u003c/code\u003e methods, \u003ccode\u003eObject.keys()\u003c/code\u003e and \u003ccode\u003eObject.values()\u003c/code\u003e. A third method, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003e\u003ccode\u003eObject.assign()\u003c/code\u003e\u003c/a\u003e, will allow us to combine properties from multiple \u003ccode\u003eObject\u003c/code\u003es into a single \u003ccode\u003eObject\u003c/code\u003e. The method takes two or more \u003ccode\u003eObject\u003c/code\u003es as its arguments. The first argument passed to \u003ccode\u003eObject.assign()\u003c/code\u003e is the \u003ccode\u003eObject\u003c/code\u003e into which all of the properties will be merged. Every additional argument is an \u003ccode\u003eObject\u003c/code\u003e whose properties we want to merge into the first \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eObject.assign(initialObject, additionalObject, additionalObject, ...); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe return value of \u003ccode\u003eObject.assign()\u003c/code\u003e is the initial \u003ccode\u003eObject\u003c/code\u003e after all of the additional \u003ccode\u003eObject\u003c/code\u003es' properties have been merged in:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eObject.assign({ eggs: 3 }, { flour: '1 cup' });\u003cbr\u003e//=\u0026gt; { eggs: 3, flour: \"1 cup\" }\u003cbr\u003e\u003cbr\u003eObject.assign({ eggs: 3 }, { chocolateChips: '1 cup', flour: '2 cups' }, { flour: '1/2 cup' });\u003cbr\u003e// { eggs: 3, chocolateChips: \"1 cup\", flour: \"1/2 cup\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePay attention to the \u003ccode\u003eflour\u003c/code\u003e property in the above example. \u003cstrong\u003eIf multiple \u003ccode\u003eObject\u003c/code\u003es have a property with the same key, the last key to be defined wins out\u003c/strong\u003e. Essentially, the last call to \u003ccode\u003eObject.assign()\u003c/code\u003e in the above snippet is wrapping all of the following assignments into a single line of code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst recipe = { eggs: 3 };\u003cbr\u003e\u003cbr\u003erecipe.chocolateChips = '1 cup';\u003cbr\u003e\u003cbr\u003erecipe.flour = '2 cups';\u003cbr\u003e\u003cbr\u003erecipe.flour = '1/2 cup'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTry both approaches out in REPL and verify that they yield the same results.\u003c/p\u003e  \u003cp\u003eNote that the \u003ccode\u003eObject\u003c/code\u003e being passed as the first argument — in this case, recipe — is modified and returned at the end. So simply using \u003ccode\u003eObject.assign()\u003c/code\u003e does not make our function nondestructive. So how do we solve that problem? Well, the first argument we pass \u003cstrong\u003edoes not need to be an existing \u003ccode\u003eObject\u003c/code\u003e\u003c/strong\u003e!\u003c/p\u003e  \u003ch2\u003eUpdate an \u003ccode\u003eObject\u003c/code\u003e Nondestructively Using \u003ccode\u003eObject.assign()\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eA common pattern for \u003ccode\u003eObject.assign()\u003c/code\u003e is to provide an empty \u003ccode\u003eObject\u003c/code\u003e as the first argument. That way we're composing an entirely new \u003ccode\u003eObject\u003c/code\u003e instead of modifying or overwriting the properties of an existing \u003ccode\u003eObject\u003c/code\u003e. This pattern allows us to rewrite the above \u003ccode\u003edestructivelyUpdateObject()\u003c/code\u003e function in a nondestructive way:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  return Object.assign({}, obj, { [key]: value });\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe code above takes the first argument (an empty \u003ccode\u003eObject\u003c/code\u003e), adds all the properties in \u003ccode\u003eobj\u003c/code\u003e to it, then adds one final property consisting of the key and value that represent the change we want to make. If that key doesn't already exist in \u003ccode\u003eobj\u003c/code\u003e, it is added and its value is set to \u003ccode\u003evalue\u003c/code\u003e. If it does already exist, its old value is replaced by \u003ccode\u003evalue\u003c/code\u003e. Note that all the arguments to \u003ccode\u003eObject.assign()\u003c/code\u003e must be objects, so we're representing the key-value pair as an \u003ccode\u003eObject\u003c/code\u003e using literal syntax here. Finally, the resulting new \u003ccode\u003eObject\u003c/code\u003e is returned.\u003c/p\u003e  \u003cp\u003eIn other languages (like Ruby), this behavior is called \"merging.\" You take an original base \u003ccode\u003eObject\u003c/code\u003e (maybe with some typical \"standard\" attribute / value pairs already set), and then you \"merge\" in additional Object(s).\u003c/p\u003e  \u003cp\u003eLet's take a look at it using our \u003ccode\u003erecipe\u003c/code\u003e example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction nondestructivelyUpdateObject(obj, key, value) {\u003cbr\u003e  return Object.assign({}, obj, { [key]: value });\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst recipe = { eggs: 3 };\u003cbr\u003e\u003cbr\u003econst newRecipe = nondestructivelyUpdateObject(recipe, 'chocolate', '1 cup');\u003cbr\u003e//=\u0026gt; { eggs: 3, chocolate: \"1 cup\" }\u003cbr\u003e\u003cbr\u003enewRecipe;\u003cbr\u003e//=\u0026gt; { eggs: 3, chocolate: \"1 cup\" }\u003cbr\u003e\u003cbr\u003erecipe;\u003cbr\u003e//=\u0026gt; { eggs: 3 } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt's important that we merge everything into a new, empty \u003ccode\u003eObject\u003c/code\u003e. Otherwise, we would be modifying the original \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eSo now let's write a new function for our restaurant that uses this technique. We can also make one additional improvement: we can set up our function to take an \u003ccode\u003eObject\u003c/code\u003e containing the changes we want to make as an argument, rather than a single key and value. This enables us to make multiple changes with one call to the function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction createNewMenu (oldMenu, menuChanges) {\u003cbr\u003e  return Object.assign({}, oldMenu, menuChanges);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst tuesdayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Chèvre',\u003cbr\u003e    semiSoft: 'Gruyère',\u003cbr\u003e    hard: 'Manchego'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Caesar'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst newOfferings = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina',\u003cbr\u003e    hard: 'Provolone'\u003cbr\u003e  },\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst wednesdayMenu = createNewMenu(tuesdayMenu, newOfferings);\u003cbr\u003e\u003cbr\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\", hard: \"Provolone\" }, fries: \"Sweet potato\", salad: \"Southwestern\" }\u003cbr\u003e\u003cbr\u003etuesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Caesar\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that the value for \u003ccode\u003efries\u003c/code\u003e remains the same because our \u003ccode\u003enewOfferings\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e did not contain a change for that property. \u003cstrong\u003eHowever, this does not work for \u003cem\u003enested\u003c/em\u003e \u003ccode\u003eObjects\u003c/code\u003e.\u003c/strong\u003e For example, if \u003ccode\u003enewOfferings\u003c/code\u003e did not have an updated value for \u003ccode\u003ehard\u003c/code\u003e cheese:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst newOfferings = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina'\u003cbr\u003e  },\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur updated menu would not include that property and would look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\"}, fries: \"Sweet potato\", salad: \"Southwestern\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e... instead of the desired outcome of this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\", hard: \"Manchego\"}, fries: \"Sweet potato\", salad: \"Southwestern\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou don't need to worry about this too much for now: just be aware that this method does not create a \u003cem\u003edeep clone\u003c/em\u003e. You will learn how to do that later in the course.\u003c/p\u003e  \u003cp\u003eBon appétit!\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Doing nondestructive updates (i.e. \"creating new things and merging on top\") is a really important pattern. It turns out that, in many places, nondestructive updates are more performant. The main reason for this is when you add something to an existing \u003ccode\u003eObject\u003c/code\u003e, the computer has to make sure that the \u003ccode\u003eObject\u003c/code\u003e has enough room to add what you're saying to add. If it doesn't, the computer needs to do cleanup work, find some more space, copy the old thing over, add the new thing, and then resume work. That \"accounting\" process is actually quite slow.\u003c/p\u003e  \u003cp\u003eFurthermore, in the cloud-based world of programming we're moving to more and more, we can't be sure that two computers will share the same memory. They might be servers separated by centimeters or kilometers. Using nondestructive updates ensures that our functions have \"all they need\" to run a function call independently, i.e., they have their own copy of the data they need and aren't sharing memory with other machines.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eRemove a Property from an Object\u003c/h2\u003e  \u003cp\u003eUh oh, we ran out of Southwestern dressing, so we have to take the salad off the menu. In JavaScript, that's as easy as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst wednesdayMenu = {\u003cbr\u003e  cheesePlate: {\u003cbr\u003e    soft: 'Brie',\u003cbr\u003e    semiSoft: 'Fontina',\u003cbr\u003e    hard: 'Provolone'\u003cbr\u003e  },\u003cbr\u003e  fries: 'Sweet potato',\u003cbr\u003e  salad: 'Southwestern'\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003edelete wednesdayMenu.salad;\u003cbr\u003e//=\u0026gt; true\u003cbr\u003e\u003cbr\u003ewednesdayMenu;\u003cbr\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\", hard: \"Provolone\" }, fries: \"Sweet potato\" } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe pass the property that we'd like to remove to the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e operator, and JavaScript takes care of the rest. Poof! No more \u003ccode\u003esalad\u003c/code\u003e property on the \u003ccode\u003ewednesdayMenu\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eIdentify the Relationship Between Arrays and Objects\u003c/h2\u003e  \u003cp\u003eThink back to the early lesson on data types in JavaScript. We listed off seven types into which all data falls: numbers, strings, booleans, symbols, \u003ccode\u003eObject\u003c/code\u003es, \u003ccode\u003enull\u003c/code\u003e, and \u003ccode\u003eundefined\u003c/code\u003e. Notice anything missing? Arrays!\u003c/p\u003e  \u003cp\u003eWhy isn't an \u003ccode\u003eArray\u003c/code\u003e a fundamental data type in JavaScript? The answer is that \u003cstrong\u003eit's actually a special type of \u003ccode\u003eObject\u003c/code\u003e\u003c/strong\u003e. Yes, that's right: \u003cstrong\u003e\u003cem\u003e\u003ccode\u003eArray\u003c/code\u003es are \u003ccode\u003eObject\u003c/code\u003es\u003c/em\u003e\u003c/strong\u003e. To underscore this point, check out what the \u003ccode\u003etypeof\u003c/code\u003e operator returns when we use it on an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof [];\u003cbr\u003e//=\u0026gt; \"object\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can set properties on an \u003ccode\u003eArray\u003c/code\u003e just like a regular \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = [];\u003cbr\u003e\u003cbr\u003emyArray.summary = 'Empty array!';\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [summary: \"Empty array!\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd we can modify and access those properties, too:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray['summary'] = 'This array is totally empty.';\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [summary: \"This array is totally empty.\"]\u003cbr\u003e\u003cbr\u003emyArray.summary;\u003cbr\u003e//=\u0026gt; \"This array is totally empty.\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn fact, \u003cem\u003eeverything\u003c/em\u003e we just learned how to do to \u003ccode\u003eObject\u003c/code\u003es can also be done to \u003ccode\u003eArray\u003c/code\u003es because \u003ccode\u003eArray\u003c/code\u003es \u003cstrong\u003eare\u003c/strong\u003e \u003ccode\u003eObject\u003c/code\u003es. Just special ones. To see the special stuff, let's \u003ccode\u003e.push()\u003c/code\u003e some values into our \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray.push(2, 3, 5, 7);\u003cbr\u003e//=\u0026gt; 4\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [2, 3, 5, 7, summary: \"This array is totally empty.\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCool, looks like everything's still in there. What's your guess about the \u003ccode\u003eArray\u003c/code\u003e's \u003ccode\u003e.length\u003c/code\u003e?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 4 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHuh, that's interesting. Surely our \u003ccode\u003esummary\u003c/code\u003e must be the first element in the \u003ccode\u003eArray\u003c/code\u003e, no? After all, we did add it before we \u003ccode\u003e.push()\u003c/code\u003eed all those values in.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray[0];\u003cbr\u003e//=\u0026gt; 2 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHm, then maybe it's the last element?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray[myArray.length - 1];\u003cbr\u003e//=\u0026gt; 7 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat the heck? Where is it?\u003c/p\u003e  \u003cp\u003eYou see, one of the 'special' features of an \u003ccode\u003eArray\u003c/code\u003e is that \u003cstrong\u003eits \u003ccode\u003eArray\u003c/code\u003e-style elements are stored separately from its \u003ccode\u003eObject\u003c/code\u003e-style properties\u003c/strong\u003e. The \u003ccode\u003e.length\u003c/code\u003e property of an \u003ccode\u003eArray\u003c/code\u003e describes how many items exist in its special list of elements. Its \u003ccode\u003eObject\u003c/code\u003e-style properties are not included in that calculation.\u003c/p\u003e  \u003cp\u003eThis brings up an interesting question: if we add a new property to an \u003ccode\u003eArray\u003c/code\u003e that has a key of \u003ccode\u003e0\u003c/code\u003e, how does the JavaScript engine know whether it should be an \u003ccode\u003eObject\u003c/code\u003e-style property or an \u003ccode\u003eArray\u003c/code\u003e-style element?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = [];\u003cbr\u003e\u003cbr\u003emyArray[0] = 'Will this be an `Object` property or an `Array` element?';\u003cbr\u003e//=\u0026gt; \"Will this be an `Object` property or an `Array` element?\"\u003cbr\u003e\u003cbr\u003e// Moment of truth...\u003cbr\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [\"Will this be an `Object` property or an `Array` element?\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo JavaScript used that assignment operation to add a new \u003ccode\u003eArray\u003c/code\u003e-style element. What happens if we enclose the integer in quotation marks, turning it into a string?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray['0'] = 'What about this one?';\u003cbr\u003e//=\u0026gt; \"What about this one?\"\u003cbr\u003e\u003cbr\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [\"What about this one?\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is hitting on a fundamental truth: \u003cstrong\u003eall keys in \u003ccode\u003eObject\u003c/code\u003es and all indexes in \u003ccode\u003eArray\u003c/code\u003es are actually strings\u003c/strong\u003e. In \u003ccode\u003emyArray[0]\u003c/code\u003e we're using the integer \u003ccode\u003e0\u003c/code\u003e, but under the hood the JavaScript engine automatically converts that to the string \u003ccode\u003e\"0\"\u003c/code\u003e. When we access elements or properties of an \u003ccode\u003eArray\u003c/code\u003e, the engine routes all integers and integers masquerading as strings (e.g., \u003ccode\u003e'14'\u003c/code\u003e, \u003ccode\u003e\"953\"\u003c/code\u003e, etc.) to the \u003ccode\u003eArray\u003c/code\u003e's special list of elements, and it treats everything else as a simple \u003ccode\u003eObject\u003c/code\u003e property. For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = [2, 3, 5, 7];\u003cbr\u003e\u003cbr\u003emyArray['1'] = 'Hi';\u003cbr\u003e//=\u0026gt; \"Hi\"\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [2, \"Hi\", 5, 7]\u003cbr\u003e\u003cbr\u003emyArray['01'] = 'Ho';\u003cbr\u003e//=\u0026gt; \"Ho\"\u003cbr\u003e\u003cbr\u003emyArray;\u003cbr\u003e//=\u0026gt; [2, \"Hi\", 5, 7, 01: \"Ho\"]\u003cbr\u003e\u003cbr\u003emyArray[01];\u003cbr\u003e//=\u0026gt; \"Hi\"\u003cbr\u003e\u003cbr\u003emyArray['01'];\u003cbr\u003e//=\u0026gt; \"Ho\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter adding our weird \u003ccode\u003e'01'\u003c/code\u003e property, the \u003ccode\u003e.length\u003c/code\u003e property still returns \u003ccode\u003e4\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emyArray.length;\u003cbr\u003e//=\u0026gt; 4 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo it would stand to reason that \u003ccode\u003eObject.keys()\u003c/code\u003e would only return \u003ccode\u003e'01'\u003c/code\u003e, right?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eObject.keys(myArray);\u003cbr\u003e//=\u0026gt; [\"0\", \"1\", \"2\", \"3\", \"01\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUnfortunately not. The reason why \u003ccode\u003eArray\u003c/code\u003es have this behavior would take us deep inside the JavaScript source code, and it's frankly not that important. Just remember these simple guidelines, and you'll be just fine:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eFor accessing elements in an \u003ccode\u003eArray\u003c/code\u003e, always use integers\u003c/strong\u003e.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eBe wary of setting \u003ccode\u003eObject\u003c/code\u003e-style properties on an \u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e. There's rarely any reason to, and it's usually more trouble than it's worth.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eRemember that all \u003ccode\u003eObject\u003c/code\u003e keys, including \u003ccode\u003eArray\u003c/code\u003e indexes, are strings\u003c/strong\u003e. This will really come into play when we learn how to iterate over \u003ccode\u003eObject\u003c/code\u003es, so keep it in the back of your mind.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this and the previous lesson, we dug deep into \u003ccode\u003eObject\u003c/code\u003es in JavaScript. We identified what an \u003ccode\u003eObject\u003c/code\u003e is and how to access values stored in it. We also covered how to add and remove properties and how to use some of JavaScript's convenience methods (\u003ccode\u003eObject.keys()\u003c/code\u003e, \u003ccode\u003eObject.values()\u003c/code\u003e, and \u003ccode\u003eObject.assign()\u003c/code\u003e). We also explored the relationship between \u003ccode\u003eObject\u003c/code\u003es and \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\"\u003eObject basics\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003e\u003ccode\u003eObject.assign()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"aws-cloud9-environment-setup","title":"AWS Cloud9 Environment Setup","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-cloud9-aws-environment-setup\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-cloud9-aws-environment-setup/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-cloud9-aws-environment-setup\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-cloud9-aws-environment-setup/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThe following instructions are for setting up AWS Cloud9, a cloud-based Integrated Development Environment. These instructions are provided as an alternative to setting up a local environment on your personal computer. \u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you successfully configured your Mac or Windows computer in the previous modules, you do not need to set up the AWS Cloud9 Environment\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eIf you have not attempted to set up your local environment, we recommend trying to do so now before continuing:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/learn-co-curriculum/environment-mac-os-catalina-setup\"\u003eMacOS Environment Instructions\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/learn-co-curriculum/wsl2\"\u003eWindows 10 WSL2 Environment Instructions\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIf you attempted the instructions for your operating system but ran into issues with setup, AWS Cloud9 can serve as a temporary environment and will allow you to complete and store your Flatiron School coding work in your browser.\u003c/p\u003e  \u003ch2\u003eImportant Notices\u003c/h2\u003e  \u003cp\u003eThe AWS Cloud9 IDE shoud only be used as a temporary environment solution. Later portions of our course content require you to have a local environment. The Cloud9 IDE will allow you to focus on the early course content and maintaining a good pace rather than being totally blocked due to environment setup issues. We recommend that you continue to try and get your own local environment set up as you work through your lessons and assignments.\u003c/p\u003e  \u003cp\u003eUsing the Cloud9 IDE requires a credit card and may incur charges from AWS if used for an extended period of time. If you are a new AWS customer, you will have access to the AWS Free Tier, providing the Cloud9 IDE for free for 12 months. There are some \u003ca href=\"https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank\u0026amp;all-free-tier.sort-order=asc\u0026amp;awsf.Free%20Tier%20Types=*all\"\u003eresource limits\u003c/a\u003e, including a limit of 750 hours of use per month. Although we don't expect you to hit this limit (750 hours divided by 30 days is 25 hours per day), \u003ca href=\"https://aws.amazon.com/cloud9/pricing/\"\u003eAWS provides an example of what pricing might look like\u003c/a\u003e, should you hit a limit.\u003c/p\u003e  \u003ch2\u003eSetting Up Your AWS Account\u003c/h2\u003e  \u003cp\u003eThe first step in accessing the Cloud9 IDE set up is to sign up for your AWS Account. Go to \u003ca href=\"https://aws.amazon.com/cloud9/\"\u003ehttps://aws.amazon.com/cloud9/\u003c/a\u003e and click \u003cstrong\u003eGet Started with AWS Cloud9\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-get-started-button.png\" alt=\"cloud9 get started button\"\u003e\u003c/p\u003e  \u003cp\u003eTo continue, you will need to set up an AWS account. Fill out the required account and credit card billing information. Once you have set up your account, head back to theh \u003ca href=\"https://aws.amazon.com/cloud9/\"\u003ecloud9 landing page\u003c/a\u003e and click \u003cstrong\u003eSign in to the Console\u003c/strong\u003e in the upper right.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-sign-in-to-console.png\" height=\"50px\"\u003e\u003c/p\u003e  \u003cp\u003eThe AWS Management Console will load. In the \u003cstrong\u003eFind Services\u003c/strong\u003e search bar, search for \u003ccode\u003eCloud9\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-find-services-aws.png\" alt=\"find cloud9\"\u003e\u003c/p\u003e  \u003cp\u003eClicking on the Cloud9 result will bring you to your Cloud9 homepage. The URL will be unique, depending on what AWS servers are hosting your IDE. We recommend bookmarking this page to get back to it easily. If you have already created a Cloud9 IDE, the environment instance will be listed here. In our case, we want to click the \u003cstrong\u003eCreate environment\u003c/strong\u003e button.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-create-environment-button.png\" height=\"50px\"\u003e\u003c/p\u003e  \u003cp\u003eAWS will prompt you to give your environment a name and an optional description. Click \u003cstrong\u003eNext Step\u003c/strong\u003e when ready.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-environment-name-and-description.png\" alt=\"cloud9 name and description\"\u003e\u003c/p\u003e  \u003cp\u003eAfter naming the environment, you will need to select the Environment type and Instance type. Choose \u003cstrong\u003eCreate a new EC2 instance for environment (direct access)\u003c/strong\u003e for Environment type. For Instance type, choose \u003cstrong\u003et2.micro(1 GiB RAM + 1 vCPU)\u003c/strong\u003e. This is the only Instance type eligible for the AWS free-tier but is more than enough processing power for our purposes.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-environment-and-instance-settings.png\" alt=\"cloud9 environment and instance settings\"\u003e\u003c/p\u003e  \u003cp\u003eBelow these options, you'll have a choice of Platform and Cost-saving settings. Leave the default options - \u003cstrong\u003eAmazon Linux\u003c/strong\u003e and \u003cstrong\u003eAfter 30 minutes\u003c/strong\u003e. Click \u003cstrong\u003eNext Step\u003c/strong\u003e to move on.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-platform-and-cost-savings.png\" alt=\"cloud9 platform and cost savings options\"\u003e\u003c/p\u003e  \u003cp\u003eOn the final page, you will have a chance to review your settings.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-environment-settings-review-page.png\" alt=\"cloud9 environment review page\"\u003e\u003c/p\u003e  \u003cp\u003eIf everything looks correct, click \u003cstrong\u003eCreate environment\u003c/strong\u003e. Your new Cloud9 IDE will load in the browser window. It may take a few minutes for AWS to configure everything.\u003c/p\u003e  \u003cp\u003eWhen everything is loaded, you should see an AWS Cloud9 welcome page.\u003c/p\u003e  \u003ch2\u003eExploring the Cloud9 IDE\u003c/h2\u003e  \u003cp\u003eThe Cloud9 IDE is divided into three main sections.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eOn the left side of the screen is your directory navigation. As you work on various assignments, this section will become populated with files and folders.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-directory-navigation.png\" height=\"200px\"\u003e\u003c/p\u003e  \u003cul\u003e \u003cli\u003eAlong the bottom of the page is a terminal. You will use this terminal to write and execute commands. Click the terminal, type \u003ccode\u003eecho \"hello world\"\u003c/code\u003e, and press \u003ccode\u003eenter\u003c/code\u003e / \u003ccode\u003ereturn\u003c/code\u003e to test it out. The terminal will print out \u003ccode\u003ehello world\u003c/code\u003e in response.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-terminal-example.png\" alt=\"cloud9 terminal example\"\u003e\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThe IDE's central section (where you see the welcome page) will display file contents. Clicking on files in the directory navigation will open them up in this section.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/cloud9-nav-and-file-contents.png\" alt=\"cloud9 file contents sections\"\u003e\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you would like more space to type in your terminal or view file contents, you can click and drag the border just above the terminal to adjust the height of both.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eNow that you have your Cloud9 IDE up and running, it is time to do some configuration for this course.\u003c/p\u003e  \u003ch2\u003eConfigure the Cloud9 IDE\u003c/h2\u003e  \u003cp\u003eFor some of the content in this course, we'll need to install tools known as Ruby gems. These gems will help set up and test assignments you'll be working on. The only gem we need to install right now is \u003ccode\u003ebundler\u003c/code\u003e. \u003ccode\u003ebundler\u003c/code\u003e will actually help us in later lessons by installing \u003cem\u003eother\u003c/em\u003e gems we'll need.\u003c/p\u003e  \u003cp\u003eTo install \u003ccode\u003ebundler\u003c/code\u003e, type the following into the terminal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egem install bundler \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou should see a message \u003ccode\u003e1 gem installed\u003c/code\u003e once the installation is complete. \u003c/p\u003e  \u003ch2\u003eSetting up a GitHub Account\u003c/h2\u003e  \u003cp\u003eBefore we go any further, you will need a \u003ca href=\"https://github.com/\"\u003eGitHub\u003c/a\u003e account. GitHub will be necessary for working on lessons and assignments during the program.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \u003ca href=\"https://github.com/join\"\u003eGitHub signup webpage\u003c/a\u003e at \u003ca href=\"https://github.com/join\"\u003ehttps://github.com/join\u003c/a\u003e\n\u003c/li\u003e \u003cli\u003eFill out the form and create your account\u003c/li\u003e \u003cli\u003eVerify the email address connected to your GitHub account\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eConfigure Git\u003c/h2\u003e  \u003cp\u003eNow that you have a GitHub account, it is time to configure Git. Git is a command-line tool that will allow us to access content stored on GitHub, including the lessons and assignments in this course. Git will also allow us to upload work that \u003cem\u003eyou\u003c/em\u003e do. \u003c/p\u003e  \u003cp\u003eGit should already be installed on your Cloud9 IDE. However, at the moment, you will be prompted to enter your GitHub account info every time you want to upload work.\u003c/p\u003e  \u003cp\u003eTo use Git without signing in every time, we will go through the process of creating a Secure Shell (SSH) key and associating that to your GitHub account. The following steps will ask you to do work both in your browser and your terminal.\u003c/p\u003e  \u003ch2\u003eAction Items\u003c/h2\u003e  \u003col\u003e \u003cli\u003eClick on the terminal in the Cloud9 IDE\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global color.ui true\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global user.name\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + your name and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: this should be your full name, not your GitHub username, in quotes.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003egit config --global user.email\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + the email address you used to sign up to GitHub and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003essh-keygen\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eFor each prompt \u003cstrong\u003edo not type anything\u003c/strong\u003e, just continue to press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecat ~/.ssh/id_rsa.pub\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. Select and copy the output, starting with \u003ccode\u003essh-rsa\u003c/code\u003e. \u003c/li\u003e \u003cli\u003eOpen the \u003ca href=\"https://github.com/settings/ssh/new\"\u003eGitHub New SSH key form\u003c/a\u003e (\u003ca href=\"https://github.com/settings/ssh/new\"\u003ehttps://github.com/settings/ssh/new\u003c/a\u003e) \u003cem\u003e(Note: you need to be logged in to GitHub to access that link.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eType \"My Cloud9 IDE\" in the \"Title\" input field\u003c/li\u003e \u003cli\u003e\n\u003cp\u003ePaste what’s on your clipboard from step seven in the \"Key\" input field. Each key is unique, but it should look something like this (notice the beginning and end):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003essh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDWN9he+rGvUsQP\u003cbr\u003e0vldUZT7Z/nTCPqFAPqjiDhNX0SxKdlWeTvhHXjqFRzy0K3cXpgxe0NR\u003cbr\u003e/yLUphnFbsqCTzgLYTwMn/m8je/gOfPMtZcRuoOj69AJh5LM+TdLcFLZ\u003cbr\u003egL1sxjiLCcVO7Sn9ThTYEHSCsS6r2ZaTlFMfakeKBfH9pdWZHqR84pHP\u003cbr\u003eaq3QxkkrWC7RGrPsBPTYjLYuy7d3Mjw+fUar2oeLUpmMjxX8Fqs7Qf5L\u003cbr\u003eQR+4/MjA1PMVCVXSRDFUyDYZ756XBcnqQqyaJmSSfgSrk8OE3hqW\u003cbr\u003eMDFerSP0tzgq26YBWnqsqmCTrSiDgHzgSyO7B8FizTUgn/okdD1b \u003cbr\u003eec2-user@ip-174-35-43-2 \u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e \u003cli\u003e\u003cp\u003eClick \"Add SSH Key\"\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003cp\u003eIf you see your new SSH key beneath the \"SSH keys\" heading, continue below.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eYou've completed your Cloud9 environment setup and first assignment! You are now set to complete assignments in this first phase of this course. Equipped with this knowledge, you are now ready to tackle greater challenges!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://portal.flatironschool.com/\"\u003eFlatiron School\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/\"\u003eGitHub\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://aws.amazon.com/cloud9/\"\u003eAWS Cloud9\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"welcome","title":"Welcome","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-flatiron-school-philosophy\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-flatiron-school-philosophy\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-flatiron-school-philosophy/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eWelcome to Flatiron School! We're thrilled that you've joined our community of learners! \u003c/p\u003e  \u003cp\u003eThe following content is designed for people who are passionate, curious, self-driven, and serious about learning. We are comrades in a never-ending quest for knowledge. While there are no shortcuts, we believe that by providing knowledge in an optimized order, reinforcing knowledge with hands-on, feedback driven practice, and providing space for discussion, you will learn quickly. Our goal is to provide the right materials, support and structure \u003cem\u003eyou\u003c/em\u003e need to discover your own love for code.\u003c/p\u003e  \u003ch2\u003eLearning to Write Code\u003c/h2\u003e  \u003cp\u003eThis is the beginning of our Software Engineering course, where you will go through everything from the basics of coding to building full-stack React web applications.\u003c/p\u003e  \u003cp\u003eSo, where do we start? How do we know what is necessary to understand \u003cem\u003efirst?\u003c/em\u003e In this course, we're going to start with a simple idea - programming is like having a conversation, and just like learning to talk, we need to start by learning a few words and practicing them.\u003c/p\u003e  \u003cp\u003eMany people on joining Flatiron School have already spent some time dabbling with coding by using the amazing and plentiful resources all around the internet. In developing the content here, though, we make no assumptions. This content is designed for absolute beginners. Lessons build off each other, providing the tools and concepts necessary to complete future lessons.\u003c/p\u003e  \u003cp\u003eWhat we don't do, however, is dumb anything down. We believe in your infinite capacity to learn. We do our best to offer a curriculum that is clear, digestible, engaging, challenging, and deep. The curriculum you'll encounter on here is rigorous and will demand that you be patient and resourceful.\u003c/p\u003e  \u003ch2\u003eThe Flatiron Community\u003c/h2\u003e  \u003cp\u003eWe don't believe in learning alone. As you make progress, expect to bump into other learners just like you, ready and willing to help each other succeed. Together, we can go further than we could ever go alone. We expect everyone here to be friendly, respectful, helpful, and nice.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThe first part of this course will focus on getting your computer set up  with the tools and software necessary for the rest of the curriculum. Then, we will introduce some fundamental programming concepts. As you progress, you'll start to use the tools on your personal computer to build projects and test your knowledge. You're just getting started, and we're glad you're here.\u003c/p\u003e  \u003cp\u003eHappy Learning!\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-windows-subsystem-for-linux-wsl2-environment-setup","title":"Introduction to Windows Subsystem for Linux (WSL2) Environment Setup","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIn this module, we will walk through the process of setting up your Windows 10 local development environment.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are not using a Windows computer for this course, skip the lessons in this module.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eBrief History\u003c/h2\u003e  \u003ch3\u003eUnderstanding Environments\u003c/h3\u003e  \u003cp\u003eA \u003cstrong\u003esoftware environment\u003c/strong\u003e describes the set of tools that work together to enable you to develop and execute the code that you write. Environments typically include the operating system, databases, programming languages, and related tools like text editors or browsers.\u003c/p\u003e  \u003ch3\u003eComparing Environments with Machines\u003c/h3\u003e  \u003cp\u003eYou may hear us use the term \"software environment\" and \"machine\" to mean similar things. A \u003cstrong\u003emachine\u003c/strong\u003e describes the physical hardware that your software environment runs on. You'll hear the term machine and computer used interchangeably. Different machines (like PCs and Macs) use different hardware to run the programs that they use. Differences in those machines mean that setting up your development environment on one type of machine could look much different than setting it up on another.\u003c/p\u003e  \u003ch3\u003eWindows Subsystem for Linux (WSL)\u003c/h3\u003e  \u003cp\u003eTo work around some of the differences between machines, and specifically between operating systems, we recommend that all students whose computers come pre-installed with the Windows operating system use a tool called \u003cstrong\u003eWindows Subsystem for Linux (WSL)\u003c/strong\u003e. Windows Subsystem for Linux provides a Linux-based environment for interfacing with and developing on a Windows operating system.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eLinux\u003c/strong\u003e is a family of operating systems that share the same core operating system programs. Operating systems based on Linux are very commonly used in professional software engineering settings. Learning how to use a Linux-based operating system will be a valuable skill for your future software engineering career.\u003c/p\u003e  \u003cp\u003eThe version, or distribution, of Linux that you will use is called \u003cstrong\u003eUbuntu\u003c/strong\u003e. It is one of the leading Linux distributions and has great support with Windows Subsystem for Linux. There are others like Debian and Fedora, and those should work similarly.\u003c/p\u003e  \u003cp\u003eThe advantage of using Windows Subsystem for Linux is that it's highly integrated into Windows 10, works on most machines that support Windows 10, and only needs to be enabled and configured.\u003c/p\u003e  \u003cp\u003eThe first version of Windows Subsystem for Linux (WSL 1) was groundbreaking! It translates commands that you run with Linux into commands that Windows can understand. For this course, we'll use the second version of Windows Subsystem for Linux (WSL 2). The first version had some compatibility issues and was slower compared to native Windows.\u003c/p\u003e  \u003ch3\u003eTerminals and Shells\u003c/h3\u003e  \u003cp\u003eYou may be familiar with opening files and applications on your computer by clicking icons, or viewing a website by typing an address into the address bar and seeing what pops up. These \u003cstrong\u003egraphical user interfaces (GUIs)\u003c/strong\u003e created a revolution in computing and are still extremely helpful in getting work done for many non-technical computer users.\u003c/p\u003e  \u003cp\u003eBefore graphical user interfaces (GUIs), the way to tell the computer to do something was through a \u003cstrong\u003eterminal\u003c/strong\u003e. The terminal included a screen, which would display only text, and a keyboard. The screen and keyboard were connected to a computer, and you type into the keyboard what you wanted the computer to do. Then, you press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e and would wait for the computer to finish.\u003c/p\u003e  \u003cp\u003eTerminals are still used frequently today, especially in software development. We can connect to another computer on the internet, give it instructions by typing in commands, and view the result on our screen. The way that modern computers emulate the terminals of yesterday is through a program called a \u003cstrong\u003ecommand-line interface\u003c/strong\u003e, or a \u003cstrong\u003eshell\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eSimilar to operating systems, there are many different types of shells. The shell that Flatiron School supports on the Ubuntu operating system is called \u003cstrong\u003ebash\u003c/strong\u003e, short for Bourne Again Shell.\u003c/p\u003e  \u003ch3\u003eWindows Command Prompt\u003c/h3\u003e  \u003cp\u003eBefore we get to \u003cstrong\u003ebash\u003c/strong\u003e, however, we need to do some work in the \"Command Prompt\", which is the built-in shell on Windows computers.\u003c/p\u003e  \u003cp\u003eThe \"Command Prompt\" application is a text-based way to browse and work with your computer files. We will only be using the \"Command Prompt\" application at the beginning of the environment setup. For now, let's start to see what \"Command Prompt\" and more generally, \u003cstrong\u003eshell\u003c/strong\u003es can do.\u003c/p\u003e  \u003ch2\u003eAction Items: View Your Desktop in \"File Explorer\" and \"Command Prompt\" Applications\u003c/h2\u003e  \u003cp\u003eTo complete the environment setup, you will need to be able to open applications. You can open new applications by using the search bar at the bottom of your screen. The search bar says, \"Type here to search\".\u003c/p\u003e  \u003ch3\u003eView Your Desktop in the \"File Explorer\"\u003c/h3\u003e  \u003cp\u003eThe \"File Explorer\" application is a visual way to browse the files on your computer. You may already be familiar with the \"File Explorer\" application. This application allows you to quickly see the files on your desktop, downloads, documents, pictures, music, videos, and much more.\u003c/p\u003e  \u003col\u003e \u003cli\u003eClick on the \"Start\" menu search bar\u003c/li\u003e \u003cli\u003eType \"File Explorer\" and open the application\u003c/li\u003e \u003cli\u003eFind and open the \"OneDrive\" folder located on the left-hand side in your \"File Explorer\"\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eView Your Desktop in the \"Command Prompt\" Shell\u003c/h3\u003e  \u003cp\u003eThe \"Command Prompt\" application is the terminal that will allow us to interface with our computer through a shell. This action item is to primarily get you comfortable running commands in \u003cem\u003eany\u003c/em\u003e shell so that you can work through the environment setup on your own.\u003c/p\u003e  \u003col\u003e \u003cli\u003eClick on the \"Start\" menu search bar\u003c/li\u003e \u003cli\u003eType \"Command Prompt\" and open the application\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecd /Users\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003edir\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eLook for your username in the list\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecd\u003c/code\u003e into the terminal, add a space, and type your name as it appears in the list and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003edir\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eLook for the \"OneDrive\" folder in the list\u003c/li\u003e \u003cli\u003eType \u003ccode\u003ecd OneDrive\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eType \u003ccode\u003edir\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ylMhORbzGNg\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf you were able to open your OneDrive folder in the \"File Explorer\" application and you were able to open the \"Command Prompt\" application and \u003ccode\u003ecd\u003c/code\u003e to the same folder,  you should see the same list of files and folders in both the \u003cstrong\u003egraphical user interface (GUI)\u003c/strong\u003e  and in the \u003cstrong\u003ecommand-line interface (CLI)\u003c/strong\u003e or shell.\u003c/p\u003e  \u003cp\u003eThis may be your first time using the \"Command Prompt\" or any terminal or shell. Now you know how to see the items in a particular folder through the \"File Explorer\" \u003cem\u003eand\u003c/em\u003e through the \"Command Prompt\". This step is to get you familiar with using a terminal to be able to complete the environment setup.\u003c/p\u003e  \u003ch2\u003ePreparing for Your Environment Setup\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDuring the environment setup, you will be spending a lot of time in the \"Ubuntu\" application.\u003c/li\u003e \u003cli\u003eAs much as possible, copy and paste commands that we ask you to run there instead of typing by hand to help prevent environment setup issues.\u003c/li\u003e \u003cli\u003eSpecific keys that you need to press will be surrounded by  \u003ccode\u003e\u0026lt;\u003c/code\u003e \u003ccode\u003e\u0026gt;\u003c/code\u003e (for example, \u003ccode\u003e\u0026lt;Shift\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e).\u003c/li\u003e \u003cli\u003eYou will need to be comfortable switching between windows; we will primarily be using the browser and the \"Ubuntu\" application.\u003c/li\u003e \u003cli\u003eYou should be able to start and stop the environment setup.\u003c/li\u003e \u003cli\u003eIf you get stuck, reach out to your classmates or an instructor.\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"expressions-in-javascript","title":"Expressions in JavaScript","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-expressions-in-js\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-expressions-in-js\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-expressions-in-js/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine \"Expression\"\u003c/li\u003e \u003cli\u003eDefine \"Evaluation\"\u003c/li\u003e \u003cli\u003eExpression and Evaluation with JavaScript\u003c/li\u003e \u003cli\u003eIdentify the Parts of an Expression\u003c/li\u003e \u003cli\u003eIdentify Core Operators in JavaScript\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003ePreviously, we saw a tool that allowed us to have a conversation with JavaScript. This tool is known as a REPL, short for \u003ca href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\"\u003eRead Evaluate Print Loop\u003c/a\u003e. Code written in the top box will be read and evaluated. The response, whatever is returned, will appear in the bottom box. For example, below we have a REPL with a math equation, \u003ccode\u003e10 + 10\u003c/code\u003e, prewritten inside. If you click the button with the play symbol \u003ccode\u003e▶\u003c/code\u003e above the equation, you should see \u003ccode\u003e20\u003c/code\u003e appear in the bottom box.\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@MaxwellBenton2/BumpySereneMicroinstruction?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e We encourage you to experiment with this and other code examples provided in the REPL. In order to do so, you will need to click \"open in repl.it\" in the upper right corner of the REPL window, which will open it in a new browser tab. You will also need to create a free account. Once you've done that, you will be able to fork the REPL to your account and make changes to try things out.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eConversations, we've seen, are the things that result when two individuals — be they human or machine — communicate \u003cem\u003eexpressions\u003c/em\u003e to one another.\u003c/p\u003e  \u003cp\u003eWe've been imprecise in defining \"expression\" while we were getting the hang of it. Let's propose formal definitions for \u003cem\u003eexpression\u003c/em\u003e and \u003cem\u003eevaluation\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eDefine \"Expression\"\u003c/h2\u003e  \u003cp\u003eAn expression in a programming language is like a sentence in a spoken language.\u003c/p\u003e  \u003cp\u003eSome sentences are simple: \"He wept.\" Some sentences are complex: \"I sing of weapons and a man, an outcast of Troy who was driven to the shores of Italy...\"\u003c/p\u003e  \u003cp\u003eSome expressions are simple: \u003ccode\u003e2\u003c/code\u003e. Some expressions are complex \u003ccode\u003e1 + 2\u003c/code\u003e. Some expressions are \u003cem\u003ereally\u003c/em\u003e complex: \u003ccode\u003e10 + (3 * ( (-1) ** 3) + 2) / 18\u003c/code\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eDefinition\u003c/strong\u003e: Expression: A combination of information, called \u003cem\u003edata\u003c/em\u003e, and \u003cem\u003esymbols\u003c/em\u003e indicating how to combine \u003cem\u003edata\u003c/em\u003e, called \u003cem\u003eoperators\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eDefine \"Evaluation\"\u003c/h2\u003e  \u003cp\u003e\u003cem\u003eEvaluation\u003c/em\u003e is the process of interpreting an expression, according to rules, to produce a return value.\u003c/p\u003e  \u003ch2\u003eExpression and Evaluation with JavaScript\u003c/h2\u003e  \u003cp\u003eThese definitions should align with your experience of having a conversation with REPLs so far. Think about \u003ccode\u003e255 / 5\u003c/code\u003e.  Which parts of the expression are \u003cem\u003edata\u003c/em\u003e? Which parts are \u003cem\u003eoperators\u003c/em\u003e?\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cem\u003ePRO-TIP\u003c/em\u003e: Think it through yourself. Which is a given thing (\u003cem\u003edata\u003c/em\u003e) and which parts tell you how to combine things (\u003cem\u003eoperators\u003c/em\u003e)?  When reading technical documents you can't simply read the answers, you \u003cstrong\u003e\u003cem\u003ehave to think along\u003c/em\u003e\u003c/strong\u003e in order to learn. Active participation tells your brain that this stuff is important!\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eIdentify the Parts of an Expression\u003c/h2\u003e  \u003cp\u003eThe \u003cem\u003edata\u003c/em\u003e are: \u003ccode\u003e255\u003c/code\u003e and \u003ccode\u003e5\u003c/code\u003e The \u003cem\u003eoperator\u003c/em\u003e: is \u003ccode\u003e/\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eIn this example, there is only one operator. It's certainly possible for expressions to have multiple operators like \u003ccode\u003e100 + 10 - 3\u003c/code\u003e. In this example, the \u003cem\u003eoperators\u003c/em\u003e are \u003ccode\u003e+\u003c/code\u003e and \u003ccode\u003e-\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eIdentify Core Operators in JavaScript\u003c/h2\u003e  \u003cp\u003eHere's a table of other operators and their operations. While some of the symbols used are different from their mathematical counterparts, the operations work in the familiar way.\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\n\u003ctr\u003e     \u003cth\u003eOperator\u003c/th\u003e     \u003cth\u003eOperation\u003c/th\u003e     \u003cth\u003eNote\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e+\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eAddition\u003c/td\u003e     \u003ctd\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eSubtraction\u003c/td\u003e     \u003ctd\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eMultiplication\u003c/td\u003e     \u003ctd\u003eWe use \u003ccode\u003e*\u003c/code\u003e instead of \u003ccode\u003e×\u003c/code\u003e because it looks like \u003ccode\u003ex\u003c/code\u003e-the-letter\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e/\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eDivision\u003c/td\u003e     \u003ctd\u003eWe use \u003ccode\u003e/\u003c/code\u003e instead of \u003ccode\u003e÷\u003c/code\u003e because that's not on a keyboard\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e**\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eExponentiation\u003c/td\u003e     \u003ctd\u003eWe use \u003ccode\u003e**\u003c/code\u003e instead of \u003ccode\u003e^\u003c/code\u003e because \u003ccode\u003e^\u003c/code\u003e means something else in programming languages\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e()\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003eAssociation\u003c/td\u003e     \u003ctd\u003eExpressions inside of \u003ccode\u003e()\u003c/code\u003e get evaluated earlier\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn the next few lessons, we're going to introduce the \u003cstrong\u003eEssential Three Expressions\u003c/strong\u003e:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/expressions-in-javascript/essential-3-expressions.jpg\" alt=\"Three Essential Expression\"\u003e\u003c/p\u003e  \u003col\u003e \u003cli\u003eThe constant expression\u003c/li\u003e \u003cli\u003eThe assignment expression (variable assignment)\u003c/li\u003e \u003cli\u003eThe variable lookup expression\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eAll expressions, which are the core of every programming language, are built on these Essential Three Expressions.\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions\"\u003eExpressions\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\"\u003eRead-evaluate-print loop\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"introduction-to-the-dom","title":"Introduction to the DOM","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-introduction\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify the Document Object Model (DOM)\u003c/li\u003e \u003cli\u003eExplain how the DOM is created\u003c/li\u003e \u003cli\u003eIdentify the DOM as accessed by JavaScript objects\u003c/li\u003e \u003cli\u003eIntroduce the Console and Chrome DevTools\u003c/li\u003e \u003cli\u003eLearn how to open HTML files in the browser\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe have learned how to write HTML and style it with CSS. We have also built our JavaScript programming skills. With this knowledge, we're now ready to learn \u003cstrong\u003eDocument_Object Model (DOM) programming\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eDOM programming consists of using JavaScript to:\u003c/p\u003e  \u003col\u003e \u003cli\u003eAsk the DOM to find or select an HTML element or elements in the rendered page\u003c/li\u003e \u003cli\u003eRemove and/or insert one or more elements\u003c/li\u003e \u003cli\u003eAdjust a property of selected element(s)\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIn other words, we can use DOM programming to create and modify content that users see in their browsers and add interactivity to our web pages.\u003c/p\u003e  \u003ch2\u003eIdentify the Document Object Model\u003c/h2\u003e  \u003cp\u003eLet's start with a biology metaphor. Your DNA represents a code-based version of \u003cem\u003eyou\u003c/em\u003e. The DOM represents a code-based version of \u003cem\u003ea web page\u003c/em\u003e. If something edits your DNA, changes will be made in your body (perhaps giving you mutant powers). Similarly, when you change something in the DOM, you change what's displayed in the browser.\u003c/p\u003e  \u003cp\u003eBut what exactly \u003cstrong\u003e\u003cem\u003eis\u003c/em\u003e\u003c/strong\u003e the DOM? You can think of it as a \"middle layer\" between the user and the underlying HTML, CSS, and JavaScript that makes up the page. What the user is actually seeing on the page is the DOM. When the page initially loads, the DOM represents the underlying HTML, CSS and JavaScript. When we use JavaScript and DOM programming to modify the DOM and change what the user sees, the underlying code is not modified: if we refresh the page, it goes back to its original state.\u003c/p\u003e  \u003ch3\u003eExplain How the DOM Is Created\u003c/h3\u003e  \u003cp\u003eThe DOM is created when the page loads from the HTML/CSS/JavaScript that the web server provides to the browser. Let's examine this process step-by-step:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: To ensure that instructions and screenshots match up with your experience, be sure to use the \u003ca href=\"https://www.google.com/chrome/browser/desktop/index.html\"\u003eGoogle Chrome\u003c/a\u003e browser.\u003c/p\u003e \u003c/blockquote\u003e  \u003col\u003e \u003cli\u003eIn Google Chrome, open a tab and navigate to the \u003ca href=\"https://en.wikipedia.org/wiki/Ada_Lovelace\"\u003eWikipedia page for Ada Lovelace\u003c/a\u003e.\u003c/li\u003e \u003cli\u003eTo see the HTML of this page, add \u003ccode\u003eview-source:\u003c/code\u003e to the front of the URL in the URL bar. Using the \u003ccode\u003eview-source\u003c/code\u003e URL prefix will display all the page's source HTML. It will look something like this: \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/intro-to-the-dom/html-source.png\" alt=\"html-source\"\u003e\n\u003c/li\u003e \u003cli\u003eThe browser reads this HTML, along with CSS and JavaScript defined in \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tags, to create the DOM inside the browser. At this point, nothing is displayed on the screen. This time when nothing is displayed is very brief so our human eyes never really catch it.\u003c/li\u003e \u003cli\u003eThe browser then uses the DOM object to create the rendered page. While we often learn that browsers \"display HTML,\" that's not exactly accurate. Browsers use the HTML to create a \"middleman\" that they, in turn, use to display the structured and styled content.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eIdentify the DOM as Accessed by JavaScript Objects\u003c/h3\u003e  \u003cp\u003eWe can access the DOM, using JavaScript and DOM programming, through two \u003cem\u003evariables\u003c/em\u003e: \u003ccode\u003ewindow\u003c/code\u003e and \u003ccode\u003edocument\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003ewindow\u003c/code\u003e variable points to an \u003cem\u003eobject\u003c/em\u003e that represents Chrome's information about the browser, well, \"window.\" It has many functions, but the main one is \"it's a place where everything is.\" Not to be Zen here, but a browser without a \u003ccode\u003ewindow\u003c/code\u003e is like the universe before the Big Bang; there's just... \u003cem\u003enothing\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eLike all objects, the \u003ccode\u003ewindow\u003c/code\u003e has properties and methods. For example, we can access operating system browser information like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewindow.innerHeight;\u003cbr\u003e// returns the inner height of the browser window. \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFor the most part, we won't interact with \u003ccode\u003ewindow\u003c/code\u003e: we don't want to mess with the container of everything or with operating system stuff. We want, rather, to change content. To do that, we'll focus on an object called \u003ccode\u003edocument\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eAs an \u003cem\u003eobject\u003c/em\u003e, \u003ccode\u003edocument\u003c/code\u003e has \u003cem\u003eproperties\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.URL; //=\u0026gt; https://en.wikipedia.org/wiki/Ada_Lovelace \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs an \u003cem\u003eobject\u003c/em\u003e, \u003ccode\u003edocument\u003c/code\u003e also has \u003cem\u003emethods\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.querySelector(\"h1\"); //=\u0026gt; Returns the element on the page with an id attribute equal to \"firstHeading\"  \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cem\u003emethods\u003c/em\u003e and \u003cem\u003eproperties\u003c/em\u003e that the DOM provides via its objects is called the DOM's \"Application Programming Interface,\" or \"API.\" It's just a programming word that you're likely to see online. But it just means \"the things that these objects know how to do.\"\u003c/p\u003e  \u003ch2\u003eThe Browser Console and Chrome Developer Tools\u003c/h2\u003e  \u003cp\u003eEvery major browser comes with a built-in set of developer tools that you can use to inspect, modify, and debug the content of a web page. To \u003ca href=\"https://developers.google.com/web/tools/chrome-devtools/console/#open_as_panel\"\u003eopen the dev tools in Chrome\u003c/a\u003e, press \u003ccode\u003eCtrl+Shift+J\u003c/code\u003e (Windows / Linux) or \u003ccode\u003eCmd+Opt+J\u003c/code\u003e (Mac). Chrome ships with a whole suite of useful developer tools, but the only one we care about for now is the JavaScript console.\u003c/p\u003e  \u003cp\u003eThe console is an environment in the browser where we can type and run JavaScript code in the context of the current browser window. The console is \u003cem\u003esandboxed\u003c/em\u003e, meaning the only resources it has access to are those loaded on the current page. Once we start declaring variables and functions in separate JavaScript files, we'll be able to access and play around with them in the console. The console is the single best tool for debugging JavaScript in the browser, so start familiarizing yourself with it now.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003eCtrl+Shift+J\u003c/code\u003e / \u003ccode\u003eCmd+Opt+J\u003c/code\u003e command should open up straight into the console. If for whatever reason, it doesn't, you can always click on \u003ccode\u003eConsole\u003c/code\u003e in the dropdown (when the DevTools are collapsed) or in the list of tabs:\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/opening_the_console.gif\" alt=\"Opening the console\"\u003e \u003c/p\u003e  \u003cp\u003eIf at any point the console becomes cluttered with errors, warnings, or anything else, click the \u003ccode\u003eClear console\u003c/code\u003e button:\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/clearing_the_console.gif\" alt=\"Clearing the console\"\u003e \u003c/p\u003e  \u003cp\u003eOkay, okay, enough background and setup. Let's write some code!\u003c/p\u003e  \u003ch3\u003eCoding in the Console\u003c/h3\u003e  \u003cp\u003eYou can write and test out JavaScript code in the console. We'll start off with some simple math. In the console, type \u003ccode\u003e1 + 1\u003c/code\u003e and press enter. You should see the number \u003ccode\u003e2\u003c/code\u003e appear.\u003c/p\u003e  \u003cp\u003e   \u003csource type=\"image/webp\"\u003e   \u003csource type=\"image/gif\"\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/math_in_console.gif\" alt=\"Math in the console\"\u003e \u003c/p\u003e  \u003cp\u003eTry out some other mathematical expressions and see what they return.\u003c/p\u003e  \u003cp\u003eNext up, let's write some text. To make sure the JavaScript engine knows that we're trying to write some literal text, we need to wrap it in quotation marks, like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\"This is some literal text in JavaScript!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGo ahead and type that classic phrase, \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e, into the console and press enter. It returned \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e right back to us. Try typing some more literal text into the console, such as your name. Don't forget the quotation marks!\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/text_in_console_300.gif\" alt=\"Text in the console\"\u003e\u003c/p\u003e  \u003cp\u003eWe can go far beyond simple literal expressions: we can create variables, loops, or if statements in the console. We can even define and run functions!\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It's impossible to overstate how important practice is when you're learning a new programming language. As you continue moving through the JavaScript curriculum, you should almost always have a browser console open. Code along with every example. Get used to the syntax and familiarize yourself with the errors that arise when you mistype something. Clear the console or simply refresh the page whenever you need a clean slate. Code, code, code, \u003cstrong\u003ecode\u003c/strong\u003e, \u003cstrong\u003e\u003cem\u003ecode\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eOpening Files in the Browser\u003c/h2\u003e  \u003cp\u003eIn this section, you will begin working with HTML files (most often, \u003ccode\u003eindex.html\u003c/code\u003e). In order to view the results of the coding you'll be doing, you'll need to open the file in the browser. Instructions for each programming environment are as follows:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eLocal environment on Mac\u003c/strong\u003e: Run \u003ccode\u003eopen index.html\u003c/code\u003e in the terminal.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eLocal environment using WSL/Ubuntu\u003c/strong\u003e: Run \u003ccode\u003eexplorer.exe index.html\u003c/code\u003e in the terminal.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eAWS IDE\u003c/strong\u003e: right-click on the \u003ccode\u003eindex.html\u003c/code\u003e file in the file tree and select \"Preview.\" There will be a button in the upper right corner that will \"pop\" the page into a new tab in the browser.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eKeep these instructions handy — you will be doing this often.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e In order for these instructions to work, you will need to have Google Chrome set as your default browser. You can find \u003ca href=\"https://support.google.com/chrome/answer/95417?hl=en\u0026amp;co=GENIE.Platform=Desktop\"\u003einstructions for Mac and Windows here\u003c/a\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson we learned about the DOM, which is a \"middle layer\" that presents the HTML, CSS and JavaScript loaded by the browser when we visit a page. We normally interact with it through the \u003ccode\u003edocument\u003c/code\u003e object. Because it is the \"source of truth\" for what browsers display, changes to the DOM create changes in the browser screen. We also learned how to access the Chrome Developer Tools and use the Console to try out code as we're building our programs.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://css-tricks.com/dom/\"\u003eCSS Tricks - What is the DOM?\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\"\u003eMDN - The DOM\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"researching-html-elements","title":"Researching HTML Elements","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"html-basics-researching-html-elements\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/html-basics-researching-html-elements/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-researching-html-elements\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/html-basics-researching-html-elements/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse search engines as a resource to find information\u003c/li\u003e\n\u003cli\u003eIdentify relevant resources\u003c/li\u003e\n\u003cli\u003eCompare multiple resources to find the best source\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhen writing HTML you might encounter tags that are new to you.  How are\nwe going to level-up?  When searching for technical help, we have to be careful\nabout which sources we trust. This is a skill you will build over time, but\nwe'll model some good practices in this README.\u003c/p\u003e\n\n\u003ch2\u003eUse Search Engines as a Resource to Find Information\u003c/h2\u003e\n\n\u003cp\u003eLet's say in your research, you come across an unfamiliar HTML element like\n\u003ccode\u003e\u0026lt;samp\u0026gt;\u003c/code\u003e. We can google \u003ccode\u003esamp html element,\u003c/code\u003e and we will find an endless list\nof results to choose from. Sometimes resources can be outdated, biased, or\ninaccurate. It's important to filter through the results to find the best fit.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/html-element-search.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eIdentify Relevant Resources\u003c/h2\u003e\n\n\u003cp\u003eYour instinct might be to open the first result. You should be pickier.\nSometimes the result has \"gamed\" the search engine and unfairly influenced the ranking.\nWe recommend that you open the top \u003cstrong\u003efive\u003c/strong\u003e results and review them critically.\u003c/p\u003e\n\n\u003cp\u003eWe also recommend that you trust sites that are affiliated with building or\ndefining the technologies more than blogs or other resources. In the HTML\nworld, the Mozilla Developer Network (MDN) is an extremely trustworthy site.\nIn fact, it's likely the best HTML, JS and CSS documentation source on the\ninternet.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/samp-mdn-page.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eCompare Multiple Resources to Find the Best Source\u003c/h2\u003e\n\n\u003cp\u003eIf we go back to the search results, you'll see that the first result, in this\ncase, is \u003ccode\u003eW3schools\u003c/code\u003e. A site, like W3schools, for example, can be used as an\nadditional resource for garnering understanding. It even includes interactive\nexamples, creating a sandbox environment for experimentation.\u003c/p\u003e\n\n\u003cp\u003eIn this case, between MDN and W3schools, you should get a good sense of how to\nuse the \u003ccode\u003e\u0026lt;samp\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThe web is a constantly evolving entity. As we build more ambitious products or\nlearn from our collective needs and mistakes, the industry will continually\nupdate the HTML specifications.\u003c/p\u003e\n\n\u003cp\u003eResearching referencing documentation can be scary at first, but it's a primary\nskill for developers. Don't be afraid to practice technical searches. It's a\n\u003cem\u003eskill\u003c/em\u003e that you will get better at with practice.\u003c/p\u003e\n\n\u003cp\u003eMost importantly, don't feel like \u003cem\u003enot knowing everything by heart\u003c/em\u003e means you can't\nbe a developer. The greatest developers we know are constantly admitting what they\ndon't know, finding the latest news, using the answer they found and moving on.\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-the-command-line-interface","title":"Introduction to the Command Line Interface","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"cli-essentials-bash-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine \"Command Line Interface\"\u003c/li\u003e\n\u003cli\u003eDescribe the purpose of CLIs\u003c/li\u003e\n\u003cli\u003eIdentify differences between command-line interface, terminal emulator, and\nshell\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eHave you ever noticed in movies or TV shows that when the \"awesome computer\nhacker person\" needs to do something \u003cem\u003ereally important\u003c/em\u003e, you see them typing a\nlot of text on a screen and \u003cem\u003eviolà\u003c/em\u003e something seemingly magical happens?\u003c/p\u003e\n\n\u003cp\u003eLike this...\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/prework/hack.gif\" alt=\"hacking 1\"\u003e\u003c/p\u003e\n\n\u003cp\u003eor this...\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/prework/hacking.gif\" alt=\"hacking 3\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYou might have wondered what's going on there. These computer \"heroes\" are often\nusing a way of working with the computer called the \"command-line interface\" or\n\"CLI.\" In the next lessons, you're going to learn to use the CLI so that you can\ndo \u003cem\u003eawesome\u003c/em\u003e stuff like move files, create directories, and even \u003cstrong\u003e\u003cem\u003erun\nprograms\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe're sorry to tell you that you'll probably never use the CLI to upload a virus\nto the alien spaceship or to see \"The Matrix.\" In reality, the CLI is a pretty\nbasic tool for doing basic, daily work. The most important reason\nto become very familiar with the CLI is this:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eTools you will need to be a developer will require you to use them through\n the command-line interface.\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSo let's start our journey toward mastering this way of working with our computers.\u003c/p\u003e\n\n\u003ch2\u003eFighting Fear\u003c/h2\u003e\n\n\u003cp\u003eMany computer users are familiar with performing actions and executing tasks\nwith \u003cem\u003egraphical\u003c/em\u003e interfaces (also known as the GUI - Graphical User Interface)\n\u003cem\u003einstead of\u003c/em\u003e command-line interfaces. Since the early 90's CLIs, which ruled\nthe world from about 1950 to 1990, started giving ground to the tools\nof GUI operating systems.\u003c/p\u003e\n\n\u003cp\u003eHaving seen nothing but things like\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eMacOSX's \"Finder\"\u003c/li\u003e\n\u003cli\u003eWindows' \"File Explorer\"\u003c/li\u003e\n\u003cli\u003eor Linux's \"Commander\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003epeople began to find the CLI \"mysterious.\" But it's only mysterious because\nyou've not had a chance to work with it. Once you get a bit of practice, you're\ngoing to love it..\u003c/p\u003e\n\n\u003cp\u003eLots of people worry that using the CLI will get them in trouble, that they'll\nbreak their computer. We encourage you to think about the CLI like a high-quality,\nsharp kitchen knife: if you pay attention when you use it, you're going to have\na valuable ally on your side.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eWARNING\u003c/strong\u003e: It's true, it is easier to run dangerous commands through the CLI\nthan through a GUI. Commands that list files or create directories are not\nlikely to break anything. Commands that remove files or directories, however,\n\u003cem\u003eshould\u003c/em\u003e be used with caution. Just like that kitchen knife, sometimes you\nneed something that cuts through steak like a hot knife through butter. But\nyou must make sure your fingers are well clear of the blade when you cut.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eDefine \"Command Line Interface\"\u003c/h2\u003e\n\n\u003cp\u003eA CLI is a text-based conversation with the computer in which we type the\ncommands for\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eviewing, handling, and manipulating files on your computer\u003c/li\u003e\n\u003cli\u003elaunching software\u003c/li\u003e\n\u003cli\u003eworking with devices like printers or networks\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe CLI asks (or \"prompts\") the user for a command, the user types it in, and\nthen the computer runs the \"sentence\" that was typed in. It returns output, too\n(where appropriate).\u003c/p\u003e\n\n\u003ch2\u003eDescribe the Purpose of CLIs\u003c/h2\u003e\n\n\u003cp\u003eWith a CLI, users have wide control over the file system and operating system,\nand the tasks become simple.\u003c/p\u003e\n\n\u003cp\u003eFor example, you can ask, through the CLI, which files are located on the\n\u003ccode\u003eDesktop\u003c/code\u003e. You can create a new folder or delete it. But on top of\nfile-management kinds of activities, you can also find out how busy your CPU is,\nhow full your hard drive is, and whether your computer can find a network path\nto \u003ccode\u003eflatironschool.com\u003c/code\u003e. On top of this, you don't have to click through several\nmenus to get there!\u003c/p\u003e\n\n\u003cp\u003eExperienced developers would say \"the CLI gives you more control\" or that it's\n\"more powerful.\" With a GUI you use the mouse and the keyboard to control the\nfile system or the operating system, which is going to be slower than using the\ncommand line (once you become familiar with the commands). In a CLI, users only\nuse the keyboard and may need to execute only a few short commands to complete\ntheir equivalent GUI tasks. CLI users' fingers never leave the \"home row\"\n(assuming they can touch type) which \u003cem\u003eadds\u003c/em\u003e to their speed.\u003c/p\u003e\n\n\u003cp\u003eWhile some tasks may seem \"easier\" to do with a GUI, development-like tasks are\noften much more easily completed in the CLI. If you had a task such as renaming\n100+ files in a folder according to a formula based on their file size, you\nmight well spend hours on it in the GUI. Doing the same with the CLI on your\nside could be completed in seconds. And if you do that sort of thing often, you\ncan save that process and run it again whenever you wish! This is called\n\"scripting.\"\u003c/p\u003e\n\n\u003cp\u003eOther advantages include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWorking with computers remotely\u003c/li\u003e\n\u003cli\u003eManaging files on a file server or web server (e.g., managing a web page)\u003c/li\u003e\n\u003cli\u003eAutomating commonly performed tasks\u003c/li\u003e\n\u003cli\u003eLearning even more about computers\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIdentify Differences Between Command-Line Interface, Terminal Emulator, and Shell\u003c/h2\u003e\n\n\u003cp\u003eWhen you want to use the CLI, you launch a \"terminal\" program. For Mac users, the\ndefault program is called \u003cstrong\u003eTerminal\u003c/strong\u003e. For WSL users, the \u003cstrong\u003eUbuntu\u003c/strong\u003e application will act\nas your \"terminal.\" \u003c/p\u003e\n\n\u003cp\u003e\"Terminal\" is short for \"terminal emulator.\" A long time ago, people only had keyboards and monitors (no\nmouse or graphic interface!) that were tied to a computer that they all shared.\nThis monitor + keyboard device was called a \"terminal.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/prework/tty3.jpg\" alt=\"TTY\"\u003e\u003c/p\u003e\n\n\u003cp\u003eTerminals connected to a shared computer called a \"mainframe.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/cli-essentials/bash-intro/Image_56_MainFrameDiagram.png\" alt=\"\u0026quot;Mainframe Computers\u0026quot;\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNowadays, the \"terminal\" is \"emulated\" in software. It's \"virtual.\" You launch\nthe \"emulator\" by opening a program. And instead of being connected to a remote computer by\na cable, your \"terminal emulator\" talks to the computer you're actually typing\non.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/cli-essentials/bash-intro/Image_57_TerminalEmulator.png\" alt=\"\u0026quot;Terminal Emulator\u0026quot;\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhen you launch the \"terminal emulator\" program, it will immediately start a\nprogram called a \u003cem\u003eshell\u003c/em\u003e program. The \u003cem\u003eshell\u003c/em\u003e program is what actually prompts\nyou for input and returns the output. The shell most computers default to using\nis known as \u003ccode\u003ebash\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo help keep these terms straight, here's a guide:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWhen discussing the terminal, we mean the \"terminal emulation\" program, i.e.\nthe thing that handles raw input and output. \u003cem\u003eNOTE:\u003c/em\u003e Interpretation of the\ncommands themselves is handled by the \u003ccode\u003eshell\u003c/code\u003e, not the terminal. You can \u003cem\u003etype\u003c/em\u003e\ncommands into the terminal, though\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003eshell\u003c/code\u003e takes input, thinks, prints things out. It knows when a command\ndoesn't exist or make sense. It knows how to ask the CPU to do work. But it\n\u003cstrong\u003edoesn't\u003c/strong\u003e listen for keyboard keys being pressed and it \u003cstrong\u003edoesn't tell your\nterminal emulator how to display the results it calculated\u003c/strong\u003e. The terminal\nhandles the input/output (as we said) while the shell works with the\noperating system and the CPU\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ccode\u003ebash\u003c/code\u003e and \u003ccode\u003ezsh\u003c/code\u003e are a specific \u003ccode\u003eshell\u003c/code\u003es used by Unix systems (like Mac OSX\nand Linux).\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe phrase \"command-line\" is roughly the same as \u003ccode\u003eshell\u003c/code\u003e. It's a style of\ninteraction with the \u003ccode\u003eshell\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAlthough using a command line interface might seem intimidating at first as it\nrequires the memorization of dozens of different commands, it can be a valuable\nresource that makes using a computer easier. Using a command line, you can\nperform almost all of the same tasks that can be done with a GUI. However, many\ntasks can be performed quicker and can be much easier to automate.\u003c/p\u003e\n\n\u003cp\u003eUltimately though, many programming languages and programming tools assume that\nyou're comfortable with the CLI. You must have this comfort in order to be a\nsuccessful programmer.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything\"\u003eLifehacker on the Command Line\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.cybrary.it/0p3n/command-line-interface-cli-vs-graphical-user-interface-gui/\"\u003eCommand Line Interface (CLI) vs. Graphical User Interface (GUI)\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"the-assignment-expression","title":"The Assignment Expression","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-the-assignment-expression\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-assignment-expression\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-assignment-expression/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine the \u003cem\u003eAssignment Expression\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eDefine Mutability / Immutability\u003c/li\u003e \u003cli\u003eLearn what the Return Value of an \u003cem\u003eAssignment Expression\u003c/em\u003e is\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eSo you've seen the first of our \u003cstrong\u003eessential three expressions\u003c/strong\u003e, the \u003cem\u003econstant expression\u003c/em\u003e, which gives JavaScript some constant facts about the world: \u003ccode\u003e2\u003c/code\u003e is \u003ccode\u003e2\u003c/code\u003e, \u003ccode\u003e3\u003c/code\u003e is \u003ccode\u003e3\u003c/code\u003e, etc...\u003c/p\u003e  \u003cp\u003eIt's really useful to associate an \u003cem\u003eexpression's evaluated result\u003c/em\u003e with a 'name'. We call those names that we associate with the \u003cem\u003eexpression's\u003c/em\u003e result, \u003cem\u003evariable names\u003c/em\u003e or, commonly, just \u003cem\u003evariables\u003c/em\u003e. The process of bonding an expression to a variable is called \u003cem\u003eassigning a variable\u003c/em\u003e. Programmers also say that \"the variable name 'points to' the expression that was assigned to it.\"\u003c/p\u003e  \u003cp\u003eA helpful metaphor here is that it's like adding a new entry to a dictionary: \u003ccode\u003eaFunNumber\u003c/code\u003e's definition is \u003ccode\u003e3 * (10 - 4)\u003c/code\u003e or \u003ccode\u003emyBirthYear\u003c/code\u003e's is \u003ccode\u003e1989\u003c/code\u003e. Or you can think about a variable name as a label you put on a box. Using this metaphor, the box labeled \u003ccode\u003eaFunNumber\u003c/code\u003e contains the value \u003ccode\u003e3 * (10 - 4)\u003c/code\u003e, and the box labeled \u003ccode\u003emyBirthYear\u003c/code\u003e contains the value \u003ccode\u003e1989\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe create the association between a variable name and a value by using the second of our \u003cstrong\u003eessential three expressions\u003c/strong\u003e: the \u003cem\u003eassignment expression\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eDefine the \u003cem\u003eAssignment Expression\u003c/em\u003e\n\u003c/h2\u003e  \u003cp\u003eIn JavaScript, the assignment expression is like so:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-assignment-expression/assigning-a-variable.jpg\" alt=\"Assignment Expression Graphic\"\u003e\u003c/p\u003e  \u003cp\u003eHere are some examples:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaFunNumber = 3 * (10 - 4)\u003cbr\u003emyBirthYear = 1989 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eVariable names are most often descriptions of what their assigned expressions \u003cem\u003emean\u003c/em\u003e. In JavaScript, when a variable name is made of multiple words, every word after the first is capitalized. This is referred to as \u003cem\u003ecamelCase\u003c/em\u003e and although it isn't strictly required, it is a common convention in JavaScript. \u003c/p\u003e  \u003cp\u003eWhile you \u003cem\u003ecan include\u003c/em\u003e numbers and some symbols in variable names, let's keep things simple for the moment and just use camelCased letters.\u003c/p\u003e  \u003cp\u003eConsider the following expression:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emaximumSpeed \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRun this alone in a REPL, and we get an error\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eReferenceError: maximumSpeed is not defined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003efollowed by many lines starting with \u003ccode\u003eat...\u003c/code\u003e. Here, JavaScript, by default, doesn't know anything about \u003ccode\u003emaximumSpeed\u003c/code\u003e.\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@MaxwellBenton2/OrderlyDeadParticle?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eWhen we define a variable using the \"assignment expression\" we add something new to JavaScript.\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@MaxwellBenton2/OutgoingAlienatedMacrolanguage?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eNotice that \u003ccode\u003emaximumSpeed = 9000\u003c/code\u003e, the assignment expression, evaluates to \u003ccode\u003e9000\u003c/code\u003e when run. Once \u003ccode\u003emaximumSpeed\u003c/code\u003e is defined, JavaScript will know what it is. (We'll look at this more closely in the next lesson.)\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003e\u003cem\u003eSUPER-IMPORTANT\u003c/em\u003e\u003c/strong\u003e: In the assignment expression \u003ccode\u003e=\u003c/code\u003e means \"assignment\". It does not mean \"what's on the left of the \u003ccode\u003e=\u003c/code\u003e is equal to what's on the right.\" In math courses, we use \u003ccode\u003e=\u003c/code\u003e to say that the expressions on either side of the \u003ccode\u003e=\u003c/code\u003e are the same. JavaScript uses \u003ccode\u003e==\u003c/code\u003e and \u003ccode\u003e===\u003c/code\u003e for that purpose. It's very common — and very confusing — for beginners to have bugs where they confuse \u003ccode\u003e=\u003c/code\u003e for \u003ccode\u003e==\u003c/code\u003e or \u003ccode\u003e===\u003c/code\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eDefine Mutability / Immutability\u003c/h2\u003e  \u003cp\u003eA variable is said to be \"mutable.\" That means the value that the name \"points to\" can be changed during the running of the program. Being able to change the value a variable points to is very important. For example, if we need to do something 10 times, we need a variable to keep track of how many times the thing happens. That variable will need to change: its value will need to increase by 1 each time. Here's \"mutability\" in action:\u003c/p\u003e  \u003cp\u003eMany years ago my height in centimeters was:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eheightInCentimeters = 50 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut today it is:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eheightInCentimeters = 180 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can try these out in REPL:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@MaxwellBenton2/TrueShortMaintenance?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eSometimes, we might want to make a variable's value permanent. We might want to say \"hey, this value should not change.\" We want to say that the value is \u003cem\u003eimmutable\u003c/em\u003e, the opposite of \u003cem\u003emutable\u003c/em\u003e. We do this by writing a \u003cstrong\u003econstant\u003c/strong\u003e (not the same as the constant expression we discussed previously). We'll go into more detail on constants in the next part of this course.\u003c/p\u003e  \u003ch2\u003eReturn Value of an \u003cem\u003eAssignment Expression\u003c/em\u003e\n\u003c/h2\u003e  \u003cp\u003eThe return value of an \u003cem\u003eassignment expression\u003c/em\u003e is the evaluated result of the expression to the right of the \u003ccode\u003e=\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erecurringExpressionValue = 3 * (10 - 4)\u003cbr\u003e=\u0026gt; 18 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePay attention here: the return value of the assignment expression \u003cstrong\u003e\u003cem\u003eIS NOT THE SAME THING\u003c/em\u003e\u003c/strong\u003e as getting the value out of the variable name. We'll learn to get the value \"back out of a variable\" in the next lesson. What JavaScript is saying is that the assignment expression's return value is the value of the expression to the right of the \u003ccode\u003e=\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThink about a baby who has never spoken before. Before it stands a parent saying their name over and over (...and over) again.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-assignment-expression/Image_55_Mama-Baby_1.png\" alt=\"Learning to talk 1\"\u003e\u003c/p\u003e  \u003cp\u003eThey wave towards their bodies and say their names again and again. What the parent is trying to do is teach the baby to assign their face to the variable name \"Mama\" or \"Dada.\" But to the baby, this means nothing.\u003c/p\u003e  \u003cp\u003eWhile neither the baby or the (average) adult is aware of it, they're trying to teach the baby the second of the \u003cem\u003ethree essential expressions\u003c/em\u003e: the assignment expression. Then, one magical day, it clicks for the baby. It performs an assignment in its precious little head:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-assignment-expression/Image_55_Mama-Baby_2.png\" alt=\"Learning to talk 2\"\u003e\u003c/p\u003e  \u003cp\u003eUnfortunately, Mom is still sad; she doesn't have any \u003cem\u003eproof\u003c/em\u003e that the assignment was successful. For that to work, the baby will need to prove that it can \"look up\" the variable assignment of who \"ma-ma\" points to. The baby will need to learn the last of our \u003cem\u003eessential expressions\u003c/em\u003e: the variable lookup expression!\u003c/p\u003e","frontPage":false},{"exportId":"arrays","title":"Arrays","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-arrays\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-arrays/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-arrays\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-arrays/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify data structures and \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e \u003cli\u003eCreate \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e \u003cli\u003eAccess the elements in an \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eLearn about nested \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e \u003cli\u003eIntroduce \u003ccode\u003eArray\u003c/code\u003e methods\u003c/li\u003e \u003cli\u003eUnderstand mutability\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eSo far, we've been focusing on JavaScript's \u003cem\u003eprimitive\u003c/em\u003e data types — types that represent a single value — in particular, strings, Booleans, and numbers. But sometimes we need a way to store a \u003cem\u003ecollection\u003c/em\u003e of data. For this, we need data structures. In this and the next lesson, we will learn about a very useful data structure: \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e  \u003cp\u003eBe sure to follow along with the examples in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e.\u003c/p\u003e  \u003ch2\u003eIdentify Data Structures and Arrays\u003c/h2\u003e  \u003cp\u003eA \u003cem\u003edata structure\u003c/em\u003e is a means for associating and organizing information. Outside of the programming world, we use data structures all the time. For example, we might have a shopping list of the items we need to buy on our next grocery run or an address book for organizing contact information.\u003c/p\u003e  \u003cp\u003eIf we have a lot of related data, it's best to represent it in a related system. Imagine that we're working on a lottery application that has to represent the winning lottery numbers. We could do that as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst firstNumber = 32;\u003cbr\u003econst secondNumber = 9;\u003cbr\u003econst thirdNumber = 14;\u003cbr\u003econst fourthNumber = 33;\u003cbr\u003econst fifthNumber = 48;\u003cbr\u003econst powerBall = 5; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe've represented all six pieces of data, but there's no way to refer to them as a group. Every single time we want to reference that combination of winning numbers, we need to remember and type out six different variable names:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst firstNumber = 32;\u003cbr\u003econst secondNumber = 9;\u003cbr\u003econst thirdNumber = 14;\u003cbr\u003econst fourthNumber = 33;\u003cbr\u003econst fifthNumber = 48;\u003cbr\u003econst powerBall = 5;\u003cbr\u003e\u003cbr\u003efunction logWinningNumbers (first, second, third, fourth, fifth, power) {\u003cbr\u003e  console.log('Winning numbers:', first, second, third, fourth, fifth, power);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elogWinningNumbers(firstNumber, secondNumber, thirdNumber, fourthNumber, fifthNumber, powerBall);\u003cbr\u003e// LOG: Winning numbers: 32 9 14 33 48 5\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat's so much typing! There are much, much better ways to organize data in JavaScript. Let's learn about one of the most common: the \u003cem\u003e\u003ccode\u003eArray\u003c/code\u003e\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eCreate Arrays\u003c/h2\u003e  \u003cp\u003eAn \u003ccode\u003eArray\u003c/code\u003e is a list, with the items listed in a particular order, surrounded by square brackets (\u003ccode\u003e[]\u003c/code\u003e) and separated by commas:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e['This', 'is', 'an', 'array', 'of', 'strings.'];\u003cbr\u003e// =\u0026gt; [\"This\", \"is\", \"an\", \"array\", \"of\", \"strings.\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cem\u003emembers\u003c/em\u003e or \u003cem\u003eelements\u003c/em\u003e in an \u003ccode\u003eArray\u003c/code\u003e can be data of any type in JavaScript:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e['Hello, world!', 42, null, NaN];\u003cbr\u003e// =\u0026gt; [\"Hello, world!\", 42, null, NaN] \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: In some other languages \u003ccode\u003eArray\u003c/code\u003es \u003cem\u003ecannot include elements of multiple types\u003c/em\u003e. In C, C++, Java, Swift, and others you cannot mix types. JavaScript, Python, Ruby, Lisp, and others permit this.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eArrays are \u003cem\u003eordered\u003c/em\u003e, meaning that the elements in them will always appear in the same order. This also means that the \u003ccode\u003eArray\u003c/code\u003e \u003ccode\u003e[1, 2, 3]\u003c/code\u003e is different from the \u003ccode\u003eArray\u003c/code\u003e \u003ccode\u003e[3, 2, 1]\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eJust like any other type of JavaScript data, we can assign an \u003ccode\u003eArray\u003c/code\u003e to a variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37];\u003cbr\u003e\u003cbr\u003econst tvShows = ['Game of Thrones', 'Breaking Bad', 'Veep', 'Mad Men']; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can find out how many elements an \u003ccode\u003eArray\u003c/code\u003e contains by checking the \u003ccode\u003eArray\u003c/code\u003e's built-in \u003ccode\u003elength\u003c/code\u003e property:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst myArray = ['This', 'array', 'has', 5, 'elements'];\u003cbr\u003e\u003cbr\u003emyArray.length;\u003cbr\u003e// =\u0026gt; 5 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe defined the above \u003ccode\u003eArray\u003c/code\u003es using the \u003cem\u003earray literal\u003c/em\u003e syntax —\u0026nbsp;that is, we literally typed out the \u003ccode\u003eArray\u003c/code\u003e that we wanted to create, square brackets and all. There are other ways to create new \u003ccode\u003eArray\u003c/code\u003es, but they are only necessary for very rare circumstances. For now, use \u003ccode\u003eArray\u003c/code\u003e literals.\u003c/p\u003e  \u003cp\u003eTo get a sense of just how effective \u003ccode\u003eArray\u003c/code\u003es are at keeping data organized, let's rewrite our lottery code to use an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst winningNumbers = [32, 9, 14, 33, 48, 5];\u003cbr\u003e\u003cbr\u003efunction logWinningNumbers (numbers) {\u003cbr\u003e  console.log('Winning numbers:', numbers);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elogWinningNumbers(winningNumbers);\u003cbr\u003e// LOG: Winning numbers: [32, 9, 14, 33, 48, 5]\u003cbr\u003e// =\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003eArray\u003c/code\u003e provides organization, and we only have to remember \u003cem\u003eone\u003c/em\u003e identifier (\u003ccode\u003ewinningNumbers\u003c/code\u003e) instead of six (\u003ccode\u003efirstNumber\u003c/code\u003e, \u003ccode\u003esecondNumber\u003c/code\u003e, and so on). We can also call \u003ccode\u003eArray\u003c/code\u003es \u003cem\u003eexpressive\u003c/em\u003e because putting all the winning numbers in a shared data structure communicates to other programmers \"Hey, these things go together.\"\u003c/p\u003e  \u003cp\u003eThe one benefit of storing all six lottery numbers separately is that we had a really easy way to access each individual number. For example, we could just reference \u003ccode\u003epowerBall\u003c/code\u003e to grab the sixth number. Luckily, \u003ccode\u003eArray\u003c/code\u003es offer an equally simple syntax for accessing individual members.\u003c/p\u003e  \u003ch2\u003eUsing the Computed Member Access Operator\u003c/h2\u003e  \u003cp\u003eEvery element in an \u003ccode\u003eArray\u003c/code\u003e is assigned a unique index value that corresponds to its place within the collection, \u003cstrong\u003estarting at 0\u003c/strong\u003e. The first element in the \u003ccode\u003eArray\u003c/code\u003e is at index \u003ccode\u003e0\u003c/code\u003e, the fifth element at index \u003ccode\u003e4\u003c/code\u003e, and the 428th element at index \u003ccode\u003e427\u003c/code\u003e. The \u003cem\u003ecomputed member access operator\u003c/em\u003e (\u003ccode\u003e[]\u003c/code\u003e) allows us to access the element at a given index.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Most people just call it \u003cem\u003ebracket notation\u003c/em\u003e or the \u003cem\u003ebracket operator\u003c/em\u003e, so don't worry too much about remembering the term \u003cem\u003ecomputed member access operator\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eAccessing an Element\u003c/h3\u003e  \u003cp\u003eTo access an element, we use the computed member access operator like this: \u003ccode\u003enameOfArray[index]\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst winningNumbers = [32, 9, 14, 33, 48, 5];\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003ewinningNumbers[0];\u003cbr\u003e// =\u0026gt; 32\u003cbr\u003e\u003cbr\u003ewinningNumbers[3];\u003cbr\u003e// =\u0026gt; 33 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's take a minute to think about how we could access the \u003cstrong\u003elast\u003c/strong\u003e element in any \u003ccode\u003eArray\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf \u003ccode\u003emyArray\u003c/code\u003e contains 10 elements, the final element will be at \u003ccode\u003emyArray[9]\u003c/code\u003e. If \u003ccode\u003emyArray\u003c/code\u003e contains 15000 elements, the final element will be at \u003ccode\u003emyArray[14999]\u003c/code\u003e. So the index of the final element is always one less than the number of elements in the \u003ccode\u003eArray\u003c/code\u003e. If only we had an easy way to figure out how many elements are in the \u003ccode\u003eArray\u003c/code\u003e...\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\u003cbr\u003e// =\u0026gt; undefined\u003cbr\u003e\u003cbr\u003ealphabet.length;\u003cbr\u003e// =\u0026gt; 26\u003cbr\u003e\u003cbr\u003ealphabet[alphabet.length - 1];\u003cbr\u003e// =\u0026gt; \"z\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is why it's called the \u003cstrong\u003e\u003cem\u003ecomputed\u003c/em\u003e\u003c/strong\u003e \u003cem\u003emember access operator\u003c/em\u003e. We placed an expression (\u003ccode\u003ealphabet.length - 1\u003c/code\u003e) inside the square brackets, and the JavaScript engine \u003cem\u003ecomputed\u003c/em\u003e the value of that expression to determine which element we were trying to access. In this case, \u003ccode\u003ealphabet.length - 1\u003c/code\u003e evaluated to \u003ccode\u003e25\u003c/code\u003e, so \u003ccode\u003ealphabet[alphabet.length - 1]\u003c/code\u003e became \u003ccode\u003ealphabet[25]\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eUpdating the Value of an Element\u003c/h2\u003e  \u003cp\u003eWe can also use the computed member access operator (\u003ccode\u003e[]\u003c/code\u003e) — along with the assignment operator (\u003ccode\u003e=\u003c/code\u003e) — to update the value of an element in the array. To do that, we access the element we want then reassign that element's value using \u003ccode\u003e=\u003c/code\u003e. Say we've defined an array, \u003ccode\u003eplanets\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Juptier\", \"Saturn\", \"Uranus\", \"Neptune\"];\u003cbr\u003e//=\u0026gt; undefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLooks like we've got a typo. Let's fix it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eplanets[4] = \"Jupiter\"; \u003cbr\u003e//=\u0026gt; \"Jupiter\"\u003cbr\u003e\u003cbr\u003eplanets;\u003cbr\u003e//=\u0026gt; [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"] \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You might wonder why that worked, given that we declared \u003ccode\u003eplanets\u003c/code\u003e using \u003ccode\u003econst\u003c/code\u003e. After all, declaring with \u003ccode\u003econst\u003c/code\u003e is supposed to prevent us from reassigning the value of the variable! This is an important thing to know about how \u003ccode\u003econst\u003c/code\u003e works with \u003ccode\u003eArray\u003c/code\u003es. We are not able to reassign the array \u003cem\u003eitself\u003c/em\u003e but we \u003cstrong\u003ecan\u003c/strong\u003e reassign any of its elements. We can also add or delete elements. JavaScript \u003ccode\u003eObject\u003c/code\u003es work similarly when declared using \u003ccode\u003econst\u003c/code\u003e (which isn't surprising, given that \u003ccode\u003eArray\u003c/code\u003es are a special type of \u003ccode\u003eObject\u003c/code\u003e).\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eAdding an Element to the End of an Array\u003c/h3\u003e  \u003cp\u003eWhile it is not the best way to accomplish the task, we can also use the computed member access operator to add an element to the end of an array. If conclusive evidence of the existence of \u003ca href=\"https://en.wikipedia.org/wiki/Planet_Nine\"\u003ePlanet Nine\u003c/a\u003e is ever found, we could add it to the end of our array as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eplanets[planets.length] = \"Planet Nine\"; // Why did we use planets.length here?\u003cbr\u003e// =\u0026gt; \"Planet Nine\"\u003cbr\u003e\u003cbr\u003eplanets;\u003cbr\u003e//=\u0026gt; [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Planet Nine\"]; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe will learn better ways to add an element to the end of an array in the next lesson.\u003c/p\u003e  \u003ch2\u003eNested Arrays\u003c/h2\u003e  \u003cp\u003eWe mentioned above that arrays can contain elements of \u003cstrong\u003eany\u003c/strong\u003e data type; this includes \u003cstrong\u003eother \u003ccode\u003eArray\u003c/code\u003es\u003c/strong\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst egregiouslyNestedArray = ['How', ['deep', ['can', ['we', ['go', ['?'], 'Pretty'], 'dang'], 'deep,'], 'it'], 'seems.']; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you examine the array above, you'll see it contains three elements, the second of which is itself an array.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[0];\u003cbr\u003e//=\u0026gt; 'How'\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[1];\u003cbr\u003e//=\u0026gt; [ 'deep', [ 'can', [ 'we', [Array], 'dang' ], 'deep,' ], 'it' ]\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[2];\u003cbr\u003e//=\u0026gt; 'seems.' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo we know we can access the inner array using \u003ccode\u003eegregiouslyNestedArray[1]\u003c/code\u003e, but how do we access the array nested inside \u003cem\u003ethat\u003c/em\u003e array? We simply add another set of brackets:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[1][0];\u003cbr\u003e//=\u0026gt; 'deep'\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[1][1];\u003cbr\u003e//=\u0026gt; [ 'can', [ 'we', [ 'go', [Array], 'Pretty' ], 'dang' ], 'deep,' ]\u003cbr\u003e\u003cbr\u003eegregiouslyNestedArray[1][2];\u003cbr\u003e//=\u0026gt; 'it' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can continue drilling down in this way, adding another set of brackets for each nested array, until we get to the innermost array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[1][1][1][1][1];\u003cbr\u003e//=\u0026gt; ['?'] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat innermost array contains only one element, so how would we access that?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eegregiouslyNestedArray[1][1][1][1][1][0];\u003cbr\u003e//=\u0026gt; '?' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhile it's great that \u003ccode\u003eArray\u003c/code\u003es allow us to store other \u003ccode\u003eArray\u003c/code\u003es inside them, this is a terrible way to represent a deeply nested data structure. In general, it is best to keep your \u003ccode\u003eArray\u003c/code\u003es to no more than two levels deep. Two levels is perfect for representing two-dimensional things like a tic-tac-toe board:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst board = [\u003cbr\u003e  ['X', 'O', ' '],\u003cbr\u003e  [' ', 'X', 'O'],\u003cbr\u003e  ['X', ' ', 'O']\u003cbr\u003e];\u003cbr\u003e\u003cbr\u003eboard;\u003cbr\u003e// =\u0026gt; [[\"X\", \"O\", \" \"], [\" \", \"X\", \"O\"], [\"X\", \" \", \"O\"]] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe cool thing about representing a game board like that is in how we can access the different squares by specifying coordinates. The first \u003ccode\u003e[]\u003c/code\u003e operator grabs the row that we want, top (\u003ccode\u003eboard[0]\u003c/code\u003e), middle (\u003ccode\u003eboard[1]\u003c/code\u003e), or bottom (\u003ccode\u003eboard[2]\u003c/code\u003e). For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eboard[1];\u003cbr\u003e// =\u0026gt; [\" \", \"X\", \"O\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe second \u003ccode\u003e[]\u003c/code\u003e operator specifies the column, or the square within that row: left (\u003ccode\u003eboard[1][0]\u003c/code\u003e), middle (\u003ccode\u003eboard[1][1]\u003c/code\u003e), or right (\u003ccode\u003eboard[1][2]\u003c/code\u003e). For example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eboard[0][0];\u003cbr\u003e// =\u0026gt; \"X\"\u003cbr\u003e\u003cbr\u003eboard[0][2];\u003cbr\u003e// =\u0026gt; \" \"\u003cbr\u003e\u003cbr\u003eboard[2][2];\u003cbr\u003e// =\u0026gt; \"O\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEffectively, we're using X and Y coordinates to refer to data within a two- dimensional structure.\u003c/p\u003e  \u003ch2\u003eArray Methods\u003c/h2\u003e  \u003cp\u003eJavaScript includes a number of built-in \u003ccode\u003eArray\u003c/code\u003e \u003cem\u003emethods\u003c/em\u003e, functions that \u003cem\u003ebelong to\u003c/em\u003e (i.e., can only be called on) \u003ccode\u003eArray\u003c/code\u003es. These methods allow us to manipulate arrays in various ways, for example, to add an element to the beginning or end of an \u003ccode\u003eArray\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe have seen methods already in this course. In an earlier lesson, for example, we learned how to use a String method, \u003ccode\u003etoUpperCase()\u003c/code\u003e, to convert a String to all uppercase:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst string = \"Hello\";\u003cbr\u003e\u003cbr\u003estring.toUpperCase();\u003cbr\u003e//=\u0026gt; \"HELLO\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs shown above, we call String methods \u003cem\u003eon\u003c/em\u003e a string or string variable using the dot notation. \u003ccode\u003eArray\u003c/code\u003e methods work in the same way. Some of them will take one or more arguments — for example, the element we want to add to the array. The arguments are passed in the parentheses after the method name.\u003c/p\u003e  \u003cp\u003eWe will learn about these \u003ccode\u003eArray\u003c/code\u003e methods in the next lesson. Before we get to that, however, we need to introduce one more concept.\u003c/p\u003e  \u003ch2\u003eMutability\u003c/h2\u003e  \u003cp\u003eSome methods update or \u003cem\u003emutate\u003c/em\u003e the object they are called on; these methods are referred to as \u003cem\u003edestructive\u003c/em\u003e. Other methods, known as \u003cem\u003enondestructive\u003c/em\u003e methods, leave the object intact. For example, the String method \u003ccode\u003etoUpperCase()\u003c/code\u003e is \u003cem\u003enondestructive\u003c/em\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst string = \"Hello\";\u003cbr\u003e\u003cbr\u003estring.toUpperCase();\u003cbr\u003e//=\u0026gt; \"HELLO\"\u003cbr\u003e\u003cbr\u003estring;\u003cbr\u003e//=\u0026gt; \"Hello\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003etoUpperCase()\u003c/code\u003e method returns the uppercased version of \u003ccode\u003estring\u003c/code\u003e, it does not \u003cem\u003echange\u003c/em\u003e its value to uppercase.\u003c/p\u003e  \u003cp\u003eSometimes we want to mutate the original object but, in general, it's good practice to avoid mutating a program's state whenever possible. Otherwise, we won't always know what we're dealing with. You will learn more about immutability and why it's important later in the course. But, in the meantime, it's important to know which JavaScript methods are destructive and which are nondestructive so you can choose the appropriate method for what you need to accomplish.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we learned about JavaScript \u003ccode\u003eArray\u003c/code\u003es, including how to create them, access their elements, and change the value of elements. We also learned that arrays can contain elements of any data type, including other \u003ccode\u003eArray\u003c/code\u003es; we refer to these as \u003cem\u003enested\u003c/em\u003e arrays. Finally, we talked a little bit about the concept of mutability. Armed with this knowledge, we are now ready to tackle JavaScript \u003ccode\u003eArray\u003c/code\u003e methods.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"the-variable-lookup-expression","title":"The Variable Lookup Expression","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-the-variable-lookup-expression\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-variable-lookup-expression\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-variable-lookup-expression/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine the Variable Lookup Expression\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThe final of our \u003cem\u003eessential three\u003c/em\u003e expressions is the variable lookup expression. Like the \u003cem\u003econstant expression\u003c/em\u003e, it is boring yet profound. Once we've assigned a value to a \u003cem\u003evariable name\u003c/em\u003e using the \u003cem\u003eassignment expression\u003c/em\u003e, we can use the \u003cem\u003evariable lookup expression\u003c/em\u003e to retrieve that value. Using our metaphors from the previous lesson, it looks up the variable's definition in the dictionary, or \"shakes out\" the value that was put in the labeled box.\u003c/p\u003e  \u003ch2\u003eDefine the Variable Lookup Expression\u003c/h2\u003e  \u003cp\u003eTo look up the value in a variable we simply type the variable's name in.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// Assignment expression that returns 32\u003cbr\u003eage = 32\u003cbr\u003e\u003cbr\u003e// Type in the assigned name\u003cbr\u003eage \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn return, we get \u003ccode\u003e32\u003c/code\u003e.\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@MaxwellBenton2/TraumaticQuixoticDriver?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eThat’s it. The values we associate with the assignment expression can be retrieved by simply typing the variable's name.\u003c/p\u003e  \u003ch2\u003eVariable Lookup as Conversation\u003c/h2\u003e  \u003cp\u003eIn the previous lesson, we talked about a parent and a baby. A parent repeats their name hundreds of times to get the baby to assign their face to the variable \u003ccode\u003ema-ma\u003c/code\u003e. When the baby first sees that face again and says \"\u003ccode\u003ema-ma\u003c/code\u003e!\" the parent has successfully taught the child \"variable lookup.\" Although there are no pages in baby journals for \"Baby's First Variable Lookup.\"\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-variable-lookup-expression/Image_55_Mama-Baby_4.png\" alt=\"Successful Lookup\"\u003e\u003c/p\u003e  \u003cp\u003eIf you think about it, most of childhood education until early elementary school is giving them thousands of assignment expressions so they can participate in the world: \"Red,\" \"one,\" \"eleven,\" \"far.\"\u003c/p\u003e  \u003cp\u003eConsider this scenario. Look for the \u003cem\u003eessential three\u003c/em\u003e expressions in here.\u003c/p\u003e  \u003cp\u003eParent: See the doggie? That’s a doggie.\u003cbr\u003e Child: Doggie?\u003cbr\u003e Parent: That’s right, that’s a doggie. Doggies say \"Woof-woof!\"\u003cbr\u003e Child: Doggie?\u003cbr\u003e Parent: Right. Doggie.  \u003c/p\u003e  \u003cp\u003e\u003cem\u003eSome time later\u003c/em\u003e\u003c/p\u003e  \u003cp\u003eChild: Doggie!\u003cbr\u003e Parent: That’s right. Doggie!  \u003c/p\u003e  \u003cp\u003eLet’s compare teaching a baby a four-legged animal's name and teaching JavaScript that \u003ccode\u003ea\u003c/code\u003e is \u003ccode\u003e4\u003c/code\u003e.\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\u003ctr\u003e     \u003cth\u003eExpression\u003c/th\u003e     \u003cth\u003eReal-Life Conversation\u003c/th\u003e     \u003cth\u003eJavaScript Conversation\u003c/th\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003eConstant Expression\u003c/td\u003e     \u003ctd\u003eParent points to the doggie\u003c/td\u003e     \u003ctd\u003e\n\u003ccode\u003e4\u003c/code\u003e (evaluates to \u003ccode\u003e4\u003c/code\u003e)\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eAssignment Expression\u003c/td\u003e     \u003ctd\u003eParent teaches child that \"Doggie\" = \u003cimg alt=\"Puppy picture\" src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-variable-lookup-expression/small_puppy.JPG\"\u003e\n\u003c/td\u003e     \u003ctd\u003e\n\u003ccode\u003ea = 4\u003c/code\u003e (evaluates to \u003ccode\u003e4\u003c/code\u003e)\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003eVariable Lookup\u003c/td\u003e     \u003ctd\u003eChild sees the dog and says \"Doggie!\"\u003c/td\u003e     \u003ctd\u003e\n\u003ccode\u003ea\u003c/code\u003e (evaluates to \u003ccode\u003e4\u003c/code\u003e)\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\u003c/table\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eNow that the \u003cem\u003eessential three\u003c/em\u003e expressions are under your control, we're going to start rapidly building up the richness of things you can do using expressions. Whole programming languages are built around executing through evaluating expressions! Languages that work this way are called \"functional languages\" and they are some of the first programming languages ever created.\u003c/p\u003e","frontPage":false},{"exportId":"javascript-events","title":"JavaScript Events","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a JavaScript event\u003c/li\u003e\n\u003cli\u003eIdentify different types of user events\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've experimented with selecting and manipulating nodes in the DOM using\nJavaScript: deleting nodes, editing nodes, etc. But most web applications are\n\u003cem\u003enot\u003c/em\u003e used by people opening up the console and editing the DOM using Chrome's\nDevTools. Instead, people \u003cem\u003edo something\u003c/em\u003e and then \u003cem\u003ework happens\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\"Doing work\" in response to \"something happening\" is known as \u003cem\u003eevent handling\u003c/em\u003e.\n\u003cem\u003eEvents\u003c/em\u003e are the \"something the user does\" and the \"\u003cem\u003ecallback function\u003c/em\u003e\" is the\nwork that will happen in response to the event being triggered.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson we'll go over some of the most commonly-used JavaScript events.\nIn the following lessons, we'll learn how to use \u003cem\u003eevent listeners\u003c/em\u003e to tell\nJavaScript which event or events we want it to listen for. We'll also learn how\nto implement \u003cem\u003ecallback functions\u003c/em\u003e to handle the \u003cem\u003ework happens\u003c/em\u003e part of event\nhandling.\u003c/p\u003e\n\n\u003ch2\u003eDefine a JavaScript Event\u003c/h2\u003e\n\n\u003cp\u003eJavaScript has the ability to \"listen\" for things that happen inside the\nbrowser. It can listen for events like whether the browser is resized, or\nwhether someone clicked on a specific image on the screen. The event you're\nprobably most familiar with is \"click.\"\u003c/p\u003e\n\n\u003cp\u003eWe'll go over a few of the more common types of events in this lesson.\u003c/p\u003e\n\n\u003ch2\u003eIdentify Different Types of User Events\u003c/h2\u003e\n\n\u003ch3\u003eMouse Click\u003c/h3\u003e\n\n\u003cp\u003eMouse or trackpad events are some of the most common ones you'll be handling\nusing JavaScript eventing. For example, JavaScript can recognize a single click\non an element in the page and change the styling of the element to highlight it.\nOr it can recognize a double-click on an element and open a zoomed-in view of\nthat element.\u003c/p\u003e\n\n\u003cp\u003eThere are many other mouse events you can use; take a look at the list of\nJavaScript's \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#Mouse_events\"\u003emouse events here\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3\u003eKey Press\u003c/h3\u003e\n\n\u003cp\u003eWhile click events will likely make up the majority of events you'll use, the\nkeyboard is another important source of events. JavaScript currently includes\ntwo \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#Keyboard_events\"\u003ekeyboard events\u003c/a\u003e: \u003ccode\u003ekeydown\u003c/code\u003e and \u003ccode\u003ekeyup\u003c/code\u003e. (A third, \u003ccode\u003ekeypress\u003c/code\u003e,\nhas been deprecated.) When a key is pressed, these events provide a code to\nindicate which key it was. For example, a game program might listen for\n\u003ccode\u003ekeydown\u003c/code\u003e events and, if the space bar was pressed, make the character jump over\nthe hole.\u003c/p\u003e\n\n\u003ch3\u003eForm Submission\u003c/h3\u003e\n\n\u003cp\u003eHTML pages often use a submit button to submit a form to a server. When a user\nsubmits a form, the \u003ccode\u003esubmit\u003c/code\u003e event is fired. An event handler here might pop up\na thank you overlay or log in the user and take them to their home page.\u003c/p\u003e\n\n\u003ch3\u003eOther Events\u003c/h3\u003e\n\n\u003cp\u003eAs you seek to build more complicated applications, you'll need to handle and\ntrigger work on many more events than the few we've discussed in this lesson.\nSome other common events you are likely to encounter are \u003ccode\u003escroll\u003c/code\u003e, \u003ccode\u003emouseenter\u003c/code\u003e\nand \u003ccode\u003emouseleave\u003c/code\u003e, \u003ccode\u003efocus\u003c/code\u003e, \u003ccode\u003eblur\u003c/code\u003e,  and \u003ccode\u003eonchange\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOne important thing to keep in mind is that not all JavaScript events are\nsupported by all browsers. This \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#standard_events\"\u003elist of browser events\u003c/a\u003e includes the ones\nthat can be used in most browsers.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eJavaScript allows us to trigger work when it detects events. You set up an event\nhandler and, when JavaScript recognizes that event, it will execute the event\nhandler's work, which is stored in a \u003cem\u003ecallback function\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eTake a few minutes to look through the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#standard_events\"\u003elist of common events\u003c/a\u003e to\nfamiliarize yourself with the many many ways you can use event handling to\nenhance your users' experience.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events\"\u003eMDN - Web Events\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"javascript-data-types","title":"JavaScript Data Types","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-js-data-types\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-data-types/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-data-types\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-data-types/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003col\u003e \u003cli\u003eDefine a data type\u003c/li\u003e \u003cli\u003eDemonstrate basic type checking with the \u003ccode\u003etypeof\u003c/code\u003e operator\u003c/li\u003e \u003cli\u003eIdentify JavaScript's seven basic data types\u003c/li\u003e \u003cli\u003eDescribe interactions between data of various types in JavaScript\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eDid you ever hear this song from educational TV?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eOne of these things is not like the others.\u003cbr\u003eOne of these things doesn't belong.\u003cbr\u003eCan you tell which thing is not like the other by the time\u003cbr\u003eI finish this song? \u003c/code\u003e\u003c/pre\u003e \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rsRjQDrDnY8\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003eWhat this song is asking the young viewer to engage in is a pretty powerful behavior: \u003cem\u003eabstraction\u003c/em\u003e. It's looking at several \u003cem\u003econcrete\u003c/em\u003e examples and finding some sort of \"ideal\" that the \u003cem\u003econcrete\u003c/em\u003e examples all have in common and using that as a rule to find something that doesn't \u003cem\u003equite\u003c/em\u003e fit.\u003c/p\u003e  \u003cp\u003eDoing this is one of the most profound problems in philosophy and human development. No less an authority than Aristotle wrote a \u003ca href=\"https://plato.stanford.edu/entries/aristotle-categories/\"\u003ewhole book\u003c/a\u003e on it and how humans do it (one of the essential reasons why he \u003ca href=\"https://www.diffen.com/difference/Aristotle_vs_Plato\"\u003ediffers\u003c/a\u003e from his teacher, Plato).\u003c/p\u003e  \u003cp\u003eWho knew JavaScript would lead us to ancient Greece as well as \"Sesame Street?\"\u003c/p\u003e  \u003cp\u003eIn JavaScript, \u003cem\u003econcrete\u003c/em\u003e instances of data can be categorized into \u003cem\u003eabstract\u003c/em\u003e names called \"data types\" or, more simply, \"types.\"\u003c/p\u003e  \u003ch2\u003eWhat Is a Data Type?\u003c/h2\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eEverything in JavaScript is data\u003c/em\u003e\u003c/strong\u003e except:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\n\u003cstrong\u003eOperators\u003c/strong\u003e: \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e!\u003c/code\u003e, \u003ccode\u003e\u0026lt;=\u003c/code\u003e, etc.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eReserved words\u003c/strong\u003e: \u003ccode\u003efunction\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003edebugger\u003c/code\u003e, etc.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eEvery piece of data falls into one of JavaScript's seven data types: numbers, strings, booleans, symbols, objects, \u003ccode\u003enull\u003c/code\u003e, and \u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eBasic Type Checking Using the \u003ccode\u003etypeof\u003c/code\u003e Operator\u003c/h2\u003e  \u003cp\u003eThroughout this lesson, we'll use the \u003ccode\u003etypeof\u003c/code\u003e operator to give us an idea of what data types we're dealing with. \u003ccode\u003etypeof\u003c/code\u003e accepts one argument, the piece of data that we'd like to know the \u003cem\u003etype of\u003c/em\u003e.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e \u003ccode\u003etypeof\u003c/code\u003e is an operator, just like \u003ccode\u003e+\u003c/code\u003e or \u003ccode\u003e!\u003c/code\u003e. We get used to operators being only one character, but JavaScript (and many other languages) have operators with \u003cstrong\u003e\u003cem\u003emore than one\u003c/em\u003e\u003c/strong\u003e character. Because it's an operator, \u003cstrong\u003ewe don't need parentheses with \u003ccode\u003etypeof\u003c/code\u003e\u003c/strong\u003e. That said, JavaScript also supports \u003ccode\u003e()\u003c/code\u003e after \u003ccode\u003etypeof\u003c/code\u003e, but it's commonly not done.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eIdentify JavaScript's Seven Basic Data Types\u003c/h2\u003e  \u003ch3\u003eNumbers\u003c/h3\u003e  \u003cp\u003eSome programming languages divide numbers up into integers, decimals, doubles, floats, and so on. They do this so that they can have higher \u003cem\u003eprecision\u003c/em\u003e in their calculations. In a banking application or airplane wing engineering application we want our interest rate or the curve of the wing to be \u003cstrong\u003e\u003cem\u003eas accurate as possible\u003c/em\u003e\u003c/strong\u003e. For good reason: we want to make sure we get paid or have a safe plane! When JavaScript was created, this level of precision was not thought to be a thing that would be needed, so JavaScript only has a single, all-encompassing number type:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof 42;\u003cbr\u003e//=\u0026gt; \"number\"\u003cbr\u003e\u003cbr\u003etypeof 3.141592653589793;\u003cbr\u003e//=\u0026gt; \"number\"\u003cbr\u003e\u003cbr\u003etypeof 5e-324;\u003cbr\u003e//=\u0026gt; \"number\"\u003cbr\u003e\u003cbr\u003etypeof -Infinity;\u003cbr\u003e//=\u0026gt; \"number\" \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eThink About This:\u003c/strong\u003e As JavaScript has become a language for the back end as well as the front end, its imprecision around numbers keeps it from entering many banking or engineering applications where precision is vital.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eStrings\u003c/h3\u003e  \u003cp\u003eStrings are how we represent text in JavaScript. A string consists of a matching pair of \u003ccode\u003e'single quotes'\u003c/code\u003e, \u003ccode\u003e\"double quotes\"\u003c/code\u003e, or \u003ccode\u003e`backticks`\u003c/code\u003e with zero or more characters in between:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof 'I am a string.';\u003cbr\u003e//=\u0026gt; \"string\"\u003cbr\u003e\u003cbr\u003etypeof \"Me too!\";\u003cbr\u003e//=\u0026gt; \"string\"\u003cbr\u003e\u003cbr\u003etypeof `Me three!`;\u003cbr\u003e//=\u0026gt; \"string\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEven empty strings are strings:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof '';\u003cbr\u003e//=\u0026gt; \"string\" \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eBooleans\u003c/h3\u003e  \u003cp\u003eA boolean can only be one of two possible values: \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. Booleans play a big role in \u003ccode\u003eif\u003c/code\u003e statements and looping in JavaScript.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof true;\u003cbr\u003e//=\u0026gt; \"boolean\"\u003cbr\u003e\u003cbr\u003etypeof false;\u003cbr\u003e//=\u0026gt; \"boolean\" \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eObjects\u003c/h3\u003e  \u003cp\u003eA JavaScript object, unlike the types we've looked at so far, is a \u003cem\u003ecollection\u003c/em\u003e of data rather than a single value. An object consists of a list of properties, wrapped in curly braces \u003ccode\u003e{}\u003c/code\u003e and separated by commas. Each property in the list consists of a name — also known as a \u003ccode\u003ekey\u003c/code\u003e — which points to a value: \u003ccode\u003e\"name\": \"JavaScript\"\u003c/code\u003e. The example below has four properties, with the names (or \u003ccode\u003ekey\u003c/code\u003es) \"name\", \"createdBy\", \"firstReleased\", and \"isAwesome\":\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"name\": \"JavaScript\",\u003cbr\u003e  \"createdBy\": {\u003cbr\u003e    \"firstName\": \"Brendan\",\u003cbr\u003e    \"lastName\": \"Eich\"\u003cbr\u003e  },\u003cbr\u003e  \"firstReleased\": 1995,\u003cbr\u003e  \"isAwesome\": true\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003etypeof {}\u003cbr\u003e//=\u0026gt; \"object\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eA dictionary is a good metaphor here: an object is a collection of terms (the names or keys) and their definitions (the values). In fact, the programming language Python has a similar data type which is called a dictionary.\u003c/p\u003e  \u003cp\u003eNote that objects' properties can point to values of any data type. In the example above, the properties have values of four different types: a string, a number, a boolean, and another object!\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003e\u003cem\u003eArrays\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eAn array is just a list of values enclosed in square brackets: \u003ccode\u003e[\"Byron\", \"Cubby\", \"Boo Radley\", \"Luca\"]\u003c/code\u003e. As with objects, the values can be of any data type. In fact, from JavaScript's perspective, arrays are just special cases of objects. We can see that if we check the data type of our array:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet dogs = ['Byron', 'Cubby', 'Boo Radley', 'Luca'];\u003cbr\u003etypeof dogs;\u003cbr\u003e//=\u0026gt; \"object\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis may seem strange at first, but will make more sense as we learn more about objects and arrays in future lessons.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003enull\u003c/code\u003e data type represents an intentionally absent object. For example, if a piece of code returns an object when it successfully executes, we could have it return \u003ccode\u003enull\u003c/code\u003e in the event of an error. Confusingly, the \u003ccode\u003etypeof\u003c/code\u003e operator returns \u003ccode\u003e\"object\"\u003c/code\u003e when called with \u003ccode\u003enull\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof null;\u003cbr\u003e//=\u0026gt; \"object\" \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eThe bane of many JS developers, \u003ccode\u003eundefined\u003c/code\u003e is a bit of a misnomer. Instead of 'not defined,' it actually means something more like 'not yet assigned a value.'\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etypeof undefined;\u003cbr\u003e//=\u0026gt; \"undefined\"\u003cbr\u003e\u003cbr\u003elet unassignedVariable;\u003cbr\u003etypeof unassignedVariable;\u003cbr\u003e//=\u0026gt; \"undefined\"\u003cbr\u003e\u003cbr\u003eunassignedVariable = '';\u003cbr\u003etypeof unassignedVariable;\u003cbr\u003e//=\u0026gt; \"string\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAny variable declared but not defined will be \u003ccode\u003eundefined\u003c/code\u003e until a value is assigned.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003e\u003cem\u003eTop Tip\u003c/em\u003e\u003c/strong\u003e: When writing JavaScript code, it's good practice to \u003cstrong\u003e\u003cem\u003enever\u003c/em\u003e\u003c/strong\u003e set a variable equal to \u003ccode\u003eundefined\u003c/code\u003e. Variables will be \u003ccode\u003eundefined\u003c/code\u003e until we explicitly assign a value, so encountering an \u003ccode\u003eundefined\u003c/code\u003e variable is a strong signal that the variable was declared but not assigned prior to the reference. That's valuable information that we can use while debugging, and it comes at no additional cost to us.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eSymbols\u003c/h3\u003e  \u003cp\u003eSymbols are a relatively new data type (introduced in ES2015) that's primarily used as an alternative way to add properties to objects. Don't worry about symbols for now.\u003c/p\u003e  \u003ch3\u003ePrimitive Types\u003c/h3\u003e  \u003cp\u003eSix of the seven JavaScript data types —\u0026nbsp;everything except object — are \u003cstrong\u003eprimitive\u003c/strong\u003e. All this means is that they represent \u003cem\u003esingle\u003c/em\u003e values, such as \u003ccode\u003e7\u003c/code\u003e or \u003ccode\u003e\"hello\"\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e, instead of a collection of values.\u003c/p\u003e  \u003ch2\u003eHow Different JavaScript Data Types Interact\u003c/h2\u003e  \u003cp\u003eEvery programming language has its own rules governing the ways in which we can operate on data of a given type. For example, it's rather uncontroversial that numbers can be subtracted from other numbers...\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e3 - 2;\u003cbr\u003e//=\u0026gt; 1 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e...and that strings can be added to other strings:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'Hello' + \", \" + `world!`;\u003cbr\u003e//=\u0026gt; \"Hello, world!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut what happens if you mix them?\u003c/p\u003e  \u003cp\u003eSome programming languages, such as Python, are strict about how data of different types can interact, and they will refuse to compile a program that blends types. Well, that's rather strict.\u003c/p\u003e  \u003cp\u003eOther languages, such as Ruby, will attempt to handle the interaction by converting one of the data types so all data is of the same type. For example, instead of throwing an error when an integer (\u003ccode\u003e3\u003c/code\u003e) is added to a floating-point number (\u003ccode\u003e0.14159\u003c/code\u003e), Ruby will simply convert the integer into a floating-point number and correctly calculate the sum:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e3 + 0.14159\u003cbr\u003e#=\u0026gt; 3.14159 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRuby throws errors when some stranger cases come up:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026gt; \"THX-\" + 1138\u003cbr\u003eTypeError: no implicit conversion of Fixnum into String \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat seems pretty reasonable: Ruby won't make the \u003ccode\u003eInteger\u003c/code\u003e, \u003ccode\u003e1138\u003c/code\u003e, into a \u003ccode\u003eString\u003c/code\u003e without being directly told that you want it to be a \u003ccode\u003eString\u003c/code\u003e (same as Python's rule).\u003c/p\u003e  \u003cp\u003eThat seems like a good baseline. JavaScript, on the other hand, is a little \u003cem\u003etoo\u003c/em\u003e nice when handling conflicting data types. \u003cstrong\u003eNo matter what weird combination of types you give it, JavaScript won't throw an error and will return \u003cem\u003esomething\u003c/em\u003e (though that \u003cem\u003esomething\u003c/em\u003e might make no sense at all).\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eSometimes it makes \u003cem\u003esome\u003c/em\u003e sense:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e'High ' + 5 + '!';\u003cbr\u003e//=\u0026gt; \"High 5!\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e...and sometimes it's downright \u003ca href=\"https://www.destroyallsoftware.com/talks/wat\"\u003ecomical\u003c/a\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003enull ** 2; // null to the power of 2\u003cbr\u003e//=\u0026gt; 0\u003cbr\u003e\u003cbr\u003eundefined ** null; // undefined to the power of null\u003cbr\u003e//=\u0026gt; 1\u003cbr\u003e\u003cbr\u003e{}+{}; // empty object plus empty object\u003cbr\u003e//=\u0026gt; \"[object Object][object Object]\" \u0026lt;-- That's a string! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhy JavaScript returns a string when we ask it to add two empty objects is anyone's guess, but its heart is in the right place. The language always tries to bend over backwards for us, returning actionable data instead of throwing errors. However, JavaScript's eagerness occasionally results in data type issues that surprise novice and expert programmers alike.\u003c/p\u003e  \u003cp\u003eTry to follow along with what's happening here:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e1 + 2 + 3 + 4 + 5;\u003cbr\u003e//=\u0026gt; 15\u003cbr\u003e\u003cbr\u003e'1' + 2 + 3 + 4 + 5;\u003cbr\u003e//=\u0026gt; \"12345\"\u003cbr\u003e\u003cbr\u003e1 + '2' + 3 + 4 + 5;\u003cbr\u003e//=\u0026gt; \"12345\"\u003cbr\u003e\u003cbr\u003e1 + 2 + '3' + 4 + 5;\u003cbr\u003e//=\u0026gt; \"3345\"\u003cbr\u003e\u003cbr\u003e1 + 2 + 3 + '4' + 5;\u003cbr\u003e//=\u0026gt; \"645\"\u003cbr\u003e\u003cbr\u003e1 + 2 + 3 + 4 + '5';\u003cbr\u003e//=\u0026gt; \"105\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs long as we are only adding numbers to other numbers, JavaScript performs the expected addition. However, as soon as we throw a string in the mix, we stop adding and start concatenating everything together into a string. Let's take a look at an example to see how this works:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e1 + 2 + '3' + 4 + 5;\u003cbr\u003e//=\u0026gt; \"3345\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFirst, we add the numbers \u003ccode\u003e1\u003c/code\u003eand \u003ccode\u003e2\u003c/code\u003e together to get \u003ccode\u003e3\u003c/code\u003e (a number). We then ask JavaScript to add \u003ccode\u003e3\u003c/code\u003e (a number) to \u003ccode\u003e\"3\"\u003c/code\u003e (a string). JavaScript can't perform addition with a string, so it decides to concatenate the two operands instead, resulting in \u003ccode\u003e\"33\"\u003c/code\u003e (a string). The next operation, \u003ccode\u003e\"33\" + 4\u003c/code\u003e, is also between a string and a number, and JavaScript once again concatenates, giving us the result of \u003ccode\u003e\"334\"\u003c/code\u003e (a string). In the final operation, we're adding \u003ccode\u003e\"334\"\u003c/code\u003e with \u003ccode\u003e5\u003c/code\u003e (a number). Again, JavaScript concatenates, giving the final result of \u003ccode\u003e\"3345\"\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eYou'll encounter a lot of these weird data type behaviors throughout your JavaScript programming, but fear not: they'll trip you up less and less often as you gain experience.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson we've learned about data types, which are abstractions used to categorize pieces of information, or data. JavaScript defines seven different types: numbers, strings, booleans, symbols, objects, \u003ccode\u003enull\u003c/code\u003e, and \u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\"\u003eMDN — JavaScript data types and data structures\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://www.destroyallsoftware.com/compendium/types?share_key=baf6b67369843fa2\"\u003eDestroy All Software —\u0026nbsp;Types\u003c/a\u003e – A cross-language examination of type in various languages\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://www.destroyallsoftware.com/talks/wat\"\u003eDestroy All Software —\u0026nbsp;Wat\u003c/a\u003e –\u0026nbsp;A beloved \u003cstrong\u003e\u003cem\u003eand hilarious\u003c/em\u003e\u003c/strong\u003e talk in which JavaScript's friendliness when mixing types is discussed at a feverish pace – with awesome slides\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"selection-with-conditionals-the-if-statement","title":"Selection with Conditionals: the if Statement","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-selection-with-conditionals\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-selection-with-conditionals/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-selection-with-conditionals\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-selection-with-conditionals/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eLearn to use the \u003ccode\u003eif\u003c/code\u003e statement\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've covered the default sequence the JavaScript engine follows when reading and executing JavaScript code. We've also learned that there are two types of statements that will enable us to change the default sequence: \u003cstrong\u003eselection\u003c/strong\u003e statements and \u003cstrong\u003erepetition\u003c/strong\u003e statements. In this lesson and the next one, we'll learn more about \u003cstrong\u003eselection\u003c/strong\u003e statements, i.e., conditionals.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Selection_thick.png\" alt=\"Seelection Image\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eConditional\u003c/strong\u003e statements enable us to execute code if a certain condition is true (or false). Some real-life examples might look like:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eif\u003c/code\u003e hungry → make a meal.  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eelse\u003c/code\u003e → don't make a meal.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eif\u003c/code\u003e light is green → press gas pedal.  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eelse\u003c/code\u003e → press brake pedal.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eif\u003c/code\u003e it's the first of the month → pay the bill.  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eelse\u003c/code\u003e → don't pay the bill.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou might also hear this referred to as \u003cstrong\u003econtrol flow\u003c/strong\u003e because it helps control the flow (i.e., sequence) of an application.\u003c/p\u003e  \u003cp\u003eJavaScript includes three structures for implementing code conditionally: \u003cem\u003eif statements\u003c/em\u003e, \u003cem\u003eswitch statements\u003c/em\u003e, and \u003cem\u003eternary expressions\u003c/em\u003e. In this lesson, we will learn how to construct \u003ccode\u003eif\u003c/code\u003e statements.\u003c/p\u003e  \u003ch2\u003eLearn to Use the \u003ccode\u003eif\u003c/code\u003e Statement\u003c/h2\u003e  \u003cp\u003eTo write a basic \u003ccode\u003eif\u003c/code\u003e statement, we use the following structure:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif (condition) {\u003cbr\u003e  // Block of code\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt consists of the \u003ccode\u003eif\u003c/code\u003e keyword followed by the condition to be checked in parentheses.  After that comes a \u003cem\u003eblock statement\u003c/em\u003e (more commonly called a \u003cem\u003ecode block\u003c/em\u003e): one or more JavaScript expressions or statements enclosed in \u003ccode\u003e{}\u003c/code\u003e. The \u003cem\u003ecode block\u003c/em\u003e contains the code we want to execute \u003cem\u003eif\u003c/em\u003e the condition returns a truthy value:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/StormyColorlessArea?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eIn the code above, age is initialized to 30, so the condition (\u003ccode\u003eage \u0026gt;= 18\u003c/code\u003e) resolves to \u003ccode\u003etrue\u003c/code\u003e. The code in the code block executes, setting the \u003ccode\u003eisAdult\u003c/code\u003e variable to \u003ccode\u003etrue\u003c/code\u003e. Try making some changes — assigning different values to \u003ccode\u003eage\u003c/code\u003e; changing the conditional statement — to see what happens.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eelse\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eOften we want to run one block of code when the condition returns a \u003ccode\u003etruthy\u003c/code\u003e value and a \u003cem\u003edifferent\u003c/em\u003e block of code when it returns a \u003ccode\u003efalsey\u003c/code\u003e value. To do this, we use an \u003ccode\u003eelse\u003c/code\u003e clause:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/CarefulSteepDefinition?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eNote that the \u003ccode\u003eelse\u003c/code\u003e clause \u003cstrong\u003edoes not take a condition\u003c/strong\u003e — if the condition for the \u003ccode\u003eif\u003c/code\u003e returns a falsey value, we want the \u003ccode\u003eelse\u003c/code\u003e code block to run \u003cstrong\u003eno matter what\u003c/strong\u003e. This means that exactly one of the code blocks will \u003cem\u003ealways\u003c/em\u003e run.\u003c/p\u003e  \u003ch3\u003eThe Ternary Expression\u003c/h3\u003e  \u003cp\u003eRecall that this is the exact situation where we can use a ternary expression. Here's what the code above would look like using a ternary:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/ReadyOnerlookedArray?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eHere, we assign \u003ccode\u003eisAdult\u003c/code\u003e as \u003ccode\u003etrue\u003c/code\u003e if the condition returns a truthy value and as \u003ccode\u003efalse\u003c/code\u003e otherwise, exactly like the version using \u003ccode\u003eif\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eRemember that a ternary is an \u003cem\u003eexpression\u003c/em\u003e — it returns a \u003cem\u003evalue\u003c/em\u003e. What this means is that we can simplify the code above a bit and assign the \u003cem\u003eresult\u003c/em\u003e of the ternary directly to a variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 26;\u003cbr\u003econst isAdult = age \u0026gt;= 18 ? true : false;\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e//=\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe ternary expression is evaluated and resolved to \u003ccode\u003etrue\u003c/code\u003e, and that value is assigned to the variable \u003ccode\u003eisAdult\u003c/code\u003e. Try this version out in the REPL to verify that it works.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e What is the ternary above doing? Basically, it's saying: \"when the conditional code returns \u003ccode\u003etrue\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e, and when the conditional code returns \u003ccode\u003efalse\u003c/code\u003e, return \u003ccode\u003efalse\u003c/code\u003e.\" Sounds a bit redundant, doesn't it? When the return values are \u003ccode\u003etrue\u003c/code\u003e and \u003ccode\u003efalse\u003c/code\u003e as in the example above, you actually don't need to use a ternary — or an \u003ccode\u003eif...else\u003c/code\u003e — at all! This is because \u003cstrong\u003e\u003cem\u003ethe conditional is an expression as well\u003c/em\u003e\u003c/strong\u003e. The return value of \u003ccode\u003eage \u0026gt;= 18\u003c/code\u003e is a \u003cem\u003eBoolean value\u003c/em\u003e (\u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e), so it can be assigned directly to our \u003ccode\u003eisAdult\u003c/code\u003e variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 6;\u003cbr\u003econst isAdult = age \u0026gt;= 18;\u003cbr\u003e\u003cbr\u003eisAdult;\u003cbr\u003e//=\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe ternary (or \u003ccode\u003eif...else\u003c/code\u003e) is only necessary if the desired return value is something other than a Boolean:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst age = 20;\u003cbr\u003econst ageMessage = age \u0026gt;= 18 ? \"Congratulations! You're an adult!\" : \"Enjoy your childhood while it lasts!\";\u003cbr\u003e\u003cbr\u003eageMessage;\u003cbr\u003e//=\u0026gt; \"Congratulations! You're an adult!\" \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e Be careful to not overuse the ternary expression. It's fine for slimming down a simple \u003ccode\u003eif...else\u003c/code\u003e, but be conscious of how easy your code is to understand for an outsider. Remember, you generally write code once, but it gets read (by yourself and others) \u003cstrong\u003efar\u003c/strong\u003e more than once. The ternary is often more difficult to quickly interpret than a regular old \u003ccode\u003eif...else\u003c/code\u003e, so make sure the reduction in code is worth any potential reduction in readability.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003e\u003ccode\u003eelse if\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eWe've discussed the case where our condition is \u003cem\u003ebinary\u003c/em\u003e (one code block executes if the conditional returns true and a second executes otherwise), but sometimes we need to check multiple conditions. We can handle this situation by using one or more \u003ccode\u003eelse if\u003c/code\u003e clauses.\u003c/p\u003e  \u003cp\u003eLet's say that instead of just deciding whether the passed-in \u003ccode\u003eage\u003c/code\u003e meets the criterion for \u003ccode\u003eisAdult\u003c/code\u003e, we want to add in some other examples of adulthood (in American society, at least): \u003ccode\u003ecanWork\u003c/code\u003e, \u003ccode\u003ecanEnlist\u003c/code\u003e, and \u003ccode\u003ecanDrink\u003c/code\u003e. 16-year-olds can legally work; 18-year-olds can do what 16-year-olds can do \u003cstrong\u003eplus\u003c/strong\u003e they can enlist and they are legal adults; 21-year-olds can do what 16- and 18-year-olds can do \u003cstrong\u003eplus\u003c/strong\u003e they can drink (at the federally set minimum age).\u003c/p\u003e  \u003cp\u003eHere's how we can handle that using \u003ccode\u003eelse if\u003c/code\u003e clauses:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/AccomplishedEmbellishedCheckpoint?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eAny time you use an \u003ccode\u003eif...else if\u003c/code\u003e construction, \u003cstrong\u003eat most one code block will be executed\u003c/strong\u003e. As soon as one of the conditions returns a truthy value, the attached code block runs and the conditional statement ends. In the example above, we have not included an \u003ccode\u003eelse\u003c/code\u003e statement so, if none of the conditions is truthy, no code blocks will be run. If we had included an \u003ccode\u003eelse\u003c/code\u003e clause, exactly one code block would be run.\u003c/p\u003e  \u003cp\u003eTry different values for \u003ccode\u003eage\u003c/code\u003e in the REPL and check the resulting values of the four variables.\u003c/p\u003e  \u003ch3\u003eNested \u003ccode\u003eif\u003c/code\u003e Statements\u003c/h3\u003e  \u003cp\u003eYou may have noticed that there is some redundancy in the example above: three of the four variables appear in more than one of the conditions. In this circumstance, we can streamline our code a bit by using nested conditional statements:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/SerpentineOddInterpreter?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eThe first \u003ccode\u003eif\u003c/code\u003e condition checks for the \"base level\" of adulthood (\u003ccode\u003eage \u0026gt;= 16\u003c/code\u003e), and each subsequent nested \u003ccode\u003eif\u003c/code\u003e \"adds on.\" Note that each inner \u003ccode\u003eif\u003c/code\u003e statement is nested \u003cstrong\u003einside\u003c/strong\u003e the code block of the one before. This means that the inner \u003ccode\u003eif\u003c/code\u003e statements will only execute if the outer ones are truthy. This makes sense: if age is less than 16, we're done — there's no need to check the remaining conditions because we know they have to be false as well. Otherwise JavaScript will keep checking each subsequent condition until it either comes to one that is false or finishes running all the code blocks.\u003c/p\u003e  \u003cp\u003eWhile nested \u003ccode\u003eif\u003c/code\u003es are more efficient than \u003ccode\u003eif...else if\u003c/code\u003es for handling overlapping categories, they are also more difficult to read. An \u003ccode\u003eif...else if\u003c/code\u003e construction will always work. You should consider the tradeoff of readability vs. efficiency in deciding which construction to use.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we've learned about one of the \u003cem\u003eselection statements\u003c/em\u003e that enable us to modify the \u003cem\u003edefault sequence\u003c/em\u003e: the \u003ccode\u003eif\u003c/code\u003e statement. In the simplest case, the \u003ccode\u003eif\u003c/code\u003e statement consists of the \u003ccode\u003eif\u003c/code\u003e clause, a condition, and a code block to run if the condition returns \u003ccode\u003etrue\u003c/code\u003e. In more complex situations, we can add one or more \u003ccode\u003eelse if\u003c/code\u003e clauses or an \u003ccode\u003eelse\u003c/code\u003e clause.\u003c/p\u003e  \u003cp\u003eIn the next lesson, we'll learn about another selection statement we can use to create conditional code: the \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eMDN  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#Conditional_statements\"\u003eConditional statements\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"\u003e\u003ccode\u003eif...else\u003c/code\u003e statement\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"about-this-course","title":"About This Course","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-about-this-course\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-about-this-course\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-about-this-course/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eWelcome\u003c/h2\u003e  \u003cp\u003eThis is the beginning of Flatiron School's Software Engineering and Web Development Courses. Before we dive into the core topics of these courses, we need to cover some fundamental topics and make sure you are fully equipped  for success.\u003c/p\u003e  \u003cp\u003eFirst, we need to get your computer (your \u003cem\u003elocal environment\u003c/em\u003e) set up for writing and running code in JavaScript and Ruby. You'll be running code via a terminal on your computer, so we'll also go through the basics of the command-line interface.\u003c/p\u003e  \u003cp\u003eAfter this, we'll introduce Git, GitHub and the concept of version control, essential for storing your programming work in this course and beyond.\u003c/p\u003e  \u003cp\u003eWith these topics covered, we will dive into the technologies behind every modern website - HTML, CSS and JavaScript. These three are best understood in conjunction, so the goal is to introduce just enough of each that you will be able to use them together. When you can, you'll have all the skills needed to build a website entirely from scratch.\u003c/p\u003e  \u003cp\u003eAt the end, your final task is to do just that - build and publish your own website!\u003c/p\u003e","frontPage":false},{"exportId":"css-fundamentals","title":"CSS Fundamentals","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"css-essentials-css-fundamentals\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-css-fundamentals\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-css-fundamentals/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eIdentify CSS syntax\u003c/li\u003e \u003cli\u003eIdentify CSS use formats\u003c/li\u003e \u003cli\u003eImplement various types of CSS selectors\u003c/li\u003e \u003cli\u003eImplement various types of color values in CSS\u003c/li\u003e \u003cli\u003eIdentify and implement CSS comments\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll build on the basics we've learned. We'll learn to select elements based on HTML attributes, we'll learn to apply colors, and we'll learn how to comment our CSS.\u003c/p\u003e  \u003ch2\u003eIdentify CSS Syntax\u003c/h2\u003e  \u003cp\u003eBefore we turn to the various ways we can extend CSS rules, let's go over the foundational syntax CSS uses.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/css-essentials/css-fundamentals/Image_43_ReCreateGraphic.png\" alt=\"\"\u003e\u003c/p\u003e  \u003cp\u003eWe create a CSS rule by defining the selector, which matches the HTML element we want to style. Inside the curly braces we declare the properties we want to change and, after the colon, we set the value we want to change that property to. Each property is written in the following form: property name, colon, the value for that property and a semicolon.\u003c/p\u003e  \u003cp\u003eIn the example above, we are selecting the \u003ccode\u003ep\u003c/code\u003e element and displaying its color as blue.\u003c/p\u003e  \u003ch2\u003eIdentify CSS Use Formats\u003c/h2\u003e  \u003cp\u003eHow do we \"apply\" CSS to an HTML page? By using one of three CSS use formats: inline, internal (or embedded) and external.\u003c/p\u003e  \u003cp\u003eInline includes the styles directly into the HTML element with the \u003ccode\u003estyle\u003c/code\u003e attribute.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;p style=\"color: blue;\"\u0026gt;\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhile you might see this sort of styling in something like the code for an HTML email, this is generally not the best practice for two reasons. The primary reason is because it only affects that single element. If we want all paragraph elements on our page to appear blue, we would have to add that attribute to every element individually, which is inefficient and difficult to maintain into the future. That brings us to the second reason to avoid inline CSS: it breaks our principle of separation of content and presentation.\u003c/p\u003e  \u003cp\u003eInternal CSS is inside of \u003ccode\u003estyle\u003c/code\u003e tags in the HTML document's \u003ccode\u003ehead\u003c/code\u003e section.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;style\u0026gt;\u003cbr\u003e      p { color: blue; }\u003cbr\u003e    \u0026lt;/style\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;p\u0026gt;This is a paragraph.\u0026lt;/p\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis rule will display all paragraphs in this document as blue, which is a step up in scope from the inline styles that only apply to single elements. But this CSS will only apply to the single document. Other paragraph elements on other pages in the same website will be unaffected.\u003c/p\u003e  \u003cp\u003eIf we want our CSS to carry across various pages, we can use an external style sheet. This is a separate CSS file that we link in the \u003ccode\u003ehead\u003c/code\u003e of HTML documents.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;link rel=\"stylesheet\" href=\"styles.css\"\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;p\u0026gt;This is a paragraph.\u0026lt;/p\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith the \u003ccode\u003elink\u003c/code\u003e tag, we can use the relation attribute to define the target as a style sheet and the link source our CSS file that contains all the CSS we want to use on our site. This is by far the easiest way to link CSS to HTML and apply styles across all of our pages.\u003c/p\u003e  \u003ch2\u003eImplement Various Types of CSS Selectors\u003c/h2\u003e  \u003cp\u003eCSS gives us a wide range of ways that we can select elements on the page. Some of these you will use more than others, but it's a good idea to know them all so you can choose the right one when you need it.\u003c/p\u003e  \u003ch3\u003eID and Class Selectors\u003c/h3\u003e  \u003cp\u003eID selectors target all elements with a specific ID attribute value. The way we specify an ID selector in a CSS rule is to follow the element name with a hash symbol and then the ID attribute value we want to match.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ep#introduction {\u003cbr\u003e  color: blue;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, the browser will look for a \u003ccode\u003ep\u003c/code\u003e element with the ID attribute \"introduction\" and apply the CSS to that element. ID selectors are useful when you want to give a single element on the page a unique identity and set it apart from everything else.\u003c/p\u003e  \u003cp\u003eClass selectors target all elements with a class attribute value matching the selector name. We specify a class selector using the period symbol followed by the name value.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ep.alert {\u003cbr\u003e  color: red;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe difference between IDs and classes is that IDs are meant for one element on the page that has a unique identity where class selectors are meant to be spread throughout the page across multiple elements.\u003c/p\u003e  \u003ch3\u003eCompound Selectors\u003c/h3\u003e  \u003cp\u003eCompound selectors let us apply the same CSS rules to multiple elements at once. If we want to make both \u003ccode\u003eh1\u003c/code\u003e and \u003ccode\u003eh2\u003c/code\u003e elements display green, we use both as selectors, separated with a comma.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eh1, h2 {\u003cbr\u003e  color: green;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis eliminates the need to rewrite a new CSS rule containing the same styles for different elements.\u003c/p\u003e  \u003ch3\u003eDescendant Selectors\u003c/h3\u003e  \u003cp\u003eDescendant selectors target elements that are descendants of the matching selector name. A descendant selector is indicated by a space in between one selector and another selector.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003earticle p {\u003cbr\u003e  color: blue;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, \u003cem\u003eonly\u003c/em\u003e \u003ccode\u003ep\u003c/code\u003e elements within the \u003ccode\u003earticle\u003c/code\u003e element will receive the styling.\u003c/p\u003e  \u003cp\u003eID, class, compound and descendant selectors are the kind of selectors you will probably use in your CSS on a regular basis. From this point on, we get into more advanced selectors. They are often not as necessary as the previous ones, but they can accomplish some powerful operations.\u003c/p\u003e  \u003ch3\u003eChild Selectors\u003c/h3\u003e  \u003cp\u003eThe child selector targets all elements that are the immediate children of a specified element.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003earticle \u0026gt; p {\u003cbr\u003e  color: blue;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOnly \u003ccode\u003ep\u003c/code\u003e tags one level down from \u003ccode\u003earticle\u003c/code\u003e will display as blue. If there are \u003ccode\u003ep\u003c/code\u003e tags within an \u003ccode\u003easide\u003c/code\u003e element within the \u003ccode\u003earticle\u003c/code\u003e element, they will not receive the same instructions.\u003c/p\u003e  \u003ch3\u003eAdjacent Sibling Selector\u003c/h3\u003e  \u003cp\u003eThe adjacent sibling selector targets elements that appear directly after the matching selector name. We indicate it using a plus symbol.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eh3 + p {\u003cbr\u003e  color: blue;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere the adjacent sibling selector will style the paragraph directly following an \u003ccode\u003eh3\u003c/code\u003e element but not paragraphs that come after the first.\u003c/p\u003e  \u003ch3\u003eGeneral Sibling Selector\u003c/h3\u003e  \u003cp\u003eThe general sibling selector (sometimes called the preceded selector) will style all matched elements after the preceding selector name.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eh3 ~ p {\u003cbr\u003e  color: red;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith this general sibling selector, all paragraph elements that come after the \u003ccode\u003eh3\u003c/code\u003e will receive the styling.\u003c/p\u003e  \u003ch3\u003eUniversal\u003c/h3\u003e  \u003cp\u003eThe universal selector matches any elements and will apply to elements that are not targeted by other rules. It's indicated by the star symbol.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e* {\u003cbr\u003e  color: yellow;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, this is going to set the color of the text yellow for any element that hasn't had its color property specified elsewhere.\u003c/p\u003e  \u003ch3\u003eAttribute Selectors\u003c/h3\u003e  \u003cp\u003eThe \u003ccode\u003eattribute\u003c/code\u003e selector can target elements with a particular attribute. We can also define exactly which attribute we want to match.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003einput[type=\"text\"] {\u003cbr\u003e  width: 200px;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we want to find \u003ccode\u003einput\u003c/code\u003e elements, but only those with a \u003ccode\u003etype\u003c/code\u003e value that matches \"text.\" For those elements that fit the requirements, the browser will then apply the width we want. There are many different ways to use this type of selector with various combinations of operations and attribute values so you can refer to the resources to explore them all.\u003c/p\u003e  \u003ch3\u003ePseudo-class Selectors\u003c/h3\u003e  \u003cp\u003ePseudo-class selectors target elements based on a particular state of an element or relationship to other elements. The way we signify a pseudo class selector is with the colon symbol.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ea:link {\u003cbr\u003e  color: blue;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ea:visited {\u003cbr\u003e  color: purple;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThese two link examples reflect the way links that are both unvisited and visited will be displayed differently. If the link is unvisited, it will show as blue. If it has been visited, it will show up purple. Pseudo-class selectors, like attribute selectors, have a lot of aspects so you can explore them more in other resources.\u003c/p\u003e  \u003ch2\u003eImplement Various Types of Color Values in CSS\u003c/h2\u003e  \u003cp\u003eWe've been using color names in our examples to keep it simple, but only a handful of color names are recognized by all browsers. When writing CSS, we'll be better off to use different ways of defining our colors.\u003c/p\u003e  \u003ch4\u003eHexadecimal Color Values\u003c/h4\u003e  \u003cp\u003eMost often developers use a set of numbers called hexadecimal, which represents a wide range of colors. Hex colors begin with \u003ccode\u003e#\u003c/code\u003e and are followed by, generally, 6 numbers, but some of these numbers are actually letters. The lowest single digit number in hex is 0 and the highest single digit number is f. This table might help to visualize what we mean by this.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eDecimal Numbers:      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\u003cbr\u003eHexadecimal Numbers:  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,  a,  b,  c,  d,  e,  f, 10 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHex colors work by creating Red, Green, Blue (RGB) values. Traditional RGB colors are on a scale of 0 to 255 for each of the three colors in the spectrum. \u003ccode\u003e#000000\u003c/code\u003e translates to black since 0 reds, 0 green, 0 blues represents the absence of all colors and \u003ccode\u003e#ffffff\u003c/code\u003e makes white since 255 reds, 255 greens, and 255 blues equal the maximum of each of the colors.\u003c/p\u003e  \u003cp\u003eHex colors can be shortened to just three numbers when each RGB value is the same for each digit. So \u003ccode\u003e#111111\u003c/code\u003e can be written as \u003ccode\u003e#111\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eRGB Color Values\u003c/h3\u003e  \u003cp\u003eWe can also work directly with RGB values.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ep {\u003cbr\u003e  color: rgb(255, 255, 255);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we've set our \u003ccode\u003ep\u003c/code\u003e elements to the color white, the maximum of all RGB values (255).\u003c/p\u003e  \u003cp\u003eYou can also add an extra channel to your RGB color by setting an \"a\" value, which represents opacity.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ep {\u003cbr\u003e  color: rgba(0, 0, 255, 0.5);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis example will show up as blue, with 50% opacity so the element will have a somewhat transparent color.\u003c/p\u003e  \u003ch2\u003eIdentify and Implement CSS Comments\u003c/h2\u003e  \u003cp\u003eSometimes developers want to put into their code information that helps other humans understand what the code is doing but without bothering the browser. We do this with comments, and CSS has its own way to mark up comments.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ep.alert {\u003cbr\u003e  color: #ff0000; /* Alert text displays red */\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEverything in between the \u003ccode\u003e/* */\u003c/code\u003e is a CSS comment. The browser will not pay attention to these comments, but they can be useful for us to add explanations or reminders alongside our CSS code.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWe reviewed the specifics of CSS syntax and covered the different ways we can connect CSS to HTML. We ran through the various types of CSS selectors, including IDs, classes, compound, child, adjacent sibling, general sibling, universal, attribute and pseudo-classes. We also took a look at the various ways to express colors, from standard color names to hexadecimal and RGB values. Lastly, we identified how to read and write CSS comments.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started\"\u003eMDN: CSS Tutorials for Beginners\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Reference\"\u003eMDN: CSS Property Reference\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance\"\u003eMDN: CSS Inheritance\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048\"\u003eTuts Plus: 30 CSS selectors to Memorize\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://css-tricks.com/pseudo-class-selectors/\"\u003eCSS Tricks: Learn More Pseudo Selectors\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Web_fonts\"\u003eMDN: Using Web Fonts\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://learn.shayhowe.com/advanced-html-css/performance-organization/\"\u003eShay Howe: CSS Performance \u0026amp; Organization, Best Practices\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://color.adobe.com/create/color-wheel/\"\u003eAdobe Color Tool\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://jigsaw.w3.org/css-validator/\"\u003eCSS Validator\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://flukeout.github.io/\"\u003eCSS Diner Game\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://css-tricks.com/yay-for-hsla/\"\u003eCSS Tricks: Hue, Saturation and Lightness\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"windows-system-setup","title":"Windows System Setup","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-system\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-system/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-system\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-system/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWSL2 is compatible with the Home, Pro, or Server editions of Windows but not\nWindows 10 S (although you can often upgrade to the Home edition for free).\u003c/p\u003e\n\n\u003ch2\u003eCheck That your Windows system is Compatible with Flatiron School’s Requirements\u003c/h2\u003e\n\n\u003cp\u003eWhen working on software, your computer and the software you’re using must be\ncompatible. In this step, we’ll ensure that you are able to install all the\ntools that you will need to complete the program.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: Check your Windows System Specifications\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Settings\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eSelect the \"System\" option\u003c/li\u003e\n\u003cli\u003eSelect \"About\" at the bottom of the list\u003c/li\u003e\n\u003cli\u003eScroll down to the \"Windows specifications\" heading\u003c/li\u003e\n\u003cli\u003eCheck that your \"Edition\" is one of the following: Windows 10 Home, Windows\n10 Pro, Windows 10 Server\u003c/li\u003e\n\u003cli\u003eCheck that your \"Version\" is greater than or equal to \"2004\"\u003c/li\u003e\n\u003cli\u003eCheck that your \"OS build\" is greater than \"19041.000\"\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RbmtGFuqmtw\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf your \"Edition\", \"Version\" and \"OS build\" meet the requirements listed above,\nskip the next step and continue below. Otherwise, continue with the next step to\nupdate to the latest version of Windows 10.\u003c/p\u003e\n\n\u003ch2\u003eUpdate to the Latest Version of Windows 10\u003c/h2\u003e\n\n\u003cp\u003eBefore moving on, make sure that you’re using the latest version of Windows 10.\nThe Windows May 2020 update is essential. Follow the steps below to update your\noperating system.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: Update to the Latest Version of Windows 10\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the Windows 10 Disc Image webpage\n(\u003ca href=\"https://www.microsoft.com/en-us/software-download/windows10\"\u003ehttps://www.microsoft.com/en-us/software-download/windows10\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eClick the \"Update now\" button\u003c/li\u003e\n\u003cli\u003eSelect \"Run\" from the pop-up and allow the app to make changes to your device\u003c/li\u003e\n\u003cli\u003eProgress through the computer update\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/V75EW-jG6QM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you can successfully update to the latest version of Windows 10,\ncontinue below. Otherwise, reach out to your instructor for next steps.\u003c/p\u003e\n\n\n\n\u003ch2\u003eCheck That Your Windows System has Enough Space for Flatiron School’s Requirements\u003c/h2\u003e\n\n\u003cp\u003eThe programs that we’ll be installing during environment setup and all of the\nwork you’ll do with Flatiron School will need at least 1 GB of free disk space.\nFollow the steps below to ensure that you have enough disk space to install all\nthe programs needed during the environment setup.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: Check Your Storage\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Settings\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eSelect the \"System\" option\u003c/li\u003e\n\u003cli\u003eOn the left-hand side, select \"Storage\"\u003c/li\u003e\n\u003cli\u003eCheck that the amount of free space listed beneath the \"C:\" drive heading is\ngreater than 1 GB\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VCYoUBlDK8A\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf your free space for your \"C:\" drive is greater than 1 GB, continue below.\nOtherwise, use the \u003ca href=\"https://www.lifewire.com/free-drive-space-with-disk-cleanup-3506869\"\u003eDisk Cleanup utility\u003c/a\u003e to free more space on your computer.\u003c/p\u003e\n\n\u003ch2\u003eInstall Google Chrome\u003c/h2\u003e\n\n\u003cp\u003eGoogle Chrome is the browser that we will use for your Flatiron School Student\nPortal account and also for front-end web development. You are not required to\nuse Google Chrome for personal work, but we highly encourage you to download\nit for access to your account and for development in the browser.\u003c/p\u003e\n\n\u003ch2\u003eAction Item: Download and Install Google Chrome\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://www.google.com/chrome\"\u003eGoogle Chrome webpage\u003c/a\u003e (\u003ca href=\"https://www.google.com/chrome\"\u003ehttps://www.google.com/chrome\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eClick \"Download Chrome\"\u003c/li\u003e\n\u003cli\u003eSelect \"Run\" from the pop-up and allow the app to make changes to your device\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eCheck Your Work\u003c/h2\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nRpgVG8L6tg\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you can open the \"Google Chrome\" application using the \"Start\" menu,\ncontinue below.\u003c/p\u003e\n\n\u003ch2\u003eInstall Visual Studio Code (VS Code) on Windows\u003c/h2\u003e\n\n\u003cp\u003eVisual Studio Code (VS Code) is the tool that you’ll use to edit your Ruby and\nJavaScript files. It is a text editor that provides some really useful\nextensions for developers. One such tool is an integrated terminal! This means\nthat you can edit your code and use your terminal in the same window. Follow the\nsteps below to get both set up.\u003c/p\u003e\n\n\u003ch3\u003eAction item: download and install Visual Studio Code\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://code.visualstudio.com/Download\"\u003eVisual Studio Code Download webpage\u003c/a\u003e\n\u003ca href=\"https://code.visualstudio.com/Download\"\u003ehttps://code.visualstudio.com/Download\u003c/a\u003e in your browser\u003c/li\u003e\n\u003cli\u003eClick on the Windows download option\u003c/li\u003e\n\u003cli\u003eDownload and run the Visual Studio Code installer\u003c/li\u003e\n\u003cli\u003eComplete the installer\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1gPuktOEc0A\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you can open the \"Visual Studio Code\" application using the \"Start\"\nmenu, continue below.\u003c/p\u003e\n\n\u003ch2\u003eInstall the \"Ubuntu\" Application from the Microsoft Store\u003c/h2\u003e\n\n\u003cp\u003eYou are ready to install and set up the Ubuntu operating system! Ubuntu is a\nLinux-based operating system and this is the application we’ll use to run the\nremainder of the environment setup.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: Install the \"Ubuntu\" Application\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Microsoft Store\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eSearch for \"Ubuntu\" (note: do not choose \"Ubuntu 16.04 LTS\", \"Ubuntu 18.04\nLTS\", or \"Ubuntu 20.04LTS\". Instead, choose the option that has no number\nnext to it.)\u003c/li\u003e\n\u003cli\u003eClick \"Get\" and \"Install\" and wait for the application installation to\ncomplete\u003c/li\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rfZb5l6GBKc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you can open the \"Ubuntu\" application using the \"Start\" menu, do not type\nanything into the window, and continue to the next lesson, \u003cstrong\u003eSetting up WSL2\u003c/strong\u003e.\nOtherwise, reach out to your teaching team for next steps.\u003c/p\u003e","frontPage":false},{"exportId":"repetition-the-while-loop","title":"Repetition: the while Loop","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-while-loop\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-while-loop\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-while-loop/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine the basic \u003ccode\u003ewhile\u003c/code\u003e structure\u003c/li\u003e \u003cli\u003eWrite an infinite loop\u003c/li\u003e \u003cli\u003eUse Control-C to break out of an infinite loop\u003c/li\u003e \u003cli\u003eTerminate a \u003ccode\u003ewhile\u003c/code\u003e loop naturally\u003c/li\u003e \u003cli\u003eLearn about operators used to increment/decrement\u003c/li\u003e \u003cli\u003eUse a \u003ccode\u003edo...while\u003c/code\u003e loop\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThe final piece of using \u003cem\u003estatements\u003c/em\u003e to control the flow of JavaScript execution is \u003cstrong\u003erepetition\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Repetition_thick.png\" alt=\"Repetition Graphic\"\u003e\u003c/p\u003e  \u003cp\u003eWhile the \u003cstrong\u003edefault sequence\u003c/strong\u003e requires JavaScript to execute top-down, left to right, we've seen that we can skip chunks of code using \u003cem\u003eselection\u003c/em\u003e statements (\u003ccode\u003eif\u003c/code\u003e or \u003ccode\u003eswitch\u003c/code\u003e). In some ways the reverse of \u003cem\u003eselection\u003c/em\u003e is \u003cem\u003erepetition\u003c/em\u003e: \"Don't move on,\" we tell JavaScript. \"Instead do something else until I say it's OK to move on.\" The most fundamental \u003cem\u003erepetition\u003c/em\u003e construct, present in pretty much every programming language, is the \u003ccode\u003ewhile\u003c/code\u003e loop.\u003c/p\u003e  \u003ch2\u003eDefine the Basic \u003ccode\u003ewhile\u003c/code\u003e Structure\u003c/h2\u003e  \u003cp\u003eA basic \u003ccode\u003ewhile\u003c/code\u003e loop looks like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewhile (condition expression) {\u003cbr\u003e // stuff to do\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs long as the condition expression is \u003ccode\u003etrue\u003c/code\u003e (or truthy), the code inside the code block will run. Keep in mind the condition expression can be quite rich, using \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, \u003ccode\u003e||\u003c/code\u003e, \u003ccode\u003e()\u003c/code\u003e, etc.\u003c/p\u003e  \u003ch2\u003eWrite an Infinite Loop\u003c/h2\u003e  \u003cp\u003eGiven this definition of \u003ccode\u003ewhile\u003c/code\u003e, any truthy expression will make the loop run forever.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewhile (true) {\u003cbr\u003e  console.log(\"say this forever...\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will output:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esay this forever...\u003cbr\u003esay this forever...\u003cbr\u003esay this forever...\u003cbr\u003esay this forever...\u003cbr\u003esay this forever... ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that the condition expression doesn't need to be the literal value \u003ccode\u003etrue\u003c/code\u003e — any truthy value will have the same effect:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewhile (-1) { // -1 is truthy....\u003cbr\u003e  console.log(\"say this forever...\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBy contrast, a \u003ccode\u003efalse\u003c/code\u003e (or falsey) condition expression will keep the code block from executing at all:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ewhile (null) {\u003cbr\u003e  console.log(\"I will never run\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eUse Control-C to Break Out of an Infinitely Looping Program\u003c/h2\u003e  \u003cp\u003eWhen you start writing code and creating loops yourself, you will almost certainly inadvertently create infinite loops from time to time. If you try to run the code and it either logs over and over without end \u003cstrong\u003eor\u003c/strong\u003e never seems to finish, you're probably stuck in an infinite loop.\u003c/p\u003e  \u003cp\u003eIn most programming environments (including repl.it), you can break out of an infinite loop by typing Control-C. That's an old-school UNIX key combination that means INTERRUPT. In order for this to work, you first need to make the terminal portion of the programming environment (where the results of running the code are displayed) the active window by clicking inside it.\u003c/p\u003e  \u003cp\u003eGive it a try here:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/QuietNervousRotation?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eDon't forget to click in the terminal (the window on the bottom) before typing Control-C!\u003c/p\u003e  \u003ch2\u003eTerminate a \u003ccode\u003ewhile\u003c/code\u003e Loop Naturally\u003c/h2\u003e  \u003cp\u003eMost loops aren't meant to run infinitely. There's some condition that they cross, captured in the \u003cem\u003econdition expression\u003c/em\u003e, that tells JavaScript that it's time to return to the \u003cstrong\u003edefault sequence\u003c/strong\u003e and execute the code after the while loop.\u003c/p\u003e  \u003cp\u003eSo, somehow we need to create an expression that's true when the \u003ccode\u003ewhile\u003c/code\u003e begins (so that the code in the \u003ccode\u003e{}\u003c/code\u003e runs), but that eventually becomes false.\u003c/p\u003e  \u003cp\u003eHere's a simple example that uses a very common approach:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet count = 0; // Initialize a counter variable; note that we need to use `let` here\u003cbr\u003ewhile (count \u0026lt; 3) { //A Boolean expression that uses the counter to decide whether to keep looping\u003cbr\u003e  console.log(`I am the ${count}, I love to count!`); // The work the loop does\u003cbr\u003e  count = count + 1; // Update the counter variable; this keeps track of how many times the loop has executed\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the last line, \u003ccode\u003ecount = count + 1\u003c/code\u003e, we are \u003cem\u003eassigning\u003c/em\u003e a new value to the \u003ccode\u003ecount\u003c/code\u003e variable, where the new value is equal to its current value plus 1.\u003c/p\u003e  \u003cp\u003eThe code above produces:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eI am the 0, I love to count!\u003cbr\u003eI am the 1, I love to count!\u003cbr\u003eI am the 2, I love to count! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's say we forgot the line \u003ccode\u003ecount = count + 1\u003c/code\u003e. If our  \u003ccode\u003ecount\u003c/code\u003e variable never changes, our \u003cem\u003econdition expression\u003c/em\u003e would \u003cem\u003ealways\u003c/em\u003e be \u003ccode\u003etrue\u003c/code\u003e and we'd have an infinite loop. (Hint: this is a very common mistake, even for experienced programmers.)\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eYou may wonder why we're starting our counter variable at 0 instead of 1. The answer may sound a bit... opaque. It's because, in computer science, arrays are \u003cem\u003eindexed\u003c/em\u003e starting with 0 instead of 1. In other words, we need to use the \u003cem\u003eindex\u003c/em\u003e value of 0 to retrieve the first element from an array. Because loops are frequently used to access elements in arrays, the \u003cem\u003econvention\u003c/em\u003e is to start loop counter variables at 0 instead of 1. If this doesn't entirely make sense at this point, don't worry — it will become clearer when we learn about arrays.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eLearn About Operators Used to Increment/Decrement\u003c/h2\u003e  \u003cp\u003eLet's look back at that previous example to notice how we're moving from a true or truthy statement to a false or falsey statement. Within each loop, the following code is executed:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecount = count + 1 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ewhich slowly moves \u003ccode\u003ecount\u003c/code\u003e to a place where it is no longer less than 3, thus ending the loop.\u003c/p\u003e  \u003cp\u003eBut writing \u003ccode\u003ecount = count + 1\u003c/code\u003e is a bit long-winded (although very explicit; sometimes a few extra keystrokes can save you headaches with debugging, especially when you're first learning to code). This pattern of \"incrementing\" a variable is very common, so JavaScript includes a couple of shorthand operators you can use. It's like a contraction in conversation: very few English speakers say \"can not,\" \"have not,\" or \"would not\" \u003cstrong\u003eall\u003c/strong\u003e the time. You're likely to hear them use \u003cem\u003econtractions\u003c/em\u003e (from the Latin: \"pulling together\") like \"can't,\" \"haven't,\" and \"wouldn't.\" In the code below, we are combining the addition and assignment with the \u003ccode\u003eaddition assignment operator\u003c/code\u003e, \u003ccode\u003e+=\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecount += 1 // take the value of count, add 1 to it and then assign that result to count \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUnsurprisingly \u003ccode\u003e-=\u003c/code\u003e does the reverse of \u003ccode\u003e+=\u003c/code\u003e: it \"decrements\" the variable's value and re-assigns the new value to the variable. JavaScript has a number of other \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators\"\u003eassignment operators\u003c/a\u003e that allow you to use multiplication (\u003ccode\u003e*=\u003c/code\u003e), division (\u003ccode\u003e/=\u003c/code\u003e), and a variety of other operations.\u003c/p\u003e  \u003cp\u003eThe assignment operators will work with any \u003cem\u003enumber\u003c/em\u003e. If you want to add 10 or multiply by 3.14, the assignment operators will do that for you. For the special (but common) case where you want to add (or subtract) 1, however, there is another option: the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Increment_and_decrement\"\u003eincrement and decrement operators\u003c/a\u003e, \u003ccode\u003e++\u003c/code\u003e and \u003ccode\u003e--\u003c/code\u003e. For a case such as the above, where we're using a counter variable to keep track of where we are in our loop, the \u003ccode\u003eincrement operator\u003c/code\u003e is frequently used:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/EuphoricNoteworthyMuse?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eGet comfortable using the different options for incrementation and experiment with writing some loops of your own.\u003c/p\u003e  \u003ch2\u003eUse a \u003ccode\u003edo...while\u003c/code\u003e Loop\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003edo...while\u003c/code\u003e loop is similar to \u003ccode\u003ewhile\u003c/code\u003e, in that it will execute a block of code based on a condition or set of conditions. The difference, however, is that \u003cstrong\u003eit will always execute at least once\u003c/strong\u003e. The reason is that the condition isn't evaluated until \u003cstrong\u003eafter\u003c/strong\u003e the code block executes the first time:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edo { \u003cbr\u003e  console.log(`I will execute once`); \u003cbr\u003e} while (false); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe JavaScript engine will enter the loop, execute the console.log, then evalute the condition. Because the condition returns \u003ccode\u003efalse\u003c/code\u003e the loop will stop executing there.\u003c/p\u003e  \u003cp\u003eThis construction is helpful any time you want to make sure that the loop executes at least once. As an example, this might be useful for asking a user to create a password. The \u003ccode\u003edo while\u003c/code\u003e loop will always ask them to enter their password the first time, and can continue to ask as long as (\u003ccode\u003ewhile\u003c/code\u003e) the value they enter doesn't meet the password requirements.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we have learned how to use a \u003cem\u003erepetition\u003c/em\u003e statement, the \u003ccode\u003ewhile\u003c/code\u003e loop. JavaScript includes some other looping mechanisms that you'll learn about later in the course. But for now, with an understanding of \u003cem\u003esequence\u003c/em\u003e, \u003cem\u003eselection\u003c/em\u003e and now \u003cem\u003erepetition\u003c/em\u003e on top of your experience with expressions, you can write powerful programs! Be sure to experiment with writing your own loops and don't forget, if your code is not responding, you can use Control-C to interrupt the program!\u003c/p\u003e","frontPage":false},{"exportId":"how-to-get-help","title":"How to Get Help","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-how-to-get-help\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-how-to-get-help\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-how-to-get-help/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eKnow how to get help\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe don't believe in learning alone. As you make progress, expect to bump into other learners just like you, ready and willing to help each other succeed. Together, we can go further than we could ever go alone. Remember, you are going to get stuck sometimes! As with any new skill you learn, coding can be difficult and frustrating. After a certain point, being stuck on a problem becomes counterproductive - you’re stuck and you need help getting unstuck!\u003c/p\u003e  \u003cp\u003eIf you get stuck following the instructions or grasping a coding concept, there are a few things you can do. In this lesson, we'll look at some of the options available.\u003c/p\u003e  \u003ch2\u003eTry Troubleshooting First\u003c/h2\u003e  \u003cp\u003eTroubleshooting is a critical skill for all programmers and spending time now to get better at it is time well spent. Improving your ability to troubleshoot will provide a great return on your investment as you'll be able to get yourself unstuck and learn how to better approach issues. Whenever possible, try to troubleshoot your issue independently first before seeking help.\u003c/p\u003e  \u003cp\u003eMost issues you'll encounter are error messages in your terminal. A few things to keep in mind about error messages:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eNot all error messages are equal. Some messages are just warnings. For example, if you install a tool and it works, but produces an error when run - something is wrong, but it shouldn't be a \u003cem\u003eblocker\u003c/em\u003e for you completing work.\u003c/li\u003e \u003cli\u003eError messages often provide clues into what may be going wrong. Often, our first inclination when faced with an error message is to \u003cem\u003eflee\u003c/em\u003e. We see some incomprehensible output and immediately want to do something else. \u003cstrong\u003eDon't do this. Read the error!\u003c/strong\u003e We'll come back to this with specific examples later on in the course.\u003c/li\u003e \u003cli\u003eCarefully check your spelling and syntax if you receive errors running commands or code.\u003c/li\u003e \u003cli\u003eGetting a different error message after trying something is often \u003cem\u003egood\u003c/em\u003e. A new message can give some indication as to what is working and what isn't.\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eUse the Resources Available to You\u003c/h3\u003e  \u003cp\u003eSometimes, common issues are noted in lesson materials. Other times, errors occur when an essential step is missed. For these reasons, we recommend reviewing the resources available to you through Flatiron School:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eRe-read the lesson you're on thoroughly to make sure you’re not missing relevant details\u003c/li\u003e \u003cli\u003eReview previous lessons that may apply to the error or issue you’re experiencing, retracing your steps\u003c/li\u003e \u003cli\u003eCheck out \u003ca href=\"https://help.learn.co\"\u003eFlatiron School's help articles\u003c/a\u003e - these articles include advice and answers to frequently asked questions from the Flatiron School Team.\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eUse External Resources\u003c/h3\u003e  \u003cp\u003eIf you can't find a solution in the internal resources, the best next step is often to turn to Google. Some things to note regarding searching:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHow you search yields different results, so it's worth attempting a few slightly different searches.\u003c/li\u003e \u003cli\u003eCopying and pasting an error message is a great thing to search first. Try to identify the main part of an error message, often around the beginning or end.\u003c/li\u003e \u003cli\u003eRefine your search based on the results you're getting. Sometimes, you may need to be more specific (i.e. you're using a Mac and need to specify because all search results are referring to Windows). Sometimes, being too specific will yield too few results. Avoid copying anything that may be specific to your system, such as a username.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eWhen looking through solutions on the internet, always be very careful of commands that alter system files. If you see a command you're not familiar with, you can always google \u003cem\u003ethat\u003c/em\u003e command to better understand what it does before running it.\u003c/p\u003e  \u003cp\u003eEven if you aren't able to find an answer on your own, taking the time to try the options above can help you clarify the question you're asking and eliminate unsuccessful solutions to the problem. Troubleshooting on your own means that when you \u003cem\u003edo\u003c/em\u003e reach out, you'll be able to ask better, more specific questions.\u003c/p\u003e  \u003ch2\u003eReach Out via Slack\u003c/h2\u003e  \u003cp\u003eThere is a good chance that fellow students have encountered similar challenges to yours. Use the Slack channels available to you to get help:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eYou can post in any public channel (e.g., #general)\u003c/li\u003e \u003cli\u003eShortly before you start with a cohort you will be given access to a cohort-specific Slack channel\u003c/li\u003e \u003cli\u003eWhile you're completing the prework, you can post questions in the #js-prework-support channel. There will be other students there who may be able to help, and this channel is also staffed by Flatiron School instructors from 9am to 9pm eastern time, Monday through Friday.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eEqually, if you find someone else asking a question on Slack that you can  provide insight on, please do! One of the best ways to confirm your own  understanding of a concept is to try and help someone else understand it.\u003c/p\u003e  \u003ch2\u003eAttend Support Meetings\u003c/h2\u003e  \u003cp\u003eFlatiron runs reoccurring meetings every week. Use these meetings to get help! Also, keep an eye out in Slack for messages regarding additional meetings and study sessions.\u003c/p\u003e  \u003ciframe style=\"border: 0;\" src=\"https://calendar.google.com/calendar/embed?src=c_mcnbnls2uhbisql1i8fo36um24%40group.calendar.google.com\u0026amp;ctz=America%2FNew_York\" width=\"800\" height=\"600\"\u003e\u003c/iframe\u003e","frontPage":false},{"exportId":"navigating-canvas","title":"Navigating Canvas","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"welcome-your-dashboard-navigation-and-sidebar\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/welcome-your-dashboard-navigation-and-sidebar/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-your-dashboard-navigation-and-sidebar\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-your-dashboard-navigation-and-sidebar/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/PVfkFD45hL0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003e\u003cstrong\u003eDashboard\u003c/strong\u003e - the first thing you see when you log into Canvas, the Dashboard\ngives a high level view of the courses in which you're enrolled. Your instructor\nwill release new courses as you go through the program.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eGlobal Navigation\u003c/strong\u003e - static menu on the left side of the page and accessible\nfrom any page on Canvas, the Global Navigation gives you direct access to your\ncourses and other information in Canvas.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eSidebar\u003c/strong\u003e - found within each course, the Sidebar houses various features that\nallow access to the course materials.\u003c/p\u003e\n\n\u003cp\u003eView the video tutorial for more information on how to use Canvas effectively.\u003c/p\u003e","frontPage":false},{"exportId":"macos-system-setup","title":"MacOS System Setup","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-system\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-system/blob/main/README.md\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-system/blob/main/README.md/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003cp\u003eThe following instructions are for macOS Catalina through BigSur. If you are not on Catalina or a later operating system like BigSur but have the option to update, we recommend doing so before following the instructions below.\u003c/p\u003e\n\u003ch2\u003eCheck That Your macOS System is Compatible with Flatiron School’s Requirements\u003c/h2\u003e\n\u003cp\u003eWhen working on software, it is important that your computer and the software you’re using are compatible. In this step, we’ll ensure that you can install all the tools you will need to complete the program.\u003c/p\u003e\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eClick on the Apple () menu in the top left of the window\u003c/li\u003e\n    \u003cli\u003eChoose \"About This Mac\" from the menu\u003c/li\u003e\n    \u003cli\u003eLook for the version name (for example, \"macOS Catalina\")\u003c/li\u003e\n    \u003cli\u003eLook for the version number (for example, \"Version 10.15.6\")\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/bHHyxMMf2CM\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eIf your version name is macOS Catalina and your version number is greater than \"Version 10.15.0\", your computer meets our requirements for the course and you can continue below.\u003c/p\u003e\n\u003cp\u003eIf your computer does not meet the requirements listed above, but you can upgrade, we recommend that you upgrade after completing the environment setup.\u003c/p\u003e\n\u003cp\u003eIf your computer does not meet the requirements and you can't upgrade, some programs may not work for you. Please reach out to an instructor for more information.\u003c/p\u003e\n\u003ch2\u003eCheck that Your macOS System Has Enough Space for Flatiron School’s Requirements\u003c/h2\u003e\n\u003cp\u003eThe programs that we’ll be installing during environment setup and all of the work you’ll do with Flatiron School will need at least 4 GB of free disk space. Follow the steps below to ensure that you have enough disk space to install all the programs needed during environment setup.\u003c/p\u003e\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eClick on the Apple () menu in the top left of the window\u003c/li\u003e\n    \u003cli\u003eChoose \"About This Mac\" from the menu\u003c/li\u003e\n    \u003cli\u003eClick the \"Storage\" tab header\u003c/li\u003e\n    \u003cli\u003eLook for your macOS partition (for example, \"Macintosh HD\")\u003c/li\u003e\n    \u003cli\u003eLook for the storage (for example, \"119.59 GB available of 186 GB\")\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/j49xXshUhxw\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eIf your free space for your macOS partition is greater than 4 GB, continue below. Otherwise, click \"Manage...\" to open the System Information window and free up some storage space.\u003c/p\u003e\n\u003ch2\u003eALERT - For New M1 Mac Laptops ONLY\u003c/h2\u003e\n\u003cp\u003eIf you are using a Mac laptop with the new \u003cstrong\u003eM1\u003c/strong\u003e chip (released in late 2020), there are some additional steps required at this stage to ensure all necessary tools install correctly. Follow the steps below instead of the normal instructions provided for installing Xcode, Homebrew and Ruby.\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eInstead of installing Xcode via the directions in the next section, open your terminal and run the following to install Xcode:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ccode\u003excode-select --install\u003c/code\u003e\u003c/p\u003e\n\u003col\u003e\n\n        \u003cli\u003eCreate a duplicate copy of the terminal app that can run x86 programs with Rosetta. Follow the steps \u003ca href=\"https://www.notion.so/Run-x86-Apps-including-homebrew-in-the-Terminal-on-Apple-Silicon-8350b43d97de4ce690f283277e958602\"\u003edetailed in this article\u003c/a\u003e (\u003ca href=\"https://www.notion.so/Run-x86-Apps-including-homebrew-in-the-Terminal-on-Apple-Silicon-8350b43d97de4ce690f283277e958602\"\u003ehttps://www.notion.so/Run-x86-Apps-including-homebrew-in-the-Terminal-on-Apple-Silicon-8350b43d97de4ce690f283277e958602\u003c/a\u003e) to do this.\u003c/li\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eNote: Every installation step should now be done in the terminal window that has Rosetta enabled\u003c/strong\u003e\u003c/p\u003e\n\n\n        \u003cli\u003eInstall Homebrew with the following command:\u003c/li\u003e\n\n\n\u003cp\u003e\u003ccode\u003earch -x86_64 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\u003c/code\u003e\u003c/p\u003e\n\n\n        \u003cli\u003eRun the following three commands one after the other to install RVM and Ruby:\u003c/li\u003e\n\n\n\u003ccode\u003e\\curl -sSL https://get.rvm.io | bash -s stable\u003c/code\u003e\n\u003ccode\u003esource $HOME/.rvm/scripts/rvm\u003c/code\u003e\n\u003ccode\u003ervm install 2.7.2\u003c/code\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eIn addition, if you are using an M1 laptop, you will already have Zsh installed and in use, so you can move on to installing Chrome and VS Code below.\u003c/strong\u003e\u003c/p\u003e\n\u003ch2\u003eInstall Command Line Tools for Xcode\u003c/h2\u003e\n\u003cp\u003eCommand Line Tools for Xcode is a suite of development tools from Apple, including tools for building Mac and iPhone applications. It will help you to quickly set up your environment by downloading and installing essential tools for other programs we'll be installing.\u003c/p\u003e\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eOpen the \u003ca href=\"https://developer.apple.com/download/more/?=command%20line%20tools%20for%20xcode%2012\"\u003eApple Developer Download webpage\u003c/a\u003e (\u003ca href=\"https://developer.apple.com/download/more/?=command%20line%20tools%20for%20xcode%2012\"\u003ehttps://developer.apple.com/download/more/?=command%20line%20tools%20for%20xcode%2012\u003c/a\u003e)\u003c/li\u003e\n    \u003cli\u003eLook for a description of \"Command Line Tools for XCode 12\"\u003c/li\u003e\n    \u003cli\u003eLook for a release date of September 17, 2020\u003c/li\u003e\n    \u003cli\u003eClick the \"+\" symbol to see more information about the download\u003c/li\u003e\n    \u003cli\u003eClick \"Command Line Tools for XCode 12.dmg\" to download\u003c/li\u003e\n    \u003cli\u003eWhen the download is finished, click on the file to install\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/CXreDmTfn9E\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eOpen the \"Terminal\" application using \"Spotlight Search\", at the terminal prompt type \u003ccode\u003excode-select --install\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. If your terminal says \"xcode-select: error: command line tools are already installed...\", continue below.\u003c/p\u003e\n\u003ch2\u003eInstall Homebrew\u003c/h2\u003e\n\u003cp\u003eHomebrew is a package manager for macOS. It allows us to quickly install a number of programs we will need.\u003c/p\u003e\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n    \u003cli\u003eType \u003ccode\u003e/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n    \u003cli\u003eFollow the prompts on the screen during the installation (Note: this could take a while.)\u003c/li\u003e\n    \u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e\n    \u003cli\u003eReopen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/LU8UeykJxRc\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eYou can verify that Homebrew is successfully installed by running \u003ccode\u003ebrew help\u003c/code\u003e. If your terminal outputs a list of \u003ccode\u003ebrew\u003c/code\u003e commands, you're all set.\u003c/p\u003e\n\u003ch2\u003eCheck Whether You Need to Install Zsh\u003c/h2\u003e\n\u003cp\u003eZsh is the new standard shell for the macOS and comes pre-installed with the latest version of macOS, but it may need to be installed on older Macs.\u003c/p\u003e\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n    \u003cli\u003eType \u003ccode\u003eecho $SHELL\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n    \u003cli\u003e\u003cstrong\u003eIf you see \u003ccode\u003e/bin/zsh\u003c/code\u003e or \u003ccode\u003e/usr/local/bin/zsh\u003c/code\u003e DO NOT continue with the next steps. Move on to \"Check Your Work\".\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOtherwise, to install Zsh:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eType \u003ccode\u003ebrew install zsh\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n    \u003cli\u003eType \u003ccode\u003eecho /usr/local/bin/zsh | sudo tee -a /etc/shells\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e (Note: you will need to enter your password.)\u003c/li\u003e\n    \u003cli\u003eType \u003ccode\u003echsh -s /usr/local/bin/zsh\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n    \u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e\n    \u003cli\u003eReopen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n    \u003cli\u003eIf you receive a message starting with \"This is the Z Shell configuration function for new users, zsh-newuser-install\", press \u003ccode\u003e0\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/sfOvyg_hfTA\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eIf you run \u003ccode\u003eecho $SHELL\u003c/code\u003e, the terminal should output \u003ccode\u003e/bin/zsh\u003c/code\u003e or \u003ccode\u003e/usr/local/bin/zsh\u003c/code\u003e. This indicates that Zsh is in use and you are set to continue below.\u003c/p\u003e\n\u003ch2\u003eTroubleshooting\u003c/h2\u003e\n\u003cp\u003eIf you see the following message when opening your terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ezsh compinit: insecure directories, run compaudit for list.\u003cbr\u003eIgnore insecure directories and continue [y] or abort compinit [n]?  \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eType \u003ccode\u003ey\u003c/code\u003e and press enter, then run the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecompaudit | xargs chmod g-w \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eClose and reopen your terminal to clear the error.\u003c/p\u003e\n\u003ch2\u003eInstall Google Chrome\u003c/h2\u003e\n\u003cp\u003eGoogle Chrome is the browser that we will use for your Flatiron School Student Portal account and also for front-end web development. You are not required to use Google Chrome for personal work, but we highly encourage you to download it for access to your account and for development in the browser.\u003c/p\u003e\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eOpen the \u003ca href=\"https://www.google.com/chrome\"\u003eGoogle Chrome download webpage\u003c/a\u003e (\u003ca href=\"https://www.google.com/chrome\"\u003ehttps://www.google.com/chrome\u003c/a\u003e)\u003c/li\u003e\n    \u003cli\u003eClick \"Download Chrome\" and \"Accept and Install\"\u003c/li\u003e\n    \u003cli\u003eWait for the \"googlechrome.dmg\" file to download and find it in the \"Finder\" application\u003c/li\u003e\n    \u003cli\u003eOpen the \"googlechrome.dmg\" file and install Google Chrome\u003c/li\u003e\n    \u003cli\u003eDrag the \"Google Chrome\" application to your \"Applications\" folder\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/2AXGt6-kHnE\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eIf you can open the \"Google Chrome\" application using \"Spotlight Search\", continue below.\u003c/p\u003e\n\u003ch2\u003eInstall Visual Studio Code (VS Code)\u003c/h2\u003e\n\u003cp\u003eVisual Studio Code (VS Code) is the tool that you’ll use to edit your Ruby and JavaScript files. It is a text editor that provides some beneficial extensions for developers. One such tool is an integrated terminal! This means that you can edit your code and use your terminal in the same window. Follow the steps below to get both set up.\u003c/p\u003e\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eOpen the \u003ca href=\"https://code.visualstudio.com/Download\"\u003eVisual Studio Code download webpage\u003c/a\u003e (\u003ca href=\"https://code.visualstudio.com/Download\"\u003ehttps://code.visualstudio.com/Download\u003c/a\u003e)\u003c/li\u003e\n    \u003cli\u003eClick on the Mac download option and start the download\u003c/li\u003e\n    \u003cli\u003eWait for the \".zip\" file to download and find it in the \"Finder\" application\u003c/li\u003e\n    \u003cli\u003eOpen the \".zip\" file and install Visual Studio Code\u003c/li\u003e\n    \u003cli\u003eDrag the \"Visual Studio Code\" application to your \"Applications\" folder\u003c/li\u003e\n    \u003cli\u003eOpen the \"Visual Studio Code\" application using \"Spotlight Search\"\u003c/li\u003e\n    \u003cli\u003eClick \"View\" in the toolbar, then click \"Command Palette\" in the dropdown menu, or use the shortcut + + P\u003c/li\u003e\n    \u003cli\u003eType \"shell command\" in the box and click on \"Shell Command: Install 'code' command in PATH\"\u003c/li\u003e\n    \u003cli\u003eClose the \"Visual Studio Code\" application\u003c/li\u003e\n    \u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n    \u003cli\u003eType \u003ccode\u003ecode\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\u003cp\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/W-fLaEmTLUU\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/KL6EnXV-wVA\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\n\u003cp\u003eIf Visual Studio Code (VS Code) opened after typing \u003ccode\u003ecode\u003c/code\u003e in your \"Terminal\" application, continue to the next lesson, \u003cstrong\u003eInstalling Node on macOS\u003c/strong\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"lesson-types","title":"Lesson Types","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"welcome-courses-modules-assignments\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/welcome-courses-modules-assignments/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-courses-modules-assignments\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/welcome-courses-modules-assignments/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eCOURSES\u003c/h2\u003e\n\n\u003cp\u003eYour Flatiron School program is broken up into courses. Each course represents a\nsection of our core curriculum.\u003c/p\u003e\n\n\u003ch2\u003eMODULES\u003c/h2\u003e\n\n\u003cp\u003eFlatiron School organizes content within courses by breaking them up into\nmodules.  The modules will control the entire flow of the course and within them\nyou'll find all your lessons, labs, assignments, and quizzes for the course.\nModules can be filled with different types of content:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003ePage:\u003c/strong\u003e a page of content to read\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eDiscussion:\u003c/strong\u003e a course discussion in which teachers and students can\nactively participate\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eQuiz:\u003c/strong\u003e a course quiz\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eAssignment:\u003c/strong\u003e a course assignment\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eLink or External Tool:\u003c/strong\u003e an external link or tool to view information\noutside of the course\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eFile:\u003c/strong\u003e a file to download or view\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou may be required to perform certain actions to complete a module.\nRequirements may include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eView:\u003c/strong\u003e You must view the item.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eMark as done:\u003c/strong\u003e You must mark the module item as done before you can\nprogress to the next item.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eContribute:\u003c/strong\u003e You must post a reply to the discussion topic or contribute\ncontent to a page.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eSubmit:\u003c/strong\u003e You must submit the assignment, graded discussion, or quiz.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eScore at least X points:\u003c/strong\u003e You must submit the assignment with a minimum\nof the shown score.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can find the 'Modules' button on the Sidebar on the left hand side within\neach course.\u003c/p\u003e\n\n\u003ch2\u003eASSIGNMENTS\u003c/h2\u003e\n\n\u003cp\u003eWhile the module controls the flow of the entire course, you can also access a\nrunning list of your course assignments via the 'Assignments' button on your\nSidebar in the left hand side within the course.  \u003c/p\u003e\n\n\u003cp\u003eBy default, assignments are grouped by overdue assignments, upcoming\nassignments, undated assignments, and past assignments.\u003c/p\u003e\n\n\u003cp\u003eEach assignment includes an icon designating where it's an assignment,\ndiscussion, or quiz and will also display availability dates, due dates, and the\nnumber of points the assignment is worth.\u003c/p\u003e\n\n\u003cp\u003eYou can find the 'Assignments' button on the Sidebar on the left hand side\nwithin each course.\u003c/p\u003e","frontPage":false},{"exportId":"logging-in-javascript","title":"Logging in JavaScript","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-logging-in-javascript\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-logging-in-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-logging-in-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eLearn about logging in JavaScript\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003econsole.log()\u003c/code\u003e in the development process\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003econsole.log()\u003c/code\u003e for debugging\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eLogging\u003c/h2\u003e  \u003cp\u003eThe venerable \u003ccode\u003econsole.log()\u003c/code\u003e is an all-purpose logging \u003cem\u003emethod\u003c/em\u003e. (A \u003cstrong\u003emethod\u003c/strong\u003e or a \u003cstrong\u003efunction\u003c/strong\u003e is a bit of code that \u003cem\u003edoes\u003c/em\u003e something. We \u003cem\u003ecall\u003c/em\u003e them when we want them to act.) In programming, \u003cem\u003elogging\u003c/em\u003e refers to the process of printing information about the program as it runs. Note that \u003ccode\u003econsole.log()\u003c/code\u003e is a \u003cem\u003edevelopment\u003c/em\u003e tool; it's not something that's used in deployed code.\u003c/p\u003e  \u003cp\u003eLet's take a look at how it works. Open up \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e and follow along.\u003c/p\u003e  \u003cp\u003eNotice, when the REPL opens, that they've already provided an example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log('Hello, world!'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you click the Run button, you'll see the message output in the terminal.\u003c/p\u003e  \u003cp\u003eWe can log more than just a simple message. In fact, we can pass any number of messages to \u003ccode\u003econsole.log()\u003c/code\u003e by separating them with commas; when printed, they'll be separated by a space:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log('one', 'two', 'three'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd we can pass other types of values to \u003ccode\u003econsole.log()\u003c/code\u003e, not just strings. Give this a try:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(\"I must have logged\", 1000, \"times today.\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that, for that first string (\"I must have logged\"), the comma is \u003cem\u003eafter\u003c/em\u003e the end quotation mark. This is because the comma is not part of the string; instead, it's how we tell JavaScript, \"Hey, I'm going to give you something else!\"\u003c/p\u003e  \u003cp\u003eWe can also pass \u003cem\u003evariables\u003c/em\u003e to \u003ccode\u003econsole.log()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst name = \"Byron the Poodle\";\u003cbr\u003econsole.log(\"Hello,\", name); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn fact, we can log any \u003cem\u003eexpression\u003c/em\u003e — even very complex ones — using \u003ccode\u003econsole.log()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eUsing \u003ccode\u003econsole.log()\u003c/code\u003e in the Development Process\u003c/h2\u003e  \u003cp\u003eWhere \u003ccode\u003econsole.log()\u003c/code\u003e gets really helpful is when you use it to check that your code is functioning as you want it to. Let's revisit an example from an earlier lesson:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/PaltryEqualMicroinstruction?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eLet's say we want to run some tests to make sure that we have our \u003ccode\u003eif\u003c/code\u003e statement set up properly. We can do this by checking the values of the four variables for different values of \u003ccode\u003eage\u003c/code\u003e. Recall that, when we worked with this code before, we had to check each of our variables one at a time since only the value of the \u003cem\u003elast\u003c/em\u003e executed expression is displayed in the REPL's terminal window. This can get pretty tedious, especially if we have a lot of variables or a lot of conditions (or both). Here's where \u003ccode\u003econsole.log()\u003c/code\u003e comes in.\u003c/p\u003e  \u003cp\u003eLet's add the following to the end of our code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(canWork, canEnlist, isAdult, canDrink); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNext, let's set the \u003ccode\u003eage\u003c/code\u003e variable to a value of 16 and click the run button. You should see the following output to the terminal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003etrue false false false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt looks like our code is working if \u003ccode\u003eage\u003c/code\u003e is set to 16, but our message could be a little more informative. We can see that only one of the variables is \u003ccode\u003etrue\u003c/code\u003e, which is what we want, but it's not immediately apparent \u003cem\u003ewhich\u003c/em\u003e of the variables is the one that's \u003ccode\u003etrue\u003c/code\u003e. So let's add some labels. To do this, we'll use a combination of strings and variables inside our \u003ccode\u003econsole.log()\u003c/code\u003e. While we're at it, let's log the \u003ccode\u003eage\u003c/code\u003e value as well:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(\"Age:\", age, \"Can work:\", canWork, \"Can enlist:\", canEnlist, \"Is a legal adult:\", isAdult, \"Can drink:\", canDrink); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis looks complicated, but all we're doing here is stringing together a series of expressions — some of them simple string values, and some of them variables — with commas between each one.\u003c/p\u003e  \u003cp\u003eAlternatively, we can use string interpolation inside our \u003ccode\u003econsole.log()\u003c/code\u003e to do the same thing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(`Age: ${age}, Can work: ${canWork}, Can enlist: ${canEnlist}, Is a legal adult: ${isAdult}, Can drink: ${canDrink}`); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith this approach, we're passing \u003cem\u003ea single expression\u003c/em\u003e to \u003ccode\u003econsole.log()\u003c/code\u003e instead of a series of them. The commas here, therefore, are part of the string. Be sure to run both versions in the REPL so you can see the difference.\u003c/p\u003e  \u003cp\u003eIf we were writing user-facing code here, we would probably want to make it easier to read by putting each variable on its own line. We could do that either by using multiple \u003ccode\u003econsole.log()\u003c/code\u003es, or by using the new line character (\u003ccode\u003e\\n\u003c/code\u003e). But since the \u003ccode\u003econsole.log()\u003c/code\u003e is just for our (the developer's) use, the above may be perfectly acceptable.\u003c/p\u003e  \u003cp\u003eWith this \u003ccode\u003econsole.log()\u003c/code\u003e set up we can try our code with as many age values as we like, checking each time to verify that the variables have been set correctly.\u003c/p\u003e  \u003ch2\u003eUsing \u003ccode\u003econsole.log()\u003c/code\u003e for Debugging\u003c/h2\u003e  \u003cp\u003eLet's say we've gotten our code to this point:\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/BelatedMustyGzip?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eWe have our \u003ccode\u003econsole.log()\u003c/code\u003e set up and we're ready to start testing it. We decide to start with our 'least adult' category, which is children under age 16, so we set \u003ccode\u003eage\u003c/code\u003e equal to 15 and click run. Everything looks fine — we get four \u003ccode\u003efalse\u003c/code\u003es — so we change \u003ccode\u003eage\u003c/code\u003e to 16, then 17. So far, so good. But then when we test it for an \u003ccode\u003eage\u003c/code\u003e of 18, we see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eAge: 18\u003cbr\u003eCan work: true\u003cbr\u003eCan enlist: false\u003cbr\u003eIs a legal adult: false\u003cbr\u003eCan drink: false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHmm, obviously we've got an error somewhere. The code for ages 18-20 isn't returning the expected result, so let's take a look at that conditional: \u003ccode\u003eelse if (age \u0026gt; 18)\u003c/code\u003e. With a simple condition like this, we might realize right away that we accidentally used \u003ccode\u003e\u0026gt;\u003c/code\u003e instead of \u003ccode\u003e\u0026gt;=\u003c/code\u003e. But imagine a case where our condition is more complex and we don't immediately see the problem. Let's think about some ideas for ways we can use \u003ccode\u003econsole.log()\u003c/code\u003e to help us find and correct it.\u003c/p\u003e  \u003cp\u003eTo start, we could try logging a message \u003cem\u003einside\u003c/em\u003e the block for the condition where the error is (ie, inside the block that \u003cem\u003eshould\u003c/em\u003e be executing):\u003c/p\u003e  \u003ciframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@LizBurton/EnormousIcyTriangle?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e  \u003cp\u003eIf we click the Run button, the message does \u003cem\u003enot\u003c/em\u003e get logged so we know the code block is not getting executed. This tells us that there's something wrong with the conditional itself. If the message \u003cem\u003edid\u003c/em\u003e get logged we would know that the problem is somewhere inside the code block instead.\u003c/p\u003e  \u003cp\u003eNext, we could try changing \u003ccode\u003eage\u003c/code\u003e to 19. In this case, the message \u003cem\u003edoes\u003c/em\u003e get logged, so we know our conditional is only broken for age 18. This gives us another clue as to how to fix it.\u003c/p\u003e  \u003cp\u003eIf we had a more complicated conditional and still couldn't find the problem, we could try logging the conditional itself, simplifying it one step at a time until it \u003cem\u003edoes\u003c/em\u003e return \u003ccode\u003etrue\u003c/code\u003e. As soon as we get a \u003ccode\u003etrue\u003c/code\u003e return value, we know that the last thing we removed was what was causing the problem. For example, if our overall condition is comprised of two conditions joined by \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, we could check each expression individually. Whichever one returns \u003ccode\u003efalse\u003c/code\u003e instead of \u003ccode\u003etrue\u003c/code\u003e is the one with the problem. We could then continue to \"drill down\" as necessary until we find what's wrong.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Even better, we can use \u003ccode\u003econsole.log()\u003c/code\u003e as we're building the conditional in the first place, using an approach like the one outlined below. Only after you have the conditions working the way you need them to would you begin building out the code blocks. Taking this incremental approach will make it much easier to find and fix any errors.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eif ([condition 1]) {\u003cbr\u003e    console.log(\"Condition 1 returned true\")\u003cbr\u003e} else if ([condition 2]) {\u003cbr\u003e   console.log(\"Condition 2 returned true\")\u003cbr\u003e} ... \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e  \u003cp\u003eYou should think of the ideas presented above as examples of a general approach to debugging. Debugging is largely a matter of using \u003cem\u003elogic\u003c/em\u003e to narrow in on the problematic bit of code until you find the error. It is worth getting comfortable using \u003ccode\u003econsole.log()\u003c/code\u003e because it can be a valuable tool in this process.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lesson, we've learned how to use the \u003ccode\u003econsole.log()\u003c/code\u003e method. We've also explored some ways we can use it to help us with writing and debugging code.\u003c/p\u003e","frontPage":false},{"exportId":"navigating-files-and-directories-in-bash","title":"Navigating Files and Directories in Bash","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"cli-essentials-bash-files-and-directories\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-files-and-directories/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-files-and-directories\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/cli-essentials-bash-files-and-directories/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eList directory files in the shell with \u003ccode\u003els\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eMove or rename files and directories with \u003ccode\u003emv\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eCopy Files with \u003ccode\u003ecp\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eCreate empty files with \u003ccode\u003etouch\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eMake new directories with \u003ccode\u003emkdir\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eRemove files with \u003ccode\u003erm\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the previous lesson we learned how to \"navigate\" the directory structure of our file system. But our file systems (and lives) would be so boring without \u003cem\u003efiles\u003c/em\u003e. Copying files, moving files, reading the contents of files, feeding files to the \u003ccode\u003eruby\u003c/code\u003e program, cat .gifs. We looooooove files.\u003c/p\u003e  \u003cp\u003eThis lesson will show you how to work with your files. In time, you might stop using Finder and other tools because it's so much faster (and fun!) to use the CLI.\u003c/p\u003e  \u003ch2\u003eList Directory Files in the Shell with \u003ccode\u003els\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eIn a new terminal, which automatically puts you in your \u003cem\u003ehome directory\u003c/em\u003e,  try this: \u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe command \u003ccode\u003els\u003c/code\u003e stands for \"\u003cstrong\u003el\u003c/strong\u003ei\u003cstrong\u003es\u003c/strong\u003et\" — the first character is a lower case letter L. After you run it, you should then see a list of all the files within your working directory. \u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e For Ubuntu/WSL users, your home directory may start out empty, so you might not see anything running \u003ccode\u003els\u003c/code\u003e. If this is the case, try creating a folder. In fact, now is a good time to create a \u003ccode\u003eDevelopment\u003c/code\u003e folder where you can store your coursework. We'll use \u003ccode\u003emkdir\u003c/code\u003e to create the folder (more on this in a moment):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emkdir Development \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOnce the folder is created, run \u003ccode\u003els\u003c/code\u003e again and you should see \u003ccode\u003eDevelopment\u003c/code\u003e listed.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eTrue to Unix style the \u003ccode\u003els\u003c/code\u003e command is easy to type and \u003cstrong\u003e\u003cem\u003eshort\u003c/em\u003e\u003c/strong\u003e (both keys on the home row of a keyboard, one letter on one hand the other on the other hand, it's about as fast as it can get; handy for a command we will run \u003cem\u003eall the time\u003c/em\u003e).\u003c/p\u003e  \u003cp\u003eWe can list the contents of another directory by providing an absolute or relative path\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls pathname \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eUsing Flags with Commands\u003c/h3\u003e  \u003cp\u003eWe can use flags on most Unix commands to give more specific instructions or to change the output. Most programs accept flags, or options for execution.\u003c/p\u003e  \u003cp\u003eA flag is denotated by a \u003ccode\u003e-\u003c/code\u003e (\"dash\").\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls -l \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis prints out a list of all the files with \"long form\" output: it will tell us details about which user account owns the file, what the permissions for users are on that file, and the file name.\u003c/p\u003e  \u003cp\u003eFor example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls  /var/tmp\u003cbr\u003eSIMToolKit\u003cbr\u003ehi\u003cbr\u003epfwtfp-dice-thrower-from-a-file\u003cbr\u003esinatra-user-auth \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ebecomes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls -l /var/tmp\u003cbr\u003etotal 0\u003cbr\u003edrwxrwxrwx   3 byron.poodle  wheel   96 Jun  5  2018 SIMToolKit\u003cbr\u003edrwxr-xr-x   2 byron.poodle  wheel   64 Jun  5  2018 hi\u003cbr\u003edrwxr-xr-x  12 byron.poodle  wheel  384 Nov  9 15:35 pfwtfp-dice-thrower-from-a-file\u003cbr\u003edrwxr-xr-x  18 byron.poodle  wheel  576 May 21  2018 sinatra-user-auth \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou don't need to know what all those extra bits of information mean now, but realize that flags can really enrich the output you get.\u003c/p\u003e  \u003cp\u003eSingle-character options can typically be combined with each other. For example, in the \u003ccode\u003els\u003c/code\u003e command, \u003ccode\u003eh\u003c/code\u003e is an option on the \u003ccode\u003el\u003c/code\u003e flag meaning \"\u003cstrong\u003eh\u003c/strong\u003euman readable formats.\" They can be combined with \u003ccode\u003ea\u003c/code\u003e meaning \"\u003cstrong\u003ea\u003c/strong\u003ell information\" including \"hidden files\" (files that start with a \u003ccode\u003e.\u003c/code\u003e, often used for internal operating system configuration —\u0026nbsp;we'll expand on this in a moment).\u003c/p\u003e  \u003cp\u003eTry these three together:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls -lah \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd also:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls -l -a -h \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBoth are valid input options and mean the same thing, as far as \u003ccode\u003els\u003c/code\u003e is concerned.\u003c/p\u003e  \u003cp\u003eWhen you entered \u003ccode\u003e$ ls -lah\u003c/code\u003e above, you should have a received a list of files including some that you hadn't seen from entering just \u003ccode\u003e$ ls\u003c/code\u003e before:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edrwxr-xr-x   6 kellyegreene  staff   204B Jun  2 11:21 .\u003cbr\u003edrwxr-xr-x   5 kellyegreene  staff   170B May 28 15:52 ..\u003cbr\u003e-rw-r--r--@  1 kellyegreene  staff   6.0K May 28 15:52 .DS_Store\u003cbr\u003edrwxr-xr-x  13 kellyegreene  staff   442B Jun  2 11:02 .git\u003cbr\u003e-rw-r--r--   1 kellyegreene  staff    66B May 28 15:49 .learn\u003cbr\u003e-rw-r--r--   1 kellyegreene  staff    11K Jun  2 11:21 README.md \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that at the top of the file output there are a bunch of files that start with a \u003ccode\u003e.\u003c/code\u003e, like \u003ccode\u003e.DS_Store\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eFiles like \u003ccode\u003e.DS_Store\u003c/code\u003e are not listed. That's because files and directories that start with a \u003ccode\u003e.\u003c/code\u003e are \u003cem\u003ehidden\u003c/em\u003e files. Shells are often configured by putting information in these \u003cem\u003ehidden\u003c/em\u003e files. We'll not talk about these types of files in this lesson except to say that sometimes things are hidden until you add a flag.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003eCombining flags is only valid for single-letter options. A \"long option\" such as\u003c/em\u003e \u003ccode\u003e--force\u003c/code\u003e \u003cem\u003eis defined with more than one character and must be entered with its own flag.\u003c/em\u003e\u003c/p\u003e  \u003ch2\u003eMove or Rename Files and Directories with \u003ccode\u003emv\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eMove, or \u003ccode\u003emv\u003c/code\u003e is a command that moves one or more files or directories from one place to another.  To move a file from the current directory to another location, enter a path as the third word on the command line.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ mv filename ./dir1 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can also rename a file or directory using the \u003ccode\u003emv\u003c/code\u003e command. To rename a file with \u003ccode\u003emv\u003c/code\u003e, the third word on the command line must end in the new filename.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ mv original_program.rb renamed_program.rb \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe could combine these two usages as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ mv temp_download.gif ~/Desktop/cats_with_weapons/ninja_cat.gif \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Look how we're using the \u003ccode\u003e~\u003c/code\u003e shortcut!\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eCopy Files with \u003ccode\u003ecp\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eIf you think about it, move is really \"copy, but delete the original.\" Well, \u003ccode\u003ecp\u003c/code\u003e does a \u003ccode\u003emv\u003c/code\u003e, but doesn't delete the original. It's therefore a \"copy.\"\u003c/p\u003e  \u003cp\u003eIt uses the same snytax as \u003ccode\u003emv\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecp letter_to_mom.txt letter_to_mom-2019-02-15.txt \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you want to copy a directory and its file contents, you need to use the \u003ccode\u003e-r\u003c/code\u003e  flag.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecp -r february_cat_gifs ~/Desktop/vital_media_files \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Look how we're using the \u003ccode\u003e~\u003c/code\u003e shortcut! This expands into \u003ccode\u003e/Users/username/Desktop/vital_media_files\u003c/code\u003e\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eCreate Empty Files with \u003ccode\u003etouch\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eWe can use the \u003ccode\u003etouch\u003c/code\u003e command to create empty files in the current directory. Try:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ touch hello_world.rb \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow try:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ ls \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou should see the file you just created, \u003ccode\u003ehello_world.rb\u003c/code\u003e, in the working directory. Note that this is an empty file and has nothing inside of it, because you just created it.\u003c/p\u003e  \u003ch2\u003eMake New Directories with \u003ccode\u003emkdir\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eWe can make directories with the \u003ccode\u003emkdir\u003c/code\u003e command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ mkdir name_of_directory \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if you enter \u003ccode\u003els\u003c/code\u003e you should see the empty directory you just created in the working directory.\u003c/p\u003e  \u003ch2\u003eRemove Files with \u003ccode\u003erm\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eTo delete a file, we can enter \u003ccode\u003erm\u003c/code\u003e at a shell prompt. \u003cstrong\u003eNote:\u003c/strong\u003e Deleting a file with rm is \u003cem\u003epermanent\u003c/em\u003e. This action cannot be undone.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ rm hello_world.rb \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMuch like \u003ccode\u003ecp\u003c/code\u003e, if you want to delete a directory, you need to provide the \u003ccode\u003e-r\u003c/code\u003e flag\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e$ rm -r ~/Desktop/pokemon_fan_fiction \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThere are additional options to \u003ccode\u003erm\u003c/code\u003e:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e-i (interactive) — Prompts you to confirm the deletion. This option can stop you from deleting a file by mistake.\u003c/li\u003e \u003cli\u003e-f (force) — Overrides interactive mode and removes the file(s) without prompting. Use this with caution. This action cannot be undone!\u003c/li\u003e \u003cli\u003e-v (verbose) — Shows the progress of the files as they are being removed.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThere are a variety of commands you can use to manipulate files via the command line. If this list seems overwhelming at first, remember that it takes all programmers a little time to practice their CLI workflows. Refer back to these resources as you need to, and it will get easier as you go along.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything\"\u003eLifehacker on the Command Line\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://cbednarski.com/articles/understanding-environment-variables-and-the-unix-path/\"\u003eEnvironment Variables\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\n\u003ca href=\"https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html\"\u003eBuilt-in Shell Commands\u003c/a\u003e \u003cem\u003eVery useful\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://www.thegeekstuff.com/2010/08/bash-shell-builtin-commands/\"\u003e15 Useful Bash Commands\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://blog.seldomatt.com/blog/2012/10/08/bash-and-the-one-true-path/\"\u003eThe One True Path\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Path_(computing)\"\u003eMore on paths - Wikipedia\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://plus.google.com/101960720994009339267/posts/R58WgWwN9jp\"\u003eThe history of hidden files\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"pushing-code-with-git","title":"Pushing Code with Git","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-git-pushing-code\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-pushing-code\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-pushing-code/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate a remote repository on GitHub\u003c/li\u003e \u003cli\u003eConnect a local repository to a remote repository\u003c/li\u003e \u003cli\u003eSet the destination of a repo with \u003ccode\u003egit remote\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eSend code to the remote repo with \u003ccode\u003egit push\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eYou may have heard of \u003ca href=\"https://github.com\"\u003eGitHub\u003c/a\u003e before. In the previous lesson, you used it to get Facebook's code for the React framework. For all the amazing power that GitHub provides (Microsoft thought it was so powerful that they bought GitHub for a cool $7.5 billion), as far as Git is concerned they're just a big old server that hosts a whole bunch of remote repositories (\"remotes\").\u003c/p\u003e  \u003cp\u003eYou've seen how valuable \u003cem\u003eremotes\u003c/em\u003e are for \u003cem\u003egetting\u003c/em\u003e software. Now we can take a look at the other side of the transaction: how we mirror our \u003cem\u003elocal\u003c/em\u003e repository to a \u003cem\u003eremote\u003c/em\u003e repository using \u003ccode\u003egit push\u003c/code\u003e and \u003ccode\u003egit remote\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eOnce your code is on a \u003cem\u003eremote\u003c/em\u003e, it's backed up — which is always a good thing. Also, once you push to a remote, you can choose whether to let others \u003ccode\u003efork\u003c/code\u003e or \u003ccode\u003eclone\u003c/code\u003e and benefit from it. Let's learn how to \u003ccode\u003epush\u003c/code\u003e our code!\u003c/p\u003e  \u003ch2\u003eCreate a Remote Repository on GitHub\u003c/h2\u003e  \u003cp\u003eThere are a few steps to follow to create a \u003cem\u003eremote\u003c/em\u003e repository on GitHub.\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eGo to: \u003ca href=\"https://github.com/new\"\u003egithub.com/new\u003c/a\u003e, while logged into GitHub.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eEnter a name for your repository in the \"Repository name\" field. You can name it whatever you'd like; be creative! The default options are fine as-is — don't initialize the new repository with a \u003ccode\u003eREADME\u003c/code\u003e or add a \u003ccode\u003e.gitignore\u003c/code\u003e or license. Click the green 'Create repository' button.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eAfter you create the \u003cem\u003eremote\u003c/em\u003e repository, you should see a \"Quick setup\" page. Make sure the 'SSH' option is selected, then click the \"Copy to clipboard\" symbol next to the repo URL (pictured) to copy the URL. (We'll use this in the next section.)\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/enough-git-for-learn-co/github_quick_setup.png\" alt=\"github repo quick setup\"\u003e\u003c/p\u003e  \u003cp\u003eBehind the scenes, GitHub has essentially \u003ccode\u003egit init\u003c/code\u003e'd a blank directory.\u003c/p\u003e  \u003ch2\u003eConnect a Local Repository to a Remote Repository\u003c/h2\u003e  \u003cp\u003eAfter you've created your \u003cem\u003eremote\u003c/em\u003e GitHub repository, you'll want to get your local repository uploaded to GitHub. Follow the steps below:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eFirst, we want to create a folder for our repository, which we'll call \u003ccode\u003emy_new_directory\u003c/code\u003e. In the terminal, navigate to the \u003ccode\u003e~/Development/code\u003c/code\u003e directory (or wherever you are storing your code) and type \u003ccode\u003emkdir my_new_directory\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eTo navigate into this new folder, type \u003ccode\u003ecd my_new_directory\u003c/code\u003e. Your terminal should display \u003ccode\u003emy_new_directory\u003c/code\u003e, indicating that you are now inside of the new folder. Open the directory in VS Code by typing \u003ccode\u003ecode .\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eNext, we need to create a new file named \u003ccode\u003eREADME.md\u003c/code\u003e. You can do this in the terminal, by typing \u003ccode\u003etouch README.md\u003c/code\u003e, or in VS Code, by choosing \u003ccode\u003eFile -\u0026gt; New File\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eWe can directly type in content for our README file in VS Code, but we can also use our terminal skills to add content. So, in the terminal, type \u003ccode\u003eecho \"This is my readme file\" \u0026gt; README.md\u003c/code\u003e. If you've got the README file open in VS Code, the new text will appear!\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eNow that we've got some basic content, we can initialize our local repository. In your terminal, type \u003ccode\u003egit init\u003c/code\u003e. Your terminal should show that an 'empty Git repository' has been initialized.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eType \u003ccode\u003egit add README.md\u003c/code\u003e to stage the new \u003ccode\u003eREADME.md\u003c/code\u003e file so it will be tracked by \u003ccode\u003egit\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eNow, type \u003ccode\u003egit commit -m \"Initialize git\"\u003c/code\u003e. This will create the first commit for this local repository, which will allow us to push our work to the remote repository we created earlier.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eSet the Destination of a Repo with \u003ccode\u003egit remote\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eTo connect your local repository to the newly created GitHub repository, you must add a new remote to a remote name. Adding a remote involves giving \u003ccode\u003egit\u003c/code\u003e a \"short name\" and a \"repository path.\" You copied the repository path from GitHub a few steps above.\u003c/p\u003e  \u003cp\u003eThe repository path is a long bunch of technical words. The creators of Git thought it would be easier to type a \"nickname\" or a \"short name\" that points to that long repository path. It's common to have a \"default\" remote. The default remote short name is called \u003ccode\u003eorigin\u003c/code\u003e. So we're going to create a new remote with a short name of \u003ccode\u003eorigin\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eMake sure you still have your remote Git info copied from GitHub, and type the following into the terminal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit remote add origin your-copied-remote-repository-url \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis sets the remote so you can now \u003cstrong\u003e\u003cem\u003epush\u003c/em\u003e\u003c/strong\u003e your code.\u003c/p\u003e  \u003cp\u003eYou can use \u003ccode\u003egit remote -v\u003c/code\u003e (the \u003ccode\u003e-v\u003c/code\u003e is for \"verbose\") to view the remote(s).\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emy_new_directory $ git remote -v\u003cbr\u003e# View existing remotes\u003cbr\u003e# origin  git@github.com:OWNER/REPOSITORY.git (fetch)\u003cbr\u003e# origin  git@github.com:OWNER/REPOSITORY.git (push) \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eSend Code to the Remote Repo with \u003ccode\u003egit push\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eNow that we have added a remote repo, we need to send our latest work to the remote. We use this command when we want to send some code from the local repository to the associated remote repository. Git will push all the local, committed work to the remote repository.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003egit push\u003c/code\u003e command takes two arguments. The first is the name of the remote repo. Remember, \u003ccode\u003eorigin\u003c/code\u003e is just an alias or \"short name\" that refers to the repository name. You don't actually have to enter the repository name. Instead, you can just use \u003ccode\u003eorigin\u003c/code\u003e. The second is the name of the remote branch you want to send code to. In the example below, we're pushing to our remote repository's \u003cem\u003edefault\u003c/em\u003e branch, \u003ccode\u003emaster\u003c/code\u003e. We're still going to hold off on discussing branching until later, but it's important to remember that \u003ccode\u003emaster\u003c/code\u003e is special; it's the default branch.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003emy_new_directory $ git push -u origin master \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will push your code up to the remote repo/branch. The first time you push code up to a newly-added remote repository, use the \u003ccode\u003e-u\u003c/code\u003e flag to tell Git to \"save\" the remote repository as the default push destination.\u003c/p\u003e  \u003cp\u003eFor every subsequent push, you only need to enter \u003ccode\u003egit push\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eAn Aside and a Small Shortcut\u003c/h2\u003e  \u003cp\u003eIn this lesson, we've gone through the steps of both connecting a local repository, and pushing code up to GitHub. During this course, you'll be creating a few local repositories from scratch, but more often, you'll be cloning existing repositories to your local machine. In these situations, you won't need to use commands like \u003ccode\u003egit init\u003c/code\u003e, since the repo is already set up with Git and will already have a remote configured. However, you \u003cem\u003ewill\u003c/em\u003e often need to add, commit and push work you've done locally to the remote repository. In these situations, you should be able to just run the following commands:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"commit message\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs a small shortcut, you can also combine adding and commiting by using an additional option flag, \u003ccode\u003e-a\u003c/code\u003e, with the commit command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit commit -am \"commit message\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eBeing able to add Git remotes allows you to back up your local repository to a remote server. If you remember \u003ccode\u003egit init\u003c/code\u003e, \u003ccode\u003egit remote add origin your-remote-repository-URL\u003c/code\u003e, add, and push your changes, you'll be able to get your project up to GitHub in minutes!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://help.github.com/articles/pushing-to-a-remote/\"\u003eGitHub guide on pushing\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"introduction-to-functions-in-javascript","title":"Introduction to Functions in JavaScript","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-intro-to-functions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Objectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eWriting and calling JavaScript functions\u003c/li\u003e \u003cli\u003eUnderstand \u003ccode\u003earguments\u003c/code\u003e and \u003ccode\u003eparameters\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eLearn what a return value is in JavaScript\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll introduce functions and cover how to create and execute them. There are no tests, but be sure to follow along with the examples.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lesson into your local environment. (Since this lesson doesn't have a \"Fork\" button, you'll need to click the GitHub \"octocat\" button at the top of the page to open the lesson's repo, then click the fork button in the upper right corner.) Clone the lesson to your local environment, navigate into the lesson directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. (If you are using a different text editor, the command will be different.) You will be writing your code in the \u003ccode\u003eindex.js\u003c/code\u003e file, and running it by entering \u003ccode\u003enode index.js\u003c/code\u003e in the terminal.\u003c/p\u003e  \u003ch2\u003eWriting and Calling JavaScript Functions\u003c/h2\u003e  \u003cp\u003eSo far, our programs have consisted of writing individual lines of code directly into a REPL. This is a great way to test out JavaScript functionality and to get a feel for how it handles different values and operations, but it's not super extensible. What if, for example, we wanted to log \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e a bunch of times? We could write the statement out repeatedly:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!');\u003cbr\u003econsole.log('Hello, world!'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut that quickly gets tiresome, and it's easy to see how even small programs would come to rival \u003cem\u003eWar and Peace\u003c/em\u003e in length.\u003c/p\u003e  \u003cp\u003eThe good news is, there's a better way! We can use a function!\u003c/p\u003e  \u003cp\u003eFunctions are ways of giving instructions to the JavaScript interpreter that can be reused over and over again by \u003cem\u003ecalling\u003c/em\u003e the function. Functions are the basic building blocks of programming in many languages (although they aren't always called \u003cem\u003efunctions\u003c/em\u003e), serving both to store the instructions for how to perform a certain task, and to help organize the code in our programs. By using functions — and giving them meaningful names — we can make our code easier to read, debug and maintain.\u003c/p\u003e  \u003cp\u003eIn JavaScript, functions are written with the \u003ccode\u003efunction\u003c/code\u003e keyword:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction doNothing() {} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs you can see, when we declare a function, we start with the \u003ccode\u003efunction\u003c/code\u003e keyword, followed by a name for the function (in this case, \u003ccode\u003edoNothing\u003c/code\u003e), followed by a pair of parentheses. Next comes a pair of curly braces, which contains the code to be executed when the function is called. In this case, the function, as its name implies, doesn't do much. Copy the function into \u003ccode\u003eindex.js\u003c/code\u003e and then execute it by running \u003ccode\u003enode index.js\u003c/code\u003e in the terminal.\u003c/p\u003e  \u003cp\u003e...\u003c/p\u003e  \u003cp\u003eAnything happen? No? Good! This isn't surprising because even though we declared the function, we didn't give it any instructions. (Conventionally, a function that does nothing is called a \"noop\" (pronounced \"no op\") — sometimes they come in handy!)\u003c/p\u003e  \u003cp\u003eLet's declare another function and this time give it something to do. As mentioned above, we put the code that we want to be executed when our function is called inside the curly braces — this is called the \u003cem\u003efunction body\u003c/em\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sayHello() {\u003cbr\u003e  console.log('Hello!');\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we have a function called \u003ccode\u003esayHello\u003c/code\u003e; its body reads \u003ccode\u003econsole.log('Hello!');\u003c/code\u003e. Add this function to \u003ccode\u003eindex.js\u003c/code\u003e and then execute it again.\u003c/p\u003e  \u003cp\u003eWhat happened this time? Still nothing? That's because the code above is just the \u003cem\u003efunction declaration\u003c/em\u003e. So far, all we have done is \u003cem\u003edefine\u003c/em\u003e the function. In order to actually execute the code in the function body, we have to \u003cem\u003ecall\u003c/em\u003e it. To call the function, we simply type the name of the function followed by \u003ccode\u003e()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eAdd the following to \u003ccode\u003eindex.js\u003c/code\u003e, after the function declaration:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esayHello(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow when you execute the code, you should see \u003ccode\u003eHello!\u003c/code\u003e printed in the terminal!\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://i.giphy.com/BoBOKNtlR8rTi.gif\" alt=\"it's working\"\u003e\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eNote: We've just learned that, in order for the code in a function to be executed, the function must be called. Any time you're trying out code, either in a REPL or in your local environment, you'll need to add the function call, as we did above, before executing the code. For \u003cstrong\u003elabs\u003c/strong\u003e, however, you will generally \u003cem\u003enot\u003c/em\u003e need to do this yourself. The tests will take care of it for you.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eSaying hello\u003c/h3\u003e  \u003cp\u003eLet's write a function to say hello to Isabel — be sure to follow along!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sayHelloToIsabel() {\u003cbr\u003e  console.log(\"Hello, Isabel!\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRun this code and see what you get. Don't forget to include the function call!\u003c/p\u003e  \u003cp\u003eNow what if we want to say hello to Sofia? Well, we could write another function and add it to \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sayHelloToSofia() {\u003cbr\u003e  console.log(\"Hello, Sofia!\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we can call it, we should see \u003ccode\u003eHello, Sofia!\u003c/code\u003e written out in the terminal.\u003c/p\u003e  \u003cp\u003eOkay, now we're going to say hello to Brendan — you know the drill!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sayHelloToBrendan() {\u003cbr\u003e  console.log(\"Hello, Brendan!\");\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow let's call all three!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esayHelloToIsabel();\u003cbr\u003esayHelloToSofia();\u003cbr\u003esayHelloToBrendan(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can stack all three of these calls in \u003ccode\u003eindex.js\u003c/code\u003e and, when we execute the code, we should see all three messages output in the terminal.\u003c/p\u003e  \u003cp\u003eWhile these functions are undoubtedly useful, they're only useful if we only talk to Isabel, Sofia, and Brendan. Every time we want to greet someone new (or use a greeting other than \"Hello,\" for that matter), we need to define a new function.\u003c/p\u003e  \u003cp\u003eWhat if there was some way to take what's similar about these functions — the fact that they all call \u003ccode\u003econsole.log()\u003c/code\u003e with \"Hello,\" a name, and an exclamation point — and substitute what's different (the name) as we go?\u003c/p\u003e  \u003cp\u003eTurns out, we can! We can use something called an \u003cem\u003eargument\u003c/em\u003e to pass information to a function.\u003c/p\u003e  \u003ch2\u003eUnderstand \u003ccode\u003earguments\u003c/code\u003e and \u003ccode\u003eparameters\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eArguments give us a way to pass information into a function to make our functions more flexible. We pass the argument at the time that we \u003cstrong\u003ecall\u003c/strong\u003e the function, by including it inside the parentheses after the name of the function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction doSomething(thing) {\u003cbr\u003e  console.log(thing);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edoSomething('anything'); // passing the argument 'anything' into our function  \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTry this out with a few different arguments. You'll see that whatever value we pass in when we \u003cem\u003ecall\u003c/em\u003e the function is what the function logs. Pretty cool, right?\u003c/p\u003e  \u003cp\u003eWe can easily extend this to our \"say hello to\" example; by using an argument, we no longer need a separate function for each person we want to say hello to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sayHelloTo(firstName) {\u003cbr\u003e  console.log(`Hello, ${firstName}!`);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003esayHelloTo('Isabel'); // \"Hello, Isabel!\"\u003cbr\u003esayHelloTo(\"Jane\"); // \"Hello, Jane!\"\u003cbr\u003esayHelloTo(\"R2-D2\"); // \"Hello, R2-D2!\"\u003cbr\u003esayHelloTo(1); // \"Hello, 1!\"\u003cbr\u003e\u003cbr\u003e// ^ Note that in the above, JavaScript coerces the number 1 to the string \"1\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the example above, you may have noticed that there's also something inside the parentheses in the function \u003cem\u003edeclaration\u003c/em\u003e: \u003ccode\u003efunction sayHelloTo(firstName)\u003c/code\u003e. This is called the \u003cstrong\u003eparameter\u003c/strong\u003e, in this case \u003ccode\u003efirstName\u003c/code\u003e. A \u003cstrong\u003eparameter\u003c/strong\u003e is a placeholder that stores whatever value gets passed in as an \u003cstrong\u003eargument\u003c/strong\u003e. For example, when we run the function call \u003ccode\u003esayHelloTo('Isabel')\u003c/code\u003e, the value of the argument, 'Isabel', gets stored in the parameter \u003ccode\u003efirstName\u003c/code\u003e. Then, inside the function body, we access that value by using the parameter name, interpolate it into the string, and log the string to the terminal.\u003c/p\u003e  \u003cp\u003eEssentially, the arguments are the actual values that we pass to the function, and the parameters are the named references where we store those passed-in values. An argument can be any JavaScript expression —\u0026nbsp;any piece of JavaScript code that evaluates to a value —\u0026nbsp;from something as simple as \u003ccode\u003e5\u003c/code\u003e or \u003ccode\u003e'Avi'\u003c/code\u003e to something as complex as an entire function.\u003c/p\u003e  \u003cp\u003eDefining a parameter in our function declaration ensures that the argument gets stored as a local, function-level variable that's available anywhere in the function body. We access the value simply by using the name of the parameter that it's stored in.\u003c/p\u003e  \u003cp\u003eNote that we can only access parameters within the body of the function. Try adding \u003ccode\u003econsole.log(firstName)\u003c/code\u003e to the end of the \u003ccode\u003eindex.js\u003c/code\u003e and running the code. You should see a \u003ccode\u003eReferenceError\u003c/code\u003e telling you that \u003ccode\u003efirstName\u003c/code\u003e is not defined. This relates to a very important concept in JavaScript, \u003cem\u003evariable scope\u003c/em\u003e.\u003c/p\u003e  \u003ch4\u003eVariable Scope\u003c/h4\u003e  \u003cp\u003eVariables in JavaScript exist within a particular \u003cstrong\u003escope\u003c/strong\u003e. For example, if a variable is defined in a function — whether it's defined as a parameter or inside the body of the function — it can only be accessed inside that function.\u003c/p\u003e  \u003cp\u003eVariables can also be declared in the \u003cem\u003eglobal scope\u003c/em\u003e, i.e., outside of any function. These variables will be accessible (and can potentially be overwritten) everywhere within the program. As a general rule, it is best to avoid global variables as much as possible because they can lead to bugs that can be difficult to track down. Using local variables instead makes it easier to keep track of the values of your variables and makes your code easier to debug and maintain.\u003c/p\u003e  \u003cp\u003eThe topic of scope in JavaScript is quite complex. You will learn more about it, and its implications, later in the course.\u003c/p\u003e  \u003ch3\u003eSaying something new\u003c/h3\u003e  \u003cp\u003eWhat if we want our function to say something other than \"Hello\"? Well, we can move the greeting to a parameter as well:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction say(greeting, firstName) {\u003cbr\u003e  console.log(`${greeting}, ${firstName}!`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAdd the above to your \u003ccode\u003eindex.js\u003c/code\u003e file along with the function call \u003ccode\u003esay(\"Goodbye\", \"Julio\");\u003c/code\u003e. When you run the code you should see \"Goodbye, Julio!\" written out to the terminal.\u003c/p\u003e  \u003ch3\u003eOrder of Arguments\u003c/h3\u003e  \u003cp\u003eWhat if we reversed the order of our arguments? Try this function call:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esay(\"Julio\", \"hello\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou should now see \"Julio, hello!\" in the terminal. It looks like the name is now stored in the \u003ccode\u003egreeting\u003c/code\u003e parameter and the greeting is stored in the \u003ccode\u003ename\u003c/code\u003e variable. We can verify that by adding a couple more \u003ccode\u003econsole.log()\u003c/code\u003es:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction say(greeting, firstName) {\u003cbr\u003e  console.log(\"firstName: \", firstName);\u003cbr\u003e  console.log(\"greeting: \", greeting);\u003cbr\u003e  console.log(`${greeting}, ${firstName}!`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen you run this using the function call above, you should see this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efirstName:  hello\u003cbr\u003egreeting:  Julio\u003cbr\u003eJulio, hello! \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou've just illustrated an important point: \u003cstrong\u003ethe parameter names only have meaning to us, the programmer; JavaScript assigns values to parameters based solely on the order of the arguments that are passed.\u003c/strong\u003e\u003c/p\u003e  \u003ch2\u003eReturn Values in JavaScript\u003c/h2\u003e  \u003cp\u003eThese functions we've been coding are pretty cool, but they don't actually do a whole lot — mostly they just print things to the terminal. We've seen how we can make them a little bit more dynamic with arguments, but how do we make them do something for us? For example, we might want to create a function \u003ccode\u003eadd()\u003c/code\u003e that allows us to add together two numbers. Enter the following in \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction add(x, y) {\u003cbr\u003e  return x + y;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we return inside a function, we're giving that value back to the world outside the function. Let's add the function call \u003ccode\u003eadd(1, 2)\u003c/code\u003e and run the code. Wait — nothing happened! What's going on here? Well, our function is \u003cem\u003ereturning\u003c/em\u003e the value of the sum \u003ccode\u003ex + y\u003c/code\u003e but we can't see that because we aren't doing anything with it. So let's use our handy developer tool, \u003ccode\u003econsole.log()\u003c/code\u003e, to see what it's returning. Rerun the code after modifying your function call as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(add(1,2)); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSee that? We got \u003ccode\u003e3\u003c/code\u003e back! What if we pass 80 and 9000 as our arguments instead? Whoa! We got 9080!\u003c/p\u003e  \u003cp\u003eLet's unpack what's happening here. We're \u003cem\u003ecalling\u003c/em\u003e our \u003ccode\u003eadd()\u003c/code\u003e function, passing in two numbers as the arguments. The function is \u003cem\u003ereturning\u003c/em\u003e the value of the sum of the two arguments, and we're \u003cem\u003elogging\u003c/em\u003e that result in the terminal so we can see it. The difference between this and what we were doing before — having the \u003cem\u003efunction itself\u003c/em\u003e log something to the terminal — may seem subtle, but it's actually quite important. Let's look at another example. Be sure to follow along.\u003c/p\u003e  \u003cp\u003eLet's rewrite our \u003ccode\u003esay()\u003c/code\u003e function from above so that now instead of \u003ccode\u003econsole.log()\u003c/code\u003e-ing what it says, it returns it.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction say(greeting, firstName) {\u003cbr\u003e  return `${greeting}, ${firstName}!`\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow when we call \u003ccode\u003econsole.log(say(\"Hello\", \"Sofia\"));\u003c/code\u003e we'll see \u003ccode\u003eHello, Sofia!\u003c/code\u003e, just as we did before. But what if we try logging the result of calling the \u003cem\u003eoriginal\u003c/em\u003e version of the function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction say(greeting, firstName) {\u003cbr\u003e  console.log(`${greeting}, ${firstName}!`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow \u003ccode\u003econsole.log(say(\"Hello\", \"Sofia\"));\u003c/code\u003e will result in the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eHello, Sofia!\u003cbr\u003eundefined \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe first line comes from the \u003ccode\u003econsole.log()\u003c/code\u003e inside the function body, and the second line comes from logging the result of the function call. What this shows us is that this version of our function \u003cstrong\u003edoes not have a return value\u003c/strong\u003e! This is because a \u003ccode\u003econsole.log()\u003c/code\u003e doesn't return anything — it just writes something out for the developer to see. \u003cstrong\u003eIn JavaScript, in order to have our function return a value, we need to use the \u003ccode\u003ereturn\u003c/code\u003e keyword.\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eWe can also see this if we go back to our \u003ccode\u003eadd()\u003c/code\u003e function, and remove the \u003ccode\u003ereturn\u003c/code\u003e keyword:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction add(x, y) {\u003cbr\u003e  x + y;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if you call the function and log the results:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(add(1,2)); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eyou'll see that the function has no return value. Our function is doing the addition but we can't do anything with the result, which makes it pretty useless. Be sure to add the \u003ccode\u003ereturn\u003c/code\u003e keyword back in.\u003c/p\u003e  \u003cp\u003eSetting up your function to return a value means that value is available to be used elsewhere in your program. So how might we use the return value of our \u003ccode\u003eadd()\u003c/code\u003e function? Let's say we're creating a simple calculator function. A high-level outline of how it could work might be:\u003c/p\u003e  \u003col\u003e \u003cli\u003ethe calculator function asks the user to enter two numbers they want to be added together,\u003c/li\u003e \u003cli\u003ethe values are stored into variables (\u003ccode\u003enum1\u003c/code\u003e and \u003ccode\u003enum2\u003c/code\u003e, perhaps),\u003c/li\u003e \u003cli\u003ethe function then calls the \u003ccode\u003eadd()\u003c/code\u003e function, passing \u003ccode\u003enum1\u003c/code\u003e and \u003ccode\u003enum2\u003c/code\u003e as arguments,\u003c/li\u003e \u003cli\u003ethe \u003ccode\u003eadd()\u003c/code\u003e function \u003cem\u003ereturns\u003c/em\u003e the sum\u003c/li\u003e \u003cli\u003ethe calculator function returns a message to the user telling them what the sum is.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eNote what's happening in step 3: our calculator function is \u003cstrong\u003ecalling\u003c/strong\u003e our add function. This is an important thing to know about functions: they can be called by other functions! Eventually we'll want our calculator to do more than just add. Rather than build one very long function that contains code for adding, subtracting, multiplying, etc., we can \u003cem\u003eencapsulate\u003c/em\u003e the code for each operator into its own function and call them.\u003c/p\u003e  \u003cp\u003eThe code that calls the \u003ccode\u003eadd()\u003c/code\u003e function and creates the message might look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst sum = add(num1,num2);\u003cbr\u003econst message = `The sum of your numbers is: ${sum}.` \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOr, equivalently:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst message = `The sum of your numbers is: ${add(num1, num2)}.` \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003emessage\u003c/code\u003e could then be written out to the screen.\u003c/p\u003e  \u003ch3\u003eOne Last Point About \u003ccode\u003ereturn\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThere's one additional thing it's important to know about \u003ccode\u003ereturn\u003c/code\u003e. If we wanted to both \u003ccode\u003ereturn\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e log a string in our \u003ccode\u003esay()\u003c/code\u003e function, we might try writing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction say(greeting, firstName) {\u003cbr\u003e  return `${greeting}, ${firstName}!`;\u003cbr\u003e  console.log('I was called!');\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's call the function and log the result:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econsole.log(say(\"Howdy\", \"partner\")); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen you run that code, the return value is logged, but the \u003ccode\u003econsole.log()\u003c/code\u003e inside the function body does not execute!\u003c/p\u003e  \u003cp\u003eThis is because \u003ccode\u003ereturn\u003c/code\u003e \u003cstrong\u003eends the execution inside the function\u003c/strong\u003e. Nothing after the line with the \u003ccode\u003ereturn\u003c/code\u003e will be executed.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e Take a look at the above code in \u003ccode\u003eindex.js\u003c/code\u003e. Depending on which text editor you're using, you may see that the line with the \u003ccode\u003econsole.log()\u003c/code\u003e is \"grayed out.\" This is the text editor giving you a hint that that line of code is unreachable.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eTo both log and return like we want to, we can switch the order around:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction say(greeting, firstName) {\u003cbr\u003e  console.log('I was called!');\u003cbr\u003e  return `${greeting}, ${firstName}!`;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if we rerun the code, we should see the output of both \u003ccode\u003econsole.log()\u003c/code\u003es.\u003c/p\u003e  \u003ch2\u003eYour turn!\u003c/h2\u003e  \u003cp\u003eTry rewriting some of the functions that we've written in this lesson to get used to the difference between \u003ccode\u003ereturn\u003c/code\u003e-ing and printing (\u003ccode\u003econsole.log()\u003c/code\u003e-ing) to the terminal. Try writing a function of your own that returns something.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\"\u003eMDN - Functions\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"introduction-to-working-with-data-structures","title":"Introduction to Working with Data Structures","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-working-with-data-structures-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-working-with-data-structures-intro/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-working-with-data-structures-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-working-with-data-structures-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCompare collection data types to other data types\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eArray\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eArray\u003c/code\u003e element\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eArray\u003c/code\u003e index\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eObject\u003c/code\u003e key\u003c/li\u003e \u003cli\u003eDefine \u003ccode\u003eObject\u003c/code\u003e value\u003c/li\u003e \u003cli\u003eDemonstrate nesting of collection data structures\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eThus far, we've been storing simple data in our variables, values like:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eString\u003c/code\u003es\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eBoolean\u003c/code\u003es\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eNumber\u003c/code\u003es\u003c/li\u003e \u003cli\u003eetc.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eBut sometimes we want to refer to a \u003cem\u003ecollection\u003c/em\u003e of values by a common name. This is very natural in conversation: we know \"The Beatles\" refer to four guys from Liverpool who sang \"I Wanna Hold Your Hand.\" \"Grocery List\" is something that contains multiple small elements that we identify by \"the third item on my grocery list, or the last item on my grocery list.\" Ordered lists in JavaScript are called \"Arrays.\"\u003c/p\u003e  \u003cp\u003e  \u003cimg width=\"300\" src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-4/introduction/Image_125_Scroll%20w-List.png\" alt=\"Scroll\"\u003e \u003c/p\u003e  \u003cp\u003eAnother collection type we know about from daily life are dictionaries: we use one thing to \"look up\" a value. We \"look up\" the word \"computer\" in a real dictionary and we are \"pointed to\" a long \u003ccode\u003eString\u003c/code\u003e that tells us what the word means. Lookup tables, or dictionaries, in JavaScript, are called \"Objects.\"\u003c/p\u003e  \u003cp\u003e  \u003cimg width=\"300\" src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-4/introduction/Image_126_Dictionary.png\" alt=\"Dictionary\"\u003e \u003c/p\u003e  \u003cp\u003eLearning to store and to work with the data held in data structures will be the focus of this section. In this lesson, we'll give you a broad, conceptual introduction to collection data types.\u003c/p\u003e  \u003ch2\u003eCompare Collection Data Types to Scalar Data Types\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eString\u003c/code\u003es and \u003ccode\u003eNumber\u003c/code\u003es are scalar data types, they can be put on a scale. A collection type holds multiple pieces of data and allows us to talk about the collection as an \u003cem\u003eabstraction\u003c/em\u003e. \"The Beatles\" is an \u003cem\u003eabstraction\u003c/em\u003e used to refer to the individuals John, Paul, George, and Ringo. Because collection types can't be put on a scale, they \u003cstrong\u003e\u003cem\u003eare not\u003c/em\u003e\u003c/strong\u003e called scalar data types.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eArray\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eAn \u003ccode\u003eArray\u003c/code\u003e is a collection that holds multiple pieces of data under a single name (\"Gryffindors\", \"Countries\"). In daily life, we call them \"lists.\"\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eThe Beatles\u003c/strong\u003e\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\n\u003ctr\u003e     \u003cth\u003eIndex\u003c/th\u003e     \u003cth\u003eData\u003c/th\u003e   \u003c/tr\u003e    \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"John Lennon\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Paul McCartney\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Ringo Starr\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"George Harrison\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eor\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eGroceries\u003c/strong\u003e\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\n\u003ctr\u003e     \u003cth\u003eIndex\u003c/th\u003e     \u003cth\u003eData\u003c/th\u003e   \u003c/tr\u003e    \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Parsnips\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e1\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"English Toffee\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e2\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Milk\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Sprouted Rye Bread\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eThe individual \u003cem\u003eelements\u003c/em\u003e that make up this collection (or list) name are identified by an \u003cem\u003eindex\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003e   \u003cimg width=\"500\" src=\"https://curriculum-content.s3.amazonaws.com/programming-univbasics-4/introduction/Image_127_Beatles.png\" alt=\"Beatles\"\u003e \u003c/p\u003e  \u003cp\u003eIt might seem strange that we start our list at \u003ccode\u003e0\u003c/code\u003e instead of \u003ccode\u003e1\u003c/code\u003e. Programmers like \u003ccode\u003e0\u003c/code\u003e and most programming languages start their index at \u003ccode\u003e0\u003c/code\u003e. Otherwise, it's pretty much a list like you've been making most of your life.\u003c/p\u003e  \u003cp\u003eTo define this \"list\" in JavaScript we would type:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst theBeatles = [ \"John Lennon\", \"Paul McCartney\", \"Ringo Starr\", \"George Harrison\"] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou provide a name (\u003ccode\u003etheBeatles\u003c/code\u003e), an assignment operator (\u003ccode\u003e=\u003c/code\u003e) and then a list of data, separated by commas, that should go in the \u003ccode\u003eArray\u003c/code\u003e, wrapped in \u003ccode\u003e[]\u003c/code\u003e. Each bit of information is often a scalar value, but it could also be another collection (more on that later).\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eArray\u003c/code\u003e Element / Member\u003c/h2\u003e  \u003cp\u003eThe individual pieces of data inside an \u003ccode\u003eArray\u003c/code\u003e are called \u003cem\u003eelements\u003c/em\u003e. Some people also call the \u003cem\u003eelements\u003c/em\u003e the \u003cem\u003emembers\u003c/em\u003e. In a collection of \u003ccode\u003etheBeatles\u003c/code\u003e, the \u003ccode\u003eString\u003c/code\u003e \u003ccode\u003e\"George Harrison\"\u003c/code\u003e is an \u003cem\u003eelement\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eArray\u003c/code\u003e Index\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eArray\u003c/code\u003es provide a number that identifies each \u003cem\u003eelement\u003c/em\u003e called an \u003cem\u003eindex\u003c/em\u003e. The index for the \u003cem\u003eelement\u003c/em\u003e \u003ccode\u003e\"Ringo Starr\"\u003c/code\u003e above is \u003ccode\u003e2\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe'll cover adding, removing, retrieving, and deleting \u003cem\u003eelements\u003c/em\u003e via their \u003cem\u003eindex\u003c/em\u003e in another lesson.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eObject\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eAnother way of thinking about \u003ccode\u003eArray\u003c/code\u003es is that they are like tables that have an identifier that is a \u003ccode\u003eNumber\u003c/code\u003e. If we let the identifier be a \u003ccode\u003eString\u003c/code\u003e \u003cem\u003einstead\u003c/em\u003e of an \u003ccode\u003eNumber\u003c/code\u003e, then we'd basically be describing an \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhat if we wanted to take our list of the Beatles and describe each member not by some \u003ccode\u003eNumber\u003c/code\u003e \u003cem\u003eindex\u003c/em\u003e, but rather by the instrument they played in the band? As a table this might look like:\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\n\u003ctr\u003e     \u003cth\u003eInstrument\u003c/th\u003e     \u003cth\u003eBeatle\u003c/th\u003e   \u003c/tr\u003e    \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"Rhythm Guitar\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"John Lennon\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"Bass\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Paul McCartney\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"Drums\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Ringo Starr\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"Lead Guitar\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"George Harrison\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eAn \u003ccode\u003eObject\u003c/code\u003e is a collection data type that holds multiple pieces of data under a collected name whose members can be read and updated by using a \u003cem\u003ekey\u003c/em\u003e instead of an \u003cem\u003eindex\u003c/em\u003e. In daily conversation we use \u003cem\u003ekeys\u003c/em\u003e to retrieve \u003cem\u003evalues\u003c/em\u003e all the time: \"Who was the guy who played \u003cstrong\u003edrums\u003c/strong\u003e in \u003cstrong\u003eThe Beatles\u003c/strong\u003e?\"\u003c/p\u003e  \u003cp\u003eWe can think of \u003ccode\u003eObject\u003c/code\u003es like a table that looks like this:\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\n\u003ctr\u003e     \u003cth\u003eKey\u003c/th\u003e     \u003cth\u003eValue\u003c/th\u003e   \u003c/tr\u003e    \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"liverpool\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"The Beatles\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"manchester\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"The Smiths\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"coventry\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Delia Derbyshire and the BBC Radiophonic Band\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e   \u003ctr\u003e     \u003ctd\u003e\u003ccode\u003e\"london\"\u003c/code\u003e\u003c/td\u003e     \u003ctd\u003e\u003ccode\u003e\"Ziggy Stardust and the Spiders from Mars\"\u003c/code\u003e\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eTo define this \"table\" in JavaScript we would type:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst englishBandsByCity = {\u003cbr\u003e \"liverpool\": \"The Beatles\",\u003cbr\u003e \"manchester\": \"The Smiths\",\u003cbr\u003e \"coventry\": \"Delia Derbyshire and the BBC Radiophonic Band\",\u003cbr\u003e \"london\": \"Ziggy Stardust and the Spiders from Mars\"\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou provide a name (\u003ccode\u003eenglishBandsByCity\u003c/code\u003e), an assignment operator (\u003ccode\u003e=\u003c/code\u003e) and then a list of pairs, separated by commas, that should go in the \u003ccode\u003eObject\u003c/code\u003e, wrapped in \u003ccode\u003e{}\u003c/code\u003e. Each pair should have a key, a colon (\u003ccode\u003e:\u003c/code\u003e), and a value. A value is often a scalar value, but it could be another collection; more on that later.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eObject\u003c/code\u003e Key\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eObject\u003c/code\u003es are like tables that have a name that is a piece of data, typically a \u003ccode\u003eSymbol\u003c/code\u003e or a \u003ccode\u003eString\u003c/code\u003e. This identifier is called a \u003cem\u003ekey\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eDefine \u003ccode\u003eObject\u003c/code\u003e Value\u003c/h2\u003e  \u003cp\u003eThe value that's returned from asking an \u003ccode\u003eObject\u003c/code\u003e what a given \u003cem\u003ekey\u003c/em\u003e points to is known as the key's \u003cem\u003evalue\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eWe'll cover adding, removing, retrieving, and deleting \u003cem\u003evalues\u003c/em\u003e via their \u003cem\u003ekey\u003c/em\u003e in another lesson.\u003c/p\u003e  \u003ch2\u003eDemonstrate Nesting of Collection Data Structures\u003c/h2\u003e  \u003cp\u003eNow that you know about \u003ccode\u003eArray\u003c/code\u003es (grocery lists, band members, todo lists) and \u003ccode\u003eObject\u003c/code\u003es (abbreviation to full name lookup, a stock symbol to trading value lookup, instrument to band member name lookup) you might be a bit unimpressed. \"Surely the world's data needs are more complex than simple lists and lookup tables,\" you might exclaim.\u003c/p\u003e  \u003cp\u003eYou'd be right, but the amazing thing about collections is that they can contain \u003cem\u003eother\u003c/em\u003e collections as part of a process called \u003cem\u003enesting\u003c/em\u003e. Can you imagine an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eObject\u003c/code\u003es? Or an \u003ccode\u003eObject\u003c/code\u003e of \u003ccode\u003eArrays\u003c/code\u003e of \u003ccode\u003eObject\u003c/code\u003es of \u003ccode\u003eArray\u003c/code\u003es? You can cover a staggeringly huge model of data with nesting of these two data types.\u003c/p\u003e  \u003cp\u003eWe want to provide a really complex example of \u003ccode\u003eArray\u003c/code\u003es and \u003ccode\u003eObject\u003c/code\u003es working together. Most programming texts don't share this concept this early and it makes \"nesting\" sound scary and complex. We're going to give you a short demonstration here so that you can see why you want to have these complex data structures. The details on how to build them etc... will come in later lessons.\u003c/p\u003e  \u003cp\u003eThe \u003cem\u003eelements\u003c/em\u003e in an \u003cem\u003eArray\u003c/em\u003e and the \u003cem\u003evalues\u003c/em\u003e in an \u003cem\u003eObject\u003c/em\u003e can be \u003ccode\u003eObject\u003c/code\u003es or \u003ccode\u003eArray\u003c/code\u003es \u003cem\u003ethemselves\u003c/em\u003e. This leads to \"nesting\" such that you could build a complex data structure like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst englishMusicByCity = {\u003cbr\u003e  \"manchester\": [\u003cbr\u003e    {\u003cbr\u003e      \"bandName\": \"The Smiths\",\u003cbr\u003e      \"memberNames\": [\"Morrissey\", \"Johnny\", \"Andy\", \"Mike\"]\u003cbr\u003e    },\u003cbr\u003e    {\u003cbr\u003e      \"bandName\": \"Joy Division\",\u003cbr\u003e      \"memberNames\": [\"Peter\", \"Stephen\", \"Bernard\", \"Ian\"]\u003cbr\u003e    }\u003cbr\u003e  ]\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cem\u003eabstraction\u003c/em\u003e \u003ccode\u003eenglishMusicByCity\u003c/code\u003e hides the complexity in that piece of data.\u003c/p\u003e  \u003cp\u003eAs a peek ahead, we can use the lookup operator (\u003ccode\u003e[]\u003c/code\u003e) to \"dig into\" this nested collection and get interesting information out:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eenglishMusicByCity[\"manchester\"][0][\"bandName\"] //=\u0026gt; \"The Smiths\"\u003cbr\u003eenglishMusicByCity[\"manchester\"][0][\"memberNames\"] //=\u0026gt; [\"Morrissey\", \"Johnny\", \"Andy\", \"Mike\"]\u003cbr\u003e\u003cbr\u003econsole.log(`There were ${englishMusicByCity[\"manchester\"][0][\"memberNames\"].length} members in ${englishMusicByCity[\"manchester\"][0][\"bandName\"]}`)\u003cbr\u003e//=\u0026gt; \"There were 4 members in The Smiths\" \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eThis is has been a broad tour of JavaScript's collection data types, \u003ccode\u003eObject\u003c/code\u003e and \u003ccode\u003eArray\u003c/code\u003e.  Individually, they are data structures that can hold list- and dictionary-like data. Amazingly, they can even \u003cem\u003ehold each other\u003c/em\u003e — and that means we can make very complex data structures from them! We'll practice with these types in the following lessons!\u003c/p\u003e","frontPage":false}],"assignments":[{"exportId":"ged035c7cba9f2fe47cc8a4bd3fde9ff3","title":"Arrays Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-array-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePractice writing arrays\u003c/li\u003e \u003cli\u003ePractice using \u003cem\u003edestructive\u003c/em\u003e methods to manipulate arrays\u003c/li\u003e \u003cli\u003ePractice using \u003cem\u003enondestructive\u003c/em\u003e methods to manipulate arrays\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe've learned about how arrays work and about the array methods built in to JavaScript that we can use to manipulate them. Now it's time to practice what we've learned.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eOpen up the \u003ccode\u003etest\u003c/code\u003e folder and take a look at \u003ccode\u003eindexTest.js\u003c/code\u003e. Note that some of the names of the functions you will be writing begin with \u003ccode\u003edestructively\u003c/code\u003e and some don't. This is a clue as to which \u003ccode\u003eArray\u003c/code\u003e method you will need to use for each function.\u003c/p\u003e  \u003cp\u003eNote also that the first test asks for an array called \u003ccode\u003ecats\u003c/code\u003e, set to an initial value of \u003ccode\u003e[\"Milo\", \"Otis\", \"Garfield\"]\u003c/code\u003e. In your functions, you will be accessing and manipulating this array.\u003c/p\u003e  \u003cp\u003eNear the top of \u003ccode\u003eindexTest.js\u003c/code\u003e you will see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e    beforeEach(function () {\u003cbr\u003e      cats.length = 0;\u003cbr\u003e\u003cbr\u003e      cats.push('Milo', 'Otis', 'Garfield');\u003cbr\u003e    }); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat this code does is \u003cem\u003ereset\u003c/em\u003e the array to its original contents before each test is run. The reason we need to do this is because some of your functions will be \u003cem\u003edestructive\u003c/em\u003e — they will change the original \u003ccode\u003ecats\u003c/code\u003e array. This is a problem because it means the input to the remaining functions will be dependent on the outcome of other functions. It also means that the expected return value of a function might change if the tests are run in a different order. This makes it more difficult both to write tests in the first place and to figure out how to get the tests to pass. Resetting the array returns us to a blank slate between tests.\u003c/p\u003e  \u003cp\u003eThis is also a good illustration of why it's generally good practice to avoid mutating a program's state whenever possible. If we use only \u003cem\u003enondestructive\u003c/em\u003e methods, we have complete control over what's going into and coming out of the function. This makes our programs more robust, easier to maintain, and less prone to bugs.\u003c/p\u003e  \u003cp\u003eRemember the workflow:\u003c/p\u003e  \u003col\u003e \u003cli\u003eRun the tests using \u003ccode\u003enpm test\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eRead the errors; vocalize what they're asking you to do.\u003c/li\u003e \u003cli\u003eWrite code; repeat steps 1 and 2 often until a test passes.\u003c/li\u003e \u003cli\u003eRepeat as needed for the remaining tests.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g52e20bb3236b13fc525781b84a68882a","title":"Complete Your First Software Engineering Assignment","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-completing-assignments\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-completing-assignments/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-completing-assignments\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-completing-assignments/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eDuring this course, you will work on various assignments as you learn to code. All assignments will be interactive pieces of curriculum that require some work. Some assignments may ask you to follow a set of instructions, while others will ask you to figure out your own solution to pass specific tests. This lesson is your first assignment!\u003c/p\u003e  \u003cp\u003eAll assignments are hosted on GitHub. In order to work on them, however, you will need to complete work on your local machine. The general process is:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eGo to the assignment's GitHub page\u003c/li\u003e \u003cli\u003eCreate a personal copy (a 'fork') of the assignment\u003c/li\u003e \u003cli\u003eDownload your personal copy (referred to as 'cloning') to your environment\u003c/li\u003e \u003cli\u003eComplete the required work\u003c/li\u003e \u003cli\u003eUpload the work you've done to your personal copy of the assignment on GitHub\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eFor this assignment, we'll do a quick walkthrough of these steps so you will know what to do in future assignments.\u003c/p\u003e  \u003ch3\u003eA Quick Note on Organizing Work on Your Machine\u003c/h3\u003e  \u003cp\u003eThrough this course, you will be downloading many assignments, so it is important to take a moment now to think about how you'll organize this work on your computer. You are welcome to do what you like, but we recommend setting up a directory where you can keep all of your work for this course.\u003c/p\u003e  \u003cul\u003e \u003cli\u003eGo to your terminal and navigate to your home directory by typing \u003ccode\u003ecd ~\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eCreate a \u003ccode\u003eDevelopment\u003c/code\u003e folder by typing \u003ccode\u003emkdir Development\u003c/code\u003e (if you're a mac user, this folder already exists)\u003c/li\u003e \u003cli\u003eNavigate into this folder with \u003ccode\u003ecd Development\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eIn here, create a \u003ccode\u003ecode\u003c/code\u003e folder with \u003ccode\u003emkdir code\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eNavigate into this folder with \u003ccode\u003ecd code\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou'll be going through multiple phases in this course, so it may also be helpful to go one step further and create folders for phases 0 through 5 within \u003ccode\u003ecode\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eHaving a specific place for your work will make it easier to find if you ever need to look back at an earlier project. It'll also keep the rest of your computer's folders clear of random code.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The process we'll go through in this lesson will create sub-folders automatically. Whenever you are starting a new assignment, navigate back to your main \u003ccode\u003ecode\u003c/code\u003e folder (\u003ccode\u003ecd ~/Development/code\u003c/code\u003e) to ensure these sub-folders don't get created \u003cem\u003ewithin each other\u003c/em\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch3\u003eAccessing GitHub and Forking\u003c/h3\u003e  \u003cp\u003eAll the lessons in this course have a corresponding repository in GitHub. On this page in Canvas, you should see three icons in the \u003cstrong\u003eupper right\u003c/strong\u003e corner. The first says \u003cstrong\u003eFork\u003c/strong\u003e. The second is a button that looks like a large-headed cat (GitHub's 'Octocat' icon); this button will open the lesson's GitHub repo \u003cem\u003ewithout\u003c/em\u003e forking. The third is a flag, which you can use to submit an \u003cem\u003eissue\u003c/em\u003e for the lesson (e.g., if you find a typo or other error).\u003c/p\u003e  \u003cp\u003eOne way to fork an assignment is to click the Octocat button to go to the assignment's GitHub repo and fork directly from that page. (We'll go through that process in a later lesson.) However, the easiest way to fork the assignment is by clicking the \u003cstrong\u003eFork\u003c/strong\u003e button. Either method will work, but we recommend you use the \u003cstrong\u003eFork\u003c/strong\u003e button because it will automate some assignment steps for you when you get a bit farther along in the curriculum.\u003c/p\u003e  \u003cfigure\u003e   \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fork-link.png\" alt=\"fork link\" height=\"25px\"\u003e   \u003cfigcaption\u003eThis is just a picture, the button is up at the top of the page\u003c/figcaption\u003e \u003c/figure\u003e  \u003cp\u003eClicking the \u003cstrong\u003eFork\u003c/strong\u003e button will do one of two things — it will either start the forking process or bring you to a page where you select where to create your fork. If you're prompted to choose, select your personal GitHub account. The forking process will begin and may take a few moments. When complete, you will be redirected to a new copy of the assignment that exists under \u003cem\u003eyour\u003c/em\u003e GitHub account.\u003c/p\u003e  \u003cp\u003eForking is a process which creates an exact copy of a collection of code and files. Once you've created a fork on your own GitHub account, you will be able to edit the files in the repository and write your own code solution without interfering with the original copy.\u003c/p\u003e  \u003cp\u003eGo ahead and fork this assignment. The \u003ccode\u003eREADME.md\u003c/code\u003e file in the repository contains these instructions, so you can continue here or in GitHub.\u003c/p\u003e  \u003cp\u003eWith a fork created, the next step is to download your new repository to your local machine.\u003c/p\u003e  \u003ch3\u003eCloning to Your Local Machine\u003c/h3\u003e  \u003cp\u003eTo download the repository for this lesson, on your personal GitHub fork, first click the \u003cstrong\u003eCode\u003c/strong\u003e button. A pop-up will appear that says \u003cstrong\u003eClone with HTTPS\u003c/strong\u003e. You'll see a URL provided starting with \u003ccode\u003ehttps://...\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/git-clone-using-ssh.png\" alt=\"GitHub code button drop-down\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eBefore doing anything else\u003c/strong\u003e, make sure to switch from \u003cstrong\u003eHTTPS\u003c/strong\u003e to \u003cstrong\u003eSSH\u003c/strong\u003e by clicking the \u003cstrong\u003eUse SSH\u003c/strong\u003e link. When clicked, the pop-up will change to display \u003cstrong\u003eClone with SSH\u003c/strong\u003e. Instead of a URL, you'll see what sort of looks like an email, starting with \u003ccode\u003egit@github.com:\u003c/code\u003e. You should see your GitHub name after the \u003ccode\u003e:\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/canvas-welcome/clone-with-ssh.png\" alt=\"clone with ssh option\"\u003e\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eAside:\u003c/strong\u003e Why SSH? If you followed the setup instructions, you have added your personal SSH key to GitHub. GitHub will store your personal copies of all the work you do in this course. Because you've added your SSH key, GitHub will know who you are when you send work from your local machine to GitHub to be stored. Using HTTPS instead would require you to sign in from your terminal using your log-in credentials each time you try to push your code to GitHub; it also may not work at all for some assignments.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eFrom here, click the clipboard icon.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/copy-clone-command-button.png\" alt=\"copy to clipboard button\"\u003e\u003c/p\u003e  \u003cp\u003eNow, open your terminal and navigate to where you'd like to download the assignment (e.g. \u003ccode\u003ecd ~/Development/code\u003c/code\u003e). Type \u003ccode\u003egit clone\u003c/code\u003e then paste in the copied SSH link from GitHub. It should look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit clone git@github.com:/phase-0-completing-assignments.git \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePress enter, and you should see a flurry of terminal activity. Once the terminal gives you control to type again, a new folder with the GitHub name of the assignment will be present. Change directory into this folder to access the assignment files.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecd phase-0-completing-assignments \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, if you've set up VS Code, type \u003ccode\u003ecode .\u003c/code\u003e to open up a text editor window with access to all of the assignment's files. The instructions are now also available on your local machine in \u003ccode\u003eREADME.md\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eCompleting an Assignment\u003c/h3\u003e  \u003cp\u003eMost assignments will have tests that check your work and provide immediate feedback in the terminal. We'll walk through some examples in upcoming lessons.\u003c/p\u003e  \u003cp\u003eThis assignment has a single test: check to see if you've correctly cloned this assignment to your local machine. If you've followed the steps above, you've completed everything you need to do to pass the test; all that is left to do is run it.\u003c/p\u003e  \u003cp\u003eTo run an assignment's tests, first you'll need to set up the tools used to run the test. Fortunately, all the tools required are included as part of the assignment, so all you need to do is type the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003enpm install \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis command will again cause a flurry of activity in your terminal. You may see some warnings in the mix of output, but that is normal. After a few moments, you should see some messaging about packages being added and regain control of the command line. You're now ready to run this assignment's tests. Type the following to do so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003enpm test \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou should see the test results print out. For this assignment, they'll look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eThis assignment\u003cbr\u003e    ✓ has been correctly cloned to your local environment\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  1 passing (5ms) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCongratulations! You've passed this assignment's test.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you did not receive a passing test, or if your terminal produced some sort of error, walk through the steps in this lesson again and make sure you've followed each one. If you're still receiving errors, we recommend going back through the local environment setup instructions again to ensure everything is set up properly.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eUploading Your Work to GitHub\u003c/h2\u003e  \u003cp\u003eWhen all tests are passing, the next step is to upload your work. To do this, we run three commands in the terminal. First, type the following, then press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add . \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis 'stages' any work you've done (changes to your local copy of an assignment) so it will be ready to upload.\u003c/p\u003e  \u003cp\u003eSecond, we create a record of these changes that includes a message describing the change. Type the following, then press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit commit -m 'Done with assignment' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is known as creating a 'commit.' A commit preserves all \u003cem\u003estaged\u003c/em\u003e changes from the previous command. Any work you've done is now recorded as part of your copy of the assignment. This copy, however, is still only on your local environment.\u003c/p\u003e  \u003cp\u003eTo upload your completed assignment, there is one final command to run. Type the following, then press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis command sends the changes you've made to GitHub. If you revisit your \u003cem\u003epersonal\u003c/em\u003e copy of the assignment on GitHub, the commit you just created (with the message 'Done with assignment') will be the most recent commit on the assignment.\u003c/p\u003e  \u003cp\u003eEach assignment will be slightly different and will include instructions on what is required to complete it. Depending on the testing tools in an assignment, the specific commands may change. For this lesson, we ran \u003ccode\u003enpm install\u003c/code\u003e and \u003ccode\u003enpm test\u003c/code\u003e: \u003ccode\u003enpm install\u003c/code\u003e to set up the necessary tools, and \u003ccode\u003enpm test\u003c/code\u003e to run the actual test.\u003c/p\u003e  \u003cp\u003eYou'll also see some assignments that ask you to run \u003ccode\u003ebundle\u003c/code\u003e and \u003ccode\u003erspec\u003c/code\u003e — \u003ccode\u003ebundle\u003c/code\u003e, like \u003ccode\u003enpm install\u003c/code\u003e, will set up necessary tools and \u003ccode\u003erspec\u003c/code\u003e will run the tests. We'll include instructions indicating which commands to run. In all cases, you can run the tests as many times as you would like. Some labs will have many tests and may require running the tests many times while you solve them.\u003c/p\u003e  \u003ch2\u003eUploading Your Work To Canvas\u003c/h2\u003e  \u003cp\u003eTo register completion of an assignment in Canvas, you must submit a link to your GitHub repository.\u003c/p\u003e  \u003cp\u003e1) After pushing your code up following the previous steps, go to your    repository and copy the URL link in the browser's URL bar.\u003c/p\u003e  \u003cp\u003e2) In Canvas, navigate to the assignment you've been working on. In the upper    right corner of the assignment, you should see a \u003cstrong\u003eSubmit Assignment\u003c/strong\u003e    button. You'll be directed to the bottom of the page, where you can provide a    URL as your submission.\u003c/p\u003e  \u003cp\u003e3) Paste in your repository's GitHub URL and click \u003cstrong\u003eSubmit\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eCanvas will indicate a successful submission and refresh the page. In the Modules view of your course, you should now see a checkmark next to the assignment, indicating a successful submission.\u003c/p\u003e  \u003ch2\u003eReview\u003c/h2\u003e  \u003cp\u003eLet's quickly review the process for completing assignments:\u003c/p\u003e  \u003cp\u003e1) Create a personal fork of the GitHub assignment by clicking the \u003cstrong\u003eFork\u003c/strong\u003e    button in the upper right corner of the assignment on Canvas.\u003c/p\u003e  \u003cp\u003e2) Once forked to your personal account, start the \u003cstrong\u003ecloning\u003c/strong\u003e for your    assignment. Do this by clicking the \u003cstrong\u003eCode\u003c/strong\u003e button in GitHub, choosing    \u003cstrong\u003eSSH\u003c/strong\u003e, then clicking the \u003cstrong\u003eclipboard\u003c/strong\u003e icon to copy the assignment's GitHub    info.\u003c/p\u003e  \u003cp\u003e3) Go to your local environment's terminal and navigate to where you'd like to    store your assignment locally.\u003c/p\u003e  \u003cp\u003e4) Type \u003ccode\u003egit clone\u003c/code\u003e, then paste in what you copied from GitHub. This will    create a copy on your local machine.\u003c/p\u003e  \u003cp\u003e5) Navigate into the new cloned assignment and complete any work required\u003c/p\u003e  \u003cp\u003e6) Install testing tools with \u003ccode\u003enpm install\u003c/code\u003e (or \u003ccode\u003ebundle\u003c/code\u003e if tests use Ruby)\u003c/p\u003e  \u003cp\u003e7) Run tests with \u003ccode\u003enpm test\u003c/code\u003e (or \u003ccode\u003erspec\u003c/code\u003e for Ruby)\u003c/p\u003e  \u003cp\u003e8) If all tests are passing, stage and commit your solution with the following    commands\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  git add .\u003cbr\u003e  git commit -m 'Done with assignment' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e9) Push your work to your personal fork on GitHub with the \u003ccode\u003egit push\u003c/code\u003e command\u003c/p\u003e  \u003cp\u003e10) Go to your repository in GitHub and copy the URL. Note, this should be copied from the browser's address bar, and should start with \u003ccode\u003ehttps://github.com/\u003c/code\u003e\u003c/p\u003e  \u003cp\u003e11) Go to the assignment in Canvas and click \u003cstrong\u003eSubmit Assignment\u003c/strong\u003e (or \u003cstrong\u003eStart Assignment\u003c/strong\u003e)\u003c/p\u003e  \u003cp\u003e12) Paste in your GitHub URL as your submission\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eCongratulations! You've completed your first assignment! You now know how to work on and submit assignments. We'll remind you of this process in upcoming lessons, but we recommend bookmarking this lesson so you can refer back here in case you forget. Equipped with this knowledge, you are now ready to tackle greater challenges!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8b8ee3a8e0ba8f4de8dd8f7f431e6679","title":"Configuring the Flatiron Student Portal","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"macos-env-flatiron-student-portal\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/macos-env-flatiron-student-portal/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/macos-env-flatiron-student-portal\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/macos-env-flatiron-student-portal/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eAs you continue your journey into programming, you will learn to use many tools to make your work easier that you only \u003cem\u003esort of\u003c/em\u003e understand. Node packages, Ruby gems, libraries, command-line applications, frontend frameworks, etc... many of these tools are actually built out of \u003cem\u003eother\u003c/em\u003e tools, things you may never have heard of. That is okay.\u003c/p\u003e  \u003cp\u003eThanks to the collective work of many programmers around the world, we're able to tap in to a diverse ecosystem of tools. We don't need to know how they all work together for them to be useful to us. You might one day know JavaScript well enough to build your own version of \u003ca href=\"https://reactjs.org/\"\u003eReact\u003c/a\u003e, but you'll be able to use React long before you know how all the parts work. Many of these tools are designed to solve problems so we can focus our energy and time elsewhere.\u003c/p\u003e  \u003cp\u003eWe've already used a few tools to help us get started with programming. If you recall from the previous installation instructions, we've installed NVM, the Node Version Manager, which manages which version of Node you're using on your computer. We've been using NPM, Node \u003cstrong\u003ePackage\u003c/strong\u003e Manager, to run local tests. We've also been using Git in the command line to interface remotely with GitHub.\u003c/p\u003e  \u003cp\u003eIn this lesson, we're going to introduce another tool that will help us going forward, the \u003ccode\u003elearn-co\u003c/code\u003e gem.\u003c/p\u003e  \u003ch2\u003eThe \u003ccode\u003elearn-co\u003c/code\u003e Gem\u003c/h2\u003e  \u003cp\u003eSo, if all these tools we use are meant to solve problems, what problems does the \u003ccode\u003elearn-co\u003c/code\u003e gem solve?\u003c/p\u003e  \u003cp\u003eIn your assignments so far, after cloning a repository, you typically do a few things while working through the assignment:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eRun \u003ccode\u003enpm install\u003c/code\u003e or \u003ccode\u003ebundle\u003c/code\u003e to install any necessary dependencies for the repository (\u003cem\u003e...tools others have built to make things easier for us\u003c/em\u003e)\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eRun \u003ccode\u003enpm test\u003c/code\u003e or \u003ccode\u003erspec\u003c/code\u003e to run tests\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eGit commit and push your work to your GitHub remote repo\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eOnce you've pushed your solution up to GitHub, you then have to submit a link in Canvas.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003elearn-co\u003c/code\u003e gem will take care of all of these steps using a single command, \u003ccode\u003elearn test\u003c/code\u003e! Let's get the gem installed and configured so we can test it out.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The instructions here assume you've successfully installed Ruby and Node in the previous environment setup instructions.\u003c/p\u003e  \u003ch2\u003eInstall the \u003ccode\u003elearn-co\u003c/code\u003e Gem\u003c/h2\u003e  \u003cp\u003eTo install the gem, run the following in your terminal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egem install learn-co \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBefore we can use the gem, we'll need to do a few things:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eConnect your Flatiron School Portal account to GitHub\u003c/li\u003e \u003cli\u003eConnect the local gem to your Flatiron School Portal account\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eConnect Your GitHub Account to your Flatiron School Portal Account\u003c/h2\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \u003ca href=\"https://portal.flatironschool.com\"\u003eFlatiron School Student Portal webpage\u003c/a\u003e (\u003ca href=\"https://portal.flatironschool.com\"\u003ehttps://portal.flatironschool.com\u003c/a\u003e) \u003cem\u003e(Note: you need to be logged in to Flatiron School Student Portal.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eNavigate to your \u003ca href=\"https://learn.co/account\"\u003eAccount Management page\u003c/a\u003e (\u003ca href=\"https://learn.co/account\"\u003ehttps://learn.co/account\u003c/a\u003e) via the drop-down menu in the upper right corner of the page\u003c/li\u003e \u003cli\u003eOpen the \u003ca href=\"https://learn.co/account/github\"\u003eConnected Apps tab\u003c/a\u003e (\u003ca href=\"https://learn.co/account/github\"\u003ehttps://learn.co/account/github\u003c/a\u003e) \u003cem\u003e(Note: you may be asked to log in. Use your Flatiron School Student Portal username and password here.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eConnect your GitHub account to your Flatiron School Portal account\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eYou should now see something similar to this:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/configuring-the-flatiron-student-portal/Github_connected.png\" alt=\"Github Successfully Connected\"\u003e\u003c/p\u003e  \u003ch2\u003eConfigure the \u003ccode\u003elearn-co\u003c/code\u003e Gem\u003c/h2\u003e  \u003cp\u003eThis step will ask you to do work both in your browser and your terminal.\u003c/p\u003e  \u003ch3\u003eAction Item\u003c/h3\u003e  \u003col\u003e \u003cli\u003eOpen the \"Terminal\" application (or \"Ubuntu\" for WSL users).\u003c/li\u003e \u003cli\u003eType \u003ccode\u003etouch ~/.netrc \u0026amp;\u0026amp; chmod 0600 ~/.netrc\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. \u003cem\u003e(Note: you may be asked to enter your password.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eGo to your \u003ca href=\"https://portal.flatironschool.com/account/profile\"\u003ePublic Profile Management webpage\u003c/a\u003e (\u003ca href=\"https://portal.flatironschool.com/account/profile\"\u003ehttps://portal.flatironschool.com/account/profile\u003c/a\u003e) in your browser. \u003cem\u003e(Note: if you’re not logged in, you will need to log in again.)\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eLook for the \"Username\" heading and copy your username, but do not copy the text \u003ccode\u003ehttps://learn.co/\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eGo to your Flatiron School Student Portal Profile page (\"\u003ca href=\"https://portal.flatironschool.com/\"\u003ehttps://portal.flatironschool.com/\u003c/a\u003e\" + your username).\u003c/li\u003e \u003cli\u003eScroll all the way to the bottom of the page to the heading \"The information below is sensitive and unique to your account. Only you can view this information.\" with a red background.\u003c/li\u003e \u003cli\u003eCopy the string of characters under the \"OAuth token\" header.\u003c/li\u003e \u003cli\u003eGo back to the terminal, type \u003ccode\u003elearn whoami\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e.\u003c/li\u003e \u003cli\u003ePaste the string of characters at the prompt and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003ch3\u003eCheck Your Work\u003c/h3\u003e  \u003cp\u003eType \u003ccode\u003elearn whoami\u003c/code\u003e in the terminal. If you see a message with your name, username, and email, you've successfully configured the gem.\u003c/p\u003e  \u003ch2\u003eUsing the \u003ccode\u003elearn-co\u003c/code\u003e Gem\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003elearn-co\u003c/code\u003e gem replaces some steps in the assignment workflow you've learned so far and alters others. Let's walk through the updated process. Use this assignment to follow along:\u003c/p\u003e  \u003cp\u003e1) On this assignment's Canvas page, click the \u003cstrong\u003eFork\u003c/strong\u003e button in the upper    right corner of the page:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fork-link.png\" alt=\"fork buttton\"\u003e\u003c/p\u003e  \u003cp\u003eYou should notice a change in the button's behavior — rather than bringing    you to the fork page in GitHub, you'll be redirected to your repository    \u003cem\u003ealready in the process\u003c/em\u003e of being forked.\u003c/p\u003e  \u003cp\u003e2) Once your fork is ready, click the \u003cstrong\u003eCode\u003c/strong\u003e button and copy the \u003cstrong\u003eSSH\u003c/strong\u003e     repository info by clicking the clipboard button.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/canvas-welcome/clone-with-ssh.png\" alt=\"clone with SSH\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Make sure you're choosing SSH and not HTTPS.\u003c/p\u003e  \u003cp\u003e3) In your terminal, navigate to where you'd like to put this repository     locally, clone it down and navigate into the folder.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit clone git@github.com:/macos-env-flatiron-student-portal.git\u003cbr\u003ecd macos-env-flatiron-student-portal \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e4) Instead of running \u003ccode\u003enpm install\u003c/code\u003e and \u003ccode\u003enpm test\u003c/code\u003e (or \u003ccode\u003ebundle\u003c/code\u003e and \u003ccode\u003erspec\u003c/code\u003e),     you can now run one command, \u003ccode\u003elearn test\u003c/code\u003e, to handle this step.  This command     will automatically run the installation and test commands. You should see a     flurry of text as dependencies are installed, then the results of your test.     This assignment has the same test as the previous \u003cstrong\u003eComplete Your First     Software Engineering Assignment\u003c/strong\u003e. By cloning this assignment down, you've     already passed the test!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eThis assignment\u003cbr\u003e    ✓ has been correctly cloned to your local environment\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  1 passing (5ms)  \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen all tests are passing, you can head back to the assignment on Canvas. Refresh the assignment page and you should see that Canvas now registers the assignment as both \u003cstrong\u003eSubmitted\u003c/strong\u003e and \u003cstrong\u003eComplete\u003c/strong\u003e. A URL to your fork of the assignment has been submitted in Canvas, so you are ready to move on to the next lesson.\u003c/p\u003e  \u003cp\u003eEach assignment will be different and will include instructions on what is required to complete it. Some labs will have many tests. You can run \u003ccode\u003elearn test\u003c/code\u003e as many times as you'd like while working to solve these labs. You will submit your work to Canvas each time you do, but the assignment will be marked \u003cstrong\u003eIncomplete\u003c/strong\u003e until all tests are passing.\u003c/p\u003e  \u003ch3\u003eYour Work in GitHub\u003c/h3\u003e  \u003cp\u003eEvery time you run \u003ccode\u003elearn test\u003c/code\u003e, all the changes you've made locally will be stored on your GitHub fork of the repo. If you head back to your repo after running \u003ccode\u003elearn test\u003c/code\u003e, you should see a message that a new branch, \u003ccode\u003efis-wip\u003c/code\u003e, has been created. This branch contains the work you've done so far. If you ever want to go back to a previous solution, go to that repository on GitHub and switch to the \u003ccode\u003efis-wip\u003c/code\u003e branch.\u003c/p\u003e  \u003cp\u003eYou no longer need to commit and push your local work for these assignments.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e if you see the following message on your repo's page in GitHub, please disregard it: \u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/configuring-the-student-portal/fis-wip.jpg\" alt=\"pr_prompt\"\u003e\u003c/p\u003e  \u003ch2\u003eTypes of Assignments\u003c/h2\u003e  \u003cp\u003eFor most assignments, you will go through the process we just walked through. In our curriculum, these assignments are often referred to as \u003cstrong\u003elabs\u003c/strong\u003e — coding lessons that include tests. There are a few other types of assignments, though, that require slightly different submission steps:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eCode-alongs:\u003c/strong\u003e These also require code, but will guide you through what needs to be written. There are no tests to pass, but you will still need to go through forking, cloning, and running \u003ccode\u003elearn test\u003c/code\u003e. You should see a message stating that no tests were found, but if you check the assignment in Canvas, you should see it is marked as \u003cstrong\u003eComplete\u003c/strong\u003e.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003ePortfolio Projects:\u003c/strong\u003e For these assignments, you'll be building fully functional applications. Some guidelines and requirements will be provided, but it will be up to you to design and create your own app. These will eventually become the projects you showcase to potential employers! You will submit your projects in Canvas by submitting a link to your GitHub repo.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eBlog Submissions:\u003c/strong\u003e Blogs are a required part of our Software Engineering courses. They help to develop your online presence and are a great way to reinforce the concepts you learn. You'll write your blog posts on a different platform, but submit links to them in Canvas.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eSubmitting Projects and Blogs\u003c/h2\u003e  \u003cp\u003eFor both portfolio projects and blog posts, you'll need to manually submit a link to your work on Canvas. While viewing the assignment, you should see a \u003cstrong\u003eSubmit Assignment\u003c/strong\u003e button in the upper-right section of the page.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/canvas-welcome/submit-assignment-canvas.png\" alt=\"submit assignment button\"\u003e\u003c/p\u003e  \u003cp\u003eClicking this button will bring you to the bottom of the page where you can submit a URL link to your work.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/canvas-welcome/submit-assignment-canvas-form.png\" alt=\"submit assignment form\"\u003e\u003c/p\u003e  \u003cp\u003eUpon submission you should see confetti appear, indicating that your submission has been accepted.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It is possible to submit lab and code-along assignments manually this way. However, the assignment will only be marked as \u003cstrong\u003eSubmitted\u003c/strong\u003e, not \u003cstrong\u003eComplete\u003c/strong\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eYou've completed your first assignment using the \u003ccode\u003elearn-co\u003c/code\u003e gem! You now know how to work on and submit assignments going forward:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eClick the \u003cstrong\u003eFork\u003c/strong\u003e button on the Canvas assignment\u003c/li\u003e \u003cli\u003eOnce the assignment is forked, clone it down to your local machine\u003c/li\u003e \u003cli\u003eComplete any required work, then run \u003ccode\u003elearn test\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eIf all tests pass, the assignment will be submitted to Canvas and marked as \u003cstrong\u003eComplete\u003c/strong\u003e\n\u003c/li\u003e \u003cli\u003eYour work will also be pushed to GitHub and will be available on the \u003ccode\u003efis-wip\u003c/code\u003e branch\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eEquipped with this knowledge, you are now ready to tackle greater challenges!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g654d5c56336f36f7465a7daeda490d22","title":"Create a Link Using the href Attribute","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-link-tag-with-href\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-link-tag-with-href/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-link-tag-with-href\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-link-tag-with-href/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eWrite an \u003ccode\u003ea\u003c/code\u003e tag to create a link\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eWe've got our HTML tags, and we've got our HTML tag attributes. How do we use them together? We can figure it out by exploring the \u003ccode\u003ea\u003c/code\u003e tag and creating a link.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eWrite an \u003ccode\u003ea\u003c/code\u003e Tag to Create a Link\u003c/h2\u003e\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in your text editor. Add an \u003ccode\u003ea\u003c/code\u003e tag with the inner text (the text between the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag and the \u003ccode\u003e\u0026lt;/a\u0026gt;\u003c/code\u003e tag) of \u003ccode\u003eFlatiron School\u003c/code\u003e anywhere in the file. Then set the \u003ccode\u003ehref\u003c/code\u003e attribute of your new link element to \u003ccode\u003ehttps://flatironschool.com\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou can run the tests with this lab via the \u003ccode\u003erspec\u003c/code\u003e command. Make sure you save the file before running the test suite. Failing tests will provide helpful error messages that you can use to debug your code —\u0026nbsp;read them closely for hints!\u003c/p\u003e\n\u003ch3\u003eViewing Your Work in the Browser\u003c/h3\u003e\n\u003cp\u003eWhile working through these assignments, your general workflow should center on writing code in the text editor and checking to see what it looks like in-browser.\u003c/p\u003e\n\u003cp\u003eWorking in your local environment, you can open \u003ccode\u003eindex.html\u003c/code\u003e a few ways, depending on the environment you are in:\u003c/p\u003e\n\u003cp\u003eFor Mac users:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOpen from the Terminal by running \u003ccode\u003eopen index.html\u003c/code\u003e in the root directory of this lab\u003c/li\u003e\n\u003cli\u003eUse Finder to navigate to this lab's local folder and click the \u003ccode\u003eindex.html\u003c/code\u003e file\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor WSL users:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOpen from Ubuntu by running \u003ccode\u003eexplorer.exe index.html\u003c/code\u003e in the root directory of this lab\u003c/li\u003e\n\u003cli\u003eOpen a new Explorer window. There is a bar that says \"Quick Access\" along the top of the window (similar to a URL bar in a browser). Click this and type \u003ccode\u003e\\\\wsl$\u003c/code\u003e to access files and folders on Ubuntu. Navigate to \u003ccode\u003e/home/\u0026lt;your-user-name\u0026gt;/\u003c/code\u003e to get to your home directory, then locate this lab's local folder and click the \u003ccode\u003eindex.html\u003c/code\u003e file.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce you have the HTML document open in your browser, you can make changes to it in a text editor, save the file, refresh the page in the browser, and see the changes.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eHere we saw how an attribute helps the \u003ccode\u003ea\u003c/code\u003e tag do its job, which is to link to another location. Now we can go on to explore some additional HTML tags.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\"\u003eMozilla Developer Network: HTML \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e Tag\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g7649dd13a45288d51284f6856b677b77","title":"Creating and Inserting DOM Nodes Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-modifying-elements-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate DOM elements programmatically\u003c/li\u003e \u003cli\u003eAdd elements to the DOM\u003c/li\u003e \u003cli\u003eUpdate elements using \u003ccode\u003einnerHTML\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eChange properties on DOM nodes\u003c/li\u003e \u003cli\u003eRemove elements from the DOM\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eNow that you have an understanding of the DOM and powerful tools for selecting the right elements, it's time to learn how to:\u003c/p\u003e  \u003col\u003e \u003cli\u003ecreate new nodes\u003c/li\u003e \u003cli\u003edelete nodes\u003c/li\u003e \u003cli\u003eupdate node properties\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eCreate DOM Elements Programmatically\u003c/h2\u003e  \u003ch3\u003e\u003ccode\u003edocument.createElement()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eCreating an element in JavaScript is an easy process. You simply call \u003ccode\u003edocument.createElement('tagName')\u003c/code\u003e, where \u003ccode\u003etagName\u003c/code\u003e is the name of any valid HTML tag (\u003ccode\u003e'p'\u003c/code\u003e, \u003ccode\u003e'div'\u003c/code\u003e, \u003ccode\u003e'span'\u003c/code\u003e, etc.).\u003c/p\u003e  \u003cp\u003eOpen the \u003ccode\u003eindex.html\u003c/code\u003e file in your browser and open up the browser's console. In the console, enter:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst element = document.createElement('div'); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ethen take a look at the Elements tab. The element doesn't show up on the page. Why not?\u003c/p\u003e  \u003ch2\u003eAdd Elements to the DOM\u003c/h2\u003e  \u003cp\u003eTo get an element to appear in the DOM, we have to \u003ccode\u003eappend\u003c/code\u003e it to an existing DOM node. To go back to our tree metaphor, we have to glue our new leaf onto a branch that's already there. We can start as high up on the tree as \u003ccode\u003edocument.body\u003c/code\u003e, or we can find a more specific element using any of the methods we've learned for traversing the DOM.\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eappendChild()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eLet's append \u003ccode\u003eelement\u003c/code\u003e to \u003ccode\u003ebody\u003c/code\u003e to start:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edocument.body.appendChild(element); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if you look at the Elements tab, you'll see our new (empty) \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e nested inside the \u003ccode\u003ebody\u003c/code\u003e element. Let's give it some content:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst ul = document.createElement('ul');\u003cbr\u003e\u003cbr\u003efor (let i = 0; i \u0026lt; 3; i++) {\u003cbr\u003e  const li = document.createElement('li');\u003cbr\u003e  li.innerHTML = (i + 1).toString();\u003cbr\u003e  ul.appendChild(li);\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eelement.appendChild(ul); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou should now see the unordered list rendered on the page, and see the new elements in the \"Elements\" tab.\u003c/p\u003e  \u003cp\u003eNote that, each time we create a new element, we create a variable and save a reference to it. That makes it quite easy to make additional updates and to add it to the DOM using \u003ccode\u003eappendChild()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eAdd Elements to the DOM via \u003ccode\u003einnerHTML\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eCreating elements and then appending them into the DOM is a multi-step process. It's also the \u003cstrong\u003e\u003cem\u003esafest and most reliable way\u003c/em\u003e\u003c/strong\u003e to add content to the DOM. Most repeated code can be removed by using variables, functions and loops. It's The Right Way.\u003c/p\u003e  \u003cp\u003eThat said, however, there's another process that will also work, using \u003ccode\u003eElement.innerHTML\u003c/code\u003e. Inside our loop above, we create an \u003ccode\u003eli\u003c/code\u003e element and set its \u003ccode\u003einnerHTML\u003c/code\u003e property to a simple number (expressed as a string) that represents the current iteration through the loop. Once we append the \u003ccode\u003eli\u003c/code\u003e to the \u003ccode\u003eul\u003c/code\u003e and the \u003ccode\u003eul\u003c/code\u003e to the document \u003ccode\u003ebody\u003c/code\u003e, we see our unordered list in the browser window. This is a perfectly valid way to use \u003ccode\u003einnerHTML\u003c/code\u003e to add content to the DOM. Imagine, however, that we want to add content that's more complicated.\u003c/p\u003e  \u003cp\u003eAssume our HTML includes a \u003ccode\u003ediv\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \"header.\" We can grab that element and set its \u003ccode\u003einnerHTML\u003c/code\u003e attribute to any HTML we like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst header = document.getElementById('header');\u003cbr\u003eheader.innerHTML = \"\u0026lt;h1\u0026gt;Poodles!\u0026lt;/h1\u0026gt;\u0026lt;h3\u0026gt;An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a post-Frankfurt School Appropriationist Perspective\u0026lt;/h3\u0026gt;\u0026lt;p\u0026gt;\u0026lt;em\u0026gt;By: Byron Q. Poodle, Esq., BA.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt;\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we are using one big, long string, complete with multiple HTML tags, to create the following HTML in the DOM:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"header\"\u0026gt;\u003cbr\u003e  \u0026lt;h1\u0026gt;Poodles!\u0026lt;/h1\u0026gt;\u003cbr\u003e  \u0026lt;h3\u0026gt;An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a post-Frankfurt School Appropriationist Perspective\u0026lt;/h3\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;\u0026lt;em\u0026gt;By: Byron Q. Poodle, Esq., BA.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis process works but it is \u003cstrong\u003enot\u003c/strong\u003e recommended for several reasons. First, it's more error-prone, and the errors can be difficult to find. Second, it can negatively impact site performance. Finally, if you're inserting user-derived data (e.g., comments) into the DOM using \u003ccode\u003einnerHTML\u003c/code\u003e, you can expose your site to the risk of users \u003ca href=\"https://www.reddit.com/r/learnjavascript/comments/9502x5/is_innerhtml_still_considered_bad/e3p31go/?utm_source=share\u0026amp;utm_medium=web2x\u0026amp;context=3\"\u003einjecting malicious code\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eProgrammatically creating and appending elements is safer and more efficient, and it results in code that's easier to read, easier to debug, and easier to maintain.\u003c/p\u003e  \u003ch2\u003eChange Properties on DOM Nodes\u003c/h2\u003e  \u003cp\u003eWe can change the appearance of a DOM node using its \u003ccode\u003estyle\u003c/code\u003e attribute:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.style.backgroundColor = '#27647B'; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou've changed what's on the screen!\u003c/p\u003e  \u003cp\u003eFeel free to set as many properties as you'd like — this is a good chance to look around and explore different properties of DOM elements.\u003c/p\u003e  \u003cp\u003eLet's adjust the display:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.style.fontSize = '24px';\u003cbr\u003eelement.style.marginLeft = '30px';\u003cbr\u003eelement.style.lineHeight = 2; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePerhaps the most common way to change how things appear in the DOM is by changing an element's \u003ccode\u003eclass\u003c/code\u003e attribute. As you know from CSS, we often change the way a bit of rendered HTML appears by adding or removing a class.\u003c/p\u003e  \u003cp\u003eFor example, we could create an \u003ccode\u003ealert\u003c/code\u003e class that turns the text red (using the CSS \u003ccode\u003ecolor\u003c/code\u003e attribute) and makes it big (using the CSS \u003ccode\u003efont-size\u003c/code\u003e attribute). We can then use JavaScript to first grab the element and then add the class by updating the element's \u003ccode\u003eclassName\u003c/code\u003e property. This has the same effect as setting the \u003ccode\u003eclass\u003c/code\u003e property in the HTML. The \u003ccode\u003eclassName\u003c/code\u003e property expects a \u003ccode\u003eString\u003c/code\u003e with one or more class names, separated by spaces:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.className = \"dog\";\u003cbr\u003eelement.className = \"pet-listing dog\"; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnother way to accomplish the same thing is by using the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\"\u003e\u003ccode\u003eElement.classList\u003c/code\u003e property\u003c/a\u003e. This property has \u003ccode\u003e.add()\u003c/code\u003e and \u003ccode\u003e.remove()\u003c/code\u003e methods that can be used as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eelement.classList.remove(\"unneeded-class\");\u003cbr\u003eelement.classList.add(\"pet-listing\", \"dog\"); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis approach allows you to easily add and remove classes programmatically, without having to create a long string of class names.\u003c/p\u003e  \u003ch3\u003eSeparation of Concerns\u003c/h3\u003e  \u003cp\u003eAn important thing to bear in mind is that we only want to use JavaScript to change the appearance of an element when we need to make a change dynamically, i.e., in response to user actions. This goes back to a fundamental programming concept about separating concerns between technologies:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHTML defines the structure of the website (not appearance or functionality)\u003c/li\u003e \u003cli\u003eJavaScript defines functionality of the website (not structure or styling)\u003c/li\u003e \u003cli\u003eCSS defines the visualization and style of the website (not structure or functionality)\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eDefining the base CSS should still happen in the CSS files that are loaded into the DOM when the page is opened.\u003c/p\u003e  \u003ch2\u003eRemove Elements from the DOM\u003c/h2\u003e  \u003cp\u003eWe know how to add elements and change their attributes. What if we want to remove an element from a page?\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eremoveChild()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eWe use \u003ccode\u003eremoveChild()\u003c/code\u003e, as you might guess, to remove a particular child of an element:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003esomeElement.removeChild(someChildElement); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's take a look at a more complex example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst ul = document.getElementsByTagName('ul')[0];\u003cbr\u003eul.removeChild(ul.querySelector('li:nth-child(2)')); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere you can see the power of \u003ccode\u003equerySelector()\u003c/code\u003e: we can use it to find the second \u003ccode\u003eli\u003c/code\u003e element of \u003ccode\u003eul\u003c/code\u003e. We then pass that element as the argument to our \u003ccode\u003eremoveChild\u003c/code\u003e method, which removes the element from our \u003ccode\u003eul\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhat if we want to remove the whole unordered list (\u003ccode\u003eul\u003c/code\u003e)?\u003c/p\u003e  \u003ch3\u003e\u003ccode\u003eelement.remove()\u003c/code\u003e\u003c/h3\u003e  \u003cp\u003eWe can just call \u003ccode\u003eremove()\u003c/code\u003e on the element itself:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eul.remove(); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd it's gone!\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eFrom this point forward, many of the labs will work a little differently from ones you've done before. Specifically, the tests will mock the process of 1) running JavaScript code in the browser and 2) seeing the results of that code represented in the DOM. Take a look at \u003ccode\u003etest/indexTest.js\u003c/code\u003e to see the tests' descriptions of the changes your code should be making to the DOM elements.\u003c/p\u003e  \u003cp\u003eNote that you do not need to create functions for this lab. Just create the line or lines of JavaScript necessary to pass each test. As usual, you will write your code in the \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\"\u003edocument.createElement()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild\"\u003eappendChild()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild\"\u003eremoveChild()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove\"\u003eelement.remove()\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\"\u003eclassList Property\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge31b2690a9345f19751f6896997b5002","title":"CSS Fundamentals Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-fundamentals-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals-lab/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals-lab\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals-lab/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eLink an external CSS file\u003c/li\u003e\n    \u003cli\u003eWrite CSS rules to style HTML\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this lab, we will be adding style to our \u003ccode\u003eindex.html\u003c/code\u003e page by linking an external CSS file. If you open \u003ccode\u003eindex.html\u003c/code\u003e in the browser (by either opening the file with Google Chrome or running \u003ccode\u003ehttpserver\u003c/code\u003e on the Learn IDE), you will see basic HTML that has been provided. The website emulates a basic Real Estate website (the links on it have been disabled, we will be working with only the basic \u003ccode\u003eindex.html\u003c/code\u003e landing page).\u003c/p\u003e\n\u003cp\u003eAs you can see, our basic page is rather lackluster. This is where you come in! You will be adding CSS, using selectors, to jazz the page up. All of our CSS should be written in \u003ccode\u003estyle.css\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies. Run \u003ccode\u003erspec\u003c/code\u003e as you work through this assignment to see your progress.\u003c/p\u003e\n\u003ch2\u003eLink an External CSS File\u003c/h2\u003e\n\u003cp\u003eAs usual, we need to make sure our HTML is loading our style sheet.\u003c/p\u003e\n\u003cp\u003eWe have two options:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eWrite CSS rules inside of a \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag (\"internal CSS\"), which tells HTML \"Hey, I want to define some CSS styling here\"\u003c/li\u003e\n    \u003cli\u003eWrite CSS rules in an external file that is specified with the \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag (\"external CSS\").\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn our case, we want to provide a link to our style sheet, instead of writing all of our CSS code directly in the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag. This allows us to only have to write styles for the entire site once, instead of repeating every \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e element on every page. A common workflow is to see developers work on CSS inside of the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag until their styling is done. At that point, they move it to their external file and remove the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e element from the HTML page. Feel free to try it out!\u003c/p\u003e\n\u003cp\u003eIn \u003ccode\u003eindex.html\u003c/code\u003e, provide a \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag which correctly sources the CSS file located in this directory. The \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag will link to our file with an \u003ccode\u003ehref\u003c/code\u003e attribute, like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;link rel=\"stylesheet\" href=\"relative path to CSS file\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLinks to style sheets should go at the end of the \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e section! Make sure you provide a \u003cem\u003erelative\u003c/em\u003e path to the style sheet.\u003c/p\u003e\n\u003cp\u003eNow, what is a relative path? You could write \u003ccode\u003ehref=\"style.css\"\u003c/code\u003e and the content of \u003ccode\u003estyle.css\u003c/code\u003e would change your \u003ccode\u003eindex.html\u003c/code\u003e file. But we want to teach you to require external resources (like CSS or JavaScript) by using \u003cem\u003erelative paths\u003c/em\u003e. Relative paths make it \u003cem\u003ecrystal clear\u003c/em\u003e which file is being used. Relative paths start with \u003ccode\u003e./\u003c/code\u003e which means \"from the directory I am currently in.\" So, when we use \u003ccode\u003elink\u003c/code\u003e to associate with a style sheet and we write \u003ccode\u003ehref=\"./style.css\"\u003c/code\u003e we're saying: \"From the directory in which I, the \u003ccode\u003eindex.html\u003c/code\u003e file live, look for a file called \u003ccode\u003estyle.css\u003c/code\u003e and use it.\" This pattern will help you and other developers remove any possible confusion.\u003c/p\u003e\n\u003cp\u003eHint: Try adding the following temporarily to your \u003ccode\u003estyle.css\u003c/code\u003e file to test if your linked CSS is working:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eh1 {\u003cbr\u003e  color: red;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you see your \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e change to red, you've linked your style sheet correctly! Don't forget to delete it once you have your link working.\u003c/p\u003e\n\u003ch2\u003eWrite CSS Rules to Style HTML\u003c/h2\u003e\n\u003cp\u003eFor this exercise, we are going to be transforming our base HTML into a more exciting version using CSS.\u003c/p\u003e\n\u003cp\u003eIt is important to note that there are \u003cem\u003emany\u003c/em\u003e ways to go about transforming the HTML with CSS to match the end product. For this lesson, we will provide you with general guidance in \u003cem\u003eone way\u003c/em\u003e of getting to the desired view by adding to the \u003ccode\u003estyle.css\u003c/code\u003e. Ultimately, the goal is to have your website look like the finished product whatever way works the best for you.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are having trouble finding the specific CSS property you need to get a specific visual outcome, use your Google skills with queries such as: \"CSS center text within div\".\u003c/p\u003e\n\u003cp\u003eIn following the guidelines, you should be referencing the \u003ccode\u003eindex.html\u003c/code\u003e to find the appropriate tags/IDs that we will use as selectors in our \u003ccode\u003estyle.css\u003c/code\u003e file. Don't forget: you can use the Chrome Inspector Tool (\u003ccode\u003ecmd + shift + C\u003c/code\u003e on Mac) to inspect specific elements of the DOM (and make trial changes to their CSS) in the browser.\u003c/p\u003e\n\u003ch3\u003eWhat We Have\u003c/h3\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-fundamentals-lab-incomplete.png\" alt=\"\"\u003e\n\u003c/p\u003e\n\u003ch3\u003eWhat We Want\u003c/h3\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-fundamentals-lab-complete.png\" alt=\"\"\u003e\n\u003c/p\u003e\n\u003ch3\u003eDeliverables\u003c/h3\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003cstrong\u003eUpdate the header\u003c/strong\u003e: the text is a little wonky being aligned on the left like that. Provide a property that aligns it in the center instead.\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003cstrong\u003eCenter our image\u003c/strong\u003e: We only have one image on the page and we would like it centered!\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003cstrong\u003eJazz up our navigation links\u003c/strong\u003e: Let's center all of our nav links as well. Give all of the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags within our navbar padding of 10px on their left and right sides. In addition, change their background color to something of your choosing. We chose grey!\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003cstrong\u003eOur image caption needs work\u003c/strong\u003e: Let's shrink that font size down and make sure it is centered.\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003cstrong\u003eUpdate the text block\u003c/strong\u003e: Wouldn't it look nicer if our text was centered as well? Our image is about 900px wide, so let's give all our \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003es within \u003ccode\u003e#featured-property\u003c/code\u003e a hard width of 800px and center the text in there. Be sure to keep a little vertical space around the \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003es.\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003cstrong\u003eMake our \u003ccode\u003e#details\u003c/code\u003e section horizontal\u003c/strong\u003e: The details section could go nicely as a footer to the page, instead of a vertical list. To do this, make each of the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003es \u003ccode\u003efloat\u003c/code\u003e to the \u003ccode\u003eleft\u003c/code\u003e.\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003e\u003cstrong\u003eAs a finishing touch\u003c/strong\u003e: Let's clean up the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003es at the bottom of the page. All of them should have the same background color, centered text, and occupy 25% of the \u003ccode\u003ewidth\u003c/code\u003e of the bottom row (since we have 4 divs).\u003c/p\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eCSS allows many avenues to the same goal. The important takeaway is to experiment and become familiar with the commonly used rules. This will enable you to identify what properties will get you to which end result the quickest.\u003c/p\u003e\n\u003cp\u003eYou will find that even years into your career as a front end developer, you will be referencing basic CSS documentation. \u003cem\u003eThis is to be expected!\u003c/em\u003e To be comfortable quickly finding the property/value you are looking for online is the most important skill set you can develop right now. Memorization is for machines, adaptation is for humans!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g353de24d0738dd8613dbec7173788d08","title":"CSS Graffiti Override Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-graffiti-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-graffiti-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-graffiti-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-graffiti-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUse the browser developer tools\u003c/li\u003e \u003cli\u003eOverride existing styles\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eImagine that you are walking down the street, and you notice that there's a mural that has been painted over with various graffiti tags. In reality, cleaning this up could be a challenging feat; however, in CSS, you have the power to manipulate the DOM with just a line or two of code and to restore the mural to its original look! In this lab, we've created a virtual wall. Using only CSS, how can you remove the unsightly tags?\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies. Run \u003ccode\u003erspec\u003c/code\u003e as you go to see your test progress.\u003c/p\u003e  \u003ch2\u003eUse the Browser Developer Tools\u003c/h2\u003e  \u003cp\u003eAssuming you have opened the index file in Chrome, open the \u003ca href=\"http://discover-devtools.codeschool.com/\"\u003edev tools\u003c/a\u003e. You can quickly access Chrome dev tools with the keyboard shortcut \u003ccode\u003eCmd+Option+i\u003c/code\u003e on a Mac, or by right/control-clicking anywhere in the window and selecting \u003ccode\u003einspect\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-graffiti-override/inspect1.png\" alt=\"Chrome Dev Tools\" title=\"Open the Chrome dev tools\"\u003e\u003c/p\u003e  \u003cp\u003eInspect the elements of the graffiti wall in the dev tools by hovering over and clicking on nested elements. Take a close look at what's made available to you in the dev tools pane. You can see which style sheets specific style declarations live in, as well as create new styles on the fly. Now, make note of the CSS styles used to add graffiti tags (as background images) to the wall.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-graffiti-override/inspect2.png\" alt=\"Chrome Dev Tools\" title=\"Inspect the styles on each element\"\u003e\u003c/p\u003e  \u003ch2\u003eOverride Existing Styles\u003c/h2\u003e  \u003cp\u003eIn the file \u003ccode\u003ecss/cleanup.css\u003c/code\u003e, write selectors that have more specificity (authority) than those that are showing the graffiti tags. You can test out writing classes in dev tools by clicking the \u003ccode\u003e+\u003c/code\u003e in the top right-hand corner of the pane. You can also click the \u003ccode\u003esources\u003c/code\u003e tab and select \u003ccode\u003ecss/cleanup.css\u003c/code\u003e in the dev tools pane. This allows you to edit the CSS file directly. It \u003cem\u003ewon't\u003c/em\u003e save your edits, but it will give a live update of changes so that it's easier to manipulate the DOM without refreshing the page. From there, you can copy and paste your working changes into the file.\u003c/p\u003e  \u003cp\u003eTo remove the tags, use the CSS declaration \u003ccode\u003edisplay:none;\u003c/code\u003e. It will change the elements' previous display property value from \u003ccode\u003edisplay: block\u003c/code\u003e to \u003ccode\u003edisplay: none\u003c/code\u003e, which will hide that graffiti.\u003c/p\u003e  \u003cp\u003eFor example, for \"tag-1\" the developer tools reveal that the style applying the graffiti here is:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e.tag-1 {\u003cbr\u003e  background: url(../images/tag-1.png) no-repeat;\u003cbr\u003e  z-index: 7;\u003cbr\u003e  display: block;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou'll need to override this by setting its display to \u003ccode\u003edisplay: none;\u003c/code\u003e instead. We can do this by writing a selector statement that is more specific such as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#wall .tag-1 {\u003cbr\u003e  display: none;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis selects elements with a class of \"tag-1\" that happen to also be inside an element with an id of \"wall\". This is more specific, and therefore will override the previous statement and hide the graffiti. For more info on how specificity in CSS works take a look at: \u003ca href=\"http://www.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/\"\u003eSmashing Magazines What You Need to Know About CSS Specificity\u003c/a\u003e.  You can also take advantage of a \u003ca href=\"https://specificity.keegan.st/\"\u003eSpecificity Calculator\u003c/a\u003e to assist with finding and understanding options for overriding styles.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eDo not use the CSS \u003ccode\u003e!important\u003c/code\u003e value\u003c/strong\u003e! It is considered a bad practice and should be used sparingly, in very specific edge-cases. For this lab, avoid adding inline or embedded CSS to the index.html file, or any additional class or id attributes to the index.html file either.  This will make it more challenging as you will have to write CSS that is more specific based on the existing markup.\u003c/p\u003e  \u003ch2\u003eMoving On\u003c/h2\u003e  \u003cp\u003eWhen you're ready to leave this lab, run \u003ccode\u003erspec\u003c/code\u003e from the command line to confirm you've passed all tests.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWith the dev tools and resources on CSS specificity rules, work your way through all seven graffiti pictures until the wall is fully clean. In your experimentation, you will find that there are many ways to manipulate and override the DOM. This will become a common practice as you build out more complex websites or work with cloud-hosted third-party resources where you may not have direct access to the style sheet.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"http://www.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/\"\u003eSmashing Magazine - CSS Specificity\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://css-tricks.com/specifics-on-css-specificity/\"\u003eCSS Tricks - CSS Specificity\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://specificity.keegan.st/\"\u003eSpecificity Calculator\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g071f80bb428586e2a33d59bcd64a1510","title":"CSS Kitten Wheelbarrow","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-kitten-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-kitten-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-kitten-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-kitten-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003ePosition elements absolutely\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eOh no! All of our kittens have escaped from the wheelbarrow and we need to get them back in. Help collect all the kittens and put them into the wheelbarrow using CSS selectors and absolute positioning. \u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003ePosition Elements Absolutely\u003c/h2\u003e  \u003cp\u003eThere are a few different ways we can use CSS to position elements in our web pages. \u003cem\u003eAbsolute\u003c/em\u003e positioning means placing the element in its containing element in a certain location that will stay the same no matter where other elements are placed.\u003c/p\u003e  \u003cp\u003eTo get started with this lab, open index.html in the browser. Use the comments in \u003cstrong\u003ecss/place-kitty.css\u003c/strong\u003e to write the correct selectors to move each kitty into the wheelbarrow.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eSometimes it takes a little bit of time to get used to how absolute positioning works, so don't worry if you have to practice. It will help you create more complex CSS layouts in the future.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning\"\u003eMozilla Developer Network: Positioning\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc7660eaf9a4ac8351f0b0e62bf65f155","title":"CSS Validation Lab: Issue Bot 9000","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"css-essentials-css-issue-bot-9000\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-css-issue-bot-9000/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-css-issue-bot-9000\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/css-essentials-css-issue-bot-9000/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eChange invalid CSS to valid CSS\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eAlthough today's browsers are becoming more capable of handing errors in CSS, some errors are not always caught gracefully. This variable can make it extremely difficult to apply style or layout consistently. What can be done to quickly scan our CSS documents for issues? Let's practice using the W3C's CSS Validator!\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies. Run \u003ccode\u003erspec\u003c/code\u003e to as you go to see your test progress.\u003c/p\u003e  \u003ch2\u003eChange Invalid CSS to Valid CSS\u003c/h2\u003e  \u003cp\u003eIn this lesson, we will be taking the invalid CSS in \u003ccode\u003ecss/style.css\u003c/code\u003e and changing it to valid.\u003c/p\u003e  \u003col\u003e \u003cli\u003eOpen index.html in your browser. Notice how our styles don't look quite right? \u003c/li\u003e \u003cli\u003eOpen css/style.css in your text editor.\u003c/li\u003e \u003cli\u003eVisit the W3C CSS validator \u003ca href=\"http://jigsaw.w3.org/css-validator/#validate_by_input\"\u003ehttp://jigsaw.w3.org/css-validator/#validate\u003cem\u003eby\u003c/em\u003einput\u003c/a\u003e. If not already selected, click on the tab labeled \"By direct input\".\u003c/li\u003e \u003cli\u003eCopy the code from css/style.css and paste it into the text area. Click the \"Check\" button.\u003c/li\u003e \u003cli\u003eUse the error messages to correct the CSS. \u003c/li\u003e \u003cli\u003eRepeat steps 3-5 until your readout states \"Congratulations! No Error Found.\".\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eRemember to check your progress in \u003ccode\u003eindex.html\u003c/code\u003e in your browser!\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWith a CSS validator, you can work your way through cleaning up errors in a CSS document and reduce the likelihood of display errors across platforms. Using the W3C CSS validator will help you quickly and efficiently troubleshoot your CSS.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cp\u003e\u003ca href=\"http://jigsaw.w3.org/css-validator/#validate_by_input\"\u003eW3C CSS Validator - Validate Direct Input\u003c/a\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g9fa896889d0094a940cb3e7287b098a9","title":"Document Structure Continued","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-document-structure-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-document-structure-lab/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-document-structure-lab\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-document-structure-lab/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eRecognize basic HTML document structure\u003c/li\u003e\n    \u003cli\u003eRecognize HTML comments\u003c/li\u003e\n    \u003cli\u003eDescribe the \u003ccode\u003ehead\u003c/code\u003e section and its contents\u003c/li\u003e\n    \u003cli\u003eCreate an HTML document\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eEvery HTML document has a specific set of required tags. Because these are required \u003cem\u003eevery\u003c/em\u003e time we create a web page, it is valuable to gain a more in-depth understanding of what these tags do, why they are useful, and how they work in context to the modern web.\u003c/p\u003e\n\u003cp\u003eWe will be both reviewing setting up well-formed HTML documents and expanding a bit on the \u003ccode\u003eDOCTYPE\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e and \u003ccode\u003ehead\u003c/code\u003e tags, as well as introducing how to add comments within our HTML code.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code (If you are using a different text editor, the command will be different). Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eRecognize Basic HTML Document Structure\u003c/h2\u003e\n\u003cp\u003eLet's start by adding the bare essentials of an HTML document to the provided \u003ccode\u003eindex.html\u003c/code\u003e file:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003eA \u003ccode\u003eDOCTYPE\u003c/code\u003e tag, which looks like this: \u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n    \u003cli\u003eOpening and closing \u003ccode\u003ehtml\u003c/code\u003e tags\u003c/li\u003e\n    \u003cli\u003eOpening and closing \u003ccode\u003ehead\u003c/code\u003e tags nested inside the \u003ccode\u003ehtml\u003c/code\u003e tags\u003c/li\u003e\n    \u003cli\u003eOpening and closing \u003ccode\u003ebody\u003c/code\u003e tags nested inside the \u003ccode\u003ehtml\u003c/code\u003e tags\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf written correctly, running \u003ccode\u003erspec\u003c/code\u003e now will pass the \u003cstrong\u003efirst\u003c/strong\u003e test of this lab. \u003cstrong\u003eHowever\u003c/strong\u003e you will not be done yet! We have to make \u003cstrong\u003eall\u003c/strong\u003e the tests pass in order to make the test code happy! Fixing this first one means that we get to attack the next one. Let's get to it!\u003c/p\u003e\n\u003cp\u003eLet's take a closer look at these tags.\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eAt the top of every HTML document, you're always going to start off with the same element, \u003ccode\u003eDOCTYPE\u003c/code\u003e. In the early days of the internet, there were fewer standards, and it was important to declare the specific way we wanted browsers to interpret the file at the top of each file. Netscape and Internet Explorer would look for this declaration and handle the content differently depending on what it found. These days, every current browser is compatible with HTML5, and \u003ccode\u003eDOCTYPE\u003c/code\u003e is mainly used to tell the browser to render the page in standards compliant mode.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eDOCTYPE\u003c/code\u003e element, as with all HTML, starts with a \u003ccode\u003e\u0026lt;\u003c/code\u003e and ends with a \u003ccode\u003e\u0026gt;\u003c/code\u003e. Uniquely, the \u003ccode\u003eDOCTYPE\u003c/code\u003e tag starts with an exclamation point, \u003ccode\u003e!\u003c/code\u003e, followed by \u003ccode\u003eDOCTYPE\u003c/code\u003e, then specifies which version of HTML we want to use. In HTML5, we just write \u003ccode\u003ehtml\u003c/code\u003e and the browser interprets the rest of the document as HTML5.\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe next element is also always required: \u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e. This tells the browser that everything that falls between the opening and closing \u003ccode\u003ehtml\u003c/code\u003e tags is to be interpreted as HTML code.\u003c/p\u003e\n\u003cp\u003eOne attribute that is important to include in the \u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e tag is \u003ccode\u003elang\u003c/code\u003e, which declares what language the webpage is written in. In our case, writing in English, we will use \u003ccode\u003elang=\"en\"\u003c/code\u003e. This helps search engines to know what language a page is written in. Google, for instance, can use the \u003ccode\u003elang\u003c/code\u003e attribute to know when to prompt uses about translating web content.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;html lang=\"en\"\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eRecognize HTML Comments\u003c/h2\u003e\n\u003cp\u003eSometimes we want to leave notes either for ourselves or for other developers inside of our HTML files. An example might be a brief explanation of what some part of the code is doing, or an important message or reminder. We can write comments by wrapping the text we want like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- This is a comment! --\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eText included in a comment will not be visible on the webpage, but will be visible in the browser console and \u003ccode\u003e.html\u003c/code\u003e file.\u003c/p\u003e\n\u003ch2\u003eDescribe the \u003ccode\u003ehead\u003c/code\u003e Section and its Contents\u003c/h2\u003e\n\u003cp\u003eInside our \u003ccode\u003ehtml\u003c/code\u003e tags, we divide the page into two main sections, \u003ccode\u003ehead\u003c/code\u003e, and \u003ccode\u003ebody\u003c/code\u003e, which both play unique roles. The remainder of our HTML lessons will cover everything within the \u003ccode\u003ebody\u003c/code\u003e section, but before we get there, there are some additional bits of information we need to understand regarding the \u003ccode\u003ehead\u003c/code\u003e. The \u003ccode\u003ehead\u003c/code\u003e section is not visible to a website visitor, but it contains a lot of useful info about our webpage.\u003c/p\u003e\n\u003cp\u003eIn the \u003ccode\u003ehead\u003c/code\u003e section, we place a number of specific tags, most notably:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLet's look at each of them in turn:\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003elink\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag is for importing files.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCAREFUL\u003c/strong\u003e: It's easy to get confused here because web pages are full of links, but also use a \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag. \"Links\" that you click on are located within the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e element. The \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tags are located in the \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\u003cp\u003eMost commonly, we'll use \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e to import CSS files. Like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLinking style sheets this way allows multi-page websites to share a source of styling content for every page, making for a consistent, easy to maintain file structure. Often, on fully developed websites, multiple style sheets are linked in the \u003ccode\u003ehead\u003c/code\u003e. For example, when doing the final polishing of a web site you might see a series of \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e definitions like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u0026gt;\u003cbr\u003e\u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"company.css\"\u0026gt;\u003cbr\u003e\u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"engineering-department.css\"\u0026gt;\u003cbr\u003e\u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"project-x-launch.css\"\u0026gt;\u003cbr\u003e\u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"typography.css\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example we're getting some CSS information from the \u003ca href=\"https://getbootstrap.com/\"\u003eBootstrap\u003c/a\u003e project, we're integrating a company style standard, an engineering style standard, a style motif for the launch of \"Project X\" and then we're adding some specific rules about font display. You can bring in a \u003cstrong\u003elot\u003c/strong\u003e of information with the \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag!\u003c/p\u003e\n\u003cp\u003eThis specific example aside, you'll be learning a lot more about linking files to create stylistic effect in later lessons.\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003etitle\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eOne more common tag we find in the \u003ccode\u003ehead\u003c/code\u003e is \u003ccode\u003etitle\u003c/code\u003e. The \u003ccode\u003etitle\u003c/code\u003e, as its name implies, is where the title of the webpage should be entered. Text added inside the \u003ccode\u003etitle\u003c/code\u003e tags will appear up on your browser tab. Adding a title for our \u003ccode\u003eindex.html\u003c/code\u003e page would look something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;title\u0026gt;Cat Perry's Favorite Cats\u0026lt;/title\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that unlike the previous tags we've discussed, \u003ccode\u003etitle\u003c/code\u003e has an opening and closing tag. In most modern browsers, tabs are fairly small, so it is often best to keep the title brief, or it will not be fully visible.\u003c/p\u003e\n\u003ch2\u003eCreate an HTML Document\u003c/h2\u003e\n\u003cp\u003eOkay, time to put what we've learned to the test. To complete this lab, you must apply all the tags we've discussed in this lesson. Run \u003ccode\u003erspec\u003c/code\u003e to see what is required to pass each test. Each test will urge you on.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn this lesson, we've reviewed the basics of document structure, as well as what is typically contained within the \u003ccode\u003ehead\u003c/code\u003e. Using the \u003ccode\u003ehead\u003c/code\u003e section, we are able to add relevant data about our webpage as a whole. As a bonus surprise, by learning how to make our web pages \u003cem\u003esearch engine friendly\u003c/em\u003e, we've also dabbled a bit into the basics of Search Engine Optimization! We are now ready to take a deeper dive into the visual content of HTML pages.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g2c641a4ff71ec694fc16158be8b93242","title":"DOM Editing Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-editing-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eIdentify that DOM nodes are written as HTML\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eWe've started looking at the DOM and how it's created. Now it's time to see its structure.\u003c/p\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eIdentify That DOM Nodes Are Written As HTML\u003c/h2\u003e\n\u003cp\u003eIn the previous lesson, we learned that, when we load a web page in a browser, the content we see in the DOM is a representation of the underlying HTML, CSS and JavaScript. If we were to view the DOM in Chrome Dev Tools (we'll learn how to do that shortly), we would see HTML that is a clone of the HTML found in the source HTML file. As we learned earlier in the course, that HTML consists of \u003cem\u003eelements\u003c/em\u003e that in turn consist of HTML \u003cem\u003etags\u003c/em\u003e and their content.\u003c/p\u003e\n\u003cp\u003eWhen we're working in the DOM, the structure is the same. We can access objects in the DOM (called \u003cem\u003enodes\u003c/em\u003e) that consist of tags, just like the HTML elements that make up the base HTML. Nodes and elements are not the same thing — all elements in the DOM are nodes but not all nodes are HTML elements. However, when we're working in the DOM, the nodes we access and modify are virtually always HTML elements.\u003c/p\u003e\n\u003ch3\u003eThe Structure of DOM Content\u003c/h3\u003e\n\u003cp\u003eWe'll start by going over how content in the DOM is structured using nodes. The information below should be familiar from what you've learned about HTML elements.\u003c/p\u003e\n\u003cp\u003eDOM nodes most often have a starting tag and an ending tag. Examples include a paragraph:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;I am a paragraph.\u0026lt;/p\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eor a \u003ccode\u003emain\u003c/code\u003e section:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;main\u0026gt;\u003cbr\u003e\u0026lt;/main\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause they have both starting and ending tags, we can nest other nodes inside them. The inner node is called a child node, and the outer node is called a parent node. To nest items, we simply add the child node and its content between its parent's starting and ending tags:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;main\u0026gt;\u003cbr\u003e    \u0026lt;p\u0026gt;I am a nested paragraph, inside the main element, inside the body!\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;/main\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSome nodes only have a starting tag. Those are called \u003cem\u003eself-closing elements\u003c/em\u003e or \u003cem\u003evoid elements\u003c/em\u003e. Void elements do not have any content nested inside of them and cannot be parent nodes.\u003c/p\u003e\n\u003cp\u003eAn example of a self-closing tag is an image:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\" alt=\"A policeman\"\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn self-closing tags, the trailing \u003ccode\u003e/\u003c/code\u003e is optional. This is valid too:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\" alt=\"A policeman\" /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEnough review, let's write some HTML!\u003c/p\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eStart by running the tests and taking a look through the errors. You'll see that the tests are looking for certain content to be present in the HTML file.\u003c/p\u003e\n\u003cp\u003eNext, open the \u003ccode\u003eindex.html\u003c/code\u003e file in the browser using the instructions in the previous lesson for your development environment.\u003c/p\u003e\n\u003cp\u003eJust to speed things up a bit, paste the following code into \u003ccode\u003eindex.html\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html lang=\"en\"\u0026gt;\u003cbr\u003e  \u0026lt;head\u0026gt;\u003cbr\u003e    \u0026lt;meta charset=\"UTF-8\"\u0026gt;\u003cbr\u003e    \u0026lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u0026gt;\u003cbr\u003e    \u0026lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"\u0026gt;\u003cbr\u003e    \u0026lt;title\u0026gt;Introduction to the DOM Lab\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;/head\u0026gt;\u003cbr\u003e  \u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;!--All our work for this lesson will go here--\u0026gt;\u003cbr\u003e  \u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRefresh the browser page to see the changes.\u003c/p\u003e\n\u003cp\u003eOpen the Google Developer Tools by clicking on the \"View\" menu and selecting Developer -\u0026gt; Developer Tools. The Elements tab should be selected but, if it isn't, click on it. Here we have the DOM representation of the HTML source loaded by the browser. You should see the \u003ccode\u003ehead\u003c/code\u003e and \u003ccode\u003ebody\u003c/code\u003e elements nested inside the \u003ccode\u003ehtml\u003c/code\u003e element. If the \u003ccode\u003ebody\u003c/code\u003e element is collapsed, use the disclosure triangle to expand it. You should see that the \u003ccode\u003ebody\u003c/code\u003e element is, temporarily, child-less. Let's go ahead and start adding some content in \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cblockquote\u003eNote: the \u003cem\u003edisclosure triangle\u003c/em\u003e is the triangle to the left of the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e tag. When you first open the Elements tab, the nodes are generally collapsed, hiding their contents. You can click the triangle to expand the node and see its contents. Disclosure triangles are standard for hiding information throughout Chrome DevTools. If you want to see more, feel free to click on the triangle! You're not going to break anything.\u003c/blockquote\u003e\n\u003cp\u003eFirst, let's add a title to our page:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;My HTML adventure\u0026lt;/h1\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRefresh the page to see the changes displayed in the browser. If you view the Elements tab again, you should see that a new child node is nested inside the \u003ccode\u003ebody\u003c/code\u003e. Finally, run the tests again; the first test should now be passing.\u003c/p\u003e\n\u003cp\u003eNext, we'll add a paragraph below the title. We'll also add some highlighted bits of text to the paragraph to make it stand out a little.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;\u003cbr\u003e  We're writing HTML markup to display in our \u0026lt;strong\u0026gt;browser\u0026lt;/strong\u0026gt;.\u003cbr\u003e  We're basically telling computers what to do. \u0026lt;em\u0026gt;Neat!\u0026lt;/em\u0026gt;\u003cbr\u003e\u0026lt;/p\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSave the file and check out the page in the 'Elements' tab. What's happening above is that we added some inline elements, \u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e to our paragraph to style things a little. The \u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e tag makes any text within look \u003cstrong\u003eimportant\u003c/strong\u003e. It's usually bold in browsers by default. The \u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e tag allows us to \u003cem\u003eemphasize\u003c/em\u003e certain text. This text is typically rendered as italic in browsers.\u003c/p\u003e\n\u003cp\u003eRun the tests again; you should now have all but two of the tests passing.\u003c/p\u003e\n\u003cp\u003eLet's add a link to MDN to define HTML. We'll use the\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag for this. Add this to our existing \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWe're writing \u0026lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\"\u0026gt;HTML\u0026lt;/a\u0026gt; markup to display in our \u0026lt;strong\u0026gt;browser\u0026lt;/strong\u0026gt;.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that HTML attributes (in this case, the \u003ccode\u003ehref\u003c/code\u003e attribute) are shown alongside their opening tag.\u003c/p\u003e\n\u003cp\u003eLastly, we'll add a table below the paragraph to recap some of the stuff in this lesson:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u003cbr\u003e  \u0026lt;thead\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;th\u0026gt;Element name\u0026lt;/th\u0026gt;\u003cbr\u003e      \u0026lt;th\u0026gt;Display value\u0026lt;/th\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;/thead\u0026gt;\u003cbr\u003e  \u0026lt;tbody\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;h1\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;block\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;p\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;block\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;strong\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;inline\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e    \u0026lt;tr\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;em\u0026lt;/td\u0026gt;\u003cbr\u003e      \u0026lt;td\u0026gt;inline\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;/tbody\u0026gt;\u003cbr\u003e\u0026lt;/table\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWoah. That's a \u003cstrong\u003elot\u003c/strong\u003e of markup! If you take a look at the result, though, you'll see that it's a fairly complex visual — it's a table! Our table consists of a header and a body. The header allows us to give the columns a name, and the table body contains the rows of content. Both \u003ccode\u003e\u0026lt;thead\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;tbody\u0026gt;\u003c/code\u003e tags contains rows, which are represented as \u003ccode\u003e\u0026lt;tr\u0026gt;\u003c/code\u003e (table row). These rows then contain cells which form the table's columns. In the \u003ccode\u003e\u0026lt;thead\u0026gt;\u003c/code\u003e row, cells are represented as \u003ccode\u003e\u0026lt;th\u0026gt;\u003c/code\u003e, while cells in \u003ccode\u003e\u0026lt;tbody\u0026gt;\u003c/code\u003e have their content in \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e tags.\u003c/p\u003e\n\u003cp\u003eThat's a \u003cem\u003elot\u003c/em\u003e of nesting.\u003c/p\u003e\n\u003cp\u003eLook again at the Elements tab. Expand out all the children of the \u003ccode\u003etable\u003c/code\u003e. This is the DOM tree!\u003c/p\u003e\n\u003cp\u003eWhen you're done, go ahead and run the tests. They should now all be passing.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc3f7b0e63ee02e1114ac2c6d93ec85fe","title":"Experiencing HTML Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-experiencing-html-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-experiencing-html-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-experiencing-html-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-experiencing-html-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate an ordered HTML list\u003c/li\u003e \u003cli\u003eCreate an unordered HTML list\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eHow do we go about writing text for the web? How is that different from the text that we write in a text file?  We're going to experience for ourselves how these things are different in this lab.\u003c/p\u003e  \u003cp\u003eYou don't need any prior knowledge of HTML for this lab. We're going to tell you what to type. Don't focus on specific commands or taking notes. Everything will be covered thoroughly later. Instead, the goal of this exercise is to feel the joy of editing a file and seeing the change \"out there.\"\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e We don't expect you to know \u003cem\u003emarkup\u003c/em\u003e, \u003cem\u003econtent\u003c/em\u003e, \u003cem\u003esource text\u003c/em\u003e, or \u003cem\u003erendered text\u003c/em\u003e yet. We'll be defining them in this lab.\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eIf you haven't already, fork and clone this lesson into your local environment.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eQuick Review:\u003c/strong\u003e To fork this lab:\u003c/p\u003e  \u003col\u003e \u003cli\u003eclick the \u003cstrong\u003eFork\u003c/strong\u003e icon in the upper right of this page. This will bring you to GitHub. You may be prompted to choose where to fork — choose your personal GitHub account.\u003c/li\u003e \u003cli\u003eOnce your fork is created, click the \u003cstrong\u003eCode\u003c/strong\u003e button in GitHub, choose \u003cstrong\u003eSSH\u003c/strong\u003e and copy the provided git URL info.\u003c/li\u003e \u003cli\u003eClone to your local machine with \u003ccode\u003egit clone\u003c/code\u003e followed by the git URL you copied. This will create a folder in the location you're currently in containing your fork of this lab's repository.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003ccode\u003ecd\u003c/code\u003e into the repository that you just cloned down in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. (If you are using a different text editor, the command will be different. For the AWS Cloud9 IDE, for example, you must click on the file in the left navigation to open it.) Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e This lab's test uses Ruby, so the commands we'll use are different than what you've seen before — \u003ccode\u003enpm install\u003c/code\u003e and \u003ccode\u003enpm test\u003c/code\u003e. Here, we use \u003ccode\u003ebundle\u003c/code\u003e and \u003ccode\u003erspec\u003c/code\u003e to do the same things.\u003c/p\u003e  \u003ch2\u003eCreate an Ordered HTML List\u003c/h2\u003e  \u003cp\u003eThink of a collection of things united by theme: Pokémon, Old-school MC's, Prime Ministers of New Zealand, Magical Beasts and Where to Find Them, etc. We're going to walk through how to create a list of these things marked up with HTML.\u003c/p\u003e  \u003ch3\u003eCreate a Text File with Content\u003c/h3\u003e  \u003cp\u003eIn your terminal, while still inside of this labs directory,  create a new file called \u003ccode\u003emy_list.txt\u003c/code\u003e by running \u003ccode\u003etouch my_list.txt\u003c/code\u003e.  The file extension suggests to humans and operating systems that it contains text. Open the file in VS Code by typing \u003ccode\u003ecode my_list.txt\u003c/code\u003e; you will do all editing for this lesson in VS Code.\u003c/p\u003e  \u003cp\u003eRemember your collection of things? Now write in a few of them in your file. Here's an example from us (songs in the English post-punk genre).\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\"Love Will Tear Us Apart\"\u003cbr\u003e\"Bela Lugosi's Dead\"\u003cbr\u003e\"A Forest\"\u003cbr\u003e\"Nine While Nine\"\u003cbr\u003e\"Girlfriend In a Coma\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe material we typed into the file is called the \u003cem\u003econtent\u003c/em\u003e. It's the thing we're trying to communicate.\u003c/p\u003e  \u003ch3\u003eContent as a List in a Text File\u003c/h3\u003e  \u003cp\u003eA problem with our \u003cem\u003econtent\u003c/em\u003e is that it doesn't explicitly state anywhere that it's a list. In the example, we see a list of songs. But a browser doesn't know what a \"list\" is.\u003c/p\u003e  \u003cp\u003eWe need to help the browser \u003cstrong\u003eknow\u003c/strong\u003e  what a list is. The secret is to add \"notes\" or \"breadcrumbs\" to the content that tell the browser that it has list items and that these items \"go together\" in a list. To add these \"notes\" we surround the \u003cem\u003econtent\u003c/em\u003e with bits of \u003cem\u003emarkup\u003c/em\u003e, with bits of HTML.\u003c/p\u003e  \u003cp\u003eWe will take the text content from our text file, paste it into a new HTML file and then we will add \u003cem\u003emarkup\u003c/em\u003e so that a browser \"sees\" a list. Let's write an HTML file!\u003c/p\u003e  \u003ch3\u003eText Inside an HTML File\u003c/h3\u003e  \u003cp\u003eNow we're going to create an HTML list together.\u003c/p\u003e  \u003col\u003e \u003cli\u003eCreate a new file called \u003ccode\u003emy_list.html\u003c/code\u003e. You can either do this in the terminal and then open it in VS Code, or create the file directly in VS Code.\u003c/li\u003e \u003cli\u003eCopy the contents of \u003ccode\u003emy_list.txt\u003c/code\u003e and paste them into \u003ccode\u003emy_list.html\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eSave the \u003ccode\u003emy_list.html\u003c/code\u003e file\u003c/li\u003e \u003cli\u003eOpen the \u003ccode\u003emy_list.html\u003c/code\u003e file in the browser. For Mac users, you can do this with \u003ccode\u003eopen my_list.html\u003c/code\u003e. For Windows users, you can do this in your Ubuntu app with \u003ccode\u003eexplorer.exe my_list.html\u003c/code\u003e. Make sure you've \u003ca href=\"https://support.google.com/chrome/answer/95417?co=GENIE.Platform%3DDesktop\u0026amp;hl=en\"\u003eset Chrome as your default browser\u003c/a\u003e.\u003c/li\u003e \u003cli\u003eHit enter to run the command\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are using the AWS Cloud9 IDE, the process for opening HTML files is slightly different. In the lefthand file navigation, right click \u003ccode\u003emy_list.html\u003c/code\u003e (command + click for Mac users). In the context menu that appears, click the \u003cstrong\u003ePreview\u003c/strong\u003e option:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/aws-preview-menu-option.png\" alt=\"aws preview\"\u003e\u003c/p\u003e  \u003cp\u003eThis will open the HTML page as a new tab in the IDE. You can also open this preview tab as a separate browser tab by clicking the 'pop out' button in the upper right corner of the tab\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/environment-setup/aws-pop-out-button.png\" alt=\"pop out button\"\u003e\u003c/p\u003e  \u003cp\u003eOnce you've opened the file in the browser, you should see:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/intro-the-shell/non_marked_up_list.png\" alt=\"HTML file with non-marked-up content displays on one line\"\u003e\u003c/p\u003e  \u003cp\u003eAs noted above, the browser doesn't know that items on new lines means \"items in a list.\" Browsers ignore when HTML is split onto new lines. We cover why a little later in this README. Since the browser doesn't know we intend this to be a list \u003cstrong\u003eand\u003c/strong\u003e since browsers ignore when \u003cem\u003econtent\u003c/em\u003e is split onto different lines, it displays all the \u003cem\u003econtent\u003c/em\u003e on one line. Not what we wanted.\u003c/p\u003e  \u003ch3\u003eA Text Not-Really-A-List Into a Real-HTML-List\u003c/h3\u003e  \u003cp\u003e\u003cstrong\u003eREMEMBER\u003c/strong\u003e: This lab will provide you what to type. Subsequent labs will deeply examine details of HTML markup. However, our goal here is to show how slight changes to markup can quickly alter the browser's display of content. If you're fuzzy on a detail that's fine.\u003c/p\u003e  \u003ch4\u003eMarking-Up List Items\u003c/h4\u003e  \u003cp\u003eOK, we've reached the critical moment. We're going to tell the browser that these bits of letters represent \u003cstrong\u003elist items\u003c/strong\u003e. To do so we \"wrap\" each line with \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;/li\u0026gt;\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;li\u0026gt;\"Love Will Tear Us Apart\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;li\u0026gt;\"Bela Lugosi's Dead\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;li\u0026gt;\"A Forest\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;li\u0026gt;\"Nine While Nine\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;li\u0026gt;\"Girlfriend In a Coma\"\u0026lt;/li\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFlip back to the \u003cstrong\u003eviewing tab\u003c/strong\u003e and refresh the page. You should see something like the following:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/experiencing-html-lab/ul_song_list.png\" alt=\"Songlist\"\u003e\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eAWESOME\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eIn this step we added some HTML \u003cem\u003emarkup\u003c/em\u003e:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThe \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e is an HTML \u003cstrong\u003elist item\u003c/strong\u003e \u003cem\u003eopening tag\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eThe \u003ccode\u003e\u0026lt;/li\u0026gt;\u003c/code\u003e is an HTML \u003cem\u003eclosing tag\u003c/em\u003e\n\u003c/li\u003e \u003cli\u003eWe would call this pair of opening and closing tags a \"\u003ccode\u003eli\u003c/code\u003e tag\"\u003c/li\u003e \u003cli\u003eThe whole length of text of \u003cem\u003eopening markup\u003c/em\u003e plus \"wrapped\" content plus \u003cem\u003eclosing markup\u003c/em\u003e (\u003ccode\u003e\u0026lt;li\u0026gt;...content...\u0026lt;/li\u0026gt;\u003c/code\u003e) is called \"an HTML element;\" or, more exactly, an \u003ccode\u003eli element\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAgain, you don't need to memorize these terms yet, but we want to help you develop an intuition for how these words are used. You will be using these terms when speaking with other developers and HTML authors.\u003c/p\u003e  \u003cp\u003eIt may not seem like we did much work, but the idea of a method for \"marking up\" \u003cem\u003econtent\u003c/em\u003e and linking it is the foundation of the web. It's what made Tim Berners-Lee's reputation. And \u003cstrong\u003eyou\u003c/strong\u003e just experienced Sir Tim's great insight. \u003cstrong\u003eAWESOME\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eLet's work with additional HTML tags to see how we tweak our HTML a bit more. Let's tell the browser \"Hey! These list items, they go together!\"\u003c/p\u003e  \u003ch3\u003eIndicating that List Items Are Connected\u003c/h3\u003e  \u003cp\u003eWrap the entire set of \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e items with an \u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;/ol\u0026gt;\u003c/code\u003e like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u003cbr\u003e   \u0026lt;li\u0026gt;\"Love Will Tear Us Apart\"\u0026lt;/li\u0026gt;\u003cbr\u003e   \u0026lt;li\u0026gt;\"Bela Lugosi's Dead\"\u0026lt;/li\u0026gt;\u003cbr\u003e   \u0026lt;li\u0026gt;\"A Forest\"\u0026lt;/li\u0026gt;\u003cbr\u003e   \u0026lt;li\u0026gt;\"Nine While Nine\"\u0026lt;/li\u0026gt;\u003cbr\u003e   \u0026lt;li\u0026gt;\"Girlfriend In a Coma\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ol\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSave the file and refresh the \u003cstrong\u003eviewing tab\u003c/strong\u003e. It should display:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/experiencing-html-lab/ordered_list.png\" alt=\"List displayed as an ordered list\"\u003e\u003c/p\u003e  \u003cp\u003eWe told the browser that this set of list items that we \"wrapped\" in the \u003cstrong\u003eordered list\u003c/strong\u003e tag go together \u003cstrong\u003eas a list\u003c/strong\u003e. Because we told the browser that the list is \u003cstrong\u003eordered\u003c/strong\u003e it decided to be helpful and put numbers next to the list items \u003cem\u003efor us\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003eWrapping and Indentation\u003c/h3\u003e  \u003cp\u003eWith all these angle-brackets of \u003cem\u003emarkup\u003c/em\u003e and \u003cem\u003econtent\u003c/em\u003e mixed together, HTML authors like to use indentation to make HTML easier to read. Here's how most HTML authors would expect our code from the previous section to be arranged:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;ol\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Love Will Tear Us Apart\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Bela Lugosi's Dead\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"A Forest\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Nine While Nine\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Girlfriend In a Coma\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ol\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUpdate your document. Save it and refresh your \u003cstrong\u003eviewing tab\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eRemember earlier when the browser ignored that \u003cem\u003econtent\u003c/em\u003e was on separate lines? Cleaning up your code requires splitting lines, adding spaces, and adding tabs. Browsers ignore those characters that \u003cem\u003ehumans\u003c/em\u003e use to make their HTML reader-friendly.\u003c/p\u003e  \u003ch2\u003eCreate an Unordered HTML List\u003c/h2\u003e  \u003cp\u003eLet's change our ordered list to be \u003cstrong\u003eunordered\u003c/strong\u003e. If \u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e means \u003cstrong\u003eordered list\u003c/strong\u003e, you might guess that \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e means \u003cstrong\u003eunordered list\u003c/strong\u003e. Make the change and refresh your \u003cstrong\u003eviewing tab\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/experiencing-html-lab/unordered_list.png\" alt=\"Back to Unordered List\"\u003e\u003c/p\u003e  \u003cp\u003eHere we return to a \"bulleted\" unordered list.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: If you've been following along closely, you might be wondering, if we didn't have a \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e tag around our \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e items earlier, how did the browser know how treat those \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e as if they were in a \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e? When browsers detect problematic HTML they guess! This can lead to some very strange results when you make an error, but if you write \u003cem\u003einvalid\u003c/em\u003e HTML, they try to recover. HTML validity will be discussed further soon!\u003c/p\u003e  \u003ch3\u003eAdd a Description Paragraph\u003c/h3\u003e  \u003cp\u003eLet's introduce our list by adding some background:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;p\u0026gt;Some of my favorite post-punk and Goth songs!\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Love Will Tear Us Apart\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Bela Lugosi's Dead\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"A Forest\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Nine While Nine\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Girlfriend In a Coma\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTake a look at your \"rendered page\" and verify the result is to your liking.\u003c/p\u003e  \u003ch3\u003ePut a Header on It\u003c/h3\u003e  \u003cp\u003eLastly, let's put a \"heading\" on the top of our document. Add a \u003ccode\u003eh1\u003c/code\u003e element with an appropriate title inside.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;My Music List\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere's the full example code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;My Music List\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;Some of my favorite post-punk and Goth songs!\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Love Will Tear Us Apart\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Bela Lugosi's Dead\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"A Forest\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Nine While Nine\"\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\"Girlfriend In a Coma\"\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/experiencing-html-lab/final_header_paragraph_ul.png\" alt=\"Final Document\"\u003e\u003c/p\u003e  \u003cp\u003eWhen you're done, it is time to run this assignment's tests. Make sure that you have your HTML content in a file called \u003ccode\u003emy_list.html\u003c/code\u003e in order to pass the check. Type \u003ccode\u003erspec\u003c/code\u003e and verify that your tests pass.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lab, you have done the job of an HTML author. You receive raw \u003cem\u003econtent\u003c/em\u003e, you \u003cem\u003emark it up\u003c/em\u003e to create \u003cem\u003esource text\u003c/em\u003e. You test, tweak and adjust your \u003cem\u003esource text\u003c/em\u003e until the \u003cem\u003erendered text\u003c/em\u003e displayed in the browser is to your liking. \u003c/p\u003e  \u003cp\u003eIn upcoming lessons, we will learn additional tags which provide us more ways to describe our content. We might be starting with lists today, but soon we'll be using HTML in even more exciting ways!\u003c/p\u003e  \u003cp\u003eWelcome to the community of web page creators!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g7d517e7b0c46de96ee52b10d468ef9ff","title":"Git Basics Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"git-basics-lab-phase-0\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/git-basics-lab-phase-0/fork\" target=\"_blank\"\u003e \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e \u003c/a\u003e \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-basics-lab-phase-0\" target=\"_blank\"\u003e \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e \u003c/a\u003e \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/git-basics-lab-phase-0/issues/new\" target=\"_blank\"\u003e \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e \u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eUnderstand how to complete assignments\u003c/li\u003e\n\u003cli\u003eApply what you've learned about Git version control\u003c/li\u003e\n\u003cli\u003eInitialize a new Git repository\u003c/li\u003e\n\u003cli\u003eStage and commit new content\u003c/li\u003e\n\u003cli\u003eCreate a remote repository on GitHub\u003c/li\u003e\n\u003cli\u003eConnect the newly created local repository with the remote on GitHub\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eSo far lessons have only contained written content on specific topics. All you needed to do was read through each lesson and continue on. This lesson, however, is considered an \u003cem\u003eassignment\u003c/em\u003e. Assignments are exercises that have some written content to guide you, but also ask you to complete some work of your own. Many assignments, like this one, include \u003cem\u003etests\u003c/em\u003e that must be passed in order to complete the lesson. Assignments with tests are often referred to as a \u003cem\u003elabs\u003c/em\u003e in our course.\u003c/p\u003e\n\u003cp\u003eNow that you've learned about Git version control, in this \u003cem\u003elab\u003c/em\u003e, we're going to go through the entire process of creating a local Git repository, creating an initial commit and pushing that work to a remote repo stored on \u003ca href=\"https://github.com/\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eTo start work on this lab, you will first need to fork this assignment and clone it to your local environment. Let's quickly review this process:\u003c/p\u003e\n\u003cp\u003e1) Click the \u003cstrong\u003eFork\u003c/strong\u003e button at the top of this page in Canvas.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fork-link.png\" alt=\"fork button\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e This buttton does the same thing as \u003ca href=\"https://guides.github.com/activities/forking/\"\u003eforking in GitHub\u003c/a\u003e (via the \u003cstrong\u003eOctocat\u003c/strong\u003e button). We recommend using the \u003cstrong\u003eFork\u003c/strong\u003e button in Canvas.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e2) Choose to fork to your personal account if prompted. Once the forking process is complete, you should be looking at your personal copy of the assignment on GitHub.\u003c/p\u003e\n\u003cp\u003e3) Click \u003cstrong\u003eCode\u003c/strong\u003e, choose \u003cstrong\u003eSSH\u003c/strong\u003e, then click the \u003cem\u003eclipboard\u003c/em\u003e icon to copy the information we'll need about this repository.\u003c/p\u003e\n\u003cp\u003e4) In your terminal, type \u003ccode\u003egit clone\u003c/code\u003e, and paste the info you copied from GitHub. The command should look something like this (but with your personal account name):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit clone git@github.com:\u0026lt;your-github-username\u0026gt;/git-basics-lab-phase-0.git\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e5) A folder will be created wherever you run this command. The folder name will be the same as the repository, so in this case, \u003ccode\u003egit-basics-lab-phase-0\u003c/code\u003e. Navigate into this folder with \u003ccode\u003ecd git-basics-lab-phase-0\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOnce inside the folder, you are ready to work on the lab.\u003c/p\u003e\n\u003ch2\u003eSolving this Lab\u003c/h2\u003e\n\u003cp\u003eOnce you're in your local clone of this lab, the first step is to run the lab's tests to get a sense of what you need to do. We do this with two terminal commands. First, we run the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm install\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis sets up the tools we'll use for testing. To run the tests, type the following once you regain control of the command line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm test\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will run all the tests included for this lab. You should see a lot of output, enough that you may need to scroll up in your terminal to see it all. Six failed tests should print out, starting with this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethis lab\u003cbr\u003e  1) has a folder named my-repository\u003cbr\u003e  2) has a valid git repository initialized for the my-repository folder\u003cbr\u003e  3) has a README.md file in the my-repository folder\u003cbr\u003e\u003cbr\u003ethe local repository\u003cbr\u003e  4) has README.md as a tracked file\u003cbr\u003e  5) has at least one commit\u003cbr\u003e  6) has been pushed up to the remote repository\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e0 passing (42ms)\u003cbr\u003e6 failing\u003cbr\u003e\u003cbr\u003e1) this lab\u003cbr\u003e     has a folder named my-repository:\u003cbr\u003e   AssertionError: no folder name \"my-repository\" was found: value: expected './my-repository' to exist\u003cbr\u003e    at Function. (node_modules/chai-fs/lib/assertions/directory.js:21:53)\u003cbr\u003e    at Function.ctx.(anonymous function) [as directory] (node_modules/chai/lib/chai/utils/addMethod.js:41:25)\u003cbr\u003e    at Function.assert.isDirectory (node_modules/chai-fs/lib/assertions/directory.js:34:35)\u003cbr\u003e    at Context.it (test/index-test.js:11:19)\u003cbr\u003e    ...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEach failed test includes an explanation.\u003c/p\u003e\n\u003cp\u003eIn the first test seen above, for instance, it says \u003ccode\u003ethis lab has a folder named\n        my-repository\u003c/code\u003e, followed by \u003ccode\u003eAssertionError: no folder name \"my-repository\" was\n        found\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis first test is looking specifically for a folder, \u003ccode\u003emy-repository\u003c/code\u003e, to exist inside this lab's main directory (or \"folder\"). You probably have a theory on how to correct that test after seeing that error! We're going to use these tests to let us know when we're all done.\u003c/p\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eIMPORTANT TIPS TO AVOID GETTING STUCK\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe work you will do to set up the Git repository will be done in the \u003ccode\u003emy-repository\u003c/code\u003e directory (after you create it ;)). If you're doing \u003ccode\u003egit\u003c/code\u003e commands in the same directory as THIS \u003ccode\u003eREADME\u003c/code\u003e that you're reading right now, you're not going to get to working tests.\u003c/li\u003e\n\u003cli\u003eWhen you run the tests, you will need to be in the top-level directory of this lab, (\u003ccode\u003egit-basics-lab-phase-0\u003c/code\u003e, the directory with the \u003ccode\u003eREADME\u003c/code\u003e you're reading right now in it).\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFollow the steps provided below carefully to help ensure you are doing things in the right location.\u003c/p\u003e\n\u003ch3\u003eSteps\u003c/h3\u003e\n\u003cp\u003eAs we saw above, there are \u003cstrong\u003esix\u003c/strong\u003e broken tests. Let's get them working.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eCreate a new directory locally named \u003ccode\u003emy-repository\u003c/code\u003e. This directory should be side by side with the \u003ccode\u003etest\u003c/code\u003e directory of this lab. Use the Unix command to create this directory. From the top-level of this lab, the parent directory of \u003ccode\u003emy-repository\u003c/code\u003e, run \u003ccode\u003enpm test\u003c/code\u003e and verify there are only 5 broken tests left.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNavigate into the new directory \u003ccode\u003emy-repository\u003c/code\u003e using \u003ccode\u003ecd\u003c/code\u003e on the command line.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWhile inside \u003ccode\u003emy-repository\u003c/code\u003e, using the command line, initialize a new git repository. You'll know you've done it if you see 'Initialized empty Git repository in \u003cem\u003e\u0026lt;...your local directory\u0026gt;/my-repository/.git/'\u0026gt;\u003c/em\u003e. \u003cstrong\u003eChange \u003cem\u003eback-up\u003c/em\u003e to the parent directory\u003c/strong\u003e and you should be back in the top-level directory. Run \u003ccode\u003enpm test\u003c/code\u003e again and you should be down to \u003cstrong\u003efour tests\u003c/strong\u003e left. If that's true, \u003cstrong\u003echange \u003cem\u003eback\u003c/em\u003e into \u003ccode\u003emy-repository\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCreate a \u003cstrong\u003efile\u003c/strong\u003e (not a folder) called \u003ccode\u003eREADME.md\u003c/code\u003e inside \u003ccode\u003emy-repository\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you run \u003ccode\u003egit status\u003c/code\u003e at the command line, you should see that \u003ccode\u003eREADME.md\u003c/code\u003e is now listed as an untracked file. Add \u003ccode\u003eREADME.md\u003c/code\u003e so that it is tracked by Git.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce the file is tracked, running \u003ccode\u003egit status\u003c/code\u003e again will show that \u003ccode\u003eREADME.md\u003c/code\u003e is staged and ready to be committed. Go ahead and create a commit on the command line (don't forget to add \u003ccode\u003e-m\u003c/code\u003e when committing to include a message!).\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e If you forget to include \u003ccode\u003e-m\u003c/code\u003e when committing, you may find you've opened \u003cem\u003evi\u003c/em\u003e, the built in terminal text editor. To escape out of this editor, press the 'esc' key once, then type \u003ccode\u003e:q!\u003c/code\u003e to close the editor and return to the normal terminal.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eChange \u003cem\u003eback\u003c/em\u003e to the top-level directory\u003c/strong\u003e, run \u003ccode\u003enpm test\u003c/code\u003e, and you'll see that the test output is looking pretty successful:\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e  this lab\u003cbr\u003e    ✓ has a folder named my-repository\u003cbr\u003e    ✓ has a valid git repository initialized for the my-repository folder\u003cbr\u003e    ✓ has a README.md file in the my-repository folder\u003cbr\u003e\u003cbr\u003e  the local repository\u003cbr\u003e    ✓ has README.md as a tracked file\u003cbr\u003e    ✓ has at least one commit\u003cbr\u003e    1) has been pushed up to the remote repository\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  5 passing (18ms)\u003cbr\u003e  1 failing\u003cbr\u003e\u003cbr\u003e  1) the local repository\u003cbr\u003e       has been pushed up to the remote repository:\u003cbr\u003e     AssertionError: no record of pushing to a remote was found. Follow the instructions on GitHub to connect and push to a new remote repository: value: expected './my-repository/.git/logs/refs/remotes' to exist\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlmost done! \u003cstrong\u003eChange \u003cem\u003eback\u003c/em\u003e into the \u003ccode\u003emy-repository\u003c/code\u003e directory\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e8. Create a remote repository on \u003ca href=\"https://github.com/\"\u003eGitHub\u003c/a\u003e using your personal GitHub account and connect it to your newly created local repository.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/git-workflow/new-repo-menu.png\" alt=\"new repo\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/git-workflow/name-new-repo.png\" alt=\"name new repo\"\u003e\u003c/p\u003e\n\u003cp\u003eWhen we create a blank repository, we are given multiple options for how to get started. Since we have a local folder with Git initialized already, we'll use the instructions for creating a new repository using the command line.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/git-workflow/new-repo-commands.png\" alt=\"command line repo commands\"\u003e\u003c/p\u003e\n\u003cp\u003eIf you've been following along, you may notice that the first commands listed are things you've already done - \u003ccode\u003egit init\u003c/code\u003e initialized the \u003ccode\u003emy-repository\u003c/code\u003e directory as a local Git repository; \u003ccode\u003egit add README.md\u003c/code\u003e tracks the \u003ccode\u003eREADME.md\u003c/code\u003e file (you may have used \u003ccode\u003egit add .\u003c/code\u003e, which will work too); \u003ccode\u003egit commit -m \"first commit\"\u003c/code\u003e commits the newly created \u003ccode\u003eREADME.md\u003c/code\u003e file with a message.\u003c/p\u003e\n\u003cp\u003eThe remaining commands still need to be run. First we run the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   git branch -M main\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you recall from the version control basics lesson, going forward \u003ccode\u003emain\u003c/code\u003e will be used as the default name of the... main... branch in a repository. Depending on your environment you may still have a version of Git that defaults to \u003ccode\u003emaster\u003c/code\u003e. If this is the case, the above command will change this \u003ccode\u003emaster\u003c/code\u003e branch to \u003ccode\u003emain\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAfter setting the branch, we need to add the newly created GitHub repo as the remote for your local \u003ccode\u003emy-repository\u003c/code\u003e repo. This command will include info specific to your GitHub account and the name you gave your GitHub repo:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   git remote add origin git@github.com:\u0026lt;your-github-username\u0026gt;/\u0026lt;your-github-repository\u0026gt;.git\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e9. The last step listed pushes your local work up to the remote:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   git push -u origin main\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e10. \u003cstrong\u003eChange \u003cem\u003eback\u003c/em\u003e up to the top-level directory\u003c/strong\u003e and run \u003ccode\u003enpm test\u003c/code\u003e once more, your tests should all be passing.\u003c/p\u003e\n\u003cp\u003eOnce you've passed all tests, if you visit the newly created remote repository on GitHub, you should see that the \u003ccode\u003eREADME.md\u003c/code\u003e file you created is now present.\u003c/p\u003e\n\u003ch2\u003eAdditional Practice\u003c/h2\u003e\n\u003cp\u003eWe recommend taking time to become familiar with Git commands since you'll be relying on them a lot. If you'd like to practice further, \u003cstrong\u003echange directory back into the \u003ccode\u003emy-repository\u003c/code\u003e folder\u003c/strong\u003e and try the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreate another file, then add, commit, and push to the remote\u003c/li\u003e\n\u003cli\u003eModify the contents of \u003ccode\u003eREADME.md\u003c/code\u003e, then add, commit, and push to the remote\u003c/li\u003e\n\u003cli\u003eRename \u003ccode\u003eREADME.md\u003c/code\u003e, then add, commit, and push to the remote\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eWrapping Up\u003c/h2\u003e\n\u003cp\u003eIf you would like to preserve the work you've done for this lab on GitHub, you'll need to push it up to your fork of this assignment. \u003cstrong\u003eChange directory to the top-level\u003c/strong\u003e once again, then run the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Done with assignment\"\u003cbr\u003egit push origin master\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that this assignment was created with a \u003ccode\u003emaster\u003c/code\u003e branch as the default, so the \u003ccode\u003epush\u003c/code\u003e command is different than when you pushed \u003ccode\u003emy-repository\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eAs you become more comfortable with the terminal and Git, you'll find yourself using the workflow of initializing, adding, committing and pushing your work on a regular basis. These commands are at the core of Git version control. By knowing them, you now have the ability to create your own repositories and contribute to repositories that already exist.\u003c/p\u003e\n\u003cp\u003eIn this lab you used tests to guide you in the basics of setting up a new local Git repository and binding it to a remote repository on GitHub. By pushing your work to a remote repository you've backed it up \u003cem\u003eand\u003c/em\u003e made it available for the world to see via GitHub. Professional developers use this process to share code with each other, to document their code, and to earn interview slots by showing off what they're capable of. You did this guided by \u003cem\u003etests\u003c/em\u003e. It's common for developers to write tasks as tests that all fail and then slowly work to get them all passing. It's like a to-do list that verifies you've actually done the work!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g7564564370ab57558fbbd0b6797bcda5","title":"HTML Album Cover","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-album-cover-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003e\u003cimg src=\"https://after-school-assets.s3.amazonaws.com/happy.gif\" alt=\"from the 'Happy' music video by Pharrell Williams\"\u003e\u003c/p\u003e  \u003ch2\u003eLearning Goal\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eApply header, paragraph, image and span tags\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eLearning all the individual pieces that make up a web page is a necessary first step in the process of learning HTML, but one of the best ways to solidify the concepts we've learned is to apply concepts together. In this lab, your task will be to update \u003ccode\u003eindex.html\u003c/code\u003e based on commented notes in the file, using what we've learned about text formatting and displaying images.\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eApply Header, Paragraph, Image and Span Tags\u003c/h2\u003e  \u003cp\u003ePharrell isn't quite happy, he needs some help coding the album cover for his hit song \"Happy.\" His dev chops aren't quite as skilled as yours, so he's hired you to take care of business.\u003c/p\u003e  \u003cp\u003ePharrell did provide us with a mock-up of what he would like to see for the design of the album cover:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/html-album-cover/MOCKUP.jpg\" alt=\"Happy Album Cover\"\u003e\u003c/p\u003e  \u003cp\u003eIn the industry, front-end developers are typically given specs just like this from the product team and then asked to write the code to make a website look just like the spec. Today, you're the developer and Pharrell is the product team.\u003c/p\u003e  \u003ch3\u003eUse SOURCE.md\u003c/h3\u003e  \u003cp\u003ePharrell has provided us with the text for the album and all the legal mumbo-jumbo to give credit where credit is due. You can find that text in \u003ccode\u003eSOURCE.md\u003c/code\u003e. Again, this is a typical industry standard workflow, where the developers are given a copy for the site from the product team.\u003c/p\u003e  \u003cp\u003eEach line of text in this file corresponds to a note in \u003ccode\u003eindex.html\u003c/code\u003e that will indicate where you'll need to add this information. It will be up to you to pick which HTML tags to use.\u003c/p\u003e  \u003ch3\u003eDeliverables\u003c/h3\u003e  \u003cp\u003eWrite your code in \u003ccode\u003eindex.html\u003c/code\u003e. Your job is to make sure the text from \u003ccode\u003eSOURCE.md\u003c/code\u003e makes it into \u003ccode\u003eindex.html\u003c/code\u003e surrounded by the appropriate HTML tags.\u003c/p\u003e  \u003cp\u003eThe files you need are provided in the 'images' folder, but you'll have to write the correct URL paths (like \u003ccode\u003ehttp://..../image-name\u003c/code\u003e) in order for them to display correctly.\u003c/p\u003e  \u003cp\u003eYou may not have encountered the \u003ccode\u003espan\u003c/code\u003e tag before, so if you are curious, take a moment to \u003ca href=\"https://www.w3schools.com/tags/tag_span.asp\"\u003eread up on some reference material\u003c/a\u003e to better understand its use.\u003c/p\u003e  \u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in a separate browser tab to see your progress on the Album Cover as you build it.\u003c/p\u003e  \u003cp\u003eRun \u003ccode\u003erspec\u003c/code\u003e to make sure you've met all the deliverables and passed the tests.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eA lot of the formatting in this lab is done using CSS, or Cascading Style Sheets, a language that defines styling for HTML. Before we can get to more elaborate styling, though, it is important to have a strong understanding of HTML fundamentals.\u003c/p\u003e  \u003cp\u003eIn this lab, we've tested that understanding by having you practice applying headers, image, and paragraphs. Completing this lab means that you have a solid foundation that we can build upon as we continue to learn about web development.\u003c/p\u003e  \u003cp\u003e\u003cem\u003eClap along if you feel\u003c/em\u003e you're getting the hang of HTML!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gccdfbd01491dfa0892c0165f87458f4f","title":"HTML Images","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-images-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-images-lab/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-images-lab\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-images-lab/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003eRecognize the \u003ccode\u003eimg\u003c/code\u003e tag\u003c/li\u003e\n    \u003cli\u003eUse \u003ccode\u003eimg\u003c/code\u003e tag attributes\u003c/li\u003e\n    \u003cli\u003eCreate images\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eImages are absolutely critical to making appealing and engaging websites. Can you imagine the web without them? No cat memes. No animated dancing bananas! No \u003cem\u003eInstagram\u003c/em\u003e, at all. The internet would be a pretty boring and sad place!\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://s3.amazonaws.com/ironboard-learn/sad_meme.jpg\" alt=\"sad meme\"\u003e\n\u003c/p\u003e\n\u003cp\u003eIn this lesson, we will be discussing how to include images in your HTML, along with some important attributes of the tag. With images, you can make your web pages much more engaging and visually appealing.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eRecognize the \u003ccode\u003eimg\u003c/code\u003e Tag\u003c/h2\u003e\n\u003cp\u003eImages are inserted into HTML using the \u003ccode\u003eimg\u003c/code\u003e tag. The tag can display a variety of image types, including animated GIFs, bitmaps and vector graphics, though most often, the images we see on the internet are JPEG and PNG files.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eimg\u003c/code\u003e tag is \u003cem\u003eself closing\u003c/em\u003e, meaning it doesn't wrap around content or text. Instead, the relevant information is stored in attributes within the tag itself.\u003c/p\u003e\n\u003cp\u003eThere are two main attributes, \u003ccode\u003esrc\u003c/code\u003e, the \u003cem\u003esource\u003c/em\u003e of the image, and \u003ccode\u003ealt\u003c/code\u003e, the \u003cem\u003ealternate\u003c/em\u003e text.\u003c/p\u003e\n\u003ch2\u003eUse the \u003ccode\u003eimg\u003c/code\u003e Tag Attributes\u003c/h2\u003e\n\u003ch3\u003eThe Image Source Attribute\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003esrc\u003c/code\u003e attribute provides the relative path or URL to the image file we want to display. The image file can be local, say, for instance, if you're publishing a website and have a local stored in a folder, your source may look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"../images/my_company_logo.png\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, its very common, even when publishing your own websites, to have images hosted somewhere else on the internet. In these situations, we need to provide a full URL as the source:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"https://i.imgur.com/H1qsYEl.png\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003esrc\u003c/code\u003e attribute is always necessary, as without it, the \u003ccode\u003eimg\u003c/code\u003e tag would have nothing to display.\u003c/p\u003e\n\u003ch3\u003eThe Image Alt Attribute\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003ealt\u003c/code\u003e attribute contains text relevant to the image we're displaying, and will appear in its place if the image fails to load.\u003c/p\u003e\n\u003cp\u003eWhile it isn't required, it is highly recommended that every image includes an \u003ccode\u003ealt\u003c/code\u003e attribute. The \u003ccode\u003ealt\u003c/code\u003e text is important for screen readers for the visually impaired, as the text will be read out loud to the site visitor. It is also nice to provide some sort of message to a website visitor if the image fails to load, especially if the image is relevant to the rest of the content. Alt text on a failed image will appear along with a small 'broken image' icon:\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"http://blog.flatironschool.com/wp-content/uploads/2015/03/FS_Circle_Slashes-150x150.png\" alt=\"flatiron school logo\"\u003e\n\u003c/p\u003e\n\u003cp\u003eTo include an \u003ccode\u003ealt\u003c/code\u003e attribute, add it in along with the \u003ccode\u003esrc\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"https://i.imgur.com/H1qsYEl.png\" alt=\"comedic crow gets wholesome support\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eThe Image Title Attribute\u003c/h3\u003e\n\u003cp\u003eOne additional attribute that can be useful is the \u003ccode\u003etitle\u003c/code\u003e. Content added to this attribute will display when we hover over the image with our mouse. If we were creating an \u003ccode\u003eimg\u003c/code\u003e tag with \u003ccode\u003esrc\u003c/code\u003e, \u003ccode\u003ealt\u003c/code\u003e and \u003ccode\u003etitle\u003c/code\u003e for a company logo, it might look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;img src=\"../images/my_company_logo.png\" alt=\"my company name\" title=\"We're here to help you!\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen a visitor to your company site hovers over the logo, they'll see a message appear saying 'We're here to help you!'\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003etitle\u003c/code\u003e attribute isn't necessary and is often left out, but can be a nice detail to include.\u003c/p\u003e\n\u003ch2\u003eCreate Images\u003c/h2\u003e\n\u003cp\u003eIts time to practice creating some images! For this challenge, feel free to use any images you'd like - the tests are looking for the correct tag and attributes, not the content. If you're not sure what to use, feel free to use the following URL as your source:\u003c/p\u003e\n\u003cp\u003e\n    \u003ca href=\"https://s3.amazonaws.com/ironboard-learn/lion.jpg\"\u003ehttps://s3.amazonaws.com/ironboard-learn/lion.jpg\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://s3.amazonaws.com/ironboard-learn/lion.jpg\" alt=\"lion\"\u003e\n\u003c/p\u003e\n\u003cp\u003eYour challenge is to write \u003cem\u003ethree\u003c/em\u003e image tags:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003eThe first should have \u003cem\u003ejust\u003c/em\u003e a \u003cem\u003esource\u003c/em\u003e attribute\u003c/li\u003e\n    \u003cli\u003eThe second should include an alt text, in addition to a source\u003c/li\u003e\n    \u003cli\u003eThe third should have both an alt and source attribute, as well as a \u003cem\u003etitle\u003c/em\u003e attribute\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRun \u003ccode\u003erspec\u003c/code\u003e and read the tests as you go.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eWith images, we can fill our web pages with visual content in addition to text. Brand logos, animated instructional guides, personal artwork and photography, or pictures of you and your friends - you now have the ability to create visually appealing content of \u003cem\u003eany type!\u003c/em\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3a64144a0bee75105bb81bdd4962824d","title":"HTML Issue Bot 9000","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-issue-bot-9000-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-issue-bot-9000-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-issue-bot-9000-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-issue-bot-9000-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eDemonstrate writing valid HTML\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eLet's practice using the W3C's HTML Validator!\u003c/p\u003e\n\u003ch2\u003eDemonstrate Writing Valid HTML\u003c/h2\u003e\n\u003cp\u003eIn this lab we'll use the W3C Validator to make our invalid HTML happy! You might need to change how you work this problem depending on your work environment. Either way you'll learn to fix invalid HTML.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch3\u003eSteps\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eOpen index.html in a browser. See how it, well, doesn't look \u003cem\u003equite\u003c/em\u003e right?\u003c/li\u003e\n\u003cli\u003eOpen index.html in your text editor\u003c/li\u003e\n\u003cli\u003eVisit the W3C validator at: \u003ca href=\"http://validator.w3.org/#validate_by_input\"\u003ehttp://validator.w3.org/#validate_by_input\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eCopy the code from index.html and paste it into the text area\u003c/li\u003e\n\u003cli\u003eClick the large \"Check\" button\u003c/li\u003e\n\u003cli\u003eUse the error messages to correct the code your copy of \u003ccode\u003eindex.html\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eRepeat steps 3-6 until the Html Validator reports: \"Document checking completed. No errors or warnings to show.\"\u003c/li\u003e\n\u003cli\u003eNot only is the document now W3C-valid, it no longer looks weird\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eSubmitting the Lab\u003c/h3\u003e\n\u003cp\u003eWhen your document is valid, go to the terminal and type:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003erspec\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eSince you're verifying the HTML structure via W3C, the test here is not robust at all.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://validator.w3.org/#validate_by_input\"\u003eW3C HTML Validator - Validate Direct Input\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge558dde08b24f989006d50bc06b1821d","title":"HTML Lists","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-lists-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-lab/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-lab\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-lab/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003eRecognize unordered and ordered HTML Lists\u003c/li\u003e\n    \u003cli\u003eCreate unordered lists\u003c/li\u003e\n    \u003cli\u003eIdentify the ordered list tag\u003c/li\u003e\n    \u003cli\u003eCreate ordered lists\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eMany HTML tags behave in unique ways. Some apply automatic styling, like \u003ccode\u003ep\u003c/code\u003e tags that create margins around text. Some, like the header tags, increase the font size. Using these tags delineates our content. When reading HTML, using the correct tags informs us of what the content's purpose is. If we see an \u003ccode\u003eh1\u003c/code\u003e tag, we know that we're looking at a \u003cem\u003ebig\u003c/em\u003e page header. In this lesson, we're going to be looking at a few new tags that help us organize \u003cem\u003elists\u003c/em\u003e of related content.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eRecognize Unordered And Ordered HTML Lists\u003c/h2\u003e\n\u003cp\u003eLets say, for instance, we were building a personal website and wanted to list out our favorite foods. We \u003cem\u003ecould\u003c/em\u003e write this like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;body\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Ham and Cheese\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Grilled Cheese\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Nacho Cheese French Fries\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Cheese soup\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Cheese and crackers\u0026lt;/p\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;Sushi\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe above would create a new line on the page for each food, but doesn't really indicate that these things are related. Using the built in \u003ccode\u003eul\u003c/code\u003e, \u003ccode\u003eol\u003c/code\u003e and \u003ccode\u003eli\u003c/code\u003e HTML tags however, we can group related list content together. We call such a grouping a \"list.\"\u003c/p\u003e\n\u003cp\u003eIn HTML, we create lists using the \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e tag, which stands for \u003cem\u003eunordered list\u003c/em\u003e, along with the \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tag for each \u003cem\u003elist item\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eTo make a list, we write out the opening and closing \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e tags, and inside them, we'll add \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tags, each listing a single month. Going back to our favorite foods example, if we wanted convert it to a list, it would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Ham and Cheese\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Grilled Cheese\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Nacho Cheese French Fries\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Cheese soup\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Cheese and crackers\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Sushi\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, instead of just having each item show up on a new line, the content will also be slightly indented and a bullet will appear next to each of them.\u003c/p\u003e\n\u003cp\u003eLists are very flexible and we can even nest lists \u003cem\u003einside\u003c/em\u003e of lists. Say we wanted to breakdown our favorite foods by category. We may have multiple categories and one or more items in \u003cem\u003eeach\u003c/em\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Sandwiches\u003cbr\u003e    \u0026lt;ul\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;Ham and Cheese\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;Grilled Cheese\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Snacks\u003cbr\u003e    \u0026lt;li\u0026gt;Nacho Cheese French Fries\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;Cheese and crackers\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Soups\u003cbr\u003e    \u0026lt;ul\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;Cheese soup\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Sushi\u003cbr\u003e    \u0026lt;ul\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;Spicy Salmon Rolls\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;California Rolls\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, the nested lists will now be \u003cem\u003efurther\u003c/em\u003e indented and instead of a solid bullet, they will appear with hollow bullets, indicating a sub-list. Adding nested list one level deeper will make \u003cem\u003esquare\u003c/em\u003e bullets appear, allowing us to easily display related and nested content in a readable format.\u003c/p\u003e\n\u003ch2\u003eCreate Unordered Lists\u003c/h2\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-fundamendals/html-lists-lab/Image_62_HTML%20Lab_Recipe.png\" alt=\"recipe list\"\u003e\n\u003c/p\u003e\n\u003cp\u003eThe first part of this challenge is to make the first 2 tests pass by:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eCreating an unordered list\u003c/li\u003e\n    \u003cli\u003eNesting each grilled cheese ingredient as a list item wrapped in \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tags\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in your browser.\u003c/p\u003e\n\u003cp\u003eLet's say we wanted to list out the ingredients required for making a grilled cheese sandwich. The ingredients are: \u003ccode\u003e2 slices of bread\u003c/code\u003e, \u003ccode\u003e4 slices of cheese\u003c/code\u003e, \u003ccode\u003e1 tbsp of butter\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFor the first part of this challenge, in \u003ccode\u003eindex.html\u003c/code\u003e, create an unordered list that displays these ingredients. Run \u003ccode\u003erspec\u003c/code\u003e to see if you can pass the first test. If you've done things correctly, you'll now be passing the first test, but there are more tests to pass! We now need to turn our attention to the next test.\u003c/p\u003e\n\u003cp\u003eOkay, now, lets say we wanted to make our grilled cheese a little more exciting and add a couple of cheeses, \u003ccode\u003echeddar\u003c/code\u003e, \u003ccode\u003emozzarella\u003c/code\u003e, and \u003ccode\u003epepper jack\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eTo pass the second test, inside the \u003ccode\u003eli\u003c/code\u003e of \u003ccode\u003e4 slices of cheese\u003c/code\u003e, add a nested unordered list that lists out the three types of cheese.\u003c/p\u003e\n\u003cp\u003eIf your first two tests are passing, great! It's time to talk about another type of list!\u003c/p\u003e\n\u003ch2\u003eIdentify the Ordered List Tag\u003c/h2\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://i.imgflip.com/28mpcx.jpg\" alt=\"\"\u003e\n\u003c/p\u003e\n\u003cp\u003eUnordered lists are great for organizing related content where it doesn't matter what goes first, like in our grilled cheese ingredients. In situations where we \u003cem\u003ewant\u003c/em\u003e items to be displayed in a specific, numbered order, we will want to use the \u003cem\u003eordered list\u003c/em\u003e tag, which is written as \u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e instead of \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e. Both use \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tags inside, but this time, \u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e will display a numbered list instead of bullets. If say, we wanted to write a \u003cem\u003eranked\u003c/em\u003e list of favorite foods, it might look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h3\u0026gt;Top 5 Favorite Foods\u0026lt;/h3\u0026gt;\u003cbr\u003e\u0026lt;ol\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Grilled Cheese\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Sushi\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Cheese and crackers\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Cheese soup\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Nacho Cheese French Fries\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ol\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e Feel free to test this out by adding it to \u003ccode\u003eindex.html\u003c/code\u003e, saving and refreshing the tab where the file is open. Now, \u003ccode\u003eGrilled Cheese\u003c/code\u003e will be displayed as \u003ccode\u003e1. Grilled Cheese\u003c/code\u003e as the #1 food (where it belongs).\u003c/p\u003e\n\u003cp\u003eNested ordered lists works the same as unordered, but instead of hollow and square bullets, each nested list will still display numbers.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e In a nested list, you \u003cem\u003emust\u003c/em\u003e provide the \u003ccode\u003eol\u003c/code\u003e or \u003ccode\u003eul\u003c/code\u003e wrapper. Otherwise, an \u003ccode\u003eli\u003c/code\u003e inside another \u003ccode\u003eli\u003c/code\u003e will just be displayed as two items at the same level. This is because technically, you do not need to write a closing \u003ccode\u003eli\u003c/code\u003e tag. The following example will be displayed the same as the previous:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h3\u0026gt;Top 5 Favorite Foods\u0026lt;/h3\u0026gt;\u003cbr\u003e\u0026lt;ol\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;Grilled Cheese\u003cbr\u003e  \u0026lt;li\u0026gt;Sushi\u003cbr\u003e  \u0026lt;li\u0026gt;Cheese and crackers\u003cbr\u003e  \u0026lt;li\u0026gt;Cheese soup\u003cbr\u003e  \u0026lt;li\u0026gt;Nacho Cheese French Fries\u003cbr\u003e\u0026lt;/ol\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eCreate Ordered Lists\u003c/h2\u003e\n\u003cp\u003eTo complete the challenge write the necessary HTML to pass the tests:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eCreate an ordered list\u003c/li\u003e\n    \u003cli\u003eNest each step for creating grilled cheese as a list item wrapped in \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tags\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOkay, so we've got our grilled cheese ingredients, but what about the steps requires to make a grilled cheese? Steps to a recipe need to be in order, otherwise we may end up with burnt cheese covered in bread and topped with a square of butter. The steps to making a basic grilled cheese would be: \u003ccode\u003eSpread butter on bread and frying pan\u003c/code\u003e, \u003ccode\u003ePlace bread in frying pan and fry\u003c/code\u003e, \u003ccode\u003eAdd cheese on top of bread\u003c/code\u003e, \u003ccode\u003eCover with second slice of bread\u003c/code\u003e, \u003ccode\u003eTurn over and\n        fry for 2 minutes\u003c/code\u003e\u003c/p\u003e\n\u003ch2\u003eRun the Tests\u003c/h2\u003e\n\u003cp\u003eOnce you've written an ordered list that displays these 5 steps correctly, run \u003ccode\u003erspec\u003c/code\u003e to see the tests pass.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eLists in HTML are very useful for organizing related content, and are really the only way indicate that content is related with basic HTML. Using unordered lists ends up being very useful for more than just listing favorite foods and ingredients. Its possible, for instance, to use list elements to organize navigation links - with styling, we make the content look however we want: remove the bullets, make them line up horizontally, but in our HTML they will still be organized and easy to read.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g91aa20ca27b8c1c6ebb0d7e21e95baa0","title":"HTML Tables","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-tables-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tables-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tables-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tables-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003col\u003e \u003cli\u003eRecognize basic HTML table elements\u003c/li\u003e \u003cli\u003eCreate HTML tables\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn HTML, we can create lists of related content using unordered and ordered lists, and they will display line by line in the order we put them in. Sometimes as web developers, though, we need to display more complex data. For instance, imagine you are working with a financial company and need to display a collection of transactions, each with a title, value, time, and category. Or, imagine that you've been hired by a marketing company and need to display a list of the \u003ca href=\"https://en.wikipedia.org/wiki/List_of_most-followed_Instagram_accounts\"\u003emost popular Instagram accounts\u003c/a\u003e, each with their username, the owner of the account, and the number of followers. For sets of data like this, with many separate components, the best way to display would be to put the data into a \u003cem\u003etable\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eHTML has a built in way to display tables! In this lesson, we will be reviewing how tables work and how to make our own.\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eRecognize Basic HTML Table Elements\u003c/h2\u003e  \u003ch3\u003eThe Table Tag: \u003ccode\u003e\u0026lt;table\u0026gt;\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eThe first thing we need in order to create a table is to write opening and closing \u003ccode\u003e\u0026lt;table\u0026gt;\u003c/code\u003e tags.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;/table\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis tells our browser to interpret anything inside as part of the table. What makes up a table, exactly? A table has rows and columns, which together create individual cells, as well as headers to label what each column is for.\u003c/p\u003e  \u003cp\u003eIn HTML, we define these table components using individual elements that we nest inside our \u003ccode\u003etable\u003c/code\u003e tags.\u003c/p\u003e  \u003ch3\u003eThe Table Row Tag: \u003ccode\u003e\u0026lt;tr\u0026gt;\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eIt's important to note: order really matters when building a table in HTML! We're trying to display a two-dimensional table, but browsers interpret HTML \u003cem\u003eline by line\u003c/em\u003e.  For this reason, HTML tables were designed so that there is no tag for \u003cem\u003ecolumns\u003c/em\u003e, only \u003cem\u003erows\u003c/em\u003e.  If you were creating a table with 5 rows and 5 columns, in designing the table, we would actually have to create 5 \u003cem\u003erows\u003c/em\u003e, each with 5 individual \u003cem\u003ecells\u003c/em\u003e inside.  When displayed, the cells in each row will line up to \u003cem\u003elook\u003c/em\u003e like columns.\u003c/p\u003e  \u003cp\u003eTable rows always come first. To make a row inside our table, we use the \u003cem\u003etable row\u003c/em\u003e tag, \u003ccode\u003e\u0026lt;tr\u0026gt;\u003c/code\u003e. So if we wanted to have four rows in our table, including a row of headers, setting up the rows it would look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003cbr\u003e\u0026lt;/table\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAny content we want in a row would go inside that particular \u003ccode\u003e\u0026lt;tr\u0026gt;\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eThe Table Header Tag: \u003ccode\u003e\u0026lt;th\u0026gt;\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eTables generally start with a row of headers to label each column, so the first \u003ccode\u003etr\u003c/code\u003e tag we write will be dedicated to these headers.\u003c/p\u003e  \u003cp\u003eTo create headers, we use \u003ccode\u003e\u0026lt;th\u0026gt;\u003c/code\u003e, the \u003cem\u003etable header\u003c/em\u003e tag. Let's say we were creating a list of guests to a party. The first column might have a header called 'Name' for the guest's name, the second, the guest's 'Phone Number', and the third, what the guest is 'Bringing' to the party.\u003c/p\u003e  \u003cp\u003eThese headers need to go in the first row, so that may look something like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u003cbr\u003e    \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u003cbr\u003e    \u0026lt;th\u0026gt;Phone Number\u0026lt;/th\u0026gt;\u003cbr\u003e    \u0026lt;th\u0026gt;Bringing\u0026lt;/th\u0026gt;\u003cbr\u003e  \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003cbr\u003e\u0026lt;/table\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEven though we write the HTML from top down, we would see these headers in bold and lined up \u003cem\u003eleft to right\u003c/em\u003e. We can open up \u003ccode\u003eindex.html\u003c/code\u003e right now to take a look to confirm.\u003c/p\u003e  \u003cp\u003eThis first row is almost always the only place where we use the \u003ccode\u003eth\u003c/code\u003e tag.\u003c/p\u003e  \u003ch3\u003eThe Table Data Tag: \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e\n\u003c/h3\u003e  \u003cp\u003eIn the second row, we can start putting in our data. Here, we want to use the \u003cem\u003etable data\u003c/em\u003e tag, \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e instead of using the \u003cem\u003etable header\u003c/em\u003e tag. The \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e tag represents one table cell. So, for our party table, we can add in some names, phone numbers and items for guests to bring. An example row would look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;tr\u0026gt;\u003cbr\u003e  \u0026lt;td\u0026gt;Daniel\u0026lt;/td\u0026gt;\u003cbr\u003e  \u0026lt;td\u0026gt;845-282-4000\u0026lt;/td\u0026gt;\u003cbr\u003e  \u0026lt;td\u0026gt;Guacamole\u0026lt;/td\u0026gt;\u003cbr\u003e\u0026lt;/tr\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs long as each bit of data in a \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e is in the \u003cem\u003esame position\u003c/em\u003e as the corresponding \u003ccode\u003e\u0026lt;th\u0026gt;\u003c/code\u003e in the first row, it will show up in that column.\u003c/p\u003e  \u003cp\u003eRepeating this structure, if we wanted to include 3 guests for our party, our entire table would look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;table\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u003cbr\u003e    \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u003cbr\u003e    \u0026lt;th\u0026gt;Phone Number\u0026lt;/th\u0026gt;\u003cbr\u003e    \u0026lt;th\u0026gt;Bringing\u0026lt;/th\u0026gt;\u003cbr\u003e  \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;Daniel\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;718-555-1212\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;Guacamole\u0026lt;/td\u0026gt;\u003cbr\u003e  \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;Rachel\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;718-555-1212\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;Chips\u0026lt;/td\u0026gt;\u003cbr\u003e  \u0026lt;/tr\u0026gt;\u003cbr\u003e  \u0026lt;tr\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;Terrance\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;914-555-1212\u0026lt;/td\u0026gt;\u003cbr\u003e    \u0026lt;td\u0026gt;Salsa\u0026lt;/td\u0026gt;\u003cbr\u003e  \u0026lt;/tr\u0026gt;\u003cbr\u003e\u0026lt;/table\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePaste this into \u003ccode\u003eindex.html\u003c/code\u003e and take a look at how it is displayed in browser. You'll see we've got a table with 4 rows and 3 columns! Each \"column\" of content expands to fit the width of the content.\u003c/p\u003e  \u003ch2\u003eCreate HTML Tables\u003c/h2\u003e  \u003cp\u003eOkay, now its time to put what we've learned to the test. For this challenge, your task is to recreate a table using the following data:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/ironboard-learn/us_cities_by_population.png\" alt=\"cities by population\"\u003e\u003c/p\u003e  \u003cp\u003eThe above table shows total population of the 4 biggest cities in the US. We can see there are 3 headers, \"City\", \"State\", and \"2017 estimate\", and data for each of the four cities.\u003c/p\u003e  \u003cp\u003eTo complete this task, follow the order of table creation we discussed earlier:\u003c/p\u003e  \u003col\u003e \u003cli\u003eCreate a \u003ccode\u003etable\u003c/code\u003e, and place rows inside,\u003c/li\u003e \u003cli\u003eDedicate the first row to just headers\u003c/li\u003e \u003cli\u003eAdd in the data in the appropriate order so that each city name falls under the \"City\" column, each state is under \"State\", etc...\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eRun \u003ccode\u003erspec\u003c/code\u003e to test your work and see your progress. The tests also include the exact population numbers, so feel free to copy them from the errors!\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eSo, with \u003ccode\u003etable\u003c/code\u003e, \u003ccode\u003etr\u003c/code\u003e, \u003ccode\u003eth\u003c/code\u003e and \u003ccode\u003etd\u003c/code\u003e, we are able to turn line by line HTML into a table with rows and columns! It may seem counterintuitive at first to list out row content separately, but with this, you can represent all sorts of data!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g940337d406f780ff5c9ddb3a43b91ab4","title":"Introduction to CSS Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-intro-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-intro-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-intro-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eImport a CSS file in our HTML\u003c/li\u003e\n\u003cli\u003eImplement CSS declarations\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHTML's role in our websites is to provide structure, content, and link resources (e.g. CSS files). Its role in describing the style (\"presentation\") of content is minimal. HTML's ability to style is pretty much limited to \"pretty good\" defaults.\u003c/p\u003e\n\u003cp\u003eIn order to further customize the style, appearance, and interactive behavior of our websites, we turn to Cascading Style Sheets, or CSS. In this lab, we will work on implementing CSS declarations in our HTML.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/css-essentials/introduction-to-css-lab/Image_66_WritingCSS%20vs%20HTML.png\" alt=\"HTML vs CSS Table\"\u003e\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eImport a CSS File in Our HTML\u003c/h2\u003e\n\u003cp\u003eFirst things first: we need to make sure our HTML is loading our style sheet.\u003c/p\u003e\n\u003cp\u003eWe have two options:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWrite CSS rules inside of a \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag (\"internal CSS\"), which tells HTML \"Hey, I want to define some CSS styling here\u003c/li\u003e\n\u003cli\u003eWrite CSS rules in an external file that is specified with the \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag (\"external CSS\").\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn our case, we want to provide a link to our style sheet, instead of writing all of our CSS code directly in the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag. This allows us to only have to write styles for the entire site once, instead of repeating every \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e element on every page. A common workflow is to see developers work on CSS inside of the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag until their styling is done. At that point they move it to their external file and remove the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e element from the HTML page. Feel free to try it out!\u003c/p\u003e\n\u003cp\u003eIn \u003ccode\u003eindex.html\u003c/code\u003e, provide a \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag which correctly sources the CSS file located in this directory. The \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag will link to our file with an \u003ccode\u003ehref\u003c/code\u003e attribute, like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;link rel=\"stylesheet\" href=\"relative path to CSS file\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ehref\u003c/code\u003e attribute should point to the file \u003ccode\u003estyle.css\u003c/code\u003e which is located in this directory using a \u003cem\u003erelative path\u003c/em\u003e. The \u003ccode\u003erel\u003c/code\u003e attribute is used to note that the file which is being linked has a \u003cstrong\u003erel\u003c/strong\u003eation of being a \"stylesheet.\"\u003c/p\u003e\n\u003cp\u003eNow, what is a relative path? You could write \u003ccode\u003ehref=\"style.css\"\u003c/code\u003e and the content of \u003ccode\u003estyle.css\u003c/code\u003e would change your \u003ccode\u003eindex.html\u003c/code\u003e file. But we want to teach you to require external resources (like CSS or JavaScript) by using \u003cem\u003erelative paths\u003c/em\u003e. Relative paths make it \u003cem\u003ecrystal clear\u003c/em\u003e which file is being used. Relative paths start with \u003ccode\u003e./\u003c/code\u003e which means \"from the directory I am currently in.\" So, when we use \u003ccode\u003elink\u003c/code\u003e to associate with a style sheet and we write \u003ccode\u003ehref=\"./style.css\"\u003c/code\u003e we're saying: \"From the directory in which I, the \u003ccode\u003eindex.html\u003c/code\u003e file live, look for a file called \u003ccode\u003estyle.css\u003c/code\u003e and use it. This pattern will help you and other developers remove any possible confusion.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;link rel=\"stylesheet\" href=\"relative path to CSS file\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLinks to style sheets should go at the end of the \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e section! Make sure you provide a \u003cem\u003erelative\u003c/em\u003e path to the style sheet. Hint: Open \u003ccode\u003eindex.html\u003c/code\u003e in the browser. You can test whether your link is working or not by the color of your headline. If it's red, it's working! If it's black, keep going - you'll get it.\u003c/p\u003e\n\u003ch2\u003eImplement CSS Declarations\u003c/h2\u003e\n\u003cp\u003eNow, we are going to create some CSS declarations and add styling to our document! First, open \u003ccode\u003eindex.html\u003c/code\u003e in the browser to get a good idea of what \u003ca href=\"https://curriculum-content.s3.amazonaws.com/web-development/unstyled-codepen.jpeg\"\u003eour un-styled page\u003c/a\u003e page looks like.\u003c/p\u003e\n\u003cp\u003eWhat we would really like is \u003ca href=\"https://curriculum-content.s3.amazonaws.com/web-development/styled-intro-to-css.png\"\u003esomething a little more jazzed up\u003c/a\u003e! Let's work towards that. Set the following \u003cem\u003eproperties\u003c/em\u003e to specific \u003cem\u003evalues\u003c/em\u003e. Make sure to, after each update, look at \u003ccode\u003eindex.html\u003c/code\u003e in the browser to see how it has changed:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSet the \u003ccode\u003ebackground\u003c/code\u003e of the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e element (whole document) to \u003ccode\u003e#00b3e6\u003c/code\u003e (light blue)\u003c/li\u003e\n\u003cli\u003eSet the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e elements:\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ewidth\u003c/code\u003e to \u003ccode\u003e700px\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003emargin\u003c/code\u003e to \u003ccode\u003eauto\u003c/code\u003e (centers our element)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003efont-family\u003c/code\u003e to \u003ccode\u003e\"Helvetica Neue\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ebackground\u003c/code\u003e to \u003ccode\u003ewhite\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003epadding\u003c/code\u003e to \u003ccode\u003e30px\u003c/code\u003e (creates an invisible space around the element)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSet the element with the id of \u003ccode\u003e#main-header\u003c/code\u003e to a \u003ccode\u003efont-size\u003c/code\u003e of \u003ccode\u003e22px\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eSet the elements with the class of \u003ccode\u003e.perspective-questions\u003c/code\u003e to a \u003ccode\u003efont-style\u003c/code\u003e of \u003ccode\u003eitalic\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRun \u003ccode\u003erspec\u003c/code\u003e to test your work.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eCSS allows us to easily separate our 'styling' logic into separate files that follow the 'cascading' rule set. This enables us to keep our HTML clean and simple to read, without sacrificing the customization that we have come to expect on websites.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/Css/css_intro.asp\"\u003eW3 Introduction to CSS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gfce95e21981d4de81b2ddc9b16753ef3","title":"Introduction to Functions Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-intro-to-functions-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Objectives\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePractice reading tests and test errors\u003c/li\u003e\n\u003cli\u003ePractice writing functions\u003c/li\u003e\n\u003cli\u003eLearn how to use JavaScript's \u003ccode\u003etoUpperCase()\u003c/code\u003e and \u003ccode\u003etoLowerCase()\u003c/code\u003e methods\u003c/li\u003e\n\u003cli\u003ePractice using \u003ccode\u003ereturn\u003c/code\u003e and \u003ccode\u003econsole.log()\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ePractice creating conditional statements\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eWelcome to the JavaScript functions lab! You'll notice a few new things in this lesson that we haven't encountered before. Don't worry, we'll walk you through them.\u003c/p\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. (If you are using a different text editor, the command will be different.) Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch3\u003eCode-Along\u003c/h3\u003e\n\u003cp\u003eTo start, open up \u003ccode\u003eindex.js\u003c/code\u003e in your text editor. You should see, well, nothing. We'll fix that soon.\u003c/p\u003e\n\u003cp\u003eNow open up \u003ccode\u003etest/root.js\u003c/code\u003e. Hey, there's something! What's all of this stuff doing?\u003c/p\u003e\n\u003cp\u003eAt the very top of the file, you'll see\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eglobal.expect = require('expect');\u003cbr\u003e\u003cbr\u003econst babel = require('babel-core');\u003cbr\u003econst jsdom = require('jsdom');\u003cbr\u003econst path = require('path'); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis might be a bit bewildering, but all we're doing is referencing different \u003cem\u003elibraries\u003c/em\u003e that help us run the tests. You may recall that we talked about \u003cem\u003epackages\u003c/em\u003e in an earlier lesson. A library is similar: it's code that someone else (usually multiple someone elses) wrote for our use. The code above makes the libraries available inside our test environment, which enables us to run the tests.\u003c/p\u003e\n\u003cp\u003eIf you go to \u003ccode\u003etest/index-test.js\u003c/code\u003e, you'll see\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe('shout(string)', function(){\u003cbr\u003e  // there's stuff in here, too\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003edescribe\u003c/code\u003e is a function provided by our test runner (in this case, we're using \u003ca href=\"https://mochajs.org/\"\u003eMocha\u003c/a\u003e) — it's basically a container for our tests.\u003c/p\u003e\n\u003cp\u003eLet's take a closer look at that \u003ccode\u003edescribe()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe('shout(string)', function(){\u003cbr\u003e  it('receives one argument and returns it in all caps', function() {\u003cbr\u003e    // we'll get to this in a sec\u003cbr\u003e  })\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese internal \u003ccode\u003edescribe()\u003c/code\u003e calls are used for \u003cem\u003edescribing\u003c/em\u003e the functions that you're going to write. In this case, the test is saying, \"Okay, I think there's going to be a function called \u003ccode\u003eshout\u003c/code\u003e, and it should take one argument (it doesn't actually matter what the argument is called, but \u003ccode\u003estring\u003c/code\u003e, is nice and specific, don't you think?). It should \u003cem\u003ereturn\u003c/em\u003e that argument in all caps.\u003c/p\u003e\n\u003cp\u003eFinally, we have\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexpect(shout('hello')).toEqual('HELLO'); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ewhich says that it \u003cem\u003eexpects\u003c/em\u003e a call to \u003ccode\u003eshout()\u003c/code\u003e with the string \u003ccode\u003e'hello'\u003c/code\u003e will \u003ccode\u003eequal\u003c/code\u003e the string \u003ccode\u003e'HELLO'\u003c/code\u003e. This is the actual test — otherwise called a spec, expectation, or assertion — for this function. We can have more than one test per function, but let's start with this one.\u003c/p\u003e\n\u003ch3\u003eRunning the Tests\u003c/h3\u003e\n\u003cp\u003eTo run the tests, run \u003ccode\u003enpm test\u003c/code\u003e in the terminal. The first output you'll see will look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; java-script-intro-to-functions-lab@0.1.0 test /Users/mbenton/Desktop/curriculum-team/junk/javascript-intro-to-functions-lab\u003cbr\u003e\u0026gt; mocha -R mocha-multi --reporter-options spec=-,json=.results.json --timeout 10000\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  shout(string)\u003cbr\u003e    1) receives one argument and returns it in all caps\u003cbr\u003e\u003cbr\u003e  whisper(string)\u003cbr\u003e    2) receives one argument and returns it in all lowercase\u003cbr\u003e\u003cbr\u003e  logShout(string)\u003cbr\u003e    3) calls console.log() its one argument in all caps\u003cbr\u003e\u003cbr\u003e  logWhisper(string)\u003cbr\u003e    4) calls console.log() its one argument in all lowercase\u003cbr\u003e\u003cbr\u003e  sayHiToGrandma(string)\u003cbr\u003e    5) returns \"I can't hear you!\" if `string` is lowercase\u003cbr\u003e    6) returns \"YES INDEED!\" if `string` is uppercase\u003cbr\u003e    7) returns \"I love you, too.\" if `string` is \"I love you, Grandma.\"`\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  0 passing (99ms)\u003cbr\u003e  7 failing\u003cbr\u003e\u003cbr\u003e  1) shout(string)\u003cbr\u003e       receives one argument and returns it in all caps:\u003cbr\u003e     ReferenceError: shout is not defined\u003cbr\u003e      at Context. (test/index-test.js:4:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  2) whisper(string)\u003cbr\u003e       receives one argument and returns it in all lowercase:\u003cbr\u003e     ReferenceError: whisper is not defined\u003cbr\u003e      at Context. (test/index-test.js:10:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  3) logShout(string)\u003cbr\u003e       calls console.log() its one argument in all caps:\u003cbr\u003e     ReferenceError: logShout is not defined\u003cbr\u003e      at Context. (test/index-test.js:18:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  4) logWhisper(string)\u003cbr\u003e       calls console.log() its one argument in all lowercase:\u003cbr\u003e     ReferenceError: logWhisper is not defined\u003cbr\u003e      at Context. (test/index-test.js:30:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  5) sayHiToGrandma(string)\u003cbr\u003e       returns \"I can't hear you!\" if `string` is lowercase:\u003cbr\u003e     ReferenceError: sayHiToGrandma is not defined\u003cbr\u003e      at Context. (test/index-test.js:40:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  6) sayHiToGrandma(string)\u003cbr\u003e       returns \"YES INDEED!\" if `string` is uppercase:\u003cbr\u003e     ReferenceError: sayHiToGrandma is not defined\u003cbr\u003e      at Context. (test/index-test.js:44:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  7) sayHiToGrandma(string)\u003cbr\u003e       returns \"I love you, too.\" if `string` is \"I love you, Grandma.\"`:\u003cbr\u003e     ReferenceError: sayHiToGrandma is not defined\u003cbr\u003e      at Context. (test/index-test.js:48:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003enpm ERR! Test failed.  See above for more details. \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHm, seven failed tests. Let's see if we can get that \u003cem\u003efirst\u003c/em\u003e test to pass. Open up \u003ccode\u003eindex.js\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhen we write our code, we follow the guidance of the tests. Let's take a look at that first error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  1) shout(string)\u003cbr\u003e       receives one argument and returns it in all caps:\u003cbr\u003e     ReferenceError: shout is not defined\u003cbr\u003e      at Context. (test/index-test.js:4:5)\u003cbr\u003e      at processImmediate (internal/timers.js:461:21) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe output above comes from this test in \u003ccode\u003eindex-test.js\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe('shout(string)', function() {\u003cbr\u003e  it('receives one argument and returns it in all caps', function() {\u003cbr\u003e    expect(shout('hello')).toEqual('HELLO');\u003cbr\u003e  })\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe know that the test is expecting a function called \u003ccode\u003eshout\u003c/code\u003e that accepts an argument. The error tells us that \u003ccode\u003eshout\u003c/code\u003e isn't defined. So let's start by declaring our function in \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction shout(string) {\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe know we won't pass the test yet because our function doesn't do anything yet. However, if we rerun the test, it should now give us more information about what we need to do:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  1) shout(string)\u003cbr\u003e       receives one argument and returns it in all caps:\u003cbr\u003e     Error: Expected undefined to equal 'HELLO'\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\u003cbr\u003e      at Context. (test/index-test.js:4:28)\u003cbr\u003e      at processImmediate (internal/timers.js:461:21) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnytime you see \u003ccode\u003eError: Expected undefined to equal [something]\u003c/code\u003e, that means that the test is looking for a \u003ccode\u003ereturn\u003c/code\u003e value. We can also see the description of what the function should do: it \u003ccode\u003ereceives one argument and returns it in all caps\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOkay, so with that information, we know that our function should return whatever string is passed in as an argument:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction shout(string) {\u003cbr\u003e  return string;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut we're still missing one piece: how do we make \u003ccode\u003estring\u003c/code\u003e all caps? JavaScript has a built-in method for that! It's called \u003ccode\u003etoUpperCase()\u003c/code\u003e. We can call it on any string:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e'Hello!'.toUpperCase(); // 'HELLO!' \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove, we've called it directly on a literal string but, of course, we can also call it on a variable. So let's try it with our \u003ccode\u003eshout()\u003c/code\u003e function:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction shout(string) {\u003cbr\u003e  return string.toUpperCase();\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand run our tests again. We get:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eshout(string)\u003cbr\u003e    ✓ receives one argument and returns it in all caps\u003cbr\u003e\u003cbr\u003e  whisper(string)\u003cbr\u003e    1) receives one argument and returns it in all lowercase\u003cbr\u003e\u003cbr\u003e  logShout(string)\u003cbr\u003e    2) calls console.log() its one argument in all caps\u003cbr\u003e\u003cbr\u003e  logWhisper(string)\u003cbr\u003e    3) calls console.log() its one argument in all lowercase\u003cbr\u003e\u003cbr\u003e  sayHiToGrandma(string)\u003cbr\u003e    4) returns \"I can't hear you!\" if `string` is lowercase\u003cbr\u003e    5) returns \"YES INDEED!\" if `string` is uppercase\u003cbr\u003e    6) returns \"I love you, too.\" if `string` is \"I love you, Grandma.\"`\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  1 passing (108ms)\u003cbr\u003e  6 failing\u003cbr\u003e\u003cbr\u003e  1) whisper(string)\u003cbr\u003e       receives one argument and returns it in all lowercase:\u003cbr\u003e     ReferenceError: whisper is not defined\u003cbr\u003e      at Context. (test/index-test.js:10:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  2) logShout(string)\u003cbr\u003e       calls console.log() its one argument in all caps:\u003cbr\u003e     ReferenceError: logShout is not defined\u003cbr\u003e      at Context. (test/index-test.js:18:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  3) logWhisper(string)\u003cbr\u003e       calls console.log() its one argument in all lowercase:\u003cbr\u003e     ReferenceError: logWhisper is not defined\u003cbr\u003e      at Context. (test/index-test.js:30:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  4) sayHiToGrandma(string)\u003cbr\u003e       returns \"I can't hear you!\" if `string` is lowercase:\u003cbr\u003e     ReferenceError: sayHiToGrandma is not defined\u003cbr\u003e      at Context. (test/index-test.js:40:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  5) sayHiToGrandma(string)\u003cbr\u003e       returns \"YES INDEED!\" if `string` is uppercase:\u003cbr\u003e     ReferenceError: sayHiToGrandma is not defined\u003cbr\u003e      at Context. (test/index-test.js:44:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e  6) sayHiToGrandma(string)\u003cbr\u003e       returns \"I love you, too.\" if `string` is \"I love you, Grandma.\"`:\u003cbr\u003e     ReferenceError: sayHiToGrandma is not defined\u003cbr\u003e      at Context. (test/index-test.js:48:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21)\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003enpm ERR! Test failed.  See above for more details. \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHey! We got one to pass! Six left.\u003c/p\u003e\n\u003ch2\u003eYour Turn\u003c/h2\u003e\n\u003cp\u003eNow it's your turn to get the rest of the tests to pass. Note that some of them require you to use \u003ccode\u003econsole.log()\u003c/code\u003e instead of \u003ccode\u003ereturn\u003c/code\u003e — follow the guidance of the tests!\u003c/p\u003e\n\u003ch3\u003eInstructions\u003c/h3\u003e\n\u003cp\u003eIn this lab, we're writing functions that \"speak\" at different volumes — they whisper or they shout. The next test is similar to the first:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) whisper(string)\u003cbr\u003e       receives one argument and returns it in all lowercase:\u003cbr\u003e     ReferenceError: whisper is not defined\u003cbr\u003e      at Context. (test/index-test.js:10:5)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis test is telling us that \u003ccode\u003ewhisper(string)\u003c/code\u003e receives one argument and returns it in all lowercase. At the moment, the test is failing because whisper is not defined.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Just like \u003ccode\u003e.toUpperCase()\u003c/code\u003e changes any string to all uppercase in JavaScript, \u003ccode\u003e.toLowerCase()\u003c/code\u003e (e.g., \u003ccode\u003e'HELLO'.toLowerCase()\u003c/code\u003e) changes any string to all lowercase.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe next two tests are checking to see if a specific string is logged when a function is called. You will still need to use the \u003ccode\u003e.toUpperCase()\u003c/code\u003e and \u003ccode\u003e.toLowerCase()\u003c/code\u003e methods for \u003ccode\u003elogShout(string)\u003c/code\u003e and \u003ccode\u003elogWhisper(string)\u003c/code\u003e. Keep in mind, though, that these tests are not looking for return values, only logs.\u003c/p\u003e\n\u003cp\u003eThe final function you need to create is \u003ccode\u003esayHiToGrandma()\u003c/code\u003e. Grandma is a bit hard of hearing, so whispering can be a bit difficult, but she'll always hear you if you say, \"I love you, Grandma.\" This time, you will need to return different strings depending on the string passed into the function.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Although there are 3 tests for \u003ccode\u003esayHiToGrandma()\u003c/code\u003e, you only need to write \u003cstrong\u003eone\u003c/strong\u003e function. This function should be able to handle all three test conditions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf the string that is passed into the function is all lowercase, the function should return \"I can't hear you!\"\u003c/li\u003e\n\u003cli\u003eIf the string that is passed into the function is all uppercase, the function should return \"YES INDEED!\"\u003c/li\u003e\n\u003cli\u003eIf the string that is passed into the function is equal to \"I love you, Grandma.\", the function should return \"I love you, too.\"\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHow do we check if a string is all lowercase or all uppercase? Let's take a look using a REPL:\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://repl.it/@LizBurton/InsubstantialTanInternet?lite=true\" width=\"100%\" height=\"400px\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\" allowfullscreen=\"allowfullscreen\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003eIn the first line we're defining a string variable. In the next two lines we log the original variable, then the variable after calling \u003ccode\u003etoUpperCase()\u003c/code\u003e on it. Finally, we're checking to see whether those two values are equal. If you click the Run button, you'll see that the original string is mixed case and the upper cased version of it is (not surprisingly) uppercase. It should not come as a surprise, therefore, that comparing them with the equality operator (\u003ccode\u003e===\u003c/code\u003e) returns false. What do you think will happen if we initialize \u003ccode\u003estring\u003c/code\u003e to \"HELLO!\" instead? Play around with different values for \u003ccode\u003estring\u003c/code\u003e and see what happens. Also try doing the same thing with \u003ccode\u003etoLowerCase()\u003c/code\u003e and make sure you understand what's happening.\u003c/p\u003e\n\u003cp\u003eBasically, if we compare a string to its uppercased (or lowercased) version and the two values are equal, then we know that the original string is uppercase (or lowercase). So now that we know how to make these comparisons, how can we use them to conditionally return different strings? If you need a refresher, go back and review the lesson on Selection with Conditionals.\u003c/p\u003e\n\u003cp\u003eRemember that punctuation is important! Humans might be able to understand that \"I love you Grandma\" is close enough to \"I love you, Grandma.\" and means the same thing but JavaScript will not consider these equal!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e As you're working through the tests, you can run your code by running \u003ccode\u003enode index.js\u003c/code\u003e in the terminal. If you want to do this, remember that you'll need to \u003cem\u003ecall\u003c/em\u003e the function inside \u003ccode\u003eindex.js\u003c/code\u003e. If you are just running tests, however, you don't need to include a function call — the tests will handle that for you.\u003c/p\u003e\n\u003cp\u003eGood luck!\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6ba8a11d91c79c765e0215c2709ef9bd","title":"JavaScript Calculator Challenge Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-arithmetic-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-arithmetic-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-arithmetic-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePractice doing math with JavaScript\u003c/li\u003e\n\u003cli\u003ePractice writing functions that do things with numbers\u003c/li\u003e\n\u003cli\u003ePractice parsing strings as numbers\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this lab, we're going to practice writing functions and manipulating numbers in JavaScript. First, though, we need to review some basic math. In this lab, we're going to learn about various arithmetic operators. What's an operator, you say? It's a symbol that \u003cem\u003eoperates\u003c/em\u003e on one or more (usually two) objects — \u003ccode\u003e+\u003c/code\u003e is a good example. The \u003ccode\u003e+\u003c/code\u003e operator says \"add what's to the left of \u003ccode\u003e+\u003c/code\u003e and what's to the right of \u003ccode\u003e+\u003c/code\u003e together.\"\u003c/p\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. (If you are using a different text editor, the command will be different.) Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003cp\u003eAs you read through this lesson, you're going to be adding your solutions to \u003ccode\u003eindex.js\u003c/code\u003e. You'll write a total of eight functions. Use the results of running \u003ccode\u003enpm test\u003c/code\u003e to guide you towards the right function names and functionality.\u003c/p\u003e\n\u003ch2\u003eBasic Math\u003c/h2\u003e\n\u003cp\u003eThe most fundamental math operations work as one might expect in JavaScript: \u003ccode\u003e+\u003c/code\u003e adds two numbers; \u003ccode\u003e-\u003c/code\u003e subtracts one number from another; \u003ccode\u003e*\u003c/code\u003e multiplies two numbers; and \u003ccode\u003e/\u003c/code\u003e divides one number by another.\u003c/p\u003e\n\u003cp\u003eTo follow along with the examples in this lesson, we'll be using the \u003cem\u003eterminal window\u003c/em\u003e in \u003ca href=\"https://repl.it/languages/javascript\"\u003erepl.it\u003c/a\u003e. You can type any JavaScript statement or expression at the prompt and it will be immediately executed when you hit enter. Give it a try: type each of the following math examples into the terminal. You can use the embedded terminal below or open repl.it in a separate window if you prefer.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1 + 80; //=\u0026gt; 81\u003cbr\u003e60 - 40; //=\u0026gt; 20\u003cbr\u003e2 * 3.4; //=\u0026gt; 6.8\u003cbr\u003e5.0 / 2.5; //=\u0026gt; 2 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ciframe src=\"https://repl.it/@LizBurton/ConstantLoathsomeToolbox?lite=true\u0026amp;outputonly=1\" width=\"100%\" height=\"400px\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\" allowfullscreen=\"allowfullscreen\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003eAt this point, we can fix the first \u003cem\u003eeight\u003c/em\u003e failing tests: we can define functions \u003ccode\u003eadd()\u003c/code\u003e, \u003ccode\u003esubtract()\u003c/code\u003e, \u003ccode\u003emultiply()\u003c/code\u003e, and \u003ccode\u003edivide()\u003c/code\u003e in \u003ccode\u003eindex.js\u003c/code\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: you can also \u003cem\u003edefine and run functions\u003c/em\u003e in the REPL terminal. Try writing your \u003ccode\u003eadd()\u003c/code\u003e function in the terminal first to see how it works.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eMath + Assignment\u003c/h2\u003e\n\u003cp\u003eRecall that we can increment (\u003ccode\u003e++\u003c/code\u003e) and decrement (\u003ccode\u003e--\u003c/code\u003e) a number if it's assigned to a variable. Don't forget to follow along in the REPL's terminal.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet number = 5;\u003cbr\u003e\u003cbr\u003enumber++; //=\u0026gt; 5... hmmmm\u003cbr\u003e\u003cbr\u003enumber; //=\u0026gt; 6 -- the number was incremented after it was evaluated\u003cbr\u003e\u003cbr\u003enumber--; //=\u0026gt; 6\u003cbr\u003e\u003cbr\u003enumber; //=\u0026gt; 5 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can also put the incrementor and decrementor operations before the number, in which case the number is evaluated \u003cem\u003eafter\u003c/em\u003e the operator is executed:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e--number; //=\u0026gt; 4\u003cbr\u003e\u003cbr\u003enumber; //=\u0026gt; 4\u003cbr\u003e\u003cbr\u003e++number; //=\u0026gt; 5\u003cbr\u003e\u003cbr\u003enumber; //=\u0026gt; 5 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut generally, you will see them placed \u003cem\u003eafter\u003c/em\u003e the number (and we recommend that that's where you put them). If you're interested in the difference, take a look at \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment\"\u003ethe documentation on MDN\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAnd, while we're on the subject, you'll usually only want to use these incrementors and decrementors when the shorthand makes what you're writing easier to read (more on when \u003cem\u003eexactly\u003c/em\u003e in a later lesson). Instead, it's best to use the basic arithmetic operators combined with \u003ccode\u003e=\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFollow along in the terminal's REPL. You can pick up where we left off with the previous examples. Start by setting \u003ccode\u003enumber\u003c/code\u003e equal to 5.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e+=\u003c/code\u003e modifies the value to the operator's left by adding to it the value to the operator's right:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003enumber += 3 //=\u0026gt; 8 \u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e-=\u003c/code\u003e modifies the value to the operator's left by subtracting from it the value to the operator's right:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003enumber -= 2 //=\u0026gt; 6 \u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e*=\u003c/code\u003e modifies the value to the operator's left by multiplying it by the value to the operator's right:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003enumber *= 10 //=\u0026gt; 60 \u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e/=\u003c/code\u003e modifies the value to the operator's left by dividing it by the value to the operator's right:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003enumber /= 5 //=\u0026gt; 12 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that these methods modify the variable in place. So, if we have two functions that depend on the same external variable, the order in which they are called matters. Follow along in the terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e//reset number\u003cbr\u003enumber = 10\u003cbr\u003e\u003cbr\u003efunction add5() {\u003cbr\u003e  return number += 5;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction divideBy3() {\u003cbr\u003e  return number /= 3;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edivideBy3(); //=\u0026gt; 3.3333333333333335\u003cbr\u003e\u003cbr\u003eadd5(); //=\u0026gt; 8.333333333333334\u003cbr\u003e\u003cbr\u003e// reset number\u003cbr\u003enumber = 10\u003cbr\u003e\u003cbr\u003eadd5(); //=\u0026gt; 15\u003cbr\u003e\u003cbr\u003edivideBy3(); //=\u0026gt; 5 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eBecause these methods are more explicit, we prefer \u003ccode\u003e+=\u003c/code\u003e to \u003ccode\u003e++\u003c/code\u003e and \u003ccode\u003e-=\u003c/code\u003e to \u003ccode\u003e--\u003c/code\u003e (usually).\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eOkay, now we're ready to write solutions for the next two functions: \u003ccode\u003eincrement(n)\u003c/code\u003e and \u003ccode\u003edecrement(n)\u003c/code\u003e. These methods should take in a number, and increment/decrement the provided value by one, returning the result.\u003c/p\u003e\n\u003ch2\u003eParsing Numbers\u003c/h2\u003e\n\u003cp\u003eSometimes, we'll receive a number wrapped in quotes. We recognize it as a number, but JavaScript will think it's a string. Luckily, JavaScript gives us tools to turn these strings into proper numbers (that is, numbers that JavaScript understands).\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eThe first such tool is the function \u003ccode\u003eparseInt()\u003c/code\u003e, which accepts two arguments: the value to parse and the base of the value being parsed (called the \u003cem\u003eradix\u003c/em\u003e). \u003cem\u003eUsually\u003c/em\u003e you will want to work with base 10, so a typical call to \u003ccode\u003eparseInt()\u003c/code\u003e looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eparseInt('2', 10); //=\u0026gt; 2 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat happens if we pass a representation of a non-integer to \u003ccode\u003eparseInt()\u003c/code\u003e? Let's try it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eparseInt('2.2222', 10); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we enter the above in the REPL's terminal, we will see that \u003ccode\u003eparseInt()\u003c/code\u003e forces the parsed number to be an integer — which makes sense when we think about it, right?\u003c/p\u003e\n\u003cp\u003eWhat happens, though, if we pass utter nonsense to \u003ccode\u003eparseInt()\u003c/code\u003e? Go ahead and try it — something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eparseInt('nonsense!', 10); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhat did it return? \u003ccode\u003eNaN\u003c/code\u003e? What is that?\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eNaN\u003c/code\u003e stands for \"Not a Number\" — pretty handy, right? This is the number (in the JavaScript sense) that JavaScript returns when it can't determine a valid value for a numeric operation.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You may see \u003ccode\u003eparseInt()\u003c/code\u003e used without a radix specified. In most cases, the radix will default to 10, \u003cstrong\u003ebut not always\u003c/strong\u003e! To be safe, you should \u003cstrong\u003ealways specify a radix\u003c/strong\u003e.\u003c/p\u003e\n\u003ch3\u003e\u003ccode\u003eparseFloat()\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eAbove, we saw that \u003ccode\u003eparseInt()\u003c/code\u003e lops off everything after the decimal point and only returns integers. If we want to preserve decimals, we'll need to use \u003ccode\u003eparseFloat()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eUnlike \u003ccode\u003eparseInt()\u003c/code\u003e, \u003ccode\u003eparseFloat()\u003c/code\u003e accepts only a single argument, the thing to be parsed. We can use it like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eparseFloat('80.123999'); // 80.123999 \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou're now ready to solve the final two tests in this lab, \u003ccode\u003emakeInt(string)\u003c/code\u003e and \u003ccode\u003epreserveDecimal(string)\u003c/code\u003e. \u003ccode\u003emakeInt(string)\u003c/code\u003e should take in a string, parse it into a base 10 integer and return it. \u003ccode\u003epreserveDecimal(string)\u003c/code\u003e should take in a string, parse it into a float and return it.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\"\u003eMDN - parseInt()\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\"\u003eMDN - parseFloat()\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g9b2e2b384b3f4722d46569ecce91eb7e","title":"JavaScript Event Listeners Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events-event-listening-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eCreate event listeners on DOM nodes using \u003ccode\u003eaddEventListener()\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this lab we will learn how to teach nodes to \"listen\" for an event using \u003ccode\u003eaddEventListener()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eCreate Event Listeners on DOM Nodes with \u003ccode\u003eaddEventListener()\u003c/code\u003e\n\u003c/h2\u003e\n\u003cp\u003eIn order for JavaScript to handle an event, we first need to tell it to listen for that event. We do this by calling the \u003ccode\u003eaddEventListener()\u003c/code\u003e method on the element we want to add the listener to, and passing it two arguments:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003ethe name of the event to listen for, and\u003c/li\u003e\n    \u003cli\u003ea \u003cem\u003ecallback function\u003c/em\u003e to \"handle\" the event\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eOpen up \u003ccode\u003eindex.html\u003c/code\u003e in the browser. When you click in the \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e area, nothing happens. Let's set up some \u003cem\u003eevent handling\u003c/em\u003e. Specifically, let's add an event listener for the \u003ccode\u003eclick\u003c/code\u003e event on the \u003ccode\u003einput#input\u003c/code\u003e element in \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eTry out the following in the Chrome DevTools console:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst input = document.getElementById('input');\u003cbr\u003einput.addEventListener('click', function() {\u003cbr\u003e  alert('I was clicked!');\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow when you click inside of \u003ccode\u003einput#input\u003c/code\u003e, you will get an alert box.\u003c/p\u003e\n\u003cp\u003eLet's review what's happening in this code.\u003c/p\u003e\n\u003cp\u003eFirst, we grab the element that we want to add the event listener to and save a reference to it in the \u003ccode\u003einput\u003c/code\u003e variable.\u003c/p\u003e\n\u003cp\u003eNext, we call \u003ccode\u003eaddEventListener()\u003c/code\u003e on that element to tell JavaScript to listen for the event. We pass two arguments to \u003ccode\u003eaddEventListener()\u003c/code\u003e: the name of the event to listen for (in this case, \u003ccode\u003eclick\u003c/code\u003e) and a \u003cem\u003ecallback function\u003c/em\u003e that will be executed when the event is \"heard.\"\u003c/p\u003e\n\u003cp\u003e\n    \u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\"\u003eAccording to MDN\u003c/a\u003e:\n\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003eA callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThat's exactly what's happening here: we're passing a callback function as the second argument to the \u003ccode\u003eaddEventListener()\u003c/code\u003e function; the callback will be invoked as soon as the event occurs.\u003c/p\u003e\n\u003cp\u003eLet's pull out that second argument and take a look at it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction() {\u003cbr\u003e  alert('I was clicked!');\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis function has all the components of functions we've seen before (the \u003ccode\u003efunction\u003c/code\u003e keyword, a pair of parentheses, and the body of the function enclosed in curly braces) \u003cem\u003eexcept one\u003c/em\u003e: it doesn't have a name assigned to it. This is what's called an \u003cem\u003eanonymous\u003c/em\u003e function. Because it doesn't have a name, it can't be invoked directly. But the event listener knows to execute whatever function is passed as the second argument when it detects the event, so it doesn't need to be named.\u003c/p\u003e\n\u003cp\u003eIf we are only calling our callback function in that one place, using an anonymous function makes sense. However, what if we wanted to use that same alert message on a bunch of elements? In that case, it would make more sense to create a separate, named function that could be called by all of our event listeners. With this approach, we would pass the \u003cem\u003efunction name\u003c/em\u003e as the second argument to \u003ccode\u003eaddEventListener()\u003c/code\u003e rather than the function itself:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst input = document.getElementById('input');\u003cbr\u003e\u003cbr\u003efunction clickAlert() {\u003cbr\u003e  alert('I was clicked!');\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003einput.addEventListener('click', clickAlert); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could then hook up as many elements as we'd like to our \u003ccode\u003eclickAlert\u003c/code\u003e. Just as we did for the \u003ccode\u003einput\u003c/code\u003e element, we would first use our CSS selector skills to grab the desired element and save it to a variable, then add the \u003ccode\u003eclick\u003c/code\u003e event listener to that element. Give it a try!\u003c/p\u003e\n\u003cp\u003eWith this approach, even if we're using our \u003ccode\u003eclickAlert\u003c/code\u003e with a whole bunch of elements, if we decide later that we want to change the text of the alert to \"Hee hee, that tickles!\" instead, we would only need to make that change in one place: inside our \u003ccode\u003eclickAlert()\u003c/code\u003e function.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: we pass \u003ccode\u003eclickAlert\u003c/code\u003e as the argument, not \u003ccode\u003eclickAlert()\u003c/code\u003e. This is because we don't want to \u003cem\u003einvoke\u003c/em\u003e the function in this line of code. Instead, we want to pass a \u003cem\u003ereference\u003c/em\u003e to the function to \u003ccode\u003eaddEventListener()\u003c/code\u003e so \u003cem\u003eit\u003c/em\u003e can call the function when the time comes.\u003c/p\u003e\n\u003cp\u003eRefresh your browser and try out the latest version of the code in the console to verify that it works. Also try passing \u003ccode\u003eclickAlert()\u003c/code\u003e as the second argument rather than \u003ccode\u003eclickAlert\u003c/code\u003e and see what happens.\u003c/p\u003e\n\u003ch2\u003ePassing the Tests\u003c/h2\u003e\n\u003cp\u003eNow let's set up \u003ccode\u003eindex.js\u003c/code\u003e to do the same thing so we can get our test passing. To do that, simply copy the code into the \u003ccode\u003eindex.js\u003c/code\u003e file's \u003ccode\u003eaddingEventListener()\u003c/code\u003e function and run the test. Either version should pass the test — just make sure that the code creating the event listener is \u003cstrong\u003einside\u003c/strong\u003e the \u003ccode\u003eaddingEventListener()\u003c/code\u003e function.\u003c/p\u003e\n\u003ch4\u003eChecking the Code in the Browser\u003c/h4\u003e\n\u003cp\u003eWe know that the code works in the console and passes the test, but we should also check our changes to \u003ccode\u003eindex.js\u003c/code\u003e in the browser. Because you've added the \u003ccode\u003eaddEventListener()\u003c/code\u003e function \u003cem\u003einside\u003c/em\u003e the \u003ccode\u003eaddingEventListener()\u003c/code\u003e function, recall that you will need to call the outer function in \u003ccode\u003eindex.js\u003c/code\u003e to execute \u003ccode\u003eaddEventListener()\u003c/code\u003e and activate the event listener. Be sure to refresh the page to load the new code in \u003ccode\u003eindex.js\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events\"\u003eMDN - Web Events\u003c/a\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3dc2f9bbd6e73a3a4ae3e55f81369a8d","title":"JavaScript Function Parameters Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-function-parameters-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eDefine a function that uses a parameter\u003c/li\u003e \u003cli\u003eDefine a function that uses two parameters\u003c/li\u003e \u003cli\u003eDefine a function with a parameter that has a default value\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lab, we'll practice using parameters in our functions. We'll also learn how to create a default value for a parameter.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. (If you are using a different text editor, the command will be different.) Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003cp\u003eYou will be writing your code in the \u003ccode\u003eindex.js\u003c/code\u003e file and running the tests by running \u003ccode\u003enpm test\u003c/code\u003e in the terminal.\u003c/p\u003e  \u003ch2\u003eDefine a Function That Uses a Parameter\u003c/h2\u003e  \u003cp\u003e\u003cstrong\u003eInstructions:\u003c/strong\u003e Define a function called \u003ccode\u003eintroduction\u003c/code\u003e that defines a parameter, \u003ccode\u003ename\u003c/code\u003e, and returns the phrase: \"Hi, my name is ${name}.\"\u003c/p\u003e  \u003ch2\u003eDefine a Function That Uses Two Parameters\u003c/h2\u003e  \u003cp\u003eSetting up your function to use two parameters is straightforward: simply include both parameters in the parentheses in the function declaration line, separated by a comma:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction logTwoValues(value1, value2) {\u003cbr\u003e  console.log(`The two values are ${value1} and ${value2}.`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs you might expect, if we instead wanted to log three values — or ten values — we can just continue listing the parameters in the parentheses, with commas between each.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eInstructions:\u003c/strong\u003e To pass the second test, you'll need to define a function called \u003ccode\u003eintroductionWithLanguage\u003c/code\u003e that defines two parameters, \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003elanguage\u003c/code\u003e, and returns the phrase: \"Hi, my name is [name] and I am learning to program in [language].\"\u003c/p\u003e  \u003ch2\u003eDefine a Function That Uses an Optional Parameter\u003c/h2\u003e  \u003cp\u003eIn a previous lesson, we created a function that logs a personalized greeting:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sayHelloTo(firstName) {\u003cbr\u003e  console.log(`Hello, ${firstName}!`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat if we wanted to make this function work \u003cem\u003ewhether or not\u003c/em\u003e a first name is passed in as an argument? We can do this by setting a \u003cem\u003edefault value\u003c/em\u003e for the \u003ccode\u003efirstName\u003c/code\u003e parameter:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction sayHelloTo(firstName = \"User\") {\u003cbr\u003e  console.log(`Hello, ${firstName}!`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that we have used the assignment operator (\u003ccode\u003e=\u003c/code\u003e) here to assign a default value. The way this works is, if the function is called \u003cem\u003ewith\u003c/em\u003e an argument, the argument's value will supersede the default value. If it's called \u003cem\u003ewithout\u003c/em\u003e an argument, the function will use the default value, logging \"Hello, User!\"\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eInstructions:\u003c/strong\u003e Copy the function you created for the second test and name it \u003ccode\u003eintroductionWithLanguageOptional\u003c/code\u003e. It should have two parameters, \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003elanguage\u003c/code\u003e, and the second parameter should have a default value of \"JavaScript\".\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gefdcd3675da711f0226308177de916cc","title":"Looping Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-looping-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eBuild a \u003ccode\u003efor\u003c/code\u003e loop.\u003c/li\u003e\n    \u003cli\u003eBuild a \u003ccode\u003ewhile\u003c/code\u003e loop.\u003c/li\u003e\n    \u003cli\u003eExplain the purpose of a loop.\u003c/li\u003e\n    \u003cli\u003eUnderstand when to use each type of loop.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn an earlier lesson, we learned about \u003cem\u003erepetition statements\u003c/em\u003e — statements that allow us to break out of the default sequence and repeat a section of code multiple times. We also learned about two of JavaScript's repetition constructs: the \u003cem\u003ewhile\u003c/em\u003e loop and the \u003cem\u003edo...while\u003c/em\u003e loop. In this lesson we will learn about a third: the \u003cem\u003efor\u003c/em\u003e loop.\u003c/p\u003e\n\u003cp\u003eLet's say we have a bunch of gifts to wrap. They all happen to be the same size and shape, so for every gift, we need to cut a similarly sized piece of wrapping paper, fold it up over the edges of the gift, tape it together, and add a nice little card. Then we set the wrapped gift aside and move on to the next gift.\u003c/p\u003e\n\u003cp\u003eIn programming terms, we can think of our \u003cstrong\u003ecollection\u003c/strong\u003e of gifts as an \u003cstrong\u003e\u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e and the act of wrapping them as a function. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst gifts = [\"teddy bear\", \"drone\", \"doll\"];\u003cbr\u003e\u003cbr\u003efunction wrapGift(gift) {\u003cbr\u003e  console.log(`Wrapped ${gift} and added a bow!`);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe could then call \u003ccode\u003ewrapGift()\u003c/code\u003e on each gift individually:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewrapGift(gifts[0]);\u003cbr\u003ewrapGift(gifts[1]);\u003cbr\u003ewrapGift(gifts[2]); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, this isn't very efficient or extensible. It's a lot of repetitive code to write out, and if we had more gifts we'd have to write a whole new line for each.\u003c/p\u003e\n\u003cp\u003eThis is where loops come in handy! With a loop, we can just write the repeated action \u003cstrong\u003eonce\u003c/strong\u003e and perform the action on \u003cstrong\u003eevery item in the collection\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eThis is a code-along, so follow along with the instructions in each section. There are tests to make sure you're coding your solutions correctly. If you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003ch2\u003eThe \u003ccode\u003efor\u003c/code\u003e loop\u003c/h2\u003e\n\u003cp\u003eOf the loops in JavaScript, the \u003ccode\u003efor\u003c/code\u003e loop is the most common. The \u003ccode\u003efor\u003c/code\u003e loop is made up of four statements in the following structure:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efor ([initialization]; [condition]; [iteration]) {\u003cbr\u003e  [loop body]\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n    \u003cli\u003eInitialization\n        \u003cul\u003e\n            \u003cli\u003eTypically used to initialize a \u003cstrong\u003ecounter\u003c/strong\u003e variable.\u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003eCondition\n        \u003cul\u003e\n            \u003cli\u003eAn expression evaluated before each pass through the loop. If this expression evaluates to \u003ccode\u003etrue\u003c/code\u003e, the statements in the loop body are executed. If the expression evaluates to \u003ccode\u003efalse\u003c/code\u003e, the loop exits.\u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003eIteration\n        \u003cul\u003e\n            \u003cli\u003eAn expression executed at the end of each iteration. Typically, this will involve incrementing or decrementing a counter, bringing the loop ever closer to completion.\u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003eLoop body\n        \u003cul\u003e\n            \u003cli\u003eCode that runs on each pass through the loop.\u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eUsage\u003c/em\u003e\u003c/strong\u003e: Use a \u003ccode\u003efor\u003c/code\u003e loop when you know how many times you want the loop to run (for example, when you're looping through elements in an array).\u003c/p\u003e\n\u003ch4\u003eExamples\u003c/h4\u003e\n\u003cp\u003eLet's take a look at an example and get some practice using the Node debugger. Enter the code below into the \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can, of course, copy/paste the code rather than typing it in yourself, but we recommend typing it in for now. The act of typing code develops muscle memory and helps your brain understand and internalize the syntax.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003efor (let age = 30; age \u0026lt; 40; age++) {\u003cbr\u003e  console.log(`I'm ${age} years old. Happy birthday to me!`);\u003cbr\u003e  debugger;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the above code, \u003ccode\u003elet age = 30\u003c/code\u003e is the \u003cstrong\u003einitialization\u003c/strong\u003e: we're creating a variable, \u003ccode\u003eage\u003c/code\u003e, that we'll use in the next three phases of the loop. Notice that we use \u003ccode\u003elet\u003c/code\u003e instead of \u003ccode\u003econst\u003c/code\u003e because we need to increment the value of \u003ccode\u003eage\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003cstrong\u003econdition\u003c/strong\u003e for the above loop is \u003ccode\u003eage \u0026lt; 40\u003c/code\u003e, or, in other words, \"Run the code in the loop body until \u003ccode\u003eage\u003c/code\u003e is NOT less than \u003ccode\u003e40\u003c/code\u003e.\" As long as the condition evaluates to \u003ccode\u003etrue\u003c/code\u003e, the code in the loop body is executed, the value of \u003ccode\u003eage\u003c/code\u003e is incremented, and the condition is reevaluated. As soon as the condition evaluates to \u003ccode\u003efalse\u003c/code\u003e, the loop ends.\u003c/p\u003e\n\u003cp\u003eThe \u003cstrong\u003eiteration\u003c/strong\u003e is \u003ccode\u003eage++\u003c/code\u003e, which increments the value of \u003ccode\u003eage\u003c/code\u003e by \u003ccode\u003e1\u003c/code\u003e after every pass through the loop. We initialized \u003ccode\u003eage\u003c/code\u003e as \u003ccode\u003e30\u003c/code\u003e, and it retains that value during the first pass through the loop. At the end of the first pass, we increment \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e31\u003c/code\u003e, check whether the condition still holds \u003ccode\u003etrue\u003c/code\u003e, and, since it does, run the loop body again with \u003ccode\u003eage\u003c/code\u003e as \u003ccode\u003e31\u003c/code\u003e. After that second loop, we increment \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e32\u003c/code\u003e, and so on.\u003c/p\u003e\n\u003cp\u003eThe \u003cstrong\u003eloop body\u003c/strong\u003e is the set of statements that we want to run when the condition evaluates to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eLet's take a look at what's happening in our loop using debugger. Run \u003ccode\u003enode inspect index.js\u003c/code\u003e in the terminal to start the debugger. You should see the following:\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_1.png\" alt=\"Debugger Output 1\"\u003e\n\u003c/p\u003e\n\u003cp\u003eNow run \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to start executing the loop and advance to the breakpoint. It should look like this:\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_2.png\" alt=\"Debugger Output 2\"\u003e\n\u003c/p\u003e\n\u003cp\u003eNote, in the first line, that the message has been logged and that \u003ccode\u003eage\u003c/code\u003e is equal to 30. To verify that, enter \u003ccode\u003erepl\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to open the REPL, then enter \u003ccode\u003eage\u003c/code\u003e. You should see \u003ccode\u003e30\u003c/code\u003e output. Now type \u003ccode\u003eCtrl-C\u003c/code\u003e to exit the repl, and enter \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to advance to the next iteration of the loop. You should see the following:\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_3.png\" alt=\"Debugger Output 3\"\u003e\n\u003c/p\u003e\n\u003cp\u003eNote that the logged output now shows that age is 31. You can continue to step through the iterations by running \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt. At any point you can verify the value of \u003ccode\u003eage\u003c/code\u003e by entering the REPL and typing \u003ccode\u003eage\u003c/code\u003e at the prompt, then exit the REPL to continue stepping through. When you're done, enter \u003ccode\u003e.exit\u003c/code\u003e or \u003ccode\u003eCtrl-C\u003c/code\u003e twice to exit the debugger.\u003c/p\u003e\n\u003cp\u003eNow let's remove \u003ccode\u003edebugger;\u003c/code\u003e from our code and execute it by running \u003ccode\u003enode index.js\u003c/code\u003e. You should see the following:\u003c/p\u003e\n\u003cp\u003e\n    \u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/happy-birthday-to-me.png\" alt=\"Happy Birthday logged\"\u003e\n\u003c/p\u003e\n\u003ch3\u003eUsing \u003ccode\u003efor\u003c/code\u003e with Arrays\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003efor\u003c/code\u003e loop is often used to iterate over every element in an array. Let's rewrite our gift-wrapping action above as a \u003ccode\u003efor\u003c/code\u003e loop. Enter the following code into \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst gifts = [\"teddy bear\", \"drone\", \"doll\"];\u003cbr\u003e\u003cbr\u003efunction wrapGifts(gifts) {\u003cbr\u003e  for (let i = 0; i \u0026lt; gifts.length; i++) {\u003cbr\u003e    console.log(`Wrapped ${gifts[i]} and added a bow!`);\u003cbr\u003e    debugger;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return gifts;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ewrapGifts(gifts); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe started our counter, \u003ccode\u003ei\u003c/code\u003e, at \u003ccode\u003e0\u003c/code\u003e because arrays have zero-based indexes. Our condition states that we should run the code in the loop body while \u003ccode\u003ei\u003c/code\u003e is less than \u003ccode\u003egifts.length\u003c/code\u003e (\u003ccode\u003e3\u003c/code\u003e in the above example). Our iteration, \u003ccode\u003ei++\u003c/code\u003e, increments our counter by \u003ccode\u003e1\u003c/code\u003e at the end of each pass through the loop.\u003c/p\u003e\n\u003cp\u003eRun \u003ccode\u003enode inspect index.js\u003c/code\u003e in the terminal to enter the debugger, and \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to advance to the breakpoint. You should see \u003ccode\u003eWrapped teddy bear and added a bow!\u003c/code\u003e logged. In our loop body, we reference \u003ccode\u003egifts[i]\u003c/code\u003e. Since \u003ccode\u003ei\u003c/code\u003e starts out as \u003ccode\u003e0\u003c/code\u003e, during the first pass through the loop \u003ccode\u003egifts[i]\u003c/code\u003e is \u003ccode\u003egifts[0]\u003c/code\u003e, which is \u003ccode\u003e'teddy bear'\u003c/code\u003e. Continue stepping through the loop by entering \u003ccode\u003econt\u003c/code\u003e at the\u003ccode\u003edebug\u003c/code\u003e prompt and remember you can enter the REPL at any point to check the values of our variables, \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003egifts[i]\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWhen you're done, remove the \u003ccode\u003edebugger\u003c/code\u003e and execute the code by running \u003ccode\u003enode index.js\u003c/code\u003e. You should see the following logged to the terminal:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWrapped teddy bear and added a bow!\u003cbr\u003eWrapped drone and added a bow!\u003cbr\u003eWrapped doll and added a bow! \u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eAssignment\u003c/h3\u003e\n\u003cp\u003eIn the previous section, the \u003ccode\u003ewrapGifts()\u003c/code\u003e function allowed us to take any array of gifts and loop over them, logging our own message. Let's practice that with a slightly different idea. To complement our gift wrapping function, your task is to create a thank you card creator.\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Recall the difference between logging and returning values from a function. When we log information we are simply outputting text to a terminal or console. When we return data from a function we will be able to reference and use that information elsewhere because the data is being passed out of the function.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIn \u003ccode\u003eindex.js\u003c/code\u003e, build a function named \u003ccode\u003ewriteCards()\u003c/code\u003e that accepts two arguments: an array of string names, and an event name. Create a \u003ccode\u003efor\u003c/code\u003e loop with a counter that starts at \u003ccode\u003e0\u003c/code\u003e and increments at the end of each loop. The \u003ccode\u003efor\u003c/code\u003e loop should stop once it has iterated over the length of the array.\u003c/p\u003e\n\u003cp\u003eAs with our previous \u003ccode\u003ewrapGifts()\u003c/code\u003e function, you will create a custom message for each name inside the loop. Unlike that example, however, instead of simply logging the messages to the console, you will collect them in a \u003cem\u003enew\u003c/em\u003e array and \u003cstrong\u003ereturn\u003c/strong\u003e this array at the end of the function. (Refer back to the Array Methods lesson if you need a refresher on how we can add an element to an array.) The overall process should be:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003ecreate a new, empty array to hold the messages;\u003c/li\u003e\n    \u003cli\u003eiterate through the input array and, inside the loop, build out the 'thank you' message for each name using string interpolation, then add that message to the new array you created;\u003c/li\u003e\n    \u003cli\u003eafter the loop finishes and all of the messages have been added to the new array, return the new array.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eHere is an example of what a call to the \u003ccode\u003ewriteCards()\u003c/code\u003e function might look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewriteCards([\"Ada\", \"Brendan\", \"Ali\"], \"birthday\"); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we were to call the function using this function call, it should produce the following array as the return value:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e  \"Thank you, Ada, for the wonderful birthday gift!\",\u003cbr\u003e  \"Thank you, Brendan, for the wonderful birthday gift!\",\u003cbr\u003e  \"Thank you, Ali, for the wonderful birthday gift!\"\u003cbr\u003e]; \u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: The debugger isn't just for debugging code — you can also use it to help you write your function! Try building the structure of the loop, putting the \u003ccode\u003edebugger\u003c/code\u003e inside the loop body. Even before you start writing the code, you can enter the debugger's REPL and try out code until you figure out how to create the message and add it to an array. Once it's working in the REPL, transfer the code to \u003ccode\u003eindex.js\u003c/code\u003e, exit the debugger, and run the tests.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eThe \u003ccode\u003ewhile\u003c/code\u003e loop\u003c/h2\u003e\n\u003cp\u003eRecall from the earlier lesson that the \u003ccode\u003ewhile\u003c/code\u003e loop is similar to a \u003ccode\u003efor\u003c/code\u003e loop, repeating an action in a loop based on a condition. Both will continue to loop until that condition evaluates to \u003ccode\u003efalse\u003c/code\u003e. Unlike \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e only requires condition and loop statements:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewhile ([condition]) {\u003cbr\u003e  [loop body]\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe initialization and iteration statements of the \u003ccode\u003efor\u003c/code\u003e loop have not disappeared, though. In fact, we could rewrite our original \u003ccode\u003efor\u003c/code\u003e loop gift wrapping example using a \u003ccode\u003ewhile\u003c/code\u003e loop and achieve the exact same result:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst gifts = [\"teddy bear\", \"drone\", \"doll\"];\u003cbr\u003e\u003cbr\u003efunction wrapGifts(gifts) {\u003cbr\u003e  let i = 0; // the initialization moves OUTSIDE the body of the loop!\u003cbr\u003e  while (i \u0026lt; gifts.length) {\u003cbr\u003e    console.log(`Wrapped ${gifts[i]} and added a bow!`);\u003cbr\u003e    i++; // the iteration moves INSIDE the body of the loop!\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return gifts;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ewrapGifts(gifts);\u003cbr\u003e// LOG: Wrapped teddy bear and added a bow!\u003cbr\u003e// LOG: Wrapped drone and added a bow!\u003cbr\u003e// LOG: Wrapped doll and added a bow!\u003cbr\u003e// =\u0026gt; [\"teddy bear\", \"drone\", \"doll\"] \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that we've just moved the initialization and iteration statements — declaring the \u003ccode\u003ei\u003c/code\u003e variable \u003cem\u003eoutside\u003c/em\u003e the loop, and incrementing it \u003cem\u003einside\u003c/em\u003e the loop.\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eCAUTION\u003c/strong\u003e: When using \u003ccode\u003ewhile\u003c/code\u003e loops, it is easy to forget to involve iteration. Leaving iteration out can result in a condition that \u003cem\u003ealways\u003c/em\u003e evaluates to \u003ccode\u003etrue\u003c/code\u003e, causing an infinite loop!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eUsing a \u003ccode\u003ewhile\u003c/code\u003e loop enables us to check conditions that aren't based on a counter. Take a look at the following \u003cem\u003e\n        \u003ca href=\"https://en.wikipedia.org/wiki/Pseudocode\"\u003epseudocode\u003c/a\u003e\n    \u003c/em\u003e for an example of how we could use \u003ccode\u003ewhile\u003c/code\u003e in a program for planting a garden:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction plantGarden() {\u003cbr\u003e  let keepWorking = true;\u003cbr\u003e  while (keepWorking) {\u003cbr\u003e    chooseSeedLocation();\u003cbr\u003e    plantSeed();\u003cbr\u003e    waterSeed();\u003cbr\u003e    keepWorking = checkForMoreSeeds();\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can imagine that \u003cem\u003ewhile\u003c/em\u003e we have seeds, we take the same steps over and over: choose a location for a seed; plant it; water it. Then, check if there are more seeds. If \u003cem\u003enot\u003c/em\u003e, do not keep working.\u003c/p\u003e\n\u003ch2\u003eWhen to Use \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e\n\u003c/h2\u003e\n\u003cp\u003eJavaScript, like many programming languages, provides a variety of looping options. Loops like \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e are actually just slight variations of the same process. By providing a variety, we as programmers have a larger vocabulary to work with.\u003c/p\u003e\n\u003cp\u003eOften, you will see \u003ccode\u003ewhile\u003c/code\u003e loops simply being used as an alternative to \u003ccode\u003efor\u003c/code\u003e loops:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet countup = 0;\u003cbr\u003ewhile (countup \u0026lt; 10) {\u003cbr\u003e  console.log(countup++);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is perfectly fine as an alternative way to describe:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efor (let countup = 0; countup \u0026lt; 10; countup++) {\u003cbr\u003e  console.log(countup);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you're feeling a bit lost about when to use a \u003ccode\u003efor\u003c/code\u003e vs. a \u003ccode\u003ewhile\u003c/code\u003e loop, take a deep breath. Most of the time, a regular \u003ccode\u003efor\u003c/code\u003e loop will suffice. It's by far the most common looping construct in JavaScript. A general heuristic for choosing which loop to use is to first try a \u003ccode\u003efor\u003c/code\u003e loop. If that doesn't serve your purposes, then go ahead and try a \u003ccode\u003ewhile\u003c/code\u003e loop. Also, remember that you can always refer to the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\"\u003edocumentation on these loops\u003c/a\u003e at any time.\u003c/p\u003e\n\u003cp\u003eJust don't forget: with \u003ccode\u003ewhile\u003c/code\u003e, make sure you are updating the condition on each loop so that the loop eventually terminates!\u003c/p\u003e\n\u003ch2\u003eAssignment\u003c/h2\u003e\n\u003cp\u003eTo get more acquainted with \u003ccode\u003ewhile\u003c/code\u003e, your task is to write a function, \u003ccode\u003ecountDown\u003c/code\u003e, that takes in any positive integer and, starting from that number, counts down to zero using \u003ccode\u003econsole.log()\u003c/code\u003e. Note that this means that running \u003ccode\u003ecountdown(10);\u003c/code\u003e would actually log \u003cem\u003e11\u003c/em\u003e times:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e10\u003cbr\u003e9\u003cbr\u003e8\u003cbr\u003e7\u003cbr\u003e6\u003cbr\u003e5\u003cbr\u003e4\u003cbr\u003e3\u003cbr\u003e2\u003cbr\u003e1\u003cbr\u003e0 \u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eAfter some time programming in JavaScript, writing a \u003ccode\u003efor\u003c/code\u003e loop will come as naturally to you as wrapping one gift after another. Just as you slowly become comfortable using different words and vocabulary to better express yourself, you will become more acquainted with concepts like \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e until you are able to discern the nuanced differences in usage between them.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eCodecademy\n        \u003cul\u003e\n            \u003cli\u003e\n                \u003ca href=\"http://www.codecademy.com/glossary/javascript/loops#for-loops\"\u003e\u003ccode\u003efor\u003c/code\u003e loop\u003c/a\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n                \u003ca href=\"http://www.codecademy.com/glossary/javascript/loops#while-loops\"\u003e\u003ccode\u003ewhile\u003c/code\u003e loop\u003c/a\u003e\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003eMDN\n        \u003cul\u003e\n            \u003cli\u003e\n                \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"\u003e\u003ccode\u003efor\u003c/code\u003e loop\u003c/a\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n                \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\"\u003e\u003ccode\u003ewhile\u003c/code\u003e loop\u003c/a\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n                \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\"\u003eLoops and iteration\u003c/a\u003e\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g24c4d93361a80fbf21c9467cc2025562","title":"Moving Things with JavaScript by Acting on Events","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events-acting-on-events-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"#\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePractice moving elements on the page\u003c/li\u003e\n\u003cli\u003eDemonstrate how to move an element in response to a browser event\u003c/li\u003e\n\u003cli\u003eDemonstrate how to update an element's position on the page conditionally\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThink back to the first video game you played.\u003c/p\u003e\n\u003cp\u003eThink about the mechanics of that game. When you \u003cem\u003etilted\u003c/em\u003e a joystick or \u003cem\u003epressed\u003c/em\u003e a button it responded to your whims. It pulled you into its story by giving you a window into its world and a way of interacting with — shaping, even — that world. When you performed an \u003cstrong\u003e\u003cem\u003eevent\u003c/em\u003e\u003c/strong\u003e, the computer made the world respond: the little plumber from Brooklyn jumped (\u003cem\u003eSuper Mario Franchise\u003c/em\u003e), the undead warrior slashed at an evil foe (\u003cem\u003eDark Souls\u003c/em\u003e), or the banana-yellow guy ate the power pellet (\u003cem\u003ePac-Man\u003c/em\u003e).\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-acting-on-events/Image_36_VideoGame.png\" alt=\"Controlling classic video game characters Mario and Pacman\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eProgramming means that you can create such a world for other people.\u003c/em\u003e Sure, it'll be a while before you're ready to build something like one of the classic games above, but we can start with the essential steps. In this lab we'll learn how to move an element on a page in response to an \u003cem\u003eevent\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003cp\u003eGo ahead and run the tests. You'll see that you need to create two functions to get the tests passing: \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e and \u003ccode\u003emoveDodgerRight()\u003c/code\u003e. We'll write \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e together, then you'll create \u003ccode\u003emoveDodgerRight()\u003c/code\u003e on your own.\u003c/p\u003e\n\u003ch2\u003ePractice Moving Elements on the Page\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/acting-on-events-lab/rock-dodger.png\" alt=\"Rock Dodger!\"\u003e\u003c/p\u003e\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in the browser. You'll see a black square which represents the game field and a white rectangle at the bottom of that field which is our game piece, the dodger. Now open DevTools and click on the Elements tab. You'll see that the game field is a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \"game.\" Expand that \u003ccode\u003ediv\u003c/code\u003e and you'll see that the game piece is a second, nested \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \"dodger.\"\u003c/p\u003e\n\u003cp\u003eClick on the game \u003ccode\u003ediv\u003c/code\u003e and take a look at its CSS in the styles tab. You'll see that the game field has a height and width of 400px. Now click on the dodger and note that it has a height of 20px and a width of 40px. Finally, take a look at the inline style on the dodger \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e: the \u003ccode\u003ebottom\u003c/code\u003e and \u003ccode\u003eleft\u003c/code\u003e properties define the dodger's starting position \u003cem\u003erelative to its parent element, the game field\u003c/em\u003e. In other words, the lower left corner of the game field corresponds to\u003ccode\u003eleft\u003c/code\u003e and \u003ccode\u003ebottom\u003c/code\u003e positions of 0px. The starting values of the dodger's \u003ccode\u003ebottom\u003c/code\u003e and \u003ccode\u003eleft\u003c/code\u003e properties are what places it at the bottom center of the game field when our game launches.\u003c/p\u003e\n\u003cp\u003eBefore we can use JavaScript to move the dodger, we first need to grab it and save a reference to it in a variable. Enter the following in the console:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst dodger = document.getElementById(\"dodger\"); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAwesome. Now let's change its color:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edodger.style.backgroundColor = \"#000000\"; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhoa, where'd it go? Well, we changed the color to \u003ccode\u003e#000000\u003c/code\u003e, another way of expressing \"black.\" So it just blends in with the background.\u003c/p\u003e\n\u003cp\u003eLet's change it to something more visible.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edodger.style.backgroundColor = \"#FF69B4\"; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMuch better!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/skills-based-js/pink_dodger.png\" alt=\"pink dodger\"\u003e\u003c/p\u003e\n\u003cp\u003eAccessing the \u003ccode\u003estyle\u003c/code\u003e property of the \u003ccode\u003edodger\u003c/code\u003e element allows us to change things like the \u003ccode\u003ebackgroundColor\u003c/code\u003e, \u003ccode\u003eheight\u003c/code\u003e, \u003ccode\u003ewidth\u003c/code\u003e, etc. We can also use it to change an element's position on the page.\u003c/p\u003e\n\u003cp\u003eLet's start by moving the element up:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edodger.style.bottom = \"100px\"; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/skills-based-js/pink_dodger_bottom_100.png\" alt=\"up 100px\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Even though we're talking about \u003cem\u003enumeric\u003c/em\u003e coordinates, note that we need to move the dodger by assigning a new \u003cem\u003estring value\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWe can verify our dodger's current position by simply typing \u003ccode\u003edodger.style.left\u003c/code\u003e or \u003ccode\u003edodger.style.bottom\u003c/code\u003e into the console.\u003c/p\u003e\n\u003cp\u003eLet's return it to where it started by resetting the \u003ccode\u003ebottom\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edodger.style.bottom = \"0px\"; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let's visually verify that the dodger's position is determined relative to the game field by changing its \u003ccode\u003eleft\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edodger.style.left = \"0px\"; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should see the dodger nestled up against the bottom left corner of the game field.\u003c/p\u003e\n\u003ch2\u003eDemonstrate How to Move an Element in Response to a Browser Event\u003c/h2\u003e\n\u003cp\u003eNow that we know how to write the code to move the dodger, let's figure out how to tie that action to an event.\u003c/p\u003e\n\u003cp\u003eLet's say we want the user to be able to move the dodger to the left using the left arrow key. We learned in an earlier lesson that, when a key is pressed, the \u003ccode\u003ekeydown\u003c/code\u003e event provides a code to indicate which key it was. So the first thing we have to do is figure out what code is used to identify the left arrow key. We could look it up, but we're programmers — let's explore!\u003c/p\u003e\n\u003cp\u003eSo what do we mean when we say that an event provides a code? Any time an event listener is in place and the event it's listening for is triggered, a JavaScript object containing a bunch of information about the event is \u003cstrong\u003eautomatically\u003c/strong\u003e passed as an argument to the callback function. We can access that object and the information it contains by defining a parameter for the callback. It looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"keydown\", function(event) {\u003cbr\u003e  console.log(event);\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy defining the \u003ccode\u003eevent\u003c/code\u003e parameter in the parentheses, we've given the body of the callback access to that event object, which is what allows us to log it to the console. Note that, as with any JavaScript parameter (and, in fact, any JavaScript variable), we can give it any valid JavaScript variable name we like. By convention, and in keeping with programming best practice of using meaningful variable names, the name JavaScript programmers use for this parameter is usually either \u003ccode\u003eevent\u003c/code\u003e or \u003ccode\u003ee\u003c/code\u003e. You will see these in a lot of JavaScript code, and we recommend you use them as well.\u003c/p\u003e\n\u003cp\u003eThis pattern, when you first encounter it, is tricky to wrap your head around. Don't worry if it doesn't make total sense yet — it will become clearer as you continue through the curriculum. You might also want to read the excellent accepted answer in \u003ca href=\"https://stackoverflow.com/questions/35936365/what-exactly-is-the-parameter-e-event-and-why-pass-it-to-javascript-functions\"\u003ethis Stack Overflow thread\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eLet's take a look at what that event object looks like. Enter the code above into the console then click in the browser window (where the game field and dodger are rendered). Now, if you press the left arrow key, you should see a \u003ccode\u003eKeyboardEvent\u003c/code\u003e logged in the console. Expand the event and you'll see its properties listed; the one we're interested in is the \u003ccode\u003ekey\u003c/code\u003e property. Try pressing some other keys as well and check out their \u003ccode\u003ekey\u003c/code\u003e properties.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/acting-on-events-lab/keyboard-event.png\" alt=\"Keyboard Event\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e You can explore other event types as well: just change the name of the event in the code above.\u003c/p\u003e\n\u003cp\u003eNow that we know the code the event uses to identify the left arrow key, we can write the JavaScript code to move the dodger left when the key is pressed:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"keydown\", function(event) {\u003cbr\u003e  if (event.key === \"ArrowLeft\") {\u003cbr\u003e    const leftNumbers = dodger.style.left.replace(\"px\", \"\");\u003cbr\u003e    const left = parseInt(leftNumbers, 10);\u003cbr\u003e\u003cbr\u003e    dodger.style.left = `${left - 1}px`;\u003cbr\u003e  }\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo what are we doing here? Well, when our event listener detects a \u003ccode\u003ekeydown\u003c/code\u003e event, we first check to see whether the \u003ccode\u003ekey\u003c/code\u003e property of the event object has the value \"ArrowLeft.\" If it does, we get the current value of the dodger's \u003ccode\u003estyle.left\u003c/code\u003e property and use the \u003ca href=\"https://www.w3schools.com/jsref/jsref_replace.asp\"\u003eString \u003ccode\u003ereplace()\u003c/code\u003e method\u003c/a\u003e to strip out the \"px\", then store the result in \u003ccode\u003eleftNumbers\u003c/code\u003e. Next, we parse \u003ccode\u003eleftNumbers\u003c/code\u003e as an integer and store that result in \u003ccode\u003eleft\u003c/code\u003e. Finally, we update the dodger's \u003ccode\u003estyle.left\u003c/code\u003e property using string interpolation, injecting the current value minus 1. If the key that's pressed is \u003cem\u003enot\u003c/em\u003e the left arrow key, we do zilch. Try it out in the browser yourself!! (Be sure to refresh the page first.)\u003c/p\u003e\n\u003cp\u003eWe do still have a problem, though. Even though we're only going one pixel at a time, eventually our dodger will zoom (well, relatively speaking) right out of view.\u003c/p\u003e\n\u003cp\u003eHow can we prevent this? We need to check where the left edge of the dodger is and only move it if it hasn't yet reached the left edge of the game field.\u003c/p\u003e\n\u003ch2\u003eUpdate an Element's Position on the Page Conditionally\u003c/h2\u003e\n\u003cp\u003eOur callback function is starting to get pretty complex. This is probably a good time to break the dodger's movement out into a separate function. We want to move the dodger left if our \u003ccode\u003eif\u003c/code\u003e statement returns true, so let's pull out the body of that \u003ccode\u003eif\u003c/code\u003e statement into a function called \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eRefresh the page so we're starting with a blank slate, then grab the dodger again:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst dodger = document.getElementById(\"dodger\"); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we'll build our \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e function, adding a check on the current position of the dodger:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction moveDodgerLeft() {\u003cbr\u003e  const leftNumbers = dodger.style.left.replace(\"px\", \"\");\u003cbr\u003e  const left = parseInt(leftNumbers, 10);\u003cbr\u003e\u003cbr\u003e  if (left \u0026gt; 0) {\u003cbr\u003e    dodger.style.left = `${left - 1}px`;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe're doing essentially the same thing, but we first ensure that the dodger's left edge has not reached the left edge of its container.\u003c/p\u003e\n\u003cp\u003eNow let's wire this up to our event listener:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocument.addEventListener(\"keydown\", function(e) {\u003cbr\u003e  if (e.key === \"ArrowLeft\") {\u003cbr\u003e    moveDodgerLeft();\u003cbr\u003e  }\u003cbr\u003e}); \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow try moving the dodger past the left edge. No can do!\u003c/p\u003e\n\u003cp\u003eCopy the final code into \u003ccode\u003eindex.js\u003c/code\u003e and run the tests. You should now have the first one passing.\u003c/p\u003e\n\u003ch2\u003eLab\u003c/h2\u003e\n\u003cp\u003eNow it's your turn. With the code implemented from the code-along, think about what needs to change to make a \u003ccode\u003emoveDodgerRight()\u003c/code\u003e function. You'll need to add another condition to your event listener's callback function to call \u003ccode\u003emoveDodgerRight()\u003c/code\u003e. Then, inside the function, instead of moving the dodger \u003ccode\u003e${left - 1}px\u003c/code\u003e, you'll be moving it \u003ccode\u003e${left + 1}px\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It may seem logical that you would use the dodger's \u003ccode\u003estyle.right\u003c/code\u003e property to move the dodger right, but that won't work. The reason is that changing the \u003ccode\u003estyle.right\u003c/code\u003e property \u003cem\u003edoesn't change\u003c/em\u003e the \u003ccode\u003estyle.left\u003c/code\u003e property, which means we'd have conflicting information about where the dodger should be on the screen. JavaScript solves this problem by giving precedence to \u003ccode\u003estyle.left\u003c/code\u003e. In other words, once the user presses the left arrow key for the first time and the value of \u003ccode\u003estyle.left\u003c/code\u003e is changed, any subsequent changes to \u003ccode\u003estyle.right\u003c/code\u003e will be ignored.\u003c/p\u003e\n\u003cp\u003eFinally, implement the code needed to prevent the dodger from escaping off the right-hand side. How can we check whether the \u003cem\u003eright\u003c/em\u003e edge of the dodger has reached the \u003cem\u003eright\u003c/em\u003e edge of the game field? (Keep in mind that the dodger is 40px wide.)\u003c/p\u003e\n\u003cp\u003eOnce you've completed the work to get the tests to pass, the last step is to \"try out\" your application. Make sure it works the way you expect in the browser. In professional applications, tests can't cover 100% of the use of the application. It's important to realize that \"passing all the tests\" \u003cem\u003eis not the same\u003c/em\u003e as \"building a working application.\"\u003c/p\u003e\n\u003cp\u003eBe sure to do a human-level manual \"play through\" with your dodger to make sure your working code \u003cem\u003ereally works\u003c/em\u003e!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/vvLWidwZNYH5e/200w_d.gif\" alt=\"Passing the Tests is only part of the job\"\u003e\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eEvents and event handling are vital to web programming. JavaScript allows for dynamic page rendering, so users can interact with the contents of the page in real time. Knowledge of the basic techniques we've learned so far sets you on the road toward being able to create complex interactions like those in video games you may have played before!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6489116d7049319518b693eb20865cbd","title":"My Little Rainbow","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-rainbow-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eReview HTML basics\u003c/li\u003e \u003cli\u003eReview CSS basics\u003c/li\u003e \u003cli\u003eSpecify hexadecimal color values with CSS\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn this lab, we're going to make a rainbow with HTML \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e elements. And while we do it we're going to learn about HTML elements, CSS styling, CSS selectors, how color works in CSS and importing style sheets.\u003c/p\u003e  \u003cp\u003eBefore we start, here's some basic info about HTML and CSS. Skip to \u003ca href=\"#make-a-rainbow\"\u003eMake a Rainbow\u003c/a\u003e if you feel comfortable enough with HTML and CSS.\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies. Run \u003ccode\u003erspec\u003c/code\u003e as you work to see your test progress.\u003c/p\u003e  \u003ch2\u003eReview HTML Basics\u003c/h2\u003e  \u003cp\u003eHyper Text Markup Language, or HTML, is a way to structure a document with different parts. Each section of content is \u003cem\u003emarked\u003c/em\u003e by elements (using tags). Each element has its own special meaning that the browser uses to \u003cem\u003erender\u003c/em\u003e the HTML document. Use this \u003ca href=\"https://htmlcheatsheet.com/\"\u003echeat sheet\u003c/a\u003e on HTML elements for guidance.\u003c/p\u003e  \u003ch3\u003eElements\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eAll begin with \u003ccode\u003e\u0026lt;\u003c/code\u003e and end with \u003ccode\u003e\u0026gt;\u003c/code\u003e, e.g., \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e (this last part is a tag).\u003c/li\u003e \u003cli\u003eMost have an opening tag such as \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e and a closing tag \u003ccode\u003e\u0026lt;/div\u0026gt;\u003c/code\u003e.  \u003cul\u003e \u003cli\u003eThe \u003ccode\u003e/\u003c/code\u003e indicates to the browser that that tag is a closing tag.\u003c/li\u003e \u003cli\u003eThe element is everything between the tags and the tags themselves.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eSome tags are self-closing like the line break element \u003ccode\u003e\u0026lt;br\u0026gt;\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eElements can have IDs and classes to aid the browser in finding specific tags.  \u003cul\u003e \u003cli\u003eMust begin with a letter A-Z or a-z.\u003c/li\u003e \u003cli\u003eCan be followed by: letters (\u003ccode\u003eA-Za-z\u003c/code\u003e), digits (\u003ccode\u003e0-9\u003c/code\u003e), hyphens (\u003ccode\u003e-\u003c/code\u003e), and underscores (\u003ccode\u003e_\u003c/code\u003e).\u003c/li\u003e \u003cli\u003eIDs \u003cstrong\u003ecan\u003c/strong\u003e only be used once per page. E.g.: \u003ccode\u003e\u0026lt;div id=\"this-special-div\"\u0026gt;\u0026lt;/div\u0026gt;\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eClasses can be used as many times as you want. E.g.: \u003ccode\u003e\u0026lt;div class=\"a-less-special-div\"\u0026gt;\u0026lt;/div\u0026gt;\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eElements nested inside other elements are called children.  \u003cul\u003e \u003cli\u003eChildren inherit attributes from their parents.\u003c/li\u003e \u003cli\u003eDon't nest everything.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eElements next to one another are siblings.  \u003cul\u003e \u003cli\u003eSiblings do not inherit from one another but are important for selecting in CSS.\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eHere is an example of element relations:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;  \u0026lt;!-- the parent element --\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;  \u0026lt;!-- the first sibling element/the first child--\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;  \u0026lt;!-- the second sibling element/the second child --\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eReview CSS Basics\u003c/h2\u003e  \u003cp\u003eCascading Style Sheets, or CSS, is a language created to style HTML documents by telling the browser how specific elements should look. CSS does this by selecting elements based on their tag, ids, classes, or all of the above. The reason for CSS is the separation of concerns. We want HTML to focus on the structure and meaning of our content. We let CSS worry about how to make that information appear clear and engaging.\u003c/p\u003e  \u003ch3\u003eCSS selectors\u003c/h3\u003e  \u003cul\u003e \u003cli\u003eThey select elements to assign them styles.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003e*\u003c/code\u003e (wildcard) selects every element.\u003c/li\u003e \u003cli\u003eAn element, such as \u003ccode\u003ediv\u003c/code\u003e, will select all elements of that type.\u003c/li\u003e \u003cli\u003eThey select an id like \u003ccode\u003e#some-id\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eClasses are selected like this \u003ccode\u003e.some-class\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eTo select all children elements of a parent do something like this \u003ccode\u003ediv p\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eTo select multiple different elements separate them by commas like this \u003ccode\u003ediv, p, a\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eHere's an example of CSS styling:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e* {\u003cbr\u003e  color: red;  /* color in CSS refers to font color */\u003cbr\u003e}  /* all elements will have red font */ \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eMake a CSS Rainbow\u003c/h2\u003e  \u003cp\u003eIn the directory, you'll see three files: \u003ccode\u003eindex.html\u003c/code\u003e, \u003ccode\u003emain.css\u003c/code\u003e, and this file, \u003ccode\u003eREADME.md\u003c/code\u003e. Open \u003ccode\u003eindex.html\u003c/code\u003e (or run \u003ccode\u003ehttpserver\u003c/code\u003e if using the Learn IDE).\u003c/p\u003e  \u003cp\u003eIf everything is working correctly, you should see a white page.\u003c/p\u003e  \u003cp\u003eGood job!\u003c/p\u003e  \u003ch3\u003eMaking the Divs Visible\u003c/h3\u003e  \u003cp\u003eIf you look at the file in your text editor or use the inspector, you'll see that the basic HTML structure is present in \u003ccode\u003eindex.html\u003c/code\u003e. So why can't we see anything?\u003c/p\u003e  \u003cp\u003eWell, \u003ccode\u003ediv\u003c/code\u003es are \u003cem\u003estructural\u003c/em\u003e elements. They're used to \u003cem\u003einvisibly\u003c/em\u003e group other visible elements together. But the style sheet that would tell our \u003ccode\u003ediv\u003c/code\u003es to do something a little different hasn't been linked yet!\u003c/p\u003e  \u003cp\u003eLet's fix this by adding the style sheet to the \u003ccode\u003ehead\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;head\u0026gt; ...\u003cbr\u003e  \u0026lt;link rel=\"stylesheet\" type=\"text/css\" href=\"main.css\"\u0026gt; ...\u003cbr\u003e\u0026lt;/head\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003eLink\u003c/code\u003e is a self-closing tag that will create a relative path with the \u003ccode\u003ehref\u003c/code\u003e attribute. A relative path means the browser knows that the \u003ccode\u003emain.css\u003c/code\u003e file is in the same place as \u003ccode\u003eindex.html\u003c/code\u003e. The \u003ccode\u003ehead\u003c/code\u003e is a hidden part of the page that tells the browser where to find any other files it needs to display the page correctly, the \u003ccode\u003etitle\u003c/code\u003e for the tab, and any other possible important information.\u003c/p\u003e  \u003cp\u003eNow if you refresh the \u003ccode\u003eindex.html\u003c/code\u003e page in your browser you should see a perfectly \u003ca href=\"https://en.wikipedia.org/wiki/Goth_subculture\"\u003eGoth\u003c/a\u003e solid-black rainbow.\u003c/p\u003e  \u003cp\u003eWe got the basic outline because in the \u003ccode\u003emain.css\u003c/code\u003e all the \u003ccode\u003ediv\u003c/code\u003e elements were selected and given a \u003ccode\u003eborder\u003c/code\u003e whose color is \u003ccode\u003e#000\u003c/code\u003e, \"black.\" While we could set \u003ccode\u003ecolor: red;\u003c/code\u003e, we will have more colors available if we define colors without words.\u003c/p\u003e  \u003cp\u003eInstead of \u003ccode\u003ered\u003c/code\u003e, \u003ccode\u003egreen\u003c/code\u003e, or the exotic \u003ccode\u003etomato\u003c/code\u003e, professionals prefer a set of numbers with a base pair of 16 rather than a base pair of 10 like we use every day. These numbers are called \"hexadecimal\" and we can use them to make a wide range of colors.\u003c/p\u003e  \u003ch3\u003eSome Stuff You Should Know About Hex Colors (and Web Colors in General)\u003c/h3\u003e  \u003cp\u003eHex colors begin with \u003ccode\u003e#\u003c/code\u003e and are followed by, generally, 6 numbers, but some of these numbers are actually letters. The lowest single digit number in hex is \u003ccode\u003e0\u003c/code\u003e and the highest single digit number is \u003ccode\u003ef\u003c/code\u003e. This table might help to visualize what we mean by this.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eDecimal Numbers:      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\u003cbr\u003eHexadecimal Numbers:  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,  a,  b,  c,  d,  e,  f, 10 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHex colors work by creating Red, Green, Blue (RGB) values. Traditional RGB colors are on a scale of 0 to 255 for each of the three colors in the spectrum. Hex colors are considered true colors since they can represent ~16 million colors—but your eye can only see 10 million of those. So \u003ccode\u003e#000000\u003c/code\u003e translates to black since 0 reds, 0 green, 0 blues represents the absence of all colors, and \u003ccode\u003e#ffffff\u003c/code\u003e makes white since 255 reds, 255 greens, and 255 blues is the maximum of each of the colors.\u003c/p\u003e  \u003cp\u003eHex colors can be shortened to just three numbers when each RGB value is the same for each digit. So \u003ccode\u003e#11dd99\u003c/code\u003e can be written as \u003ccode\u003e#1d9\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eColoring the Rainbow\u003c/h3\u003e  \u003cp\u003eTo get ROYGBIV onto our rainbow we'll need seven hex colors. Red: \u003ccode\u003e#f00\u003c/code\u003e; Orange: \u003ccode\u003e#ffa500\u003c/code\u003e; Yellow: \u003ccode\u003e#ff0\u003c/code\u003e; Green: \u003ccode\u003e#00bc3f\u003c/code\u003e; Blue: \u003ccode\u003e#06f\u003c/code\u003e; Indigo: \u003ccode\u003e#8a2be2\u003c/code\u003e; Violet: \u003ccode\u003e#d300c9\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eAll we have to do next is select each div individually and apply each of those colors. That is a perfect use for ids since they're meant to style one specific element only. We need to add an id for each div so a logical name for each div would be the color that they have to be. It could be something random, but good names make for semantic code. So let's give the outermost div the id red.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"red\"\u0026gt;\u003cbr\u003e  ...\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo give that id some CSS attributes we'll go into \u003ccode\u003emain.css\u003c/code\u003e, select the id, and mark its color as red.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e#red { /* this selects any elements with the red id */\u003cbr\u003e  border-top-color: #f00;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo make sure the rainbow isn't so monochromatic you now need to repeat the above steps with the final six colors, and when you do you should have \u003ca href=\"http://i0.kym-cdn.com/photos/images/original/000/118/087/2468904593_6a7c692ab6.jpg\"\u003ea complete, colorful rainbow\u003c/a\u003e.\u003c/p\u003e  \u003ch2\u003eMoving On\u003c/h2\u003e  \u003cp\u003eWhen you're done with this lab type \u003ccode\u003erspec\u003c/code\u003e to confirm you've passed all the tests.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eAfter we reviewed HTML and CSS basics, we moved on to create an HTML rainbow. We linked our style sheet to our HTML page and added ids to our HTML elements. We then created CSS rules, using hexadecimal color values, for those elements to display all the colors on our completed HTML page.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga2062ca3a560440da1f85f9b41ab4600","title":"Objects Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-objects-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eCreate an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003ePerform operations on an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe covered the concepts of \u003ccode\u003eObject\u003c/code\u003es in JavaScript. Now it's time to put the concepts into practice.\u003c/p\u003e  \u003cp\u003eIf you haven't already, fork and clone this lab into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eFollow the steps below, running \u003ccode\u003enpm test\u003c/code\u003e as you go to get additional information from the tests.\u003c/p\u003e  \u003cp\u003eLet's say we are working on a program that will keep track of a company's employees. We want to store each \u003ccode\u003eemployee\u003c/code\u003e as an \u003ccode\u003eObject\u003c/code\u003e. We're starting small, so to begin with we'll only keep track of the employee's name and street address.\u003c/p\u003e  \u003cp\u003eTo start, define a \u003ccode\u003eemployee\u003c/code\u003e variable and assign it to an \u003ccode\u003eObject\u003c/code\u003e containing \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003estreetAddress\u003c/code\u003e keys; you can use whatever values you like. Use literal syntax to create your \u003ccode\u003eObject\u003c/code\u003e. Various updates will be applied to this variable (destructively and non-destructively) in this lab.\u003c/p\u003e  \u003cp\u003eOnce you've initialized the \u003ccode\u003eemployee\u003c/code\u003e Object, you'll need to create the following four functions:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003eupdateEmployeeWithKeyAndValue()\u003c/code\u003e: this function should take in three arguments: a \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e, a \u003ccode\u003ekey\u003c/code\u003e and a \u003ccode\u003evalue\u003c/code\u003e. This function should not mutate the \u003ccode\u003eemployee\u003c/code\u003e; it should return a \u003cem\u003enew\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003e that has an updated \u003ccode\u003evalue\u003c/code\u003e for the \u003ccode\u003ekey\u003c/code\u003e passed in.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003edestructivelyUpdateEmployeeWithKeyAndValue()\u003c/code\u003e: this function should work the same as \u003ccode\u003eupdateEmployeeWithKeyAndValue()\u003c/code\u003e but it \u003cem\u003eshould\u003c/em\u003e mutate the \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e passed in.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003edeleteFromEmployeeByKey()\u003c/code\u003e: this function should take in a \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e and a \u003ccode\u003ekey\u003c/code\u003e. It should delete the property with that \u003ccode\u003ekey\u003c/code\u003e from the \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e. This should not mutate the original \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e; it should return a \u003cem\u003enew\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003e that doesn't include the identified key-value pair.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003edestructivelyDeleteFromEmployeeByKey()\u003c/code\u003e: this function should work the same as \u003ccode\u003edeleteFromEmployeeByKey()\u003c/code\u003e but it \u003cem\u003eshould\u003c/em\u003e mutate the \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAs you work on your functions, be sure to think about when to use dot notation vs. bracket notation.\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve your solution on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your code will be present in the files.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lab, we practiced creating an \u003ccode\u003eObject\u003c/code\u003e and performing operations on it.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"\u003eMDN: Object\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g22a3a14b0020a3fc0b7ddd0cf2ee29bd","title":"Riyadh Blog","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-riyadh-blog-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-riyadh-blog-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-riyadh-blog-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-riyadh-blog-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003col\u003e \u003cli\u003eCreate an HTML structure for an existing mockup\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWeb developers are often asked to work from a mockup of a potential webpage, generally referred to as either a \u003ccode\u003emockup\u003c/code\u003e or \u003ccode\u003ecomp\u003c/code\u003e. In this lab, you'll be asked to use a mockup image, source text and images, and create an HTML structure that mirrors the mockup image.\u003c/p\u003e  \u003ch2\u003eGetting Started\u003c/h2\u003e  \u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e  \u003ch2\u003eCreate an HTML Structure for an Existing Mockup\u003c/h2\u003e  \u003ch3\u003eProcess\u003c/h3\u003e  \u003cp\u003eIn the \u003ccode\u003eindex.html\u003c/code\u003e file, use the comments in the code to place the content from \u003ccode\u003eSOURCE.md\u003c/code\u003e in the proper locations. The image file \u003ca href=\"https://s3.amazonaws.com/learn-verified/RIYADH-MOCKUP.jpg\"\u003e\u003ccode\u003eMOCKUP.jpg\u003c/code\u003e\u003c/a\u003e can be used as a reference to build the \u003ccode\u003eindex.html\u003c/code\u003e page as it appears.\u003c/p\u003e  \u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in a separate browser tab to see your progress as you work. Run \u003ccode\u003erspec\u003c/code\u003e as you go to see test results.\u003c/p\u003e  \u003ch3\u003eBonus\u003c/h3\u003e  \u003cp\u003eUse CSS in the \u003ccode\u003estyle.css\u003c/code\u003e file in the \u003ccode\u003ecss\u003c/code\u003e folder to change different aspects about your page such as:\u003c/p\u003e  \u003cul\u003e \u003cli\u003efont color\u003c/li\u003e \u003cli\u003efont size\u003c/li\u003e \u003cli\u003efont family\u003c/li\u003e \u003cli\u003echange the background image to a color\u003c/li\u003e \u003cli\u003echange the background color to a gradient\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eYou can also try modifying these styles on-the-fly by modifying them with the \u003ca href=\"https://www.youtube.com/watch?v=q3mWDijP_8w\"\u003edeveloper tools\u003c/a\u003e of your \u003ca href=\"http://www.sitepoint.com/edit-source-files-in-chrome/\"\u003ebrowser\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eYou might think: \"BUT I DON'T KNOW CSS\" (\u003cem\u003every well\u003c/em\u003e or \u003cem\u003eat all\u003c/em\u003e). Developers \u003cem\u003econstantly\u003c/em\u003e encounter this feeling. Since developers are constantly learning, we try to keep the commands as simple as possible. You might know more than you think! What happens if you change \u003ccode\u003ered\u003c/code\u003e to \u003ccode\u003egreen\u003c/code\u003e? What do you expect? How would you validate your guess? Developers usually call this process \"trying stuff\" or \"messing around\" or \"playing with stuff.\" While all those phrases sound like a joke, what they mean to say is that they're using the Scientific Method to validate their guesses into building a model.\u003c/p\u003e  \u003cp\u003eIt's possibly the most powerful learning technique possible. Toddlers and puppies are amazing at it!\u003c/p\u003e  \u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e  \u003cp\u003eCurrently, the work you've done on this assignment is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g7c61bb9be8719fbc9a59b5f0ad74ed64","title":"Testing With Javascript","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-what-is-a-test\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eLearn about testing in JavaScript\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eMany of the labs you will complete in this program use tests. Passing the tests verifies that the code you write behaves as desired and produces the expected results. But writing tests is also a way to provide specifics about exactly how the code should function. In a common development strategy known as \u003ca href=\"https://en.wikipedia.org/wiki/Test-driven_development\"\u003etest-driven development\u003c/a\u003e (or TDD), programmers \u003cem\u003efirst\u003c/em\u003e write the test for a specific function of the code \u003cem\u003ethen\u003c/em\u003e write the code to make the tests pass. TDD is considered the most reliable methodology for delivering quality code.\u003c/p\u003e\n\u003cp\u003eWhat this means is that the results of running the tests will be an important tool in figuring out how to get those tests passing. Code testing can feel like an abstract concept at first, but it's worth starting to learn how they work. When you're having difficulty passing a test, being able to read and understand the test output — and the tests themselves — can be an invaluable skill.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. (If you are using a different text editor, the command will be different.)\u003c/p\u003e\n\u003cp\u003eOpen up \u003ccode\u003eindex.js\u003c/code\u003e in your code editor. You are going to see mostly familiar things:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst name = \"Joe\";\u003cbr\u003econst height = 74;\u003cbr\u003econst message = `${name} is ${height} inches tall`;\u003cbr\u003e\u003cbr\u003emodule.exports = {name, height, message}; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should all look familiar except for that last line. You don't need to worry about it for now — just know that line of code makes the variables available to the test file.\u003c/p\u003e\n\u003cp\u003eTake a look at the \u003ccode\u003emessage\u003c/code\u003e variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst message = `${name} is ${height} inches tall`; \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can use \u003ccode\u003econsole.log\u003c/code\u003e to take a look at the value of the \u003ccode\u003emessage\u003c/code\u003e variable. To do that, first type \u003ccode\u003econsole.log(message);\u003c/code\u003e on the last line of \u003ccode\u003eindex.js\u003c/code\u003e and save the file. Next, navigate to the terminal, type \u003ccode\u003enode index.js\u003c/code\u003e in the command line and hit enter (be sure you're still in the lab's directory). The \u003ccode\u003enode\u003c/code\u003e command \u003cem\u003eexecutes\u003c/em\u003e the code in whatever file you specify (in this case, \u003ccode\u003eindex.js\u003c/code\u003e). You should see \u003ccode\u003e\"Joe is 74 inches tall\"\u003c/code\u003e logged in the terminal.\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: \u003ccode\u003econsole.log\u003c/code\u003e is one of the debugging tools you can use as you're writing your code. Logging a variable and executing the code will allow you to verify that the value of the variable is what you're expecting.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIn the line of code above, we are using \u003cem\u003estring interpolation\u003c/em\u003e to inject the values of the \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e variables into the message. Recall that, for this to work, you have to wrap the entire string in backticks and wrap the variables themselves in \u003ccode\u003e${}\u003c/code\u003e. If you'd like a refresher, try leaving out the \u003ccode\u003e${}\u003c/code\u003es or switching to a different type of quotes and run your code again to see what the value of \u003ccode\u003emessage\u003c/code\u003e is. The backticks and the \u003ccode\u003e${}\u003c/code\u003e tell Javascript to grab the \u003cem\u003evalue\u003c/em\u003e inside the variable, not just that variable name.\u003c/p\u003e\n\u003ch3\u003eThe Tests\u003c/h3\u003e\n\u003cp\u003eWe have our code, now let's take a look at the tests. They are located in the \u003ccode\u003etest\u003c/code\u003e folder inside a file named \u003ccode\u003eindex-test.js\u003c/code\u003e. In this lesson we'll get familiar with the tests, and then run them in the next lesson.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst index = require(\"../index.js\");\u003cbr\u003e\u003cbr\u003e/*\u003cbr\u003edescribe('what-is-a-test', () =\u0026gt; {\u003cbr\u003e  describe('Name', () =\u0026gt; {\u003cbr\u003e    it('returns \"Susan\"', () =\u0026gt; {\u003cbr\u003e      expect(index.name).toEqual('Susan')\u003cbr\u003e    })\u003cbr\u003e  })\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  describe('Height', () =\u0026gt; {\u003cbr\u003e    it('is less than 40', () =\u0026gt; {\u003cbr\u003e      expect(index.height).toBeLessThan(40)\u003cbr\u003e    })\u003cbr\u003e  })\u003cbr\u003e\u003cbr\u003e  describe('Message', () =\u0026gt; {\u003cbr\u003e    it('gives the name and height', () =\u0026gt; {\u003cbr\u003e      expect(index.message).toInclude(index.name)\u003cbr\u003e      expect(index.message).toInclude(index.height)\u003cbr\u003e    })\u003cbr\u003e  })\u003cbr\u003e})\u003cbr\u003e*/ \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the first line, we're enabling the tests to access the variables in \u003ccode\u003eindex.js\u003c/code\u003e. You don't need to worry about exactly how this works at this point; it's enough to understand that we're creating a variable \u003ccode\u003eindex\u003c/code\u003e that will contain the values of the three variables.\u003c/p\u003e\n\u003cp\u003eThe next thing to notice is that the test code itself is commented out using the \u003ccode\u003e/*\u003c/code\u003e and \u003ccode\u003e*/\u003c/code\u003e block commenting syntax. This is because, as mentioned above, we don't actually want to run the tests yet. In the next lesson, we will remove the \u003ccode\u003e/*\u003c/code\u003e and \u003ccode\u003e*/\u003c/code\u003e so we can run the tests.\u003c/p\u003e\n\u003cp\u003eNext, note that the test code consists of three individual tests (each starting with \u003ccode\u003edescribe\u003c/code\u003e) nested inside a block for the tests as a whole (also starting with \u003ccode\u003edescribe\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eThe first grouping is testing our \u003ccode\u003ename\u003c/code\u003e variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  describe('Name', () =\u0026gt; {\u003cbr\u003e    it('returns \"Susan\"', () =\u0026gt; {\u003cbr\u003e      expect(index.name).toEqual('Susan')\u003cbr\u003e    })\u003cbr\u003e  }) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTake a look at the line that begins with \u003ccode\u003eexpect\u003c/code\u003e. If we read it out loud, we get \"Expect \u003ccode\u003eindex.name\u003c/code\u003e to equal Susan\". That's exactly what it's saying! If we continue down to the Height section you'll see this code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  describe('Height', () =\u0026gt; {\u003cbr\u003e    it('is less than 40', () =\u0026gt; {\u003cbr\u003e      expect(index.height).toBeLessThan(40)\u003cbr\u003e    })\u003cbr\u003e  }) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAgain, reading the line starting with \u003ccode\u003eexpect\u003c/code\u003e out loud, we get \"Expect \u003ccode\u003eindex.height\u003c/code\u003e to be less than 40.\" Again, this is just what the test is checking. Let's look at the final one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  describe('Message', () =\u0026gt; {\u003cbr\u003e    it('gives the name and height', () =\u0026gt; {\u003cbr\u003e      expect(index.message).toInclude(index.name)\u003cbr\u003e      expect(index.message).toInclude(index.height)\u003cbr\u003e    })\u003cbr\u003e  }) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis one has two \u003ccode\u003eexpect\u003c/code\u003e statements. If you read them out as English you'll discover that the tests expect the value of \u003ccode\u003eindex.message\u003c/code\u003e to include both \u003ccode\u003eindex.name\u003c/code\u003e and \u003ccode\u003eindex.height\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOK Great. You now understand what the tests are saying. In the next lesson we are going to cover how to run them, and then you will solve the lab!\u003c/p\u003e\n\u003cp\u003eTo register completion of this lesson, submit the URL for your forked copy of the repo in Canvas.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3d984174c7fa0409eaa881c64a847f91","title":"Testing with JavaScript Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-what-is-a-test-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eRunning tests\u003c/li\u003e\n    \u003cli\u003eReading test results\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eRunning Tests\u003c/h2\u003e\n\u003cp\u003eYou understand how to read tests; now it's time to run the tests.\u003c/p\u003e\n\u003cp\u003eIf you haven't already, fork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. (If you are using a different text editor, the command will be different.) Finally, run \u003ccode\u003enpm install\u003c/code\u003e to install the lab's dependencies.\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003eWhat exactly do we mean by installing dependencies? Open the \u003ccode\u003epackage.json\u003c/code\u003e file and scroll down to the bottom. You'll see a list of 'DevDependencies'. What's listed here are JavaScript \u003cem\u003epackages\u003c/em\u003e: files or sets of files full of existing, reusable code. They are designed to be shared, allowing many developers to use the same code in their own projects. The packages you see listed in \u003ccode\u003epackage.json\u003c/code\u003e make it possible to run the lab's tests. In order to use the packages, we have to install them; \u003ccode\u003enpm install\u003c/code\u003e does that for us.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIf you take a look at \u003ccode\u003eindex.js\u003c/code\u003e and \u003ccode\u003eindex-test.js\u003c/code\u003e, you should see the same code as in the previous lesson. The only difference is that the test code in \u003ccode\u003eindex-test.js\u003c/code\u003e is no longer commented out.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImportant\u003c/strong\u003e: You should never need to make changes to test files unless a lab's instructions specifically tell you to do so.\u003c/p\u003e\n\u003cp\u003eTo run the tests, run \u003ccode\u003enpm test\u003c/code\u003e in the terminal. That's it!\u003c/p\u003e\n\u003cp\u003eThe next step is learning how to read the results that the tests give you.\u003c/p\u003e\n\u003ch2\u003eReading Results of Tests\u003c/h2\u003e\n\u003cp\u003eThe first time you run \u003ccode\u003enpm test\u003c/code\u003e, you should see something that looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; js-functions-lab@0.1.0 test /Users/mbenton/Desktop/curriculum-team/js-what-is-a-test-lab\u003cbr\u003e\u0026gt; mocha -R mocha-multi --reporter-options spec=-,json=.results.json\u003cbr\u003e\u003cbr\u003e  what-is-a-test\u003cbr\u003e    Name\u003cbr\u003e      1) returns \"Susan\"\u003cbr\u003e    Height\u003cbr\u003e      2) is less than 40\u003cbr\u003e    Message\u003cbr\u003e      ✓ gives the name and height\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  1 passing (552ms)\u003cbr\u003e  2 failing\u003cbr\u003e\u003cbr\u003e  1) what-is-a-test\u003cbr\u003e       Name\u003cbr\u003e         returns \"Susan\":\u003cbr\u003e\u003cbr\u003e      Error: Expected 'Joe' to equal 'Susan'\u003cbr\u003e      + expected - actual\u003cbr\u003e\u003cbr\u003e      -Joe\u003cbr\u003e      +Susan\u003cbr\u003e\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\u003cbr\u003e      at Context. (test/index-test.js:6:26)\u003cbr\u003e      at processImmediate (internal/timers.js:461:21)\u003cbr\u003e\u003cbr\u003e  2) what-is-a-test\u003cbr\u003e       Height\u003cbr\u003e         is less than 40:\u003cbr\u003e     Error: Expected 74 to be less than 40\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\u003cbr\u003e      at Context. (test/index-test.js:13:28)\u003cbr\u003e      at processImmediate (internal/timers.js:461:21)\u003cbr\u003e\u003cbr\u003enpm ERR! Test failed.  See above for more details. \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's break this down a bit. If you look about a third of the way down in the output, you'll see a summary of how the tests went:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  1 passing (552ms)\u003cbr\u003e  2 failing \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGreat! We've already got one test passing! Now let's see how we failed the other two tests.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  1) what-is-a-test\u003cbr\u003e       Name\u003cbr\u003e         returns \"Susan\":\u003cbr\u003e\u003cbr\u003e      Error: Expected 'Joe' to equal 'Susan'\u003cbr\u003e      + expected - actual\u003cbr\u003e\u003cbr\u003e      -Joe\u003cbr\u003e      +Susan\u003cbr\u003e\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\u003cbr\u003e      at Context. (test/index-test.js:6:26)\u003cbr\u003e      at processImmediate (internal/timers.js:461:21)\u003cbr\u003e\u003cbr\u003e  2) what-is-a-test\u003cbr\u003e       Height\u003cbr\u003e         is less than 40:\u003cbr\u003e     Error: Expected 74 to be less than 40\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\u003cbr\u003e      at Context. (test/index-test.js:13:28)\u003cbr\u003e      at processImmediate (internal/timers.js:461:21) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile there is no hard and fast rule, and there will be exceptions, it is most often best to address your test errors in order. So let's take a look at our first error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) what-is-a-test\u003cbr\u003e       Name\u003cbr\u003e         returns \"Susan\":\u003cbr\u003e\u003cbr\u003e      Error: Expected 'Joe' to equal 'Susan'\u003cbr\u003e      + expected - actual\u003cbr\u003e\u003cbr\u003e      -Joe\u003cbr\u003e      +Susan\u003cbr\u003e\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\u003cbr\u003e      at Context. (test/index-test.js:6:26)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere is the specific error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e      Error: Expected 'Joe' to equal 'Susan'\u003cbr\u003e      + expected - actual\u003cbr\u003e\u003cbr\u003e      -Joe\u003cbr\u003e      +Susan \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt tells us what the test is expecting (\u003ccode\u003eExpected 'Joe' to equal 'Susan'\u003c/code\u003e) and then gives us details about the \u003ccode\u003eexpected\u003c/code\u003e and \u003ccode\u003eactual\u003c/code\u003e values. This shows you exactly how the value your code is returning (the \u003ccode\u003eactual\u003c/code\u003e value) differs from what the test is looking for. Make sure you understand what this is telling you — it will come in handy in later labs!\u003c/p\u003e\n\u003cp\u003eThis error makes sense because we have the \u003ccode\u003ename\u003c/code\u003e variable set equal to \"Joe\" in our \u003ccode\u003eindex.js\u003c/code\u003e file. Let's change that line of code to set \u003ccode\u003ename\u003c/code\u003e equal to \"Susan\" instead. Run the tests again by typing \u003ccode\u003enpm test\u003c/code\u003e in the terminal's command line, and you should see that we are now passing 2 of the 3 tests!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  what-is-a-test\u003cbr\u003e    Name\u003cbr\u003e      ✓ returns \"Susan\"\u003cbr\u003e    Height\u003cbr\u003e      1) is less than 40\u003cbr\u003e    Message\u003cbr\u003e      ✓ gives the name and height\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  2 passing (736ms)\u003cbr\u003e  1 failing\u003cbr\u003e\u003cbr\u003e  1) what-is-a-test\u003cbr\u003e       Height\u003cbr\u003e         is less than 40:\u003cbr\u003e     Error: Expected 74 to be less than 40\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\u003cbr\u003e      at Context. (test/index-test.js:13:28)\u003cbr\u003e      at processImmediate (internal/timers.js:461:21) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWoot! You passed another one. Now go ahead and try to pass the remaining test on your own.\u003c/p\u003e\n\u003ch3\u003eCommon Errors\u003c/h3\u003e\n\u003cp\u003eWhile you are solving the other tests you may come across a few errors. Let's go over some common ones:\u003c/p\u003e\n\u003ch4\u003eVariable Not Defined\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003eReferenceError: name is not defined \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat one says that the \u003ccode\u003ename\u003c/code\u003e variable is not defined. That makes no sense! We initialized the \u003ccode\u003ename\u003c/code\u003e variable in \u003ccode\u003eindex.js\u003c/code\u003e! What that actually means is that the test couldn't find the variable \u003ccode\u003ename\u003c/code\u003e. You'll get this error if the name of one of your variables is different than the test is expecting. Check to make sure you used the correct variable names and look carefully for typos.\u003c/p\u003e\n\u003ch4\u003eUnexpected Identifier\u003c/h4\u003e\n\u003cpre\u003e\u003ccode\u003e/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/index.js:1\u003cbr\u003ecnst name = \"Susan\";\u003cbr\u003e     ^^^^\u003cbr\u003e\u003cbr\u003eSyntaxError: Unexpected identifier\u003cbr\u003e    at wrapSafe (internal/modules/cjs/loader.js:979:16)\u003cbr\u003e    at Module._compile (internal/modules/cjs/loader.js:1027:27)\u003cbr\u003e    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\u003cbr\u003e    at Module.load (internal/modules/cjs/loader.js:928:32)\u003cbr\u003e    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\u003cbr\u003e    at Module.require (internal/modules/cjs/loader.js:952:19)\u003cbr\u003e    at require (internal/modules/cjs/helpers.js:88:18)\u003cbr\u003e    at Object. (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/test/index-test.js:1:15)\u003cbr\u003e    at Module._compile (internal/modules/cjs/loader.js:1063:30)\u003cbr\u003e    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\u003cbr\u003e    at Module.load (internal/modules/cjs/loader.js:928:32)\u003cbr\u003e    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\u003cbr\u003e    at Module.require (internal/modules/cjs/loader.js:952:19)\u003cbr\u003e    at require (internal/modules/cjs/helpers.js:88:18)\u003cbr\u003e    at /Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:311:36\u003cbr\u003e    at Array.forEach ()\u003cbr\u003e    at Mocha.loadFiles (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:308:14)\u003cbr\u003e    at Mocha.run (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:849:10)\u003cbr\u003e    at Object.exports.singleRun (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:108:16)\u003cbr\u003e    at exports.runMocha (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:143:13)\u003cbr\u003e    at Object.exports.handler (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run.js:305:3)\u003cbr\u003e    at Object.runCommand (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/lib/command.js:242:26)\u003cbr\u003e    at Object.parseArgs [as _parseArgs] (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:1104:24)\u003cbr\u003e    at Object.parse (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:566:25)\u003cbr\u003e    at Object.exports.main (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/cli.js:68:6)\u003cbr\u003e    at Object. (/Users/lizburton_fs/Development/code/curriculum/flip/pac3/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/bin/mocha:133:29)\u003cbr\u003e    at Module._compile (internal/modules/cjs/loader.js:1063:30)\u003cbr\u003e    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\u003cbr\u003e    at Module.load (internal/modules/cjs/loader.js:928:32)\u003cbr\u003e    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\u003cbr\u003e    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\u003cbr\u003e    at internal/main/run_main_module.js:17:47\u003cbr\u003enpm ERR! Test failed.  See above for more details. \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhoa! So many words that make no sense. Don't worry though. The most important line is the \u003ccode\u003eSyntaxError: Unexpected identifier\u003c/code\u003e line. What that means is you have some sort of typo or syntax mistake. It could be a HUGE variety of things but usually, JS will try and give you a hint. This time it's pointing to the \u003ccode\u003ecnst name = \"Susan\"\u003c/code\u003e line of code. Take a look and read \u003cem\u003every carefully\u003c/em\u003e: \u003ccode\u003econst\u003c/code\u003e is misspelled. Whoops! Once we fix that everything will work.\u003c/p\u003e\n\u003cp\u003eOne note on this type of error is that it is sort of a catch-all. Tons and tons of problems end in that sort of error message. Whenever you see it, be sure to read over your code with a fine-toothed comb... and you'll find the problem!\u003c/p\u003e\n\u003ch2\u003eType Errors\u003c/h2\u003e\n\u003cp\u003eOn the second test, there is a chance you might see the following error:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1) what-is-a-test\u003cbr\u003e       Height\u003cbr\u003e         is less than 40:\u003cbr\u003e     Error: The \"actual\" argument in expect(actual).toBeLessThan() must be a number\u003cbr\u003e      at assert (node_modules/expect/lib/assert.js:29:9)\u003cbr\u003e      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\u003cbr\u003e      at Context. (test/index-test.js:13:28)\u003cbr\u003e      at processImmediate (internal/timers.js:456:21) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis error is slightly different than the last two. In this case, the test is giving us a unique message because it recognizes a problem. If we look at this test in \u003ccode\u003etest/index-test.js\u003c/code\u003e, we see this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  describe('Height', () =\u0026gt; {\u003cbr\u003e    it('is less than 40', () =\u0026gt; {\u003cbr\u003e      expect(index.height).toBeLessThan(40)\u003cbr\u003e    })\u003cbr\u003e  }) \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can see that the word \u003ccode\u003e\"actual\"\u003c/code\u003e in this case is referring to the \u003ccode\u003eindex.height\u003c/code\u003e variable. The error message is telling us that \u003ccode\u003eindex.height\u003c/code\u003e \u003cstrong\u003emust be a number\u003c/strong\u003e. If you're seeing this, make sure that you have set the \u003ccode\u003eheight\u003c/code\u003e variable to a \u003cstrong\u003enumber\u003c/strong\u003e that's less than 40 (e.g. \u003ccode\u003e39\u003c/code\u003e), not a \u003cstrong\u003estring\u003c/strong\u003e (\u003ccode\u003e\"39\"\u003c/code\u003e). The test will interpret the value as a string due to the quotation marks wrapping it.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eOnce you've got all your tests passing, you're ready to move on. Congratulations! You've solved your first JavaScript tests!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge41349987835784d87c61c0ea0ae29f2","title":"Your First HTML Tag Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-tag-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tag-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tag-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tag-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCode an \u003ccode\u003eh1\u003c/code\u003e tag\u003c/li\u003e\n\u003cli\u003eSet the inner text of the \u003ccode\u003eh1\u003c/code\u003e to \u003ccode\u003eHello, World!\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eSo far, we've seen how to markup content with HTML, how to structure an HTML document and what HTML tags look like. Now let's focus on writing a single HTML tag from scratch and examining each of its parts.\u003c/p\u003e\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally, run \u003ccode\u003ebundle\u003c/code\u003e to install the lab's dependencies. Run \u003ccode\u003erspec\u003c/code\u003e as you go to see your test progress.\u003c/p\u003e\n\u003ch2\u003eCode an \u003ccode\u003eh1\u003c/code\u003e Tag\u003c/h2\u003e\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in your text editor. Add the \u003ccode\u003eh1\u003c/code\u003e opening and closing tags.\u003c/p\u003e\n\u003ch2\u003eSet the Inner Text\u003c/h2\u003e\n\u003cp\u003eInside of the opening and closing \u003ccode\u003eh\u003c/code\u003e tags, insert the text: \u003ccode\u003eHello, World!\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou can run the tests with this lab via the \u003ccode\u003erspec\u003c/code\u003e command. Make sure you save the file before running the test suite. Failing tests will provide helpful error messages that you can use to debug your code — read them closely for hints!\u003c/p\u003e\n\u003ch3\u003eViewing Your Work in the Browser\u003c/h3\u003e\n\u003cp\u003eWhile working through these assignments, your general workflow should center on writing code in the text editor and periodically running the test suite in the terminal to check your work.\u003c/p\u003e\n\u003cp\u003eAnother great way to track your progress is to open up the HTML document in your browser and watch how each change you make in the text editor affects the visual layout in the browser.\u003c/p\u003e\n\u003cp\u003eOnce you have the HTML document open in your browser, you can make changes to it in the text editor, save the file, refresh the page in the browser, and see the changes instantly.\u003c/p\u003e\n\u003ch2\u003eSaving Your Work Remotely\u003c/h2\u003e\n\u003cp\u003eCurrently, the work you've done on this assignmnent is only on your local machine. To preserve work on your GitHub fork, you will need to stage the changes you've made, commit them, and push the commit up to GitHub. Use the following commands to do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit add .\u003cbr\u003egit commit -m \"Completed assignment\"\u003cbr\u003egit push \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you visit your fork on GitHub, you should now see that \u003cem\u003eyou've\u003c/em\u003e made the most recent commit, and your solution will be present in the files.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eCongratulations! You wrote your first HTML tag. Now you can use your knowledge of this basic building block to learn more HTML tags and see how they work with each other to create an entire HTML document structure.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/tags/tag_hn.asp\"\u003eh1-h6 Tags\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=Jc0HIoTLxe4\"\u003eSolving the First HTML Lab\u003c/a\u003e (If you're stuck, here's a video walk-through of the lab to help you out.)\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null}],"discussion_topics":[],"quizzes":[{"exportId":"g73c88b26f11a092929bb5af223eb18cf","title":"Phase 0/Pre-Work Assessment","type":"Quizzes::Quiz","content":"\u003cp\u003eThis quiz is meant to assess what you've learned from pre-work and includes questions on the major concepts we've covered. We recommend reviewing the Git, HTML, CSS, and JavaScript topics discussed so far.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eIf you don't know the answer to a question, you can select \"I don't know\". It's OK not to know everything and to admit when we're unsure.\u003c/span\u003e\u003c/p\u003e","assignmentExportId":"ge75a0cd65a357241646ceeac7e747e12","questionCount":36,"timeLimit":null,"attempts":3,"graded":true,"pointsPossible":36.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g724375468bf8dfe8fdaaa9e219104d6e","title":"Pre-Assessment","type":"Quizzes::Quiz","content":"\u003cp\u003eWelcome to your first quiz! Don't panic - we know you haven't done any coursework yet!\u0026nbsp;\u003c/p\u003e\n\u003cp\u003eThis is a diagnostic pre-assessment. It is absolutely okay if you do not do well on this - your score on this quiz will not impact your admission to our programs. The goal of this quiz is to record a baseline of your understanding coming into this pre-work course.\u003cbr\u003e\u003cbr\u003eThis quiz will cover the core topics we will go through in the pre-work, including Git, HTML, CSS, and JavaScript. If you don't know the answer to a question, that is okay - you can select \"I don't know\". It's expected that you won't know lots of things as you're just starting out!\u003cstrong\u003e\u003cbr\u003e\u003cbr\u003e\u003c/strong\u003e\u003c/p\u003e","assignmentExportId":"ga142b3353e9a172f815ee2d18f2c0319","questionCount":28,"timeLimit":null,"attempts":1,"graded":true,"pointsPossible":28.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g544e15b60caec96d8bb3f8d1077e981f","title":"Survey - CLI","type":"Quizzes::Quiz","content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the CLI module?\u003c/p\u003e\n\u003c/div\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g5b2bd131064ee51fc71fb436c3ca5b0a","title":"Survey - CSS","type":"Quizzes::Quiz","content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the CSS module?\u003c/p\u003e\n\u003c/div\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g05de37ff922717e49594a97a258589e0","title":"Survey - Git","type":"Quizzes::Quiz","content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Git module?\u003c/p\u003e\n\u003c/div\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8818be67f316d65066c52a9cae832c4a","title":"Survey - HTML","type":"Quizzes::Quiz","content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the HTML module?\u003c/p\u003e\n\u003c/div\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g190a90cde5117edd395c6e12dfee5837","title":"Survey - JavaScript Events","type":"Quizzes::Quiz","content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the JavaScript Events module?\u003c/p\u003e\n\u003c/div\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gde01f19dafa72168e6dd74166fb9e12f","title":"Survey - MacOS Environment Setup","type":"Quizzes::Quiz","content":"\u003cp\u003eHow many hours did you spend working on the MacOS Environment Setup module?\u003c/p\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gdd4baa9eaf6831d902b4fd5f06c246df","title":"Survey - Manipulating the DOM","type":"Quizzes::Quiz","content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Manipulating the DOM module?\u003c/p\u003e\n\u003c/div\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g272b197a89d8789e23445799e4beba75","title":"Survey - Programming as Conversation Part 1","type":"Quizzes::Quiz","content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Programming as Conversation Part 1 module?\u003c/p\u003e\n\u003c/div\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g1103aa73070a08f225a58bf001d3c0ae","title":"Survey - Programming as Conversation Part 2","type":"Quizzes::Quiz","content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Programming as Conversation Part 1 module?\u003c/p\u003e\n\u003c/div\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g22ccb00b541dd84f8a2b7aeab2987827","title":"Survey - Programming as Conversation Part 3","type":"Quizzes::Quiz","content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Programming as Conversation Part 3 module?\u003c/p\u003e\n\u003c/div\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gca6f7c6c7e6d29c80fd72994225d7988","title":"Survey - Project Mode","type":"Quizzes::Quiz","content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Project Mode module?\u003c/p\u003e\n\u003c/div\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge479a6a1aca83482eef51632f78e4d4c","title":"Survey - Windows Environment Setup","type":"Quizzes::Quiz","content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Windows Environment Setup module?\u003c/p\u003e\n\u003c/div\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gced431eb0e426afe9405833f0e214f00","title":"Survey - Working with Data Structures","type":"Quizzes::Quiz","content":"\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Working with Data Structures module?\u003c/p\u003e\n\u003c/div\u003e","assignmentExportId":"gd41d8cd98f00b204e9800998ecf8427e","questionCount":1,"timeLimit":null,"attempts":1,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null}],"files":null}