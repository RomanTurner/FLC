window.COURSE_DATA = {"language":"en","lastDownload":"2021-07-06T11:49:26-04:00","title":"Phase 4","modules":[{"id":24645,"name":"Discussion Questions","status":"completed","unlockDate":null,"prereqs":[],"requirement":null,"sequential":false,"exportId":"gd032a8921e7cbea62f4cdb11369ad1d9","items":[{"id":229925,"title":"Discussion Questions: Week 4 Day 4 Discussion","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"week-4-day-4-discussion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/week-4-day-4-discussion\" target=\"_blank\"\u003e \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e \u003c/a\u003e \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/week-4-day-4-discussion/issues/new\" target=\"_blank\"\u003e \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e \u003c/a\u003e\u003c/header\u003e\n\u003cp\u003eTake 30 minutes to discuss the following questions with your table group.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGenerate a new rails app called 'Rooty Tooty Blendy Fruity'.\u003c/li\u003e\n\u003cli\u003eGenerate two models, 'Smoothie' and 'Ingredients', using the \u003cem\u003eresource\u003c/em\u003e generator. \u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003eIf a smoothie has ingredients, what sort of Active Record association should these two models have?\u003c/li\u003e\n\u003cli\u003eBoth Smoothies and Ingredients should have name column with a String datatype, but what else should be included to set up the appropriate foreign-key relationship? Try to generate these resources without having to modify the migration files afterward. \u003cstrong\u003eBONUS:\u003c/strong\u003e What datatype could be used instead of :integer to generate a relationship between these models?\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eUpdate/Write any needed ActiveRecord associations in the two models that were generated.\u003c/li\u003e\n\u003cli\u003eDiscuss amongst your table how you might do the following from here:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli style=\"list-style-type: none;\"\u003e\n\u003cul\u003e\n\u003cli\u003eIf you were to implement fully RESTful Smoothie controller, what methods would be needed?\u003c/li\u003e\n\u003cli\u003eWhat views would be needed for this to work?\u003c/li\u003e\n\u003cli\u003eHow would you limit the route resource in config/routes.rb for Ingredients so it will only route to index and create?\u003c/li\u003e\n\u003cli\u003eSay we wanted to display a specific Smoothie using the show method and include the ingredients that belong to it within the view, what would be needed in the method to display both the Smoothie info and its related ingredients? For instance:\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e\"Green Mango Fusion\"\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e* 1 mango \u003cbr\u003e\u003cbr\u003e* 1 banana \u003cbr\u003e\u003cbr\u003e* 1 cup frozen berries \u003cbr\u003e\u003cbr\u003e* 1 bunch of kale \u003cbr\u003e\u003cbr\u003e* 2 cups milk\u003c/pre\u003e","exportId":"g2d701bbc0ee3024e160a3669b21b69eb"},{"id":229995,"title":"Discussion Questions: REST Discussion Questions","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rest-discussion-questions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rest-discussion-questions\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rest-discussion-questions/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003cp\u003eTake 30 minutes with your table choose a \u003cem\u003eresource\u003c/em\u003e that your server contains data about. A resource will be something like 'books', 'users', 'episodes', or 'characters', something that your users will be performing CRUD actions on.\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eWrite out the 7 RESTful routes that correspond to the 4 CRUD actions. Be sure to include the HTTP verb, the name of the route, the path (URL) and the corresponding CRUD action.\n  \u003cul\u003e\n    \u003cli\u003eWhat SQL (if applicable) would be fired in the controller actions for each of the routes?\u003c/li\u003e\n    \u003cli\u003eWhy might it be important that routes and resources have a conventional structure?\u003c/li\u003e\n    \u003cli\u003eWhich routes would you \u003ccode\u003erender\u003c/code\u003e a view and for which would you \u003ccode\u003eredirect to\u003c/code\u003e another route? Why?\u003c/li\u003e\n\u003c/ul\u003e\n  \u003c/li\u003e\n\n\n\n    \u003cli\u003eLet's say you have built an app that is a blogging platform. You have a Post and an Author model and you have controllers and routes for the CRUD actions of each model. You sit down at your computer and visit \u003ca href=\"http://www.youramazingsinatrablog.com/posts:\"\u003ewww.youramazingsinatrablog.com/posts:\u003c/a\u003e\n      \u003cul\u003e\n    \u003cli\u003eWhat kind of web request is this making? (i.e. is it a \u003ccode\u003eGET\u003c/code\u003e, \u003ccode\u003ePOST\u003c/code\u003e, etc request?)\u003c/li\u003e\n    \u003cli\u003eWhat controller action (i.e. which route in which controller) will recieve that web request?\u003c/li\u003e\n    \u003cli\u003eWhat is the response that your Sinatra app will send back to the client, i.e. the browser?\u003c/li\u003e\n\u003c/ul\u003e\n    \u003c/li\u003e\n\n\n\n   \u003cli\u003eSpend a few minutes mapping out a domain model for a parking lot. How would you model the relationship between cars and spaces? How would you keep track of how long a car had been parked in a space? How would you keep track of how much money someone would need to pay for having parked a certain amount of time?\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gb1c11ef9044fa325dc556764b9592983"},{"id":229996,"title":"Discussion Questions: RESTful Challenge","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"restful-kickstarter-challenge\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/restful-kickstarter-challenge\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/restful-kickstarter-challenge/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch3\u003eKickstarter\u003c/h3\u003e\n\u003cp\u003eWelcome to Kickstarter. Assume we have a model called \u003ccode\u003eProject\u003c/code\u003e that inherits from \u003ccode\u003eActiveRecord::Base\u003c/code\u003e, a corresponding table called \u003ccode\u003eprojects\u003c/code\u003e, and a controller called \u003ccode\u003eProjectsController\u003c/code\u003e that inherits from \u003ccode\u003eApplicationController\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eFor each of the following descriptions, write out the corresponding:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eThe HTTP Verb and URL (ie 'GET '/dogs'')\u003c/li\u003e\n    \u003cli\u003eThe rails controller action (ie 'dogs#index')\u003c/li\u003e\n    \u003cli\u003eThe corresponding CRUD action (ie 'READ)\u003c/li\u003e\n    \u003cli\u003eThe corresponding ActiveRecord method (ie 'all')\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eActions\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eDisplays all of the projects\u003c/li\u003e\n    \u003cli\u003eDisplays information about one project\u003c/li\u003e\n    \u003cli\u003eDisplays a form to create a new project\u003c/li\u003e\n    \u003cli\u003eCreates a new project based on given parameters\u003c/li\u003e\n    \u003cli\u003eDisplays a form to update an existing project\u003c/li\u003e\n    \u003cli\u003eUpdates an existing project with given parameters\u003c/li\u003e\n    \u003cli\u003eDeletes an existing project\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g5d0752f3e5d6e0e603d8f65524245f4f"},{"id":229997,"title":"Discussion Questions: RoR Routes Discussion Questions","type":"DiscussionTopic","indent":0,"locked":false,"lockAt":null,"unlockAt":null,"graded":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ror-routes-discussion-questions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ror-routes-discussion-questions\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ror-routes-discussion-questions/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003cp\u003eTake 30 minutes to discuss the following questions with your table group.\u003c/p\u003e\n\u003ch2\u003eRails router\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003e\n        \u003cp\u003eWhat are the seven conventional REST routes for a pizza resource? For each route list the HTTP verb, path and rails controller/action pair\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003eWhat benefits does naming a route provide? (e.g. get '/pizzas, to: 'pizzas#index, as: 'pizzas')\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003eAssuming you are using the standard REST routes, what rails built-in methods can be used to write concise routes?\u003c/p\u003e\n    \u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eRails Request and Response cycle\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003eWhat are the steps that Rails will take to implement the use cases below? List the verb/path, controller/action and associated SQL.\n      \u003cul\u003e\n        \u003cli\u003eDisplay a list of resources\u003c/li\u003e\n        \u003cli\u003eDelete a resource\u003c/li\u003e\n        \u003cli\u003eCreate a new resource\u003c/li\u003e\n        \u003cli\u003eDisplay one resource\u003c/li\u003e\n      \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e","exportId":"gb406c75208a4243b512c5b32c8fca795"}]},{"id":24047,"name":"Introduction to Rails","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g423d661fa33ff8d99a50d493f0f28944","items":[{"id":220224,"title":"Rails Static Requests","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-static-request-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-static-request-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-static-request-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-static-request-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eRouting\u003c/h2\u003e  \u003cp\u003eHow does your application know what view to render to users? This is where routing comes in. As a framework, Rails has a comprehensive routing system for both dynamic and static pages. Below are the differences between a static and dynamic route:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eStatic route\u003c/strong\u003e - A static route will render a view that does not change. Typically, you will not send parameters to it. Examples would be a site's about or contact pages.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eDynamic route\u003c/strong\u003e - Dynamic routes are pages that accept parameters and render different content based on those parameters. An example would be a blog's post page that contains a specific article.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIn this lesson we're going to specifically cover static pages to ensure that you can get a firm understanding of how routing works in a Rails application.\u003c/p\u003e  \u003cp\u003eBefore we dive into the code and routing configurations, it helps to know how HTTP works at a high level. Below is the flow that takes place when a user attempts to go to a page on a Rails application:\u003c/p\u003e  \u003col\u003e \u003cli\u003eA URL is entered into the browser; this is the HTTP request\u003c/li\u003e \u003cli\u003eThat request is sent to the server where the application's router interprets the request and sends a message to the controller mapped to that route\u003c/li\u003e \u003cli\u003eThe controller communicates with the view file mapped to the controller method\u003c/li\u003e \u003cli\u003eThe server returns that HTTP response, which contains the view page that can be viewed in the browser\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eImplementing a Static Route\u003c/h2\u003e  \u003cp\u003eLet's try this out in our application. I'm going to use a blogging application as a case study in this lesson.\u003c/p\u003e  \u003cp\u003eTo begin, start up the Rails server and go to \u003ccode\u003elocalhost:3000/about\u003c/code\u003e. As you will see, this throws a routing error: \u003ccode\u003eNo route matches [GET] \"/about\"\u003c/code\u003e. To fix this, stop the Rails server by pressing \u003ccode\u003econtrol + c\u003c/code\u003e. (Anytime you make a routing change you need to restart the Rails server.)\u003c/p\u003e  \u003cp\u003eNow draw the route by opening the \u003ccode\u003econfig/routes.rb\u003c/code\u003e file and adding the following route inside of the \u003ccode\u003edraw\u003c/code\u003e block:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eget 'about', to: 'static#about' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's look at the components that make up this route code:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eThe HTTP verb - in this case we're using the \u003ccode\u003eget\u003c/code\u003e HTTP verb.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThe path - \u003ccode\u003e'about'\u003c/code\u003e represents the path in the URL bar that the route will be mapped to.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThe controller action - \u003ccode\u003e'static#about'\u003c/code\u003e tells the Rails routing system that this route should be passed through the \u003ccode\u003estatic\u003c/code\u003e controller's \u003ccode\u003eabout\u003c/code\u003e action. If the term \u003ccode\u003eaction\u003c/code\u003e sounds foreign, actions are just Ruby speak for a method in a controller. So in the \u003ccode\u003eStaticController\u003c/code\u003e will be a method called \u003ccode\u003eabout\u003c/code\u003e that gets called when a user goes to \u003ccode\u003e/about\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eNow start the Rails server back up, go back to \u003ccode\u003elocalhost:3000/about\u003c/code\u003e, and click refresh. You should now see that the error message has changed. It's no longer complaining about not having a route; it should now say: \u003ccode\u003euninitialized constant StaticController\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's fix this by creating a new controller for our static pages, adding a new file to the application: \u003ccode\u003eapp/controllers/static_controller.rb\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThis will create a blank controller file that we can use to map to the routing file. Since there are a number of methods built into the Rails controller system, you will also want the controller to inherit from the application controller. The new file should have code that looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass StaticController \u0026lt; ApplicationController\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe standard naming convention for controllers is the name of the controller followed by the word \u003ccode\u003eController\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf you refresh the browser now, you will see a new error: \u003ccode\u003eThe action 'about' could not be found for StaticController\u003c/code\u003e. This means that it found our controller (woot!) but couldn't find the action \u003ccode\u003eabout\u003c/code\u003e in that controller. On a side note, since controllers are located within the \u003ccode\u003eapp\u003c/code\u003e directory, you can make changes to controller files and see the result in the browser without having to restart the Rails server.\u003c/p\u003e  \u003cp\u003eWe're making good progress (even though we're using EDD - error driven development), and it's good to see each of the errors so that when you encounter these in your real world projects you will know how to fix them. This current error is fixed by adding the following method in the static controller:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef about\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHitting refresh in the browser will give you a 'Template is missing' error; specifically, it says: \u003ccode\u003eMissing template static/about...\u003c/code\u003e. Also note that you do not have to restart the Rails server here. As long as your changes are within the \u003ccode\u003eapp\u003c/code\u003e directory, you can keep the server going; only code changes outside of the \u003ccode\u003eapp\u003c/code\u003e directory require stopping and starting the Rails server.\u003c/p\u003e  \u003cp\u003eWe're very close to getting our view to show up. Rails gives us two options for how views are mapped between the controller and view files. It's important to understand the difference between explicit and implicit rendering for the views:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eExplicit rendering\u003c/strong\u003e - for explicit rendering, Rails lets you dictate which view file you want to have the controller action mapped to.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eImplicit rendering\u003c/strong\u003e - for implicit rendering, Rails follows a standard convention that automatically looks for the view file with the same name as the controller action.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eFirst, let's try out explicit rendering. Create a new directory within the views directory called \u003ccode\u003estatic\u003c/code\u003e, and create a new file called \u003ccode\u003esome_page.html.erb\u003c/code\u003e. In that file add some basic HTML code, such as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;Hello from some page\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInside the \u003ccode\u003eabout\u003c/code\u003e method in the controller add the following code: \u003ccode\u003erender \"static/some_page\"\u003c/code\u003e. You can either provide the full view path (\u003ccode\u003estatic/some_page\u003c/code\u003e) or you can omit the enclosing directory, e.g., \u003ccode\u003erender \"some_page\"\u003c/code\u003e. Rails will automatically look inside the view directory with the same name as the controller. It's typically considered best practice to use the \u003ccode\u003erender \"some_page\"\u003c/code\u003e syntax since it won't rely on the name of the directory (in case that gets changed later on). So the \u003ccode\u003eabout\u003c/code\u003e method should look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef about\u003cbr\u003e  render \"some_page\"\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you refresh the \u003ccode\u003e/about\u003c/code\u003e page in the browser, you will see our heading of \u003cstrong\u003eHello from some page\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eTo compare that with how Rails utilizes implicit view rendering, create a new file in the \u003ccode\u003estatic\u003c/code\u003e views directory called \u003ccode\u003eabout.html.erb\u003c/code\u003e, and add some HTML code, such as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;Hello from the about page\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow completely remove the \u003ccode\u003erender\u003c/code\u003e call from the controller. If you refresh the browser, you will now see \u003cstrong\u003eHello from the about page\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eWhoa! How is an empty method generating the same behavior as when we were calling the view template directly? This follows along with the popular 'convention over configuration' pattern that Rails utilizes. This means that the Rails core team has built out a number of standardized processes, such as implicit view rendering to help make development life a little easier. It's not some kind of black code magic; behind the scenes, Rails has a large number of complex processes that make things like implicit view rendering work properly.\u003c/p\u003e  \u003cp\u003eSo is explicit or implicit better? Typically, you will find that you want to utilize the implicit workflow in your day to day coding practice. The rationale is quite practical. Imagine that you are taking over a legacy Rails project. As you are getting acclimated to the code, would you prefer that the previous dev followed a standard naming process, or would you rather be forced to look through each controller to see how the controller actions were mapped to the views? Rails has always had the goal of making the development process as efficient as possible, which is why it is typically best to follow these types of implicit procedures. With that being said, it is important to understand how the views are mapped to the controller, which is why we also walked through the explicit process.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eIn summary, you should now have a firm understanding of how to implement basic routing in your application for static pages. As a review, the process is below:\u003c/p\u003e  \u003col\u003e \u003cli\u003eThe server receives an HTTP request from the client\u003c/li\u003e \u003cli\u003eThe application processes the request through the \u003ccode\u003eroutes.rb\u003c/code\u003e file\u003c/li\u003e \u003cli\u003eThe route file maps the request through whichever controller method is called\u003c/li\u003e \u003cli\u003eThe controller then responds with the view that belongs to that specific method and delivers it to the client\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003ePhantomJS Errors\u003c/h2\u003e  \u003cp\u003eIf you receive this error:\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eCould not find an executable [\"phantomjs\"] on your path.\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eYou'll need to install PhantomJS on your computer before the tests will work. \u003c/p\u003e  \u003cp\u003eFor Mac users, run the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ebrew cask install phantomjs \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFor Windows users, run the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003enpm install -g phantomjs-prebuilt \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou can confirm the installation has worked by running \u003ccode\u003ephantomjs -v\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003ePuma Install Error\u003c/h2\u003e  \u003cp\u003eIf, when running \u003ccode\u003ebundle install\u003c/code\u003e, you get an error installing Puma, run the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egem install puma:4.3.5 -- --with-cflags=\"-Wno-error=implicit-function-declaration\" \u003c/code\u003e\u003c/pre\u003e","exportId":"gaa29fb9d45f83645bfed56303e581a6e"},{"id":220232,"title":"Rails Hello World Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-hello-world-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-hello-world-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-hello-world-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-hello-world-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn this lab you will integrate a static route so that the application will render a \"Hello World\" page.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDraw a route\u003c/li\u003e\n\u003cli\u003eMap a route to a controller/action\u003c/li\u003e\n\u003cli\u003eRender (implicitly or explicitly) a static template\u003c/li\u003e\n\u003cli\u003eCreate a static template\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eBelow are the tasks that you will need to complete in order to finish the lab:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eIntegrate a route for \u003ccode\u003elocalhost:3000/hello_world\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a static controller that inherits from the application controller and contains the \u003ccode\u003ehello_world\u003c/code\u003e action. You can have the call to the view file occur using either the implicit or explicit processes.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a file in the \u003ccode\u003eviews\u003c/code\u003e directory that will be called by the static controller's \u003ccode\u003ehello_world\u003c/code\u003e action, and add the heading \u003ccode\u003e\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\u003c/code\u003e to the file. The test is case sensitive, so make sure you enter it \u003cem\u003eexactly\u003c/em\u003e as shown.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe RSpec/Capybara test suite is currently not passing. Run the tests to see what you need to fix. It might be helpful to fire up the Rails server (via the \u003ccode\u003erails s\u003c/code\u003e command) in order to manually test the functionality of your route, action, and view. For students in the IDE, here's a \u003ca href=\"http://help.learn.co/the-learn-ide/common-ide-questions/accessing-localhost-in-the-learn-ide\"\u003eHelp Center article\u003c/a\u003e if you run into trouble with \u003ccode\u003erails s\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/rails-hello-world/rails_hello_world_ss.png\" alt=\"Demo Screenshot\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNote\u003c/em\u003e\u003c/strong\u003e: From this point forward, labs will not always be provided as a blank slate, with the responsibility for creating migrations, models, controllers, etc. falling on you. Instead, many labs will contain broken or incomplete code, and you will be required to add to or fix the existing code in order for the specs to pass. In some cases, code that you wrote in a previous lab will be provided. This way, you can focus on applying new concepts instead of getting bogged down in repetitive work, such as setting up a basic Rails app for every new lab. In other cases, you will be gaining the practical experience of learning how to work within an existing code base, which is what you will likely experience at your first job. Rare is the junior developer who gets to create from whole cloth: it’s far more likely that you’ll be onboarded to a project with unfamiliar code created by other developers. Always use the specs to guide you through what additions and/or modifications are needed, and remember: you do \u003cstrong\u003enot\u003c/strong\u003e have to run the specs in the order provided in the lab. Work on your troubleshooting chops!\u003c/p\u003e","exportId":"ga6aff13a4f2eec1cde20fa752f60d031"},{"id":220245,"title":"Rails and Active Record Models","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-activerecord-models-and-rails-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-activerecord-models-and-rails-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-activerecord-models-and-rails-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-activerecord-models-and-rails-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eActive Record's Role\u003c/h2\u003e\n\n\u003cp\u003eActive Record is the built-in ORM that Rails utilizes to manage the model\naspects of an application. What is an ORM? An ORM is an Object Relational\nMapping system, essentially this is the module that enables your application to\nmanage data in a method driven structure. This means that you are able to run\nqueries, add records, and perform all of the traditional database processes by\nleveraging methods as opposed to writing SQL manually. For example, below is the\ntraditional way that we would query a database of 'posts' using SQL:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM posts\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCompared with leveraging Active Record:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePost.all\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy using Active Record, you are also able to perform advanced query tasks, such\nas method chaining and scoping, which typically require less code and make for a\nmore readable query.\u003c/p\u003e\n\n\u003ch2\u003eActive Record Models\u003c/h2\u003e\n\n\u003cp\u003eSo if we have a database table, why do we need a model file? By using model\nfiles, we are able to create an organized layer of abstraction for our data. An\nimportant thing to remember is that at the end of the day the model file is a\nRuby class. It will typically inherit from the \u003ccode\u003eActiveRecord::Base\u003c/code\u003e class, which\nmeans that it has access to a number of methods that assist in working with the\ndatabase. However, you can treat it like a regular Ruby class, allowing you to\ncreate methods, data attributes, and everything else that you would want to do\nin a class file.\u003c/p\u003e\n\n\u003cp\u003eA typical model file will contain code such as but not limited to the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Scoping/Named/ClassMethods.html\"\u003eCustom scopes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eModel instance methods\u003c/li\u003e\n\u003cli\u003eDefault settings for database columns\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveModel/Validations/ClassMethods.html\"\u003eValidations\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html\"\u003eModel-to-model relationships\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html\"\u003eCallbacks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCustom algorithms\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cem\u003eIf any/all of the items above aren't familiar to you yet, don't worry. We'll\ncover them in future lessons. It's important to have an idea of what can be\nincluded in a model file, even at this early stage.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eCreating an Active Record Model\u003c/h2\u003e\n\n\u003cp\u003eAs a professional Rails developer, you will be expected to build applications by\nleveraging a \u003ca href=\"http://rspec.info/\"\u003eBDD\u003c/a\u003e process, so we will walk through how to\nbuild each feature with a test-first approach so that the tests can lead our\ndevelopment. However, please focus on the implementation code so that you can\nget a firm understanding of how to build a model, database table, etc.\u003c/p\u003e\n\n\u003cp\u003eIn order to get started, we will first create an RSpec test. We've provided a\nbasic skeleton of a Rails application using RSpec in this repo.\u003c/p\u003e\n\n\u003cp\u003eTo generate this app, we installed the Rails gem, then ran\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# the -T flag tells the Rails project generator not to\u003cbr\u003e# include TestUnit, the default testing framework:\u003cbr\u003erails new rails-activerecord-models-and-rails-readme -T\u003cbr\u003e\u003cbr\u003e# The Rails project generator created this directory for us:\u003cbr\u003ecd rails-activerecord-models-and-rails-readme\u003cbr\u003e\u003cbr\u003e# We modified the Gemfile to include\u003cbr\u003e# gem 'rspec-rails', '~\u0026gt; 3.0'\u003cbr\u003e# in the :development, :test group, then ran:\u003cbr\u003e\u003cbr\u003ebundle install\u003cbr\u003e\u003cbr\u003e# Finally, we created the initial RSpec config:\u003cbr\u003erails g rspec:install\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's create a new file: \u003ccode\u003espec/models/post_spec.rb\u003c/code\u003e. In that file, place the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'rails_helper'\u003cbr\u003e\u003cbr\u003edescribe Post do\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we run \u003ccode\u003ebundle exec rspec\u003c/code\u003e, it will throw an error since we don't have any\ncode in the application for our \u003ccode\u003ePost\u003c/code\u003e model yet. To fix this, create a new file\nin the \u003ccode\u003eapp/models\u003c/code\u003e directory called \u003ccode\u003epost.rb\u003c/code\u003e, and add the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Post\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will get the tests passing, but it still has some weird errors because we\nneed to create a schema file. You can do that by running \u003ccode\u003erake db:migrate\u003c/code\u003e.\n(There is no need to create a database with \u003ccode\u003erake db:create\u003c/code\u003e first. The test\nsuite will create a test database for us when we run our tests.) This will\ncreate the schema file and clear the warning. Now update the \u003ccode\u003ePost\u003c/code\u003e spec to test\nfor a \u003ccode\u003ePost\u003c/code\u003e being created. It should look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe Post do\u003cbr\u003e  it 'can be created' do\u003cbr\u003e    post = Post.create!(title: \"My title\", description: \"The post description\")\u003cbr\u003e    expect(post).to be_valid\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning this test gives us the error of: \u003ccode\u003eundefined method 'create!' for Post:Class\u003c/code\u003e. To implement this feature, let's create the database table for our\nposts. Create a new directory in the \u003ccode\u003edb/\u003c/code\u003e directory called \u003ccode\u003emigrate\u003c/code\u003e, and add a\nnew file called \u003ccode\u003e001_create_posts.rb\u003c/code\u003e. To that file, add the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass CreatePosts \u0026lt; ActiveRecord::Migration\u003cbr\u003e  def change\u003cbr\u003e    create_table :posts do |t|\u003cbr\u003e      t.string :title\u003cbr\u003e      t.text :description\u003cbr\u003e\u003cbr\u003e      t.timestamps null: false\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is a basic migration that will create a \u003ccode\u003eposts\u003c/code\u003e table that will have title\nand description columns, along with the built in timestamps. For a refresher on\nmigrations, see \u003ca href=\"http://edgeguides.rubyonrails.org/active_record_migrations.html\"\u003ethis documentation\u003c/a\u003e. This migration follows the\nstandard naming convention. When you want to create a table, the migration's\nclass name should reflect that; hence, \u003ccode\u003eCreatePosts\u003c/code\u003e. This is then reiterated by\nthe \u003ccode\u003e:posts\u003c/code\u003e argument passed to the \u003ccode\u003ecreate_table\u003c/code\u003e method. The filename itself\nneeds to be unique, and when you generate a migration automatically through a\nmodel or scaffold generator you will notice that the migration file name is\nprepended with a timestamp value to make sure that we can run migrations in the\norder they were written. \u003c/p\u003e\n\n\u003cp\u003eThe timestamp also plays a role in making sure that only new migrations run when\nwe run \u003ccode\u003erake db:migrate\u003c/code\u003e. The \u003ccode\u003edb/schema.rb\u003c/code\u003e file is updated with a version number \ncorresponding to the timestamp of the last migration you ran. When you run \n\u003ccode\u003erake db:migrate\u003c/code\u003e again, only migrations whose timestamps are greater than the \nschema's version number will run. So, the numbers at the beginning of the filenames \nof your migrations are required so ActiveRecord can be sure to run each of your \nmigrations just once and in the proper order.\u003c/p\u003e\n\n\u003cp\u003eAfter running \u003ccode\u003erake db:migrate\u003c/code\u003e we can see that our \u003ccode\u003edb/schema.rb\u003c/code\u003e file has been\nupdated with our new posts table. However, if we run our tests again we will\nstill see them failing due to the same error: \u003ccode\u003eundefined method `create!' for Post:Class\u003c/code\u003e. This is because we left out one very important piece of code from\nthe \u003ccode\u003ePost\u003c/code\u003e model. In order to leverage built-in methods such as \u003ccode\u003e.create!\u003c/code\u003e, we\nneed to have the Post class inherit from \u003ccode\u003eActiveRecord::Base\u003c/code\u003e. Update the\n\u003ccode\u003epost.rb\u003c/code\u003e model file to match the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow all of the tests are passing and we can create a new post correctly. Even\nthough we know this is working because our tests are passing, let's still test\nthis in the console. Open up the Rails console by running \u003ccode\u003erails console\u003c/code\u003e.\nRunning the console will load the entire Rails environment and give you command\nline access to the app and the database. The console is a powerful tool that you\ncan leverage in order to test out scripts, methods, and database queries.\u003c/p\u003e\n\n\u003cp\u003eOnce the session has started, run the following command to ensure it recognizes\nour new Post model:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePost.all\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf everything is set up properly, you will see that it returns an empty Active\nRecord object. Let's test creating a record using the console:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePost.create!(title: \"My title\", description: \"The post description\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow run the query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePost.last\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt returned our newly-created post!\u003c/p\u003e\n\n\u003cp\u003eWith our \u003ccode\u003ePost\u003c/code\u003e model working, let's add a new feature that returns a summary of\na post. As usual, start off by creating a spec for the feature:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eit 'has a summary' do\u003cbr\u003e  post = Post.create!(title: \"My title\", description: \"The post description\")\u003cbr\u003e  expect(post.post_summary).to eq(\"My title - The post description\")\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we run this, we'll get a failure since we do not have a \u003ccode\u003epost_summary\u003c/code\u003e method\nfor \u003ccode\u003ePost\u003c/code\u003e. Add that to the model file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef post_summary\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis now results in a failure since the method currently doesn't return anything. Update the \u003ccode\u003epost_summary\u003c/code\u003e method as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef post_summary\u003cbr\u003e  self.title + \" - \" + self.description\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow if you run the tests, all of them are passing and our \u003ccode\u003ePost\u003c/code\u003e model has an\ninstance method that returns a post summary. You can test this out in the Rails\nconsole as well by running a query on the record we created, such as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePost.last.post_summary\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt should return the summary value of the last post we created: \u003ccode\u003e\"My title - The post description\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAs you may have noticed, we did not have to create a controller, route, view,\netc. in order to get the \u003ccode\u003ePost\u003c/code\u003e model working. The data aspect of the\napplication can work separately from the view and data flow logic. This level of\nabstraction makes it efficient to test data behavior without having it strongly\ncoupled to how it is rendered to the user. With that being said, it is\nconsidered a best practice to have your controller and view files follow the\nproper naming convention so that the MVC associations are readable. For example,\nto build out the controller and view code for our \u003ccode\u003ePost\u003c/code\u003e model, we would create\nthe following structure:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a \u003ccode\u003eposts_controller.rb\u003c/code\u003e file that calls on the \u003ccode\u003ePost\u003c/code\u003e model\u003c/li\u003e\n\u003cli\u003eCreate a \u003ccode\u003eviews/posts/\u003c/code\u003e directory that stores the views related to the \u003ccode\u003ePost\u003c/code\u003e model\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAlso, if you are coming from other programming languages you may be wondering\nhow exactly we are able to connect to the database automatically without having\nto create connection strings. The reason for this simplicity resides in the\n\u003ccode\u003econfig/database.yml\u003c/code\u003e file that was generated when we created our application\nand ran \u003ccode\u003erake db:create\u003c/code\u003e. In that file, you will see that the development, test,\nand production databases are all configured. From that stage, the\n\u003ccode\u003eActiveRecord::Base.connection\u003c/code\u003e method connects your application to the\ndatabase, which is another benefit of having our model classes inherit from the\n\u003ccode\u003eActiveRecord::Base\u003c/code\u003e module.\u003c/p\u003e\n\n\u003cp\u003eBeing able to work in different environments is one of the strong points of\nRails, and the database.yml file takes advantage of this feature by having\ndifferent database options for each type of environment. If you take a look at\nthe file, you can see that you can establish different database adapters, pools,\ntimeout values, etc. for each environment specifically. This allows for you to\nhave a setup such as using SQLite locally and Postgres in production, along with\nhaving a segmented database environment for your testing suite. Some of these\nitems are components that you won't need until you get into more advanced\napplications. However, it's good to know where these items are located in the\nfile system for when you get to that point. Essentially, this file includes a\nlot of stuff you will rarely have to handle, but just remember that if anything\nrequires database configuration it will be here.\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eWe covered quite a bit of material in this lesson. You should now have a firm\nunderstanding of Active Record models in Rails. Active Record is a powerful tool\nthat enables developers to focus on the logic of their applications while\nstreamlining processes such as connecting to the database, running queries, and\nmuch more.\u003c/p\u003e\n\n\u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/rails-activerecord-models-and-rails-readme\"\u003eActive Record Models and Rails\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","exportId":"g0179a881fe5ac89fd305332d131a75fb"},{"id":220253,"title":"Rails and Active Record Models Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-activerecord-model-rails-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-activerecord-model-rails-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-activerecord-model-rails-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-activerecord-model-rails-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a migration by hand\u003c/li\u003e\n\u003cli\u003eCreate a model by hand\u003c/li\u003e\n\u003cli\u003eBuild a model instance method\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eBuilding a Model\u003c/h2\u003e\n\n\u003cp\u003eYou can find the test suite for this application in the \u003ccode\u003espec/models\u003c/code\u003e directory and run them with the command: \u003ccode\u003ebundle exec rspec\u003c/code\u003e. This lab tests to ensure that your app can create records and that it has an instance method that can be called on the model.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a table by hand named \u003ccode\u003estudents\u003c/code\u003e that has the columns: \u003ccode\u003efirst_name\u003c/code\u003e and \u003ccode\u003elast_name\u003c/code\u003e – this should be accomplished by creating a new database migration\u003c/li\u003e\n\u003cli\u003eCreate a model for the students' table that inherits from ActiveRecord::Base\u003c/li\u003e\n\u003cli\u003eImplement a \u003ccode\u003eto_s\u003c/code\u003e instance method in the model that will return the concatenated first and last names for students. For example: \u003ccode\u003efirst_name: \"Daenerys\", last_name: \"Targaryen\" =\u0026gt; \"Daenerys Targaryen\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp data-visibility=\"hidden\"\u003eView \u003ca href=\"https://learn.co/lessons/rails-activerecord-model-rails-lab\" title=\"ActiveRecord Model Rails Lab\"\u003eActiveRecord Model Rails Lab\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","exportId":"gc158211ca188326ac6210c0571102321"},{"id":220266,"title":"Rails Dynamic Request","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-dynamic-request-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-dynamic-request-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-dynamic-request-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-dynamic-request-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eReview\u003c/h2\u003e  \u003cp\u003eYou already know how to create a static request, which is where you create a page that doesn't take any parameters and simply renders a view. For example: \u003ccode\u003elocalhost:3000/about\u003c/code\u003e. For Rails to process this request, the \u003ccode\u003eroutes.rb\u003c/code\u003e file contains a route such as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eget 'about', to: \"static#about\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is mapped to the \u003ccode\u003estatic\u003c/code\u003e controller and its \u003ccode\u003eabout\u003c/code\u003e action, which renders the \u003ccode\u003eabout.html.erb\u003c/code\u003e view template.\u003c/p\u003e  \u003ch2\u003eDynamic Requests\u003c/h2\u003e  \u003cp\u003eAccording to REST, if we want to retrieve the post with an id of \u003ccode\u003e42\u003c/code\u003e, we should navigate to \u003ccode\u003e/posts/42\u003c/code\u003e. It's technically possible to create a new line in your routes file for each post... but that would quickly get ridiculous. You would have to modify your web server every time someone posts! Enter: dynamic routes. A breakdown of the dynamic route process flow is below:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eThe \u003ccode\u003eroutes.rb\u003c/code\u003e file takes in the request and processes it like normal, except this time it also parses the \u003ccode\u003e42\u003c/code\u003e as a parameter and passes it to the posts controller.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eFrom that point, the controller action that you write will parse the \u003ccode\u003e42\u003c/code\u003e parameter and run a query on the Post model, storing the result in an instance variable.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eFinally, the controller passes the instance variable to the associated view, which renders details of that specific post record for the client.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIn review, what's the difference between static and dynamic routes?\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eStatic routes render pages that have a hard-coded path connected to them. For example, the \u003ccode\u003e/welcome\u003c/code\u003e path will always show the \u003ccode\u003ewelcome\u003c/code\u003e page.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eDynamic routes will render different data based on the parameters passed to the route. For example, when \u003ccode\u003e42\u003c/code\u003e is passed in as the parameter to the \u003ccode\u003e/posts/:id\u003c/code\u003e route, the app should render the data for the \u003ccode\u003epost\u003c/code\u003e with an ID of \u003ccode\u003e42\u003c/code\u003e. When \u003ccode\u003e222\u003c/code\u003e is passed in, the app should render the data for the \u003ccode\u003epost\u003c/code\u003e with an ID of \u003ccode\u003e222\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eCode Implementation\u003c/h2\u003e  \u003cp\u003eIn order to setup a dynamic request feature, we will start by writing a test to verify that the page exists:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# spec/features/post_spec.rb\u003cbr\u003e\u003cbr\u003erequire 'rails_helper'\u003cbr\u003e\u003cbr\u003edescribe 'navigate' do\u003cbr\u003e  before do\u003cbr\u003e    @post = Post.create(title: \"My Post\", description: \"My post desc\")\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it 'loads the show page' do\u003cbr\u003e    visit \"/posts/#{@post.id}\"\u003cbr\u003e    expect(page.status_code).to eq(200)\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRunning \u003ccode\u003erspec\u003c/code\u003e gives us an expected error of: \u003ccode\u003eActionController::RoutingError: No route matches [GET] \"/posts/1\"\u003c/code\u003e. To correct this error, let's draw a route in \u003cem\u003econfig/routes.rb\u003c/em\u003e that maps to a show action in the PostsController:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eget 'posts/:id', to: 'posts#show' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere you will notice something that's different from the static route. The \u003ccode\u003e/:id\u003c/code\u003e tells the routing system that this route can receive a parameter and that the parameter will be passed to the controller's show action. With this route in place, let's run our tests again.\u003c/p\u003e  \u003cp\u003eYou should see a new failure this time: \u003ccode\u003eActionController::RoutingError: uninitialized constant PostsController\u003c/code\u003e. Once we stub out a \u003ccode\u003ePostsController\u003c/code\u003e class in \u003ccode\u003eapp/controllers/posts_controller.rb\u003c/code\u003e, running the tests again will give us yet another new failure: \u003ccode\u003eAbstractController::ActionNotFound: The action 'show' could not be found for PostsController\u003c/code\u003e. This means that we need to create a corresponding \u003ccode\u003eshow\u003c/code\u003e action in the PostsController. Let's get this failure fixed with the code below:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003eclass PostsController \u0026lt; ApplicationController\u003cbr\u003e  def show\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRun the tests again. Now we see a failure saying that we are missing the \u003ccode\u003eposts/show\u003c/code\u003e view template. Let's fix that by creating a \u003ccode\u003eposts\u003c/code\u003e folder in the \u003ccode\u003eviews\u003c/code\u003e directory and creating a \u003ccode\u003eshow.html.erb\u003c/code\u003e file in the new \u003ccode\u003eviews/posts\u003c/code\u003e directory.\u003c/p\u003e  \u003cp\u003eRunning the tests now shows that we're all green, which means that the request will be properly routed through the controller and view and returns an HTTP status code of \u003ccode\u003e200\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf you start the Rails server and navigate to \u003ccode\u003e/posts/1\u003c/code\u003e or any other \u003ccode\u003epost\u003c/code\u003e record, the router will know what you're talking about. However, the controller still needs to be told what to do with the \u003ccode\u003eid\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eNow that we have the routing configured, let's build a test to see if the post content is rendered on the show page with the title in an \u003ccode\u003eh1\u003c/code\u003e tag and the description in a \u003ccode\u003ep\u003c/code\u003e tag. We'll start by creating a test for the title:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# spec/features/post_spec.rb\u003cbr\u003e\u003cbr\u003erequire 'rails_helper'\u003cbr\u003e\u003cbr\u003edescribe 'navigate' do\u003cbr\u003e  before do\u003cbr\u003e    @post = Post.create(title: \"My Post\", description: \"My post desc\")\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it 'loads the show page' do\u003cbr\u003e    visit \"/posts/#{@post.id}\"\u003cbr\u003e    expect(page.status_code).to eq(200)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it 'shows the title on the show page in an h1 tag' do\u003cbr\u003e    visit \"/posts/#{@post.id}\"\u003cbr\u003e    expect(page).to have_css(\"h1\", text: \"My Post\")\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis gives us a failure that says: \u003ccode\u003eexpected to find css \"h1\" with text \"My Post\" but there were no matches\u003c/code\u003e. We first need to get the ID sent by the user through the dynamic URL. This variable is passed into the controller in a hash called \u003ccode\u003eparams\u003c/code\u003e. Since we named the route \u003ccode\u003e:id\u003c/code\u003e, the ID will be the value of the \u003ccode\u003e:id\u003c/code\u003e key, stored in \u003ccode\u003eparams[:id]\u003c/code\u003e. Let's set that up here:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef show\u003cbr\u003e  @post = Post.find(params[:id])\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this line, our show action is running a database query on the Post model that will return a post with an ID that matches the route parameters. It will store this record in the \u003ccode\u003e@post\u003c/code\u003e instance variable and make it available to the \u003ccode\u003eshow.html.erb\u003c/code\u003e file. Let's get our spec passing by placing the post's title on the show view template:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/show.html.erb --\u0026gt;\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe're back to green! Now let's implement the description spec:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eit 'shows the description on the show page in a p tag' do\u003cbr\u003e  visit \"/posts/#{@post.id}\"\u003cbr\u003e  expect(page).to have_css(\"p\", text: \"My post desc\")\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will give us a failure since there are no matches on the template yet. To implement this fix, update the view:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/show.html.erb --\u0026gt;\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;\u0026lt;%= @post.description %\u0026gt;\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we're passing again, and you now know how to create dynamic routes in Rails! However, we would be remiss if we didn't follow the full \"Red, Green, Refactor\" TDD workflow.\u003c/p\u003e  \u003ch3\u003eResource routing\u003c/h3\u003e  \u003cp\u003eThere are a few elements of the application that can be refactored. Instead of the long, drawn out \u003ccode\u003eget\u003c/code\u003e route we placed in our \u003ccode\u003eroutes.rb\u003c/code\u003e file, we can use Ruby's RESTful defaults and the \u003ccode\u003eresources\u003c/code\u003e method. Problem is, we only have one of the seven RESTful routes. Thankfully, we can pass in an \u003ccode\u003eonly\u003c/code\u003e option, selecting which of the seven RESTful routes we care about. In this case, we only care about the \u003ccode\u003eshow\u003c/code\u003e action.\u003c/p\u003e  \u003cp\u003eRemove:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eget 'posts/:id', to: 'posts#show' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eReplace with:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eresources :posts, only: :show \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe will go into detail on what the \u003ccode\u003eresources\u003c/code\u003e method does in a future lesson. For right now, just know that it deals with the seven key RESTful routes. In this case, we limited it to only make the \u003ccode\u003eshow\u003c/code\u003e action available.\u003c/p\u003e  \u003cp\u003eRun the tests for a final time, and they should still be passing. Nice work!\u003c/p\u003e","exportId":"gd230ff3db0077264cae6339e50952022"},{"id":220270,"title":"RESTful Index Action Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-restful-index-action-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-restful-index-action-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-restful-index-action-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-restful-index-action-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDraw a get route\u003c/li\u003e\n\u003cli\u003eMap a route to a controller action\u003c/li\u003e\n\u003cli\u003eDefine a controller action\u003c/li\u003e\n\u003cli\u003eLoad instances from ActiveRecord into a controller instance variable\u003c/li\u003e\n\u003cli\u003eRender a template\u003c/li\u003e\n\u003cli\u003eUse an instance variable from a controller action in a template\u003c/li\u003e\n\u003cli\u003eIterate over an ActiveRecord collection in ERB\u003c/li\u003e\n\u003cli\u003eBuild a classical index action/view\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eRESTful Routes\u003c/h2\u003e\n\n\u003cp\u003eIn this lab you will walk through how to build each element required to render a\nlist of students out in the browser. The RSpec/Capybara tests for this lab can\nbe found in \u003ccode\u003espec/features\u003c/code\u003e. Both tests should be passing to complete the lab.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eRun \u003ccode\u003ebundle install\u003c/code\u003e from your terminal\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a controller for students and have it inherit from\nApplicationController\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a route for the path \u003ccode\u003e/students\u003c/code\u003e that maps to a StudentsController \u003ccode\u003eindex\u003c/code\u003e action.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAdd a controller action to the StudentsController named \u003ccode\u003eindex\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eHave the new \u003ccode\u003eindex\u003c/code\u003e action pull in a list of all of the students with \u003ccode\u003eStudent.all\u003c/code\u003e and store it in an instance variable\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate an \u003ccode\u003eindex.html.erb\u003c/code\u003e view file and render it from your \u003ccode\u003eStudents#index\u003c/code\u003e action.  The \u003ccode\u003eindex.html.erb\u003c/code\u003e file should be placed within a \u003ccode\u003eviews/students\u003c/code\u003e folder.  \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIn your view, iterate over the list of students returned from the index action in the controller and display the appropriate information. \u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf you run into an ActiveRecord::PendingMigration error when you run the\ntests, try \u003ccode\u003erake db:migrate RAILS_ENV=test\u003c/code\u003e in the terminal then run the tests\nagain\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"http://edgeguides.rubyonrails.org/routing.html\"\u003eRails Routing from the Outside In\u003c/a\u003e\u003c/p\u003e","exportId":"gadcaee92a0d2cfa69fe149fba263fe30"},{"id":220277,"title":"Dynamic Request Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-dynamic-request-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-dynamic-request-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-dynamic-request-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-dynamic-request-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eDraw a route with a dynamic variable\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUse a routes variable in params within the logic of an action\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAssign an instance variable in a controller action\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUse a controller instance variable to generate a dynamic ERB template.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBuild a classical show action/view\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThere are three RSpec/Capybara specs in this lesson; you can find them in \u003ccode\u003espec/features/student_spec.rb\u003c/code\u003e. Make sure they pass without breaking the other tests. To complete this section, all specs should pass.\u003c/p\u003e\n\n\u003cp\u003eIn this lab, you will work through the full MVC pattern by building a student management app for The Flatiron School. At a high level, you will integrate the following scenario in your application:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eThe user is able to go to \u003ccode\u003e/students/2\u003c/code\u003e to receive information on the student with an id of \u003ccode\u003e2\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe application should render the values from the \u003ccode\u003estudent\u003c/code\u003e record in the database\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eKeys to remember\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eMake sure that you use a route variable for the \u003ccode\u003eshow\u003c/code\u003e request path\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIf you google around and discover generators/scaffolds, \u003cstrong\u003edon't use them\u003c/strong\u003e for this lab\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActionDispatch/Routing.html\"\u003eDocumentation\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/rails-dynamic-request-readme\"\u003eReading\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gb033ad52f11b0e8075652fb1f184b645"}]},{"id":24058,"name":"Rails ActionView","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gab6a481be1aa6f0c406cfee90d240e8f","items":[{"id":220295,"title":"Rails URL Helpers","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"rails-url-helpers-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-url-helpers-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-url-helpers-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-url-helpers-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eRails is meant to be flexible. As a result, there are typically a number of ways to accomplish the same goals. Routes are a great example of how this principle operates in a Rails app. In this section, we will review how to leverage built-in URL helper methods instead of hard coding route paths into an application (along with why this is a good idea).\u003c/p\u003e  \u003ch2\u003ePaths vs Route Helpers\u003c/h2\u003e  \u003cp\u003eWhat's a real-world difference between using hard-coded paths compared with route helper methods? Let's imagine that you have a meeting in NYC, and you want to get from one side of the city to the other. You have a couple of different options:\u003c/p\u003e  \u003col\u003e \u003cli\u003eTraverse the streets on foot\u003c/li\u003e \u003cli\u003eTake a taxi\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWalking is like hard coding your route's path. Technically, it can work. However, it's slow, potentially error-prone (one small mistake can lead to the wrong part of town), and, if the meeting location changes, it will require quite a bit of manual work to adjust and walk to the new destination.\u003c/p\u003e  \u003cp\u003eTaking a taxi is like using a route helper: you can simply provide the address to the driver and let them navigate the city streets for you. It is faster than walking, and, if the address for the meeting changes while you're en route, it's not as difficult or slow to adjust.\u003c/p\u003e  \u003cp\u003eDon't worry if it's still a little fuzzy. Here's an example of what it looks like in code:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eHard-coded path:\u003c/strong\u003e \u003ccode\u003e\"/posts/#{@post.id}\"\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eHere you're saying: \"I know exactly the GPS coordinates of my meeting, driver. Do exactly as I say.\"\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eRoute helper:\u003c/strong\u003e \u003ccode\u003epost_path(@post)\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eHere you're saying: \"Can you find the best way to a controller that knows how to work with this thing called a \u003ccode\u003ePost\u003c/code\u003e based on looking at this instance called \u003ccode\u003e@post\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe want to use route helper methods as opposed to hard coding because:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eRoute helpers are more dynamic since they are methods and not simply strings. This means that if something changes with the route there are many cases where the code itself won't need to be changed at all\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eRoute helper methods help clean up the view and controller code and assist with readability. \u003cem\u003eOn a side note, you cannot use these helper methods in your model files\u003c/em\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eIt's more natural to be able to pass arguments into a method as opposed to using string interpolation. For example, \u003ccode\u003epost_path(post, opt_in: true)\u003c/code\u003e is more readable than \u003ccode\u003e\"posts/\u0026lt;%= post.id %\u0026gt;?opt_in=true\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eRoute helpers translate directly into HTML-friendly paths. In other words, if you have any weird characters in your URLs, the route helpers will convert them so they can be read properly by browsers. This includes spaces and  characters such as \u003ccode\u003e\u0026amp;\u003c/code\u003e, \u003ccode\u003e%\u003c/code\u003e, etc.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eImplementing Route Helpers\u003c/h2\u003e  \u003cp\u003eTo begin, we're going to start with an application that has the MVC set up for \u003ccode\u003eposts\u003c/code\u003e, with \u003ccode\u003eindex\u003c/code\u003e and \u003ccode\u003eshow\u003c/code\u003e actions currently in place. The route call looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003eresources :posts, only: [:index, :show] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will create routing methods for posts that we can utilize in our views and controllers. Running \u003ccode\u003erails routes\u003c/code\u003e in the terminal will give the following output:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eposts   GET  /posts(.:format)       posts#index\u003cbr\u003epost    GET  /posts/:id(.:format)   posts#show \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThese four columns tell us everything that we'll need to use the route helper methods. The breakdown is below:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003cstrong\u003eColumn 1\u003c/strong\u003e - This column gives the prefix for the route helper methods. In the current application, \u003ccode\u003eposts\u003c/code\u003e and \u003ccode\u003epost\u003c/code\u003e are the prefixes for the methods that you can use throughout your applications. The two most popular method types are \u003ccode\u003e_path\u003c/code\u003e and \u003ccode\u003e_url\u003c/code\u003e. So if we want to render a link to our posts' index page, the method would be \u003ccode\u003eposts_path\u003c/code\u003e or \u003ccode\u003eposts_url\u003c/code\u003e. The difference between \u003ccode\u003e_path\u003c/code\u003e and \u003ccode\u003e_url\u003c/code\u003e is that \u003ccode\u003e_path\u003c/code\u003e gives the relative path and \u003ccode\u003e_url\u003c/code\u003e renders the full URL. If you open up the rails console, by running \u003ccode\u003erails console\u003c/code\u003e, you can test these route helpers out. Run \u003ccode\u003eapp.posts_path\u003c/code\u003e and see what the output is. You can also run \u003ccode\u003eapp.posts_url\u003c/code\u003e and see how it prints out the full path instead of the relative path. \u003cstrong\u003eIn general, it's best to use the \u003ccode\u003e_path\u003c/code\u003e version so that nothing breaks if your server domain changes\u003c/strong\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003cstrong\u003eColumn 2\u003c/strong\u003e - This is the HTTP verb\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003cstrong\u003eColumn 3\u003c/strong\u003e - This column shows what the path for the route will be and what parameters need to be passed to the route. As you may notice, the second row for the show route calls for an ID. When you pass the \u003ccode\u003e:show\u003c/code\u003e argument to the \u003ccode\u003eresources\u003c/code\u003e method, it will automatically create this route and assume that you will need to pass the \u003ccode\u003eid\u003c/code\u003e into the URL string. Whenever you have \u003ccode\u003eid\u003c/code\u003e parameters listed in the path like this, you will need to pass the route helper method an ID, so an example of what our show route code would look like is \u003ccode\u003epost_path(@post)\u003c/code\u003e. Notice how this is different than the \u003ccode\u003eindex\u003c/code\u003e route of \u003ccode\u003eposts_path\u003c/code\u003e. Also, you can ignore the \u003ccode\u003e(.:format)\u003c/code\u003e text for now. If you open up the Rails console again, you can call the route helpers. If you have a \u003ccode\u003ePost\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e3\u003c/code\u003e, you can run \u003ccode\u003eapp.post_path(3)\u003c/code\u003e and see what the resulting output is. Running route helpers in the rails console is a great way of testing out routes to see what their exact output will be\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003cstrong\u003eColumn 4\u003c/strong\u003e - This column shows the controller and action with a syntax of \u003ccode\u003econtroller#action\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eOne of the other nice things about utilizing route helper methods is that they create predictable names for the methods. Once you get into day-to-day Rails development, you will only need to run \u003ccode\u003erails routes\u003c/code\u003e to find custom paths.\u003c/p\u003e  \u003cp\u003eLet's imagine that you take over a legacy Rails application that was built with traditional routing conventions. If you see CRUD controllers for newsletters, students, sales, offers, and coupons, you don't have to look up the routes to know that you could call the index URLs for each resource below:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eNewsletters - \u003ccode\u003enewsletters_path\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eStudents - \u003ccode\u003estudents_path\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eSales - \u003ccode\u003esales_path\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eOffers - \u003ccode\u003eoffers_path\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eCoupons - \u003ccode\u003ecoupons_path\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThis is an example of the Rails design goal: \"convention over configuration.\" Rails' convention is that resources are accessible through their pluralized name with \u003ccode\u003e_path\u003c/code\u003e tacked on. Since \u003cstrong\u003eall\u003c/strong\u003e Rails developers honor these conventions, Rails developers rapidly come to feel at home in other Rails developers' codebases.\u003c/p\u003e  \u003ch2\u003eThe \u003ccode\u003elink_to\u003c/code\u003e Method\u003c/h2\u003e  \u003cp\u003eOur first three tests are currently passing; let's take a look at the lone failure. The failing test ensures that a link from the index page will point to that post's respective show page view template:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edescribe 'index page' do\u003cbr\u003e  it 'links to post page' do\u003cbr\u003e    second_post = Post.create(title: \"My Title\", description: \"My post description\")\u003cbr\u003e    visit posts_path\u003cbr\u003e    expect(page).to have_link(second_post.title, href: post_path(second_post))\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis matcher is currently failing since our index page doesn't link to the show page. To fix this, let's update the index page like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% @posts.each do |post| %\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u0026lt;a href='\u0026lt;%= \"/posts/#{post.id}\" %\u0026gt;'\u0026gt;\u0026lt;%= post.title %\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat is some bossy code. Let's use a \u003ccode\u003elink_to\u003c/code\u003e method to clean this up and get rid of multiple \u003ccode\u003eERB\u003c/code\u003e calls on the same line.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% @posts.each do |post| %\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u0026lt;%= link_to post.title, \"/posts/#{post.id}\" %\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis works and gets the tests passing, however, it can be refactored. Instead of hard-coding the path and using string interpolation, let's use \u003ccode\u003epost_path\u003c/code\u003e and pass in the \u003ccode\u003epost\u003c/code\u003e argument.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% @posts.each do |post| %\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u0026lt;%= link_to post.title, post_path(post.id) %\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is much better, but to be thorough, let's make one last refactor: Rails is smart enough to know that if you pass in the \u003ccode\u003epost\u003c/code\u003e object as an argument, it should use the ID attribute, so we'll use this implementation code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% @posts.each do |post| %\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u0026lt;%= link_to post.title, post_path(post) %\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you run the tests now, you'll see that they're all still passing.\u003c/p\u003e  \u003cp\u003eWe're using the \u003ccode\u003elink_to\u003c/code\u003e method to automatically create an HTML \u003ccode\u003ea\u003c/code\u003e tag. If you open the browser and inspect the HTML element of the link, you would see the following:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/flatiron-bucket/readme-lessons/link_to.png\" alt=\"Link To\"\u003e\u003c/p\u003e  \u003cp\u003e(If your browser loads a blank page, add Post.create(title: 'A lovely title', description: 'A superb description') to \u003ccode\u003edb/seeds.rb\u003c/code\u003e, run rake \u003ccode\u003edb:seed\u003c/code\u003e, and then restart your server.) As you can see, even though we never added HTML code for the link –– e.g., \u003ccode\u003e\u0026lt;a href=\"...\"\u0026gt;\u0026lt;/a\u0026gt;\u003c/code\u003e –– the \u003ccode\u003elink_to\u003c/code\u003e method rendered the correct tag for us.)\u003c/p\u003e  \u003ch2\u003eUsing the :as option\u003c/h2\u003e  \u003cp\u003eIf for any reason you don't like the naming structure for the methods or paths, you can customize them quite easily. A common change is to customize the path users go to in order to register for a site.\u003c/p\u003e  \u003cp\u003eIf we had a \u003ccode\u003eUser\u003c/code\u003e model/controller, in \u003ccode\u003eroutes.rb\u003c/code\u003e file, you would add the following line:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eget '/users/new', to: 'users#new', as: 'register' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow the application lets programmers use \u003ccode\u003eregister_path\u003c/code\u003e when creating links with \u003ccode\u003elink_to\u003c/code\u003e. Rails leverages routes and these \"helper route\" names in many places to help you keep your code flexible and brief.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eHopefully, this lesson shed some light on the beauty of using route helper methods. If you run the tests again after making the above changes, you'll notice something interesting: all of the tests are still passing! If we had hardcoded the URLs in the links in our views, we would have had a major issue: all of our links to the show pages would have broken, along with our Capybara tests. However, by using the built-in helper methods, the links all updated automatically.\u003c/p\u003e","exportId":"g89ebeb0f76927f20d574fbe9c94d0739"},{"id":220302,"title":"URL Helpers Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-url-helpers-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-url-helpers-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-url-helpers-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-url-helpers-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eGenerate URLs using route helpers\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDraw routes with implicit and explicit names using \u003ccode\u003e:as\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDraw routes with variables\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eGenerate URLs using route helpers that require variables\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab you will be building out the Student management dashboard for the Flatiron School by starting to integrate the ability to link between pages. Two tests are currently passing, and the rest need implementation code to start passing. In order to complete this lab, you will need to complete the following tasks:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eA user should be able to navigate to \u003ccode\u003e/students\u003c/code\u003e to view all of the students.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eA user should be able to click the student's name on the \u003ccode\u003eindex\u003c/code\u003e page and be taken to that specific student's \u003ccode\u003eshow\u003c/code\u003e page.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a new boolean attribute called \u003ccode\u003eactive\u003c/code\u003e in the students table. (HINT: You might have to search around for the best way to set a (\u003cem\u003eahem\u003c/em\u003e) \u003cstrong\u003edefault value\u003c/strong\u003e (should default to false).)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eA user should be able to go to \u003ccode\u003e/students/:id/activate\u003c/code\u003e to toggle their \u003ccode\u003eactive\u003c/code\u003e attribute between \u003ccode\u003etrue\u003c/code\u003e and \u003ccode\u003efalse\u003c/code\u003e. (This is just the activate route, and not a actual view.)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eRead the failing tests and modify the code until they pass.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eKeep in mind\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eMake sure the show path is \u003ccode\u003e/students/:id\u003c/code\u003e, where \u003ccode\u003e:id\u003c/code\u003e is a route variable.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCall the Student class instance method \u003ccode\u003eto_s\u003c/code\u003e on each of the students on the index page so that each student element contains their first and last name.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eOn the student index page, test out all three different \u003ccode\u003elink_to\u003c/code\u003e argument options, e.g.: \u003ccode\u003elink_to \"post\", \"/post/#{post.id}\"\u003c/code\u003e, \u003ccode\u003elink_to(\"post\", post_path(post.id))\u003c/code\u003e, \u003ccode\u003elink_to(\"post\", post_path(post))\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/rails-url-helpers-readme\"\u003eReading\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html\"\u003eURL Helper Documentation\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g51ce719bb13288a925535feb6d82e373"},{"id":220308,"title":"Rails form_tag","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-form_tag-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-form_tag-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_tag-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_tag-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eRails Forms\u003c/h2\u003e  \u003cp\u003eWelcome to the world of Rails forms, which give users the ability to submit data into form fields. This can be used for: creating new database records, building a contact form, integrating a search engine field, and pretty much every other aspect of the application that requires user input. When it comes to forms in Rails, you will discover that you will have the flexibility to utilize:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eBuilt-in form helper methods\u003c/li\u003e \u003cli\u003ePlain HTML form elements\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThis lesson is going to begin by integrating HTML form elements and then slowly start refactoring the form using Rails methods. It would be very easy to integrate form helpers (and we could have our form working in a few minutes). However, fully understanding what Rails is doing behind the scenes is more important than getting the form working right away. We're going to build the system from the ground up. When we're finished, you should be able to understand all of the processes that are necessary in order to process forms in an application properly and securely.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e For the next few labs, we're not going to use mass assignment; instead  we'll assign each attribute individually. For example, instead of \u003ccode\u003eStudent.create(params[:students]) we'll write Student.create(first_name: params[:first_name], last_name: params[:last_name])\u003c/code\u003e and name our fields in the view files without the \"student\" preface. We'll discuss why in the upcoming reading on Strong Params.\u003c/p\u003e  \u003ch2\u003eRendering the Form View\u003c/h2\u003e  \u003cp\u003eToday we'll be giving the user the ability to create a new post in our BlogFlash application. Let's first create a Capybara spec to ensure that going to \u003ccode\u003eposts/new\u003c/code\u003e takes us to our form. If you think back to the \u003ca href=\"https://learn.co/lessons/rails-url-helpers-readme\"\u003eRails URL Helpers lesson\u003c/a\u003e, we know that we don't need to hard-code the route into our tests any longer. Let's use the standard RESTful convention of \u003ccode\u003enew_post_path\u003c/code\u003e for the route helper name:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# spec/features/post_spec.rb\u003cbr\u003e\u003cbr\u003erequire 'rails_helper'\u003cbr\u003e\u003cbr\u003edescribe 'new post' do\u003cbr\u003e  it 'ensures that the form route works with the /new action' do\u003cbr\u003e    visit new_post_path\u003cbr\u003e    expect(page.status_code).to eq(200)\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs expected, this results in a failure saying that we don't have a \u003ccode\u003enew_post_path\u003c/code\u003e method, so let's create that in our \u003ccode\u003eroutes.rb\u003c/code\u003e file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eresources :posts, only: [:index, :new] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow it gives this failure: \u003ccode\u003eThe action 'new' could not be found for PostsController\u003c/code\u003e. To correct this, let's add a \u003ccode\u003enew\u003c/code\u003e action in \u003ccode\u003ePostsController\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef new\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLastly, it says we're missing a template. Let's create \u003ccode\u003eapp/views/posts/new.html.erb\u003c/code\u003e. Now that our routing test is passing, let's add a matcher spec to ensure that the template is properly displaying HTML on the new post page:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# spec/features/post_spec.rb\u003cbr\u003e\u003cbr\u003erequire 'rails_helper'\u003cbr\u003e\u003cbr\u003edescribe 'new post' do\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  it 'renders HTML in the /new template' do\u003cbr\u003e    visit new_post_path\u003cbr\u003e    expect(page).to have_content('Post Form')\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRunning this spec gets a matcher error. We can get this passing by adding \u003ccode\u003e\u0026lt;h3\u0026gt;Post Form\u0026lt;/h3\u0026gt;\u003c/code\u003e to the \u003ccode\u003enew.html.erb\u003c/code\u003e view template.\u003c/p\u003e  \u003ch2\u003eBuilding the form in HTML\u003c/h2\u003e  \u003cp\u003eOur first pass at the form will be in plain HTML. In this reading, we're not concerned with creating any records in the database. Our focus is on the form process. We'll simply be printing out the submitted form params on the show page.\u003c/p\u003e  \u003cp\u003eLet's create a spec for this. It's going to take a while for this to pass since we're going to be spending some time on the HTML creation process, but it's a good practice to ensure all new features are tested before the implementation code is added.\u003c/p\u003e  \u003cp\u003eAs you are updating the code, make sure to test it out in the browser – don't just rely on the tests. It's important to see the errors in both the tests and the browser since you'll want to become familiar with both types of failure messages.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# spec/features/post_spec.rb\u003cbr\u003e\u003cbr\u003erequire 'rails_helper'\u003cbr\u003e\u003cbr\u003edescribe 'new post' do\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  it \"displays a new post form that redirects to the index page, which then contains the submitted post's title and description\" do\u003cbr\u003e    visit new_post_path\u003cbr\u003e    fill_in 'post_title', with: 'My post title'\u003cbr\u003e    fill_in 'post_description', with: 'My post description'\u003cbr\u003e\u003cbr\u003e    click_on 'Submit Post'\u003cbr\u003e\u003cbr\u003e    expect(page.current_path).to eq(posts_path)\u003cbr\u003e    expect(page).to have_content('My post title')\u003cbr\u003e    expect(page).to have_content('My post description')\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis fails for obvious reasons. Let's follow the TDD process, letting the failures help build our form. The first error says that Capybara can't find the form field \u003ccode\u003epost_title\u003c/code\u003e. To fix that, let's create an HTML form in the \u003ccode\u003enew.html.erb\u003c/code\u003e view template:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"text\" id=\"post_title\" name=\"post[title]\"\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;textarea id=\"post_description\" name=\"post[description]\"\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;input type=\"submit\" value=\"Submit Post\"\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= params.inspect %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003ename\u003c/code\u003e attributes in each \u003ccode\u003einput\u003c/code\u003e should look pretty familiar by now –– they're good ole' nested hashes. Just like Sinatra, Rails takes the user input entered into form fields and stores it in the \u003ccode\u003eparams\u003c/code\u003e hash. The \u003ccode\u003ename\u003c/code\u003e attribute for a given \u003ccode\u003einput\u003c/code\u003e field is used as the key within \u003ccode\u003eparams\u003c/code\u003e at which the entered data is stored. For instance, the input entered into the \"Post title:\" field in the above form would be stored as the value of \u003ccode\u003eparams[:post][:title]\u003c/code\u003e. Traditionally, Rails apps use that \u003ccode\u003emodel[attribute]\u003c/code\u003e syntax for \u003ccode\u003ename\u003c/code\u003e attributes (e.g., \u003ccode\u003epost[title]\u003c/code\u003e). We'll talk more about that in a later lesson.\u003c/p\u003e  \u003cp\u003eYou'll also notice that we're printing out \u003ccode\u003eparams\u003c/code\u003e to the page. Until we set up the form action, clicking \u003ccode\u003eSubmit Post\u003c/code\u003e won't actually redirect to a page on which the input values will be visible, but we'd still like to verify that the \u003ccode\u003eparams\u003c/code\u003e hash is being populated correctly.\u003c/p\u003e  \u003cp\u003eIf we run the tests again, we'll see that Capybara expected submitting the form to redirect it to \u003ccode\u003e/posts\u003c/code\u003e, but instead it found itself back on \u003ccode\u003e/posts/new\u003c/code\u003e. Capybara was able to fill in the form elements and click \u003ccode\u003eSubmit Post\u003c/code\u003e, but we need to update the form tag with an \u003ccode\u003eaction\u003c/code\u003e attribute:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form action=\"\u0026lt;%= posts_path %\u0026gt;\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow the form redirects to \u003ccode\u003e/posts\u003c/code\u003e. However, we also need to add a \u003ccode\u003emethod\u003c/code\u003e attribute so that the application knows that we are submitting form data via the \u003ccode\u003ePOST\u003c/code\u003e HTTP verb:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form action=\"\u0026lt;%= posts_path %\u0026gt;\" method=\"POST\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you open up the browser and submit the form, you will get the following routing error: \u003ccode\u003eNo route matches [POST] \"/posts\"\u003c/code\u003e. We need to draw a \u003ccode\u003ecreate\u003c/code\u003e route so that the routing system knows what to do when a \u003ccode\u003ePOST\u003c/code\u003e request is sent to the \u003ccode\u003e/posts\u003c/code\u003e resource:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003eresources :posts, only: [:index, :new, :create] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you run \u003ccode\u003erake routes\u003c/code\u003e, you'll see we now have a \u003ccode\u003eposts#create\u003c/code\u003e action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  Prefix Verb URI Pattern          Controller#Action\u003cbr\u003e   posts GET  /posts(.:format)     posts#index\u003cbr\u003e         POST /posts(.:format)     posts#create\u003cbr\u003enew_post GET  /posts/new(.:format) posts#new \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRunning the spec tests again leads to an 'unknown action' error: \u003ccode\u003eThe action 'create' could not be found for PostsController\u003c/code\u003e. Let's add a \u003ccode\u003ecreate\u003c/code\u003e action in \u003ccode\u003ePostsController\u003c/code\u003e and have it create a new \u003ccode\u003ePost\u003c/code\u003e object with the values from \u003ccode\u003eparams\u003c/code\u003e and then redirect to the index page:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef create\u003cbr\u003e  Post.create(title: params[:post][:title], description: params[:post][:description])\u003cbr\u003e  redirect_to posts_path\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you run the Rails server, navigate to the \u003ccode\u003eposts/new\u003c/code\u003e page, fill in the title and description form elements, and click submit, you will find a new type of error:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/flatiron-bucket/readme-lessons/InvalidAuthenticityToken.png\" alt=\"InvalidAuthenticityToken\"\u003e\u003c/p\u003e  \u003cp\u003eWhich leads us to a very important part of Rails forms: CSRF.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are seeing an error along the lines of \u003ccode\u003eCannot render console from (\u0026lt;IP address here\u0026gt;)! Allowed networks: 127.0.0.1, ::1, 127.0.0.0/127.255.255.255\u003c/code\u003e you'll want to add this code to \u003ccode\u003econfig/environments/development.rb\u003c/code\u003e, and not \u003ccode\u003econfig/application.rb\u003c/code\u003e, so it is only applied in your development environment.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Application \u0026lt; Rails::Application\u003cbr\u003e  config.web_console.whitelisted_ips = '\u0026lt;IP address here\u0026gt;'\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eWhat is CSRF?\u003c/h2\u003e  \u003cp\u003e\"CSRF\" stands for: Cross-Site Request Forgery. Instead of giving a boring explanation of what happens during a CSRF request, let's walk through a real-life example of a Cross-Site Request Forgery hack:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eYou go to your bank website and log in. After checking your balance, you open up a new tab in the browser and go to your favorite meme site.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eUnbeknownst to you, the meme site is actually a hacking site that has scripts running in the background as soon as you land on their page.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eOne of the scripts on the site hijacks the banking session that's open in the other browser tab and submits a form request to transfer money to their account.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThe banking form can't tell that the form request wasn't made by you, so it goes through the process as if you were the one who made the request.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eOne site making a request to another site via a form is the general flow of a Cross-Site Request Forgery. Rails blocks this from happening by default by requiring that a unique authenticity token be submitted with each form. This authenticity token is stored in the session and can't be hijacked by hackers: it performs a match check when the form is submitted, and it will throw an error if the token isn't there or doesn't match.\u003c/p\u003e  \u003cp\u003eTo fix this \u003ccode\u003eActionController::InvalidAuthenticityToken\u003c/code\u003e error, we can integrate the \u003ccode\u003eform_authenticity_token\u003c/code\u003e helper into the form as a hidden field:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form action=\"\u0026lt;%= posts_path %\u0026gt;\" method=\"POST\"\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"text\" id=\"post_title\" name=\"post[title]\"\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;textarea id=\"post_description\" name=\"post[description]\"\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;input type=\"hidden\" name=\"authenticity_token\" value=\"\u0026lt;%= form_authenticity_token %\u0026gt;\"\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" value=\"Submit Post\"\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we refresh the \u003ccode\u003eposts/new\u003c/code\u003e page, fill out the form, and click \u003ccode\u003eSubmit Post\u003c/code\u003e, the browser should load the index view with our newly-created post's title and description in a bulleted list. All of the spec tests should now be passing, and our form is functional. However, this is probably one of the ugliest and least-elegant Rails forms that has ever existed, so let's do some refactoring.\u003c/p\u003e  \u003ch2\u003eUsing form helpers\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eActionView\u003c/code\u003e, a sub-gem of Rails, provides a number of helper methods to assist with streamlining view template code. Specifically, we can use \u003ccode\u003eActionView\u003c/code\u003e methods to improve our form! Let's start by integrating a Rails \u003ccode\u003eform_tag\u003c/code\u003e element:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_tag posts_path do %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"text\" id=\"post_title\" name=\"post[title]\"\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;textarea id=\"post_description\" name=\"post[description]\"\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;input type=\"hidden\" name=\"authenticity_token\" value=\"\u0026lt;%= form_authenticity_token %\u0026gt;\"\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" value=\"Submit Post\"\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNext, we'll replace that hidden authenticity token input field with a Rails \u003ccode\u003ehidden_field_tag\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_tag posts_path do %\u0026gt;\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= hidden_field_tag :authenticity_token, form_authenticity_token %\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" value=\"Submit Post\"\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we run the tests again, we'll see that they're all still passing. Let's take a look at the HTML generated by our Rails \u003ccode\u003eActionView\u003c/code\u003e methods:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form action=\"/posts\" accept-charset=\"UTF-8\" method=\"post\"\u0026gt;\u0026lt;input name=\"utf8\" type=\"hidden\" value=\"✓\" /\u0026gt;\u0026lt;input type=\"hidden\" name=\"authenticity_token\" value=\"zkOjrjTG8Lxn0CF8Lt/kFIgWdYyY3NTMbwh+Q9kPX1NrYztgq0GZNCjLFavBXka1Y5QhNjDlhX+dzQoZMzUjOA==\" /\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"text\" id=\"post_title\" name=\"post[title]\"\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;textarea id=\"post_description\" name=\"post[description]\"\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;input type=\"hidden\" name=\"authenticity_token\" id=\"authenticity_token\" value=\"7SuubeJGbqfm4rO+F5VTS6Wl1SNCTGOr/mrYZKOQLbtICzajfcEHL6n5h2n4FPHqTieBmep1MhgMr6w+SapR0A==\" /\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" value=\"Submit Post\"\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003eform_tag\u003c/code\u003e Rails helper is smart enough to know that we want to submit the form via the \u003ccode\u003ePOST\u003c/code\u003e method, and it automatically renders the HTML that we were writing by hand before. The \u003ccode\u003eform_tag\u003c/code\u003e method also automatically generates the necessary authenticity token, so we can remove the now-redundant \u003ccode\u003ehidden_field_tag\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eNext, let's integrate some other form helpers to let Rails generate the input elements for us. For this form, we'll be using a \u003ccode\u003etext_field_tag\u003c/code\u003e and a \u003ccode\u003etext_area_tag\u003c/code\u003e and passing each the corresponding \u003ccode\u003ename\u003c/code\u003e attribute as a symbol. It's important to keep in mind that form helpers aren't magic –– they're simply Ruby methods that accept arguments, such as the \u003ccode\u003ename\u003c/code\u003e attribute and any additional parameters related to the form's elements. In addition to updating the form fields, we'll also replace the HTML tag for the submit button with a \u003ccode\u003esubmit_tag\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_tag posts_path do %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag :'post[title]' %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_area_tag :'post[description]' %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= submit_tag \"Submit Post\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's check out the raw HTML all these helper methods generate for us:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form action=\"/posts\" accept-charset=\"UTF-8\" method=\"post\"\u0026gt;\u0026lt;input name=\"utf8\" type=\"hidden\" value=\"✓\" /\u0026gt;\u0026lt;input type=\"hidden\" name=\"authenticity_token\" value=\"vq9SMVNk0CjwgZmYomFRhwbo5dfu7tI/2FiR7jOtlVgbj8r/zOO5oL+arU9N4PMm7WqxbUbXg4wqneW02ZfpMw==\" /\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"text\" name=\"post[title]\" id=\"post_title\" /\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;textarea name=\"post[description]\" id=\"post_description\"\u0026gt;\u003cbr\u003e\u0026lt;/textarea\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;input type=\"submit\" name=\"commit\" value=\"Submit Post\" /\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRun the spec tests one last time to verify that everything is still passing. You now know how to build a Rails form from scratch and refactor it using Rails form helper methods. Nice work!\u003c/p\u003e","exportId":"g6eea01946adf9a48aec68f34787a7f63"},{"id":220314,"title":"Form_Tag Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-form_tag-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-form_tag-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_tag-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_tag-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eBuild a functional Rails form using a \u003ccode\u003eform_tag\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ePass a route helper as the argument to a \u003ccode\u003eform_tag\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ePass an options hash with a method to a \u003ccode\u003eform_tag\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUse a \u003ccode\u003etext_field_tag\u003c/code\u003e and other form controls to create inputs\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBuild a \u003ccode\u003enew\u003c/code\u003e action that renders a form that submits to the \u003ccode\u003ecreate\u003c/code\u003e action\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThe two specs for this lab that are currently failing are located within the\n\u003ccode\u003eform page\u003c/code\u003e feature in \u003ccode\u003especs/features/student_spec.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor this lab, you need to build a form to create a new student, have the form\nredirect \u003cem\u003eback\u003c/em\u003e to the \u003ccode\u003enew\u003c/code\u003e view template (commonly, a \u003ccode\u003ecreate\u003c/code\u003e action would\nredirect to \u003ccode\u003eindex\u003c/code\u003e), and print out the form params to the screen.  Below are a\nfew items to keep in mind:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eDraw a \u003ccode\u003enew\u003c/code\u003e and \u003ccode\u003ecreate\u003c/code\u003e route for the \u003ccode\u003estudents\u003c/code\u003e resource\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ePrint out the student value to the view template page\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eKeys to remember\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eLook at the tests to see which field values you should be using\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eMake sure to use the \u003ccode\u003eform_tag\u003c/code\u003e helpers\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/learn-co-curriculum/rails-form_tag-readme\"\u003eReading\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html\"\u003eForm Helper Documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g8c8ceb478eaa37355567d78bfc416f52"}]},{"id":24065,"name":"CRUD with Rails","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gd294667f5a589b9d34300cbbcace0abb","items":[{"id":220325,"title":"Rails Create Action","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-create-action-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-create-action-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-create-action-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-create-action-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn this lesson, we'll code a \u003ccode\u003ecreate\u003c/code\u003e action — '\u003cstrong\u003eC\u003c/strong\u003e' in the '\u003cstrong\u003eCRUD\u003c/strong\u003e' life\ncycle — that saves a new \u003ccode\u003ePost\u003c/code\u003e object and then redirects to the newly-created\npost's \u003ccode\u003eshow\u003c/code\u003e page.\u003c/p\u003e\n\n\u003cp\u003eBefore implementing this functionality, let's first open up\na Rails console session and create a record manually:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epost = Post.new\u003cbr\u003epost.title = \"Title Goes Here\"\u003cbr\u003epost.description = \"Desc goes here...\"\u003cbr\u003epost.save\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis syntax will let you manually create a new \u003ccode\u003ePost\u003c/code\u003e record with \u003ccode\u003etitle\u003c/code\u003e and\n\u003ccode\u003edescription\u003c/code\u003e attributes. After running the \u003ccode\u003esave\u003c/code\u003e method in the console, you\nwill see output similar to the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e (0.1ms)  begin transaction\u003cbr\u003eSQL (0.3ms)  INSERT INTO \"posts\" (\"title\", \"description\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"title\", \"Title Goes Here\"], [\"description\", \"Desc goes here...\"], [\"created_at\", \"2015-11-23 22:26:43.799742\"], [\"updated_at\", \"2015-11-23 22:26:43.799742\"]]\u003cbr\u003e (1.2ms)  commit transaction\u003cbr\u003e=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, the \u003ccode\u003esave\u003c/code\u003e method generates a SQL script that inserts a new\nrecord into the database. Each of the \u003ccode\u003ePost\u003c/code\u003e object's attributes is passed into\nthe SQL statement, and the method returns \u003ccode\u003etrue\u003c/code\u003e upon a successful save. At a\nhigh level, this is what the \u003ccode\u003ecreate\u003c/code\u003e method in our \u003ccode\u003ePostsController\u003c/code\u003e will be\ndoing.\u003c/p\u003e\n\n\u003cp\u003eOpen up the \u003ccode\u003eposts_controller.rb\u003c/code\u003e file. Let's do a few things to replicate the\nbehavior we had in the console:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eCreate a new \u003ccode\u003ePost\u003c/code\u003e instance\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ePass in the parameters from the form\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSave the record\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eTo build this behavior initially, let's copy and paste the code that we ran in\nthe console. The only key difference is that now, instead of assigning\n\u003ccode\u003epost.title\u003c/code\u003e and \u003ccode\u003epost.description\u003c/code\u003e manually, we want to be able to pull in form\ndata - stuff that a user has typed in and submitted. As long as the form is\nproperly connected to the controller and model, we can populate the \u003ccode\u003etitle\u003c/code\u003e and\n\u003ccode\u003edescription\u003c/code\u003e attributes based on the user input:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef create\u003cbr\u003e  post = Post.new\u003cbr\u003e  post.title = params[:title]\u003cbr\u003e  post.description = params[:description]\u003cbr\u003e  post.save\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can access each of input values in a form using the hash syntax to grab the\nelements from the \u003ccode\u003eparams\u003c/code\u003e hash. When a user submits a form, it is the \u003ccode\u003eparams\u003c/code\u003e\nhash that contains all the input data. As long as the form is routed to the\n\u003ccode\u003ecreate\u003c/code\u003e method we've written (in \u003ccode\u003econfig/routes.rb\u003c/code\u003e), we'll be able to\ninitialize a new instance of \u003ccode\u003ePost\u003c/code\u003e, grab those input values from \u003ccode\u003eparams\u003c/code\u003e,\nassign them the \u003ccode\u003epost\u003c/code\u003e instance attributes and save the instance to our\ndatabase.\u003c/p\u003e\n\n\u003cp\u003eWe've already got the route and our form created. If you go to \u003ccode\u003e/posts/new\u003c/code\u003e,\nfill out the form, and submit it, you'll get the error shown below.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/flatiron-bucket/readme-lessons/template_error_create.png\" alt=\"Missing Create Template Error\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThat's OK! Rails is simply complaining that it can't find a \u003ccode\u003ecreate\u003c/code\u003e view\ntemplate since, by default, it's trying to render a template called\n\u003ccode\u003ecreate.html.erb\u003c/code\u003e (which doesn't exist). Remember, Rails tries to map each\ncontroller action directly to a template. However, with actions like \u003ccode\u003ecreate\u003c/code\u003e,\nwe don't want a view template –– all we want is for the action to communicate\nwith the database and then redirect to a different page.\u003c/p\u003e\n\n\u003cp\u003eIf you open up the console, you'll see that the record was successfully created\nin the database even though we ran into an error page. Our form and \u003ccode\u003ecreate\u003c/code\u003e\naction are working properly. How do we know the record was successfully created?\nThere are a couple of ways to check:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eType \u003ccode\u003ePost.last\u003c/code\u003e into the Rails console, and it will display the most\nrecently created record. We can look at the record's \u003ccode\u003ecreated_at\u003c/code\u003e attribute to\nensure the timestamp is current.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe can also simply scroll up through the Rails server logs. All SQL\nstatements are printed out in the log, so it's just a matter of locating the\ncorrect \u003ccode\u003eINSERT\u003c/code\u003e statement (example below):\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e (0.1ms)  begin transaction\u003cbr\u003eSQL (0.7ms)  INSERT INTO \"posts\" (\"title\", \"description\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"title\", \"My Post\"], [\"description\", \"My desc\"], [\"created_at\", \"2015-12-26 18:00:31.393419\"], [\"updated_at\", \"2015-12-26 18:00:31.393419\"]]\u003cbr\u003e (2.2ms)  commit transaction\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo fix the 'missing template' error, we simply need to redirect the user after\nthey've filled out the form. Let's do two refactors:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eUpdate the code with a redirect that leverages a route helper method\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eRefactor the \u003ccode\u003epost\u003c/code\u003e variable into an instance variable\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe revised \u003ccode\u003ecreate\u003c/code\u003e method should look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef create\u003cbr\u003e  @post = Post.new\u003cbr\u003e  @post.title = params[:title]\u003cbr\u003e  @post.description = params[:description]\u003cbr\u003e  @post.save\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this refactored \u003ccode\u003ecreate\u003c/code\u003e action, we're following the convention of\nredirecting to the new resource's \u003ccode\u003eshow\u003c/code\u003e page. It stands to reason that a user\nwho submits a new post would then like to view the successfully-created post.\nWith that being said, the page flow is not set in stone, and we could've\nredirected the \u003ccode\u003ecreate\u003c/code\u003e action to the \u003ccode\u003eindex\u003c/code\u003e action just as easily.\u003c/p\u003e\n\n\u003cp\u003eAll our tests should be passing now, and the site is working in the browser.\nUsers are able to create records in the database using the HTML form, and, upon\nsubmitting a new post, they're automatically redirected to the \u003ccode\u003eshow\u003c/code\u003e page for\nthe post they just created. In future lessons, we'll refactor this further to\nincorporate awesome Rails components like \u003ccode\u003estrong parameters\u003c/code\u003e and \u003ccode\u003eerror handling\u003c/code\u003e, but don't worry about those yet. Great job!\u003c/p\u003e","exportId":"g85bff3e3083b0acdc7ce258d65178ab9"},{"id":220333,"title":"Rails Create Action Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-create-action-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-create-action-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-create-action-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-create-action-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild a working \u003ccode\u003ecreate\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eUse a \u003ccode\u003eform_tag\u003c/code\u003e to create a new form that submits to the \u003ccode\u003eindex\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eCorrectly name form fields so that they end up at the top level of the \u003ccode\u003eparams\u003c/code\u003e hash\u003c/li\u003e\n\u003cli\u003eAssign data from \u003ccode\u003eparams\u003c/code\u003e to a \u003ccode\u003eStudent\u003c/code\u003e object in the \u003ccode\u003ecreate\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eSave that \u003ccode\u003eStudent\u003c/code\u003e object in the \u003ccode\u003ecreate\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eCreate a \u003ccode\u003eredirect_to\u003c/code\u003e from the \u003ccode\u003ecreate\u003c/code\u003e action to the \u003ccode\u003eshow\u003c/code\u003e action\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eMany of the spec tests are already passing for this lab, but there are some additional ones –– including our first use of controller tests –– located here:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eController Specs\u003c/strong\u003e - \u003ccode\u003especs/controllers/students_controller_spec.rb\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eCapybara Specs\u003c/strong\u003e - \u003ccode\u003especs/features/student_spec.rb:37\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen this lab is complete, your application should have the following behavior:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eUser fills out the form on \u003ccode\u003estudents/new\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhen the form is submitted, a new record is created in the database\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAfter the user submits the form, they are redirected to the \u003ccode\u003eshow\u003c/code\u003e page that renders the \u003ccode\u003eStudent\u003c/code\u003e record that they created\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eMake sure to use a route helper method to redirect to the \u003ccode\u003eshow\u003c/code\u003e page at the end of the \u003ccode\u003ecreate\u003c/code\u003e method. You can find the correct syntax for this route by running \u003ccode\u003erake routes\u003c/code\u003e in the terminal.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/rails-create-action-readme\"\u003eReading\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Persistence/ClassMethods.html\"\u003eDocumentation\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g695a976fe25a97be4a990eb366737cc4"},{"id":220339,"title":"Rails Index Show New Create Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-index-show-new-create-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-index-show-new-create-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-index-show-new-create-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-index-show-new-create-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild a RESTful \u003ccode\u003eindex\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eBuild a RESTful \u003ccode\u003eshow\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eBuild a RESTful \u003ccode\u003enew\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eBuild a RESTful \u003ccode\u003ecreate\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eLink pages using route helpers\u003c/li\u003e\n\u003cli\u003eUse route helpers in a \u003ccode\u003eredirect_to\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eBuild a new form with a \u003ccode\u003eform_tag\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis will be a pretty extensive lab that will combine a number of the concepts that we have reviewed, including:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eDrawing multiple route types\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIntegrating route helper methods\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBuilding out a form and wiring it up to the \u003ccode\u003ecreate\u003c/code\u003e action\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLinking pages together\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this lab, the application you will be starting out with will be completely blank. There are no models, views, controllers, et cetera. It has a number of RSpec and Capybara tests that will all need to pass to complete the lab. The tests can be found in the \u003ccode\u003espec\u003c/code\u003e directory, in the \u003ccode\u003emodels\u003c/code\u003e, \u003ccode\u003efeatures\u003c/code\u003e, and \u003ccode\u003econtrollers\u003c/code\u003e sub-directories. Feel free to walk through the specs to see what behavior the application should have when you're done.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Like many production applications, we've included the \u003ccode\u003econfig/secrets.yml\u003c/code\u003e file in the \u003ccode\u003e.gitignore\u003c/code\u003e. This means that you are going to have to create your own \u003ccode\u003econfig/secrets.yml\u003c/code\u003e file for the application to run. Don't worry- we've given you a template. Just rename \u003ccode\u003econfig/secrets-template.yml\u003c/code\u003e to \u003ccode\u003econfig/secrets.yml\u003c/code\u003e, and you should be able to get the application to run.\u003c/p\u003e\n\n\u003cp\u003eThe application you will be building is a Coupon app. Below is a high-level overview of the features you'll be building out:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eYou will need to create a \u003ccode\u003ecoupons\u003c/code\u003e table with \u003ccode\u003ecoupon_code\u003c/code\u003e and \u003ccode\u003estore\u003c/code\u003e columns, which should both be of the \u003ccode\u003estring\u003c/code\u003e data type.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYour \u003ccode\u003eindex\u003c/code\u003e page should show all of the coupons in the database using the following format: \u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"#\"\u003ecoupon\u003cem\u003ecode\u003c/em\u003e\u003c/a\u003e | storename\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eThe coupon codes on the \u003ccode\u003eindex\u003c/code\u003e page should link to their corresponding coupon \u003ccode\u003eshow\u003c/code\u003e page. You should use the \u003ccode\u003elink_to\u003c/code\u003e method and route helper methods instead of hard-coding an HTML \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYour \u003ccode\u003eshow\u003c/code\u003e page should render the specific coupon passed to the route. E.g., \u003ccode\u003ecoupons/4\u003c/code\u003e should show the coupon with an ID of 4.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003enew.html.erb\u003c/code\u003e view template should render a form that uses the \u003ccode\u003eform_tag\u003c/code\u003e method.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe form should be wired up to the \u003ccode\u003ecreate\u003c/code\u003e action in the controller and, when submitted, should create a new record in the \u003ccode\u003ecoupons\u003c/code\u003e table with the parameters passed through the form.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe controller should use the \u003ccode\u003eredirect_to\u003c/code\u003e helper method to redirect the user to the \u003ccode\u003eshow\u003c/code\u003e page template for the newly-created coupon.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/rails-create-action-readme\"\u003eReading on Create Action\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/rails-form_tag-readme\"\u003eReading on Form Integration\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g10b43d31cce6fcc6d5ae982bcba25a40"},{"id":220346,"title":"Edit/Update Action","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-edit-update-action-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-edit-update-action-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-edit-update-action-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-edit-update-action-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eRails Controller Conventions\u003c/h2\u003e  \u003cp\u003eNow that you know how to implement a create action, the next logical step will be to integrate an edit/update action. As you may have noticed, there is a trend in Rails conventions where the logic for rendering a form is separate from the action that manages the database record alteration. For example:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eThe \u003ccode\u003enew\u003c/code\u003e action in the controller simply renders the \u003ccode\u003enew\u003c/code\u003e form\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThe \u003ccode\u003ecreate\u003c/code\u003e action is what actually handles the process of inserting the form data into the database\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIn like fashion, the \u003ccode\u003eedit\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e actions have a similar convention:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eThe \u003ccode\u003eedit\u003c/code\u003e action will handle rendering the \u003ccode\u003eedit\u003c/code\u003e form\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThe \u003ccode\u003eupdate\u003c/code\u003e action will be the method that updates the database record itself\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eRendering the \u003ccode\u003eedit\u003c/code\u003e form\u003c/h2\u003e  \u003cp\u003eTo start off, let's draw a \u003ccode\u003eget\u003c/code\u003e route for our edit form. Since the form will need to know which record is being edited, this will need to be a dynamic route that accepts an \u003ccode\u003e:id\u003c/code\u003e as a parameter that the controller can access:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eget 'articles/:id/edit', to: 'articles#edit', as: :edit_article \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe still need to draw one additional route to handle the \u003ccode\u003eupdate\u003c/code\u003e action. This second route will also need to be dynamic, accepting the same \u003ccode\u003e:id\u003c/code\u003e as a parameter so that the action will know which record is being altered. If you're curious about which HTTP verb should be selected, consider the following: we're sending data to the server, so we know it's not \u003ccode\u003eGET\u003c/code\u003e, and since we're not creating a new record it shouldn't be \u003ccode\u003ePOST\u003c/code\u003e. That's right- \u003ccode\u003ePATCH\u003c/code\u003e should be the HTTP verb!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epatch 'articles/:id', to: 'articles#update' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e What about \u003ccode\u003ePUT\u003c/code\u003e? \u003ccode\u003ePUT\u003c/code\u003e will actually work just fine here, but briefly, \u003ccode\u003ePUT\u003c/code\u003e is meant to be used when replacing a whole resource. \u003ccode\u003ePATCH\u003c/code\u003e, on the other hand, is for used for sending a set of changes to a resource.\u003c/p\u003e  \u003cp\u003eIf you run \u003ccode\u003erake routes\u003c/code\u003e, you will see we have some new routes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ePrefix      Verb  URI Pattern               Controller#Action\u003cbr\u003e                        ...\u003cbr\u003eedit_article   GET  /articles/:id/edit(.:format) articles#edit\u003cbr\u003e          PATCH  /articles/:id(.:format)      articles#update \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOn a side note, as a shortcut you could also simply add the \u003ccode\u003eedit\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e actions to the \u003ccode\u003eresources\u003c/code\u003e call in the routes file. That would accomplish the same goal that these two lines do:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  resources :articles, only: [:index, :show, :new, :create, :edit, :update] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will give you the same routes along with a \u003ccode\u003ePUT\u003c/code\u003e route for \u003ccode\u003earticles#update\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWith our routes in place, let's add in the controller actions...\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef edit\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003edef update\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e...and then create the edit view template in \u003ccode\u003eapp/views/articles/edit.html.erb\u003c/code\u003e. Let's just copy and paste the \u003ccode\u003enew\u003c/code\u003e form:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_tag articles_path do %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Article title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag :title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Article Description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_area_tag :description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= submit_tag \"Submit Article\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you open the browser and go to the \u003ccode\u003eedit\u003c/code\u003e page, it will now display the form, but you may have noticed a pretty big flaw. It doesn't load the record's data into the form! There are a few things that we'll need to do in order to implement this behavior. First, let's have our \u003ccode\u003eedit\u003c/code\u003e action store the \u003ccode\u003earticle\u003c/code\u003e record in an instance variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef edit\u003cbr\u003e  @article = Article.find(params[:id])\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow that the \u003ccode\u003eedit\u003c/code\u003e view template will have access to the \u003ccode\u003eArticle\u003c/code\u003e object (stored in \u003ccode\u003e@article\u003c/code\u003e), we need to refactor the form so that it auto-fills the form fields with the corresponding data from \u003ccode\u003e@article\u003c/code\u003e. We'll also use a different form helper,  \u003ccode\u003eform_for\u003c/code\u003e, which will automatically set up the url where the form will be sent.  These changes can be seen below:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% # app/views/articles/edit.html.erb %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for @article do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label 'Article Title' %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= f.label 'Article Description' %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_area :description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= f.submit \"Submit Article\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, \u003ccode\u003eform_for\u003c/code\u003e takes care of some work for us. Using the object \u003ccode\u003e@article\u003c/code\u003e we've provided, \u003ccode\u003eform_for\u003c/code\u003e determines that \u003ccode\u003e@article\u003c/code\u003e is \u003cstrong\u003enot a \u003cem\u003enew\u003c/em\u003e instance\u003c/strong\u003e of the \u003ccode\u003eArticle\u003c/code\u003e class. Because of this, \u003ccode\u003eform_for\u003c/code\u003e knows to automatically send to the \u003cem\u003eupdate\u003c/em\u003e path.\u003c/p\u003e  \u003cp\u003eSince \u003ccode\u003e@article\u003c/code\u003e is not a new instance of \u003ccode\u003eArticle\u003c/code\u003e, the inputs on this form, the text field and text area, will be populated with the corresponding object values.\u003c/p\u003e  \u003cp\u003eWhen submitted, the form will be routed to the \u003ccode\u003eupdate\u003c/code\u003e action. Before we try to implement the \u003ccode\u003eupdate\u003c/code\u003e action, let's first make sure the data is being routed properly. Enter the following code inside of the \u003ccode\u003eupdate\u003c/code\u003e method:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef update\u003cbr\u003e  raise params.inspect\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003eraise\u003c/code\u003e method will cause the application to pause and print out the \u003ccode\u003eparams\u003c/code\u003e on an error page. You could also see the \u003ccode\u003eparams\u003c/code\u003e if you called  \u003ccode\u003eputs params.inspect\u003c/code\u003e; using \u003ccode\u003eputs\u003c/code\u003e would simply require you to track  down the data in the Rails server log.\u003c/p\u003e  \u003cp\u003eIf you open up the browser, navigate to an edit page (such as \u003ccode\u003elocalhost:3000/articles/2/edit\u003c/code\u003e), change some elements in the form, and submit it, it should take you to an error page that prints out the params from the form, such as in the below image:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://i.imgur.com/38MhjpO.png\" alt=\"Raised Exception for Update Action\"\u003e\u003c/p\u003e  \u003cp\u003eAs you can see, the parameters are being passed to the \u003ccode\u003eupdate\u003c/code\u003e action. With that in mind, let's implement the functionality needed inside of the \u003ccode\u003eupdate\u003c/code\u003e action so that it will take the form data and update the specified record. Let's sketch out a basic flow for what the \u003ccode\u003eupdate\u003c/code\u003e action should do:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eQuery the database for the \u003ccode\u003eArticle\u003c/code\u003e record that matches the \u003ccode\u003e:id\u003c/code\u003e passed to the route.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eStore the query in an instance variable.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eUpdate the values passed from the form (the update method here is the \u003ccode\u003eupdate\u003c/code\u003e method supplied by Active Record, not the \u003ccode\u003eupdate\u003c/code\u003e method we're creating). \u003cstrong\u003eThe update method takes a hash of the attributes for the model as its argument, e.g. `Article.find(1).update(title: \"I'm Changed\", description: \"And here too!\")\u003c/strong\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eSave the changes in the database.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eRedirect the user to the \u003ccode\u003eshow\u003c/code\u003e page so they can see the updated record.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eWe'll take advantage of Active Record's \u003ccode\u003eupdate\u003c/code\u003e method so that we're not manually assigning each attribute:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef update\u003cbr\u003e  @article = Article.find(params[:id])\u003cbr\u003e  @article.update(title: params[:article][:title], description: params[:article][:description])\u003cbr\u003e  redirect_to article_path(@article)\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if you go to the \u003ccode\u003eedit\u003c/code\u003e page and make changes to the \u003ccode\u003etitle\u003c/code\u003e or \u003ccode\u003edescription\u003c/code\u003e form elements, you will see they are changed when the form is submitted. The \u003ccode\u003eedit\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e functions are working properly!\u003c/p\u003e  \u003ch2\u003eExtra Credit\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eWhen only one form element is updated, such as the \u003ccode\u003etitle\u003c/code\u003e, does the \u003ccode\u003edescription\u003c/code\u003e also get updated?\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eHow could we refactor this form code? You may notice that we have a form for the \u003ccode\u003enew\u003c/code\u003e and \u003ccode\u003eedit\u003c/code\u003e actions. Is there a better way of doing this?\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g4cd8afea5011cc5a92e4de5753686fc7"},{"id":220352,"title":"Rails Edit and Update Actions Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"strong-params-basics\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/strong-params-basics/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/strong-params-basics\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/strong-params-basics/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eWhat are Strong Params?\u003c/h2\u003e\n\n\u003cp\u003eTo understand the goal of strong params, let's pretend that you run a pharmacy. What would happen if you let all prescription orders come through without checking for valid prescriptions, driver licenses, etc.? (Spoiler alert: you'd probably end up in jail.) It would be criminal to run a pharmacy without verifying that orders were legitimate. In the same way, Rails  wanted to shore up some security vulnerabilities. Since Rails 4+, developers are required to whitelist the parameters that are permitted to be sent to the database from a form.\u003c/p\u003e\n\n\u003ch2\u003eSetup\u003c/h2\u003e\n\n\u003cp\u003eTo prevent confusion, in previous lessons I manually turned off the strong parameter requirement. Let's discover first why strong params were created and then work with them.\u003c/p\u003e\n\n\u003ch2\u003eWhy Strong Params\u003c/h2\u003e\n\n\u003cp\u003eIn the Rails app in this lesson there is our blog application with Strong Params \u003cem\u003edisabled\u003c/em\u003e. Create a new Post by going to \u003ccode\u003e/posts/new\u003c/code\u003e. Once you have created that post, go ahead and edit it at \u003ccode\u003e/posts/1/edit\u003c/code\u003e. You'll notice there is no Description field! In this case, I don't want the user to be able to modify the description of a post once it's been created. This happens in all kinds of different cases. You wouldn't want a bank user to be able to edit their account number or balance, would you? But! \u003ccode\u003ebalance\u003c/code\u003e is still a field on the account class. In this case, \u003ccode\u003edescription\u003c/code\u003e is still an attribute for the Post class. Let's see if a user could \"hack\" our form to be able to modify the \u003ccode\u003edescription\u003c/code\u003e.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eRight click and inspect the page\u003c/li\u003e\n\u003cli\u003eFind the input for title. It should look something like this: \u003ccode\u003e\u0026lt;input type=\"text\" value=\"asdferwer\" name=\"post[title]\" id=\"post_title\"\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eRight click on the input and choose \"Edit as HTML\"\u003c/li\u003e\n\u003cli\u003eAdd the following new Description field:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cbr\u003e\u003cbr\u003eDescription:\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003col\u003e\n\u003cli\u003eClick somewhere else and look! a wild description field appears.\u003c/li\u003e\n\u003cli\u003eNow type in some message into the new field.\u003c/li\u003e\n\u003cli\u003eClick submit and you'll notice that the description has been updated. What a nefarious hack!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThat is the problem that strong params were created to fix. We want to make sure that when users submit a form we only let the fields we want get by.\u003c/p\u003e\n\n\u003ch2\u003eCode Implementation\u003c/h2\u003e\n\n\u003cp\u003eLet's enable Strong Params. To do this, open up \u003ccode\u003econfig/application.rb\u003c/code\u003e and delete the line that says: \u003ccode\u003econfig.action_controller.permit_all_parameters = true\u003c/code\u003e. Now restart your rails server and navigate to \u003ccode\u003elocalhost:3000/posts/new\u003c/code\u003e. Once there fill out the form and click \u003ccode\u003esubmit\u003c/code\u003e. You'll see we get the following \u003ccode\u003eForbiddenAttributesError\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/flatiron-bucket/readme-lessons/ForbiddenAttributesError.png\" alt=\"ForbiddenAttributesError\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhat this means is that Rails needs to be told what parameters are allowed to be submitted through the form to the database. The default is to let \u003cem\u003enothing\u003c/em\u003e through.\u003c/p\u003e\n\n\u003cp\u003eThe same error would occur if you were trying to update a record. So how do we fix this? Let's update the \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e methods to look like the code below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef create\u003cbr\u003e  @post = Post.new(params.require(:post).permit(:title, :description))\u003cbr\u003e  @post.save\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003edef update\u003cbr\u003e  @post = Post.find(params[:id])\u003cbr\u003e  @post.update(params.require(:post).permit(:title))\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you go back to the web browser and click refresh you'll see everything is working for both the \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e actions. Running the Rspec tests reveals that our specs are now passing again as well. You'll notice that our \u003ccode\u003eupdate\u003c/code\u003e only has a \u003ccode\u003e:title\u003c/code\u003e in the \u003ccode\u003epermit\u003c/code\u003e method. This is because, given our forms, we only want the \u003ccode\u003etitle\u003c/code\u003e to be submittable! If you go and do your nefarious hack again, it won't work. Thwarted!!\u003c/p\u003e\n\n\u003ch3\u003ePermit vs. Require\u003c/h3\u003e\n\n\u003cp\u003eWhat is the deal with \u003ccode\u003e#permit\u003c/code\u003e vs \u003ccode\u003e#require\u003c/code\u003e? The \u003ccode\u003e#require\u003c/code\u003e method is the most restrictive. It means that the \u003ccode\u003eparams\u003c/code\u003e that get passed in \u003cstrong\u003emust\u003c/strong\u003e contain a key called \"post\". If it's not included then it fails and the user gets an error. The \u003ccode\u003e#permit\u003c/code\u003e method is a bit looser. It means that the \u003ccode\u003eparams\u003c/code\u003e hash \u003cstrong\u003emay\u003c/strong\u003e have whatever keys are in it. So in the \u003ccode\u003ecreate\u003c/code\u003e case, it may have the \u003ccode\u003e:title\u003c/code\u003e and \u003ccode\u003e:description\u003c/code\u003e keys. If it doesn't have one of those keys it's no problem: the hash just won't accept any other keys.\u003c/p\u003e\n\n\u003ch2\u003eDRYing up Strong Params\u003c/h2\u003e\n\n\u003cp\u003eThe code we wrote above is great if you only have a \u003ccode\u003ecreate\u003c/code\u003e method in your controller. However, if you have a standard CRUD setup you will also need to implement the same code in your \u003ccode\u003eupdate\u003c/code\u003e action. In our example we had different code for \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e, but generally you have the same items. It's a standard Rails practice to remove code repetition, so let's abstract the strong parameter call into its own method in the controller:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef create\u003cbr\u003e  @post = Post.new(post_params)\u003cbr\u003e  @post.save\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003edef update\u003cbr\u003e  @post = Post.find(params[:id])\u003cbr\u003e  @post.update(post_params)\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eprivate\u003cbr\u003e\u003cbr\u003edef post_params\u003cbr\u003e  params.require(:post).permit(:title, :description)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, both our \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e methods in the \u003ccode\u003eposts\u003c/code\u003e controller can simply call \u003ccode\u003epost_params\u003c/code\u003e. This is a very helpful method since if you duplicated the strong parameter call in both the \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e methods you would need to change both method arguments every time you change the database schema for the \u003ccode\u003eposts\u003c/code\u003e table... and that sounds like a bad way to live. However, by creating this \u003ccode\u003epost_params\u003c/code\u003e method we can simply make one change and both methods will automatically be able to have the proper attributes whitelisted.\u003c/p\u003e\n\n\u003cp\u003eHm, but didn't we say above that we only wanted to permit updates to \u003ccode\u003e:title\u003c/code\u003e in\nthe \u003ccode\u003eupdate\u003c/code\u003e action? We can make sure that we meet that requirement with a\nslightly fancy splat:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef create\u003cbr\u003e  @post = Post.new(post_params(:title, :description))\u003cbr\u003e  @post.save\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003edef update\u003cbr\u003e  @post = Post.find(params[:id])\u003cbr\u003e  @post.update(post_params(:title))\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eprivate\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e# We pass the permitted fields in as *args;\u003cbr\u003e# this keeps `post_params` pretty dry while\u003cbr\u003e# still allowing slightly different behavior\u003cbr\u003e# depending on the controller action. This\u003cbr\u003e# should come after the other methods\u003cbr\u003e\u003cbr\u003edef post_params(*args)\u003cbr\u003e  params.require(:post).permit(*args)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTest this out in the browser and you can see that you can now create and update posts without any errors. And you will also notice that all of the Rspec tests are still passing.\u003c/p\u003e","exportId":"g152d86cdf79200962a9d1434457b651d"},{"id":220358,"title":"The form_for Helper","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-form_for-on-edit-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-form_for-on-edit-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_for-on-edit-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_for-on-edit-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIf you know how to utilize the \u003ccode\u003eform_tag\u003c/code\u003e method for creating forms in Rails you may wonder why you need to learn a new form building process. Let's imagine that you've been tasked with creating the world's first pet hamster social network, and one of the requirements is that the hamster profile page needs to have about 100 different form fields that can be edited. If you are using the \u003ccode\u003eform_tag\u003c/code\u003e method, your application will be technically resubmitting all 100 fields each time you edit the data. Your form view templates will also have 100 calls to the \u003ccode\u003e@hamster\u003c/code\u003e instance variable and each of the hamster attributes. Thankfully \u003ccode\u003eform_for\u003c/code\u003e is here and will help clean up the form view template and provide some additional benefits that we'll explore in this lesson.\u003c/p\u003e  \u003ch2\u003eRecap of \u003ccode\u003eform_tag\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eTo review, the \u003ccode\u003eform_tag\u003c/code\u003e helper method allows us to automatically generate HTML form code and integrate data to both auto fill the values as well as have the form submit data that the controller can use to either create or update a record in the database. It allows for you to pass in: the route to which the parameters for the form will be sent, the HTTP method that the form will utilize, and the attributes for each field.\u003c/p\u003e  \u003ch2\u003eIssues with using \u003ccode\u003eform_tag\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eBefore we get into the benefits and features of the \u003ccode\u003eform_for\u003c/code\u003e method, let's first discuss some of the key drawbacks to utilizing \u003ccode\u003eform_tag\u003c/code\u003e:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eOur form must be manually passed to the route where the form parameters will be submitted\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThe form has no knowledge of the form's goal; it doesn't know if the form is meant to create or update a record\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eYou're forced to have duplicate code throughout the form; it's hard to adhere to DRY principles when utilizing the \u003ccode\u003eform_tag\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eDifference between \u003ccode\u003eform_for\u003c/code\u003e and \u003ccode\u003eform_tag\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThe differences between \u003ccode\u003eform_for\u003c/code\u003e and \u003ccode\u003eform_tag\u003c/code\u003e are subtle, but important. Below is a basic breakdown of the differences. We'll start with talking about them at a high level perspective and then get into each one of the aspects on a practical/implementation basis:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eThe \u003ccode\u003eform_for\u003c/code\u003e method accepts the instance of the model as an argument. Using this argument, \u003ccode\u003eform_for\u003c/code\u003e is able to make a bunch of assumptions for you.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eform_for\u003c/code\u003e yields an object of class \u003ccode\u003eFormBuilder\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eform_for\u003c/code\u003e automatically knows the standard route (it follows RESTful conventions) for the form data as opposed to having to manually declare it\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eform_for\u003c/code\u003e gives the option to dynamically change the \u003ccode\u003esubmit\u003c/code\u003e button text (this comes in very handy when you're using a form partial and the \u003ccode\u003enew\u003c/code\u003e and \u003ccode\u003eedit\u003c/code\u003e pages will share the same form, but more on that in a later lesson)\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eA good rule of thumb for when to use one approach over the other is below:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eUse \u003ccode\u003eform_for\u003c/code\u003e when your form is directly connected to a model. Extending our example from the introduction, this would be our Hamster's profile edit form that connects to the profile database table. This is the most common case when \u003ccode\u003eform_for\u003c/code\u003e is used\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eUse \u003ccode\u003eform_tag\u003c/code\u003e when you simply need an HTML form generated. Examples of this would be: a search form field or a contact form\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eImplementation of \u003ccode\u003eform_for\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eLet's take the \u003ccode\u003eedit\u003c/code\u003e form that utilized the \u003ccode\u003eform_tag\u003c/code\u003e that we built before for \u003ccode\u003eposts\u003c/code\u003e and refactor it to use \u003ccode\u003eform_for\u003c/code\u003e. As a refresher, here is the \u003ccode\u003eform_tag\u003c/code\u003e version:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% # app/views/posts/edit.html.erb %\u0026gt;\u003cbr\u003e\u0026lt;h3\u0026gt;Post Form\u0026lt;/h3\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag post_path(@post), method: \"put\" do %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag :title, @post.title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_area_tag :description, @post.description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= submit_tag \"Submit Post\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's take this refactor one element at a time. Since we already have access to the \u003ccode\u003e@post\u003c/code\u003e instance variable we know that we can pass that to the \u003ccode\u003eform_for\u003c/code\u003e method. We also can remove the path argument and the \u003ccode\u003emethod\u003c/code\u003e call since \u003ccode\u003eform_for\u003c/code\u003e will automatically set these for us. How does \u003ccode\u003eform_for\u003c/code\u003e know that we want to use \u003ccode\u003ePUT\u003c/code\u003e for the form method? It's smart enough to know that because it's dealing with a pre-existing record you want to utilize \u003ccode\u003ePUT\u003c/code\u003e over \u003ccode\u003ePOST\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for(@post) do |f| %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003e|f|\u003c/code\u003e is an iterator variable that we can use on the new form object that will allow us to dynamically assign form field elements to each of the \u003ccode\u003e@post's\u003c/code\u003e data attributes, along with auto filling the values for each field. We get this \u003ccode\u003eActionView\u003c/code\u003e functionality because we're using the \u003ccode\u003eform_for\u003c/code\u003e method, which gives us access to the \u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html\"\u003e\u003ccode\u003eFormBuilder\u003c/code\u003e module in Rails\u003c/a\u003e. Inside of the form, we can now refactor the fields:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u0026lt;%= f.text_field :title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;label\u0026gt;Post description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u0026lt;%= f.text_area :description %\u0026gt;\u0026lt;br\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIsn't that much cleaner? Notice how we no longer have to pass in the values manually? By passing in the attribute as a symbol (e.g. \u003ccode\u003e:title\u003c/code\u003e) that will automatically tell the form field what model attribute to be associated with. It also is what auto-fills the values for us. Next, let's refactor the submit button. Instead of \u003ccode\u003e\u0026lt;%= submit_tag \"Submit Post\" %\u0026gt;\u003c/code\u003e, we can change it to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= f.submit %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur new form will look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h3\u0026gt;Post Form\u0026lt;/h3\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for(@post) do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_area :description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur refactor work isn't quite done. If you had previously created a \u003ccode\u003ePUT\u003c/code\u003e route like we did in the \u003ccode\u003eform_tag\u003c/code\u003e lesson, we'll need to change that to a \u003ccode\u003ePATCH\u003c/code\u003e method since that is the HTTP verb that \u003ccode\u003eform_for\u003c/code\u003e utilizes. We can make that change in the \u003ccode\u003econfig/routes.rb\u003c/code\u003e file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003eresources :posts, only: [:index, :show, :new, :create, :edit, :update] \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003epatch 'posts/:id', to: 'posts#update' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat's the difference between \u003ccode\u003ePUT\u003c/code\u003e and \u003ccode\u003ePATCH\u003c/code\u003e? It's pretty subtle. On a high level, \u003ccode\u003ePUT\u003c/code\u003e has the ability to update the entire object, whereas \u003ccode\u003ePATCH\u003c/code\u003e simply updates the elements that were changed. Many developers choose to utilize \u003ccode\u003ePATCH\u003c/code\u003e as much as possible because it requires less overhead; however, it is pretty rare when you will need to distinguish between the two verbs, and they are used interchangeably quite often.\u003c/p\u003e  \u003cp\u003eYou can also add \u003ccode\u003eupdate\u003c/code\u003e as an additional argument in the \u003ccode\u003eresources\u003c/code\u003e method array, and this will all happen automatically.\u003c/p\u003e  \u003cp\u003eNow if you start the Rails server and go to an \u003ccode\u003eedit\u003c/code\u003e page, you'll see that the data is loaded into the form and everything appears to be working properly. However, if you change the value of one of the form fields and click \u003ccode\u003eUpdate Post\u003c/code\u003e, you will see that the record updates incorrectly. So what's happening? When you run into behavior like this, it's good practice to look at the console logs to see if they tell us anything. Below is an example of what you might see after submitting the form:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/flatiron-bucket/readme-lessons/unpermitted_params.png\" alt=\"Unpermitted Parameters\"\u003e\u003c/p\u003e  \u003cp\u003eBecause \u003ccode\u003eform_for\u003c/code\u003e is bound directly with the \u003ccode\u003ePost\u003c/code\u003e model, we need to pass the model name into the Active Record \u003ccode\u003eupdate\u003c/code\u003e method in the controller. Let's change \u003ccode\u003e@post.update(title: params[:title], description: params[:description])\u003c/code\u003e to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e@post.update(params.require(:post).permit(:title, :description)) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo, why do we need to \u003ccode\u003erequire\u003c/code\u003e the \u003ccode\u003epost\u003c/code\u003e model? If you look at the old form, the \u003ccode\u003eparams\u003c/code\u003e would look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"title\": \"My Title\",\u003cbr\u003e  \"description\": \"My description\"\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith the new structure introduced by \u003ccode\u003eform_for\u003c/code\u003e, the \u003ccode\u003eparams\u003c/code\u003e now look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"post\": {\u003cbr\u003e            \"title\": \"My Title\",\u003cbr\u003e            \"description\": \"My description\"\u003cbr\u003e          }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice how the \u003ccode\u003etitle\u003c/code\u003e and \u003ccode\u003edescription\u003c/code\u003e attributes are now nested within the \u003ccode\u003epost\u003c/code\u003e hash? That's why we needed to add the \u003ccode\u003erequire\u003c/code\u003e method. But Rails wants us to be conscious of which attributes we allow to be updated in our database, so we must also \u003ccode\u003epermit\u003c/code\u003e the \u003ccode\u003etitle\u003c/code\u003e and \u003ccode\u003edescription\u003c/code\u003e in the nested hash. Using strong parameters like this will allow ActiveRecord to use mass assignment without trouble.\u003c/p\u003e  \u003cp\u003eIf you go back to the \u003ccode\u003eedit\u003c/code\u003e page and submit the form, the record will be updated in the database successfully.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eNice work! You now know how to integrate multiple form helpers into a Rails application, and you should have a good idea on when to properly use \u003ccode\u003eform_for\u003c/code\u003e vs. \u003ccode\u003eform_tag\u003c/code\u003e.\u003c/p\u003e","exportId":"g8f2333476b692d34ff26b7d7d03b22f3"},{"id":220370,"title":"Rails Form_For Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-form_for-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-form_for-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_for-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_for-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse \u003ccode\u003eform_for\u003c/code\u003e to build a \u003ccode\u003enew\u003c/code\u003e form\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eform_for\u003c/code\u003e to build an \u003ccode\u003eedit\u003c/code\u003e form\u003c/li\u003e\n\u003cli\u003eMass assign form data to \u003ccode\u003eActiveRecord\u003c/code\u003e instances on \u003ccode\u003enew\u003c/code\u003e and \u003ccode\u003eedit\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eBuild RESTFul actions for \u003ccode\u003enew\u003c/code\u003e, \u003ccode\u003ecreate\u003c/code\u003e, \u003ccode\u003eedit\u003c/code\u003e, and \u003ccode\u003eupdate\u003c/code\u003e, with the correct routes and route helper urls.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFor this lab you will be extending the functionality of the Flatiron school's student management application by building in the functionality to create and edit school classes. You will build all of the functionality from scratch, including building out the models, views, and controllers for the \u003ccode\u003eSchoolClass\u003c/code\u003e and \u003ccode\u003eStudent\u003c/code\u003e resources.\u003c/p\u003e\n\n\u003cp\u003eBelow is what will be needed for each component of the MVC structure:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eModels\u003c/strong\u003e - Create a \u003ccode\u003eSchoolClass\u003c/code\u003e model, along with its associated database table. The \u003ccode\u003eSchoolClass\u003c/code\u003e table should have the columns: \u003ccode\u003etitle:string\u003c/code\u003e and \u003ccode\u003eroom_number:integer\u003c/code\u003e. The \u003ccode\u003eStudent\u003c/code\u003e model and database table have already been created for you.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eControllers\u003c/strong\u003e - Create controller files for \u003ccode\u003eschool_classes\u003c/code\u003e and \u003ccode\u003estudents\u003c/code\u003e. Build out the \u003ccode\u003enew\u003c/code\u003e, \u003ccode\u003ecreate\u003c/code\u003e, \u003ccode\u003eshow\u003c/code\u003e, \u003ccode\u003eedit\u003c/code\u003e, and \u003ccode\u003eupdate\u003c/code\u003e actions in each of the controllers.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eViews\u003c/strong\u003e - Create a show page for each resource, along with \u003ccode\u003enew\u003c/code\u003e and \u003ccode\u003eedit\u003c/code\u003e forms.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou will also need to create routes for each path mentioned above.\u003c/p\u003e\n\n\u003cp\u003eThe tests for this application are located in the \u003ccode\u003espec/controllers/\u003c/code\u003e, \u003ccode\u003espec/features/\u003c/code\u003e, and \u003ccode\u003espec/models/\u003c/code\u003e directories.\u003c/p\u003e\n\n\u003ch2\u003eRequirements\u003c/h2\u003e\n\n\u003cp\u003eUtilize the \u003ccode\u003eform_for\u003c/code\u003e methods for all four of the forms and integrate each \u003ccode\u003eform_for\u003c/code\u003e call with the respective controller actions. Also make sure to utilize the \u003ccode\u003e\u0026lt;%= f.submit %\u0026gt;\u003c/code\u003e submit button syntax to have the button text automatically generated.\u003c/p\u003e\n\n\u003cp\u003eSince you're using \u003ccode\u003eform_for\u003c/code\u003e, make sure you are using strong parameters for the controller \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e actions, if you don't remember how to do it, here is how we implemented strong params in the README: \u003ccode\u003e@post.update(params.require(:post).permit(:title, :description))\u003c/code\u003e. (Hint: you can pass the strong parameter call to the \u003ccode\u003ecreate\u003c/code\u003e method just like we did on \u003ccode\u003eupdate\u003c/code\u003e.)\u003c/p\u003e\n\n\u003cp\u003eIf you run into issues drawing the routes, navigate to the form in your browser and use inspect element to see what path \u003ccode\u003eform_for\u003c/code\u003e is automatically trying to pass the form data to.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/rails-form_for-on-edit-readme\"\u003eReading\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html\"\u003eDocumentation\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g02aac445fd0a34d7d604527b553b0a5b"},{"id":220378,"title":"Rails Generators","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-generators-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-generators-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-generators-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-generators-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIf you go down the list on all of the tasks necessary to build out CRUD functionality in an application, it's quite extensive. From creating database tables, configuring views, and drawing individual routes, the feature builds can be time consuming and bug prone. Wouldn't it be nice if there was a more efficient way of integrating standard features instead of having to build them manually each time?\u003c/p\u003e  \u003cp\u003eA primary goal of the Rails team was to make it efficient to build core application functionality. The Rails system has a number of generators that will do some of the manual work for us.\u003c/p\u003e  \u003cp\u003eAs nice as it is to use the generators to save time, they also provide some additional extra benefits:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eThey can set up some basic specs for an application's test suite. They won't write our complex logic tests for us, but they will provide some basic examples.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThey are set up to work the same way each time. This helps standardize your code and enables your development to be more efficient since you don't have to worry as much about bugs related to spelling, syntax errors, or anything else that can occur when writing code manually.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThey follow Rails best practices, which includes utilizing RESTful naming patterns, removing duplicate code, using partials and a number of other best of breed design patterns. (If you don't know what all of these are, don't worry -- we will cover them shortly.)\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eAbusing Generators\u003c/h2\u003e  \u003cp\u003eSo if generators are so amazing, why wouldn't we always want to use them? I'll answer your question with another question: a chainsaw is a wonderful tool, so why wouldn't you use it for every job you have around the house? The answer to both questions is the same: great tools are only great tools if they are matched with the right task. In the same way that you should only use a chainsaw when you have a job that requires it, generators should only be used when they are needed.\u003c/p\u003e  \u003cp\u003eExtending our example from above, why wouldn't you use a chainsaw to build a model airplane?\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/flatiron-bucket/readme-lessons/chainsaw_example.jpg\" alt=\"Chainsaw Example\"\u003e\u003c/p\u003e  \u003cp\u003eIn the same manner as our chainsaw example, certain generators create quite a bit of code. If that code is not going to be used, it will needlessly clutter the application code and cause confusion for future developers. One of our instructors recounts the following all-too-familiar anecdote:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eA few years ago I took over as the lead developer for a large legacy Rails application. The previous developer had relied on generators, even when they shouldn't have been used, and the end result was that it took months to simply figure out what code was being used and what was 'garbage' code that simply came from the generators.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eSo when is the right time to use a generator? After we've gone over the actions of each of the generators, the answer to this query should become readily apparent. In addition, we'll walk through some case studies to help understand when each type of generator is beneficial.\u003c/p\u003e  \u003ch2\u003eRails Generate\u003c/h2\u003e  \u003cp\u003eAll of the Rails generators are entered as commands into the terminal and will follow this syntax:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails generate \u0026lt;name of generator\u0026gt; \u0026lt;options\u0026gt; --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003e--no-test-framework\u003c/code\u003e is a flag that tells the generator not to create any tests for the newly-generated models, controllers, etc. When you're working on your own Rails applications, you don't need the flag —\u0026nbsp;it's quite helpful for quickly stubbing out a test suite. However, it's necessary for labs because we don't want Rails adding additional tests on top of the test suite that already comes with the lesson.\u003c/p\u003e  \u003cp\u003eFor efficiency's sake, Rails aliased the \u003ccode\u003egenerate\u003c/code\u003e method to \u003ccode\u003eg\u003c/code\u003e, so the CLI command above could be shortened to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g \u0026lt;name of generator\u0026gt; \u0026lt;options\u0026gt; --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDifferent types of generators\u003c/h2\u003e  \u003cp\u003eBelow are the main generators that Rails offers. We'll go through examples of each:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eMigrations\u003c/li\u003e \u003cli\u003eModels\u003c/li\u003e \u003cli\u003eControllers\u003c/li\u003e \u003cli\u003eResources\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eMigration Generators\u003c/h2\u003e  \u003cp\u003eUp to this point, we've been creating our migrations by hand. This has been beneficial because it's important to understand how migrations work. However, Rails has a great set of migration generators with conventions that can help make managing the database schema very efficient.\u003c/p\u003e  \u003cp\u003eLet's start using database migrations in our case study application and update the \u003ccode\u003eposts\u003c/code\u003e table. To add a new column called \u003ccode\u003epublished_status\u003c/code\u003e, we can use the following command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g migration add_published_status_to_posts published_status:string --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the terminal you will see it creates a migration file for us: \u003ccode\u003edb/migrate/20151127174031_add_published_status_to_posts.rb\u003c/code\u003e. Since migration file names need to be unique, the generator prepends a timestamp before the file name. In the case of the migration I just ran, it added \u003ccode\u003e20151127174031\u003c/code\u003e. You can break this timestamp down as follows: \u003ccode\u003eyear: 2015, month: 11, date: 27, and then the time itself\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eReady to see something pretty cool? Open up the file it created, which you can find in the \u003ccode\u003edb/migrate\u003c/code\u003e directory. It should look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass AddPublishedStatusToPosts \u0026lt; ActiveRecord::Migration\u003cbr\u003e  def change\u003cbr\u003e    add_column :posts, :published_status, :string\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice what the generator did? It automatically knew that we wanted to add a new column and built out the \u003ccode\u003eadd_column\u003c/code\u003e method call. How did this happen? It turns out that the way that you name the migration file is very important. By prepending the \u003ccode\u003eadd_\u003c/code\u003e text to the name it gave a signal to the migration generator that the purpose of this schema change will be to add a column(s) to the table. How did it know the table we wanted to add to? By appending the \u003ccode\u003e_posts\u003c/code\u003e text to the end of the migration name it tells Rails that the table we want to change is the \u003ccode\u003eposts\u003c/code\u003e table. Lastly, by adding the \u003ccode\u003epublished_status:string\u003c/code\u003e text at the end of the command tells the generator that the new column name will be \u003ccode\u003epublished_status\u003c/code\u003e and the data will be of type \u003ccode\u003estring\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eTo update the database schema you can run \u003ccode\u003erake db:migrate\u003c/code\u003e and the schema will reflect the change.\u003c/p\u003e  \u003cp\u003eOh no, we made a mistake, let's get rid of that column name with another migration:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g migration remove_published_status_from_posts published_status:string --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you open up this migration file, you will see the following code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass RemovePublishedStatusFromPosts \u0026lt; ActiveRecord::Migration\u003cbr\u003e  def change\u003cbr\u003e    remove_column :posts, :published_status, :string\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo we can add and remove columns automatically by running migration generators. What else can we do? Let's walk through a real world scenario:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g migration add_post_status_to_posts post_status:boolean --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith this migration we'll add the column \u003ccode\u003epost_status\u003c/code\u003e with the data type of boolean. While adding this new attribute to one of the forms we discover that the column really needs to be of type \u003ccode\u003estring\u003c/code\u003e instead of being a \u003ccode\u003eboolean\u003c/code\u003e. Let's see if we can use the same syntax for the generator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g migration change_post_status_data_type_to_posts post_status:string --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis won't automatically create the \u003ccode\u003echange_column\u003c/code\u003e method; the file will look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass ChangePostStatusDataTypeToPosts \u0026lt; ActiveRecord::Migration\u003cbr\u003e  def change\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can simply add in the \u003ccode\u003echange_column\u003c/code\u003e method like this: \u003ccode\u003echange_column :posts, :post_status, :string\u003c/code\u003e and after running \u003ccode\u003erake db:migrate\u003c/code\u003e our schema will be updated.\u003c/p\u003e  \u003cp\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Migration.html\"\u003eFull migration documentation\u003c/a\u003e\u003c/p\u003e  \u003ch2\u003eModel Generators\u003c/h2\u003e  \u003cp\u003eThis is a generator type that gets used regularly. It does a great job of creating the core code needed to create a model and associated database table without adding a lot of bloat to the application. Let's add a new model to the app called \u003ccode\u003eAuthor\u003c/code\u003e with columns \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003ebio\u003c/code\u003e, and \u003ccode\u003egenre\u003c/code\u003e, we can use the model generator with the following CLI command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g model Author name:string genre:string bio:text --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRunning this generator will create the following files for us:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003einvoke  active_record\u003cbr\u003ecreate    db/migrate/20190618010724_create_authors.rb\u003cbr\u003ecreate    app/models/application_record.rb\u003cbr\u003ecreate    app/models/author.rb \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAt a high level, this has created: * A database migration that will add a table and add the columns \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003egenre\u003c/code\u003e, and \u003ccode\u003ebio\u003c/code\u003e. * A model file that will inherit from \u003ccode\u003eApplicationRecord\u003c/code\u003e (as of Rails 5)\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Up to Rails 4.2, all models inherited from \u003ccode\u003eActiveRecord::Base\u003c/code\u003e. Since Rails 5, all models inherit from \u003ccode\u003eApplicationRecord\u003c/code\u003e. If you've used an older version of Rails in the past, you may be wondering what happened to \u003ccode\u003eActiveRecord::Base\u003c/code\u003e? Well, not a lot has changed, actually. This file is automatically added to models in Rails 5 applications:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/application_record.rb\u003cbr\u003eclass ApplicationRecord \u0026lt; ActiveRecord::Base\u003cbr\u003e  self.abstract_class = true\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt allows more flexibility if you want to add some extra functionality to Active Record.\u003c/p\u003e  \u003cp\u003eTo continue with the code-along, let's run \u003ccode\u003erake db:migrate\u003c/code\u003e, which will add the authors table to the database schema. We can test this out in the console:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eAuthor.all\u003cbr\u003e=\u0026gt; #\u0026lt;ActiveRecord::Relation []\u0026gt;\u003cbr\u003e\u003cbr\u003eAuthor.create!(name: \"Stephen King\", genre: \"Horror\", bio: \"Bio details go here\")\u003cbr\u003e=\u0026gt; #\u0026lt;Author id: 1, name: \"Stephen King\", genre: \"Horror\", bio: \"Bio details go here\", created_at: \"2015-11-27 22:59:14\", updated_at: \"2015-11-27 22:59:14\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo it looks like our model has been created properly. As you can see, this particular generator created a few different pieces of functionality with a single command, and it did it with minimal code bloat.\u003c/p\u003e  \u003ch2\u003eController Generators\u003c/h2\u003e  \u003cp\u003eController generators are great if you are creating static views or non-CRUD related features (we'll walk through why this is the case shortly). Let's create an \u003ccode\u003eadmin\u003c/code\u003e controller that will manage the data flow and view rendering for our admin dashboard pages:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g controller admin dashboard stats financials settings --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will create a ton of code! Below is the full list:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecreate  app/controllers/admin_controller.rb\u003cbr\u003e route  get 'admin/settings'\u003cbr\u003e route  get 'admin/financials'\u003cbr\u003e route  get 'admin/stats'\u003cbr\u003e route  get 'admin/dashboard'\u003cbr\u003einvoke  erb\u003cbr\u003ecreate    app/views/admin\u003cbr\u003ecreate    app/views/admin/dashboard.html.erb\u003cbr\u003ecreate    app/views/admin/stats.html.erb\u003cbr\u003ecreate    app/views/admin/financials.html.erb\u003cbr\u003ecreate    app/views/admin/settings.html.erb\u003cbr\u003einvoke  helper\u003cbr\u003ecreate    app/helpers/admin_helper.rb\u003cbr\u003einvoke  assets\u003cbr\u003einvoke    coffee\u003cbr\u003ecreate      app/assets/javascripts/admin.js.coffee\u003cbr\u003einvoke    scss\u003cbr\u003ecreate      app/assets/stylesheets/admin.css.scss \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo what got added here? Below is a list that is a little more high level:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eA controller file that will inherit from \u003ccode\u003eApplicationController\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA set of routes to each of the generator arguments: \u003ccode\u003edashboard\u003c/code\u003e, \u003ccode\u003estats\u003c/code\u003e, \u003ccode\u003efinancials\u003c/code\u003e, and \u003ccode\u003esettings\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA new directory for all of the view templates along with a view template file for each of the controller actions that we declared in the generator command\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA view helper method file\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA Coffeescript file for specific JavaScripts for that controller\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eAn \u003ccode\u003escss\u003c/code\u003e file for the styles for the controller\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAs you can see, this one generator created a large number of files and code. This is a generator to be careful with – it can create a number of files that are never used and can cause wasted files in an application.\u003c/p\u003e  \u003cp\u003eSo why are controller generators not the best for creating CRUD based features? What would have happened if we wanted to create a controller that managed the CRUD flow for managing accounts? Here would be one implementation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g controller accounts new create edit update destroy index show --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eImmediately you may notice that this would create wasted code since it would create view templates for \u003ccode\u003ecreate\u003c/code\u003e, \u003ccode\u003eupdate\u003c/code\u003e, and \u003ccode\u003edestroy\u003c/code\u003e actions, so they would need to be removed immediately. They would also be set up with \u003ccode\u003eget\u003c/code\u003e HTTP requests, which would not work at all. In the next section we're going to cover a better option for creating CRUD functionality.\u003c/p\u003e  \u003ch2\u003eResource Generators\u003c/h2\u003e  \u003cp\u003eIf you are building an API, using a front end MVC framework, or simply want to manually create your views, the \u003ccode\u003eresource\u003c/code\u003e generator is a great option for creating the code. Since we didn't create the \u003ccode\u003eAccount\u003c/code\u003e controller we mentioned before, let's build it here:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g resource Account name:string payment_status:string --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis creates quite a bit of code for us. Below is the full list:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003einvoke  active_record\u003cbr\u003ecreate    db/migrate/20170712011124_create_accounts.rb\u003cbr\u003ecreate    app/models/account.rb\u003cbr\u003einvoke  controller\u003cbr\u003ecreate    app/controllers/accounts_controller.rb\u003cbr\u003einvoke    erb\u003cbr\u003ecreate      app/views/accounts\u003cbr\u003einvoke    helper\u003cbr\u003ecreate      app/helpers/accounts_helper.rb\u003cbr\u003einvoke    assets\u003cbr\u003einvoke      coffee\u003cbr\u003ecreate        app/assets/javascripts/accounts.js.coffee\u003cbr\u003einvoke      scss\u003cbr\u003ecreate        app/assets/stylesheets/accounts.css.scss\u003cbr\u003einvoke  resource_route\u003cbr\u003e route    resources :accounts \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo what does our app have now due to the generator? Below is a summary:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eA migration file that will create a new database table for the attributes passed to it in the generator\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA model file that inherits from \u003ccode\u003eApplicationRecord\u003c/code\u003e (as of Rails 5; see Note above)\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA controller file that inherits from \u003ccode\u003eApplicationController\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA view directory, but no view template files\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA view helper file\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA Coffeescript file for specific JavaScripts for that controller\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA \u003ccode\u003escss\u003c/code\u003e file for the styles for the controller\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA full \u003ccode\u003eresources\u003c/code\u003e call in the \u003ccode\u003eroutes.rb\u003c/code\u003e file\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe \u003ccode\u003eresource\u003c/code\u003e generator is a smart generator that creates some of the core functionality needed for a full featured resource without much code bloat. Looking over the files I can't find one file that I need to remove, so that's a good sign.\u003c/p\u003e  \u003cp\u003eThe last item that was added may not look familiar to you. \u003ccode\u003eresources :accounts\u003c/code\u003e is considered a 'magic' route that entails the full set of RESTful routes needed to perform CRUD in an application. So what does \u003ccode\u003eresources :accounts\u003c/code\u003e translate into?\u003c/p\u003e  \u003cp\u003eThere's an easy way to find out. Let's run \u003ccode\u003erake routes\u003c/code\u003e with a filter so it only shows us the routes for accounts:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erake routes | grep account \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis \u003ccode\u003erake\u003c/code\u003e command will produce the following output in the console:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaccounts      GET    /accounts(.:format)          accounts#index\u003cbr\u003e              POST   /accounts(.:format)          accounts#create\u003cbr\u003enew_account   GET    /accounts/new(.:format)      accounts#new\u003cbr\u003eedit_account  GET    /accounts/:id/edit(.:format) accounts#edit\u003cbr\u003eaccount       GET    /accounts/:id(.:format)      accounts#show\u003cbr\u003e              PATCH  /accounts/:id(.:format)      accounts#update\u003cbr\u003e              PUT    /accounts/:id(.:format)      accounts#update\u003cbr\u003e              DELETE /accounts/:id(.:format)      accounts#destroy \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003eresources\u003c/code\u003e automatically creates each of these routes and makes them available to the controller. If you open up the \u003ccode\u003eaccounts_controller.rb\u003c/code\u003e file you may notice something interesting: none of the actions shown in the route list are even there! However, I actually like this because it creates the minimal amount of code possible and then lets me add only the features that the app needs. We'll get into a full review of each of the options available with the \u003ccode\u003eresources\u003c/code\u003e method in a later lesson. For right now just know that by default it creates the full suite of CRUD routes.\u003c/p\u003e  \u003ch2\u003eVideo Review\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=KKQ8lpEyw2g\"\u003eIntro to Rails\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cp\u003e\u003ca href=\"http://api.rubyonrails.org/classes/Rails/Generators.html\"\u003eRails Generators\u003c/a\u003e\u003c/p\u003e","exportId":"g0ec777bd17dc6e019592d648c9528919"},{"id":220384,"title":"Rails CRU Form_For Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-cru-form_for-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-cru-form_for-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-cru-form_for-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-cru-form_for-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild RESTful actions for index, show, new, create, edit, update\u003c/li\u003e\n\u003cli\u003eUse form_for for all forms (no need to share forms or partials)\u003c/li\u003e\n\u003cli\u003eCorrectly redirect when needed\u003c/li\u003e\n\u003cli\u003eInterlink between pages using route helpers\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYou've been tasked with building a Rails app called \u003cstrong\u003eBeats by Rails\u003c/strong\u003e, the app will need to have three separate models:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eSongs\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eArtists\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eGenres\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe data relationship will look something like this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eA song belongs to an artist\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eA song belongs to a genre\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eA genre has many songs\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAn artist has many songs\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe tests are in the \u003ccode\u003espec/features\u003c/code\u003e directory for each model. You will need to build in the ability to \u003ccode\u003ecreate\u003c/code\u003e, \u003ccode\u003eupdate\u003c/code\u003e, and \u003ccode\u003eshow\u003c/code\u003e for each model. And for the song \u003ccode\u003eshow\u003c/code\u003e page you need to have it display each of the song's genre and artist, and link to the respective genre and artist \u003ccode\u003eshow\u003c/code\u003e pages.\u003c/p\u003e\n\n\u003cp\u003eThe database tables should look like this (note each column type):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etable \"artists\"\u003cbr\u003e  string   \"name\"\u003cbr\u003e  text     \"bio\"\u003cbr\u003e\u003cbr\u003etable \"genres\"\u003cbr\u003e  string   \"name\"\u003cbr\u003e\u003cbr\u003etable \"songs\"\u003cbr\u003e  string   \"name\"\u003cbr\u003e  integer  \"artist_id\"\u003cbr\u003e  integer  \"genre_id\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eKey notes to remember\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eYou will need to use \u003ca href=\"https://github.com/learn-co-curriculum/strong-params-basics\"\u003estrong params\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDon't worry about integrating drop down form elements for the genre and artist selections on the song form pages yet, simply enter in the ID in for each element\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYou can use the \u003ccode\u003eresource\u003c/code\u003e, \u003ccode\u003emodel\u003c/code\u003e, \u003ccode\u003emigration\u003c/code\u003e, and \u003ccode\u003econtroller\u003c/code\u003e generators, but do not use the \u003ccode\u003escaffold\u003c/code\u003e generator\n\u003cem\u003eTop Tip: Remember to use the --no-test-framework flag when generating models and controllers to avoid generating unnecessary testing frameworks!\u003c/em\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gaea76ee6830b9dd069d465a94136ec01"}]},{"id":24075,"name":"Rails Validation and Forms","status":"started","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g30a1ca1287e66de8e83868ca659ed643","items":[{"id":220409,"title":"Active Record Validations","type":"WikiPage","indent":0,"locked":false,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"activerecord-validations-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/activerecord-validations-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-validations-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-validations-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eActiveRecord can validate our models for us before they even touch the database. This means it's harder to end up with bad data, which can cause problems later even if our code is technically bug-free.\u003c/p\u003e  \u003cp\u003eWe can use \u003ccode\u003eActiveRecord::Base\u003c/code\u003e helper methods like \u003ccode\u003e#validates\u003c/code\u003e to set things up.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eAfter this lesson, you should be able to:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eIdentify when validation occurs in the lifespan of an object\u003c/li\u003e \u003cli\u003eIntrospect on the \u003ccode\u003eActiveRecord::Errors\u003c/code\u003e collection object on an AR instance  \u003cul\u003e \u003cli\u003euse \u003ccode\u003e#valid?\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003euse \u003ccode\u003e#errors\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eGenerate \u003ccode\u003efull_message\u003c/code\u003es for errors\u003c/li\u003e \u003cli\u003eCheck an attribute for validation errors\u003c/li\u003e \u003cli\u003eAdd a custom validation error to an AR model\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eContext: Databases and Data Validity\u003c/h2\u003e  \u003cp\u003eWhat is a \"validation\"?\u003c/p\u003e  \u003cp\u003eIn the context of Rails, validations are special method calls that go at the top of model class definitions and prevent them from being saved to the database if their data doesn't look right.\u003c/p\u003e  \u003cp\u003eIn general, \"validations\" are any code that perform the job of protecting the database from invalid data.\u003c/p\u003e  \u003ch3\u003eAR Validations Are Not Database Constraints (Validations)\u003c/h3\u003e  \u003cp\u003eMany relational databases, such as SQLite and PostgreSQL, have data validation features that check things like length and data type. These validations are typically added via migrations, and depending on the specific validation, they may or may not be reflected in the schema.rb file.\u003c/p\u003e  \u003cp\u003eDatabase constraints and model validations are also functionally different. Database constraints will ALWAYS be checked when adding or updating data in the database, while AR validations will only be checked when adding or updating data through Ruby/Rails (e.g. if we use SQL code in the command line to modify the database, AR validations are not run).\u003c/p\u003e  \u003cp\u003eSome developers use database constraints and AR validations, while others rely on AR validations alone. Ultimately, it depends on how the developer plans to add and update data in the database. In this lesson, we'll be focusing on AR validations.\u003c/p\u003e  \u003ch3\u003eWhat is \"invalid data\"?\u003c/h3\u003e  \u003cp\u003eSuppose you get a new phone and you ask all of your friends for their phone number again. One of them tells you, \"555-868-902\". If you're paying attention, you'll probably wrinkle your nose and think, \"Wait a minute. That doesn't sound like a real phone number.\"\u003c/p\u003e  \u003cp\u003e\"555-868-902\" is an example of \u003cstrong\u003einvalid data\u003c/strong\u003e... for a phone number. It's probably a valid account number for some internet service provider in Alaska, but there's no way to figure out what your friend's phone number is from those nine numbers. It's a showstopper, and even worse, it kind of looks like valid data if you're not looking closely.\u003c/p\u003e  \u003ch3\u003eValidations Protect the Database\u003c/h3\u003e  \u003cp\u003eInvalid data is the bogeyman of web applications: it hides in your database until the worst possible moment, then jumps out and ruins everything by causing confusing errors.\u003c/p\u003e  \u003cp\u003eImagine the phone number above being saved to the database in an application that makes automatic calls using the Twilio API. When your system tries to call this number, there will be an error because no such phone number exists, which means you need to have an entire branch of code dedicated to handling \u003cem\u003ejust\u003c/em\u003e that edge case.\u003c/p\u003e  \u003cp\u003eIt would be much easier if you never have bad data in the first place, so you can focus on handling edge cases that are truly unpredictable.\u003c/p\u003e  \u003cp\u003eThat's where validations come in.\u003c/p\u003e  \u003ch2\u003eBasic Usage\u003c/h2\u003e  \u003cp\u003eFor more examples of basic validation usage, see the Rails Guide for \u003ca href=\"http://guides.rubyonrails.org/active_record_validations.html\"\u003eActive Record Validations\u003c/a\u003e. Take a few minutes to browse the helpers listed in Section 2.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Person \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates :name, presence: true\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ePerson.create(name: \"John Doe\").valid? # =\u0026gt; true\u003cbr\u003ePerson.create(name: nil).valid? # =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003e#validates\u003c/code\u003e is our Swiss Army knife for validations. It takes two arguments: the first is the name of the attribute we want to validate, and the second is a hash of options that will include the details of how to validate it.\u003c/p\u003e  \u003cp\u003eIn this example, the options hash is \u003ccode\u003e{ presence: true }\u003c/code\u003e, which implements the most basic form of validation, preventing the object from being saved if its \u003ccode\u003ename\u003c/code\u003e attribute is empty.\u003c/p\u003e  \u003ch2\u003eLifecycle Timing\u003c/h2\u003e  \u003cp\u003eBefore proceeding, keep the answer to this question in mind:\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eWhat is the difference between \u003ccode\u003e#new\u003c/code\u003e and \u003ccode\u003e#create\u003c/code\u003e?\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eIf you've forgotten, \u003ccode\u003e#new\u003c/code\u003e instantiates a new ActiveRecord model \u003cem\u003ewithout\u003c/em\u003e saving it to the database, whereas \u003ccode\u003e#create\u003c/code\u003e immediately attempts to save it, as if you had called \u003ccode\u003e#new\u003c/code\u003e and then \u003ccode\u003e#save\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eDatabase activity triggers validation\u003c/strong\u003e. An ActiveRecord model instantiated with \u003ccode\u003e#new\u003c/code\u003e will not be validated, because no attempt to write to the database was made. Validations won't run unless you call a method that actually hits the DB, like \u003ccode\u003e#save\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe only way to trigger validation without touching the database is to call the \u003ccode\u003e#valid?\u003c/code\u003e method.\u003c/p\u003e  \u003cp\u003eFor a full list of methods that trigger validation, see \u003ca href=\"http://guides.rubyonrails.org/active_record_callbacks.html#running-callbacks\"\u003eSection 4\u003c/a\u003e of the Rails Guide for Active Record Callbacks. Don't worry about the rest of the information in that guide just yet; we'll go into callbacks later!\u003c/p\u003e  \u003ch2\u003eValidation Failure\u003c/h2\u003e  \u003cp\u003eHere it is, the moment of truth. What can we do when a record fails validation?\u003c/p\u003e  \u003ch3\u003eHow can you tell when a record fails validation?\u003c/h3\u003e  \u003cp\u003e\u003cstrong\u003ePay attention to return values!\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eBy default, ActiveRecord does not raise an exception when validation fails.  DB operation methods (such as \u003ccode\u003e#save\u003c/code\u003e) will simply return \u003ccode\u003efalse\u003c/code\u003e and decline to update the database.\u003c/p\u003e  \u003cp\u003eEvery database method has a sister method with a \u003ccode\u003e!\u003c/code\u003e at the end which will raise an exception (\u003ccode\u003e#create!\u003c/code\u003e instead of \u003ccode\u003e#create\u003c/code\u003e and so on).\u003c/p\u003e  \u003cp\u003eAnd of course, you can always check manually with \u003ccode\u003e#valid?\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Person \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates :name, presence: true\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eperson = Person.new\u003cbr\u003eperson.valid? #=\u0026gt; false\u003cbr\u003eperson.save #=\u0026gt; false\u003cbr\u003eperson.save! #=\u0026gt; EXCEPTION \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eFinding out why validations failed\u003c/h3\u003e  \u003cp\u003eTo find out what went wrong, you can look at the model's \u003ccode\u003e#errors\u003c/code\u003e object.\u003c/p\u003e  \u003cp\u003eYou can check all errors at once by examining \u003ccode\u003eerrors.messages\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eperson = Person.new\u003cbr\u003eperson.errors.messages #=\u0026gt; empty\u003cbr\u003eperson.valid? #=\u0026gt; false\u003cbr\u003eperson.errors.messages #=\u0026gt; name: can't be blank \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou can check one attribute at a time by passing the name to \u003ccode\u003eerrors\u003c/code\u003e as a key, like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eperson.errors[:name] \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDisplaying Validation Errors in Views\u003c/h2\u003e  \u003cp\u003eSee \u003ca href=\"http://guides.rubyonrails.org/active_record_validations.html#displaying-validation-errors-in-views\"\u003eSection 8\u003c/a\u003e of the Rails Guide for an example of how to use the \u003ccode\u003eActiveModel::Errors#full_messages\u003c/code\u003e helper, reproduced here for convenience:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% if @article.errors.any? %\u0026gt;\u003cbr\u003e  \u0026lt;div id=\"error_explanation\"\u0026gt;\u003cbr\u003e    \u0026lt;h2\u0026gt;\u003cbr\u003e      \u0026lt;%= pluralize(@article.errors.count, \"error\") %\u0026gt;\u003cbr\u003e      prohibited this article from being saved:\u003cbr\u003e    \u0026lt;/h2\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;ul\u0026gt;\u003cbr\u003e    \u0026lt;% @article.errors.full_messages.each do |msg| %\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;\u0026lt;%= msg %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;% end %\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis constructs more complete-looking sentences from the more terse messages available in \u003ccode\u003eerrors.messages\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eOther Built-in Validators\u003c/h2\u003e  \u003cp\u003eRails has a host of built-in helpers.\u003c/p\u003e  \u003ch3\u003eLength\u003c/h3\u003e  \u003cp\u003e\u003ccode\u003elength\u003c/code\u003e is one of the most versatile:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Person \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates :name, length: { minimum: 2 }\u003cbr\u003e  validates :bio, length: { maximum: 500 }\u003cbr\u003e  validates :password, length: { in: 6..20 }\u003cbr\u003e  validates :registration_number, length: { is: 6 }\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003ein\u003c/code\u003e argument makes use of a \u003ca href=\"http://ruby-doc.org/core/Range.html\"\u003eRange\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eRemember that there's no syntactical magic happening with any of these method calls. If we weren't using Ruby's \"poetry mode\" (which is considered standard for Rails), the above code would look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Person \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates(:name, { :length =\u0026gt; { :minimum =\u0026gt; 2 } })\u003cbr\u003e  validates(:bio, { :length =\u0026gt; { :maximum =\u0026gt; 500 } })\u003cbr\u003e  validates(:password, { :length =\u0026gt; { :in =\u0026gt; 6..20 } })\u003cbr\u003e  validates(:registration_number, { :length =\u0026gt; { :is =\u0026gt; 6 } })\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePhew!\u003c/p\u003e  \u003ch3\u003eUniqueness\u003c/h3\u003e  \u003cp\u003eAnother common built-in validator is \u003ccode\u003euniqueness\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Account \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates :email, uniqueness: true\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will prevent any account from being created with the same email as another already-existing account.\u003c/p\u003e  \u003ch3\u003eCustom Messages\u003c/h3\u003e  \u003cp\u003eThis isn't a validator in its own right, but a handy convenience option for specifying your own error messages:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Person \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates :not_a_robot, acceptance: true, message: \"Humans only!\"\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eCustom Validators\u003c/h3\u003e  \u003cp\u003eThere are three ways to implement custom validators, with examples in \u003ca href=\"http://guides.rubyonrails.org/active_record_validations.html#performing-custom-validations\"\u003eSection 6\u003c/a\u003e of the Rails Guide.\u003c/p\u003e  \u003cp\u003eOf the three, \u003ccode\u003e#validate\u003c/code\u003e is the simplest. If your validation needs become more complex, consult the documentation. For \u003cem\u003emost\u003c/em\u003e validations, though, the following method should be good enough.\u003c/p\u003e  \u003col\u003e \u003cli\u003eCreate a new directory in \u003ccode\u003eapp\u003c/code\u003e called \u003ccode\u003evalidators\u003c/code\u003e. Because most Rails developers don't need to write custom validation, this directory is \u003cstrong\u003enot\u003c/strong\u003e created by default like \u003ccode\u003emodels\u003c/code\u003e or \u003ccode\u003econtrollers\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eIdentify the ActiveRecord attribute you want to validate. Is it the \u003ccode\u003eemail\u003c/code\u003e or the \u003ccode\u003elast_name\u003c/code\u003e on the \u003ccode\u003ePerson\u003c/code\u003e class, for example?\u003c/li\u003e \u003cli\u003eCreate a new file in the \u003ccode\u003eapp/validators\u003c/code\u003e directory of the form attribute (from the previous step) + \u003ccode\u003e_validator.rb\u003c/code\u003e. So in the case of validating an attribute called \u003ccode\u003eemail\u003c/code\u003e, create a file \u003ccode\u003eapp/validators/email_validator.rb\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eInside the new file, define the class. The class name should match the file name of the file, but \"Camel-Cased.\" So \u003ccode\u003eemail_validator\u003c/code\u003e should be class \u003ccode\u003eEmailValidator\u003c/code\u003e. The class should inherit from \u003ccode\u003eActiveModel::Validator\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eThe validator class must have one instance method, \u003ccode\u003e#validate\u003c/code\u003e. This method will receive one argument typically called \u003ccode\u003erecord\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eInside of \u003ccode\u003e#validate\u003c/code\u003e, you'll be able to get properties from \u003ccode\u003erecord\u003c/code\u003e and determine \u003cstrong\u003e\u003cem\u003ewhether it is invalid\u003c/em\u003e\u003c/strong\u003e. If the record is \u003cstrong\u003einvalid\u003c/strong\u003e, push (\u003ccode\u003e\u0026amp;lt;\u0026amp;lt;\u003c/code\u003e) to \u003ccode\u003erecord.errors[:attribute]\u003c/code\u003e e.g. \u003ccode\u003erecord.errors[:email]\u003c/code\u003e a \u003ccode\u003eString\u003c/code\u003e which is a message that you want to display that describes why the message is not valid.\u003c/li\u003e \u003cli\u003eLastly, in the implementation of the class being validated e.g. \u003ccode\u003ePerson\u003c/code\u003e, add:  \u003col\u003e \u003cli\u003eAn \u003ccode\u003einclude\u003c/code\u003e of ActiveModel::Validations\u003c/li\u003e \u003cli\u003eThe helper call: \u003ccode\u003evalidates_with (className)\u003c/code\u003e. In our example we'd put, \u003ccode\u003evalidates_with EmailValidator\u003c/code\u003e (see step 4, above)\u003c/li\u003e \u003c/ol\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eThe result of these steps should be the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass EmailValidator \u0026lt; ActiveModel::Validator\u003cbr\u003e  def validate(record)\u003cbr\u003e    unless record.email.match?(/flatironschool.com/)\u003cbr\u003e      record.errors[:email] \u0026lt;\u0026lt; \"We're only allowed to have people who work for the company in the database!\"\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  include ActiveModel::Validations\u003cbr\u003e  validates_with EmailValidator\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we validate that all email addresses are in the \u003ccode\u003eflatironschool.com\u003c/code\u003e domain.\u003c/p\u003e","exportId":"active-record-validations"},{"id":220414,"title":"Active Record Validations Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"activerecord-validations-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/activerecord-validations-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-validations-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-validations-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eBasic Validations\u003c/h2\u003e\n\n\u003cp\u003eAdd validations to these models such that...\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAll authors have a name\u003c/li\u003e\n\u003cli\u003eNo two authors have the same name\u003c/li\u003e\n\u003cli\u003eAuthor phone numbers are exactly ten digits\u003c/li\u003e\n\u003cli\u003eAll posts have a title\u003c/li\u003e\n\u003cli\u003ePost content is at least 250 characters long\u003c/li\u003e\n\u003cli\u003ePost summary is a maximum of 250 characters\u003c/li\u003e\n\u003cli\u003ePost category is either \u003ccode\u003eFiction\u003c/code\u003e or \u003ccode\u003eNon-Fiction\u003c/code\u003e\nThis step requires an \u003ccode\u003einclusion\u003c/code\u003e validator, which was not outlined in the\nlesson. You'll need to refer to the \u003ca href=\"https://guides.rubyonrails.org/active_record_validations.html\"\u003eRails guide\u003c/a\u003e to look\nup how to use it.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eCustom Validations\u003c/h2\u003e\n\n\u003cp\u003eFinally, add a custom validator to \u003ccode\u003ePost\u003c/code\u003e that ensures the title is\nsufficiently clickbait-y. If the title does not contain \"Won't Believe\",\n\"Secret\", \"Top [number]\", or \"Guess\", the validator should add a validation.\u003c/p\u003e\n\n\u003cp\u003eUse the \u003ca href=\"https://guides.rubyonrails.org/active_record_validations.html#custom-methods\"\u003eCustom methods\u003c/a\u003e style of validator found in the Rails documentation.\u003c/p\u003e","exportId":"g9db15065ca5aa4ec74cd2351babe3abd"},{"id":220420,"title":"Validations in Controller Actions","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"validations-in-controller-actions-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/validations-in-controller-actions-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-in-controller-actions-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-in-controller-actions-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eNow that we know Rails automatically performs validations defined on models, let's use this information to help users fix typos or other problems in their form submissions.\u003c/p\u003e\n\n\u003cp\u003eAt this point, we'll be covering step two of the following flow:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eUser fills out the form and hits \"Submit\", transmitting the form data via a POST request.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThe controller sees that validations have failed, and re-renders the form.\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eThe view displays the errors to the user.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cp\u003eAfter this lesson, you'll be able to...\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine validations on a model\u003c/li\u003e\n\u003cli\u003eUse the validation state of a model in a response conditional in an action\u003c/li\u003e\n\u003cli\u003eRe-render a form with validation errors\u003c/li\u003e\n\u003cli\u003eValidate a create action\u003c/li\u003e\n\u003cli\u003eValidate an update action\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eManually Checking Validation\u003c/h2\u003e\n\n\u003cp\u003eUp until this point, our \u003ccode\u003ecreate\u003c/code\u003e action has looked something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    @post = Post.create(post_params)\u003cbr\u003e\u003cbr\u003e    redirect_to post_path(@post)\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, we have two problems now:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIf the post is invalid, there will be no \u003ccode\u003eshow\u003c/code\u003e path to redirect to. The post was never saved to the database, so that \u003ccode\u003epost_path\u003c/code\u003e will result in a 404!\u003c/li\u003e\n\u003cli\u003eIf we redirect, we start a new page load, which will lose all of the feedback from the validations.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eA Note About Page Loads\u003c/h3\u003e\n\n\u003cp\u003eWhen a form is submitted, a \u003cstrong\u003efull page load\u003c/strong\u003e occurs, as if you had navigated to a completely new URL. This means that all of the variables set by the controller's \u003ccode\u003enew\u003c/code\u003e action (like \u003ccode\u003e@post\u003c/code\u003e) \u003cem\u003edisappear\u003c/em\u003e and are unavailable to the \u003ccode\u003ecreate\u003c/code\u003e action.\u003c/p\u003e\n\n\u003cp\u003eThe browser throws everything out after each request, except for cookies.\u003c/p\u003e\n\n\u003cp\u003eRails throws everything out after each request, except for the \u003ccode\u003esession\u003c/code\u003e hash.\u003c/p\u003e\n\n\u003cp\u003eYou're probably used to validations happening almost instantaneously on websites that you interact with on a daily basis. When you get validation feedback \u003cem\u003ewithout\u003c/em\u003e a full page load, that's JavaScript at work, sneakily performing requests in the background without throwing away the current page. We won't be using that advanced technique just yet!\u003c/p\u003e\n\n\u003cp\u003eLet's use \u003ccode\u003evalid?\u003c/code\u003e to see what's going on before deciding how to respond:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    # Create a brand new, unsaved, not-yet-validated Post object from the form.\u003cbr\u003e    @post = Post.new(post_params)\u003cbr\u003e\u003cbr\u003e    # Run the validations WITHOUT attempting to save to the database, returning\u003cbr\u003e    # true if the Post is valid, and false if it's not.\u003cbr\u003e    if @post.valid?\u003cbr\u003e      # If--and only if--the post is valid, do what we usually do.\u003cbr\u003e      @post.save\u003cbr\u003e      # This returns a status_code of 302, which instructs the browser to\u003cbr\u003e      # perform a NEW REQUEST! (AKA: throw @post away and let the show action\u003cbr\u003e      # worry about re-reading it from the database)\u003cbr\u003e      redirect_to post_path(@post)\u003cbr\u003e    else\u003cbr\u003e      # If the post is invalid, hold on to @post, because it is now full of\u003cbr\u003e      # useful error messages, and re-render the :new page, which knows how\u003cbr\u003e      # to display them alongside the user's entries.\u003cbr\u003e      render :new\u003cbr\u003e    end\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003erender\u003c/code\u003e can be instructed to render the templates from other actions. In the above code, since we want the \u003ccode\u003e:new\u003c/code\u003e template from the same controller, we don't have to specify anything except the template name.\u003c/p\u003e\n\n\u003cp\u003eYou can read more about this (and other) creative uses of \u003ccode\u003erender\u003c/code\u003e in Section 2.2.2 of the Rails Guide on \u003ca href=\"http://guides.rubyonrails.org/layouts_and_rendering.html#using-render\"\u003eLayout and Rendering\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eRemember: \u003cstrong\u003eredirects incur a new page load\u003c/strong\u003e. When we redirect after validation failure, we \u003cstrong\u003elose\u003c/strong\u003e the instance of \u003ccode\u003e@post\u003c/code\u003e that has feedback (messages for the user) in its \u003ccode\u003eerrors\u003c/code\u003e attribute.\u003c/p\u003e\n\n\u003cp\u003eAnother way to differentiate redirects is this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eIf you hit Refresh after a redirect/page load, your browser resubmits the \u003ccode\u003eGET\u003c/code\u003e request without complaint.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIf you hit Refresh after rendering on a form submit, your browser gives you a popup to confirm that you want to resubmit form data with the \u003ccode\u003ePOST\u003c/code\u003e request.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the next lessons, we'll learn how to use the error information in \u003ccode\u003e@post.errors\u003c/code\u003e to display feedback to the user through our view.\u003c/p\u003e","exportId":"validations-in-controller-actions"},{"id":220426,"title":"Validations in Controller Actions Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"validations-in-controller-actions-rails-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/validations-in-controller-actions-rails-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-in-controller-actions-rails-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-in-controller-actions-rails-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eTime to apply these new tools!\u003c/p\u003e\n\n\u003cp\u003eThe goal of this lab is to allow users of this blog-style application to create and edit authors and posts without worrying about typos or other mistakes leading to error-prone form submissions.\u003c/p\u003e\n\n\u003cp\u003eFor example, if someone creates a blog post with less than 100 characters of content, it's likely that they accidentally pasted the wrong text, or misunderstood which information goes into which field. We can improve the user's experience and the stability of our codebase by notifying users about these kinds of mistakes \u003cem\u003ebefore\u003c/em\u003e bad data gets into the database.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine validations on a model\u003c/li\u003e\n\u003cli\u003eUse a conditional statement in an action to render different responses based on the validation state of a model\u003c/li\u003e\n\u003cli\u003eRe-render a form with validation errors\u003c/li\u003e\n\u003cli\u003eValidate a create action\u003c/li\u003e\n\u003cli\u003eValidate an update action\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eRequirements\u003c/h2\u003e\n\n\u003cp\u003eMake sure you run \u003ccode\u003erake db:seed\u003c/code\u003e so you have some data to work with (defined in \u003ccode\u003edb/seeds.rb\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eThis is a barebones app with two models, \u003ccode\u003eAuthor\u003c/code\u003e and \u003ccode\u003ePost\u003c/code\u003e. Right now, you can...\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://localhost:3000/authors/1\"\u003eView an author\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://localhost:3000/posts/1\"\u003eView a post\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://localhost:3000/authors/new\"\u003eCreate an author\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://localhost:3000/posts/1/edit\"\u003eEdit a post\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTo complete this lab, you will need to:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAdd validations to \u003ccode\u003eAuthor\u003c/code\u003e such that...\u003c/li\u003e\n\u003cli\u003eThe name cannot be blank\u003c/li\u003e\n\u003cli\u003eThe e-mail is unique\u003c/li\u003e\n\u003cli\u003eAdd validations to \u003ccode\u003ePost\u003c/code\u003e such that...\u003c/li\u003e\n\u003cli\u003eThe title cannot be blank\u003c/li\u003e\n\u003cli\u003eThe category is either \u003ccode\u003e\"Fiction\"\u003c/code\u003e or \u003ccode\u003e\"Non-Fiction\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eThe content is at least 100 characters long.\u003c/li\u003e\n\u003cli\u003eChange \u003ccode\u003eAuthorsController#create\u003c/code\u003e to re-render the form if the new author is invalid.\u003c/li\u003e\n\u003cli\u003eChange \u003ccode\u003ePostsController#update\u003c/code\u003e to re-render the form if the updated post is invalid.\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g05b159f59eaf6b784ffe546944b728a0"},{"id":220433,"title":"Validations with `form_tag`","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"validations-with-form_tag-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-with-form_tag-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-with-form_tag-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eNow that we've learned to handle the server side of validations, we need to take care of the client side.\u003c/p\u003e  \u003cp\u003eAt this point, we'll be in step three of the following flow:\u003c/p\u003e  \u003col\u003e \u003cli\u003eUser fills out the form and hits \"Submit\", transmitting the form data via a POST request.\u003c/li\u003e \u003cli\u003eThe controller sees that validations have failed, and re-renders the form.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eThe view displays the errors to the user\u003c/strong\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eAfter this lesson, you'll be able to...\u003c/p\u003e  \u003cul\u003e \u003cli\u003ePrefill in form values based on an instance\u003c/li\u003e \u003cli\u003ePrint out full error messages based on an invalid instance\u003c/li\u003e \u003cli\u003eIntrospect on errors for a field\u003c/li\u003e \u003cli\u003eApply an error class to invalid fields\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003ePre-Filling Form Values\u003c/h2\u003e  \u003cp\u003eNo one likes re-doing work. First, let's make sure we know how to pre-fill forms with the user's input so they don't have to type everything all over again.\u003c/p\u003e  \u003cp\u003eThere are two ways to pre-fill forms in Rails: \u003ccode\u003eform_tag\u003c/code\u003e and \u003ccode\u003eform_for\u003c/code\u003e. \u003ccode\u003eform_for\u003c/code\u003e is \u003cem\u003every\u003c/em\u003e heavy on Rails magic and continues to baffle scientists to this day, so we'll be going over \u003ccode\u003eform_tag\u003c/code\u003e first.\u003c/p\u003e  \u003cp\u003eLet's start with a vanilla form (no pre-filled values yet), using the \u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html\"\u003eFormTagHelper\u003c/a\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/people/new.html.erb //--\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag(\"/people\") do %\u0026gt;\u003cbr\u003e  Name: \u0026lt;%= text_field_tag \"name\" %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  Email: \u0026lt;%= text_field_tag \"email\" %\u0026gt;\u003cbr\u003e  \u0026lt;%= submit_tag \"Create Person\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere's what the HTML output will look like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form action=\"/people\" accept-charset=\"UTF-8\" method=\"post\"\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"utf8\" type=\"hidden\" value=\"✓\" /\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"hidden\" name=\"authenticity_token\" value=\"TKTzvQF+atT/XHG/7h48xKVdXvILdiPj83XQhn2mWBNNhvv0Oh5YfAl2LM3DlHsQjbMOFVsYEyOwj+rPaSk3Bw==\" /\u0026gt;\u003cbr\u003e  Name: \u0026lt;input type=\"text\" name=\"name\" id=\"name\" /\u0026gt;\u0026lt;br /\u0026gt;\u003cbr\u003e  Email: \u0026lt;input type=\"text\" name=\"email\" id=\"email\" /\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" name=\"commit\" value=\"Create Person\" /\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe're working with this \u003ccode\u003ePerson\u003c/code\u003e model:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/person.rb\u003cbr\u003e\u003cbr\u003eclass Person \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates :name, format: { without: /[0-9]/, message: \"does not allow numbers\" }\u003cbr\u003e  validates :email, uniqueness: true\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis means validation will fail if we put numbers into the \"Name\" field, and the form will be re-rendered with the invalid \u003ccode\u003e@person\u003c/code\u003e object available.\u003c/p\u003e  \u003cp\u003eRemember that our \u003ccode\u003ecreate\u003c/code\u003e action now looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/people_controller.rb\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    @person = Person.new(person_params)\u003cbr\u003e\u003cbr\u003e    if @person.valid?\u003cbr\u003e      @person.save\u003cbr\u003e      redirect_to person_path(@person)\u003cbr\u003e    else\u003cbr\u003e      # re-render the :new template WITHOUT throwing away the invalid @person\u003cbr\u003e      render :new\u003cbr\u003e    end\u003cbr\u003e  end \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith this in mind, we can use the invalid \u003ccode\u003e@person\u003c/code\u003e object to \"re-fill\" the usually-empty \u003ccode\u003enew\u003c/code\u003e form with the user's invalid entries. This way they don't have to re-type anything.\u003c/p\u003e  \u003cp\u003e(You wouldn't \u003cem\u003ealways\u003c/em\u003e want to do this –– for example, with credit card numbers –– because you want to minimize the amount of times sensitive information travels back and forth over the internet.)\u003c/p\u003e  \u003cp\u003eNow, let's plug the information back into the form:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/people/new.html.erb //--\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag \"/people\" do %\u0026gt;\u003cbr\u003e  Name: \u0026lt;%= text_field_tag \"name\", @person.name %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  Email: \u0026lt;%= text_field_tag \"email\", @person.email %\u0026gt;\u003cbr\u003e  \u0026lt;%= submit_tag \"Create Person\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs you can see from the \u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-text_field_tag\"\u003edocs\u003c/a\u003e, the second argument to \u003ccode\u003etext_field_tag\u003c/code\u003e, as with most form tag helpers, is the \"default\" value. The HTML for the two field inputs used to look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eName: \u0026lt;input type=\"text\" name=\"name\" id=\"name\" /\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003eEmail: \u0026lt;input type=\"text\" name=\"email\" id=\"email\" /\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut now it will look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eName: \u0026lt;input type=\"text\" name=\"name\" id=\"name\" value=\"Jane Developer\" /\u0026gt;\u0026lt;br /\u0026gt;\u003cbr\u003eEmail: \u0026lt;input type=\"text\" name=\"email\" id=\"email\" value=\"jane@developers.fake\" /\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen the browser renders those inputs, they'll be pre-filled with the data in their \u003ccode\u003evalue\u003c/code\u003e attributes.\u003c/p\u003e  \u003cp\u003eThis is the same technique used to create \u003ccode\u003eedit\u003c/code\u003e/\u003ccode\u003eupdate\u003c/code\u003e forms.\u003c/p\u003e  \u003cp\u003eWe can also use the \u003cstrong\u003esame\u003c/strong\u003e form code for empty \u003cem\u003eand\u003c/em\u003e pre-filled forms because \u003ccode\u003e@person = Person.new\u003c/code\u003e will create an empty model object whose attributes are all \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eDisplaying All Errors With \u003ccode\u003eerrors.full_messages\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eWhen a model fails validation, its \u003ccode\u003eerrors\u003c/code\u003e attribute is filled with information about what went wrong. Rails creates an \u003ca href=\"http://api.rubyonrails.org/classes/ActiveModel/Errors.html\"\u003eActiveModel::Errors\u003c/a\u003e object to carry this information.\u003c/p\u003e  \u003cp\u003eThe simplest way to show errors is to just spit them all out at the top of the form by iterating over \u003ccode\u003e@person.errors.full_messages\u003c/code\u003e. But first, we'll have to check whether there are errors to display with \u003ccode\u003e@person.errors.any?\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% if @person.errors.any? %\u0026gt;\u003cbr\u003e  \u0026lt;div id=\"error_explanation\"\u0026gt;\u003cbr\u003e    \u0026lt;h2\u0026gt;There were some errors:\u0026lt;/h2\u0026gt;\u003cbr\u003e    \u0026lt;ul\u0026gt;\u003cbr\u003e      \u0026lt;% @person.errors.full_messages.each do |message| %\u0026gt;\u003cbr\u003e        \u0026lt;li\u0026gt;\u0026lt;%= message %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;% end %\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the model has two errors, there will be two items in \u003ccode\u003efull_messages\u003c/code\u003e, which could result in the following HTML:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"error_explanation\"\u0026gt;\u003cbr\u003e  \u0026lt;h2\u0026gt;There were some errors:\u0026lt;/h2\u0026gt;\u003cbr\u003e  \u0026lt;ul\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;Name does not allow numbers\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;Email is already taken\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;/ul\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is nice, but it's not very helpful from a user interface standpoint. It would be much better if the incorrect fields themselves were highlighted somehow.\u003c/p\u003e  \u003ch2\u003eDisplaying Pre-Field Errors With \u003ccode\u003eerrors[]\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eActiveModel::Errors\u003c/code\u003e has much more than just a list of \u003ccode\u003efull_message\u003c/code\u003e error strings. It can also be used to access field-specific errors by interacting with it like a hash. If the field has errors, they will be returned in an array of strings:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e@person.errors[:name] #=\u0026gt; [\"does not allow numbers\"]\u003cbr\u003e@person.errors[:email] #=\u0026gt; [] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith this in mind, we can conditionally \"error-ify\" each field in the form, targeting the divs containing each field:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div class=\"field\"\u0026gt;\u003cbr\u003e  \u0026lt;%= label_tag \"name\", \"Name\" %\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag \"name\", @person.name %\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRails will add a class if there are errors, but you can manually do so like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div class=\"field\u0026lt;%= ' field_with_errors' if @person.errors[:name].any? %\u0026gt;\"\u0026gt;\u003cbr\u003e  \u0026lt;%= label_tag \"name\", \"Name\" %\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag \"name\", @person.name %\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou can override \u003ccode\u003eActionView::Base.field_error_proc\u003c/code\u003e to change it to something that suits your UI. It's currently defined as this within \u003ccode\u003eActionView::Base:\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e There is a deliberate space added in \u003ccode\u003e' field_with_errors'\u003c/code\u003e in the example above. If \u003ccode\u003e@person.errors[:name].any?\u003c/code\u003e validates to true, the goal here is to produce two class names separated by a space (\u003ccode\u003eclass=field field_with_errors\u003c/code\u003e). Without the added space, we would get \u003ccode\u003eclass=fieldfield_with_errors\u003c/code\u003e instead!\u003c/p\u003e  \u003ch2\u003eThe Whole Picture\u003c/h2\u003e  \u003cp\u003eBy now, our full form has grown quite a bit:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_tag(\"/people\") do %\u0026gt;\u003cbr\u003e  \u0026lt;% if @person.errors.any? %\u0026gt;\u003cbr\u003e    \u0026lt;div id=\"error_explanation\"\u0026gt;\u003cbr\u003e      \u0026lt;h2\u0026gt;There were some errors:\u0026lt;/h2\u0026gt;\u003cbr\u003e      \u0026lt;ul\u0026gt;\u003cbr\u003e        \u0026lt;% @person.errors.full_messages.each do |message| %\u0026gt;\u003cbr\u003e          \u0026lt;li\u0026gt;\u0026lt;%= message %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e        \u0026lt;% end %\u0026gt;\u003cbr\u003e      \u0026lt;/ul\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;% end %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  \u0026lt;div class=\"field\u0026lt;%= ' field_with_errors' if @person.errors[:name].any? %\u0026gt;\"\u0026gt;\u003cbr\u003e    \u0026lt;%= label_tag \"name\", \"Name\" %\u0026gt;\u003cbr\u003e    \u0026lt;%= text_field_tag \"name\", @person.name %\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div class=\"field\u0026lt;%= ' field_with_errors' if @person.errors[:email].any? %\u0026gt;\"\u0026gt;\u003cbr\u003e    \u0026lt;%= label_tag \"email\", \"Email\" %\u0026gt;\u003cbr\u003e    \u0026lt;%= text_field_tag \"email\", @person.email %\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= submit_tag \"Create\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that some whitespace has been added for \"breathing room\" and increased readability. Additionally, indentation has been very carefully maintained.\u003c/p\u003e  \u003cp\u003eIt's already starting to feel pretty unwieldy to manually manage all of this conditional display logic, but, without an understanding of the dirty details, we can't even begin to use more powerful tools like \u003ccode\u003eform_for\u003c/code\u003e correctly.\u003c/p\u003e  \u003cp\u003eNext, we'll dive into a lab using \u003ccode\u003eform_tag\u003c/code\u003e and artisanally craft our own markup.\u003c/p\u003e","exportId":"validations-with-`form-tag`"},{"id":220439,"title":"Validations with the Form_Tag Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"validations-with-form_tag-rails-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/validations-with-form_tag-rails-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-with-form_tag-rails-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-with-form_tag-rails-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRender or redirect based on validation of instance in create/update\u003c/li\u003e\n\u003cli\u003ePrefill in form values based on an instance\u003c/li\u003e\n\u003cli\u003ePrint out full error messages based on an invalid instance\u003c/li\u003e\n\u003cli\u003eIntrospect on errors for a field\u003c/li\u003e\n\u003cli\u003eApply an error class to a field conditionally based on errors on a field\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eRequirements\u003c/h2\u003e\n\n\u003ch3\u003eValidations\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eAdd validations to \u003ccode\u003eAuthor\u003c/code\u003e such that...\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ename\u003c/code\u003e is not blank\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eemail\u003c/code\u003e is unique\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ephone_number\u003c/code\u003e is exactly 10 digits long\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eAdd validations to \u003ccode\u003ePost\u003c/code\u003e such that...\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003etitle\u003c/code\u003e is not blank\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003econtent\u003c/code\u003e is at least 100 characters long\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecategory\u003c/code\u003e is either \u003ccode\u003e\"Fiction\"\u003c/code\u003e or \u003ccode\u003e\"Non-Fiction\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eBasic Routes \u0026amp; Controllers\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate controllers for both models.\u003c/li\u003e\n\u003cli\u003eCreate \u003ccode\u003eshow\u003c/code\u003e, \u003ccode\u003enew\u003c/code\u003e, \u003ccode\u003eedit\u003c/code\u003e, \u003ccode\u003ecreate\u003c/code\u003e, and \u003ccode\u003eupdate\u003c/code\u003e routes for both models.\u003c/li\u003e\n\u003cli\u003eDefine controller actions for \u003ccode\u003eshow\u003c/code\u003e, \u003ccode\u003enew\u003c/code\u003e, and \u003ccode\u003eedit\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eDefine the \"valid path\" for the \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e controller actions.\u003c/li\u003e\n\u003cli\u003eDefine the \"invalid path\" for the \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e controller actions.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eForms\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate forms with \u003ccode\u003eform_tag\u003c/code\u003e for both models' \u003ccode\u003enew\u003c/code\u003e and \u003ccode\u003eedit\u003c/code\u003e actions.\u003c/li\u003e\n\u003cli\u003ePrefill already-submitted forms with the invalid data when re-rendering.\u003c/li\u003e\n\u003cli\u003eDisplay a list of errors at the top of forms when an invalid action is\nattempted. They should be contained in an element with id\n\u003ccode\u003eerror_explanation\u003c/code\u003e, and each error should have its own \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eConditionally wrap each field in a \u003ccode\u003e.field_with_errors\u003c/code\u003e div if it has errors.\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g924ca4697c87aac26db90d4d5670c640"},{"id":220446,"title":"Validations with form_for","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"validations-with-form_for-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-with-form_for-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-with-form_for-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eNow that we know Rails automatically performs validations defined on models, let's use this information to easily display validation errors to the user.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eAfter this lesson, you'll be able to...\u003c/p\u003e  \u003cul\u003e \u003cli\u003euse \u003ccode\u003eform_for\u003c/code\u003e to display a form with Validations\u003c/li\u003e \u003cli\u003eprint out full error messages above the form\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eThe differences between \u003ccode\u003eform_for\u003c/code\u003e and \u003ccode\u003eform_tag\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThis step will make heavy usage of \u003ccode\u003eform_for\u003c/code\u003e, the high-powered alternative to \u003ccode\u003eform_tag\u003c/code\u003e. The biggest difference between these two helpers is that \u003ccode\u003eform_for\u003c/code\u003e creates a form specifically \u003cstrong\u003efor\u003c/strong\u003e a model object. \u003ccode\u003eform_for\u003c/code\u003e is full of convenient features.\u003c/p\u003e  \u003cp\u003eIn the example below, \u003ccode\u003e@post\u003c/code\u003e is the model object that needs a form. \u003ccode\u003eform_for\u003c/code\u003e automatically performs a route lookup to find the right URL for post.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eform_for\u003c/code\u003e takes a block. It passes an instance of \u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html\"\u003eFormBuilder\u003c/a\u003e as a parameter to the block, which is what \u003ccode\u003ef\u003c/code\u003e is below.\u003c/p\u003e  \u003cp\u003eA basic implementation looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/edit.html.erb //--\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_area :content %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis creates the HTML:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form\u003cbr\u003e  class=\"edit_post\"\u003cbr\u003e  id=\"edit_post\"\u003cbr\u003e  action=\"/posts/1\"\u003cbr\u003e  accept-charset=\"UTF-8\"\u003cbr\u003e  method=\"post\"\u003cbr\u003e\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"utf8\" type=\"hidden\" value=\"✓\" /\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"hidden\" name=\"_method\" value=\"patch\" /\u0026gt;\u003cbr\u003e  \u0026lt;input\u003cbr\u003e    type=\"hidden\"\u003cbr\u003e    name=\"authenticity_token\"\u003cbr\u003e    value=\"nRPP2OqVKB00/Cr+8EvHfYrb5sAkZRtr8f6dzBaJAI+cMceR0fUatcLWd4zdwYCpojW2J3QLK6uyBKeFAgZvmw==\"\u003cbr\u003e  /\u0026gt;\u003cbr\u003e  \u0026lt;input\u003cbr\u003e    type=\"text\"\u003cbr\u003e    name=\"post[title]\"\u003cbr\u003e    id=\"post_title\"\u003cbr\u003e    value=\"Existing Post Title\"\u003cbr\u003e  /\u0026gt;\u003cbr\u003e  \u0026lt;textarea name=\"post[content]\" id=\"post_content\"\u0026gt;\u003cbr\u003eExisting Post Content\u0026lt;/textarea\u003cbr\u003e  \u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" name=\"commit\" value=\"Update Post\" /\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere's what we would need to do with \u003ccode\u003eform_tag\u003c/code\u003e to generate the exact same HTML:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/edit.html.erb //--\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag post_path(@post), method: \"patch\", name: \"edit_post\", id: \"edit_post\" do %\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag \"post[title]\", @post.title %\u0026gt;\u003cbr\u003e  \u0026lt;%= text_area \"post[content]\", @post.content %\u0026gt;\u003cbr\u003e  \u0026lt;%= submit_tag \"Update Post\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003eform_tag\u003c/code\u003e doesn't know what action we're going to use it for, because it has no model object to check. \u003ccode\u003eform_for\u003c/code\u003e knows that an empty, unsaved model object needs a \u003ccode\u003enew\u003c/code\u003e form and a populated object needs an \u003ccode\u003eedit\u003c/code\u003e form. This means we get to skip all of these steps:\u003c/p\u003e  \u003col\u003e \u003cli\u003eSetting the \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eid\u003c/code\u003e of the \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e element.\u003c/li\u003e \u003cli\u003eSetting the method to \u003ccode\u003epatch\u003c/code\u003e on edits.\u003c/li\u003e \u003cli\u003eSetting the text of the \u003ccode\u003e\u0026lt;submit\u0026gt;\u003c/code\u003e element.\u003c/li\u003e \u003cli\u003eSpecifying the root parameter name (\u003ccode\u003epost[whatever]\u003c/code\u003e) for every field.\u003c/li\u003e \u003cli\u003eChoosing the attribute (\u003ccode\u003e@post.whatever\u003c/code\u003e) to fill for every field.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eNifty!\u003c/p\u003e  \u003ch2\u003eUsing \u003ccode\u003eform_for\u003c/code\u003e to generate empty forms\u003c/h2\u003e  \u003cp\u003eTo wire up an empty form in our \u003ccode\u003enew\u003c/code\u003e view, we need to create a blank object:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003e  def new\u003cbr\u003e    @post = Post.new\u003cbr\u003e  end \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere's our usual vanilla \u003ccode\u003ecreate\u003c/code\u003e action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    @post = Post.create(post_params)\u003cbr\u003e\u003cbr\u003e    redirect_to post_path(@post)\u003cbr\u003e  end \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe still have to solve the dual problem of what to do when there's no valid model object to redirect to, and how to hold on to our error messages while re-rendering the same form.\u003c/p\u003e  \u003ch2\u003eRe-Rendering With Errors\u003c/h2\u003e  \u003cp\u003eRemember from a few lessons ago how CRUD methods return \u003ccode\u003efalse\u003c/code\u003e when validation fails? We can use that to our advantage here and branch our actions based on the result:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    @post = Post.new(post_params)\u003cbr\u003e\u003cbr\u003e    if @post.save\u003cbr\u003e      redirect post_path(@post)\u003cbr\u003e    else\u003cbr\u003e      render :new\u003cbr\u003e    end\u003cbr\u003e  end \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eFull Messages with Prepopulated Fields\u003c/h2\u003e  \u003cp\u003eBecause of \u003ccode\u003eform_for\u003c/code\u003e, Rails will automatically prepopulate the \u003ccode\u003enew\u003c/code\u003e form with the values the user entered on the previous page.\u003c/p\u003e  \u003cp\u003eTo get some extra verbosity, we can add the snippet from the previous lesson to the top of the form:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/new.html.erb //--\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;% if @post.errors.any? %\u0026gt;\u003cbr\u003e  \u0026lt;div id=\"error_explanation\"\u0026gt;\u003cbr\u003e    \u0026lt;h2\u0026gt;\u003cbr\u003e      \u0026lt;%= pluralize(@post.errors.count, \"error\") %\u0026gt;\u003cbr\u003e      prohibited this post from being saved:\u003cbr\u003e    \u0026lt;/h2\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;ul\u0026gt;\u003cbr\u003e    \u0026lt;% @post.errors.full_messages.each do |msg| %\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;\u0026lt;%= msg %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;% end %\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eMore Freebies: \u003ccode\u003efield_with_errors\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eLet's look at another nice feature of \u003ccode\u003eFormBuilder\u003c/code\u003e. Here's our \u003ccode\u003eform_for\u003c/code\u003e code again:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/edit.html.erb //--\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_area :content %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003etext_field\u003c/code\u003e call generates this tag:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;input\u003cbr\u003e  type=\"text\"\u003cbr\u003e  name=\"post[title]\"\u003cbr\u003e  id=\"post_title\"\u003cbr\u003e  value=\"Existing Post Title\"\u003cbr\u003e/\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNot only will \u003ccode\u003eFormBuilder\u003c/code\u003e pre-fill an existing \u003ccode\u003ePost\u003c/code\u003e object's data, it will also wrap the tag in a \u003ccode\u003ediv\u003c/code\u003e with an error class if the field has failed validation(s):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div class=\"field_with_errors\"\u0026gt;\u003cbr\u003e  \u0026lt;input\u003cbr\u003e    type=\"text\"\u003cbr\u003e    name=\"post[title]\"\u003cbr\u003e    id=\"post_title\"\u003cbr\u003e    value=\"Existing Post Title\"\u003cbr\u003e  /\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis can also result in some unexpected styling changes because \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e is a block tag (which takes up the entire width of its container) while \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e is an inline tag. If your layout suddenly gets messed up when a field has errors, this is probably why.\u003c/p\u003e  \u003ch2\u003eRecap\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eform_for\u003c/code\u003e gives us a lot of power!\u003c/p\u003e  \u003cp\u003eOur challenge as developers is to keep track of the different layers of magic that make this tool so convenient. The old adage is true: we're responsible for understanding not only \u003cem\u003ehow\u003c/em\u003e to use \u003ccode\u003eform_for\u003c/code\u003e but also \u003cem\u003ewhy\u003c/em\u003e it works. Otherwise, we'll be completely lost as soon as a sufficiently unusual edge case appears.\u003c/p\u003e  \u003cp\u003eWhen in doubt, \u003cstrong\u003eread the HTML\u003c/strong\u003e. Get used to hitting the \"View Source\" and \"Open Inspector\" hotkeys in your browser (\u003ccode\u003eCtrl-u\u003c/code\u003e and \u003ccode\u003eCtrl-Shift-i\u003c/code\u003e on Chrome Windows; \u003ccode\u003eOption-Command-u\u003c/code\u003e and \u003ccode\u003eOption-Command-i\u003c/code\u003e on Chrome Mac), and remember that most browsers let you \u003ca href=\"http://superuser.com/questions/395919/where-is-the-post-tab-in-chrome-developer-tools-network\"\u003eexamine \u003ccode\u003ePOST\u003c/code\u003e data in their developer network tools\u003c/a\u003e.\u003c/p\u003e","exportId":"validations-with-form-for"},{"id":220452,"title":"DELETE Forms and Requests","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"delete-forms-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/delete-forms-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/delete-forms-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eSo far, we've worked with three pieces of the CRUD puzzle:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eCreating records, using HTTP \u003ccode\u003ePOST\u003c/code\u003e requests.\u003c/li\u003e \u003cli\u003eReading records, using HTTP \u003ccode\u003eGET\u003c/code\u003e requests.\u003c/li\u003e \u003cli\u003eUpdating records, using HTTP \u003ccode\u003ePATCH\u003c/code\u003e requests.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eOne piece remains:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eDeleting records, using HTTP \u003ccode\u003eDELETE\u003c/code\u003e requests.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eBut, all is not well in Browsertown. In many cases, sending a request with the \u003ccode\u003ePATCH\u003c/code\u003e or \u003ccode\u003eDELETE\u003c/code\u003e method will not work. In this lesson, we'll focus on \u003ccode\u003eDELETE\u003c/code\u003e, but many of the same issues arise with \u003ccode\u003ePATCH\u003c/code\u003e requests, as well.\u003c/p\u003e  \u003cp\u003eWhy? What can we do as a workaround?\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eAfter this lesson, you'll be able to...\u003c/p\u003e  \u003cul\u003e \u003cli\u003eDraw a \u003ccode\u003edelete\u003c/code\u003e route mapping to a \u003ccode\u003e#destroy()\u003c/code\u003e action\u003c/li\u003e \u003cli\u003eExplain the problem with submitting \u003ccode\u003edelete\u003c/code\u003e requests\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003eform_tag\u003c/code\u003e to build a delete form for an object\u003c/li\u003e \u003cli\u003eBuild a \u003ccode\u003e#destroy()\u003c/code\u003e action that finds the instance, destroys it, and redirects to the \u003ccode\u003eindex\u003c/code\u003e action\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003elink_to\u003c/code\u003e and \u003ccode\u003ebutton_to :method =\u0026gt; :delete\u003c/code\u003e to destroy an object without a form\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIgnorance is bliss\u003c/h2\u003e  \u003cp\u003eBefore we dive into the problem with \u003ccode\u003eDELETE\u003c/code\u003e (and \u003ccode\u003ePATCH\u003c/code\u003e) requests, let's proceed as if we were none the wiser, setting up our route and form as usual:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003edelete '/people/:id', to: 'people#destroy', as:'person' \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# app/views/people/show.html.erb\u003cbr\u003e\u003cbr\u003e\u0026lt;h2\u0026gt;\u0026lt;%= @person.name %\u0026gt;\u0026lt;/h2\u0026gt;\u003cbr\u003e\u0026lt;%= @person.email %\u0026gt;\u003cbr\u003e\u0026lt;%= form_tag person_path(@person.id), method: \"delete\" do %\u0026gt;\u003cbr\u003e  \u0026lt;%= submit_tag \"Delete #{@person.name}\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut, wait a minute... there's something weird about the output we get:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;Caligula\u0026lt;/h2\u0026gt;\u003cbr\u003ecaligula@rome-circa-40-AD.com\u003cbr\u003e\u0026lt;form accept-charset=\"UTF-8\" action=\"/people/1\" method=\"post\"\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"_method\" type=\"hidden\" value=\"delete\" /\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"utf8\" type=\"hidden\" value=\"✓\" /\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"authenticity_token\" type=\"hidden\" value=\"f755bb0ed134b76c432144748a6d4b7a7ddf2b71\" /\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"commit\" type=\"submit\" value=\"Delete Caligula\" /\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEnhance!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form accept-charset=\"UTF-8\" action=\"/people/1\" method=\"**post**\"\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"_method\" type=\"hidden\" value=\"**delete**\" /\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat's going on? Why the extra input?\u003c/p\u003e  \u003ch2\u003eProgramming is hard\u003c/h2\u003e  \u003cp\u003eWeb developers love to be on the cutting edge. We hoover up new tools and techniques and aren't afraid of breaking a few million eggs to figure out that we actually have no idea how to make an omelette. Projects like Rails themselves are a product of this incredible devotion to progress and automation.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eBrowser\u003c/strong\u003e and \u003cstrong\u003eserver\u003c/strong\u003e developers are the yin to the web developers' yang. These are the people who own and maintain the tools themselves: Internet Explorer, Firefox, Chrome, Apache, and so on.\u003c/p\u003e  \u003cp\u003eWhen a web developer makes a mistake, it might affect the users of their site.\u003c/p\u003e  \u003cp\u003eWhen a browser or server developer makes a mistake, it might affect \u003ca href=\"http://venturebeat.com/2015/05/28/google-chrome-now-has-over-1-billion-users/\"\u003e\u003cstrong\u003e\u003cem\u003eover a billion people\u003c/em\u003e\u003c/strong\u003e\u003c/a\u003e!\u003c/p\u003e  \u003cp\u003eBecause of this, browser/server developers have to go slow. \u003cem\u003eReally\u003c/em\u003e slow. And they have to resist the urge to release \"duct tape\" solutions because duct tape doesn't scale to a billion users!\u003c/p\u003e  \u003cp\u003eThis means that, sometimes, incomplete solutions can remain in place for years, or even decades, while the maintainers go back and forth trying to find a better approach that won't open an eldritch portal to Bosch's \u003ca href=\"https://www.khanacademy.org/humanities/renaissance-reformation/northern/hieronymus-bosch/a/bosch-the-garden-of-earthly-delights\"\u003eGarden of Earthly Delights\u003c/a\u003e.\u003c/p\u003e  \u003ch2\u003eWhat's all this have to do with \u003ccode\u003eDELETE\u003c/code\u003e requests?\u003c/h2\u003e  \u003cp\u003eAs of HTML5, forms officially do not support \u003ccode\u003eDELETE\u003c/code\u003e and \u003ccode\u003ePATCH\u003c/code\u003e for their methods.\u003c/p\u003e  \u003cp\u003eThere's no short and sweet answer to explain this. If you want to dive deep and understand as much as possible about the decisions that went into it, you can read more on \u003ca href=\"http://programmers.stackexchange.com/questions/114156/why-are-there-are-no-put-and-delete-methods-on-html-forms\"\u003ethis illuminating StackExchange post\u003c/a\u003e, but, for the purposes of succinct explanation, you can always stick with the tried and true \"for historical reasons.\"\u003c/p\u003e  \u003cp\u003eWhat you're seeing in the above \u003ccode\u003e#form_tag()\u003c/code\u003e behavior is a \u003cstrong\u003eworkaround\u003c/strong\u003e implemented for us by Rails itself. With this in mind, we get the best of both worlds:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWe get to be \u003cstrong\u003egood HTTP-abiding citizens\u003c/strong\u003e who use the correct request methods for their corresponding goals (\u003ccode\u003eGET\u003c/code\u003e for read, \u003ccode\u003ePATCH\u003c/code\u003e for update, and so on).\u003c/li\u003e \u003cli\u003eWe get to \u003cstrong\u003emaintain our sanity\u003c/strong\u003e and not worry about W3C drama while writing views.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eThat's great. Can we actually delete something now?\u003c/h2\u003e  \u003cp\u003eThus enlightened, we can (finally) proceed with our original goal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/people_controller.rb\u003cbr\u003e\u003cbr\u003e  def destroy\u003cbr\u003e    Person.find(params[:id]).destroy\u003cbr\u003e    redirect_to people_url\u003cbr\u003e  end \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNothing too special happening here except for a bit of method-chaining to immediately destroy the found instance.\u003c/p\u003e  \u003ch2\u003eFancy JavaScript Helper\u003c/h2\u003e  \u003cp\u003eAs shown, you have to go to a user's \u003ccode\u003eshow\u003c/code\u003e page to delete them. What if we want an admin control panel where users can be deleted from a list?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/people/index.html.erb //--\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;% @people.each do |person| %\u0026gt;\u003cbr\u003e\u0026lt;div class=\"person\"\u0026gt;\u003cbr\u003e  \u0026lt;span\u0026gt;\u0026lt;%= person.name %\u0026gt;\u0026lt;/span\u0026gt;\u003cbr\u003e  \u0026lt;%= link_to \"Delete\", person, method: :delete, data: { confirm: \"Really?\" } %\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-link_to\"\u003e\u003ccode\u003elink_to\u003c/code\u003e\u003c/a\u003e is a method of \u003ccode\u003eUrlHelper\u003c/code\u003e that has a number of convenient features.\u003c/p\u003e  \u003cp\u003eThe HTML generated by that call to \u003ccode\u003elink_to\u003c/code\u003e looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;a data-confirm=\"Really?\" rel=\"nofollow\" data-method=\"delete\" href=\"/people/1\"\u0026gt;Delete\u0026lt;/a\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003edata-confirm\u003c/code\u003e attribute and the \u003ccode\u003edata-method\u003c/code\u003e attribute rely on some JavaScript built into Rails.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003edata-method\u003c/code\u003e will \"submit\" a \u003ccode\u003eDELETE\u003c/code\u003e request as if a form had been submitted. It will use \u003ccode\u003eGET\u003c/code\u003e (the default method used by all browsers for HTML links) if the user has JavaScript disabled.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003edata-confirm\u003c/code\u003e pops up a confirmation window before the link is followed, allowing the user to make sure they're ready to delete someone forever (what a decision!).\u003c/p\u003e  \u003ch2\u003eUse button_to\u003c/h2\u003e  \u003cp\u003eA slight variation from the \u003ccode\u003elink_to\u003c/code\u003e method described above is using \u003ccode\u003ebutton_to\u003c/code\u003e to send a delete request.\u003c/p\u003e  \u003cp\u003eSays the \u003ca href=\"https://api.rubyonrails.org/v5.1.7/classes/ActionView/Helpers/UrlHelper.html#method-i-button_to\"\u003edocumentation\u003c/a\u003e:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e[\u003ccode\u003ebutton_to\u003c/code\u003e] Generates a form containing a single button that submits to the URL created by the set of options.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eSo while we taught \u003ccode\u003elink_to\u003c/code\u003e first, Rails thinks that \u003ccode\u003ebutton_to\u003c/code\u003e is a safer tool for representing delete requests. Interesting! The \u003ccode\u003ebutton_to\u003c/code\u003e helper works very similarly to \u003ccode\u003elink_to\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= button_to \"Delete Image\", image_path(@image), method: :delete %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs you can read in the documentation, or guess thanks to Ruby's simple syntax, the first argument is the button text; the second argument is an expression of a route, and \u003ccode\u003emethod\u003c/code\u003e is used to tell the form to send its payload as an HTTP \u003ccode\u003eDELETE\u003c/code\u003e action.\u003c/p\u003e","exportId":"delete-forms-and-requests"},{"id":220457,"title":"Rails Testing","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-rails-testing\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-rails-testing/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-rails-testing\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-rails-testing/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eOne of the most fundamental aspects of programmer productivity is \u003cstrong\u003ethe feedback\nloop\u003c/strong\u003e. \"Scripting\" languages like Ruby and Python are great for this because\nyou can run your code immediately after writing it. Conversely, lower-level\nlanguages like C must be compiled before being run.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://imgs.xkcd.com/comics/compiling.png\" alt=\"Two programmers swordfight from their office chairs, using \u0026quot;Compiling!\u0026quot; as an\nexcuse\" title=\"Compiling!\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eThe Feedback Loop\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDecide what to do next\u003c/li\u003e\n\u003cli\u003eThink of an approach\u003c/li\u003e\n\u003cli\u003eWrite some code\u003c/li\u003e\n\u003cli\u003eCompile/run the code\u003c/li\u003e\n\u003cli\u003eObserve the output\n\n\u003cul\u003e\n\u003cli\u003eIf it looks good, move on to Step 1 for the next task.\u003c/li\u003e\n\u003cli\u003eIf there are problems, go back to Step 1 for this task.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eHaving a short feedback loop –– from brain to fingertips to running\nprocess –– lowers the resistance for trying new things and protects you from\ndistractions that sneak in while you're waiting between steps.\u003c/p\u003e\n\n\u003cp\u003eUnfortunately, there's more than one way to distract a programmer!\u003c/p\u003e\n\n\u003ch2\u003eThe Rails Feedback Loop\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDecide what to do next\u003c/li\u003e\n\u003cli\u003eRead every related Rails Guide at least twice\u003c/li\u003e\n\u003cli\u003eSpend an hour poring over StackOverflow answers from two major versions ago\u003c/li\u003e\n\u003cli\u003eCopy-paste some sketchy-looking code\u003c/li\u003e\n\u003cli\u003eRun the code, which immediately screws up your database\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003ebundle exec rake db:reset\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eGet a migraine because you forgot to put your painstakingly-designed seed\ndata in \u003ccode\u003edb/seeds.rb\u003c/code\u003e, and now it's all gone\u003c/li\u003e\n\u003cli\u003eGo for a walk\u003c/li\u003e\n\u003cli\u003eWrite some code\u003c/li\u003e\n\u003cli\u003eRefresh browser\u003c/li\u003e\n\u003cli\u003eScratch your head over why it says there's a missing template\u003c/li\u003e\n\u003cli\u003eSpend another hour tweaking your new code until you realize you made a typo\nin the filename and nothing you've been doing for the past three hours had a\nchance of working in the first place\u003c/li\u003e\n\u003cli\u003eTake a break to read \u003cem\u003eThe Hitchhiker's Guide to Rails\u003c/em\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eRails is big. Really big. You just won't believe how vastly, hugely,\nmind-bogglingly big it is. I mean, you may think it's a long way down the road\nto the chemist, but that's just peanuts to Rails.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e-- Douglas Adams\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e(Okay, so maybe Mr. Adams was talking about space, but he totally \u003cem\u003ewould have\u003c/em\u003e\nsaid it this way if he'd been writing about web development instead of interstellar\ntravel.)\u003c/p\u003e\n\n\u003cp\u003eRails ships with many features to save precious seconds in developer feedback\nloops, but there's no two ways about it: in anything but the most trivial app,\nit can be pretty complex to make sure your code is actually working correctly.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we'll learn to shorten our feedback loop with different flavors\nof Rails tests, combining some standard approaches suggested in the Guides\nthemselves with some more advanced practices that require additional\ndependencies (namely Capybara).\u003c/p\u003e\n\n\n\n\u003cp\u003eAfter this lesson, you should be able to...\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eList the different types of tests applicable to a Sinatra/Rails app.\u003c/li\u003e\n\u003cli\u003eCompare and contrast the different types of tests.\u003c/li\u003e\n\u003cli\u003eDescribe the usage of Capybara in feature testing.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWe'll be covering three types of tests:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eModels\u003c/strong\u003e (RSpec)\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eControllers\u003c/strong\u003e (RSpec)\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eFeatures\u003c/strong\u003e (RSpec/Capybara)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFeatures are the fanciest, so we'll leave them for last. They are preferred over\nregular Rails \"View\" tests.\u003c/p\u003e\n\n\n\n\u003cp\u003eBy default, Rails uses \u003ccode\u003eTest::Unit\u003c/code\u003e for testing, which keeps its tests in the\nmysteriously-named \u003ccode\u003etest/\u003c/code\u003e folder.\u003c/p\u003e\n\n\u003cp\u003eIf you're planning from the start to use RSpec instead, you can tell Rails to\nskip \u003ccode\u003eTest::Unit\u003c/code\u003e by passing the \u003ccode\u003e-T\u003c/code\u003e flag to \u003ccode\u003erails new\u003c/code\u003e, like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erails new cool_app -T\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, you will add the gem to your Gemfile:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem 'rspec-rails'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd use the built-in generator to add a \u003ccode\u003espec\u003c/code\u003e folder with the right boilerplate:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebundle install\u003cbr\u003ebundle exec rails g rspec:install\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is the Rails equivalent of the usual \u003ccode\u003erspec --init\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt's not enough to know \u003cem\u003ehow\u003c/em\u003e to test applications; we must also understand\n\u003cem\u003ewhy\u003c/em\u003e it makes sense to test them in a certain way. To help with this, try\nthinking of Rails applications like cars:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eModels\u003c/strong\u003e are the \u003cstrong\u003ebasic parts\u003c/strong\u003e that make cars useful, like the fuel tank,\nengine, and tires.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eViews\u003c/strong\u003e are the \u003cstrong\u003einteractive parts\u003c/strong\u003e that the driver (user) can see and\ntouch, like the steering wheel, pedals, and gear shift.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eControllers\u003c/strong\u003e are the rest of the \u003cstrong\u003econnecting parts\u003c/strong\u003e under the hood that\nconnect the views to the models, like how the steering column (along with the\nrest of the steering assembly) connects the wheel to the tires. The users don't\nreally see them, think of them, or even necessarily know they exist, but they're\njust as necessary.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eModels are not too difficult to test because they have very specific purposes\nthat can be easily separated from the rest of the application.\u003c/p\u003e\n\n\u003cp\u003eThis holds true for cars as well: a good tire has a tread that grips the road in\nadverse conditions, doesn't puncture easily, and so on. You don't really need to\nthink about the rest of the car when you're testing what makes a good wheel.\u003c/p\u003e\n\n\u003cp\u003eThis gets a little trickier for views and controllers, but we'll talk more about\nthat once we're done with models.\u003c/p\u003e\n\n\n\n\u003cp\u003eThese go in \u003ccode\u003espec/models\u003c/code\u003e, one file per model.\u003c/p\u003e\n\n\u003cp\u003eModel tests use the least amount of special features, since all you really need\nis the model class itself. The most common usage for model tests is to make sure\nyou have set up your validations correctly.\u003c/p\u003e\n\n\u003cp\u003eSuppose we're working with this model:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# app/models/monster.rb\u003cbr\u003e\u003cbr\u003eclass Monster \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates :name, presence: true\u003cbr\u003e  validates :size, inclusion: { in: [\"tiny\", \"average\", \"like, REALLY big\"] }\u003cbr\u003e  validates :taxonomy, format: { with: /\\A[A-Z](\\.|[a-z]+) [a-z]{2,}\\z/,\u003cbr\u003e    message: \"must include genus and species, like 'Homo sapiens'\" }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eTesting for Validity\u003c/h2\u003e\n\n\u003cp\u003eFirst, we'll make sure that it understands a valid Monster:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# spec/models/monster_spec.rb\u003cbr\u003e\u003cbr\u003edescribe Monster do\u003cbr\u003e  let(:attributes) do\u003cbr\u003e    {\u003cbr\u003e      name: \"Dustwing\",\u003cbr\u003e      size: \"tiny\",\u003cbr\u003e      taxonomy: \"Abradacus nonexistus\"\u003cbr\u003e    }\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it \"is considered valid\" do\u003cbr\u003e    expect(Monster.new(attributes)).to be_valid\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSome questions to answer first:\u003c/p\u003e\n\n\u003ch3\u003eWhat is \u003ccode\u003elet\u003c/code\u003e?\u003c/h3\u003e\n\n\u003cp\u003eIf you haven't seen \u003ccode\u003elet\u003c/code\u003e before, it is a \u003ca href=\"http://www.relishapp.com/rspec/rspec-core/docs/helper-methods/let-and-let\"\u003estandard helper method\u003c/a\u003e\nthat takes a symbol and a block. It runs the block \u003cstrong\u003eonce per example\u003c/strong\u003e in which\nit is called and saves the return value in a local variable named according to\nthe symbol. This means you get a fresh copy in every test case.\u003c/p\u003e\n\n\u003ch3\u003eWhy is \u003ccode\u003elet\u003c/code\u003e better than \u003ccode\u003ebefore :each\u003c/code\u003e?\u003c/h3\u003e\n\n\u003cp\u003eIt's more fine-grained, which means you have better control over your data. It\ncan be used in combination with \u003ccode\u003ebefore\u003c/code\u003e statements to set up your test data\n\u003cem\u003ejust right\u003c/em\u003e before the examples are run.\u003c/p\u003e\n\n\u003ch3\u003eWhy did we use \u003ccode\u003elet\u003c/code\u003e to make an attribute hash?\u003c/h3\u003e\n\n\u003cp\u003eWe could have put the entire \u003ccode\u003eMonster.new\u003c/code\u003e call inside our \u003ccode\u003elet\u003c/code\u003e block, but\nusing an attribute hash instead has some advantages:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf we want to tweak the data first, we can just pass \u003ccode\u003eattributes.merge(name:\n\"Other\")\u003c/code\u003e while preserving the rest of the attributes.\u003c/li\u003e\n\u003cli\u003eWe can also refer to \u003ccode\u003eattributes\u003c/code\u003e when making assertions about what the actual\nobject should look like.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIt's a good balance between saving keystrokes and maintaining the flexibility of\nyour test data.\u003c/p\u003e\n\n\u003ch3\u003eWhere does \u003ccode\u003ebe_valid\u003c/code\u003e come from?\u003c/h3\u003e\n\n\u003cp\u003eRSpec provides plenty of built-in matchers, which you can peruse in their \u003ca href=\"http://rspec.info/documentation/3.4/rspec-expectations/frames.html#!RSpec/Matchers.html\"\u003eAPI\ndocs\u003c/a\u003e, but \u003ccode\u003ebe_valid\u003c/code\u003e is conspicuously absent from the list.\u003c/p\u003e\n\n\u003cp\u003eThis code uses a neat trick that RSpec refers to as \"\u003ca href=\"https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers/predicate-matchers\"\u003epredicate\nmatchers\u003c/a\u003e\", and you'll see it \u003cstrong\u003ea lot\u003c/strong\u003e in Rails testing.\u003c/p\u003e\n\n\u003cp\u003eIn Ruby, it's conventional for methods that return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e to be named\nwith a question mark at the end. These methods are called \u003cstrong\u003epredicate methods\u003c/strong\u003e,\nbecause \"predicate\" is an English grammar term for the part of a sentence that\nmakes a statement about the subject.\u003c/p\u003e\n\n\u003cp\u003eAs you learned earlier in this unit, Rails provides a \u003ccode\u003evalid?\u003c/code\u003e method that\nreturns \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e depending on whether the model object in question\npassed its validations.\u003c/p\u003e\n\n\u003cp\u003eIn RSpec, when you call a nonexistent matcher (such as \u003ccode\u003ebe_valid\u003c/code\u003e), it strips\noff the \u003ccode\u003ebe_\u003c/code\u003e (\u003ccode\u003evalid\u003c/code\u003e), adds a question mark (\u003ccode\u003evalid?\u003c/code\u003e), and checks to see if\nthe object responds to a method by that name (\u003ccode\u003emonster.valid?\u003c/code\u003e).\u003c/p\u003e\n\n\u003ch2\u003eTesting for Validation Failure\u003c/h2\u003e\n\n\u003cp\u003eNow, let's add some tests to make sure our validations are working in the\nopposite direction:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# spec/models/monster_spec.rb\u003cbr\u003e\u003cbr\u003e  let(:missing_name) { attributes.except(:name) }\u003cbr\u003e  let(:invalid_size) { attributes.merge(size: \"not that big\") }\u003cbr\u003e  let(:missing_species) { attributes.merge(taxonomy: \"Abradacus\") }\u003cbr\u003e\u003cbr\u003e  it \"is invalid without a name\" do\u003cbr\u003e    expect(Monster.new(missing_name)).not_to be_valid\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it \"is invalid with an unusual size\" do\u003cbr\u003e    expect(Monster.new(invalid_size)).not_to be_valid\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it \"is invalid with a missing species\" do\u003cbr\u003e    expect(Monster.new(missing_species)).not_to be_valid\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that each of these \u003ccode\u003elet\u003c/code\u003e blocks rely on the first one, \u003ccode\u003eattributes\u003c/code\u003e, which\ncontains all of our valid attributes. \u003ccode\u003emissing_name\u003c/code\u003e uses the Rails hash helper\n\u003ccode\u003eexcept\u003c/code\u003e to exclude the \u003ccode\u003ename\u003c/code\u003e key while the other two use the standard Ruby\n\u003ccode\u003emerge\u003c/code\u003e method to overwrite valid attributes with invalid ones.\u003c/p\u003e\n\n\u003ch2\u003eI saw some search results using \u003ccode\u003eshould\u003c/code\u003e. What is that?\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eshould\u003c/code\u003e is an older RSpec syntax that has been deprecated in favor of \u003ccode\u003eexpect\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eAny other RSpec features to know about?\u003c/h2\u003e\n\n\u003cp\u003eSeveral RSpec features have been moved over time into the\n\u003ca href=\"https://github.com/rspec/rspec-collection_matchers\"\u003erspec-collection_matchers\u003c/a\u003e gem, which can make some\ndetailed assertions more readable.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe biggest risk in writing controller tests is redundancy: controllers exist\nto connect views and models, so it's difficult to test them in isolation.\u003c/p\u003e\n\n\u003cp\u003eFirst, we'll go over \u003cstrong\u003ehow\u003c/strong\u003e to write controller tests. Then, our discussion of\nthe \u003cstrong\u003ewhy\u003c/strong\u003e will bring us into the final subject, \"feature tests\".\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# spec/controllers/monsters_controller_spec.rb\u003cbr\u003e\u003cbr\u003edescribe MonstersController, type: :controller do\u003cbr\u003e  let(:attributes) do\u003cbr\u003e    {\u003cbr\u003e      name: \"Dustwing\",\u003cbr\u003e      size: \"tiny\",\u003cbr\u003e      taxonomy: \"Abradacus nonexistus\"\u003cbr\u003e    }\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it \"renders the show template\" do\u003cbr\u003e    monster = Monster.create!(attributes)\u003cbr\u003e    get :show, id: monster.id\u003cbr\u003e    expect(response).to render_template(:show)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  describe \"creation\" do\u003cbr\u003e    before { post :create, monster: attributes }\u003cbr\u003e    let(:monster) { Monster.find_by(name: \"Dustwing\") }\u003cbr\u003e\u003cbr\u003e    it \"creates a new monster\" do\u003cbr\u003e      expect(monster).to_not be_nil\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    it \"redirects to the monster's show page\" do\u003cbr\u003e      expect(response).to redirect_to(monster_path(monster))\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can use the \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003epost\u003c/code\u003e methods (along with \u003ccode\u003epatch\u003c/code\u003e and \u003ccode\u003edelete\u003c/code\u003e) to\ninitiate test requests on the controller. A \u003ccode\u003eresponse\u003c/code\u003e object is available to\nset expectations on, such as \u003ccode\u003erender_template\u003c/code\u003e or \u003ccode\u003eredirect_to\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe tests above are great, especially while we're still getting used to how\ncontrollers are wired. However, almost these exact tests could be copied for\n\u003cem\u003eany\u003c/em\u003e controller set up according to Rails' RESTish conventions. There's nothing\ninherently wrong with that, but the redundance, along with the need to test\nviews, inspired the creation of a new type of test supported by Capybara known\nas a \"Feature Test\".\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you were going to write tests for a car's steering wheel, what would you\nstart with?\u003c/p\u003e\n\n\u003cp\u003eHere's one idea:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhen the steering wheel is rotated to the left, the tires rotate to the left.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis makes sense, but it's testing much more than the steering wheel. This test\nrelies on the view (steering wheel), the model (tires), \u003cem\u003eand\u003c/em\u003e the controller\n(steering column)!\u003c/p\u003e\n\n\u003cp\u003eThis is called an \u003cstrong\u003eacceptance test\u003c/strong\u003e because it is phrased in terms of\nfeatures that provide value to the user. (It could also be called an\n\u003cstrong\u003eintegration test\u003c/strong\u003e because it tests more than one piece of the system at\nonce.)\u003c/p\u003e\n\n\u003cp\u003eCan we \u003cem\u003eisolate\u003c/em\u003e the steering wheel while still testing its functionality?\u003c/p\u003e\n\n\u003cp\u003eNot really –– the whole point of the steering wheel is to control the tires. We\ncould talk about how it looks or what it's made of, but the functionality is\ninherently tied to the underlying system, just like the views in a Rails app.\nAll of those forms and templates are meaningless without controllers and models\nto populate them.\u003c/p\u003e\n\n\u003cp\u003eIn the last section, we did our best to isolate the controller, and, as a result,\nwe wrote many of our tests in terms of the controller's internal parts (such as\nredirects and request methods). We don't care what the HTML looks like, what\nbutton the user pressed, or how the models are behaving.\u003c/p\u003e\n\n\u003cp\u003eThis is called a \u003cstrong\u003eunit test\u003c/strong\u003e, because it tests a single unit of functionality.\u003c/p\u003e\n\n\u003cp\u003eFor a car, it might look like this:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhen the steering column's flange rotates, the steering shaft transmits the\nrotation to the steering box.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003ePhew. Good thing they covered steering assemblies on the last episode of Car\nTalk, or I wouldn't have known where to start!\u003c/p\u003e\n\n\u003cp\u003eBy now you're probably realizing that if you say \"steering\" enough times, it\nstops sounding like a real word.\u003c/p\u003e\n\n\u003cp\u003eBut, more importantly, it can be difficult to write isolated \u003cstrong\u003eunit tests\u003c/strong\u003e, and\nit's not always clear whether they're useful. Compare the jargon-heavy, extremely\nspecific unit test, above, to this test covering the steering wheel\n(view) \u003cem\u003eand\u003c/em\u003e steering column (controller):\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhen the steering wheel is rotated to the left, the steering column transmits\nthe rotation to the steering box.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis is a \u003cstrong\u003efeature test\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eacceptance test\u003c/strong\u003e at the top of this section covers too much ground,\nmaking it brittle and difficult to maintain.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eunit test\u003c/strong\u003e in the middle of this section is so specific that it almost\nfeels like we just rewrote the controller code with different phrasing.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003efeature test\u003c/strong\u003e, on the other hand, is Just Right. It lets us think like a\nuser (in terms of the steering wheel, or view) while still making intelligent\nassertions about how the underlying system should respond to input (in terms of\nthe steering column, or controller).\u003c/p\u003e\n\n\u003cp\u003eNow, on to the \u003cem\u003ehow\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eCapybara\u003c/h2\u003e\n\n\u003cp\u003eWhen you see key words like \u003ccode\u003evisit\u003c/code\u003e, \u003ccode\u003efill_in\u003c/code\u003e, and \u003ccode\u003epage\u003c/code\u003e, you know you're\nlooking at a \u003ca href=\"https://github.com/jnicklas/capybara\"\u003eCapybara\u003c/a\u003e test.\u003c/p\u003e\n\n\u003cp\u003eTo set up Capybara, one must first add the gem to the \u003ccode\u003eGemfile\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem 'capybara'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen set up Capybara-Rails integration in \u003ccode\u003espec/rails_helper.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'capybara/rails'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen set up Capybara-RSpec integration in \u003ccode\u003espec/spec_helper.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'capybara/rspec'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFeature tests are traditionally located in \u003ccode\u003espec/features\u003c/code\u003e, but you can put them\nanywhere if you pass the \u003ccode\u003e:type =\u0026gt; :feature\u003c/code\u003e option to your \u003ccode\u003edescribe\u003c/code\u003e call.\u003c/p\u003e\n\n\u003cp\u003eTo test our monster manager with Capybara, we'll start by setting up a \u003ccode\u003eGET\u003c/code\u003e\nrequest and then use Capybara's convenient helper functions to interact with the\npage just like a user would:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# spec/features/monster_creation.rb\u003cbr\u003e\u003cbr\u003edescribe \"monster creation\", type: :feature do\u003cbr\u003e  before do\u003cbr\u003e    visit new_monster_path\u003cbr\u003e    fill_in \"Name\", with: \"Dustwing\"\u003cbr\u003e    select \"tiny\", from: \"monster_size\"\u003cbr\u003e    fill_in \"Taxonomy\", with: \"Abradacus nonexistus\"\u003cbr\u003e    click_button \"Create Monster\"\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen \u003ccode\u003eclick_button\u003c/code\u003e is called, this will trigger the \u003ccode\u003ePOST\u003c/code\u003e request to the\ncontroller's \u003ccode\u003ecreate\u003c/code\u003e action, just as if a user had clicked it in their browser.\u003c/p\u003e\n\n\u003cp\u003eNow, we can write our original controller tests like usual:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  let(:monster) { Monster.find_by(name: \"Dustwing\") }\u003cbr\u003e\u003cbr\u003e  it \"creates a monster\" do\u003cbr\u003e    expect(monster).to_not be_nil\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it \"redirects to the new monster's page\" do\u003cbr\u003e    expect(current_path).to eq(monster_path(monster))\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd because we're in Capybara land, we also have a very convenient way of making\nassertions about the final \u003ccode\u003eGET\u003c/code\u003e request:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  it \"displays the monster's name\" do\u003cbr\u003e    within \"h1\" do\u003cbr\u003e      expect(page).to have_content(monster.name)\u003cbr\u003e    end\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003ewithin\u003c/code\u003e sets the context for our next expectation, restricting it to the first\n\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e tag encountered on the page. This way, our \u003ccode\u003eexpect\u003c/code\u003e call will only pass\nif the specified content (\u003ccode\u003e\"Dustwing\"\u003c/code\u003e) appears inside that first heading.\u003c/p\u003e\n\n\u003cp\u003eOne interesting thing about this approach is that we're being much \u003cem\u003eless\u003c/em\u003e\nexplicit about certain expectations. For example, we're testing the redirect not\nwith the initial \u003ccode\u003e302\u003c/code\u003e response but instead by examining the current path in\nCapybara's virtual \"browser session\". This is much more powerful and intuitive,\nand it doesn't sacrifice much in the way of expressivity.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe hardest part about testing usually ends up being the \"why\" and not the\n\"how\". Why write the test this way and not that way?\u003c/p\u003e\n\n\u003cp\u003eYou will probably see Capybara feature tests in wider usage than direct\ncontroller and view tests, but they're not universal. If you're doing something\nunusual, like a series of complex redirects that change based on authorization\nlevel, it makes sense to write a more isolated controller test. But for standard\nCRUD functionality, Capybara is designed to save you a lot of time and mental\neffort.\u003c/p\u003e\n\n\u003cp\u003eThese can serve as fairly reliable guidelines:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eModels should always be thoroughly unit tested.\u003c/li\u003e\n\u003cli\u003eControllers should be as thin as possible to keep your feature tests simple.\u003c/li\u003e\n\u003cli\u003eIf you can't avoid making a controller complex, it deserves its own isolated\ntest.\u003c/li\u003e\n\u003cli\u003eCapybara's syntax is much more powerful than Rails's built-in functionality for\nview tests, so stick with it whenever possible.\u003c/li\u003e\n\u003cli\u003eDon't get carried away with the details when testing views: you just need to\nmake sure the information is in the right place. If your tests are too strict,\nit will be impossible to make even simple tweaks to your templates without\nbreaking the build.\u003c/li\u003e\n\u003c/ul\u003e","exportId":"rails-testing"}]},{"id":24082,"name":"Associations and Rails","status":"started","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g0e902d6d23e28d9ea8e5c6a07af7233e","items":[{"id":220475,"title":"Join the Fun Rails Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"join-the-fun-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/join-the-fun-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/join-the-fun-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/join-the-fun-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFlatiron School has started its own taxi service, FlatironX, and we need to\nstart developing the application's domain model!\u003c/p\u003e\n\n\u003cp\u003eThree basic models have already been created, \u003ccode\u003ePassenger\u003c/code\u003e, \u003ccode\u003eRide\u003c/code\u003e, and \u003ccode\u003eTaxi\u003c/code\u003e. Just run\n\u003ccode\u003erake db:migrate\u003c/code\u003e and \u003ccode\u003erake db:migrate RAILS_ENV=test\u003c/code\u003e to apply the migrations to the\ndevelopment and test databases, respectively.\u003c/p\u003e\n\n\u003cp\u003eThe next step is set up a \u003ccode\u003ehas_many :through\u003c/code\u003e relationship between\nthese three models so that we can keep track of who's driving who around.\nIt will work like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eTaxi -\u0026lt; Rides \u0026gt;- Passengers\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis way, a taxi can have many passengers, and a passenger can have many taxis!\u003c/p\u003e\n\n\u003cp\u003eEach table only has a primary key, so you'll need to write a migration to\nget the database ready to handle the \"has_many :through\" relationship.\u003c/p\u003e\n\n\u003cp\u003eCheck out the join table section in the \u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association\"\u003eActive Record Association Rails Guide\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eRun the tests using the \u003ccode\u003erspec\u003c/code\u003e or \u003ccode\u003elearn test\u003c/code\u003e command.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/\"\u003eRails Guides\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association\"\u003eActive Record Associations: Join Table section\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g14f311f0eb725e6cf95b4824fe6efc1b"},{"id":220481,"title":"Active Record Lifecycle","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"activerecord-lifecycle-reading\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/activerecord-lifecycle-reading/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-lifecycle-reading\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-lifecycle-reading/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the concept of AR Lifecycle methods\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003ebefore_save\u003c/code\u003e, \u003ccode\u003ebefore_create\u003c/code\u003e, and \u003ccode\u003ebefore_validation\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eUnderstand when to use \u003ccode\u003ebefore_validation\u003c/code\u003e vs. \u003ccode\u003ebefore_save\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eCallbacks\u003c/h2\u003e\n\n\u003cp\u003eNow that we are integrating \u003ccode\u003eActiveRecord\u003c/code\u003e into Rails, we should note that\nwe can make bits of code run whenever something happens in our model: like when\nit's created (but not yet saved to the database), saved to the database, or\neven deleted.  Everything we cover here is called an \"Active Record Lifecycle\nCallback\". Many people just call them callbacks. It's a bit shorter.\u003c/p\u003e\n\n\u003cp\u003eTake a look at the blog app that is included. Be sure to run the migrations\nbefore you start learning from Rails (we do this with \u003ccode\u003erake db:migrate\u003c/code\u003e)! We\nhave a \u003ccode\u003ePost\u003c/code\u003e model and a few views.  The \u003ccode\u003ePost\u003c/code\u003e \u003ccode\u003ebelongs_to\u003c/code\u003e an \u003ccode\u003eAuthor\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNote also that in the \u003ccode\u003ePost\u003c/code\u003e model you'll notice a \u003cstrong\u003evalidation\u003c/strong\u003e to make sure\nthat post titles are in title case. Title case means every word starts with a\ncapital letter.\u003c/p\u003e\n\n\u003cp\u003eSo, in order to make sure that our validation always passes, before every save,\nwe want Rails to run our title-case algorithm on the \u003ccode\u003etitle\u003c/code\u003e of the \u003ccode\u003ePost\u003c/code\u003e.\nLet's create the \u003ccode\u003emake_title_case\u003c/code\u003e method then.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# post.rb\u003cbr\u003e\u003cbr\u003edef make_title_case\u003cbr\u003e  self.title = self.title.titlecase\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo make sure that all of our \u003ccode\u003ePost\u003c/code\u003es have the correctly-formatted title, we're\ngoing to run \u003ccode\u003emake_title_case\u003c/code\u003e during the first of the available lifecycle\n\"points:\" \u003ccode\u003ebefore_save\u003c/code\u003e.  Our validation and lifecycle callback will make sure\nour posts are always title-cased.\u003c/p\u003e\n\n\u003cp\u003eWe write lifecycle callbacks similarly to how you use \u003ccode\u003ehas_many\u003c/code\u003e or \u003ccode\u003evalidates\u003c/code\u003e\nand place this \"hook\" onto saving at the top of our model file. Since lifecycle\nmethods run \"as if by magic,\" we won't see them being called explicitly in one\nmethod by another method versus Rails running it for us, we put such statements\nat the top so that it catches other programmers' eyes.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e\u003cbr\u003e  belongs_to :author\u003cbr\u003e  validate :is_title_case\u003cbr\u003e\u003cbr\u003e  # New Code!!\u003cbr\u003e  before_save :make_title_case\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e  def is_title_case\u003cbr\u003e    if title.split.any?{|w|w[0].upcase != w[0]}\u003cbr\u003e      errors.add(:title, \"Title must be in title case\")\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def make_title_case\u003cbr\u003e    # Rails provides a String#titlecase method\u003cbr\u003e    self.title = self.title.titlecase\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'd expect that whenever Rails persists \u003ccode\u003ePost\u003c/code\u003e models to the database, (so\n\u003ccode\u003e#save\u003c/code\u003e and \u003ccode\u003e#create\u003c/code\u003e) this code will get run. Let's open up the console\n(\u003ccode\u003erails c\u003c/code\u003e) and test it out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ep = Post.create(title: \"testing\")\u003cbr\u003e#   (0.1ms)  begin transaction\u003cbr\u003e#   (0.1ms)  rollback transaction\u003cbr\u003e# =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWait! There was no \u003ccode\u003eINSERT\u003c/code\u003e SQL command issued. In fact, we see the \u003ccode\u003erollback\ntransaction\u003c/code\u003e line. That means that it didn't actually save to the database. If\nwe do \u003ccode\u003ep.valid?\u003c/code\u003e right now it will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis feels surprising. Most of the time when we have this feeling while\nprogramming it's because we didn't understand something subtle. This is true\nhere.\u003c/p\u003e\n\n\u003cp\u003eIt turns out that the \u003ccode\u003ebefore_save\u003c/code\u003e is called \u003cstrong\u003eafter\u003c/strong\u003e validation occurs. So\nRails goes \u003ccode\u003eis valid?\u003c/code\u003e \"Nope! Stop!\", and never makes it to \u003ccode\u003ebefore_save\u003c/code\u003e. We\nmissed that subtlety.\u003c/p\u003e\n\n\u003cp\u003eLet's change our callback to the \u003ccode\u003ebefore_validation\u003c/code\u003e callback. This one happens\n\u003cstrong\u003ebefore\u003c/strong\u003e validation. That means that first our \u003ccode\u003ebefore_validation\u003c/code\u003e code\nworks, which title cases the title, \u003cem\u003ethen\u003c/em\u003e the validation runs, which passes!\nHere is the final code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e\u003cbr\u003e  belongs_to :author\u003cbr\u003e  validate :is_title_case\u003cbr\u003e\u003cbr\u003e  # New Code!!\u003cbr\u003e  before_validation :make_title_case\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def is_title_case\u003cbr\u003e    if title.split.any?{|w|w[0].upcase != w[0]}\u003cbr\u003e      errors.add(:title, \"Title must be in title case\")\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def make_title_case\u003cbr\u003e    self.title = self.title.titlecase\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere is a rule of thumb: \u003cstrong\u003eWhenever you are modifying an attribute of the\nmodel, use \u003ccode\u003ebefore_validation\u003c/code\u003e. If you are doing some other action, then use\n\u003ccode\u003ebefore_save\u003c/code\u003e.\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003eBefore Save\u003c/h3\u003e\n\n\u003cp\u003eNow let's do something that (properly) belongs in the \u003ccode\u003ebefore_save\u003c/code\u003e. We use\n\u003ccode\u003ebefore_save\u003c/code\u003e for actions that need to occur that aren't modifying the model\nitself. For example, whenever you save to the database, let's send an email to\nthe \u003ccode\u003eAuthor\u003c/code\u003e alerting them that the post was just saved!\u003c/p\u003e\n\n\u003cp\u003eThis is a perfect \u003ccode\u003ebefore_save\u003c/code\u003e action. It doesn't modify the model so there is\nno validation weirdness, and we don't want to email the user if the Post is\ninvalid. That would be just mean! So if you had some method called\n\u003ccode\u003eemail_author_about_post\u003c/code\u003e you would modify your \u003ccode\u003ePost\u003c/code\u003e model to look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e\u003cbr\u003e  belongs_to :author\u003cbr\u003e  validate :is_title_case\u003cbr\u003e\u003cbr\u003e  before_validation :make_title_case\u003cbr\u003e\u003cbr\u003e  # New Code!!\u003cbr\u003e  before_save :email_author_about_post\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def is_title_case\u003cbr\u003e    if title.split.any?{|w|w[0].upcase != w[0]}\u003cbr\u003e      errors.add(:title, \"Title must be in title case\")\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def email_author_about_post\u003cbr\u003e    # Not implemented.\u003cbr\u003e    # For more information: https://guides.rubyonrails.org/action_mailer_basics.html\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def make_title_case\u003cbr\u003e    self.title = self.title.titlecase\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eBefore Create\u003c/h3\u003e\n\n\u003cp\u003eBefore you move on, let's cover one last callback that is useful:\n\u003ccode\u003ebefore_create\u003c/code\u003e. \u003ccode\u003ebefore_create\u003c/code\u003e is very close to \u003ccode\u003ebefore_save\u003c/code\u003e with one major\ndifference: it only gets called when a model is created for the first time.\nThis means not every time the object is persisted, just when it is \u003cstrong\u003enew\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor more information on all of the callbacks available to you, check out \u003ca href=\"http://guides.rubyonrails.org/active_record_callbacks.html\"\u003ethis\namazing rails guide\u003c/a\u003e\u003c/p\u003e","exportId":"g3fe4218578c4b633053d65328b7363e2"},{"id":220506,"title":"Displaying Associations in Rails","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"displaying-associations-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/displaying-associations-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-associations-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-associations-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eAfter this lesson, you should be able to...\u003c/p\u003e  \u003col\u003e \u003cli\u003eCreate a \u003ccode\u003ehas_many\u003c/code\u003e and \u003ccode\u003ebelongs_to\u003c/code\u003e association.\u003c/li\u003e \u003cli\u003eBuild associated data through the console and \u003ccode\u003edb/seeds.rb\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eQuery for associated data using methods provided by association.\u003c/li\u003e \u003cli\u003eEmbed association data within views.\u003c/li\u003e \u003cli\u003eIterate over associated data within a view displaying individual instances.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eBlog Categories\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll be setting up a blog admin panel so that \u003ccode\u003ePost\u003c/code\u003e objects can be created, associated with \u003ccode\u003eCategory\u003c/code\u003e objects, and listed by \u003ccode\u003eCategory\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eThe Models\u003c/h2\u003e  \u003cp\u003eFirst, we'll set up associated models, just like in the preceding lesson:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/post.rb\u003cbr\u003e\u003cbr\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e  belongs_to :category\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# app/models/category.rb\u003cbr\u003e\u003cbr\u003eclass Category \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :posts\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eSeed Data\u003c/h2\u003e  \u003cp\u003eOnce you start working with more and more complicated data sets, you will realize that there is a lot of \u003cem\u003estuff\u003c/em\u003e you have to set up just to be able to play with your methods. The associations are so vast that you need to make many posts with many categories and all of that! How frustrating. What you are doing is called \"seeding\" the database. Pretty much putting in some test data so that you can play with your app. In Rails we set up our seed data in \u003ccode\u003edb/seeds.rb\u003c/code\u003e. Then we'll be able to just seed (or re-seed) the database with a quick \u003ccode\u003erake db:seed\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# db/seeds.rb\u003cbr\u003e\u003cbr\u003eclickbait = Category.create!(name: \"Motivation\")\u003cbr\u003eclickbait.posts.create!(title: \"10 Ways You Are Already Awesome\")\u003cbr\u003eclickbait.posts.create!(title: \"This Yoga Stretch Cures Procrastination, Maybe\")\u003cbr\u003eclickbait.posts.create!(title: \"The Power of Positive Thinking and 100 Gallons of Coffee\")\u003cbr\u003e\u003cbr\u003emovies = Category.create!(name: \"Movies\")\u003cbr\u003emovies.posts.create!(title: \"Top 20 Summer Blockbusters Featuring a Cute Dog\") \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWoot! The best thing about the \u003ccode\u003eseeds.rb\u003c/code\u003e file is that it's just Ruby! There is no magic. Look, super standard Ruby. To run the seed file in the development environment, you can activate the rake task:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erake db:seed \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you want to play around with the data, of course, it's always possible to take the create statements exactly as written above and type them into \u003ccode\u003erails console\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eThe Views\u003c/h2\u003e  \u003ch3\u003ePosts\u003c/h3\u003e  \u003cp\u003eWhen viewing a single post, we'll want to have a link to its category available.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h3\u0026gt;Category: \u0026lt;%= link_to @post.category.name, category_path(@post.category) if @post.category %\u0026gt;\u0026lt;/h3\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;p\u0026gt;\u0026lt;%= @post.description %\u0026gt;\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003e@post.category\u003c/code\u003e is the \u003ccode\u003eCategory\u003c/code\u003e model itself, so we can use it anywhere we would use \u003ccode\u003e@category\u003c/code\u003e in a view for that object. Also note that we added the \u003ccode\u003eif @post.category\u003c/code\u003e conditional to ensure that the view doesn't try to call \u003ccode\u003e@post.category.name\u003c/code\u003e if the post has not been associated with a category.\u003c/p\u003e  \u003ch3\u003eCategories\u003c/h3\u003e  \u003cp\u003eIn this domain, the primary use of a category is as a bucket for posts, so we'll definitely have to make heavy use of associations when designing the view.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/categories/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @category.name %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h3\u0026gt;\u0026lt;%= pluralize(@category.posts.count, 'Post') %\u0026gt;\u0026lt;/h3\u0026gt;\u003cbr\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;% @category.posts.each do |p| %\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;\u0026lt;%= link_to p.title, post_path(p) %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;% end %\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe object returned by an association method (\u003ccode\u003eposts\u003c/code\u003e in this case) is a \u003ca href=\"http://edgeapi.rubyonrails.org/classes/ActiveRecord/Associations/CollectionProxy.html\"\u003eCollectionProxy\u003c/a\u003e, and it responds to most of the methods you can use on an array. Think of it like an array.\u003c/p\u003e  \u003cp\u003eIf we open up \u003ccode\u003erails console\u003c/code\u003e, we can confirm that the \u003ccode\u003ecount\u003c/code\u003e results are accurate:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ePost.count\u003cbr\u003e =\u0026gt; 4\u003cbr\u003eclickbait = Category.find_by(name: \"Motivation\")\u003cbr\u003e =\u0026gt; #\u0026lt;Category id: 1, ...\u0026gt;\u003cbr\u003eclickbait.posts.count\u003cbr\u003e =\u0026gt; 3 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMeanwhile, for listing a category's posts, we wrote a loop very similar to the loops we've been writing in \u003ccode\u003eindex\u003c/code\u003e actions, which makes sense since a category is essentially an index of its posts. Let's compare them side-by-side:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/categories/show.html.erb --\u0026gt;\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003e\u0026lt;% @category.posts.each do |p| %\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\u0026lt;%= link_to p.title, post_path(p) %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt;\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eVersus:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/index.html.erb --\u0026gt;\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003e\u0026lt;% @posts.each do |p| %\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\u0026lt;%= link_to p.title, post_path(p) %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt;\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn fact, the only difference is what we call \u003ccode\u003eeach\u003c/code\u003e on.\u003c/p\u003e  \u003ch2\u003eRecap\u003c/h2\u003e  \u003cp\u003eWith Active Record's powerful association macros and instance methods, we can treat related models exactly the same as we treat directly-accessed models. As long as the database and classes are set up correctly, Active Record will figure the rest out for us!\u003c/p\u003e","exportId":"g617b11a1d7250af90b6ee643a7ac10fa"},{"id":220512,"title":"Displaying Associations in Rails Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"displaying-associations-rails-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/displaying-associations-rails-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-associations-rails-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-associations-rails-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn the previous unit, we used validations and forms to create a management\ndashboard for songs and artists. Now we're ready to start connecting those\nmodels and using their relationships to display more interesting data.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eIn the controllers, this lab will require you to write \u003ccode\u003eshow\u003c/code\u003e and \u003ccode\u003eindex\u003c/code\u003e\nactions for both \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYou'll need to add a foreign key by writing your own migration.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYou'll need to set up the association in the model classes.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYou'll need to format and link to the songs and artists according to the\nspecs.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAdditionally, you'll find that the specs require two special methods,\n\u003ccode\u003eArtist#song_count\u003c/code\u003e and \u003ccode\u003eSong#artist_name\u003c/code\u003e. These methods are meant to protect\nthe views from complexity that belongs in the model.\u003c/p\u003e\n\n\u003cp\u003eThey are also a great example of a software design principle called the\n\u003ca href=\"https://en.wikipedia.org/wiki/Law_of_Demeter\"\u003eLaw of Demeter\u003c/a\u003e, which is sometimes called the \"one dot\" rule in\nobject-oriented languages like Ruby. In other words, \u003ccode\u003eruby user.best_friend\u003c/code\u003e is\nbetter than \u003ccode\u003eruby user.friends.find_by(best: true)\u003c/code\u003e because all of the\n\"friend\"-related complexity is hidden away within the user model. This\n\u003cstrong\u003eprotects\u003c/strong\u003e user-related code from future changes to friend functionality.\u003c/p\u003e\n\n\u003cp\u003eFor example, if the above architecture changed such that best friendship was\ndetermined by the highest \"friendship\" value instead of a boolean \u003ccode\u003ebest\u003c/code\u003e flag,\nthe \"two-dots\" code would need to be changed \u003cem\u003eeverywhere\u003c/em\u003e, but the first\nsnippet, which obeys the Law of Demeter, hides that complexity in the\n\u003ccode\u003eUser#best_friend\u003c/code\u003e method, whose definition can be changed without having to\ntrack down and update every single usage.\u003c/p\u003e","exportId":"g0c823957d9f9fa92eed91301c3242fc2"},{"id":220519,"title":"Forms And Basic Associations in Rails","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"forms-and-basic-associations-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/forms-and-basic-associations-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/forms-and-basic-associations-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003ePopulate select options based on association options.\u003c/li\u003e \u003cli\u003eAssign a foreign key based on an input box value directly through mass assignment (\u003ccode\u003epost[category_id]\u003c/code\u003e).\u003c/li\u003e \u003cli\u003eDefine a belongs_to association writer.\u003c/li\u003e \u003cli\u003eBuild a form field that will delegate to a belongs\u003cem\u003eto association writer (`post#category\u003c/em\u003ename=`) through controller mass assignment.\u003c/li\u003e \u003cli\u003eDefine a has_many association writer.\u003c/li\u003e \u003cli\u003eBuild a form field that will delegate to a has\u003cem\u003emany association writer (`category#post\u003c/em\u003eids=`) through controller mass assignment.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eThe problem\u003c/h2\u003e  \u003cp\u003eLet's say we have a simple blogging system. Our models are Post and Category. A Post \u003ccode\u003ebelongs_to\u003c/code\u003e a Category.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/post.rb\u003cbr\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e  belongs_to :category\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e# app/models/category.rb\u003cbr\u003eclass Category \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :posts\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we need to build the functionality for a user to create a Post. We're going to need a form for the Post's content, and some way to represent what Category the Post belongs to.\u003c/p\u003e  \u003ch2\u003eUsing the category ID\u003c/h2\u003e  \u003cp\u003eAs a first pass, we might build a form like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label :category_id, :category %\u0026gt;\u0026lt;%= f.text_field :category_id %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :content %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will work if we wire up our \u003ccode\u003ePostsController\u003c/code\u003e with the right parameters:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass PostsController \u0026lt; ApplicationController\u003cbr\u003e  def create\u003cbr\u003e    Post.create(post_params)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def post_params\u003cbr\u003e    params.require(:post).permit(:category_id, :content)\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut as a user experience, this is miserable. I have to know the ID of the category I want to use. As a user, it is very unlikely that I know this or want to.\u003c/p\u003e  \u003cp\u003eWe could rewrite our controller to accept a \u003ccode\u003ecategory_name\u003c/code\u003e instead of an ID:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass PostsController \u0026lt; ApplicationController\u003cbr\u003e  def create\u003cbr\u003e    category = Category.find_or_create_by(name: params[:post][:category_name])\u003cbr\u003e    Post.create(content: params[:post][:content], category: category)\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut we'll have to do this anywhere we want to set the category for a Post. When we're setting a Post's categories, the one thing we know we have is a Post object. What if we could move this logic to the model?\u003c/p\u003e  \u003cp\u003eSpecifically, what if we gave the Post model a \u003ccode\u003ecategory_name\u003c/code\u003e attribute?\u003c/p\u003e  \u003ch2\u003eDefining a custom setter and getter (convenience attributes on models)\u003c/h2\u003e  \u003cp\u003eSince our Active Record models are still just Ruby classes, we can define our own setter and getter methods:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/post.rb\u003cbr\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e   def category_name=(name)\u003cbr\u003e     self.category = Category.find_or_create_by(name: name)\u003cbr\u003e   end\u003cbr\u003e\u003cbr\u003e   def category_name\u003cbr\u003e      self.category ? self.category.name : nil\u003cbr\u003e   end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe setter method \u003ccode\u003e#category_name=\u003c/code\u003e is called whenever a \u003ccode\u003ePost\u003c/code\u003e is initialized with a \u003ccode\u003ecategory_name\u003c/code\u003e field. We can expand \u003ccode\u003ePost.create(post_params)\u003c/code\u003e to\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ePost.create({\u003cbr\u003e  category_name: params[:post][:category_name],\u003cbr\u003e  content: params[:post][:content]\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eso that you can see that \u003ccode\u003e#category_name=\u003c/code\u003e will indeed be called. Since we have defined this setter ourselves, \u003ccode\u003ePost.create\u003c/code\u003e does not try to fall back to setting \u003ccode\u003ecategory_name\u003c/code\u003e through Active Record. You can think of \u003ccode\u003e#category_name=\u003c/code\u003e as intercepting the call to the database and instead shadowing the attribute \u003ccode\u003ecategory_name\u003c/code\u003e by, one, making sure the \u003ccode\u003eCategory\u003c/code\u003e exists; and, two, providing it in-memory for the \u003ccode\u003ePost\u003c/code\u003e model. We sometimes call these in-memory attributes \"virtuals\".\u003c/p\u003e  \u003cp\u003eNow we can set \u003ccode\u003ecategory_name\u003c/code\u003e on a post. We can do it when creating a post too, so our controller becomes quite simple again:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass PostsController \u0026lt; ApplicationController\u003cbr\u003e  def create\u003cbr\u003e    Post.create(post_params)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def post_params\u003cbr\u003e    params.require(:post).permit(:category_name, :content)\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice the difference –– we're now accepting a category name, rather than a category ID. Even though there's no Active Record field for \u003ccode\u003ecategory_name\u003c/code\u003e, the \u003ccode\u003ecategory_name\u003c/code\u003e key in the \u003ccode\u003epost_params\u003c/code\u003e hash prompts a call to the \u003ccode\u003ecategory_name=\u003c/code\u003e method.\u003c/p\u003e  \u003cp\u003eWe can change the view as well now:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label :category_name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :category_name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :content %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow the user can enter a category by name (instead of needing to look up its ID), and we handle finding or creating the \u003ccode\u003eCategory\u003c/code\u003e in the black box of the server. This results in a much friendlier experience for the user.\u003c/p\u003e  \u003ch2\u003eSelecting from existing categories\u003c/h2\u003e  \u003cp\u003eIf we want to let the user pick from existing categories, we can use a \u003ca href=\"http://apidock.com/rails/ActionView/Helpers/FormOptionsHelper/collection_select\"\u003eCollection Select\u003c/a\u003e helper to render a \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e tag:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.collection_select :category_name, Category.all, :name, :name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :content %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will create a drop down selection input where the user can pick a category.\u003c/p\u003e  \u003cp\u003eHowever, we've lost the ability for users to create their own categories.\u003c/p\u003e  \u003cp\u003eThat might be what you want. For example, the content management system for a magazine would probably want to enforce that the category of an article is one of the sections actually printed in the magazine.\u003c/p\u003e  \u003cp\u003eIn our case, however, we want to give users the flexibility to create a new category \u003cem\u003eor\u003c/em\u003e pick an existing one. What we want is autocompletion, which we can get with a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist\"\u003e\u003ccode\u003edatalist\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :category_name, list: \"categories_autocomplete\" %\u0026gt;\u003cbr\u003e  \u0026lt;datalist id=\"categories_autocomplete\"\u0026gt;\u003cbr\u003e    \u0026lt;% Category.all.each do |category| %\u0026gt;\u003cbr\u003e      \u0026lt;option value=\"\u0026lt;%= category.name %\u0026gt;\"\u0026gt;\u003cbr\u003e    \u0026lt;% end %\u0026gt;\u003cbr\u003e  \u0026lt;/datalist\u0026gt;\u003cbr\u003e  \u0026lt;textarea name=\"post[content]\"\u0026gt;\u0026lt;/textarea\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003edatalist\u003c/code\u003e is a new element in the HTML5 spec that allows for easy autocomplete. Check below in \u003ca href=\"#resources\"\u003eResources\u003c/a\u003e for further reading.\u003c/p\u003e  \u003ch2\u003eUpdating multiple rows\u003c/h2\u003e  \u003cp\u003eLet's think about the reverse association. Categories have many posts.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/category.rb\u003cbr\u003eclass Category \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :posts\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGiven a category, how do we let a user specify many different posts to categorize? We can't do it with just one \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e because we can have many posts in that category.\u003c/p\u003e  \u003ch3\u003eUsing array parameters\u003c/h3\u003e  \u003cp\u003eRails uses a \u003ca href=\"http://guides.rubyonrails.org/v3.2.13/form_helpers.html#understanding-parameter-naming-conventions\"\u003enaming convention\u003c/a\u003e to let you submit an array of values to a controller.\u003c/p\u003e  \u003cp\u003eIf you put this in a view, it looks like this.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for @category do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"category[post_ids][]\"\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"category[post_ids][]\"\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"category[post_ids][]\"\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" value=\"Submit\"\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen the form is submitted, your controller will have access to a \u003ccode\u003epost_ids\u003c/code\u003e param, which will be an array of strings.\u003c/p\u003e  \u003cp\u003eWe can write a setter method for this, just like we did for \u003ccode\u003ecategory_name\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/category.rb\u003cbr\u003eclass Category \u0026lt; ActiveRecord::Base\u003cbr\u003e   def post_ids=(ids)\u003cbr\u003e     ids.each do |id|\u003cbr\u003e       post = Post.find(id)\u003cbr\u003e       self.posts \u0026lt;\u0026lt; post\u003cbr\u003e     end\u003cbr\u003e   end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we're certain that the post ids being submitted in the form all belong to existing posts, we don't even need this setter method! The following code is valid and will automatically assign the new category id to each post:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# As long as posts 5, 2, 3 exist, this will work! The category_id for each of these\u003cbr\u003e# posts will be set to the new category's id\u003cbr\u003eCategory.create(name: 'This and That', post_ids: %w[5 2 3]) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we can use the same wiring in the controller to set \u003ccode\u003epost_ids\u003c/code\u003e from \u003ccode\u003eparams\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/categories_controller.rb\u003cbr\u003eclass CategoriesController \u0026lt; ApplicationController\u003cbr\u003e  def create\u003cbr\u003e    Category.create(category_params)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def category_params\u003cbr\u003e    params.require(:category).permit(:name, post_ids: [])\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist\"\u003edatalist\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://apidock.com/rails/ActionView/Helpers/FormOptionsHelper/collection_select\"\u003ecollection_select\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/v3.2.13/form_helpers.html#understanding-parameter-naming-conventions\"\u003enaming convention\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"forms-and-basic-associations-in-rails"},{"id":220526,"title":"Forms and Basic Associations in Rails Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"forms-and-basic-associations-rails-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/forms-and-basic-associations-rails-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/forms-and-basic-associations-rails-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/forms-and-basic-associations-rails-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice defining associations\u003c/li\u003e\n\u003cli\u003ePractice building forms in ERB when working with nested models\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eA \u003ccode\u003eSong\u003c/code\u003e Library\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to make a song library that helps record thoughts\nabout various \u003ccode\u003eSong\u003c/code\u003es. Our data model looks like this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArtist\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003ehas a \u003ccode\u003ename\u003c/code\u003e attribute (\u003ccode\u003eString\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003ehas many \u003ccode\u003eSong\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eSong\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003ehas a \u003ccode\u003etitle\u003c/code\u003e attribute (\u003ccode\u003eString\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003ebelongs to an \u003ccode\u003eArtist\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ebelongs to a \u003ccode\u003eGenre\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ehas many \u003ccode\u003eNote\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eGenre\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003ehas a \u003ccode\u003ename\u003c/code\u003e attribute (\u003ccode\u003eString\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003ehas many \u003ccode\u003esongs\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eNote\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003ehas \u003ccode\u003econtent\u003c/code\u003e attribute (\u003ccode\u003eString\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003ebelongs to a \u003ccode\u003eSong\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eThe base models, controllers, and seed data have been provided for you.\u003c/li\u003e\n\u003cli\u003eYou should create and migrate the database before starting to develop your\nsolution.\u003c/li\u003e\n\u003cli\u003eSeeding the database provides many \u003ccode\u003eGenre\u003c/code\u003es. You will add data about\n\u003ccode\u003eArtist\u003c/code\u003es, \u003ccode\u003eNote\u003c/code\u003es, and \u003ccode\u003eSong\u003c/code\u003es during the development of this application.\nThe \u003ccode\u003eArtistsController\u003c/code\u003e and \u003ccode\u003eSongsController\u003c/code\u003e have been built out so that you\ncan do this.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFirst, connect the models by using the \u003ccode\u003eActiveRecord\u003c/code\u003e association commands.\u003c/p\u003e\n\n\u003cp\u003eNext, update the minimal \u003ccode\u003eapp/views/songs/new.html.erb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis view should have a form that provides:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA text input box that sets the \u003ccode\u003eSong\u003c/code\u003e's title.\u003c/li\u003e\n\u003cli\u003eA text input box for the \u003ccode\u003eArtist\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eA selection box for \u003ccode\u003eGenre\u003c/code\u003e. Users should be able to pick amongst existing genres only.\u003c/li\u003e\n\u003cli\u003eSeveral text input boxes to add notes to the song. These should have the IDs\n\u003ccode\u003esong_notes_1\u003c/code\u003e, \u003ccode\u003esong_notes_2\u003c/code\u003e, and so on for the specs to pass.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is a challenging lab. Here are some hints:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou might need to search around for how to pass an array using \u003ccode\u003estrong_params\u003c/code\u003e!\u003c/li\u003e\n\u003cli\u003eIt's easy to get confused between getting an \u003ccode\u003eArtist\u003c/code\u003e \u003cem\u003einstance\u003c/em\u003e from a\n\u003ccode\u003eSong\u003c/code\u003e and an \u003ccode\u003eArtist\u003c/code\u003e's name. To help make your form work easier, solve the\n\u003ccode\u003espec/models/song_spec.rb\u003c/code\u003e \u003cem\u003efirst\u003c/em\u003e. You can run a single spec by invoking it\nwith e.g. \u003ccode\u003erspec spec/models/song_spec.rb\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eMake use of the references below!\u003c/li\u003e\n\u003cli\u003eWhile we direct you to update \u003ccode\u003enew.html.erb\u003c/code\u003e, you're going to need to make\nchanges in multiple models and the \u003ccode\u003eSongsController\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eReferences\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://guides.rubyonrails.org/association_basics.html#has-many-association-reference\"\u003e\u003ccode\u003ehas_many\u003c/code\u003e association reference\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://guides.rubyonrails.org/association_basics.html#belongs-to-association-reference\"\u003e\u003ccode\u003ebelongs_to\u003c/code\u003e association reference\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://apidock.com/rails/ActionController/Parameters/permit\"\u003eSpecifying which parameters are accepted in Rails Controllers\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g68048607edaf4db204f93a5becc4f1c2"},{"id":220533,"title":"Nested Forms","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"basic-nested-forms\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/basic-nested-forms/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/basic-nested-forms\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/basic-nested-forms/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eConstruct a nested \u003ccode\u003eparams\u003c/code\u003e hash with data about the primary object and a \u003ccode\u003ebelongs_to\u003c/code\u003e and \u003ccode\u003ehas_many\u003c/code\u003e association.\u003c/li\u003e \u003cli\u003eUse the conventional key names for associated data (association_attributes).\u003c/li\u003e \u003cli\u003eName form inputs correctly to create a nested \u003ccode\u003eparams\u003c/code\u003e hash with \u003ccode\u003ebelongs_to\u003c/code\u003e and \u003ccode\u003ehas_many\u003c/code\u003e associated data.\u003c/li\u003e \u003cli\u003eDefine a conventional association writer for the primary model to properly instantiate associations based on the nested \u003ccode\u003eparams\u003c/code\u003e association data.\u003c/li\u003e \u003cli\u003eDefine a custom association writer for the primary model to properly instantiate associations with custom logic (like unique by name) on the nested \u003ccode\u003eparams\u003c/code\u003e association data.\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003efields_for\u003c/code\u003e to generate the association fields.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eData model\u003c/h2\u003e  \u003cp\u003eLet's say we're writing an address book.\u003c/p\u003e  \u003cp\u003eEach \u003ccode\u003ePerson\u003c/code\u003e can have multiple addresses. Each \u003ccode\u003eAddress\u003c/code\u003e has a bunch of address info fields.\u003c/p\u003e  \u003cp\u003eOur data model looks like this:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003ePerson\u003c/code\u003e  \u003cul\u003e \u003cli\u003ehas many \u003ccode\u003eaddresses\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003ehas a \u003ccode\u003ename\u003c/code\u003e (string)\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eAddress\u003c/code\u003e  \u003cul\u003e \u003cli\u003ehas one \u003ccode\u003eperson\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003ehas the first line of the street address stored as \u003ccode\u003estreet_address_1\u003c/code\u003e (string)\u003c/li\u003e \u003cli\u003ehas the second line of the street address stored as \u003ccode\u003estreet_address_2\u003c/code\u003e (string)\u003c/li\u003e \u003cli\u003ehas a \u003ccode\u003ecity\u003c/code\u003e (string)\u003c/li\u003e \u003cli\u003ehas a \u003ccode\u003estate\u003c/code\u003e (string)\u003c/li\u003e \u003cli\u003ehas a \u003ccode\u003ezipcode\u003c/code\u003e (string)\u003c/li\u003e \u003cli\u003ehas an \u003ccode\u003eaddress_type\u003c/code\u003e (string)\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eCreating people\u003c/h2\u003e  \u003cp\u003eHow do we write our \u003ccode\u003ePerson\u003c/code\u003e form? We don't want to require our user to first create an \u003ccode\u003eAddress\u003c/code\u003e, then create that \u003ccode\u003ePerson\u003c/code\u003e. That's annoying. We want a single form for a \u003ccode\u003ePerson\u003c/code\u003e containing several slots for their \u003ccode\u003eaddresses\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003ePreviously, we wrote setters like \u003ccode\u003eSong#artist_name=\u003c/code\u003e to find or create an \u003ccode\u003eArtist\u003c/code\u003e and connect them to the song.\u003c/p\u003e  \u003cp\u003eThat won't work here, because an address contains more than one field. In the \u003ccode\u003eArtist\u003c/code\u003e case we were just doing the \u003ccode\u003ename\u003c/code\u003e. With \u003ccode\u003eAddress\u003c/code\u003e, it's \"structured data\". All that really means is it has multiple fields attached to it. When we build a form for it, the form will send a different key for each field in each address. This can get a bit unwieldy so we generally try to group a hash within the \u003ccode\u003eparams\u003c/code\u003e hash, which makes things much neater. Spoiler alert: Rails has a way to send this across as a hash.\u003c/p\u003e  \u003cp\u003eThe complete \u003ccode\u003eparams\u003c/code\u003e object for creating a \u003ccode\u003ePerson\u003c/code\u003e will look like the following. Using \"0\" and \"1\" as keys can seem a bit odd, but it makes everything else work moving forward. This hash is now more versatile. You can access nested values the standard way, with \u003ccode\u003eparams[:person][:addresses_attributes][\"0\"]\u003c/code\u003e returning all of the information about the first address at 33 West 26th St.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  :person =\u0026gt; {\u003cbr\u003e    :name =\u0026gt; \"Avi\",\u003cbr\u003e    :addresses_attributes =\u0026gt; {\u003cbr\u003e      \"0\" =\u0026gt; {\u003cbr\u003e        :street_address_1 =\u0026gt; \"33 West 26th St\",\u003cbr\u003e        :street_address_2 =\u0026gt; \"Apt 2B\",\u003cbr\u003e        :city =\u0026gt; \"New York\",\u003cbr\u003e        :state =\u0026gt; \"NY\",\u003cbr\u003e        :zipcode =\u0026gt; \"10010\",\u003cbr\u003e        :address_type =\u0026gt; \"Work\"\u003cbr\u003e      },\u003cbr\u003e      \"1\" =\u0026gt; {\u003cbr\u003e        :street_address_1 =\u0026gt; \"11 Broadway\",\u003cbr\u003e        :street_address_2 =\u0026gt; \"2nd Floor\",\u003cbr\u003e        :city =\u0026gt; \"New York\",\u003cbr\u003e        :state =\u0026gt; \"NY\",\u003cbr\u003e        :zipcode =\u0026gt; \"10004\",\u003cbr\u003e        :address_type =\u0026gt; \"Home\"\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice the \u003ccode\u003eaddresses_attributes\u003c/code\u003e key. That key is similar to the \u003ccode\u003eartist_name\u003c/code\u003e key we used previously. Last time, we handled this by writing a \u003ccode\u003eartist_name=\u003c/code\u003e method. In this case, we're going to do something \u003cem\u003esuper\u003c/em\u003e similar. Instead of writing our own \u003ccode\u003eaddresses_attributes=\u003c/code\u003e method, we'll let Rails take care of it for us. We're going to use \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e and the \u003ccode\u003efields_for\u003c/code\u003e FormHelper.\u003c/p\u003e  \u003cp\u003eLast time, we first wrote our setter method in the model. This time let's modify our \u003ccode\u003ePerson\u003c/code\u003e model to include an \u003ccode\u003eaccepts_nested_attributes_for :addresses\u003c/code\u003e line.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Person \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :addresses\u003cbr\u003e  accepts_nested_attributes_for :addresses\u003cbr\u003e\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow open up \u003ccode\u003erails c\u003c/code\u003e and run our \u003ccode\u003eaddresses_attributes\u003c/code\u003e method that was created for us by \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e2.2.3 :018 \u0026gt; new_person = Person.new\u003cbr\u003e =\u0026gt; #\u0026lt;Person id: nil, name: nil, created_at: nil, updated_at: nil\u0026gt;\u003cbr\u003e\u003cbr\u003e2.2.3 :019 \u0026gt; new_person.addresses_attributes={\"0\"=\u0026gt;{\"street_address_1\"=\u0026gt;\"33 West 26\", \"street_address_2\"=\u0026gt;\"Floor 2\", \"city\"=\u0026gt;\"NYC\", \"state\"=\u0026gt;\"NY\", \"zipcode\"=\u0026gt;\"10004\", \"address_type\"=\u0026gt;\"work1\"}, \"1\"=\u0026gt;{\"street_address_1\"=\u0026gt;\"11 Broadway\", \"street_address_2\"=\u0026gt;\"Suite 260\", \"city\"=\u0026gt;\"NYC\", \"state\"=\u0026gt;\"NY\", \"zipcode\"=\u0026gt;\"10004\", \"address_type\"=\u0026gt;\"work2\"}}\u003cbr\u003e =\u0026gt; {\"0\"=\u0026gt;{\"street_address_1\"=\u0026gt;\"33 West 26\", \"street_address_2\"=\u0026gt;\"Floor 2\", \"city\"=\u0026gt;\"NYC\", \"state\"=\u0026gt;\"NY\", \"zipcode\"=\u0026gt;\"10004\", \"address_type\"=\u0026gt;\"work1\"}, \"1\"=\u0026gt;{\"street_address_1\"=\u0026gt;\"11 Broadway\", \"street_address_2\"=\u0026gt;\"Suite 260\", \"city\"=\u0026gt;\"NYC\", \"state\"=\u0026gt;\"NY\", \"zipcode\"=\u0026gt;\"10004\", \"address_type\"=\u0026gt;\"work2\"}}\u003cbr\u003e\u003cbr\u003e2.2.3 :020 \u0026gt; new_person.save\u003cbr\u003e   (0.2ms)  begin transaction\u003cbr\u003e  SQL (0.8ms)  INSERT INTO \"people\" (\"created_at\", \"updated_at\") VALUES (?, ?)  [[\"created_at\", \"2016-01-14 11:57:00.393038\"], [\"updated_at\", \"2016-01-14 11:57:00.393038\"]]\u003cbr\u003e  SQL (0.3ms)  INSERT INTO \"addresses\" (\"street_address_1\", \"street_address_2\", \"city\", \"state\", \"zipcode\", \"address_type\", \"person_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [[\"street_address_1\", \"33 West 26\"], [\"street_address_2\", \"Floor 2\"], [\"city\", \"NYC\"], [\"state\", \"NY\"], [\"zipcode\", \"10004\"], [\"address_type\", \"work1\"], [\"person_id\", 3], [\"created_at\", \"2016-01-14 11:57:00.403152\"], [\"updated_at\", \"2016-01-14 11:57:00.403152\"]]\u003cbr\u003e  SQL (0.1ms)  INSERT INTO \"addresses\" (\"street_address_1\", \"street_address_2\", \"city\", \"state\", \"zipcode\", \"address_type\", \"person_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [[\"street_address_1\", \"11 Broadway\"], [\"street_address_2\", \"Suite 260\"], [\"city\", \"NYC\"], [\"state\", \"NY\"], [\"zipcode\", \"10004\"], [\"address_type\", \"work2\"], [\"person_id\", 3], [\"created_at\", \"2016-01-14 11:57:00.405973\"], [\"updated_at\", \"2016-01-14 11:57:00.405973\"]]\u003cbr\u003e   (0.6ms)  commit transaction\u003cbr\u003e =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is a bit hard to read, but you'll notice that we have a method called \u003ccode\u003eaddresses_attributes=\u003c/code\u003e. You didn't write that; \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e wrote that. Then when we called \u003ccode\u003enew_person.save\u003c/code\u003e it created both the \u003ccode\u003ePerson\u003c/code\u003e object and the two \u003ccode\u003eAddress\u003c/code\u003e objects. Boom!\u003c/p\u003e  \u003cp\u003eNow, we just need to get our form to create a \u003ccode\u003eparams\u003c/code\u003e hash like that. Easy Peasy. We are going to use \u003ccode\u003efields_for\u003c/code\u003e to make this happen.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/views/people/new.html.erb\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for @person do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label :name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :name %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= f.fields_for :addresses do |addr| %\u0026gt;\u003cbr\u003e    \u0026lt;%= addr.label :street_address_1 %\u0026gt;\u003cbr\u003e    \u0026lt;%= addr.text_field :street_address_1 %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;%= addr.label :street_address_2 %\u0026gt;\u003cbr\u003e    \u0026lt;%= addr.text_field :street_address_2 %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;%= addr.label :city %\u0026gt;\u003cbr\u003e    \u0026lt;%= addr.text_field :city %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;%= addr.label :state %\u0026gt;\u003cbr\u003e    \u0026lt;%= addr.text_field :state %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;%= addr.label :zipcode %\u0026gt;\u003cbr\u003e    \u0026lt;%= addr.text_field :zipcode %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;%= addr.label :address_type %\u0026gt;\u003cbr\u003e    \u0026lt;%= addr.text_field :address_type %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;% end %\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003efields_for\u003c/code\u003e line gives something nice and English-y. In that block are the fields for the addresses. Love Rails.\u003c/p\u003e  \u003cp\u003eLoad up the page, and see the majestic beauty of what you and Rails have written together. What?! Nothing is there.\u003c/p\u003e  \u003ch2\u003eCreating stubs\u003c/h2\u003e  \u003cp\u003eWe're asking Rails to generate \u003ccode\u003efields_for\u003c/code\u003e each of the \u003ccode\u003ePerson\u003c/code\u003e's addresses. However, when we first create a \u003ccode\u003ePerson\u003c/code\u003e, they have no addresses. Just like \u003ccode\u003ef.text_field :name\u003c/code\u003e will have nothing in the text field if there is no name, \u003ccode\u003ef.fields_for :addresses\u003c/code\u003e will have no address fields if there are no addresses.\u003c/p\u003e  \u003cp\u003eWe'll take the most straightforward way out: when we create a \u003ccode\u003ePerson\u003c/code\u003e in the \u003ccode\u003ePeopleController\u003c/code\u003e, we'll add two empty addresses to fill out. The final controller looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass PeopleController \u0026lt; ApplicationController\u003cbr\u003e  def new\u003cbr\u003e    @person = Person.new\u003cbr\u003e    @person.addresses.build(address_type: 'work')\u003cbr\u003e    @person.addresses.build(address_type: 'home')\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    person = Person.create(person_params)\u003cbr\u003e    redirect_to people_path\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def index\u003cbr\u003e    @people = Person.all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def person_params\u003cbr\u003e    params.require(:person).permit(:name)\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, refresh the page, and you'll see two lovely address forms. Try to hit submit, and it isn't going to work. One last hurdle. We have new \u003ccode\u003eparams\u003c/code\u003e keys, which means we need to modify our \u003ccode\u003eperson_params\u003c/code\u003e method to accept them. Your \u003ccode\u003eperson_params\u003c/code\u003e method should now look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef person_params\u003cbr\u003e  params.require(:person).permit(\u003cbr\u003e    :name,\u003cbr\u003e    addresses_attributes: [\u003cbr\u003e      :street_address_1,\u003cbr\u003e      :street_address_2,\u003cbr\u003e      :city,\u003cbr\u003e      :state,\u003cbr\u003e      :zipcode,\u003cbr\u003e      :address_type\u003cbr\u003e    ]\u003cbr\u003e  )\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eAvoiding duplicates\u003c/h2\u003e  \u003cp\u003eOne situation we can't use \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e is when we want to avoid duplicates of the row we're creating.\u003c/p\u003e  \u003cp\u003eIn our address book app, perhaps it's reasonable to have duplicate address rows. For instance, both Jerry and Tim live on 22 Elm Street, so there are two address rows for 22 Elm Street. That's fine for those purposes.\u003c/p\u003e  \u003cp\u003eBut say we have a database of songs and artists. We would want \u003ccode\u003eArtist\u003c/code\u003e rows to be unique, so that \u003ccode\u003eArtist.find_by(name: 'Tori Amos').songs\u003c/code\u003e returns what we'd expect. If we want to be able to create artists \u003cem\u003ewhile\u003c/em\u003e creating songs, we'll need to use \u003ccode\u003efind_or_create_by\u003c/code\u003e in our \u003ccode\u003eartist_attributes=\u003c/code\u003e method:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/song.rb\u003cbr\u003e\u003cbr\u003eclass Song \u0026lt; ActiveRecord::Base\u003cbr\u003e  def artist_attributes=(artist)\u003cbr\u003e    self.artist = Artist.find_or_create_by(name: artist[:name])\u003cbr\u003e    self.artist.update(artist)\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis looks up existing artists by name. If no matching artist is found, one is created. Then we update the artist's attributes with the ones we were given. We could also choose to do something else if we didn't want to allow bulk assigning of an artist's information through a song.\u003c/p\u003e  \u003cp\u003eNote that \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e and setter methods (e.g., \u003ccode\u003eartist_attributes=\u003c/code\u003e) aren't necessarily mutually exclusive. It's important to evaluate the needs of your specific use case and choose the approach that makes the most sense. Keep in mind, too, that setter methods are useful for more than just avoiding duplicates –– that's just one domain where they come in handy.\u003c/p\u003e  \u003ch2\u003eVideo Review\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=zZn0xWry6TE\"\u003eNested Forms\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g799860cd2f648ee17ee006843192f749"},{"id":220537,"title":"Nested Forms Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"basic-nested-forms-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/basic-nested-forms-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/basic-nested-forms-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/basic-nested-forms-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eConstruct a nested params hash with data about the primary object and a belongs to and has many association.\u003c/li\u003e\n\u003cli\u003eName form inputs correctly to create a nested params hash with belongs to and has many associated data.\u003c/li\u003e\n\u003cli\u003eDefine a conventional association writer for the primary model to properly instantiate associations based on the nested params association data.\u003c/li\u003e\n\u003cli\u003eDefine a custom association writer for the primary model to properly instantiate associations with custom logic (like unique by name) on the nested params association data.\u003c/li\u003e\n\u003cli\u003eUse fields_for to generate the association fields.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eData Model: Recipe with ingredients\u003c/h2\u003e\n\n\u003cp\u003eThe first data model we're going to be working with today is a recipe with ingredients.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecipe\n\n\u003cul\u003e\n\u003cli\u003ehas many ingredients\u003c/li\u003e\n\u003cli\u003etitle:string\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eIngredient\n\n\u003cul\u003e\n\u003cli\u003ebelongs to a recipe\u003c/li\u003e\n\u003cli\u003eingredient.name: string\u003c/li\u003e\n\u003cli\u003eingredient.quantity: string\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe models and show routes and associations have been set up for you.\u003c/p\u003e\n\n\u003ch3\u003eInstructions\u003c/h3\u003e\n\n\u003cp\u003eBuild a recipe form that accepts two ingredients! It should automatically create the new \u003ccode\u003eIngredient\u003c/code\u003e objects.\u003c/p\u003e","exportId":"gb7fc62d8e177dfdccd504fb47730edb9"},{"id":220544,"title":"Displaying Has Many Through In Rails","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"displaying-has-many-through-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/displaying-has-many-through-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-has-many-through-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-has-many-through-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eConstruct a bi-directional has_many through.\u003c/li\u003e \u003cli\u003eQuery for associations via the belongs\u003cem\u003eto, has\u003c/em\u003emany, and has_many through associations.\u003c/li\u003e \u003cli\u003eIterate over associations in a view and display associated data for a primary instance.\u003c/li\u003e \u003cli\u003eIdentify the join model in a has_many through.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eWe've seen how we can use simple associations to display data to our users in Rails, but what about more complex relationships? Lucky for us, the interface for displaying this type of data is just as easy thanks to Active Record and \u003ccode\u003ehas_many, through\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eLesson\u003c/h2\u003e  \u003ch3\u003ehas_many, through\u003c/h3\u003e  \u003cp\u003eLet's say you're making a blog and want to give users the ability to sign up and comment on your posts. What's the relationship between a post and a comment? If you said, \"A comment belongs to a post, and a post has many comments,\" give yourself a pat on the back!\u003c/p\u003e  \u003cp\u003eWhat about the relationship between a user and a comment? Again, a user has many comments, and a comment belongs to the user. So far, this is pretty straightforward.\u003c/p\u003e  \u003cp\u003eThings get slightly more complicated when we talk about the relationship between a user and the posts that the user has commented on. How would you describe that relationship? Well, a user obviously can comment on many posts, and a post has comments from many users. Yep, this is a many to many relationship. We can set up a many-to-many relationship using a join table. In this case, \u003ccode\u003ecomments\u003c/code\u003e will act as our join table. Any table that contains two foreign keys can be thought of as a join table. A row in our \u003ccode\u003ecomments\u003c/code\u003e table will look something like this:\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\n\u003ctr\u003e     \u003ctd\u003eid\u003c/td\u003e     \u003ctd\u003econtent\u003c/td\u003e     \u003ctd\u003epost_id\u003c/td\u003e     \u003ctd\u003euser_id\u003c/td\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003e1\u003c/td\u003e     \u003ctd\u003e\"I loved this post!\"\u003c/td\u003e     \u003ctd\u003e5\u003c/td\u003e     \u003ctd\u003e3\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eFor this instance, we know that the \u003ccode\u003eComment\u003c/code\u003e with an ID of \u003ccode\u003e1\u003c/code\u003e was created by the \u003ccode\u003eUser\u003c/code\u003e with an ID of \u003ccode\u003e3\u003c/code\u003e for the \u003ccode\u003ePost\u003c/code\u003e with an ID of \u003ccode\u003e5\u003c/code\u003e. We have all of the information we need to determine all of the posts that a particular user has commented on as well as all of the users who commented on any post. When we're done, we'll be able to simply call \u003ccode\u003e@user.posts\u003c/code\u003e to get a collection of all of those posts.\u003c/p\u003e  \u003cp\u003eLet's set this up. First, we'll need migrations for \u003ccode\u003ecomments\u003c/code\u003e, \u003ccode\u003eposts\u003c/code\u003e, and \u003ccode\u003eusers\u003c/code\u003e tables. We've included migrations and models in this repo, so you can follow along.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# db/migrate/xxx_create_posts\u003cbr\u003e\u003cbr\u003eclass CreatePosts \u0026lt; ActiveRecord::Migration\u003cbr\u003e  def change\u003cbr\u003e    create_table :posts do |t|\u003cbr\u003e      t.string :title\u003cbr\u003e      t.string :content\u003cbr\u003e      t.timestamps null: false\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# db/migrate/xxx_create_users\u003cbr\u003e\u003cbr\u003eclass CreateUsers \u0026lt; ActiveRecord::Migration\u003cbr\u003e   def change\u003cbr\u003e    create_table :users do |t|\u003cbr\u003e      t.string :username\u003cbr\u003e      t.string :email\u003cbr\u003e      t.timestamps null: false\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# db/migrate/xxx_create_comments\u003cbr\u003e\u003cbr\u003eclass CreateComments \u0026lt; ActiveRecord::Migration\u003cbr\u003e  def change\u003cbr\u003e    create_table :comments do |t|\u003cbr\u003e      t.string :content\u003cbr\u003e      t.belongs_to :user\u003cbr\u003e      t.belongs_to :post\u003cbr\u003e      t.timestamps null: false\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn our models, we have the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/post.rb\u003cbr\u003e\u003cbr\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :comments\u003cbr\u003e  has_many :users, through: :comments\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# app/models/user.rb\u003cbr\u003e\u003cbr\u003eclass User \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :comments\u003cbr\u003e  has_many :posts, through: :comments\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# app/models/comment.rb\u003cbr\u003e\u003cbr\u003eclass Comment \u0026lt; ActiveRecord::Base\u003cbr\u003e  belongs_to :user\u003cbr\u003e  belongs_to :post\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we can't just declare that our \u003ccode\u003eUser\u003c/code\u003e \u003ccode\u003ehas_many :posts\u003c/code\u003e because our \u003ccode\u003eposts\u003c/code\u003e table doesn't have a foreign key called \u003ccode\u003euser_id\u003c/code\u003e. Instead, we tell Active Record to look through the \u003ccode\u003ecomments\u003c/code\u003e table to figure out this association by declaring that our \u003ccode\u003eUser\u003c/code\u003e \u003ccode\u003ehas_many :posts, through: :comments\u003c/code\u003e. Now, instances of our \u003ccode\u003eUser\u003c/code\u003e model respond to a method called \u003ccode\u003eposts\u003c/code\u003e. This will return a collection of posts that share a comment with the user.\u003c/p\u003e  \u003ch3\u003eDisplaying Comments on Our Posts\u003c/h3\u003e  \u003cp\u003eNow that our association is set up, let's display some data. First, let's set up our \u003ccode\u003ePost#show\u003c/code\u003e page to display all of the comments on a particular post. We'll include the username of the user who created the comment as well as a link to their show page.\u003c/p\u003e  \u003cp\u003eIn \u003ccode\u003eapp/controllers/posts_controller.rb\u003c/code\u003e, define a \u003ccode\u003eshow\u003c/code\u003e action that finds a particular post to make it available for display.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003eclass PostsController \u0026lt; ApplicationController\u003cbr\u003e\u003cbr\u003e  def show\u003cbr\u003e    @post = Post.find(params[:id])\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn our \u003ccode\u003ePost#show\u003c/code\u003e page, we'll display the title and content information for the post as well as the information for each comment associated with the post.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/views/posts/show.html.erb\u003cbr\u003e\u003cbr\u003e\u0026lt;h2\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h2\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;\u003cbr\u003e  Content: \u0026lt;%= @post.content %\u0026gt;\u003cbr\u003e\u0026lt;/p\u0026gt;\u003cbr\u003eComments:\u003cbr\u003e  \u0026lt;% @post.comments.each do |comment| %\u0026gt;\u003cbr\u003e    \u0026lt;%= link_to comment.user.username, user_path(comment.user) %\u0026gt; said\u003cbr\u003e    \u0026lt;%= comment.content %\u0026gt;\u003cbr\u003e  \u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is the same as we've done before –– we're simply looking at data associated with posts and comments. Calling \u003ccode\u003ecomment.user\u003c/code\u003e returns for us the \u003ccode\u003eUser\u003c/code\u003e object associated with that comment. We can then call any method that our user responds to, such as \u003ccode\u003eusername\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eAdding Posts to Our Users\u003c/h2\u003e  \u003cp\u003eLet's say that on our \u003ccode\u003eUser#show\u003c/code\u003e page we want our users to see a list of all of the posts that they've commented on. What would that look like?\u003c/p\u003e  \u003cp\u003eBecause we've set up a join model, the interface will look almost identical. We can simply call the \u003ccode\u003eposts\u003c/code\u003e method on our user and iterate through.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/views/users/show.html.erb\u003cbr\u003e\u003cbr\u003e\u0026lt;h2\u0026gt;\u0026lt;%= @user.username %\u0026gt; \u0026lt;/h2\u0026gt; has commented on the following posts:\u003cbr\u003e\u003cbr\u003e\u0026lt;% @user.posts.each do |post| %\u0026gt;\u003cbr\u003e  \u0026lt;%= link_to post.title, post_path(post) %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eDisplaying data via a \u003ccode\u003ehas_many, through\u003c/code\u003e relationship looks identical to displaying data through a normal relationship. That's the beauty of abstraction –– all of the details about how our models are associated with each other get abstracted away, and we can focus simply on the presentation.\u003c/p\u003e","exportId":"gaa578f4c7c47d18f241ff6cfb73cc5d1"},{"id":220549,"title":"Displaying Has Many Through In Rails Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"displaying-has-many-through-rails-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/displaying-has-many-through-rails-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-has-many-through-rails-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-has-many-through-rails-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eConstruct a bi-directional has many through.\u003c/li\u003e\n\u003cli\u003eQuery for associations via the belongs\u003cem\u003eto, has\u003c/em\u003emany, and has_many through associations.\u003c/li\u003e\n\u003cli\u003eIterate over associations in a view and display associated data for a primary instance.\u003c/li\u003e\n\u003cli\u003eIdentify the join model in a has many through.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eThe poor doctors at Seattle Grace Hospital are so overworked that they're having trouble keeping track of their patients' appointments! Let's help them (and practice our associations) by building some associations and displaying the data.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://57.media.tumblr.com/cbcd8f29790e720e4cea60f44cb2c6b9/tumblr_mrbut3kX1g1r6kab2o1_500.gif\" alt=\"greys-anatomy\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFirst, fork and clone this lab.\u003c/p\u003e\n\n\u003cp\u003eYou'll need to create all of the migrations, models, controllers, and views for this lab.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE\u003c/em\u003e\u003c/strong\u003e: As with much of our Rails curriculum, remember to always use the \u003ccode\u003e--no-test-framework\u003c/code\u003e flag when you generate models, controllers, etc. That way, the Rails generators will not create additional tests on top of the test suite that already comes with the lesson. E.g., \u003ccode\u003erails g model User username:string email:string --no-test-framework\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAdditional note about routes and generators\u003c/em\u003e\u003c/strong\u003e: We've written the routes for you in the \u003ccode\u003econfig/routes.rb\u003c/code\u003e file, so be sure to use the \u003ccode\u003e--skip-routes\u003c/code\u003e flag. This prevents the Rails generators from adding any unnecessary routes. You can use however many flags you need in the generators, so something like \u003ccode\u003erails g model Post title:string content:text --no-test-framework --skip-routes\u003c/code\u003e is perfectly valid. (If you want to see what other flags and options are available, you can run commands such as \u003ccode\u003erails g --help\u003c/code\u003e and \u003ccode\u003erails g model --help\u003c/code\u003e.)\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eCreate migrations and models for doctor, patient, and appointment. Because this is for a hospital, a doctor can have many patients, but a patient can also have many doctors. Patients and doctors both have many appointments. Our \u003ccode\u003eappointments\u003c/code\u003e table should have a column called \u003ccode\u003eappointment_datetime\u003c/code\u003e to represent the date and time the appointment will take place. (When you display this datetime, make sure it's in a human readable format. The tests will be expecting \"January 12, 2016 at 3:00\".)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a \u003ccode\u003eDoctor#show\u003c/code\u003e page that displays the doctor's name, department, and appointments, with each appointment's date, time, and patient name (linking to the patient's show page).\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a \u003ccode\u003ePatient#show\u003c/code\u003e page that lists the date and time for each of their appointments and links to the corresponding doctor's show page.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a \u003ccode\u003ePatient#index\u003c/code\u003e page that displays a link to each patient's show page and the total number of appointments they have.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate an \u003ccode\u003eAppointment#show\u003c/code\u003e page that shows the date, time, patient, and doctor for that particular appointment. Note that there should NOT be an \u003ccode\u003eAppointment#index\u003c/code\u003e page –– we don't want to have all of the appointments on display for anyone to see.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWe've provided a seed file so you can have some data to play around with –– run \u003ccode\u003erake db:seed\u003c/code\u003e once your migrations and models are complete.\u003c/p\u003e","exportId":"gfcac0450979a1b60c6339ed6dff4c0a3"},{"id":220556,"title":"Has Many Through Forms in Rails","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"has-many-through-forms-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/has-many-through-forms-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/has-many-through-forms-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/has-many-through-forms-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eConstruct a bi-directional has many through.\u003c/li\u003e \u003cli\u003eIdentify the join model in a has many through.\u003c/li\u003e \u003cli\u003eConstruct a nested params hash with data about the primary object and a has many through association.\u003c/li\u003e \u003cli\u003eUse the conventional key names for associated data (association_attributes).\u003c/li\u003e \u003cli\u003eName form inputs correctly to create a nested params hash with has many through association data.\u003c/li\u003e \u003cli\u003eDefine a conventional association writer for the primary model to properly instantiate associations based on the nested params association data.\u003c/li\u003e \u003cli\u003eDefine a custom association writer for the primary model to properly instantiate associations with custom logic (like unique by name) on the nested params association data.\u003c/li\u003e \u003cli\u003eUse fields_for to generate the association fields.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eWe've looked at the different ways we can interact with our associated models through nested forms as well as displaying data from more complex associations. In this lesson, we'll look at some different ways we can create data from our complex associations to make for a great user experience.\u003c/p\u003e  \u003ch2\u003eJoin Model Forms\u003c/h2\u003e  \u003cp\u003eSometimes, it may be appropriate for a user to create an instance of our join model directly. Think back to the hospital domain from our previous lab. It makes perfect sense that a user would go to \u003ccode\u003eappointments/new\u003c/code\u003e and fill out a form to create a new appointment.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for @appointment do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.datetime_select :appointment_datetime %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.collection_select :doctor, Doctor.all, :id, :name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.collection_select :patient, Patient.all, :id, :name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this example, a user is filling out a form, entering the date and time they'd like to come, and choosing their doctor and their name from a dropdown. We're assigning these properties directly to the appointment as it's created.\u003c/p\u003e  \u003cp\u003eOther times, we need to be more abstract. Let's return to our blog example, but this time we'll say that a post can have many categories and categories can have many posts. For this, we'll need a join table –– let's call it \u003ccode\u003epost_categories\u003c/code\u003e. If our user wants to associate a post with a category, it doesn't make sense for them to go to \u003ccode\u003e/post_categories/new\u003c/code\u003e and fill out a \"new post category form.\" That's confusing! Let's look at a more abstract way that we can do this thanks to the magic of Active Record.\u003c/p\u003e  \u003ch2\u003eSetting up our Posts and Categories\u003c/h2\u003e \u003cpre\u003e\u003ccode\u003e# app/models/post.rb\u003cbr\u003e\u003cbr\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :post_categories\u003cbr\u003e  has_many :categories, through: :post_categories\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# app/models/category.rb\u003cbr\u003e\u003cbr\u003eclass Category \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :post_categories\u003cbr\u003e  has_many :posts, through: :post_categories\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# app/models/post_category.rb\u003cbr\u003e\u003cbr\u003eclass PostCategory \u0026lt; ActiveRecord::Base\u003cbr\u003e  belongs_to :post\u003cbr\u003e  belongs_to :category\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, let's make it so that our user can assign categories to a post when the post is created. We did this in a previous example without a join table. Our post was directly related to its category, and the \u003ccode\u003eposts\u003c/code\u003e table had the foreign key for its category. Because of this, instances of our \u003ccode\u003ePost\u003c/code\u003e class responded to a method called \u003ccode\u003ecategory_ids=\u003c/code\u003e. We called upon this method from our form helpers to build out a nested form.\u003c/p\u003e  \u003cp\u003eLuckily, \u003ccode\u003ehas_many, through\u003c/code\u003e functions exactly the same as a \u003ccode\u003ehas_many\u003c/code\u003e relationship. Instances of our \u003ccode\u003ePost\u003c/code\u003e class still respond to a method called \u003ccode\u003ecategory_ids=\u003c/code\u003e. We'll use a helper method very similar to the \u003ccode\u003ecollection_select\u003c/code\u003e we used previously.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/views/posts/_form.html.erb\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label \"Title\" %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label \"Content\" %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_area :content %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.collection_check_boxes :category_ids, Category.all, :id, :name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will create a checkbox field for each \u003ccode\u003eCategory\u003c/code\u003e in our database. The HTML generated looks something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;input\u003cbr\u003e  type=\"checkbox\"\u003cbr\u003e  value=\"1\"\u003cbr\u003e  name=\"post[category_ids][]\"\u003cbr\u003e  id=\"post_category_ids_1\"\u003cbr\u003e/\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn our controller, we've setup our \u003ccode\u003epost_params\u003c/code\u003e to expect a key of \u003ccode\u003e:category_ids\u003c/code\u003e with a value of an array.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/post_controller.rb\u003cbr\u003e\u003cbr\u003eclass PostsController \u0026lt; ApplicationController\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def post_params\u003cbr\u003e    params.require(:post).permit(:title, :content, category_ids:[])\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter submitting the form, we end up with \u003ccode\u003epost_params\u003c/code\u003e that look something like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\"title\"=\u0026gt;\"New Post\", \"content\"=\u0026gt;\"Some great content!!\", \"category_ids\"=\u0026gt;[\"2\", \"3\", \"\"]} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's check out the SQL that fires from creating our new post.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef create\u003cbr\u003e  post = Post.create(post_params)\u003cbr\u003e  redirect_to post\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO \"posts\" (\"title\", \"content\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"title\", \"New Post\"], [\"content\", \"Some great content!!\"], [\"created_at\", \"2016-01-15 21:25:59.963430\"], [\"updated_at\", \"2016-01-15 21:25:59.963430\"]]\u003cbr\u003e\u003cbr\u003eINSERT INTO \"post_categories\" (\"category_id\", \"post_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"category_id\", 2], [\"post_id\", 6], [\"created_at\", \"2016-01-15 21:25:59.966654\"], [\"updated_at\", \"2016-01-15 21:25:59.966654\"]]\u003cbr\u003e\u003cbr\u003eINSERT INTO \"post_categories\" (\"category_id\", \"post_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"category_id\", 3], [\"post_id\", 6], [\"created_at\", \"2016-01-15 21:25:59.968301\"], [\"updated_at\", \"2016-01-15 21:25:59.968301\"]] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFirst, we're creating a new row in our \u003ccode\u003eposts\u003c/code\u003e table with \u003ccode\u003etitle\u003c/code\u003e and \u003ccode\u003econtent\u003c/code\u003e. Next, we create a row in our \u003ccode\u003epost_categories\u003c/code\u003e table for each ID number that was stored in our \u003ccode\u003ecategory_ids\u003c/code\u003e array. This functions just like it did with a \u003ccode\u003ehas_many\u003c/code\u003e relationship, but, instead of creating a new record in our \u003ccode\u003ecategories\u003c/code\u003e table, Active Record is creating two new rows in our \u003ccode\u003epost_categories\u003c/code\u003e table. This means that we can interact with our higher-level models directly without having to think too much at all about our join table - ActiveRecord will manage that relationship for us behind the scenes.\u003c/p\u003e  \u003ch2\u003eCreating New Categories\u003c/h2\u003e  \u003cp\u003eWe can now associate categories with our posts, but what about creating new categories? If I'm posting about baby elephants and no one has created the category \"Super Cute!\" yet, I want to be able to create it at the same time as my post. Again, this will be very similar to the way we've done things before.\u003c/p\u003e  \u003cp\u003eFirst, we want a text field to enter the name of our new category. The value of the name should be nested under our \u003ccode\u003epost_params\u003c/code\u003e, so we don't have to add too much code to our controller. We can use the \u003ccode\u003efields_for\u003c/code\u003e helper to do this very easily.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/views/posts/_form.html.erb\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label \"Title\" %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label \"Content\" %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_area :content %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.collection_check_boxes :category_ids, Category.all, :id, :name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.fields_for :categories, post.categories.build do |categories_fields| %\u0026gt;\u003cbr\u003e    \u0026lt;%= categories_fields.text_field :name %\u0026gt;\u003cbr\u003e  \u0026lt;% end %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003efields_for\u003c/code\u003e helper takes two arguments: the associated model that we're creating and an object to wrap around. In this case, we've passed in the \u003ccode\u003e:categories\u003c/code\u003e association and built an empty category associated with the post.\u003c/p\u003e  \u003cp\u003eLet's look at the html that this generated for us.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;input\u003cbr\u003e  type=\"text\"\u003cbr\u003e  name=\"post[categories_attributes][0][name]\"\u003cbr\u003e  id=\"post_categories_attributes_0_name\"\u003cbr\u003e/\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur params hash will now have a key of \u003ccode\u003e:categories_attributes\u003c/code\u003e nested under the key of \u003ccode\u003epost\u003c/code\u003e. Let's add that to our strong params and tell it to expect a key of \u003ccode\u003ename\u003c/code\u003e inside for the category's name.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/post_controller.rb\u003cbr\u003e\u003cbr\u003eclass PostsController \u0026lt; ApplicationController\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def post_params\u003cbr\u003e    params.require(:post).permit(:title, :content, category_ids:[], categories_attributes: [:name])\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, when we do mass assignment, our \u003ccode\u003ePost\u003c/code\u003e model will call a method called \u003ccode\u003ecategories_attributes=\u003c/code\u003e. Let's add that method to our model using the \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e macro.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :post_categories\u003cbr\u003e  has_many :categories, through: :post_categories\u003cbr\u003e  accepts_nested_attributes_for :categories\u003cbr\u003e\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eVoila! Just like when our models were directly related, we can now create categories that are automatically associated with our new post. Looking at the SQL that gets generated, we can see that it's creating new instances of \u003ccode\u003ePostCategory\u003c/code\u003e without us ever having to interact with them.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e(0.1ms)  begin transaction\u003cbr\u003e  SQL (0.4ms)  INSERT INTO \"posts\" (\"title\", \"content\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"title\", \"A New Post!\"], [\"content\", \"It was the best of times, it was the worst of times\"], [\"created_at\", \"2016-01-15 22:08:37.271367\"], [\"updated_at\", \"2016-01-15 22:08:37.271367\"]]\u003cbr\u003e  SQL (0.1ms)  INSERT INTO \"categories\" (\"name\", \"created_at\", \"updated_at\") VALUES (?, ?, ?)  [[\"name\", \"Really Neat!\"], [\"created_at\", \"2016-01-15 22:08:37.277421\"], [\"updated_at\", \"2016-01-15 22:08:37.277421\"]]\u003cbr\u003e  SQL (0.3ms)  INSERT INTO \"post_categories\" (\"post_id\", \"category_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"post_id\", 9], [\"category_id\", 5], [\"created_at\", \"2016-01-15 22:08:37.279564\"], [\"updated_at\", \"2016-01-15 22:08:37.279564\"]]\u003cbr\u003e   (1.0ms)  commit transaction \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eStill, there's a problem. We're creating a new category each time, regardless of whether or not it exists. It will look pretty weird if three people type in \"Super Cute!\" and we get three different categories. In this case, we need to customize the way our category is created. Luckily, we can easily do this by creating our own \u003ccode\u003ecategories_attributes=\u003c/code\u003e method.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :post_categories\u003cbr\u003e  has_many :categories, through: :post_categories\u003cbr\u003e  # accepts_nested_attributes_for :categories\u003cbr\u003e\u003cbr\u003e  def categories_attributes=(category_attributes)\u003cbr\u003e    category_attributes.values.each do |category_attribute|\u003cbr\u003e      category = Category.find_or_create_by(category_attribute)\u003cbr\u003e      self.categories \u0026lt;\u0026lt; category\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we're only creating a new category if it doesn't already exist with the current name. We're also using a cool method called \u003ccode\u003ecategories\u0026lt;\u0026lt;\u003c/code\u003e. What's great about this is you can mentally think of it as two steps. First, we call \u003ccode\u003eself.categories\u003c/code\u003e, which returns an array of \u003ccode\u003eCategory\u003c/code\u003e objects, and then we call the shovel (\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e) method to add our newly found or created \u003ccode\u003eCategory\u003c/code\u003e object to the array. We could imagine later calling \u003ccode\u003esave\u003c/code\u003e on the \u003ccode\u003ePost\u003c/code\u003e object and this then creating the \u003ccode\u003epost_categories\u003c/code\u003e join record for us. In reality, this is syntactic sugar for the \u003ccode\u003ecategories\u0026lt;\u0026lt;\u003c/code\u003e method. That's the actual method name, and behind the scenes it will create the join record for us. It's one of the methods dynamically created for us whenever we use a \u003ccode\u003ehas_many\u003c/code\u003e association. The end result is this method doing exactly what Active Record was doing for us before; we're just customizing the behavior a little bit.\u003c/p\u003e  \u003ch2\u003eConclusion/So What?\u003c/h2\u003e  \u003cp\u003eAs you can see, it doesn't really matter how complex our associations are –– Active Record is really good at managing that complexity for us. We can always drop down a level of abstraction if needed to customize the way our application behaves.\u003c/p\u003e","exportId":"gfcb7964edf57b6fbad11e49107791e31"},{"id":220562,"title":"Has Many Through Forms in Rails Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"has-many-through-forms-rails-labs\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/has-many-through-forms-rails-labs/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/has-many-through-forms-rails-labs\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/has-many-through-forms-rails-labs/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eWe've looked at setting up the associations behind posts with comments, categories, and users. Now, let's actually give our users the ability to create new comments, users, and categories! For this lab, your models are already stubbed out, but you may need to update them to make your forms work properly.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eConstruct a bi-directional has many through.\u003c/li\u003e \u003cli\u003eIdentify the join model in a has many through.\u003c/li\u003e \u003cli\u003eConstruct a nested params hash with data about the primary object and a has many through association.\u003c/li\u003e \u003cli\u003eUse the conventional key names for associated data (association_attributes).\u003c/li\u003e \u003cli\u003eName form inputs correctly to create a nested params hash with has many through association data.\u003c/li\u003e \u003cli\u003eDefine a conventional association writer for the primary model to properly instantiate associations based on the nested params association data.\u003c/li\u003e \u003cli\u003eDefine a custom association writer for the primary model to properly instantiate associations with custom logic (like unique by name) on the nested params association data.\u003c/li\u003e \u003cli\u003eUse fields_for to generate the association fields.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eCreate a form at \u003ccode\u003eposts#new\u003c/code\u003e to create a new post. The form should include check boxes for us to select categories as well as a text field to create a new category. You should do this with a nested form so that our controller stays thin. Also, typing in a \u003ccode\u003eCategory\u003c/code\u003e name that already exists should not create a new category. Instead, if we type in a category that already exists, we should select it from the database and associate the post we've created with the existing category.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\n\u003cp\u003eCreate a \u003ccode\u003eposts#show\u003c/code\u003e page to display the following:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThe title, categories, and content of the post.\u003c/li\u003e \u003cli\u003eAll of the comments associated with the post.\u003c/li\u003e \u003cli\u003eA list of all the unique users who have commented on the post. A user's name should only show up once in this section, even if they've commented multiple times.\u003c/li\u003e \u003cli\u003eA form to add a new comment. The form should have a drop-down menu to select a user (we'll change this in future lessons to automatically associate the comment with a logged-in user). We should also be able to create a new user here and automatically associate it with the post. To associate a new comment with a post, you'll have to use a \u003cem\u003e[hidden field](\u003ca href=\"https://apidock.com/rails/ActionView/Helpers/FormHelper/hidden\"\u003ehttps://apidock.com/rails/ActionView/Helpers/FormHelper/hidden\u003c/a\u003e\u003c/em\u003efield)_:\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ol\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= f.hidden_field :post_id, value: @post.id %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003col\u003e \u003cli\u003e\u003cp\u003eCreate a \u003ccode\u003eusers#show\u003c/code\u003e page that links to all of the posts a user has commented on.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eCreate a \u003ccode\u003ecategories#show\u003c/code\u003e page that links to all of the posts associated with a given category.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eHints\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eWhen creating new comments, we should only create a new user if they filled in that input. \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e has a \u003ccode\u003ereject_if\u003c/code\u003e option that you can configure to only create new records if all the fields aren't blank.\u003c/li\u003e \u003cli\u003eAlso, the select box that we use for the users needs to have a blank option –– check out the \u003ccode\u003einclude_blank\u003c/code\u003e option for \u003ccode\u003ecollection_select\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html\"\u003eAccepts Nested Attributes For\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://apidock.com/rails/ActionView/Helpers/FormOptionsHelper/collection_select\"\u003eCollection Select\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=k7s2LjVF3YY\"\u003eLab Review\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://apidock.com/rails/ActionView/Helpers/FormHelper/hidden_field\"\u003eAPI Doc: hidden_field\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g40481c0296bf646eb32feee9736815ac"},{"id":220569,"title":"Associations and Validations","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-blog-associations-validations\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-blog-associations-validations/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-blog-associations-validations\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-blog-associations-validations/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eThis is the second lab iteration off of \u003ca href=\"https://github.com/learn-co-curriculum/rails-blog-scaffold/tree/master\"\u003eRails Blog Scaffold\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003e\u003cem\u003eRemember\u003c/em\u003e: when you generate models, controllers, etc., be sure to include the \u003ccode\u003e--no-test-framework\u003c/code\u003e option so that it skips tests (which the labs already have).\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eAdd a column to an existing table.\u003c/li\u003e \u003cli\u003eGenerate models, views, and controllers.\u003c/li\u003e \u003cli\u003eCreate associations between models.\u003c/li\u003e \u003cli\u003eDefine proper routes.\u003c/li\u003e \u003cli\u003eAdd validations.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eMigrations, Associations, and Routes\u003c/h2\u003e  \u003col\u003e \u003cli\u003eChange the migration for \u003ccode\u003eposts\u003c/code\u003e to include \u003ccode\u003econtent\u003c/code\u003e (set \u003ccode\u003econtent\u003c/code\u003e's datatype to \u003ccode\u003etext\u003c/code\u003e to account for character length).\u003c/li\u003e \u003cli\u003eCreate a migration, model, and optionally controller for \u003ccode\u003eUser\u003c/code\u003e and \u003ccode\u003eTag\u003c/code\u003e (via \u003ccode\u003erails generate\u003c/code\u003e). Check out the documentation on \u003ca href=\"http://api.rubyonrails.org/classes/Rails/Generators.html\"\u003egenerators\u003c/a\u003e, and remember to skip adding tests.\u003c/li\u003e \u003cli\u003eIn order to create the appropriate associations between \u003ccode\u003ePost\u003c/code\u003e and \u003ccode\u003eTag\u003c/code\u003e, we need to create a join table as well.\u003c/li\u003e \u003cli\u003eBuild out model associations and migrations.\u003c/li\u003e \u003cli\u003eBe sure to create the appropriate routes. For now, they can be written as \u003ccode\u003eresources\u003c/code\u003e.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ecreate\u003c/code\u003e the database, \u003ccode\u003emigrate\u003c/code\u003e the schema, and \u003ccode\u003eseed\u003c/code\u003e it.\u003c/li\u003e \u003cli\u003eMake the model association tests pass.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eValidations\u003c/h2\u003e  \u003cp\u003eActive Record has handy methods you can place on columns in a table to validate certain attributes, like \u003ccode\u003epresence\u003c/code\u003e, \u003ccode\u003elength\u003c/code\u003e, and \u003ccode\u003euniqueness\u003c/code\u003e. These are called in a model. Check out the \u003ca href=\"http://guides.rubyonrails.org/active_record_validations.html\"\u003edocumentation\u003c/a\u003e to see more.\u003c/p\u003e  \u003cp\u003eLet's add validations to...\u003c/p\u003e  \u003col\u003e \u003cli\u003e\n\u003ccode\u003ePost\u003c/code\u003e for the \u003ccode\u003epresence\u003c/code\u003e of both \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003econtent\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eUser\u003c/code\u003e for the \u003ccode\u003euniqueness\u003c/code\u003e of \u003ccode\u003ename\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eTag\u003c/code\u003e for the \u003ccode\u003euniqueness\u003c/code\u003e of \u003ccode\u003ename\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eActive Record handles errors when validations aren't met via user input on our forms. Take a look at what's happening in the partial \u003ccode\u003e_form.html.erb\u003c/code\u003e for users, which was created when we used Rails's scaffold generator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for(@user) do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;% if @user.errors.any? %\u0026gt;\u003cbr\u003e    \u0026lt;div id=\"error_explanation\"\u0026gt;\u003cbr\u003e      \u0026lt;h2\u0026gt;\u0026lt;%= pluralize(@user.errors.count, \"error\") %\u0026gt; prohibited this user from being saved:\u0026lt;/h2\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;ul\u0026gt;\u003cbr\u003e      \u0026lt;% @user.errors.full_messages.each do |msg| %\u0026gt;\u003cbr\u003e        \u0026lt;li\u0026gt;\u0026lt;%= msg %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;% end %\u0026gt;\u003cbr\u003e      \u0026lt;/ul\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eBuild out the forms for creating a new post\u003c/h2\u003e  \u003cp\u003eYou've got a great post on kittens that was generated via the seed file, but you want to be able to add some tags. Create a form on the posts form page that lists all the tags as checkboxes, allowing a user to select multiple tags.\u003c/p\u003e  \u003cp\u003eCheck out the documentation for the \u003ccode\u003ecollection_check_boxes\u003c/code\u003e form helper \u003ca href=\"http://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-collection_check_boxes\"\u003ehere\u003c/a\u003e and this post on strong params to be able to make the association between Post and Tag via the Post_Tag join model \u003ca href=\"http://stackoverflow.com/questions/16549382/how-to-permit-an-array-with-strong-parameters\"\u003ehere\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eMake the tests in \u003ccode\u003efeatures/tags_for_posts_spec.rb\u003c/code\u003e pass.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cp\u003e\u003ca href=\"http://guides.rubyonrails.org/active_record_validations.html\"\u003eActive Record Validations\u003c/a\u003e\u003c/p\u003e  \u003cp\u003e\u003ca href=\"http://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-collection_check_boxes\"\u003eCheck Boxes\u003c/a\u003e\u003c/p\u003e  \u003cp\u003e\u003ca href=\"http://stackoverflow.com/questions/16549382/how-to-permit-an-array-with-strong-parameters\"\u003eStrong Params Array\u003c/a\u003e\u003c/p\u003e","exportId":"gf05dcfc8bc945bf6963bd4ec5f26eddf"},{"id":220572,"title":"Nested Forms","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-blog-nested-forms\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-blog-nested-forms/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-blog-nested-forms\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-blog-nested-forms/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe're going to build off the previous iteration of our Blog App, where we created new models for \u003ccode\u003eUser\u003c/code\u003e and \u003ccode\u003eTag\u003c/code\u003e (and applicable associations) and wrote validations. We want to clean up our tagging feature. Our ability to add tags to a new post is super useful, but what if, when we're making a new post, we want to add a new tag that isn't in the list? Let's build that out.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE\u003c/em\u003e\u003c/strong\u003e: As with much of our Rails curriculum, remember to always use the \u003ccode\u003e--no-test-framework\u003c/code\u003e flag when you generate models, controllers, etc. That way, the Rails generators will not create additional tests on top of the test suite that already comes with the lesson. E.g., \u003ccode\u003erails g model User username:string email:string --no-test-framework\u003c/code\u003e. However, it is not needed for this lab as we've provided the starter files.\u003c/p\u003e\n\n\u003ch2\u003eTags\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eWe need to change the permitted params in our \u003ccode\u003ePostsController\u003c/code\u003e to accept another attribute, \u003ccode\u003e:tags_attributes\u003c/code\u003e, which contains the tag attributes that we need to create a new tag.\u003c/li\u003e\n\u003cli\u003eWe also need an \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e macro on our \u003ccode\u003ePost\u003c/code\u003e model, which will permit tags to be nested in our new \u003ccode\u003ePost\u003c/code\u003e form.\u003c/li\u003e\n\u003cli\u003eNow we can build a nested form in our \u003ccode\u003ePost\u003c/code\u003e form. Check out the documentation on \u003ca href=\"http://guides.rubyonrails.org/form_helpers.html#nested-forms\"\u003eNested Forms\u003c/a\u003e for help.\u003c/li\u003e\n\u003cli\u003eWe should be able to select previously created tags as well as create a new tag.\u003c/li\u003e\n\u003cli\u003eRemember, because we have a uniqueness validation on the name of tag, we will need to account for that.\u003c/li\u003e\n\u003cli\u003eA user shouldn't have to submit a new tag every time they submit a post.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e  class User \u0026lt; ActiveRecord::Base\u003cbr\u003e    has_many :posts\u003cbr\u003e    accepts_nested_attributes_for :posts, reject_if: proc { |attributes| attributes['title'].blank? }\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003col\u003e\n\u003cli\u003eTo allow a user to create a new tag, the controller action for a new post should instantiate a new tag. Check out the documentation for the \u003ca href=\"http://apidock.com/rails/ActionView/Helpers/FormBuilder/fields_for\"\u003e\u003ccode\u003efields_for\u003c/code\u003e tag\u003c/a\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://edgeguides.rubyonrails.org/action_controller_overview.html#strong-parameters\"\u003eStrong Params\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/form_helpers.html#nested-forms\"\u003eNested Forms\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://apidock.com/rails/ActionView/Helpers/FormBuilder/fields_for\"\u003e\u003ccode\u003efields_for\u003c/code\u003e tag\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/form_helpers.html#preventing-empty-records\"\u003ePreventing Empty Records\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gd29d6399dc99d00ef4e2dd8e0d74c2f8"}]},{"id":24102,"name":"Rails Layouts and Partials","status":"started","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g2d27059948de3d27c0e59098ffbdc186","items":[{"id":220616,"title":"Layouts and Templates","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-layouts-and-templates\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-layouts-and-templates\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-layouts-and-templates/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eThis lesson will show you how to use layouts to achieve a common look and feel between different views in your app.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eAfter this lesson, you'll be able to...\u003c/p\u003e  \u003col\u003e \u003cli\u003eIdentify the default application layout.\u003c/li\u003e \u003cli\u003eYield to view templates from a layout.\u003c/li\u003e \u003cli\u003eSpecify a custom layout in ActionController on a controller level using the \u003ccode\u003elayout\u003c/code\u003e macro and on the action level using the \u003ccode\u003erender :layout =\u0026gt; \"custom\"\u003c/code\u003e option.\u003c/li\u003e \u003cli\u003eUse :layout =\u0026gt; false to shut off the layout and only render the view\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eLife Without Layouts\u003c/h2\u003e  \u003cp\u003eImagine that you're tasked to build an online store app with Rails.\u003c/p\u003e  \u003cp\u003eYou would probably have a few different views in this app, for example:\u003c/p\u003e  \u003col\u003e \u003cli\u003eA list of products\u003c/li\u003e \u003cli\u003eA detail view that shows more info for a selected product\u003c/li\u003e \u003cli\u003eA shopping cart\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eAcross all these views you would want a consistent look. This consistent look perhaps contains something like a logo, navigation links, a search bar, and a footer at the bottom that contains some info about the shop.\u003c/p\u003e  \u003cp\u003eYou start building the list of products, and you end up with an action template that looks something like this. It has a nav component, a list of products, and a footer. It would be the worst online shop ever, but let's keep it simple for now.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/products/index.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;Flatiron Store\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' =\u0026gt; true %\u0026gt;\u003cbr\u003e  \u0026lt;%= javascript_include_tag 'application', 'data-turbolinks-track' =\u0026gt; true %\u0026gt;\u003cbr\u003e  \u0026lt;%= csrf_meta_tags %\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt;\u003cbr\u003e\u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;div class=\"navigation\"\u0026gt;\u003cbr\u003e      \u0026lt;ul\u0026gt;\u003cbr\u003e        \u0026lt;a href=\"/products\"\u0026gt;Products\u0026lt;/a\u0026gt;\u003cbr\u003e        \u0026lt;a href=\"/cart\"\u0026gt;Cart\u0026lt;/a\u0026gt;\u003cbr\u003e      \u0026lt;/ul\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;h1\u0026gt;The Product List\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;ul\u0026gt;\u003cbr\u003e      \u0026lt;% @products.each do |job| %\u0026gt;\u003cbr\u003e        \u0026lt;li\u0026gt;\u0026lt;%= link_to 'Show', job %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;% end %\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;div class=\"footer\"\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;This shop promises the lowest prices in widgets!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGreat, so you have a list of products now! Any shop should have that, shouldn't it? Next, you decide to build the view that will show the product details when customers click on a link for that product.\u003c/p\u003e  \u003cp\u003eYou finish sorting out the view's structure with a nav and footer. You open up \u003ccode\u003eapp/views/products/index.html.erb\u003c/code\u003e, select all of the code, and copy it onto your clipboard. Now you are ready to paste it into your new template and customize it to show product info.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/products/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;Flatiron Store\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' =\u0026gt; true %\u0026gt;\u003cbr\u003e  \u0026lt;%= javascript_include_tag 'application', 'data-turbolinks-track' =\u0026gt; true %\u0026gt;\u003cbr\u003e  \u0026lt;%= csrf_meta_tags %\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt;\u003cbr\u003e\u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;div class=\"navigation\"\u0026gt;\u003cbr\u003e      \u0026lt;ul\u0026gt;\u003cbr\u003e        \u0026lt;a href=\"/products\"\u0026gt;Products\u0026lt;/a\u0026gt;\u003cbr\u003e        \u0026lt;a href=\"/cart\"\u0026gt;Cart\u0026lt;/a\u0026gt;\u003cbr\u003e      \u0026lt;/ul\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;h1\u0026gt;\u0026lt;%= @product.name%\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;p\u0026gt;\u003cbr\u003e      \u0026lt;strong\u0026gt;Category:\u0026lt;/strong\u0026gt;\u003cbr\u003e      \u0026lt;%= @product.category %\u0026gt;\u003cbr\u003e    \u0026lt;/p\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;p\u0026gt;\u003cbr\u003e      \u0026lt;strong\u0026gt;Price:\u0026lt;/strong\u0026gt;\u003cbr\u003e      \u0026lt;%= @product.price %\u0026gt;\u003cbr\u003e    \u0026lt;/p\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;div class=\"footer\"\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;This shop promises the lowest prices in widgets!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou call over your colleagues, all excited that you've managed to get it working so quickly. The designer takes one look and says: \"You know what, the navigation is all wrong. You need to make it use the \u003ccode\u003eorange\u003c/code\u003e class, and also make it pop by using the \u003ccode\u003epop\u003c/code\u003e class.\"\u003c/p\u003e  \u003cp\u003eOh no! You have to go and change it in two files! Imagine having tens or even hundreds of templates like this. Making the same change over and over again would be very time consuming and prone to errors. In other words, it'll be a total drag. Because we've violated the DRY principle, we have to make changes in more than one place. Layouts apply the same principle as methods to generating HTML code.\u003c/p\u003e  \u003ch2\u003eLayouts to the Rescue\u003c/h2\u003e  \u003cp\u003eLuckily, you don't need to copy content from one template file to the next because layouts in Rails are enabled by default. When you generate a new Rails app, it generates a layout for you.\u003c/p\u003e  \u003cp\u003eTo find the generated layout, go and have a look in your Rails app at the following path. When you render a template for an action without specifying a different layout to use, Rails will use the layout found at this location: \u003ccode\u003eapp/views/layouts/application.html.erb\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhen you first generate a Rails app, depending on your version of Rails, the automatically generated layout file will look similar to this. The \u003ccode\u003eapplication.html.erb\u003c/code\u003e file is a very good place to start adding common components like the navigation, search, and footer from the example above.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/layouts/application.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;Flatiron Store\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' =\u0026gt; true %\u0026gt;\u003cbr\u003e  \u0026lt;%= javascript_include_tag 'application', 'data-turbolinks-track' =\u0026gt; true %\u0026gt;\u003cbr\u003e  \u0026lt;%= csrf_meta_tags %\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt;\u003cbr\u003e\u0026lt;body\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= yield %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eYield\u003c/h2\u003e  \u003cp\u003eLet's say you code a new layout from scratch, ending up with something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/layouts/application.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;Flatiron Store\u0026lt;/title\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt;\u003cbr\u003e\u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Welcome To The Flatiron Store!\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e usually you should include links to assets like style sheets and JavaScript files in your layouts, which was omitted in the code above to keep it simple.\u003c/p\u003e  \u003cp\u003eOther than the missing links to common assets, this layout is missing something \u003cstrong\u003eterribly important\u003c/strong\u003e. To see what it is, have a look at the following example that uses this layout.\u003c/p\u003e  \u003cp\u003eThis is an example of an action (\u003ccode\u003estatic#about\u003c/code\u003e) where we expect the corresponding template (\u003ccode\u003eapp/views/static/about.html.erb\u003c/code\u003e) to render within the \u003ccode\u003eapplication.html.erb\u003c/code\u003e layout defined above.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/static_controller.rb\u003cbr\u003e\u003cbr\u003eclass StaticController \u0026lt; ApplicationController\u003cbr\u003e  def about\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThere should also be an associated route in the \u003ccode\u003econfig/routes.rb\u003c/code\u003e file to route a request to \u003ccode\u003e/about\u003c/code\u003e to the \u003ccode\u003estatic#about\u003c/code\u003e action in the \u003ccode\u003eStaticController\u003c/code\u003e, above.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003eRails.application.routes.draw do\u003cbr\u003e  get 'about', to: 'static#about'\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd this is the template for the \u003ccode\u003estatic#about\u003c/code\u003e action with a simple message, which we would want to display nested inside the \u003ccode\u003eapplication.html.erb\u003c/code\u003e layout:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/static/about.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen you load up the \u003ccode\u003estatic#about\u003c/code\u003e route in your browser, you will be greeted with a very bold message –– \u003cstrong\u003eWelcome To The Flatiron Store!\u003c/strong\u003e –– but you won't see the \"Hello!\" from the about action's template, which we just coded above. What gives?\u003c/p\u003e  \u003cp\u003eThis is happening because the layout file at \u003ccode\u003eapp/views/layouts/application.html.erb\u003c/code\u003e does not have a \u003ccode\u003eyield\u003c/code\u003e statement in it. \u003ccode\u003eyield\u003c/code\u003e is what Rails uses to decide where in the layout to render the content for the action. If you don't put a \u003ccode\u003eyield\u003c/code\u003e in your layout, the layout itself will render just fine, but any additional content coded into the action templates will not be correctly placed within the layout.\u003c/p\u003e  \u003cp\u003eTo fix this issue, add a \u003ccode\u003eyield\u003c/code\u003e to the layout file at \u003ccode\u003eapp/views/layouts/application.html.erb\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/layouts/application.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;Flatiron Store\u0026lt;/title\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt;\u003cbr\u003e\u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Welcome To The Flatiron Store!\u0026lt;/h1\u0026gt;\u003cbr\u003e    \u0026lt;%= yield %\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow when you hit up the \u003ccode\u003estatic#about\u003c/code\u003e route in your browser, you will see \u003cstrong\u003eWelcome To The Flatiron Store!\u003c/strong\u003e followed by \u003cstrong\u003eHello!\u003c/strong\u003e This means that, when the layout rendered, it pulled the action's specific template into the correct place –– right where we added the \u003ccode\u003eyield\u003c/code\u003e statement!\u003c/p\u003e  \u003cp\u003eThose of you who remember Ruby blocks might be thinking that this looks very similar to how Ruby yields to blocks in a method call. The same principle is at work here: we're yielding to a chunk of code and don't know what it will do in advance. We always want to run the layout part of the method, and we let any other chunk of code that produces HTML (a template in this case) run at the \u003ccode\u003eyield\u003c/code\u003e point in the method call.\u003c/p\u003e  \u003ch2\u003eHow Layouts and Templates are Stitched Together\u003c/h2\u003e  \u003cp\u003eAt its simplest level, this is what happens when a request is made to your Rails application:\u003c/p\u003e  \u003col\u003e \u003cli\u003eRails finds the template for the corresponding action based either on convention or any other options passed to the \u003ccode\u003erender\u003c/code\u003e method in your controller action.\u003c/li\u003e \u003cli\u003eSimilarly, it then finds the correct layout to use, either through naming/directory conventions or from specific options that you provided.\u003c/li\u003e \u003cli\u003eRails uses the action template to generate the content specific to the action. (Note that the template might be composed of partial views, which you'll learn about a bit later.)\u003c/li\u003e \u003cli\u003eIt then looks for the layout's \u003ccode\u003eyield\u003c/code\u003e statement and inserts the action's template there.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eSo this means that, for every request handled by Rails, at most one layout and action template will be used. The action template can call out to other templates, called partials, to render itself. Partials are covered in upcoming lessons, so don't worry too much about the concept for now.\u003c/p\u003e  \u003ch2\u003eHow Rails Decides Which Layout to Use\u003c/h2\u003e  \u003cp\u003eThink about the example from earlier in this lesson, the Flatiron store app. As mentioned before, it would make sense to have the same layout for the product list, product detail pages, and cart because you would want some common elements in the same place within each view.\u003c/p\u003e  \u003cp\u003eBut when you add administrative functionality to the online store –– say, in order to allow someone to add new products to the site, update prices, and perhaps draw reports –– you'll probably want to use a different layout, which is quite easy to do with Rails.\u003c/p\u003e  \u003ch3\u003eDeciding on a Layout Through Convention\u003c/h3\u003e  \u003cp\u003eRails uses a simple convention to find the correct layout for your request. If you have a controller called \u003ccode\u003eProductsController\u003c/code\u003e, Rails will see whether there is a layout for that controller at \u003ccode\u003elayouts/products.html.erb\u003c/code\u003e. Similarly, if you have a controller called \u003ccode\u003eAdminController\u003c/code\u003e, it'll look for a layout at \u003ccode\u003elayouts/admin.html.erb\u003c/code\u003e. If it can't find a layout specific to your controller, it'll use the default layout at \u003ccode\u003eapp/views/layouts/application.html.erb\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWith the exception of the admin section of a site, most applications use the default layout for everything, so there's no need to have a layout for each controller. You want to have a consistent look and feel throughout your site, using a different layout only if the situation really warrants it.\u003c/p\u003e  \u003ch3\u003eOverriding Conventions\u003c/h3\u003e  \u003cp\u003eIf you need to override the conventions explained above, you can easily do so. For example, if you have a controller called \u003ccode\u003eShoppingCartController\u003c/code\u003e and want to use the layout at \u003ccode\u003elayouts/products.html.erb\u003c/code\u003e, you have two options:\u003c/p\u003e  \u003col\u003e \u003cli\u003eIf you want to use the products layout for every action, simply specify that you want to use the products layout by invoking the \u003ccode\u003elayout\u003c/code\u003e method in your controller, passing it a string that it can use to find the desired layout:\u003c/li\u003e \u003c/ol\u003e \u003cpre\u003e\u003ccode\u003eclass ShoppingCartController \u0026lt; ApplicationController\u003cbr\u003e  layout \"products\"\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003col\u003e \u003cli\u003eIf you want to use the products layout only for a particular action, simply use the \u003ccode\u003erender\u003c/code\u003e method in the controller action, specifying the layout you want it to use like this:\u003c/li\u003e \u003c/ol\u003e \u003cpre\u003e\u003ccode\u003eclass ShoppingCartController \u0026lt; ApplicationController\u003cbr\u003e  def list\u003cbr\u003e    render :layout =\u0026gt; \"products\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # the rest of the actions will use standard conventions\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you want to render your action template without a layout, you can do the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass ShoppingCartController \u0026lt; ApplicationController\u003cbr\u003e  def list\u003cbr\u003e    render :layout =\u0026gt; false\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # the rest of the actions will use standard conventions\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It's pretty unusual to not render the layout in a standard action. However, once you start using AJAX (JavaScript), it's quite common. Keep this in the back of your mind when you get to JavaScript.\u003c/p\u003e  \u003ch2\u003eRecap\u003c/h2\u003e  \u003cp\u003eUse layouts to provide a common look and feel between different views of your app. As much as possible, use and adapt only the default layout until you have a good reason to use a different layout for a different section or action.\u003c/p\u003e  \u003cp\u003eNext, we'll take what we've learned here and apply it in a lab.\u003c/p\u003e","exportId":"layouts-and-templates"},{"id":220622,"title":"Layouts and Templates Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-layouts-and-templates-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-layouts-and-templates-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-layouts-and-templates-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-layouts-and-templates-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cp\u003eYour task is to build an online store! Okay, maybe not a whole online store, but\nat least some layouts and controllers for an online store. Not only will you\nlearn how to create a layout and how to get an action to use that layout but\nalso how to override defaults and specify layouts on the action level.\u003c/p\u003e\n\n\u003ch2\u003eThe Default Layout\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eMake a new controller called \u003ccode\u003eStaticController\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a home view with an \u003ccode\u003eh2\u003c/code\u003e that says \"Welcome to Flatiron Widgets\" and a\nnew action in \u003ccode\u003eStaticController\u003c/code\u003e called \u003ccode\u003ehome\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a default application layout at the correct location, and add an \u003ccode\u003eh1\u003c/code\u003e\nto it that says \"Flatiron Widgets Store\". This is for the main site's welcome\nbar.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eCustom Layouts for a Controller\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eCreate a new controller called \u003ccode\u003eStoreAdminController\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe want this controller to use a new layout called \u003ccode\u003eadmin\u003c/code\u003e. This layout\nshould have an \u003ccode\u003eh1\u003c/code\u003e that says \"Flatiron Widgets: Admin\".\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a home view layout for \u003ccode\u003eStoreAdminController\u003c/code\u003e with an \u003ccode\u003eh2\u003c/code\u003e that says\n\"Welcome Flatiron Admin\".\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eGet your newly created action to use the \u003ccode\u003eadmin\u003c/code\u003e template.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eCustom Layouts for an Action\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eCreate a new view for \u003ccode\u003eStoreAdminController\u003c/code\u003e called \u003ccode\u003eorders\u003c/code\u003e with an \u003ccode\u003eh2\u003c/code\u003e that\nsays \"Welcome to Flatiron Open Orders\". Also add an \u003ccode\u003eol\u003c/code\u003e with a few \u003ccode\u003eli\u003c/code\u003e\nelements containing fake orders.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eNow you should create a new layout called \u003ccode\u003eorder_administration\u003c/code\u003e and add an\n\u003ccode\u003eh1\u003c/code\u003e that says \"Flatiron Widgets: Open Orders\".\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAt this point, the \u003ccode\u003estore_admin#orders\u003c/code\u003e action will use the \u003ccode\u003eadmin\u003c/code\u003e layout\nyou defined earlier, but we need it to use the new \u003ccode\u003eorder_administration\u003c/code\u003e\nlayout. The trick is we want only the \u003ccode\u003estore_admin#orders\u003c/code\u003e action to use the\n\u003ccode\u003eorder_administration\u003c/code\u003e layout, and we want to keep the \u003ccode\u003eadmin\u003c/code\u003e layout as the\ndefault for the other actions in \u003ccode\u003eStoreAdminController\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIgnore Layouts for an Action\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eCreate a new action in \u003ccode\u003eStoreAdminController\u003c/code\u003e called \u003ccode\u003einvoice\u003c/code\u003e, and insert an\n\u003ccode\u003eh1\u003c/code\u003e that says \"Your Invoice\".\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThis action is assigned the default layout for the controller, \u003ccode\u003eadmin\u003c/code\u003e, but\nwe don't want it to use any layout at all (while also not affecting the layouts\nassigned to other actions in the controller).\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e","exportId":"gfcbac6873335e3b1e3f9c0c4eaf6fa95"},{"id":220629,"title":"Simple Partials","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"simple-partials-reading\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/simple-partials-reading/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/simple-partials-reading\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/simple-partials-reading/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eExplain why partials are used\u003c/li\u003e \u003cli\u003eUse Rails's \u003ccode\u003erender\u003c/code\u003e method to render a partial\u003c/li\u003e \u003cli\u003eDescribe how the name of a partial turns into its filename\u003c/li\u003e \u003cli\u003eReference partials located in an external folder\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eAs you know, while coding we are generally trying not to repeat our code. If we see a repeated chunk of code in different methods, we sometimes extract that chunk of code into its own method, which we can then reference in multiple places.\u003c/p\u003e  \u003cp\u003eWe can apply a similar tool to reduce repetition in HTML. Partials are view-level files that only form one part of an HTML page. By using a partial, we can remove repeated pieces of HTML and add better organization to the code in our views.\u003c/p\u003e  \u003cp\u003eLet's look at an example to see what this means.\u003c/p\u003e  \u003ch2\u003eExample\u003c/h2\u003e  \u003cp\u003eBefore we get started, make sure that you run \u003ccode\u003erake db:seed\u003c/code\u003e to seed the database. This will give us some posts and authors. Because we want to focus on partials, you'll notice some hard-coding in the controller. In the \u003ccode\u003eposts#create\u003c/code\u003e action, we've hard-coded that every new post created is linked to the very first author in the database.\u003c/p\u003e  \u003cp\u003eOK, let's dive in!\u003c/p\u003e  \u003cp\u003eThis is the code in the \u003ccode\u003eposts#new\u003c/code\u003e form:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/new.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag posts_path do %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag :title, @post.title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post Description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_area_tag :description, @post.description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= submit_tag \"Submit Post\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd this is the code in the \u003ccode\u003eposts#edit\u003c/code\u003e form:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/edit.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h3\u0026gt;Post Form\u0026lt;/h3\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag post_path(@post), method: \"put\" do %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag :title, @post.title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post Description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_area_tag :description, @post.description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= submit_tag \"Submit Post\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eExcept for the first line of the form, the code is pretty much the same! The labels and field tags are the same. All of that duplication is not good in code. Duplication means twice the amount of code to maintain, twice the opportunity for bugs, and two slightly different forms when our interface should be consistent.\u003c/p\u003e  \u003cp\u003eInstead of duplicating all of that code, we just want to write it once in our partial and call it from both our edit and show views. Here's how:\u003c/p\u003e  \u003cp\u003eFirst, let's create a new file in \u003ccode\u003eapp/views/posts/\u003c/code\u003e called \u003ccode\u003e_form.html.erb\u003c/code\u003e. To indicate that this file is a partial (and only part of a larger view), an underscore is prefixed to the filename.\u003c/p\u003e  \u003cp\u003eSecond, let's remove the repeated code in \u003ccode\u003eapp/views/posts/edit.html.erb\u003c/code\u003e. The file should look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h3\u0026gt;Post Form\u0026lt;/h3\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag post_path(@post), method: \"put\" do %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that we left in the non-duplicated code. Now, let's also remove the duplicated code in the \u003ccode\u003eapp/views/posts/new.html.erb\u003c/code\u003e file. The file should look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_tag posts_path do %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe left the code that is unique to each view and removed the duplicated code inside the \u003ccode\u003eform_tag\u003c/code\u003e blocks.\u003c/p\u003e  \u003cp\u003eSo, now what? It looks like we are missing a bunch of code in our \u003ccode\u003eposts/new\u003c/code\u003e and \u003ccode\u003eposts/edit\u003c/code\u003e files. Not to worry –– that's where our partial comes in handy.\u003c/p\u003e  \u003cp\u003eFirst, we'll place the duplicated code in our new \u003ccode\u003e_form.html.erb\u003c/code\u003e file. The file should look as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u0026lt;%= text_field_tag :title, @post.title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;label\u0026gt;Post Description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u0026lt;%= text_area_tag :description, @post.description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= submit_tag \"Submit Post\" %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNext, we need to render the code into the \u003ccode\u003eposts/edit\u003c/code\u003e and \u003ccode\u003eposts/new\u003c/code\u003e pages by placing \u003ccode\u003e\u0026lt;%= render \"form\" %\u0026gt;\u003c/code\u003e where we want the code in the partial to be rendered. Notice that, while the file name of our partial starts with an underscore, when we reference it there is no underscore.\u003c/p\u003e  \u003cp\u003eOur \u003ccode\u003eposts/new\u003c/code\u003e file should now look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/new.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag posts_path do %\u0026gt;\u003cbr\u003e \u0026lt;%= render 'form' %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd our \u003ccode\u003eposts/edit\u003c/code\u003e file like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/edit.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h3\u0026gt;Post Form\u0026lt;/h3\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag post_path(@post), method: \"put\" do %\u0026gt;\u003cbr\u003e  \u0026lt;%= render 'form' %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd that's it –– we're all done!\u003c/p\u003e  \u003cp\u003eA couple of things to note:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eNotice that, even though the last line of the form (the \u003ccode\u003e\u0026lt;% end %\u0026gt;\u003c/code\u003e tag) is duplicated code, we didn't move it into the partial. This is because it closes the beginning of the \u003ccode\u003eform_tag\u003c/code\u003e block, which DOES differ from form to form. We don't want to open our \u003ccode\u003eform_tag\u003c/code\u003e block in one file and close it in a different file. This is a stylistic point that you will get a feel for over time.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eWe could have named the partial whatever we wanted to. The only requirements are that it start with an underscore and that references to the partial are made without the underscore. But, just like method names, it's good to make the names of our partials as commonsensical as possible.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eWe were able to reference the partial by just calling \u003ccode\u003e\u0026lt;%= render 'form' %\u0026gt;\u003c/code\u003e.  Notice that we didn't specify the folder that the partial lives in, such as \u003ccode\u003e\u0026lt;%= render 'posts/form' %\u0026gt;\u003c/code\u003e. The reason we didn't need this (even though it would have worked if we had included it) is that both the \u003ccode\u003eposts/new\u003c/code\u003e and \u003ccode\u003eposts/edit\u003c/code\u003e files are referencing a partial housed in the same folder in which they reside, \u003ccode\u003eapp/views/posts\u003c/code\u003e. When referencing a partial from a different folder, we must include the folder name as well (e.g., \u003ccode\u003e\u0026lt;%= render 'posts/form' %\u0026gt;\u003c/code\u003e as opposed to \u003ccode\u003e\u0026lt;%= render 'form' %\u0026gt;\u003c/code\u003e).\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eRendering a partial from a different folder\u003c/h2\u003e  \u003cp\u003eLet's take a look at our \u003ccode\u003eauthors/show.html.erb\u003c/code\u003e file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= @author.name %\u0026gt;\u003cbr\u003e\u0026lt;%= @author.hometown %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd now look at the code in \u003ccode\u003eposts/show.html.erb\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= @post.author.name %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.author.hometown %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;\u0026lt;%= @post.description %\u0026gt;\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSee the repetition? In both places, we are using the \u003ccode\u003eAuthor\u003c/code\u003e object to call the \u003ccode\u003e.name\u003c/code\u003e and \u003ccode\u003e.hometown\u003c/code\u003e methods. The first thing we have to fix is the slight difference between the templates. Let's make the beginning portion of the \u003ccode\u003eposts/show\u003c/code\u003e template match the \u003ccode\u003eauthors/show\u003c/code\u003e template.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= @author.name %\u0026gt;\u003cbr\u003e\u0026lt;%= @author.hometown %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;\u0026lt;%= @post.description %\u0026gt;\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen, let's make a new partial called \u003ccode\u003eapp/views/authors/_author.html.erb\u003c/code\u003e and place the repeated code in the file. It should look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/authors/_author.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= @author.name %\u0026gt;\u003cbr\u003e\u0026lt;%= @author.hometown %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we can just render this partial in our \u003ccode\u003eauthors/show\u003c/code\u003e page by doing the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/authors/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= render 'author' %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's try making the same change to our \u003ccode\u003eposts/show\u003c/code\u003e page:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= render 'author' %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;\u0026lt;%= @post.description %\u0026gt;\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUh oh, something went wrong. This won't work because, if we don't specify the partial's parent folder, Rails assumes that the partial lives in the same folder as the view that's calling it. In this case, it looks for a file in the \u003ccode\u003eposts\u003c/code\u003e directory called \u003ccode\u003e_author.html.erb\u003c/code\u003e and doesn't find it. We need to tell Rails to go outside the folder by being explicit about the folder and file name that it should render. We can do that by changing the above code to the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= render 'authors/author' %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;\u0026lt;%= @post.description %\u0026gt;\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe're almost there! One more problem is that our partial assumes it has access to an instance variable called \u003ccode\u003e@author\u003c/code\u003e. The partial won't function without it! We'll need to modify the \u003ccode\u003ePostsController\u003c/code\u003e to have it set that instance variable.\u003c/p\u003e  \u003cp\u003eChange the \u003ccode\u003eposts#show\u003c/code\u003e action in the controller to look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef show\u003cbr\u003e  @post = Post.find(params[:id])\u003cbr\u003e  @author = @post.author\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd now we are done! Great job!\u003c/p\u003e","exportId":"g90d919706732ccb833627905632c1e59"},{"id":220634,"title":"Simple Partials Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"simple-partials-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/simple-partials-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/simple-partials-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/simple-partials-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse the \u003ccode\u003erender\u003c/code\u003e method to render partials\u003c/li\u003e\n\u003cli\u003eUnderstand how the name of a partial turns into its filename\u003c/li\u003e\n\u003cli\u003ePractice rendering partials in a different folder\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eFlatiron is building out a new system to keep track of students in its classes. You just joined the technical team and see that there's lots of repetition in the view layer of the code base. Use your new knowledge of partials to remove the duplication.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFirst, fork and clone the lab.\u003c/p\u003e\n\n\u003cp\u003eWe've provided a seed file so you can have some data to play around with. Run \u003ccode\u003erake db:seed\u003c/code\u003e to seed the database.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eRemove the duplicated code in the \u003ccode\u003estudents/edit.html.erb\u003c/code\u003e and \u003ccode\u003estudents/new.html.erb\u003c/code\u003e files by making a partial called \u003ccode\u003estudents/_form.html.erb\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eRemove the duplicated code in the \u003ccode\u003eclassrooms/show.html.erb\u003c/code\u003e and \u003ccode\u003estudents/show.html.erb\u003c/code\u003e files by making a partial called \u003ccode\u003estudents/_student.html.erb\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g35789323f3214ed001ad88b6ec682b7d"},{"id":220639,"title":"Partials with Locals","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"partial-locals-reading\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/partial-locals-reading/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/partial-locals-reading\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/partial-locals-reading/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eUse the \u003ccode\u003elocals\u003c/code\u003e keyword\u003c/li\u003e \u003cli\u003eUnderstand why using instance variables in partials is non-optimal\u003c/li\u003e \u003cli\u003eUse a partial while rendering a collection\u003c/li\u003e \u003cli\u003eUse a partial from another controller with a local\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003ePartials help us break our code up into reusable chunks.  They also often have implicit dependencies that can lead to bugs.  For example, what if a partial assumes that a \u003ccode\u003e@user\u003c/code\u003e variable is present. If the point is to \u003cem\u003ereuse\u003c/em\u003e partials, if you put it inside of an action that \u003cem\u003edidn't\u003c/em\u003e set a \u003ccode\u003e@user\u003c/code\u003e variable, you're going to have a bug. Using \"locals\" in partials is how we can make these implicit assumptions explicit.  In the following example, we'll unpack exactly what locals are and how they're used.\u003c/p\u003e  \u003ch2\u003eLesson\u003c/h2\u003e  \u003cp\u003eTake a look at the included repo.  You should notice the same piece of view code in a few places.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.name %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.hometown %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou'll find that code (or very similar code) in the following pages:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003ccode\u003eapp/views/authors/show.html.erb\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eapp/views/authors/index.html.erb\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eapp/views/posts/show.html.erb\u003c/code\u003e.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eapp/views/posts/index.html.erb\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eLet's see how we might be vulnerable to bugs. In this \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e we \u003cstrong\u003e\u003cem\u003eassume\u003c/em\u003e\u003c/strong\u003e that there will be a controller-set variable, \u003ccode\u003e@author\u003c/code\u003e. But what if that person-like entity makes more sense to be called \u003ccode\u003e@admin\u003c/code\u003e or \u003ccode\u003e@guest\u003c/code\u003e or \u003ccode\u003e@owner\u003c/code\u003e. We want the same bit of UI, but don't want to have to re-name our variables to make it work. We know what we want in the partial (the \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e), what we want to be \u003cem\u003eflexible\u003c/em\u003e is the \"thing\" that we invoke \u003ccode\u003e.name\u003c/code\u003e and \u003ccode\u003ehometown\u003c/code\u003e on.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: This should recall the \"why do methods have arguments and parameters\" discussion from when you were learning to write methods.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eLet's start with the author show page.  Watch our \u003cem\u003eprocess\u003c/em\u003e here as we're going to apply it to all views that reference this \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ehometown\u003c/code\u003e information.\u003c/p\u003e  \u003cp\u003eLet's remove the code from our \u003ccode\u003eapp/views/authors/show.html.erb\u003c/code\u003e page.  Now our file should be empty:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/authors/show.html.erb --\u0026gt;\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can move the removed code into a partial, \u003ccode\u003eapp/views/authors/_author.html.erb\u003c/code\u003e, that now has the following code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/authors/_author.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.name %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.hometown %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo keep our code in the show page rendering out the same content, we call the partial from the \u003ccode\u003eapp/views/authors/show.html.erb\u003c/code\u003e file.  Doing this, the \u003ccode\u003eapp/views/authors/show.html.erb\u003c/code\u003e file now looks like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= render 'author' %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGreat!\u003c/p\u003e  \u003cp\u003eNow let's take a look at the \u003ccode\u003eapp/views/posts/show.html.erb\u003c/code\u003e file.  It currently looks like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eInformation About the Post\u003cbr\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.name %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.hometown %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt;\u003cbr\u003e\u0026lt;%= @post.title %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.content %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou can see that lines 2-5 are exactly the same as the code in our authors/author partial.  Let's remove the repetition in our codebase by using that partial instead.  By using the partial, our code will look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eInformation About the Post\u003cbr\u003e\u0026lt;%= render 'authors/author' %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.title %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.content %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Because we are calling a partial from outside the current \u003ccode\u003eapp/views/posts\u003c/code\u003e folder, we must specify the folder that our author partial is coming from by calling \u003ccode\u003erender 'authors/author'\u003c/code\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eThe Problem\u003c/h2\u003e  \u003cp\u003eIn \u003ccode\u003eapp/views/authors/show.html.erb\u003c/code\u003e our source of information about  \u003ccode\u003e.name\u003c/code\u003e and \u003ccode\u003e.hometown\u003c/code\u003e is \u003ccode\u003e@author\u003c/code\u003e; in \u003ccode\u003eapp/views/posts/show.html.erb\u003c/code\u003e the source of information about \u003ccode\u003e.name\u003c/code\u003e and \u003ccode\u003e.hometown\u003c/code\u003e is \u003ccode\u003e@post.author\u003c/code\u003e. If we could tell the partial \"use as your source\" \u003ccode\u003e@author\u003c/code\u003e or \u003ccode\u003e@post.author\u003c/code\u003e, we could share the partial across these two different views.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003elocals\u003c/code\u003e parameter to \u003ccode\u003erender\u003c/code\u003e provides this flexibility.\u003c/p\u003e  \u003cp\u003eLet's see how local variables make our code more explicit.\u003c/p\u003e  \u003cp\u003eThis is what the entire show view, \u003ccode\u003eapp/views/posts/show.html.erb\u003c/code\u003e, looks like when \u003ccode\u003elocals\u003c/code\u003e are used:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eInformation About the Post\u003cbr\u003e\u0026lt;%= render partial: \"authors/author\", locals: {post_author: @author} %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.title %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.content %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice a few things:\u003c/p\u003e  \u003col\u003e \u003cli\u003eWe are no longer passing the render method a \u003ccode\u003eString\u003c/code\u003e; we're passing key-value pairs\u003c/li\u003e \u003cli\u003eThe first key-value pair tells Rails the name of the partial to render (\u003ccode\u003e\"authors/author\"\u003c/code\u003e)\u003c/li\u003e \u003cli\u003eThe second key-value pair specifies the \u003ccode\u003elocals\u003c/code\u003e as a \u003ccode\u003eHash\u003c/code\u003e. That \u003ccode\u003eHash\u003c/code\u003e's keys (\u003ccode\u003epost_author\u003c/code\u003e here) will be created as local variables \u003cem\u003ewithin the partial\u003c/em\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWhen we use locals, we need to make sure that the variables we refer to in our partial have the same names as the keys in our locals hash.\u003c/p\u003e  \u003cp\u003eIn our example partial, \u003ccode\u003eapp/views/author/_author.html.erb\u003c/code\u003e, we need to change our code from:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.name %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.hometown %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eto:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= post_author.name %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= post_author.hometown %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe way we use locals with a partial is similar to how we pass arguments into a method.  In the \u003ccode\u003elocals\u003c/code\u003e \u003ccode\u003eHash\u003c/code\u003e, the \u003ccode\u003epost_author:\u003c/code\u003e key is the argument name, and the value of that argument, \u003ccode\u003e@author\u003c/code\u003e, is the value stored as \u003ccode\u003epost_author\u003c/code\u003e and passed into the method.  We can name the keys whatever we want.\u003c/p\u003e  \u003cp\u003eNow notice that, if we choose to delete the line \u003ccode\u003e\u0026lt;%= render {partial: \"authors/author\", locals: {post_author: @author}} %\u0026gt;\u003c/code\u003e from the posts/show view, calling the partial requires us to pass in data about the author. The \u003ccode\u003e@author = @post.author\u003c/code\u003e line in our \u003ccode\u003ePostsController\u003c/code\u003e may no longer be needed.\u003c/p\u003e  \u003cp\u003eIn fact, with locals, we can completely eliminate the \u003ccode\u003e@author = @post.author\u003c/code\u003e line in the \u003ccode\u003eposts#show\u003c/code\u003e controller action, instead only accessing that data where we need it, in the partial.\u003c/p\u003e  \u003cp\u003eLet's remove that line of code in our controller and in the view pass through the author information by changing our code to the following:\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eapp/controllers/posts_controller\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  ...\u003cbr\u003e  def show\u003cbr\u003e    @post = Post.find(params[:id])\u003cbr\u003e  end\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003eapp/views/posts/show.html.erb\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eInformation About the Post\u003cbr\u003e\u0026lt;%= render partial: \"authors/author\", locals: {post_author: @post.author} %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.title %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.content %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis code is much better.  We are being more explicit about our dependencies, reducing lines of code in our codebase, and reducing the scope of the author variable.\u003c/p\u003e  \u003cp\u003eDon't worry if you find the syntax for rendering a partial hard to remember –– it is.  You can always reference this guide or the Rails Guides.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lab we've learned how partials help us DRY out our views and how the \u003ccode\u003elocals\u003c/code\u003e \u003ccode\u003eHash\u003c/code\u003e can be used to create flexibility in our calls to the partials.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials\"\u003eRailsGuide: Partials\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g4a44063194d52d323a2bf4c559e37b19"},{"id":220646,"title":"Partial Locals Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"partial-locals-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/partial-locals-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/partial-locals-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/partial-locals-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eNow that we learned about locals, let's refactor our old codebase and add a\ncouple new features using this new tool.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse the \u003ccode\u003elocals\u003c/code\u003e keyword\u003c/li\u003e\n\u003cli\u003eUnderstand why using instance variables in partials is bad\u003c/li\u003e\n\u003cli\u003eUse a partial to iterate over a collection, passing in a local\u003c/li\u003e\n\u003cli\u003eUse a partial from another controller with a local\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eSo your team's lead engineer looked over the codebase and asked you to not refer\nto instance variables in your partials but rather to pass through local\nvariables. That way, your code will be more explicit about its dependencies\nwhen it calls the partial.\u003c/p\u003e\n\n\u003cp\u003eAlso, the lead engineer asked for a couple new features.\u003c/p\u003e\n\n\u003cp\u003eThe first is that we display \u003cem\u003eall\u003c/em\u003e students on the classroom show page instead\nof singling out the oldest student with a special note. The engineer thinks\nthis isn't very polite.\u003c/p\u003e\n\n\u003cp\u003eSecond, they also want to add some search functionality so that a user can\nsearch for a student by name. They'll type the name in in a form field and\nwe'll use the power of ActiveRecord to find matching data. It's OK if other\nstudents with similar names are returned in the search results.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eRefactor the \u003ccode\u003e_form.html.erb\u003c/code\u003e partial to accept the argument to the\n\u003ccode\u003eform_for\u003c/code\u003e helper as a local. You'll also need to change the \u003ccode\u003enew.html.erb\u003c/code\u003e and\n\u003ccode\u003eedit.html.erb\u003c/code\u003e views as well.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eRefactor the \u003ccode\u003e_student.html.erb\u003c/code\u003e partial to pass through each rendered\nstudent as a local.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eOn the classroom show page, iterate through each classroom's students and\ndisplay each of them using our \u003ccode\u003e_student.html.erb\u003c/code\u003e partial with locals.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a \u003ccode\u003e_classroom.html.erb\u003c/code\u003e partial to display classroom information on\nthe classroom show page.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAdd in search functionality such that users can type in a student name or\nfragment of a student name and and see all matching results on the students\nindex page. The results should be displayed by rendering a\n\u003ccode\u003estudents/_student.html.erb\u003c/code\u003e partial. This will require you to do a \"fuzzy\"\nor \"wildcard\" search in the controller in order to create the set of matches.\nTo help you out, you'll want to write a flexibly matching (or \"wildcard\")\nquery in ActiveRecord that follows the form: \u003ccode\u003eStudent.where(\"name LIKE ?\",\n\"%query%\")\u003c/code\u003e. For example, \u003ccode\u003eStudent.where(\"name LIKE ?\", \"%M%\")\u003c/code\u003e will return\nall students with an \"M\" anywhere in their name. Once you have the search\nfunctionality coded, you should be able to visually test it by visiting\n\u003ccode\u003ehttp://localhost:3000?query=\"search_text\"\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/sql/sql_like.asp\"\u003eSQL LIKE Operator\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g7b552234f5f2fc5fafe2950cb577dcdc"},{"id":220652,"title":"Flatiron Kitchen Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"flatiron-kitchen\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/flatiron-kitchen/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/flatiron-kitchen\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/flatiron-kitchen/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eDeliverables\u003c/h2\u003e\n\n\u003cp\u003eFork this repository. Deliver your solution in master.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFlatiron Kitchen started off as a bubble tea bar in the corner of Flatiron School and is now a five-star restaurant known for its blueberry pancakes.\u003c/p\u003e\n\n\u003cp\u003eThings used to be simpler when there were only a few chefs at Flatiron Kitchen, but now that it's expanding an application is needed to keep track of all of the world-class recipes.\u003c/p\u003e\n\n\u003cp\u003eWe need to be able to track which ingredients the restaurant has available and which ingredients are used in each recipe.\u003c/p\u003e\n\n\u003cp\u003eYour application should use a join table called \"recipe_ingredients\" to keep track of the ingredients for each recipe.\u003c/p\u003e\n\n\u003cp\u003eBuild your site so that it passes the tests in spec/features. There aren't tests for index pages or things like page headers or links, but feel free to add these (otherwise your app will be difficult to navigate).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e when you generate models, controllers, etc., be sure to include the \u003ccode\u003e--no-test-framework\u003c/code\u003e option so that Rails doesn't create tests (which are already included in the lab).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Each test has a helpful comment above it!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHINT:\u003c/strong\u003e If you give a checkbox \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e a name attribute like \u003ccode\u003eninja_turtle_colors[]\u003c/code\u003e, each ninja turtle color will be passed to the \u003ccode\u003eparams\u003c/code\u003e hash in an array: \u003ccode\u003e{ ninja_turtle_colors: [\"red\", \"blue\", \"orange\", \"purple\"] }\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eBonuses!\u003c/h2\u003e\n\n\u003cp\u003eKeep track of the quantity of ingredients currently on hand. Display on each recipe page how many dishes can be made given the existing ingredients.\u003c/p\u003e\n\n\u003cp\u003eWrite RSpec unit tests to verify your ingredients-to-dishes calculator.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://guides.rubyonrails.org/\"\u003eRails Guides\u003c/a\u003e - \u003ca href=\"http://guides.rubyonrails.org/association_basics.html\"\u003eActive Record Basics\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://guides.rubyonrails.org/\"\u003eRails Guides\u003c/a\u003e - \u003ca href=\"http://guides.rubyonrails.org/action_controller_overview.html\"\u003eAction Controller Overview\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g9ad5a9d073443fc3fddc1dca5f5916be"},{"id":220659,"title":"Rendering Collections","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rendering-collections-reading\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rendering-collections-reading/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rendering-collections-reading\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rendering-collections-reading/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eUse the \u003ccode\u003ecollection\u003c/code\u003e keyword with partials\u003c/li\u003e \u003cli\u003ePass a collection to the render method\u003c/li\u003e \u003cli\u003eHandle empty collections\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eUp until now our only way to render collections was somewhat manually. We could iterate over an array and render the partial for each object in the array. Let's see how Rails can abstract this into a nicer syntax.\u003c/p\u003e  \u003ch2\u003eLesson\u003c/h2\u003e  \u003cp\u003eMake sure you run \u003ccode\u003erake db:seed\u003c/code\u003e before you test out the app in your browser. Because this lesson focuses on using the \u003ccode\u003ecollection\u003c/code\u003e keyword with partials, we've hard-coded in the connection between authors and posts. In the posts controller create action, we link the newly created post with the first author in the database.\u003c/p\u003e  \u003cp\u003eCurrently, our \u003ccode\u003eposts#index\u003c/code\u003e view is manually rendering the partial in a loop.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% @posts.each do |post| %\u0026gt;\u003cbr\u003e  \u0026lt;%= render :partial =\u0026gt; \"post\", {:locals =\u0026gt; {:post =\u0026gt; post}} %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRails offers a great way to render a collection using a partial by passing the collection option to the render method.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= render :partial =\u0026gt; \"post\", :collection =\u0026gt; @posts %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur code is tighter and both more abstract and more clear. Another even more abstract method Rails gives us to do this is passing an array directly to the render method.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= render @posts %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis approach is a bit more abstract. Under the hood Rails uses the convention that you will have a partial with the name of the models in the collection. Rails will even render a collection of heterogeneous models ([customer, order, customer]) calling the correct partial for each one.\u003c/p\u003e  \u003ch3\u003eEmpty Collections\u003c/h3\u003e  \u003cp\u003eWhat happens if the collection you pass to your render call is empty? If you don't handle this exception the render method will return nil and nothing will appear on the screen. A useful trick is to use the \u003ccode\u003e||\u003c/code\u003e operator to print something to the screen to alert the user to this.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= render(@posts) || \"There are no blog posts!\" %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e When dealing with an empty collection, you'll \u003cem\u003eneed to use \u003ccode\u003e()\u003c/code\u003e to wrap that collection\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eAs always, Rails has tried to abstract commonly used functionality into more terse and implicit code. Experiment with these tricks in the upcoming lab.\u003c/p\u003e  \u003ch2\u003eVideo Review\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=XpthyOc767U\"\u003ePartials and Collections\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g1d334a6c4e7336b7f1dfb8d48e33735e"},{"id":220663,"title":"Rendering Collections Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rendering-collections-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rendering-collections-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rendering-collections-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rendering-collections-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse the \u003ccode\u003ecollection\u003c/code\u003e keyword with partials\u003c/li\u003e\n\u003cli\u003ePass a collection to the render method \u003c/li\u003e\n\u003cli\u003eHandle empty collections\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eLet's go back to our store domain.  We had an admin portion of the site where admins could check on their orders and invoices. We've changed it slightly so that, rather than static pages with stubs for orders, we've seeded the database with actual order data. Let's refactor the admin portion of the store to use partials and render collections.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eWe've provided a seed file so you can have some data to play around with –– run \u003ccode\u003erake db:seed\u003c/code\u003e to seed the database.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eRefactor the \u003ccode\u003einvoices/index.html.erb\u003c/code\u003e view to render a collection of partials with \u003ccode\u003e_invoice.html.erb\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eRefactor the \u003ccode\u003eorders/index.html.erb\u003c/code\u003e view to render a collection of partials with \u003ccode\u003e_order.html.erb\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g3a9edc983d9695e91782782f84e14a24"},{"id":220666,"title":"Programmer Partials Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-programmer-profile-partials\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-programmer-profile-partials/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-programmer-profile-partials\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-programmer-profile-partials/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice using partials.\u003c/li\u003e\n\u003cli\u003eUse all the different techniques you've learned in this unit.\u003c/li\u003e\n\u003cli\u003eDRY up your views with locals.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe have a Rails app that showcases some of our favorite programmers. The landing\npage is an index of all of the programmers, and users can click on each\nprogrammer to see his or her profile page. There's just one problem: the views\nare loaded with repetition and clunky iteration and could use some serious\nrefactoring. Your job is to clean up \u003ccode\u003eprogrammers/index.html.erb\u003c/code\u003e and\n\u003ccode\u003eprogrammers/show.html.erb\u003c/code\u003e by using partials.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFork and clone the lab. Run \u003ccode\u003ebundle install\u003c/code\u003e and \u003ccode\u003erake db:migrate\u003c/code\u003e, then \u003ccode\u003erake\ndb:migrate RAILS_ENV=test\u003c/code\u003e. Next, seed the database with some programmers - run\n\u003ccode\u003erake db:seed\u003c/code\u003e - and start the server to see the app in the browser.\u003c/p\u003e\n\n\u003cp\u003eRun \u003ccode\u003erspec\u003c/code\u003e and make the tests pass one at a time! The app will continue to have\nthe same functionality (keep checking it in the browser), but you'll be making\nthe following partials to clean up the views:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eA partial to render the navbar.\u003c/li\u003e\n\u003cli\u003eA partial to render all of the programmers on the index page.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials\"\u003eRails Guides — Using Partials\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActionView/PartialRenderer.html\"\u003eAction View Partials\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://ruby-metaprogramming.rubylearning.com/html/ruby_metaprogramming_2.html\"\u003eMetaprogramming in Ruby\u003c/a\u003e (see section 1.3.2 to learn about \u003ccode\u003esend\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://stackoverflow.com/questions/16242121/rails-4-passing-variable-to-partial\"\u003eStack Overflow — Passing Variables to a Partial\u003c/a\u003e (see the first answer for a concise example)\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g1d7d4cb5f15eb74f5b7e620bf33ddcec"}]},{"id":24115,"name":"Routes and Resources","status":"unlocked","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gb47b83cdaa79d6b299b1125e7a2c7c4c","items":[{"id":220711,"title":"Routing And Nested Resources","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"routing-nested-resources-reading\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/routing-nested-resources-reading/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/routing-nested-resources-reading\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/routing-nested-resources-reading/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eUnderstand the value of nested routes\u003c/li\u003e \u003cli\u003eCreate nested routes\u003c/li\u003e \u003cli\u003eUnderstand how nested resource URL helpers are named\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eLesson\u003c/h2\u003e  \u003cp\u003eWe're going to keep working on our blog application, augmenting it to filter posts by author in a more user-friendly and RESTful way.\u003c/p\u003e  \u003ch3\u003eURL As Data\u003c/h3\u003e  \u003cp\u003eYou've encountered REST already, but, just to review, it stands for REpresentational State Transfer and encapsulates a way of structuring a URL so that access to specific resources is predictable and standardized.\u003c/p\u003e  \u003cp\u003eIn practice, that means that, if we type \u003ccode\u003erails s\u003c/code\u003e and run our blog app, browsing to \u003ccode\u003e/posts\u003c/code\u003e will show us the index of all \u003ccode\u003ePost\u003c/code\u003e objects. And if we want to view a specific \u003ccode\u003eAuthor\u003c/code\u003e, we can guess the URL for that (as long as we know the author's \u003ccode\u003eid\u003c/code\u003e) by going to \u003ccode\u003e/authors/:id\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e the \u003ccode\u003e/:id\u003c/code\u003e notation above represents a \u003cem\u003edynamic\u003c/em\u003e route segment, which we've touched on before and will be seeing more of in this reading.\u003c/p\u003e  \u003cp\u003eWhy do we care?\u003c/p\u003e  \u003cp\u003eWhen we added the filter button to our blog, we could filter by a certain author to see that author's posts, but the URL looked something like this:\u003c/p\u003e  \u003cp\u003e\u003ccode\u003ehttp://localhost:3000/posts?utf8=%E2%9C%93\u0026amp;author=1\u0026amp;date=\u0026amp;commit=Filter\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eThat's the opposite of REST. That makes me \u003cem\u003estressed\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"http://i.giphy.com/J2LrJRhCjIKTC.gif\" alt=\"Not Sorry\"\u003e\u003c/p\u003e  \u003cp\u003eThat URL tells us nothing, really, about the resources we're accessing. Not to mention that it's uglier than a Geocities site, and we might want to present our readers with a link they could understand and share with friends.\u003c/p\u003e  \u003cp\u003eThen there's the author, who might want a more presentable link to share that lets people know, \"Hey, these posts belong to me!\"\u003c/p\u003e  \u003ch3\u003eDynamic Route Segments\u003c/h3\u003e  \u003cp\u003eWhat we'd love to end up with here is something like \u003ccode\u003e/authors/1/posts\u003c/code\u003e for all of an author's posts and \u003ccode\u003e/authors/1/posts/5\u003c/code\u003e to see an individual post by that author.\u003c/p\u003e  \u003cp\u003eWe know we can build out a route with dynamic segments, so our first instinct might be to just define these in \u003ccode\u003eroutes.rb\u003c/code\u003e like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003e  get 'authors/:id/posts'\u003cbr\u003e  get 'authors/:id/posts/:post_id' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter adding those routes, let's load up our blog with \u003ccode\u003erails s\u003c/code\u003e (don't forget to \u003ccode\u003erake db:seed\u003c/code\u003e) and check it out by browsing to \u003ccode\u003e/authors/1/posts\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eOops. Error. Gotta tell those routes explicitly which controller actions will handle them. Okay, let's make it look more like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003e  get 'authors/:id/posts', to: 'authors#posts_index'\u003cbr\u003e  get 'authors/:id/posts/:post_id', to: 'authors#post' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd to handle our new filtering routes, we'll need to make some changes in our \u003ccode\u003eauthors_controller\u003c/code\u003e to actually do the work.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/authors_controller.rb\u003cbr\u003e  def posts_index\u003cbr\u003e    @author = Author.find(params[:id])\u003cbr\u003e    @posts = @author.posts\u003cbr\u003e    render template: 'posts/index'\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def post\u003cbr\u003e    @author = Author.find(params[:id])\u003cbr\u003e\u003cbr\u003e    # Note that because ids are unique by table we can go directly to\u003cbr\u003e    # Post.find — no need for @author.posts.find...\u003cbr\u003e    @post = Post.find(params[:post_id])\u003cbr\u003e    render template: 'posts/show'\u003cbr\u003e  end \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e While a controller action would normally implicitly render a template with the same name as the method, in this case we want to leverage the templates we're already using for posts, so we call \u003ccode\u003erender\u003c/code\u003e explicitly with a template path. Because we're telling \u003ccode\u003erender\u003c/code\u003e that we're using a \u003ccode\u003etemplate\u003c/code\u003e, we don't need to include the \u003ccode\u003e.html.erb\u003c/code\u003e extensions. Rails figures that out for us.\u003c/p\u003e  \u003cp\u003eIf we go back to our blog and try to browse to \u003ccode\u003e/authors/1/posts\u003c/code\u003e, we should see the posts for that author. And then if we try \u003ccode\u003e/authors/1/posts/1\u003c/code\u003e, we should see that post.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If your IDs are different and you are having trouble with the URLs, try running \u003ccode\u003erake db:reset\u003c/code\u003e to reset your IDs to the defaults in the seed file.\u003c/p\u003e  \u003cp\u003eWe did it! We have much nicer URLs now. Are we done? Of course not.\u003c/p\u003e  \u003cp\u003eIf we look at our \u003ccode\u003eroutes.rb\u003c/code\u003e, we can already see it getting messy. Instead of something nice like \u003ccode\u003eresources :authors\u003c/code\u003e, now we're specifying controller actions and HTTP verbs just to do a simple filter of an author's posts.\u003c/p\u003e  \u003cp\u003eBeyond that, our DRY (Don't Repeat Yourself) and Separation of Concerns klaxons should be wailing because the code to find all posts and to find individual posts by their ID is essentially repeated in the \u003ccode\u003eauthors_controller\u003c/code\u003e. These aren't really the concerns of the \u003ccode\u003eauthors_controller\u003c/code\u003e, and we can tell that because we're directly rendering \u003ccode\u003ePost\u003c/code\u003e-related templates.\u003c/p\u003e  \u003cp\u003eSeems like Rails would have a way to bail us out of this mess.\u003c/p\u003e  \u003ch3\u003eNested Resource Routes\u003c/h3\u003e  \u003cp\u003eTurns out, Rails \u003cem\u003edoes\u003c/em\u003e give us a way to make this a lot nicer.\u003c/p\u003e  \u003cp\u003eIf we look again at our models, we see that an author \u003ccode\u003ehas_many :posts\u003c/code\u003e and a post \u003ccode\u003ebelongs_to :author\u003c/code\u003e. Since a post can logically be considered a \u003cem\u003echild\u003c/em\u003e object to an author, it can also be considered a \u003cem\u003enested resource\u003c/em\u003e of an author for routing purposes.\u003c/p\u003e  \u003cp\u003eNested resources give us a way to document that parent/child relationship in our routes and, ultimately, our URLs.\u003c/p\u003e  \u003cp\u003eLet's get back into \u003ccode\u003eroutes.rb\u003c/code\u003e, delete the two routes we just added, and recreate them as nested resources. We should end up with something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003eRails.application.routes.draw do\u003cbr\u003e\u003cbr\u003e  resources :authors, only: [:show] do\u003cbr\u003e    # nested resource for posts\u003cbr\u003e    resources :posts, only: [:show, :index]\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  resources :posts, only: [:index, :show, :new, :create, :edit, :update]\u003cbr\u003e\u003cbr\u003e  root 'posts#index'\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we have the resourced \u003ccode\u003e:authors\u003c/code\u003e route, but by adding the \u003ccode\u003edo...end\u003c/code\u003e we can pass it a block of its nested routes.\u003c/p\u003e  \u003cp\u003eWe can still do things to the nested resources that we do to a non-nested resource, like limit them to only certain actions. In this case, we only want to nest \u003ccode\u003e:show\u003c/code\u003e and \u003ccode\u003e:index\u003c/code\u003e under \u003ccode\u003e:authors\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eUnder that, we still have our regular resourced \u003ccode\u003e:posts\u003c/code\u003e routes because we still want to let people see all posts, create and edit posts, and so on outside of the context of an author.\u003c/p\u003e  \u003cp\u003eNow we need to update our \u003ccode\u003eposts_controller\u003c/code\u003e to handle the nested resource we just set up. Notice how now we are dealing with the \u003ccode\u003eposts_controller\u003c/code\u003e rather than the \u003ccode\u003eauthors_controller\u003c/code\u003e. Ultimately, the resource we're requesting is related to posts, so Separation of Concerns tells us to put that code in the \u003ccode\u003eposts_controller\u003c/code\u003e. And, since we already have actions to handle \u003ccode\u003e:show\u003c/code\u003e and \u003ccode\u003e:index\u003c/code\u003e, we won't be repeating ourselves like we did in the \u003ccode\u003eauthors_controller\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's update \u003ccode\u003eindex\u003c/code\u003e and \u003ccode\u003eshow\u003c/code\u003e to account for the new routes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003e  def index\u003cbr\u003e    if params[:author_id]\u003cbr\u003e      @posts = Author.find(params[:author_id]).posts\u003cbr\u003e    else\u003cbr\u003e      @posts = Post.all\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def show\u003cbr\u003e    @post = Post.find(params[:id])\u003cbr\u003e  end \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe added a conditional to the \u003ccode\u003eposts#index\u003c/code\u003e action to account for whether the user is trying to access the index of \u003cem\u003eall\u003c/em\u003e posts (\u003ccode\u003ePost.all\u003c/code\u003e) or just the index of all posts \u003cem\u003eby a certain author\u003c/em\u003e (\u003ccode\u003eAuthor.find(params[:author_id]).posts\u003c/code\u003e). The conditional hinges on whether there's an \u003ccode\u003e:author_id\u003c/code\u003e key in the \u003ccode\u003eparams\u003c/code\u003e hash — in other words, whether the user navigated to \u003ccode\u003e/authors/:id/posts\u003c/code\u003e or simply \u003ccode\u003e/posts\u003c/code\u003e. We didn't have to create any new methods or make explicit calls to render new templates. We just added a simple check for \u003ccode\u003eparams[:author_id]\u003c/code\u003e, and we're good to go.\u003c/p\u003e  \u003cp\u003eWhere is \u003ccode\u003eparams[:author_id]\u003c/code\u003e coming from? Rails provides it for us through the nested route, so we don't have to worry about a collision with the \u003ccode\u003e:id\u003c/code\u003e parameter that \u003ccode\u003eposts#show\u003c/code\u003e is looking for. Rails takes the parent resource's name and appends \u003ccode\u003e_id\u003c/code\u003e to it for a nice, predictable way to find the parent resource's ID.\u003c/p\u003e  \u003cp\u003eBut, wait– we didn't make a single change to the \u003ccode\u003eposts#show\u003c/code\u003e action. What about the new \u003ccode\u003e/authors/:id/posts/:id\u003c/code\u003e route that we added? Remember, the point of nesting our resources is to DRY up our code. We had to create a conditional for the \u003ccode\u003eposts#index\u003c/code\u003e action because it renders \u003cem\u003edifferent\u003c/em\u003e sets of posts depending on the path, \u003ccode\u003e/authors/:id/posts\u003c/code\u003e or \u003ccode\u003e/posts\u003c/code\u003e. Conversely, the \u003ccode\u003eposts#show\u003c/code\u003e route is going to render the \u003cem\u003esame\u003c/em\u003e information — data concerning a single post — regardless of whether it is accessed via \u003ccode\u003e/authors/:id/posts/:id\u003c/code\u003e or \u003ccode\u003e/posts/:id\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eFor good measure, let's go into our \u003ccode\u003eauthors_controller.rb\u003c/code\u003e and delete the two actions (\u003ccode\u003epost\u003c/code\u003e and \u003ccode\u003eposts_index\u003c/code\u003e) that we added above so that it looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/authors_controller.rb\u003cbr\u003e\u003cbr\u003eclass AuthorsController \u0026lt; ApplicationController\u003cbr\u003e\u003cbr\u003e  def show\u003cbr\u003e    @author = Author.find(params[:id])\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e Keep your application clean and easy to maintain by always removing unused code.\u003c/p\u003e  \u003ch3\u003eNested Route URL Helpers\u003c/h3\u003e  \u003cp\u003eWe've got our routes working and the \u003ccode\u003eposts_controller\u003c/code\u003e is handling its business, but how can we present this on the page so that someone knows how to find a link to an author's posts?\u003c/p\u003e  \u003cp\u003eJust like any other resourced route, Rails provides named helpers for our nested routes as well. And, just like most other things Rails provides, there's a predictable way to figure out what they are.\u003c/p\u003e  \u003cp\u003eIf we want to get to the \u003ccode\u003e/authors\u003c/code\u003e page, we know the URL helpers are \u003ccode\u003eauthors_path\u003c/code\u003e and \u003ccode\u003eauthors_url\u003c/code\u003e. And if we want to get to a single author (\u003ccode\u003e/authors/:id\u003c/code\u003e), we can use \u003ccode\u003eauthor_path(id)\u003c/code\u003e. Similarly, we have \u003ccode\u003eposts_path\u003c/code\u003e for \u003ccode\u003e/posts\u003c/code\u003e and \u003ccode\u003epost_path(id)\u003c/code\u003e for \u003ccode\u003e/posts/:id\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eSo what if we want to get to all posts nested under an author?\u003c/p\u003e  \u003cp\u003eWe know the URL is \u003ccode\u003e/authors/:author_id/posts\u003c/code\u003e, so we can combine the two conventions and use \u003ccode\u003eauthor_posts_path(author_id)\u003c/code\u003e. Remember it's the singular \u003ccode\u003eauthor\u003c/code\u003e because we are getting one by \u003ccode\u003eid\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIt stands to reason that a single post for an author would combine the conventions for the single author path and single post path, leaving us with \u003ccode\u003eauthor_post_path(author_id, post_id)\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eOnce you become accustomed to breaking it down in that way, it's pretty straightforward to know what our URL helpers will be for a nested route. However, if you're not sure, or if you just want to double-check, you can use \u003ccode\u003erake routes\u003c/code\u003e on the command line to get a printout of all your named routes, like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e      Prefix Verb  URI Pattern                             Controller#Action\u003cbr\u003e  test_index GET   /test/index(.:format)                   test#index\u003cbr\u003eauthor_posts GET   /authors/:author_id/posts(.:format)     posts#index\u003cbr\u003e author_post GET   /authors/:author_id/posts/:id(.:format) posts#show\u003cbr\u003e      author GET   /authors/:id(.:format)                  authors#show\u003cbr\u003e       posts GET   /posts(.:format)                        posts#index\u003cbr\u003e             POST  /posts(.:format)                        posts#create\u003cbr\u003e    new_post GET   /posts/new(.:format)                    posts#new\u003cbr\u003e   edit_post GET   /posts/:id/edit(.:format)               posts#edit\u003cbr\u003e        post GET   /posts/:id(.:format)                    posts#show\u003cbr\u003e             PATCH /posts/:id(.:format)                    posts#update\u003cbr\u003e             PUT   /posts/:id(.:format)                    posts#update\u003cbr\u003e        root GET   /                                       posts#index \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou can also view this in your browser anytime you type in an incorrect route or if you visit \u003ccode\u003erails/info/routes.\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eIf you add \u003ccode\u003e_path\u003c/code\u003e or \u003ccode\u003e_url\u003c/code\u003e to any of the names under \"Prefix\", you'll have the helper for that route.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e Using \u003ccode\u003erake routes\u003c/code\u003e can be a lot easier than browsing the \u003ccode\u003eroutes.rb\u003c/code\u003e file once a project gets to a certain size, but the output might be overwhelming. Remember that you can \u003ccode\u003egrep\u003c/code\u003e the output of any command to search for what you want. So in the example above, if you just wanted to search for routes related to authors, you could type \u003ccode\u003erake routes | grep authors\u003c/code\u003e to get a filtered list.\u003c/p\u003e  \u003cp\u003eLet's make it easy for our readers to look at the posts for each of our authors using these helpers.\u003c/p\u003e  \u003cp\u003eIn \u003ccode\u003eposts/index.html.erb\u003c/code\u003e, we already show the author's name, so let's add a link to the list of the author's posts:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/index.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  \u0026lt;h2\u0026gt;\u0026lt;%= post.title %\u0026gt;\u0026lt;/h2\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;!-- change the name to a link --\u0026gt;\u003cbr\u003e  \u0026lt;h3\u0026gt;by: \u0026lt;%= link_to post.author.name, author_posts_path(post.author) %\u0026gt;\u0026lt;/h3\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;\u0026lt;%= post.description %\u0026gt;\u0026lt;/p\u0026gt;\u003cbr\u003e\u003cbr\u003e  ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's reload \u003ccode\u003e/posts\u003c/code\u003e and click on an author name. We should be taken to \u003ccode\u003e/authors/id/posts\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eGreat! Now our URLs properly reflect the relationship of our resources and read almost like an English sentence: \u003ccode\u003eauthors/1/posts\u003c/code\u003e = \"author number one's posts.\"\u003c/p\u003e  \u003cp\u003eSometimes people get confused by path helpers and what they take as arguments. For example, why does \u003ccode\u003eposts_path\u003c/code\u003e not take an argument, but \u003ccode\u003epost_path(@post)\u003c/code\u003e does? \u003ccode\u003eposts_path\u003c/code\u003e refers to all of the posts, so we're not talking about a specific post (no specific ID). When we're looking at the \u003ccode\u003epost_path\u003c/code\u003e, we're referring to a specific post, and the Rails helper needs to know \u003cem\u003ewhich\u003c/em\u003e post so that it can generate the proper url, e.g., \u003ccode\u003eposts/1\u003c/code\u003e as opposed to \u003ccode\u003eposts/2\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eCaveat on Nesting Resources More Than One Level Deep\u003c/h3\u003e  \u003cp\u003eYou can nest resources more than one level deep, but that is generally a bad idea.\u003c/p\u003e  \u003cp\u003eImagine if we also had comments in this blog. This would be a perfectly fine use of nesting:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eresources :posts do\u003cbr\u003e  resources :comments\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe could then link to a post's comments with \u003ccode\u003epost_comments_path\u003c/code\u003e or \u003ccode\u003e/posts/1/comments\u003c/code\u003e. That makes a lot of sense.\u003c/p\u003e  \u003cp\u003eBut if we then tried to add to our already nested \u003ccode\u003eposts\u003c/code\u003e resource...\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eresources :authors do\u003cbr\u003e  resources :posts do\u003cbr\u003e    resources :comments\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we're getting into messy territory. Our \u003ccode\u003ecomments_path\u003c/code\u003e helper is now \u003ccode\u003eauthor_post_comments_path\u003c/code\u003e, our URL is \u003ccode\u003e/authors/1/posts/1/comments\u003c/code\u003e, and we have to handle that filtering in our controller.\u003c/p\u003e  \u003cp\u003eBut if we lean on our old friend Separation of Concerns, we can conclude that a post's comments are not the concern of an author and therefore don't belong nested two levels deep under the \u003ccode\u003e:authors\u003c/code\u003e resource.\u003c/p\u003e  \u003cp\u003eIn addition, the reason to put the ID of the resource in the URL is so that we have access to it in the controller. If we know we have the post with an ID of \u003ccode\u003e1\u003c/code\u003e, we can use our Active Record relationships to call:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  @post = Post.find(params[:id])\u003cbr\u003e  @post.author # This will tell us who the author of the post was! We don't need this information in the URL \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eNesting resources is a powerful tool that helps you keep your routes neat and tidy and is better than dynamic route segments for representing parent/child relationships in your system.\u003c/p\u003e  \u003cp\u003eHowever, as a general rule, you should only nest resources one level deep and ensure that you are considering Separation of Concerns in your routing.\u003c/p\u003e","exportId":"g6f73e397615bed050f35e91aa44651e1"},{"id":220715,"title":"Nested Resources Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"routing-nested-resources-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/routing-nested-resources-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/routing-nested-resources-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/routing-nested-resources-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eWrite nested routes\u003c/li\u003e\n\u003cli\u003eFilter data sets based on nesting\u003c/li\u003e\n\u003cli\u003eHandle errors in nested routes\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to extend our song library using nested\nresources to build new routes for our artists and songs. Then, we'll use\nthe URL helpers in our views to expose these new routes.\u003c/p\u003e\n\n\u003cp\u003eWe'll also be handling errors when nested resources aren't found so\nthat we can provide a more professional experience to our users.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThe base models, controllers, views, and other files have been provided. There are tests for the lab in the \u003ccode\u003espec\u003c/code\u003e directory. You can run tests with the \u003ccode\u003erspec\u003c/code\u003e command.\u003c/p\u003e\n\n\u003cp\u003eRemember to \u003ccode\u003erake db:seed\u003c/code\u003e to set up a starter song library!\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate nested resource routes to show all songs for an artist (\u003ccode\u003e/artists/1/songs\u003c/code\u003e) and individual songs for that artist (\u003ccode\u003e/artists/1/songs/1\u003c/code\u003e). Restrict the nested songs routes to \u003ccode\u003eindex\u003c/code\u003e and \u003ccode\u003eshow\u003c/code\u003e actions only.\u003c/li\u003e\n\u003cli\u003eUpdate the artists \u003ccode\u003eindex\u003c/code\u003e view to use the new nested resource route URL helper to link to the index of all songs by that artist.\u003c/li\u003e\n\u003cli\u003eUpdate the artists \u003ccode\u003eshow\u003c/code\u003e view to list each song for that artist, and use the new nested resource route helper to link each song to its corresponding \u003ccode\u003eshow\u003c/code\u003e page.\u003c/li\u003e\n\u003cli\u003eUpdate the \u003ccode\u003esongs_controller\u003c/code\u003e to allow the \u003ccode\u003esongs#index\u003c/code\u003e and \u003ccode\u003esongs#show\u003c/code\u003e actions to handle a valid song for the artist.\u003c/li\u003e\n\u003cli\u003eIn the \u003ccode\u003esongs#index\u003c/code\u003e action, if the artist can't be found, redirect to the \u003ccode\u003eindex\u003c/code\u003e of artists, and set a \u003ccode\u003eflash[:alert]\u003c/code\u003e of \"Artist not found.\"\u003c/li\u003e\n\u003cli\u003eIn the \u003ccode\u003esongs#show\u003c/code\u003e action, if the song can't be found for a given artist, redirect to the \u003ccode\u003eindex\u003c/code\u003e of the artist's songs and set a\n\u003ccode\u003eflash[:alert]\u003c/code\u003e of \"Song not found.\"\u003c/li\u003e\n\u003cli\u003eMake sure all tests pass; then, party down!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cimg src=\"http://i.giphy.com/l41lNRz0uXPQLm0RG.gif\" alt=\"Party Down\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHints\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eFor a refresher on the use of \u003ccode\u003eflash\u003c/code\u003e, see the \u003ca href=\"http://guides.rubyonrails.org/action_controller_overview.html#the-flash\"\u003eActionController RailsGuide\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eRemember when filtering nested resources to query for the children through the parent, e.g., \u003ccode\u003e@artist.songs.find_by(id: ...)\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eThere's more than one way to ride the Rails. You could handle not being able to find a record by using \u003ccode\u003erescue ActiveRecord::RecordNotFound\u003c/code\u003e, or you could try using \u003ccode\u003efind_by(id: id)\u003c/code\u003e instead of \u003ccode\u003efind()\u003c/code\u003e and checking to see whether the result is \u003ccode\u003enil\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g761f97e8db4e1cd776351c5dbb67f27a"},{"id":220720,"title":"Modifying Nested Resources","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"modification-nested-routes-reading\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/modification-nested-routes-reading/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/modification-nested-routes-reading\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/modification-nested-routes-reading/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eUnderstand how to handle modifications (create/update) of nested resources.\u003c/li\u003e \u003cli\u003eHandle errors and validate data from nested resources.\u003c/li\u003e \u003cli\u003eReview the use of view helpers to keep views clean.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eLesson\u003c/h2\u003e  \u003cp\u003eContinuing with our blog application, we're going to extend our nested resources to allow for creating and modifying blog posts by author.\u003c/p\u003e  \u003ch3\u003eCreating A New Post For An Author\u003c/h3\u003e  \u003cp\u003eThe first thing we want to do is create a new post that is automatically linked to an \u003ccode\u003eAuthor\u003c/code\u003e. We could set up a select box on the post page and make the user choose an author. However, if we're already on the author's new post page, we know who the author is, so why not do it without forcing the user to choose?\u003c/p\u003e  \u003cp\u003eWe already used nested resources to view posts by author, so now let's look at nested resources to create posts by author. As usual, we want to start with the route. We want to add \u003ccode\u003e:new\u003c/code\u003e to our nested \u003ccode\u003e:posts\u003c/code\u003e resource:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003eresources :authors, only: [:show, :index] do\u003cbr\u003e  resources :posts, only: [:show, :index, :new]\u003cbr\u003eend\u003cbr\u003eresources :posts \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis gives us access to \u003ccode\u003e/authors/:author_id/posts/new\u003c/code\u003e, and a \u003ccode\u003enew_author_post_path\u003c/code\u003e helper.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e Remember to run \u003ccode\u003erake routes\u003c/code\u003e if you're unsure of the URL helper name.\u003c/p\u003e  \u003cp\u003eWe have the route, so now we need to update our \u003ccode\u003eposts_controller#new\u003c/code\u003e action to handle the \u003ccode\u003e:author_id\u003c/code\u003e parameter.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef new\u003cbr\u003e  @post = Post.new(author_id: params[:author_id])\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we're passing the \u003ccode\u003eparams[:author_id]\u003c/code\u003e into \u003ccode\u003ePost.new()\u003c/code\u003e. We want to make sure that, if we capture an \u003ccode\u003eauthor_id\u003c/code\u003e through a nested route, we keep track of it and assign the post to that author. We'll actually be carrying this \u003ccode\u003eid\u003c/code\u003e with us for the next few steps, babysitting it through the server request/response cycle.\u003c/p\u003e  \u003cp\u003eNow let's get into our author \u003ccode\u003eshow\u003c/code\u003e template and add a link to the nested new post page for that author.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- authors/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @author.name %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= link_to \"New Post\", new_author_post_path(@author) %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;p\u0026gt;Posts:\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;% @author.posts.each do |post| %\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u0026lt;%= post.title %\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's launch the app (don't forget to \u003ccode\u003erake db:seed\u003c/code\u003e), browse to \u003ccode\u003e/authors\u003c/code\u003e, click on an author's name, and then click the new post link. Once there, let's make a post.\u003c/p\u003e  \u003cp\u003eSomething seems off. Where's our author? Looks like we didn't do a great job babysitting that \u003ccode\u003eauthor_id\u003c/code\u003e. We set it up in the \u003ccode\u003enew\u003c/code\u003e action, but it never made it to the view so that it could get submitted back to the server. Let's fix that. Open up the post form partial and add a hidden field for the \u003ccode\u003e:author_id\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- posts/_form.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for(@post) do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= f.hidden_field :author_id %\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post Description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_area :description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we reload the new post page for the author and inspect the source, we should see something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;input type=\"hidden\" value=\"1\" name=\"post[author_id]\" id=\"post_author_id\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGreat. That part's working, but we need to carry that \u003ccode\u003eauthor_id\u003c/code\u003e with us even further.\u003c/p\u003e  \u003cp\u003eRemember \u003ca href=\"http://guides.rubyonrails.org/action_controller_overview.html#strong-parameters\"\u003eStrong Parameters\u003c/a\u003e? We need to update our \u003ccode\u003eposts_controller\u003c/code\u003e to accept \u003ccode\u003e:author_id\u003c/code\u003e as a parameter for a post. So let's get in there and modify our \u003ccode\u003epost_params\u003c/code\u003e method.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# controllers/posts_controller.rb\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003eprivate\u003cbr\u003e\u003cbr\u003edef post_params\u003cbr\u003e  params.require(:post).permit(:title, :description, :author_id)\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we know the \u003ccode\u003eauthor_id\u003c/code\u003e will be allowed for mass-assignment in the \u003ccode\u003ecreate\u003c/code\u003e action.\u003c/p\u003e  \u003cp\u003eLet's try it out. Go to an author's new post page, and make a post. We should see the author's name in the byline now!\u003c/p\u003e  \u003cp\u003eWhy didn't we have to make a nested resource route for \u003ccode\u003e:create\u003c/code\u003e in addition to \u003ccode\u003e:new\u003c/code\u003e? \u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003eform_for(@post)\u003c/code\u003e helper in \u003ccode\u003eposts/_form.html.erb\u003c/code\u003e will automatically route to \u003ccode\u003ePOST posts_controller#create\u003c/code\u003e for a new \u003ccode\u003ePost\u003c/code\u003e. By carrying the \u003ccode\u003eauthor_id\u003c/code\u003e as we did and allowing it through strong parameters, the existing \u003ccode\u003ecreate\u003c/code\u003e route and action can be used without needing to do anything else.\u003c/p\u003e  \u003ch3\u003eEditing An Author's Posts\u003c/h3\u003e  \u003cp\u003eWe can use the same technique to allow us to directly edit an author's posts.\u003c/p\u003e  \u003cp\u003eFirst, we allow the \u003ccode\u003e:edit\u003c/code\u003e action in the nested route:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003eresources :authors, only: [:show, :index] do\u003cbr\u003e  resources :posts, only: [:show, :index, :new, :edit]\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe don't have to change any views because \u003ccode\u003enew\u003c/code\u003e and \u003ccode\u003eedit\u003c/code\u003e both use the same \u003ccode\u003e_form\u003c/code\u003e partial that already has the \u003ccode\u003eauthor_id\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eNow we need to update our post \u003ccode\u003eshow\u003c/code\u003e view to give us the new nested link to edit the post for the author.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- posts/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;by \u0026lt;%= link_to @post.author.name, author_path(@post.author) if @post.author %\u0026gt; (\u0026lt;%= link_to \"Edit Post\", edit_author_post_path(@post.author, @post) if @post.author %\u0026gt;)\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;\u0026lt;%= @post.description %\u0026gt; \u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe need to make one small change to the controller:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef update\u003cbr\u003e  @post = Post.find(params[:id])\u003cbr\u003e  @post.update(post_params)\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if we try it out, everything should work just fine. Reload the page, click the edit link, and edit the post.\u003c/p\u003e  \u003cp\u003ePretty easy, right? What's the catch?\u003c/p\u003e  \u003ch3\u003eHandling Mischief And Errors In Our URLs\u003c/h3\u003e  \u003cp\u003eThe catch is that we've opened ourselves up to a couple of potential bugs or, worse, opportunities for our more playful users to make a mess of our data. Let's work backward, starting with our recent changes to \u003ccode\u003eedit\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf you go back to your author post edit page, you'll see a URL similar to \u003ccode\u003ehttp://localhost:3000/authors/1/posts/1/edit\u003c/code\u003e. This tells us that we are editing the \u003ccode\u003ePost\u003c/code\u003e with \u003ccode\u003eid: 1\u003c/code\u003e by the \u003ccode\u003eAuthor\u003c/code\u003e with \u003ccode\u003eid: 1\u003c/code\u003e. But what if we change that \u003ccode\u003eauthor_id\u003c/code\u003e in the URL? Try browsing to \u003ccode\u003ehttp://localhost:3000/authors/123456/posts/1/edit\u003c/code\u003e, and see what happens.\u003c/p\u003e  \u003cp\u003eWe end up on the same page! But post \u003ccode\u003e1\u003c/code\u003e belongs to author \u003ccode\u003e1\u003c/code\u003e — not author \u003ccode\u003e123456\u003c/code\u003e. In fact, there \u003cem\u003eis no\u003c/em\u003e author \u003ccode\u003e123456\u003c/code\u003e in the system. How is this happening?\u003c/p\u003e  \u003cp\u003eRemember how we didn't have to change the controller when we added the nested resource route for \u003ccode\u003e:edit\u003c/code\u003e? Well, this is the price we pay for taking shortcuts. What we should do is check to make sure that 1) the \u003ccode\u003eauthor_id\u003c/code\u003e is valid and 2) the post matches the author. So let's fix that now.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef edit\u003cbr\u003e  if params[:author_id]\u003cbr\u003e    author = Author.find_by(id: params[:author_id])\u003cbr\u003e    if author.nil?\u003cbr\u003e      redirect_to authors_path, alert: \"Author not found.\"\u003cbr\u003e    else\u003cbr\u003e      @post = author.posts.find_by(id: params[:id])\u003cbr\u003e      redirect_to author_posts_path(author), alert: \"Post not found.\" if @post.nil?\u003cbr\u003e    end\u003cbr\u003e  else\u003cbr\u003e    @post = Post.find(params[:id])\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we're looking for the existence of \u003ccode\u003eparams[:author_id]\u003c/code\u003e, which we know would come from our nested route. If it's there, we want to make sure that we find a valid author. If we can't, we redirect them to the \u003ccode\u003eauthors_path\u003c/code\u003e with a \u003ccode\u003eflash[:alert]\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf we do find the author, we next want to find the post by \u003ccode\u003eparams[:id]\u003c/code\u003e, but, instead of directly looking for \u003ccode\u003ePost.find()\u003c/code\u003e, we need to filter the query through our \u003ccode\u003eauthor.posts\u003c/code\u003e collection to make sure we find it in that author's posts. It may be a valid post \u003ccode\u003eid\u003c/code\u003e, but it might not belong to that author, which makes this an invalid request.\u003c/p\u003e  \u003cp\u003eNow if we go back and try our invalid URL (\u003ccode\u003ehttp://localhost:3000/authors/123456/posts/1/edit\u003c/code\u003e), we should be redirected back to where we belong.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e One of the downsides of RESTful URL schemes is that curious users can edit the URLs to try to explore the system further. This is how we discovered \u003ca href=\"http://mashable.com/2016/01/11/netflix-search-codes/#LM6QcfeksZqG\"\u003eall the hidden Netflix genres\u003c/a\u003e. However, this could also lead to security holes in your system, allowing users to potentially mismatch id parameters and wreak havoc in your database, so always guard against that by doing what we've done above.\u003c/p\u003e  \u003cp\u003eWhile we're at it, we should fix up our \u003ccode\u003enew\u003c/code\u003e action to ensure that we're creating a new post for a valid author. Let's make it look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef new\u003cbr\u003e  if params[:author_id] \u0026amp;\u0026amp; !Author.exists?(params[:author_id])\u003cbr\u003e    redirect_to authors_path, alert: \"Author not found.\"\u003cbr\u003e  else\u003cbr\u003e    @post = Post.new(author_id: params[:author_id])\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we check for \u003ccode\u003eparams[:author_id]\u003c/code\u003e and then for \u003ccode\u003eAuthor.exists?\u003c/code\u003e to see if the author is real.\u003c/p\u003e  \u003cp\u003eWhy aren't we doing a \u003ccode\u003efind_by\u003c/code\u003e and getting the author instance? Because we don't need a whole author instance for \u003ccode\u003ePost.new\u003c/code\u003e; we just need the \u003ccode\u003eauthor_id\u003c/code\u003e. And we don't need to check against the \u003ccode\u003eposts\u003c/code\u003e of the author because we're just creating a new one. So we use \u003ccode\u003eexists?\u003c/code\u003e to quickly check the database in the most efficient way.\u003c/p\u003e  \u003cp\u003eBut what if \u003ccode\u003eparams[:author_id]\u003c/code\u003e is \u003ccode\u003enil\u003c/code\u003e in the example above? If we just did \u003ccode\u003ePost.new\u003c/code\u003e without the \u003ccode\u003e(author_id: params[:author_id])\u003c/code\u003e argument, the \u003ccode\u003eauthor_id\u003c/code\u003e attribute of the new \u003ccode\u003ePost\u003c/code\u003e would be initialized as \u003ccode\u003enil\u003c/code\u003e anyway. So we don't have to do anything special to handle it. It works for us if there is or isn't an \u003ccode\u003eauthor_id\u003c/code\u003e present.\u003c/p\u003e  \u003cp\u003eWhich brings us to the last thing we have to do.\u003c/p\u003e  \u003ch3\u003eMissing Authors\u003c/h3\u003e  \u003cp\u003eWhen someone creates a new post via our nested route, we automatically assign an author, and everything works great. But what about when they create a new post from the regular old \u003ccode\u003enew_post_path\u003c/code\u003e?\u003c/p\u003e  \u003cp\u003eWe could just eliminate that route and only allow post creation through the nested resource. That might be a valid choice in some applications.\u003c/p\u003e  \u003cp\u003eBut we've decided we want to be able to select an author at the time of posting if we haven't used the nested route.\u003c/p\u003e  \u003cp\u003eSince we're already set up to handle \u003ccode\u003eauthor_id\u003c/code\u003e on the controller, all we have to do is augment our \u003ccode\u003eposts/_form.html.erb\u003c/code\u003e partial to present a list of authors when none is present.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- posts/_form.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for(@post) do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;% if @post.author.nil? %\u0026gt;\u003cbr\u003e    \u0026lt;%= f.select :author_id, options_from_collection_for_select(Author.all, :id, :name) %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;% end %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.hidden_field :author_id %\u0026gt;\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat gives us a select control if we don't have an author, but we have a problem. We can only have one \u003ccode\u003e:author_id\u003c/code\u003e field. We could put that \u003ccode\u003ehidden_field\u003c/code\u003e in an \u003ccode\u003eelse\u003c/code\u003e, which would work, but then we would have a whole bunch of logic cluttering up our view. So let's dump it in our \u003ccode\u003eposts_helper\u003c/code\u003e and clean up that form.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# helpers/posts_helper.rb\u003cbr\u003e\u003cbr\u003emodule PostsHelper\u003cbr\u003e  def author_id_field(post)\u003cbr\u003e    if post.author.nil?\u003cbr\u003e      select_tag \"post[author_id]\", options_from_collection_for_select(Author.all, :id, :name)\u003cbr\u003e    else\u003cbr\u003e      hidden_field_tag \"post[author_id]\", post.author_id\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd back in our form partial:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- posts/_form.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for(@post) do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= author_id_field(@post) %\u0026gt;\u003cbr\u003e  \u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we should have a selector when we browse to \u003ccode\u003e/posts/new\u003c/code\u003e and a hidden \u003ccode\u003eauthor_id\u003c/code\u003e field when we browse to \u003ccode\u003e/authors/1/posts/new\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eWe've seen how to create and edit nested resources, handle for errors or mischievous users in our parameters, and use helpers to extend our views to handle for nested and non-nested versions of the resource.\u003c/p\u003e  \u003cp\u003eYou're well on your way to becoming a nested resource ninja!\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"http://i.giphy.com/ErdfMetILIMko.gif\" alt=\"Ninja Baby\"\u003e\u003c/p\u003e","exportId":"gc1c1bc2211f738fdfe4994cce3c36039"},{"id":220724,"title":"Nested Routes Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"modification-nested-routes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/modification-nested-routes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/modification-nested-routes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/modification-nested-routes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eImplement nested resources for creation and modification\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to be implementing nested resources for\ncreating and editing songs through an artist.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUsing nested resources, set up routes and controller actions to\ncreate new \u003ccode\u003esong\u003c/code\u003e records through an \u003ccode\u003eartist\u003c/code\u003e. \u003cstrong\u003eHint:\u003c/strong\u003e Don't forget\nto update the strong parameters.\u003c/li\u003e\n\u003cli\u003eSet up routes and controller actions to support editing a \u003ccode\u003esong\u003c/code\u003e as a\nnested resource of an \u003ccode\u003eartist\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eCreate a helper to display a drop-down list of artists if someone\nedits a song directly via \u003ccode\u003e/songs/:id/edit\u003c/code\u003e and to only display the\nartist's name if they are editing through nested routing. Name the\nhelper method \u003ccode\u003eartist_select\u003c/code\u003e. \u003cstrong\u003eHint:\u003c/strong\u003e You'll need to set a variable\nin the controller action to pass to the helper method as an argument\nalong with a \u003ccode\u003esong\u003c/code\u003e instance.\u003c/li\u003e\n\u003cli\u003eValidate that new songs created for an artist via nested routing are\ncreated for valid artists, and redirect to \u003ccode\u003e/artists\u003c/code\u003e if not.\u003c/li\u003e\n\u003cli\u003eValidate that songs being edited via nested routing have a valid artist. Redirect to \u003ccode\u003e/artists\u003c/code\u003e if not.\u003c/li\u003e\n\u003cli\u003eValidate that songs being edited via nested routing are in the\nartist's \u003ccode\u003esongs\u003c/code\u003e collection. Redirect to \u003ccode\u003e/artists/:artist_id/songs\u003c/code\u003e if not.\u003c/li\u003e\n\u003cli\u003eMake sure all tests pass!\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g6e34a5d76f8eb8555a17f5d115d6d0fd"},{"id":220728,"title":"Namespaced Routes","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"namespaced-routes-reading\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/namespaced-routes-reading/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/namespaced-routes-reading\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/namespaced-routes-reading/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the use of \u003ccode\u003escope\u003c/code\u003e and \u003ccode\u003enamespace\u003c/code\u003e in \u003ccode\u003eroutes.rb\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eCreate a module scoped controller.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eLesson\u003c/h2\u003e\n\n\u003cp\u003eWe're going to explore different ways of routing things in our blog application\nto help us organize and group certain routes and controllers more logically.\u003c/p\u003e\n\n\u003ch4\u003eBlog Stats\u003c/h4\u003e\n\n\u003cp\u003eWe decide that we want to keep track of some basic blog statistics, such as how\nmany posts and authors we have. We start by creating a \u003ccode\u003estats_controller.rb\u003c/code\u003e\nwith an \u003ccode\u003eindex\u003c/code\u003e action and corresponding view.\u003c/p\u003e\n\n\u003cp\u003eWe can't actually browse to it yet because we need to set up a route. Let's add it to \u003ccode\u003eroutes.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003eget '/stats', to: 'stats#index'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEasy enough, but, after thinking about it, \u003ccode\u003e/stats\u003c/code\u003e isn't something we want to\njust hang off the root of our blog URL for anyone to see. It's really just for\nblog admins, and we want to set up a URL scheme to segregate admin things into\ntheir own logical space.\u003c/p\u003e\n\n\u003cp\u003eWe modify our route:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003eget '/admin/stats', to: 'stats#index'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can browse to \u003ccode\u003e/admin/stats\u003c/code\u003e for the stats page, and we can no longer go\nstraight to \u003ccode\u003e/stats\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eScoping Routes\u003c/h4\u003e\n\n\u003cp\u003eOver time, we might decide to add more admin functions, grouping them all\ntogether like we did above, until eventually our \u003ccode\u003eroutes.rb\u003c/code\u003e looks something\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\n...\u003cbr\u003e\u003cbr\u003eget '/admin/stats', to: 'stats#index'\u003cbr\u003eget '/admin/authors/new', to: 'authors#new'\u003cbr\u003eget '/admin/authors/delete', to: 'authors#delete'\u003cbr\u003eget '/admin/authors/create', to: 'authors#create'\u003cbr\u003eget '/admin/comments/moderate', to: 'comments#moderate'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, even with only a few more actions in our \u003ccode\u003eadmin\u003c/code\u003e section, our\nroutes are getting ugly. Not to mention we're repeating ourselves a lot by\ntyping in \u003ccode\u003e/admin\u003c/code\u003e on all these routes. Yes, even routes should be DRY!\u003c/p\u003e\n\n\u003cp\u003eWhat we need is a way to group all these under \u003ccode\u003e/admin\u003c/code\u003e without typing \u003ccode\u003e/admin\u003c/code\u003e\nall the time. That's where \u003ccode\u003escope\u003c/code\u003e comes in.\u003c/p\u003e\n\n\u003cp\u003eIn routing, \u003ccode\u003escope\u003c/code\u003e allows us to prefix a block of routes under one grouping. So\nlet's change our stats route:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config\\routes.rb\u003cbr\u003e\u003cbr\u003escope '/admin' do\u003cbr\u003e  resources :stats, only: [:index]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can reload \u003ccode\u003e/admin/stats\u003c/code\u003e, and it still works. Notice our new route is\nresourced. Now that we don't have to manually prefix \u003ccode\u003e/admin\u003c/code\u003e, we can go back to\nusing resourced routes within the \u003ccode\u003e/admin\u003c/code\u003e scope.\u003c/p\u003e\n\n\u003cp\u003eIf you run \u003ccode\u003erake routes\u003c/code\u003e, you'll see that the new \u003ccode\u003e/admin/stats\u003c/code\u003e helpers are\n\u003ccode\u003estats_path\u003c/code\u003e and \u003ccode\u003estats_url\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eScoping With Modules\u003c/h4\u003e\n\n\u003cp\u003eScoping works nicely to group our URLs together logically, but what happens when\nwe have a bunch of controllers that are handling admin functions? As the\napplication grows, it's going to be harder and harder to keep track of which\ncontrollers are for regular blog functions and which are for admin functions.\u003c/p\u003e\n\n\u003cp\u003eWe want to group all our admin controllers logically to make it easier to\nmaintain and add to the app, so let's add an \u003ccode\u003e/admin\u003c/code\u003e directory under\n\u003ccode\u003e/controllers\u003c/code\u003e where all the admin controllers will go:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003emkdir app/controllers/admin\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eNow let's move our \u003ccode\u003estats_controller.rb\u003c/code\u003e into the \u003ccode\u003e/admin\u003c/code\u003e folder:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003emv app/controllers/stats_controller.rb app/controllers/admin\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eWhen you create a new folder under \u003ccode\u003e/controllers\u003c/code\u003e, Rails will automatically pick\nthat up as a \u003ccode\u003emodule\u003c/code\u003e and expect you to namespace the controller accordingly. We\nneed to modify our \u003ccode\u003eadmin/stats_controller.rb\u003c/code\u003e to look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# controllers/admin/stats_controller.rb\u003cbr\u003e\u003cbr\u003eclass Admin::StatsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e\u003cbr\u003e    ...\u003cbr\u003e\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we have our controller in a module, Rails will expect the views to\nmatch. Let's create a new directory at \u003ccode\u003e/app/views/admin/stats\u003c/code\u003e and move our\n\u003ccode\u003estats/index.html.erb\u003c/code\u003e into it, so we'll wind up with\n\u003ccode\u003e/app/views/admin/stats/index.html.erb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e The \u003ccode\u003eviews\u003c/code\u003e folder for a controller module (in this case \u003ccode\u003e/admin\u003c/code\u003e) expects a\nsubfolder structure that matches the names of the controllers (in this case\n\u003ccode\u003e/admin/stats\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eIf we try to reload \u003ccode\u003e/admin/stats\u003c/code\u003e now, we will get an error because we need to\ntell our routes about our new module.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003escope '/admin', module: 'admin' do\u003cbr\u003e  resources :stats, only: [:index]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe're telling \u003ccode\u003escope\u003c/code\u003e that we want to use \u003ccode\u003e/admin\u003c/code\u003e as a URL prefix, and we're\nalso letting Rails know that all of the included routes will be handled by\ncontrollers in the \u003ccode\u003eadmin\u003c/code\u003e module.\u003c/p\u003e\n\n\u003cp\u003eIf we reload \u003ccode\u003e/admin/stats\u003c/code\u003e, everything should work just like it did, but now we\nare logically organizing our controllers.\u003c/p\u003e\n\n\u003ch4\u003eNamespace\u003c/h4\u003e\n\n\u003cp\u003eRight now, our route is scoped as \u003ccode\u003escope '/admin', module: 'admin'\u003c/code\u003e, which is\nfine but perhaps a bit less DRY than we'd like.\u003c/p\u003e\n\n\u003cp\u003eFortunately, Rails gives us a shortcut here. When we want to route with a module\n\u003cem\u003eand\u003c/em\u003e use that module's name as the URL prefix, we can use the \u003ccode\u003enamespace\u003c/code\u003e\nmethod instead of \u003ccode\u003escope, module\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003enamespace :admin do\u003cbr\u003e  resources :stats, only: [:index]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we reload \u003ccode\u003e/admin/stats\u003c/code\u003e, everything still works, but we've simplified the\ndeclaration of the routes. The \u003ccode\u003enamespace\u003c/code\u003e method makes the assumption that the\npath prefix and module name match, saving us some typing.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e There is one important difference between \u003ccode\u003escope '/admin', module: 'admin'\u003c/code\u003e and\n\u003ccode\u003enamespace :admin\u003c/code\u003e, and it's in the URL helpers. Remember above that using\n\u003ccode\u003escope\u003c/code\u003e gave us a \u003ccode\u003estats_path\u003c/code\u003e helper. But now that we are using \u003ccode\u003enamespace\u003c/code\u003e,\nrun \u003ccode\u003erake routes\u003c/code\u003e again. You'll see that the helper is now prefixed with\n\u003ccode\u003eadmin_\u003c/code\u003e, so \u003ccode\u003estats_path\u003c/code\u003e becomes \u003ccode\u003eadmin_stats_path\u003c/code\u003e. If you switch from \u003ccode\u003escope\u003c/code\u003e\nto \u003ccode\u003enamespace\u003c/code\u003e, take care to update any URL helpers you have in use!\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eWe learned how to organize our URLs by using \u003ccode\u003escope\u003c/code\u003e to group them with an\n\u003ccode\u003e/admin\u003c/code\u003e prefix; how to further organize our controllers using directories and\nmodules; and how to use \u003ccode\u003escope, module\u003c/code\u003e or \u003ccode\u003enamespace\u003c/code\u003e in our routes.\u003c/p\u003e","exportId":"g53c5f6d77d9b8c53753996d2be95510d"},{"id":220736,"title":"Namespaced Routes Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"namespaced-routes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/namespaced-routes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/namespaced-routes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/namespaced-routes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eOrganize controllers using a module.\u003c/li\u003e\n\u003cli\u003eUse namespaced routes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe're going to add some administrative functions to our song library.\nUsing what we learned about namespaced routes and module scope, we'll\norganize our controllers and routes under an \u003ccode\u003eadmin\u003c/code\u003e namespace to keep\nthem separate from the regular user functions.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThe base application has been provided with tests. Make sure to run\n\u003ccode\u003erake db:seed\u003c/code\u003e to set up seed data. Tests can be run with \u003ccode\u003erspec\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Since we're building new features on an existing project that\nalready has tests, part of the job is to make sure the tests that\nalready pass at the beginning still pass when you're done!\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a \u003ccode\u003ePreference\u003c/code\u003e model that will store preferences for the app. It will need\nto have fields for:\n\n\u003cul\u003e\n\u003cli\u003eAllowing creation of new songs. Used to control the ability to add new songs to the system.\u003c/li\u003e\n\u003cli\u003eAllowing creation of new artists. Used to control the ability to add new artists to the system.\n\u003cstrong\u003eNote:\u003c/strong\u003e There will only be 1 instance of \u003ccode\u003ePreference\u003c/code\u003e, not a preference associated with each artist/song. After creating the model, run \u003ccode\u003erake preferences:load\u003c/code\u003e so that your code will work in the browser.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCreate a \u003ccode\u003ePreferencesController\u003c/code\u003e, routes, and views. Do this under an \u003ccode\u003eAdmin\u003c/code\u003e module to separate it from the standard user functionality.\u003c/li\u003e\n\u003cli\u003eUpdate the \u003ccode\u003esongs#new\u003c/code\u003e and \u003ccode\u003eartists#new\u003c/code\u003e actions to check that creating new songs or artists is enabled, and redirect to \u003ccode\u003e/songs\u003c/code\u003e and \u003ccode\u003e/artists\u003c/code\u003e, respectively, if that preference is disabled.\u003c/li\u003e\n\u003cli\u003eMake sure tests pass.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cimg src=\"http://i.giphy.com/h2Q9ZYee54UOk.gif\" alt=\"Happy Gilmore\"\u003e\u003c/p\u003e","exportId":"g1ee2828d6cbc11eb432ad90aef9f5d7b"}]},{"id":24123,"name":"Rails as an API","status":"started","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g15a667c64937f780023d4ce84b9ecee0","items":[{"id":220811,"title":"Introduction to Rails as an API","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-intro/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eNow that you've become familiar with asynchronous requests in JavaScript,\nwe are going to take a brief step back and revisit Rails for a few lessons. Rails\nitself can serve as both the frontend and backend of a website, but it can also\nbe configured specifically to work as an API.\u003c/p\u003e\n\n\u003cp\u003eAn API, short for Application Programming Interface, put broadly, is a way for one \nsystem to communicate with other \u003cem\u003eexternal\u003c/em\u003e systems. An API abstracts away any\nof the complicated logic of a system and presents something that is easier to interact with or build\nupon, whether the API is serving up useful functions, services, or data. In relation \nto web development, APIs are often sources of data that we can use in our own \napplications, like weather info or the number of people currently in space.\u003c/p\u003e\n\n\u003cp\u003eUsing Rails, \u003cem\u003ewe can create our own APIs from scratch\u003c/em\u003e - if you've got hold of some data to you'd \nlove to share with the others - for instance statistics about your local sports \nteam or maybe the biographical information of all the characters in your \nfavorite fantasy novel - you could build an API and share that information on the web.\u003c/p\u003e\n\n\u003cp\u003eIn addition, Rails APIs render JSON strings, which is particularly useful, since \nwe can use them when building frontends using JavaScript, DOM manipulation and \nasynchronous requests.\u003c/p\u003e\n\n\u003cp\u003eAs we go through the process of setting up and configuring APIs, we will also \nlook at different ways in which we can organize the data the API is providing. As\nthe creator of an API, you have full control over how information is structured,\nand must always consider how that structure affects your code.\u003c/p\u003e\n\n\u003cp\u003eWith some practice building APIs in Rails, combined with your skills with fetch\nin JavaScript, you will be able to build full stack applications by the end of\nthis section.\u003c/p\u003e","exportId":"introduction-to-rails-as-an-api"},{"id":220816,"title":"Review of the Rails MVC","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-review-of-rails-mvc\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-review-of-rails-mvc/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-review-of-rails-mvc\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-review-of-rails-mvc/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eReview the MVC structure of Rails\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe left Rails with the ability to manage data and display it in a browser using models, views and controllers. As we have seen, Rails can entirely handle the front and backend of a website - one reason it is a great tool for web development.\u003c/p\u003e  \u003cp\u003eWith Rails, though, we aren't required to strictly render ERB views. In this code-along, we're going to briefly review the MVC structure of Rails as well as rendering through the Rails controller. The basic files of a Rails app are  provided in this lesson, but some files will need content from this Readme to  function.\u003c/p\u003e  \u003ch2\u003eReview of MVC Structure\u003c/h2\u003e  \u003cp\u003eThe model, view, controller structure is a separation of concerns where groups of files have specific jobs and interact with each other in very defined ways:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eModels:\u003c/strong\u003e The 'logic' of a web application. This is where data is manipulated and/or saved to a database.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eViews:\u003c/strong\u003e The 'frontend', user-facing part of a web application - this is the only part of the app that the user interacts with directly. Views generally consist of HTML, CSS, and Javascript.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eControllers:\u003c/strong\u003e The go-between for models and views. The controller relays data from the browser to the application, and from the application to the browser.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eTo review the model, view, controller structure in Rails, we're going to quickly walk through the setting up a basic resource. \u003c/p\u003e  \u003cp\u003eLet's imagine we want to build an amateur bird watching website. To start, we'll  just try to create a site that displays different types of birds. Using Rails and  this MVC pattern, the data about these birds would be contained within a database,  so let's set that up.\u003c/p\u003e  \u003cp\u003eFirst, we need a migration to set up the database:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# db/migrate/2019_create_birds.rb\u003cbr\u003e\u003cbr\u003eclass CreateBirds \u0026lt; ActiveRecord::Migration[5.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :birds do |t|\u003cbr\u003e      t.string :name\u003cbr\u003e      t.string :species\u003cbr\u003e\u003cbr\u003e      t.timestamps\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen run \u003ccode\u003erails db:migrate\u003c/code\u003e to create the schema. We set this up first because we quickly move away from working directly with the database. With Rails, we actually want to create a model to represent and manipulate the data. Create the following \u003ccode\u003eBird\u003c/code\u003e model in \u003ccode\u003eapp/models/bird.rb\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Bird \u0026lt; ApplicationRecord\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u0026gt; \u003cstrong\u003eASIDE:\u003c/strong\u003e By inheriting from \u003ccode\u003eApplicationRecord\u003c/code\u003e, \u003ccode\u003eBird\u003c/code\u003e also inherits from \u0026gt; \u003ca href=\"https://guides.rubyonrails.org/active_record_basics.html\"\u003e\u003ccode\u003eActiveRecord\u003c/code\u003e\u003c/a\u003e, which you may remember is an \u003ca href=\"https://en.wikipedia.org/wiki/Object-relational_mapping\"\u003eORM\u003c/a\u003e, or Object \u0026gt; Relational Map. Because of this, we gain many useful methods like \u003ccode\u003eall\u003c/code\u003e and \u0026gt; \u003ccode\u003esave\u003c/code\u003e without having to include any additional methods.\u003c/p\u003e  \u003cp\u003eWith a model and the database set up, we can add a little data to help display our view later. Some seed data is provided in \u003ccode\u003edb/seeds.rb\u003c/code\u003e; just run \u003ccode\u003erails db:seed\u003c/code\u003e and it should create four \u003ccode\u003eBird\u003c/code\u003e records. You can always check these by running \u003ccode\u003erails console\u003c/code\u003e, then use \u003ccode\u003eBird.all\u003c/code\u003e to confirm these instances are appearing.\u003c/p\u003e  \u003cp\u003eNow we can configure a route and corresponding controller method. To keep things simple, We'll just set up a basic \u003ccode\u003eindex\u003c/code\u003e action with a route:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eRails.application.routes.draw do\u003cbr\u003e  get '/birds' =\u0026gt; 'birds#index'\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd a controller with corresponding action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAny visitors to \u003ccode\u003e'/birds'\u003c/code\u003e will get routed to the \u003ccode\u003eindex\u003c/code\u003e action in the \u003ccode\u003eBirdsController\u003c/code\u003e. This action shows one thing - get all instances of the \u003ccode\u003eBird\u003c/code\u003e model and store them in a variable, \u003ccode\u003e@birds\u003c/code\u003e. Now the controller and model are set up to work together.\u003c/p\u003e  \u003cp\u003eRails favors convention over configuration. For this reason, if a \u003cstrong\u003e\u003cem\u003efolder\u003c/em\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003cem\u003efile\u003c/em\u003e\u003c/strong\u003e are present in the \u003cstrong\u003e\u003cem\u003eviews\u003c/em\u003e\u003c/strong\u003e folder that correspond to a \u003cstrong\u003e\u003cem\u003econtroller\u003c/em\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003cem\u003eaction\u003c/em\u003e\u003c/strong\u003e listed on a \u003cstrong\u003e\u003cem\u003eroute\u003c/em\u003e\u003c/strong\u003e, Rails will display that \u003cstrong\u003e\u003cem\u003eview\u003c/em\u003e\u003c/strong\u003e by default. \u003c/p\u003e  \u003cp\u003eIn our example, we have a route pointed to \u003ccode\u003e'birds#index'\u003c/code\u003e. In \u003ccode\u003eapp/views\u003c/code\u003e, we \u003cem\u003ealso\u003c/em\u003e have a \u003ccode\u003e/birds\u003c/code\u003e folder containing \u003ccode\u003eindex.html.erb\u003c/code\u003e. Rails recognizes this as a match and so implicitly renders this file. This is the same as writing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render 'birds/index.html.erb'\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe provided \u003ccode\u003ebirds/index.html.erb\u003c/code\u003e file contains ERB code that will list out each bird's name and species in an unordered list:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;Birds\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e\u0026lt;% @birds.each do |bird| %\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;\u0026lt;%= bird.name %\u0026gt; - \u0026lt;%= bird.species %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eAs it is currently configured, we already have a Rails app up and running using  the MVC structure! If you run \u003ccode\u003erails server\u003c/code\u003e and visit the \u003ccode\u003e'/birds'\u003c/code\u003e path, you  should see a list of birds.\u003c/p\u003e  \u003cp\u003eWith minimal work, as we just saw, we were able to spin up a resource backed by a database and serve it up in a browser. In short, when a visitor goes to \u003ccode\u003e'/birds'\u003c/code\u003e on this Rails app, the controller retrieves data from the \u003ccode\u003eBird\u003c/code\u003e model and then serves that data to the visitor by displaying it in a view. \u003c/p\u003e  \u003cp\u003eSo where does JavaScript fit in? Well, we have the skills to build out our own frontends. As we will see in the next lesson, rather than using the ERB view, Rails is flexible enough to give us something we can use with JavaScript and \u003ccode\u003efetch()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://guides.rubyonrails.org/active_record_basics.html\"\u003eActiveRecord Basics\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://guides.rubyonrails.org/v5.2/layouts_and_rendering.html\"\u003eLayouts and Rendering in Rails\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g3ca9ae60a2a20de058afec4a41f2c2fc"},{"id":220819,"title":"Rendering Content Types","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-rendering-different-content-types-using-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-rendering-different-content-types-using-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-rendering-different-content-types-using-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-rendering-different-content-types-using-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eOverride the default Rails view\u003c/li\u003e\n\u003cli\u003eRender plain text from a Rails controller\u003c/li\u003e\n\u003cli\u003eRender JSON from a Rails controller\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson, we revisited the default Rails MVC structure, and at the\nend, an ERB file was rendered. Rails, however, can render multiple types of\ncontent. In this lesson, we're going to look at some of the content types most\nuseful to us as we build towards a Rails API.\u003c/p\u003e\n\n\u003cp\u003eTo follow along, run \u003ccode\u003erails db:migrate\u003c/code\u003e and \u003ccode\u003erails db:seed\u003c/code\u003e to set up your\ndatabase and example data.\u003c/p\u003e\n\n\u003ch2\u003eOverriding the Default Rails View\u003c/h2\u003e\n\n\u003cp\u003eLeaving off from the solution of the last lesson, the \u003ccode\u003eindex\u003c/code\u003e action rendered all\nbirds:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e\u0026nbsp;\u0026nbsp;end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd we know that this is the same as explicitly stating:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render 'birds/index.html.erb'\u003cbr\u003e\u0026nbsp;\u0026nbsp;end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut we aren't restricted to displaying ERB. We can indicate what type\nof content we want to render. Let's first look at plain text.\u003c/p\u003e\n\n\u003ch3\u003eRender Plain Text From a Controller\u003c/h3\u003e\n\n\u003cp\u003eTo render plain text from a Rails controller, you specify \u003ccode\u003eplain:\u003c/code\u003e, followed by\nthe text you want to display:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render plain: \"Hello #{@birds[3].name}\"\u003cbr\u003e\u0026nbsp;\u0026nbsp;end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the browser, this displays as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHello Mourning Dove\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis isn't very fancy, but \u003cstrong\u003e\u003cem\u003ethis is actually enough for us to start using our\nJavaScript skills and access with a \u003ccode\u003efetch()\u003c/code\u003e request\u003c/em\u003e\u003c/strong\u003e. \u003c/p\u003e\n\n\u003cp\u003eTo confirm this is working, we need a frontend to send a request to our Rails\napp. In this main directory of this code-along, there is an HTML file, \u003ccode\u003eexample_frontend.html\u003c/code\u003e, for\nthis purpose. Follow these steps to see the BirdsController in action:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eFirst, replace \u003ccode\u003eBirdsController\u003c/code\u003e with the code above and start up the Rails\nserver with \u003ccode\u003erails s\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSecond, from this lesson's local directory, in your terminal, type \u003ccode\u003eopen\nexample_frontend.html\u003c/code\u003e. You should see a webpage open with the text:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eThis HTML file isn't part of the Rails app. It is here to help you test JS against Rails as you follow along.\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhile viewing \u003ccode\u003eexample_frontend.html\u003c/code\u003e, open the browser console and run the following:\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003efetch('http://localhost:3000/birds').then(response =\u0026gt; response.text()).then(text =\u0026gt; console.log(text))\u003cbr\u003e// \u0026gt; Promise {}\u003cbr\u003eHello Mourning Dove\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNotice\u003c/strong\u003e: On resolution of the \u003ccode\u003efetch()\u003c/code\u003e request here, in the first\n\u003ccode\u003e.then()\u003c/code\u003e, \u003ccode\u003eresponse.text()\u003c/code\u003e is called, since we're handling plain text.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWe haven't really escaped the MVC structure of Rails, but we're no longer using\nthe ERB view, nor are we really \u003cem\u003eviewing\u003c/em\u003e in the same way we were before.\u003c/p\u003e\n\n\u003cp\u003eWe've actually requested data, and since it is just plain text, JavaScript can\nhandle that. But, Rails has one better.\u003c/p\u003e\n\n\u003ch3\u003eRender JSON From a Controller\u003c/h3\u003e\n\n\u003cp\u003eTo render \u003cem\u003eJSON\u003c/em\u003e from a Rails controller, you specify \u003ccode\u003ejson:\u003c/code\u003e followed by data\nthat can be converted to valid JSON:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render json: 'Remember that JSON is just object notation converted to string data, so strings also work here'\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can pass strings as we see above, as well as hashes, arrays, and other data\ntypes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render json: { message: 'Hashes of data will get converted to JSON' }\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render json: ['As','well','as','arrays']\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn our bird watching case, we actually already have a collection of data, \u003ccode\u003e@birds\u003c/code\u003e,\nso we can write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render json: @birds\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the Rails server running, check out \u003ccode\u003ehttp://localhost:3000/birds\u003c/code\u003e. You\nshould see that Rails has output all the data available from all the \u003ccode\u003eBird\u003c/code\u003e\nrecords!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e  {\u003cbr\u003e      \"id\": 1,\u003cbr\u003e      \"name\": \"Black-Capped Chickadee\",\u003cbr\u003e      \"species\": \"Poecile Atricapillus\",\u003cbr\u003e      \"created_at\": \"2019-05-09T11:07:58.188Z\",\u003cbr\u003e      \"updated_at\": \"2019-05-09T11:07:58.188Z\"\u003cbr\u003e    },\u003cbr\u003e    {\u003cbr\u003e      \"id\": 2,\u003cbr\u003e      \"name\": \"Grackle\",\u003cbr\u003e      \"species\": \"Quiscalus Quiscula\",\u003cbr\u003e      \"created_at\": \"2019-05-09T11:07:58.195Z\",\u003cbr\u003e      \"updated_at\": \"2019-05-09T11:07:58.195Z\"\u003cbr\u003e    },\u003cbr\u003e    {\u003cbr\u003e      \"id\": 3,\u003cbr\u003e      \"name\": \"Common Starling\",\u003cbr\u003e      \"species\": \"Sturnus Vulgaris\",\u003cbr\u003e      \"created_at\": \"2019-05-09T11:07:58.199Z\",\u003cbr\u003e      \"updated_at\": \"2019-05-09T11:07:58.199Z\"\u003cbr\u003e    },\u003cbr\u003e    {\u003cbr\u003e      \"id\": 4,\u003cbr\u003e      \"name\": \"Mourning Dove\",\u003cbr\u003e      \"species\": \"Zenaida Macroura\",\u003cbr\u003e      \"created_at\": \"2019-05-09T11:07:58.205Z\",\u003cbr\u003e      \"updated_at\": \"2019-05-09T11:07:58.205Z\"\u003cbr\u003e    }\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGoing back to our \u003ccode\u003eexample_frontend.html\u003c/code\u003e, we could send another \u003ccode\u003efetch()\u003c/code\u003e\nrequest to the same place, only this time, since we're handling JSON, we'll swap\nout \u003ccode\u003etext()\u003c/code\u003e for \u003ccode\u003ejson()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch('http://localhost:3000/birds').then(response =\u0026gt; response.json()).then(object =\u0026gt; console.log(object))\u003cbr\u003e// \u0026gt; Promise {}\u003cbr\u003e \u0026gt; [{…}, {…}, {…}, {…}]\u003cbr\u003e\u003cbr\u003e// 0: {id: 1, name: \"Black-Capped Chickadee\", species: \"Poecile Atricapillus\", created_at: \"2019-05-09T11:07:58.188Z\", updated_at: \"2019-05-09T11:07:58.188Z\"}\u003cbr\u003e// 1: {id: 2, name: \"Grackle\", species: \"Quiscalus Quiscula\", created_at: \"2019-05-09T11:07:58.195Z\", updated_at: \"2019-05-09T11:07:58.195Z\"}\u003cbr\u003e// 2: {id: 3, name: \"Common Starling\", species: \"Sturnus Vulgaris\", created_at: \"2019-05-09T11:07:58.199Z\", updated_at: \"2019-05-09T11:07:58.199Z\"}\u003cbr\u003e// 3: {id: 4, name: \"Mourning Dove\", species: \"Zenaida Macroura\", created_at: \"2019-05-09T11:07:58.205Z\", updated_at: \"2019-05-09T11:07:58.205Z\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFour birds!\u003c/p\u003e\n\n\u003cp\u003eYou may also often see more detailed nesting in the \u003ccode\u003erender json:\u003c/code\u003e statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render json: { birds: @birds, messages: ['Hello Birds', 'Goodbye Birds'] }\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that the above would alter the structure of the data being rendered. Rather\nthan an array of four birds, an object with two keys, each pointing to an array\nwould be rendered instead. We will explore shaping our data in greater detail in\nupcoming lessons, but it is a critical concept to consider.\u003c/p\u003e\n\n\u003cp\u003eWith the intent of constructing an API, we always want to be thinking about\ndata. The purpose of an API is to be an accessible \u003cem\u003einterface\u003c/em\u003e, in our case, to\na JavaScript frontend, so we want to always be thoughtful in how we structure\ndata and how that data will be utilized.\u003c/p\u003e\n\n\u003cp\u003eWell structured API data can make frontend code simpler. Poorly structured API\ndata can lead to complicated nests of JavaScript enumerables.\u003c/p\u003e\n\n\u003ch2\u003eWhere is our Data Being Converted to JSON?\u003c/h2\u003e\n\n\u003cp\u003eWhen we include an array or hash after \u003ccode\u003erender json:\u003c/code\u003e, it turns out that Rails\nis actually being accomodating to us and implicitly handling the work of\nconverting that array or hash to JSON.\u003c/p\u003e\n\n\u003cp\u003eWe can choose to explicitly convert our array or hash, without any problem by\nadding \u003ccode\u003eto_json\u003c/code\u003e to the end:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render json: { birds: @birds, messages: ['Hello Birds', 'Goodbye Birds'] }.to_json\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will produce the same result as it did before. The \u003ccode\u003eto_json\u003c/code\u003e method is\nmade available to both \u003ca href=\"https://apidock.com/rails/Array/to_json\"\u003earrays\u003c/a\u003e and \u003ca href=\"https://apidock.com/rails/Hash/to_json\"\u003ehashes\u003c/a\u003e in Rails,\nbut is not natively available to them in Ruby. It does exactly what it says - it\ntakes whatever array or hash it is called on and converts it to JSON.\u003c/p\u003e\n\n\u003cp\u003eRails favors convention as well as a clean and clutter free controller, so it\nhas some built in 'magic' to handle things like this and keep us from having to\nwrite \u003ccode\u003eto_json\u003c/code\u003e on the same line as \u003ccode\u003erender json:\u003c/code\u003e in every action we write.\u003c/p\u003e\n\n\u003ch2\u003eSay Goodbye to Instance Variables\u003c/h2\u003e\n\n\u003cp\u003eSo far in controller actions, we've typically seen instance variables being used,\njust as we have in the examples in this lesson:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render json: @birds\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, we really only needed instance variables when we were rendering to ERB.\nNow that we are directly rendering to JSON in the same action, we no longer need\nto deal with instance variables and can instead just use a local variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    birds = Bird.all\u003cbr\u003e    render json: birds\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is how we will be displaying our examples going forward.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eLet's take a step back and consider what all this means because this is\nactually huge! Now that you know that Rails can render JSON, you have the\nability to create entirely independent JavaScript frontends that can communicate\nwith Rails backends!\u003c/p\u003e","exportId":"g44faad617dec5f650308035ce2854f3c"},{"id":220823,"title":"Custom JSON Rendering","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-custom-json-rendering-using-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-custom-json-rendering-using-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-custom-json-rendering-using-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-custom-json-rendering-using-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRender JSON from a Rails controller\u003c/li\u003e\n\u003cli\u003eSelect specific model attributes to render in a Rails controller\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eBy using \u003ccode\u003erender json:\u003c/code\u003e in our Rails controller, we can take entire models or\neven collections of models, have Rails convert them to JSON, and send them out\non request. We already have the makings of a basic API. In this lesson, we're\ngoing to look at shaping that data that gets converted to JSON and making it more\nuseful to us from the frontend JavaScript perspective.\u003c/p\u003e\n\n\u003cp\u003eThe way we structure our data matters - it can lead to better, simpler code in\nthe future. By specifically defining what data is being sent via a Rails\ncontroller, we have full control over what data our frontend has access to.\u003c/p\u003e\n\n\u003cp\u003eTo follow along, run \u003ccode\u003erails db:migrate\u003c/code\u003e and \u003ccode\u003erails db:seed\u003c/code\u003e to set up your\ndatabase and example data. We will continue to use our bird watching example in\nthis lesson.\u003c/p\u003e\n\n\u003ch2\u003eAdding Additional Routes to Separate JSON Data\u003c/h2\u003e\n\n\u003cp\u003eThe simplest way to make data more useful to us is to provide more routes and\nactions that help to divide and organize our data. For instance, we could add a\n\u003ccode\u003eshow\u003c/code\u003e action to allow us to send specific record/model instances. First, we'd\nadd a route:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eRails.application.routes.draw do\u003cbr\u003e  get '/birds' =\u0026gt; 'birds#index'\u003cbr\u003e  get '/birds/:id' =\u0026gt; 'birds#show' # new\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen we could add an additional action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    birds = Bird.all\u003cbr\u003e    render json: birds\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def show\u003cbr\u003e    bird = Bird.find_by(id: params[:id])\u003cbr\u003e    render json: bird\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e No need for instance variables anymore, since we're immediately\nrendering \u003ccode\u003ebirds\u003c/code\u003e and \u003ccode\u003ebird\u003c/code\u003e to JSON and are not going to be using ERB.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNow, visiting \u003ccode\u003ehttp://localhost:3000/birds\u003c/code\u003e will produce an array of \u003ccode\u003eBird\u003c/code\u003e\nobjects, but \u003ccode\u003ehttp://localhost:3000/birds/2\u003c/code\u003e will produce just one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"name\": \"Grackle\",\u003cbr\u003e  \"species\": \"Quiscalus Quiscula\",\u003cbr\u003e  \"created_at\": \"2019-05-09T21:51:41.543Z\",\u003cbr\u003e  \"updated_at\": \"2019-05-09T21:51:41.543Z\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can use multiple routes to differentiate between specific requests. In an\nAPI, these are typically referred to as endpoints. A user of the API uses\nendpoints to access specific pieces of data. Just like a normal Rails app,\nwe can create full CRUD based controllers that only render JSON. \u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE:\u003c/strong\u003e If you've ever tried using \u003ccode\u003erails generate scaffold\u003c/code\u003e to create a\nresource, you'll find that this is the case. Rails has favored convention over\nconfiguration and will set up JSON rendering for you almost immediately out\nof the box.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn terms of communicating with JavaScript, even when sending POST requests, we\ndo not need to change anything in our controller to handle a \u003ccode\u003efetch()\u003c/code\u003e request\ncompared to a normal user visiting a page. This means that you could go back to\n\u003cem\u003eany\u003c/em\u003e existing Rails project and all you would need to do is change the\nrendering portion of the controller to make it render JSON. Bam! You have a\nrudimentary Rails API!\u003c/p\u003e\n\n\u003cp\u003eEven though we are no longer serving up views the same way, maintaining RESTful\nconventions is still a HUGE plus here for your API end user (mainly yourself at\nthe moment).\u003c/p\u003e\n\n\u003ch2\u003eRemoving Content When Rendering\u003c/h2\u003e\n\n\u003cp\u003eSometimes, when sending JSON data, such as an entire model, we don't want or\nneed to send the entire thing. Some data is sensitive, for instance. An API that\nsends user information might contain details of a user internally that it\ndoes not want to ever share externally. Sometimes, data is just extra \nclutter we don't need. Consider, for instance, the last piece of data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"name\": \"Grackle\",\u003cbr\u003e  \"species\": \"Quiscalus Quiscula\",\u003cbr\u003e  \"created_at\": \"2019-05-09T21:51:41.543Z\",\u003cbr\u003e  \"updated_at\": \"2019-05-09T21:51:41.543Z\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor our bird watching purposes, we probably don't need bits of data like\n\u003ccode\u003ecreated_at\u003c/code\u003e and \u003ccode\u003eupdated_at\u003c/code\u003e. Rather than send this unnecessary info when\nrendering, we could just pick and choose what we want to send:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  bird = Bird.find_by(id: params[:id])\u003cbr\u003e  render json: {id: bird.id, name: bird.name, species: bird.species } \u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we've created a new hash out of three keys, assigning the keys manually\nwith the attributes of \u003ccode\u003ebird\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe result is that when we visit a specific bird's endpoint, like\n\u003ccode\u003ehttp://localhost:3000/birds/3\u003c/code\u003e, we'll see just the id, name and species:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": \"3\",\u003cbr\u003e  \"name\": \"Common Starling\",\u003cbr\u003e  \"species\": \"Sturnus Vulgaris\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnother option would be to use Ruby's built-in \u003ccode\u003eslice\u003c/code\u003e method. On the \u003ccode\u003eshow\u003c/code\u003e\naction, that would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  bird = Bird.find_by(id: params[:id])\u003cbr\u003e  render json: bird.slice(:id, :name, :species)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis achieves the same result but in a slightly different way. Rather than\nhaving to spell out each key, the \u003ccode\u003eHash\u003c/code\u003e \u003ca href=\"https://ruby-doc.org/core-2.5.0/Hash.html#method-i-slice\"\u003e\u003ccode\u003eslice\u003c/code\u003e method\u003c/a\u003e returns a \u003cem\u003enew\u003c/em\u003e\nhash with only the keys that are passed into \u003ccode\u003eslice\u003c/code\u003e. In this case, \u003ccode\u003e:id\u003c/code\u003e,\n\u003ccode\u003e:name\u003c/code\u003e, and \u003ccode\u003e:species\u003c/code\u003e were passed in, so \u003ccode\u003ecreated_at\u003c/code\u003e and \u003ccode\u003eupdated_at\u003c/code\u003e get\nleft out, just like before.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": \"3\",\u003cbr\u003e  \"name\": \"Common Starling\",\u003cbr\u003e  \"species\": \"Sturnus Vulgaris\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCool, but once again, Rails has one better. While \u003ccode\u003eslice\u003c/code\u003e works fine for a\nsingle hash, as with \u003ccode\u003ebird\u003c/code\u003e, it won't work for an array of hashes like the one\nwe have in our \u003ccode\u003eindex\u003c/code\u003e action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  birds = Bird.all\u003cbr\u003e  render json: birds\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this case, we can add in the \u003ccode\u003eonly:\u003c/code\u003e option directly after listing an object\nwe want to render to JSON:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  birds = Bird.all\u003cbr\u003e  render json: birds, only: [:id, :name, :species]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eVisiting or fetching \u003ccode\u003ehttp://localhost:3000/birds\u003c/code\u003e will now produce our array of\nbird objects and each object will \u003cem\u003eonly\u003c/em\u003e have the \u003ccode\u003eid\u003c/code\u003e, \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003especies\u003c/code\u003e\nvalues, leaving out everything else:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e  {\u003cbr\u003e    \"id\": 1,\u003cbr\u003e    \"name\": \"Black-Capped Chickadee\",\u003cbr\u003e    \"species\": \"Poecile Atricapillus\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    \"id\": 2,\u003cbr\u003e    \"name\": \"Grackle\",\u003cbr\u003e    \"species\": \"Quiscalus Quiscula\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    \"id\": 3,\u003cbr\u003e    \"name\": \"Common Starling\",\u003cbr\u003e    \"species\": \"Sturnus Vulgaris\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    \"id\": 4,\u003cbr\u003e    \"name\": \"Mourning Dove\",\u003cbr\u003e    \"species\": \"Zenaida Macroura\"\u003cbr\u003e  }\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlternatively, rather than specifically listing every key we want to include, we\ncould also exclude particular content using the \u003ccode\u003eexcept:\u003c/code\u003e option, like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  birds = Bird.all\u003cbr\u003e  render json: birds, except: [:created_at, :updated_at]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe above code would achieve the same result, producing only \u003ccode\u003eid\u003c/code\u003e, \u003ccode\u003ename\u003c/code\u003e, and\n\u003ccode\u003especies\u003c/code\u003e for each bird. All the keys \u003cem\u003eexcept\u003c/em\u003e \u003ccode\u003ecreated_at\u003c/code\u003e and \u003ccode\u003eupdated_at\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDrawing Back the Curtain on Rendering JSON Data\u003c/h2\u003e\n\n\u003cp\u003eAs we touched upon briefly in the previous lesson, the controller actions we \nhave seen so far have a bit of Rails 'magic' in them that obscures what is actually happening \nin the render statements. The \u003ccode\u003eonly\u003c/code\u003e and \u003ccode\u003eexcept\u003c/code\u003e keywords are actually \nparameters of the \u003ccode\u003eto_json\u003c/code\u003e method, obscured by that magic. The last code snippet can be\nrewritten in full to show what is actually happening:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  birds = Bird.all\u003cbr\u003e  render json: birds.to_json(except: [:created_at, :updated_at])\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs customization becomes more complicated, writing in sometimes help to clarify what is happening.\u003c/p\u003e\n\n\u003ch2\u003eBasic Error Messaging When Rendering JSON Data\u003c/h2\u003e\n\n\u003cp\u003eWith the power to create our own APIs, we also have the power to define what to\ndo when things go wrong. In our \u003ccode\u003eshow\u003c/code\u003e action, we are currently using\n\u003ccode\u003eBird.find_by\u003c/code\u003e, passing in \u003ccode\u003eid: params[:id]\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  bird = Bird.find_by(id: params[:id])\u003cbr\u003e  render json: {id: bird.id, name: bird.name, species: bird.species } \u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen using \u003ccode\u003efind_by\u003c/code\u003e, if the record is not found, \u003ccode\u003enil\u003c/code\u003e is returned. As we have \nit set up, if \u003ccode\u003eparams[:id]\u003c/code\u003e does not match a valid id, \u003ccode\u003enil\u003c/code\u003e will be assigned to \nthe \u003ccode\u003ebird\u003c/code\u003e variable.\u003c/p\u003e\n\n\u003cp\u003eAs \u003ccode\u003enil\u003c/code\u003e is a \u003cem\u003efalse-y\u003c/em\u003e value in Ruby, this gives us the ability to write our\nown error messaging in the event that a request is made for a record that\ndoesn't exist:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  bird = Bird.find_by(id: params[:id])\u003cbr\u003e  if bird\u003cbr\u003e    render json: { id: bird.id, name: bird.name, species: bird.species }\u003cbr\u003e  else\u003cbr\u003e    render json: { message: 'Bird not found' }\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, if we were to send a request to an invalid endpoint like \u003ccode\u003ehttp://localhost:3000/birds/hello_birds\u003c/code\u003e,\nrather than receiving a general HTTP error, we would still receive a response\nfrom the API:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"message\": \"Bird not found\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFrom here, we could build a more complex response, including additional details\nabout what might have occurred.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe can now take a single model or all the instances of that model and render it\nto JSON, extracting out any specific content we do or do not want to send!\u003c/p\u003e\n\n\u003cp\u003eWhether you are building a professional API for a company or for your own\npersonal site, having the ability to fine tune how your data look is a critical\nskill that we're only just beginning to scratch the surface on.\u003c/p\u003e\n\n\u003cp\u003eIn the next lesson, we're going to continue to look at options for customizing\nrendered JSON content. Particularly, we'll be looking more at what we can \u003cem\u003eadd\u003c/em\u003e.\u003c/p\u003e","exportId":"gd39f57ac1e93231c73edd797864296af"},{"id":220828,"title":"Rendering Related Object Data in JSON","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-rendering-related-object-data-in-json\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-rendering-related-object-data-in-json/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-rendering-related-object-data-in-json\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-rendering-related-object-data-in-json/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eReview Rails generators\u003c/li\u003e\n\u003cli\u003eRender related models as nested JSON data\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eUsing \u003ccode\u003eonly\u003c/code\u003e and \u003ccode\u003eexcept\u003c/code\u003e, we can be selective in what attributes we want to\nrender to JSON in our basic Rails API. But what if we want to be \u003cem\u003einclusive\u003c/em\u003e\nrather than selective? With Rails models, we're often dealing with many\ndifferent related objects. Using \u003ccode\u003einclude\u003c/code\u003e when rendering JSON, our API can send\ndata about one resource along with data about its associated resources.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we will look at how our Rails API will be able to convey\nrelationships between multiple models in a single JSON object. In order to fully\nunderstand \u003ccode\u003einclude\u003c/code\u003e, however, we'll need to expand our example domain so\nthat we have a few related resources to work with.\u003c/p\u003e\n\n\u003ch2\u003eSetting up Additional Related Resources To Include - Bird Sightings\u003c/h2\u003e\n\n\u003cp\u003eIn the last few code-alongs, we've been playing around with a basic resource,\n\u003ccode\u003eBird\u003c/code\u003e for a bird watching application. The \u003ccode\u003eBird\u003c/code\u003e resource is already set up in\nthis lesson with \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003especies\u003c/code\u003e attributes. We could imagine in a fully\ndeveloped bird watching application that birds would come up a lot. Likely, the\nsame type of bird will come up a lot, so a \u003ccode\u003eBird\u003c/code\u003e model makes sense.\u003c/p\u003e\n\n\u003cp\u003eWe could imagine, as well, if we were to expand on this application, a logical\nnext step for bird watching might be some sort of location-based \u003cem\u003ebird sighting\u003c/em\u003e\nsystem. A user of this site might one day be able to log the sighting of rare\nbirds in their backyard.\u003c/p\u003e\n\n\u003cp\u003e\n  \u003cimg width=\"500\" src=\"https://curriculum-content.s3.amazonaws.com/js/rails-as-an-api/Image_16_BirdSighting.png\"\u003e\n\u003c/p\u003e\n\n\u003cp\u003eThe next resource to build, then, might be \u003ccode\u003eLocation\u003c/code\u003e so we could connect\nspecific birds to specific locations. To speed things up, let's use the \u003ccode\u003emodel\u003c/code\u003e\ngenerator Rails provides. We can also give \u003ccode\u003eLocation\u003c/code\u003e a few attributes,\n\u003ccode\u003elatitude\u003c/code\u003e and \u003ccode\u003elongitude\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erails g model location latitude:float longitude:float\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003emodel\u003c/code\u003e generator creates the migration and model for us here which is all\nwe will need in this case.\u003c/p\u003e\n\n\u003cp\u003eWe can create one more resource, a \u003ccode\u003eSighting\u003c/code\u003e. A \u003ccode\u003eSighting\u003c/code\u003e will connect a\nspecific bird and location. A bird sighting in real life is an event that ties\nbirds to their locations at a specific time. Similarly, a \u003ccode\u003eSighting\u003c/code\u003e will do\nthe same by tying one \u003ccode\u003eBird\u003c/code\u003e to one \u003ccode\u003eLocation\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn the next part of this lesson, we'll add a controller action for this\n\u003ccode\u003eSighting\u003c/code\u003e resource, so this time, rather than using \u003ccode\u003emodel\u003c/code\u003e to create our\nfiles, we can use the \u003ccode\u003eresource\u003c/code\u003e generator. In addition, since we have\ntwo existing resources we're connecting, we can use the \u003ccode\u003ereferences\u003c/code\u003e keyword\nwhen listing them, and Rails will automatically connect them:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erails g resource sighting bird:references location:references\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis generates a migration with \u003ccode\u003ereferences\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass CreateSightings \u0026lt; ActiveRecord::Migration[5.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :sightings do |t|\u003cbr\u003e      t.references :bird, foreign_key: true\u003cbr\u003e      t.references :location, foreign_key: true\u003cbr\u003e\u003cbr\u003e      t.timestamps\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning \u003ccode\u003erails db:migrate\u003c/code\u003e now will produce slightly different schema, but if we\nlook at the file, we see it still connects the \u003ccode\u003e\"birds\"\u003c/code\u003e and \u003ccode\u003e\"locations\"\u003c/code\u003e \ntables to the \u003ccode\u003e\"sightings\"\u003c/code\u003e table by id:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecreate_table \"sightings\", force: :cascade do |t|\u003cbr\u003e  t.integer \"bird_id\"\u003cbr\u003e  t.integer \"location_id\"\u003cbr\u003e  t.datetime \"created_at\", null: false\u003cbr\u003e  t.datetime \"updated_at\", null: false\u003cbr\u003e  t.index [\"bird_id\"], name: \"index_sightings_on_bird_id\"\u003cbr\u003e  t.index [\"location_id\"], name: \"index_sightings_on_location_id\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe other effect of using \u003ccode\u003ereferences\u003c/code\u003e in the generator is that it will add\nrelationships automatically to the generated model:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Sighting \u0026lt; ApplicationRecord\u003cbr\u003e  belongs_to :bird\u003cbr\u003e  belongs_to :location\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe other models will remain unaltered, so we'll have to update them. A bird\nmay show up many times so it could be argued that a bird \u003cem\u003ehas many\u003c/em\u003e sightings.\nThe same would apply for a location. Through sightings, birds have many locations,\nand vice versa, so we would update our models to reflect these. Add the\nfollowing relationships to the \u003ccode\u003eBird\u003c/code\u003e and \u003ccode\u003eLocation\u003c/code\u003e models:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Bird \u0026lt; ApplicationRecord\u003cbr\u003e  has_many :sightings\u003cbr\u003e  has_many :locations, through: :sightings\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Location \u0026lt; ApplicationRecord\u003cbr\u003e  has_many :sightings\u003cbr\u003e  has_many :birds, through: :sightings\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the extra resources, we'll need additional seed data to test everything\nout. Update \u003ccode\u003edb/seeds.rb\u003c/code\u003e with the following then run \u003ccode\u003erails db:seed\u003c/code\u003e to set up\nthe example data.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebird_a = Bird.create(name: \"Black-Capped Chickadee\", species: \"Poecile Atricapillus\")\u003cbr\u003ebird_b = Bird.create(name: \"Grackle\", species: \"Quiscalus Quiscula\")\u003cbr\u003ebird_c = Bird.create(name: \"Common Starling\", species: \"Sturnus Vulgaris\")\u003cbr\u003ebird_d = Bird.create(name: \"Mourning Dove\", species: \"Zenaida Macroura\")\u003cbr\u003e\u003cbr\u003elocation_a = Location.create(latitude: \"40.730610\", longitude: \"-73.935242\")\u003cbr\u003elocation_b = Location.create(latitude: \"30.26715\", longitude: \"-97.74306\")\u003cbr\u003elocation_c = Location.create(latitude: \"45.512794\", longitude: \"-122.679565\")\u003cbr\u003e\u003cbr\u003esighting_a = Sighting.create(bird: bird_a, location: location_b)\u003cbr\u003esighting_b = Sighting.create(bird: bird_b, location: location_a)\u003cbr\u003esighting_c = Sighting.create(bird: bird_c, location: location_a)\u003cbr\u003esighting_d = Sighting.create(bird: bird_d, location: location_c)\u003cbr\u003esighting_e = Sighting.create(bird: bird_a, location: location_b)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith three related resources created, we can begin working on rendering them in\nJSON.\u003c/p\u003e\n\n\u003ch2\u003eIncluding Related Models in a Single Controller Action\u003c/h2\u003e\n\n\u003cp\u003eIn the \u003ccode\u003eSightingsController\u003c/code\u003e, now that the resources are created and connected,\nwe should be able to confirm our data has been created by including a\nbasic \u003ccode\u003eshow\u003c/code\u003e action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  render json: sighting\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the Rails server running, visiting \u003ccode\u003ehttp://localhost:3000/sightings/1\u003c/code\u003e\nshould produce an object representing a \u003cem\u003esighting\u003c/em\u003e: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 1,\u003cbr\u003e  \"bird_id\": 1,\u003cbr\u003e  \"location_id\": 2,\u003cbr\u003e  \"created_at\": \"2019-05-14T11:20:37.225Z\",\u003cbr\u003e  \"updated_at\": \"2019-05-14T11:20:37.225Z\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE:\u003c/strong\u003e Notice that the object includes its own \u003ccode\u003e\"id\"\u003c/code\u003e, as well as the\nrelated \u003ccode\u003e\"bird_id\"\u003c/code\u003e and \u003ccode\u003e\"location_id\"\u003c/code\u003e. That is useful data. We \u003cem\u003ecould\u003c/em\u003e use\nthese values to send additional requests using JavaScript to get bird and\nlocation data if needed.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eTo include bird and location information in this controller action, now that our\nmodels are connected, the most direct way would be to build a custom hash like \nwe did in the previous lesson:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  render json: { id: sighting.id, bird: sighting.bird, location: sighting.location }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis produces nested objects in our rendered JSON for \u003ccode\u003e\"bird\"\u003c/code\u003e and \u003ccode\u003e\"location\"\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"bird\": {\u003cbr\u003e    \"id\": 2,\u003cbr\u003e    \"name\": \"Grackle\",\u003cbr\u003e    \"species\": \"Quiscalus Quiscula\",\u003cbr\u003e    \"created_at\": \"2019-05-14T11:20:37.177Z\",\u003cbr\u003e    \"updated_at\": \"2019-05-14T11:20:37.177Z\"\u003cbr\u003e  },\u003cbr\u003e  \"location\": {\u003cbr\u003e    \"id\": 2,\u003cbr\u003e    \"latitude\": 30.26715,\u003cbr\u003e    \"longitude\": -97.74306,\u003cbr\u003e    \"created_at\": \"2019-05-14T11:20:37.196Z\",\u003cbr\u003e    \"updated_at\": \"2019-05-14T11:20:37.196Z\"\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOften, this works perfectly fine to get yourself started, and is more than\nenough to begin testing against with \u003ccode\u003efetch()\u003c/code\u003e requests on a frontend.\u003c/p\u003e\n\n\u003ch2\u003eUsing \u003ccode\u003einclude\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eAn alternative is to use the \u003ccode\u003einclude\u003c/code\u003e option to indicate what models\nyou want to nest:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  render json: sighting, include: [:bird, :location]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis produces similar JSON as the previous custom configuration:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"bird_id\": 2,\u003cbr\u003e  \"location_id\": 2,\u003cbr\u003e  \"created_at\": \"2019-05-14T11:20:37.228Z\",\u003cbr\u003e  \"updated_at\": \"2019-05-14T11:20:37.228Z\",\u003cbr\u003e  \"bird\": {\u003cbr\u003e    \"id\": 2,\u003cbr\u003e    \"name\": \"Grackle\",\u003cbr\u003e    \"species\": \"Quiscalus Quiscula\",\u003cbr\u003e    \"created_at\": \"2019-05-14T11:20:37.177Z\",\u003cbr\u003e    \"updated_at\": \"2019-05-14T11:20:37.177Z\"\u003cbr\u003e  },\u003cbr\u003e  \"location\": {\u003cbr\u003e    \"id\": 2,\u003cbr\u003e    \"latitude\": 30.26715,\u003cbr\u003e    \"longitude\": -97.74306,\u003cbr\u003e    \"created_at\": \"2019-05-14T11:20:37.196Z\",\u003cbr\u003e    \"updated_at\": \"2019-05-14T11:20:37.196Z\"\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAll attributes of included objects will be listed by default. Using \u003ccode\u003einclude:\u003c/code\u003e\nalso works fine when dealing with an action that renders an array, like when we use \u003ccode\u003eall\u003c/code\u003e\nin \u003ccode\u003eindex\u003c/code\u003e actions:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  sightings = Sighting.all\u003cbr\u003e  render json: sightings, include: [:bird, :location]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs before with \u003ccode\u003eonly\u003c/code\u003e and \u003ccode\u003eexcept\u003c/code\u003e, \u003ccode\u003einclude\u003c/code\u003e is actually just another option\nthat we can pass into the \u003ccode\u003eto_json\u003c/code\u003e method. Rails is just \u003cem\u003eobscuring\u003c/em\u003e this part:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  sightings = Sighting.all\u003cbr\u003e  render json: sightings.to_json(include: [:bird, :location])\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  render json: sighting.to_json(include: [:bird, :location])\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd adding some error handling on our \u003ccode\u003eshow\u003c/code\u003e action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  if sighting\u003cbr\u003e    render json: sighting.to_json(include: [:bird, :location])\u003cbr\u003e  else\u003cbr\u003e    render json: { message: 'No sighting found with that id' }\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe see now that within a single controller action, it is possible to render\nrelated models as nested JSON data! If we imagine how this app might continue to\ndevelop, now that we have a way for birds to be tied to locations by \u003cem\u003esightings\u003c/em\u003e,\nwe could start to work on a way for these sightings to be created in a browser.\nWe could also continue to expand on endpoints for this API. We now have the\nability for specific types of birds to tell us \u003cem\u003ewhere\u003c/em\u003e they've been sighted, for\ninstance.\u003c/p\u003e\n\n\u003cp\u003eWhen nesting models in JSON the way we saw in this lab, it is entirely possible\nto use \u003ccode\u003einclude\u003c/code\u003e in conjunction with \u003ccode\u003eonly\u003c/code\u003e and \u003ccode\u003eexclude\u003c/code\u003e. For instance, if\nwe wanted to remove the \u003ccode\u003e:updated_at\u003c/code\u003e attribute from \u003ccode\u003eSighting\u003c/code\u003e when rendered:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  render json: sighting, include: [:bird, :location], except: [:updated_at]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut this begins to complicate things significantly as we work with nested\nresources and try to limit what \u003cem\u003ethey\u003c/em\u003e display.\u003c/p\u003e\n\n\u003cp\u003eFor example, to \u003cem\u003ealso\u003c/em\u003e remove all instances of \u003ccode\u003e:created_at\u003c/code\u003e and \u003ccode\u003e:updated_at\u003c/code\u003e\nfrom the nested bird and location data in the above example, we'd have to\nadd nesting into the \u003cem\u003eoptions\u003c/em\u003e, so the included bird and location data can\nhave their own options listed. Using the fully written \u003ccode\u003eto_json\u003c/code\u003e render statement\ncan help keep things a bit more readable here:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  render json: sighting.to_json(:include =\u0026gt; {\u003cbr\u003e    :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e    :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e  }, :except =\u0026gt; [:updated_at])\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis does produce a more specific set of data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"bird_id\": 2,\u003cbr\u003e  \"location_id\": 2,\u003cbr\u003e  \"created_at\": \"2019-05-14T11:20:37.228Z\",\u003cbr\u003e  \"bird\": {\u003cbr\u003e    \"name\": \"Grackle\",\u003cbr\u003e    \"species\": \"Quiscalus Quiscula\"\u003cbr\u003e  },\u003cbr\u003e  \"location\": {\u003cbr\u003e    \"latitude\": 30.26715,\u003cbr\u003e    \"longitude\": -97.74306\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA single sighting of Quiscalus Quiscula on May 14th, 2019 in downtown Austin,\nTexas!\u003c/p\u003e\n\n\u003cp\u003eWhile that is neat, it seems silly to have to include such a complicated render\nline in our action. In addition, in this example we're only dealing with three\nmodels. Customizing what is rendered in a larger set of nested data could\nquickly turn into a major headache.\u003c/p\u003e\n\n\u003cp\u003eNow that we have covered how to customize and shape Rails model data into JSON,\nwe can start to look at options for keeping that data well organized when\nbuilding more complicated APIs.\u003c/p\u003e","exportId":"gfab78f63e9452856cd63d0d1eaa1f971"},{"id":220833,"title":"Creating a Rails API from Scratch","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-creating-a-rails-api-from-scratch\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-creating-a-rails-api-from-scratch/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-creating-a-rails-api-from-scratch\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-creating-a-rails-api-from-scratch/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate an API-Only Rails Build\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the last few lessons, we saw how we can easily adapt the MVC structure of\nRails to render JSON. Rails is flexible enough to be able to respond to\ndifferent formats, and is ready to do so out of the box. For the purposes of\nbuilding applications in JavaScript and frameworks like React, though, we\nspecifically need it to act as an API that responds with JSON.\u003c/p\u003e\n\n\u003cp\u003eWhen first building a Rails application, it is possible to flag that the\napplication should be API-only. In this lesson, we will take a look at what this\nmeans and how it provides us with some useful automatic configurations.\u003c/p\u003e\n\n\u003ch2\u003eUsing the \u003ccode\u003e--api\u003c/code\u003e Flag\u003c/h2\u003e\n\n\u003cp\u003eTo create an API-only Rails build from scratch, include the \u003ccode\u003e--api\u003c/code\u003e after the\nname of the Rails application name upon creation:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erails new bird-watcher-api --api\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy using the \u003ccode\u003e--api\u003c/code\u003e flag, Rails will remove a lot of default features and\nmiddleware, mostly related to the browser, since it won't be needed. Controllers\nwill inherit from \u003ccode\u003eActionController::API\u003c/code\u003e rather than \u003ccode\u003eActionController::Base\u003c/code\u003e\nand generators will skip generating views.\u003c/p\u003e\n\n\u003cp\u003eOne noticeable change - some browser errors will disappear. Normally, when a Rails\nserver is running, it produces an error message in browser when something goes\nwrong while attempting to render. Since there is no way to render views in this\nAPI-only build, if the Rails API fails and we visit it in browser, it will just\nshow a blank screen.\u003c/p\u003e\n\n\u003cp\u003eNo changes are required when setting up resources for an API-only Rails build.\u003c/p\u003e\n\n\u003ch2\u003eFrom Beginning to End\u003c/h2\u003e\n\n\u003cp\u003eWe've gone over the pieces of building an API, so to briefly summarize what\nwe've done in the last few lessons combined with this new knowledge, first we\ncreate the API-only Rails build:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erails new bird-watcher-api --api\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, navigate into the new Rails application once created. Rather than create\n\u003cem\u003eeverything\u003c/em\u003e by hand this time, we can use a generator to help us out with\nresources.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erails g resource bird name species\u003cbr\u003erails g resource location latitude longitude\u003cbr\u003erails g resource sighting bird:references location:references\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will create three migrations, three models, and three empty controllers. With\nminimal seed data we could then test that everything was working as expected:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebird_a = Bird.create(name: \"Black-Capped Chickadee\", species: \"Poecile Atricapillus\")\u003cbr\u003ebird_b = Bird.create(name: \"Grackle\", species: \"Quiscalus Quiscula\")\u003cbr\u003ebird_c = Bird.create(name: \"Common Starling\", species: \"Sturnus Vulgaris\")\u003cbr\u003ebird_d = Bird.create(name: \"Mourning Dove\", species: \"Zenaida Macroura\")\u003cbr\u003e\u003cbr\u003elocation_a = Location.create(latitude: \"40.730610\", longitude: \"-73.935242\")\u003cbr\u003elocation_b = Location.create(latitude: \"30.26715\", longitude: \"-97.74306\")\u003cbr\u003elocation_c = Location.create(latitude: \"45.512794\", longitude: \"-122.679565\")\u003cbr\u003e\u003cbr\u003esighting_a = Sighting.create(bird: bird_a, location: location_a)\u003cbr\u003esighting_b = Sighting.create(bird: bird_b, location: location_b)\u003cbr\u003esighting_c = Sighting.create(bird: bird_c, location: location_c)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen the controller actions we want in the API will need to be added:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  sightings = Sighting.all\u003cbr\u003e  render json: sightings, include: [:bird, :location]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince the \u003ccode\u003eresource\u003c/code\u003e generator was used, it would be good to be diligent and\nclean up \u003ccode\u003econfig/routes.rb\u003c/code\u003e once we've decided what endpoints the API should\nhave.\u003c/p\u003e\n\n\u003ch2\u003eA Note While Developing APIs - Dealing with CORS\u003c/h2\u003e\n\n\u003cp\u003eWhile working on your own APIs, you'll typically want to have your Rails server\nrunning while also trying out various endpoints using \u003ccode\u003efetch()\u003c/code\u003e. In order to do\nthis, though, you will need deal with \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eCross-Origin Resource Sharing\u003c/a\u003e, or CORS.\u003c/p\u003e\n\n\u003cp\u003eCORS is designed to prevent scripts like \u003ccode\u003efetch()\u003c/code\u003e from one origin accessing a\nresource from a different origin unless that resource specifically states that\nit expects to share. So, for instance, if you have run the command \u003ccode\u003erails\nserver\u003c/code\u003e with your server running at \u003ccode\u003ehttp://localhost:3000\u003c/code\u003e, then go to\n'\u003ca href=\"http://www.google.com,\"\u003ewww.google.com,\u003c/a\u003e' open the browser console and attempt to send a \u003ccode\u003efetch()\u003c/code\u003e to your\nserver. The browser considers these two different origins, and will \u003cem\u003erefuse\u003c/em\u003e\nyour request.\u003c/p\u003e\n\n\u003cp\u003eA solution is already provided though. By using the \u003ccode\u003e--api\u003c/code\u003e flag, the \u003ccode\u003eGemfile\u003c/code\u003e\nwas altered to include the \u003ca href=\"https://github.com/cyu/rack-cors\"\u003e\u003ccode\u003erack-cors\u003c/code\u003e\u003c/a\u003e gem. The gem will be commented out initially:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# Use Rack CORS for handling Cross-Origin Resource Sharing (CORS), making cross-origin AJAX possible\u003cbr\u003e# gem 'rack-cors'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo get \u003ccode\u003erack-cors\u003c/code\u003e working, uncomment the gem and run \u003ccode\u003ebundle install\u003c/code\u003e. Then, add the following to\n\u003ccode\u003econfig/application.rb\u003c/code\u003e \u003cstrong\u003einside\u003c/strong\u003e \u003ccode\u003eclass Application \u0026lt; Rails::Application\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e config.middleware.insert_before 0, Rack::Cors do\u003cbr\u003e      allow do\u003cbr\u003e        origins '*'\u003cbr\u003e        resource '*',\u003cbr\u003e          :headers =\u0026gt; :any,\u003cbr\u003e          :methods =\u0026gt; [:get, :post, :delete, :put, :patch, :options, :head],\u003cbr\u003e          :max_age =\u0026gt; 0\u003cbr\u003e      end\u003cbr\u003e    end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis shouldn't replace anything else inside \u003ccode\u003eclass Application \u0026lt; Rails::Application\u003c/code\u003e,\njust be included in addition.\u003c/p\u003e\n\n\u003cp\u003eThis will allow you to test your APIs while developing them locally. Secretly,\n\u003ccode\u003erack-cors\u003c/code\u003e has been bundled with the last set of lessons to ensure they were\nall working smoothly in case you decided to code along and spin up a rudimentary\nAPI.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWARNING:\u003c/strong\u003e Disabling CORS altogether in the long term can leave your server\nunsecure. Check out the documentation on \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eCORS\u003c/a\u003e and \u003ca href=\"https://github.com/cyu/rack-cors\"\u003e\u003ccode\u003erack-cors\u003c/code\u003e\u003c/a\u003e for\nadditional information.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith CORS enabled and your resources configured, you should be able to now\nrun \u003ccode\u003erails server\u003c/code\u003e, start up your API and begin sending requests to it. \u003c/p\u003e\n\n\u003cp\u003eYou have all that you need to get your own API-only Rails builds into\ndevelopment. If you can think of something that can be turned into an API, you\nnow have the power to spin one up in short order.\u003c/p\u003e\n\n\u003cp\u003eWith the ability to create APIs, we will take a closer look at shaping them.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://guides.rubyonrails.org/api_app.html\"\u003eUsing Rails for API-Only Applications\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eCORS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"creating-a-rails-api-from-scratch"},{"id":220836,"title":"Extracting a Service Class","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-extracting-a-service-class\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-extracting-a-service-class/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-extracting-a-service-class\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-extracting-a-service-class/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRemove logic from controller actions into a separate service class\u003c/li\u003e\n\u003cli\u003eRefactor code to eliminate repetition\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lessons, we started to see how customizing our JSON data in the\ncontroller works but can start to get pretty complicated. It is possible for\na single controller action to render data from multiple models on our Rails\nAPI. It is also possible to specify what we want and don't want to render.\u003c/p\u003e\n\n\u003cp\u003eThe complication comes when we start to scale. More models, more data, more\npieces to customize until it becomes unmanageable. In this code-along, we're going\nto look at building our own solution to this problem.\u003c/p\u003e\n\n\u003cp\u003eThe files in this lesson were populated using the API-only Rails build. Run\n\u003ccode\u003erails db:migrate\u003c/code\u003e and \u003ccode\u003erails db:seed\u003c/code\u003e to follow along.\u003c/p\u003e\n\n\u003ch2\u003eInitial Configuration\u003c/h2\u003e\n\n\u003cp\u003eThere are already three resources set up based on where we left off in the\nprevious lesson on \u003ccode\u003einclude\u003c/code\u003e: birds, locations, and sightings. Birds and\nlocations are related together through sightings:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Bird \u0026lt; ApplicationRecord\u003cbr\u003e  has_many :sightings\u003cbr\u003e  has_many :locations, through: :sightings\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Location \u0026lt; ApplicationRecord\u003cbr\u003e  has_many :sightings\u003cbr\u003e  has_many :birds, through: :sightings\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Sighting \u0026lt; ApplicationRecord\u003cbr\u003e  belongs_to :bird\u003cbr\u003e  belongs_to :location\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd we left off with a messy combination of \u003ccode\u003einclude\u003c/code\u003e, \u003ccode\u003eonly\u003c/code\u003e, and \u003ccode\u003eexcept\u003c/code\u003e in\norder to customize what attributes we wanted to render to JSON:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  render json: sighting.to_json(:include =\u0026gt; {\u003cbr\u003e    :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e    :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e  }, :except =\u0026gt; [:updated_at])\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlthough this is difficult to read, it does work. With this action in place,\nvisiting \u003ccode\u003ehttp://localhost:3000/sightings/2\u003c/code\u003e produces the following set of data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"bird_id\": 2,\u003cbr\u003e  \"location_id\": 2,\u003cbr\u003e  \"created_at\": \"2019-05-14T14:56:35.978Z\",\u003cbr\u003e  \"bird\": {\u003cbr\u003e    \"name\": \"Grackle\",\u003cbr\u003e    \"species\": \"Quiscalus Quiscula\"\u003cbr\u003e  },\u003cbr\u003e  \"location\": {\u003cbr\u003e    \"latitude\": 30.26715,\u003cbr\u003e    \"longitude\": -97.74306\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can use the same render statement in an \u003ccode\u003eindex\u003c/code\u003e action without having to change it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    sightings = Sighting.all\u003cbr\u003e    render json: sightings.to_json(:include =\u0026gt; {\u003cbr\u003e      :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e      :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e    }, :except =\u0026gt; [:updated_at])\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def show\u003cbr\u003e    sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e    render json: sighting.to_json(:include =\u0026gt; {\u003cbr\u003e      :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e      :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e    }, :except =\u0026gt; [:updated_at])\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, the way things are presents some problems. Having to include this in\nevery controller action would not be very DRY. In addition, as mentioned\nbefore, it is difficult to read, and equally difficult to write and update without\nmaking errors.\u003c/p\u003e\n\n\u003cp\u003eThere is also a separate issue - controllers are really just meant to act as a\nrelay between our models and our view, or well, our rendered JSON in this case.\nIf we can extract the work of customizing our JSON data and put it somewhere\nelse, we could keep our controller actions cleaner.\u003c/p\u003e\n\n\u003cp\u003eLet's resolve this issue before resolving the issue of readability. One way to\nresolve this issue is to build a service class.\u003c/p\u003e\n\n\u003ch2\u003eCreating a Service Class\u003c/h2\u003e\n\n\u003cp\u003eA service class is a class specific to our domain that handles some of the business\nlogic of the application. In this case, we are looking to handle the logic of\narranging our JSON data the way we want it.\u003c/p\u003e\n\n\u003cp\u003eIn the \u003ccode\u003eSightingsController\u003c/code\u003e, we already have working render statements. Our\ngoal is not to change these statements, just move the work off of the controller.\u003c/p\u003e\n\n\u003cp\u003eTo create a class we will be able to utilize in place of the current render\nstatements, first, we'll create a new folder within \u003ccode\u003eapp\u003c/code\u003e called \u003ccode\u003eservices\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emkdir app/services\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen we'll need to create a service class to use in our \u003ccode\u003eSightingsController\u003c/code\u003e.\nSince we're specifically arranging and serving up data, and also for reasons\nthat will become much clearer in the next lesson, we'll create a class called\n\u003ccode\u003eSightingSerializer\u003c/code\u003e and save it in the \u003ccode\u003eservices\u003c/code\u003e folder as\n\u003ccode\u003esighting_serializer.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etouch app/services/sighting_serializer.rb\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis can be a plain Ruby class without the need to inherit from anything:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingSerializer\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce a new class and file are created this way, you'll need to restart the Rails\nserver if it is running in order for \u003ccode\u003eSightingSerializer\u003c/code\u003e to be recognized\nand available in places like \u003ccode\u003eSightingsController\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConfiguring the New Serializer\u003c/h2\u003e\n\n\u003cp\u003eLooking back at \u003ccode\u003eSightingsController\u003c/code\u003e, we are currently calling the \u003ccode\u003eto_json\u003c/code\u003e\nmethod on the variables \u003ccode\u003esightings\u003c/code\u003e and \u003ccode\u003esighting\u003c/code\u003e in the two controller\nactions:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    sightings = Sighting.all\u003cbr\u003e    render json: sightings.to_json(:include =\u0026gt; {\u003cbr\u003e      :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e      :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e    }, :except =\u0026gt; [:updated_at])\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def show\u003cbr\u003e    sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e    render json: sighting.to_json(:include =\u0026gt; {\u003cbr\u003e      :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e      :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e    }, :except =\u0026gt; [:updated_at])\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemember, though, that everything following \u003ccode\u003eto_json\u003c/code\u003e is the same for both\nactions. The goal of our new serializer class is to replace this without having\nto change too much.\u003c/p\u003e\n\n\u003cp\u003eWe will approach configuring the serializer in two steps. First, we will want to\ndefine an \u003ccode\u003einitialize\u003c/code\u003e method for the class. If you recall from object-oriented\nRuby, we use the \u003ccode\u003einitialize\u003c/code\u003e method to set up any instance variables that we\nmight want to share over multiple methods. In this case, \u003ccode\u003einitialize\u003c/code\u003e will take\nin whatever variable we're dealing with in a particular action, and store it as\nan instance variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingSerializer\u003cbr\u003e\u003cbr\u003e  def initialize(sighting_object)\u003cbr\u003e    @sighting = sighting_object\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, whatever we pass when initializing a new instance of \u003ccode\u003eSightingSerializer\u003c/code\u003e\nwill be stored as \u003ccode\u003e@sighting\u003c/code\u003e. We will need access to this variable elsewhere\nin the \u003ccode\u003eSightingSerializer\u003c/code\u003e, so an instance variable is needed here.\u003c/p\u003e\n\n\u003cp\u003eThe second step is to write a method that will call \u003ccode\u003eto_json\u003c/code\u003e on this instance\nvariable, handling the inclusion and exclusion of attributes, and return the results. \nWe will call this method \u003ccode\u003eto_serialized_json\u003c/code\u003e, and for now we can directly copy the \n\u003ccode\u003eto_json\u003c/code\u003e logic that currently exists in \u003ccode\u003eSightingsController\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingSerializer\u003cbr\u003e\u003cbr\u003e  def initialize(sighting_object)\u003cbr\u003e    @sighting = sighting_object\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def to_serialized_json\u003cbr\u003e    @sighting.to_json(:include =\u0026gt; {\u003cbr\u003e      :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e      :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e    }, :except =\u0026gt; [:updated_at])\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this setup, once an instance of \u003ccode\u003eSightingSerializer\u003c/code\u003e is created, we can\ncall \u003ccode\u003eto_serialized_json\u003c/code\u003e on it to get our data customized and ready to go as\na JSON string!\u003c/p\u003e\n\n\u003cp\u003eNow it is time to clean up \u003ccode\u003eSightingsController\u003c/code\u003e and replace the original render\nstatements with our new service class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    sightings = Sighting.all\u003cbr\u003e    render json: SightingSerializer.new(sightings).to_serialized_json\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def show\u003cbr\u003e    sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e    render json: SightingSerializer.new(sighting).to_serialized_json\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExtraction complete! We've resolved the issue of keeping our controller clear of\nexcess logic by moving it to a separate class. However, we still haven't made\nour \u003ccode\u003eto_json\u003c/code\u003e any easier to read.\u003c/p\u003e\n\n\u003ch2\u003eOrganizing Options\u003c/h2\u003e\n\n\u003cp\u003eIn the \u003ccode\u003eto_serialized_json\u003c/code\u003e method, we are passing multiple options into\n\u003ccode\u003eto_json\u003c/code\u003e when it is called. These options are just key/value pairs in a hash,\nthough, and we can choose to break this line up to get a better grasp of what is\nactually going on. Rewriting the method without changing any functionality, we\ncould write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef to_serialized_json\u003cbr\u003e  options = {\u003cbr\u003e    include: {\u003cbr\u003e      bird: {\u003cbr\u003e        only: [:name, :species]\u003cbr\u003e      },\u003cbr\u003e      location: {\u003cbr\u003e        only: [:latitude, :longitude]\u003cbr\u003e      }\u003cbr\u003e    },\u003cbr\u003e    except: [:updated_at],\u003cbr\u003e  }\u003cbr\u003e  @sighting.to_json(options)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove, we define a variable, \u003ccode\u003eoptions\u003c/code\u003e, assigning it to a hash. We then\ndefine two keys on that hash, \u003ccode\u003e:include\u003c/code\u003e and \u003ccode\u003e:except\u003c/code\u003e, and assign them the\nsame values as before. Finally, at the end of the method, instead of filling \n\u003ccode\u003eto_json\u003c/code\u003e with a long list of options, we pass in the \u003ccode\u003eoptions\u003c/code\u003e hash.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith a fully extracted \u003ccode\u003eSightingSerializer\u003c/code\u003e, we were able to leave our controller\nfree of clutter and extra logic. We were able to write a small class and utilize\nits methods multiple times, rather than repeat ourselves. Meanwhile, we now have\nthe space within that class to make our code as easy to understand as possible.\u003c/p\u003e","exportId":"g8ca2f0be6190d4c26a41f5865a54cf01"},{"id":220842,"title":"Using the Fast JSON API","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-using-fast-json-api\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-using-fast-json-api/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-using-fast-json-api\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-using-fast-json-api/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduce the Fast JSON API gem\u003c/li\u003e\n\u003cli\u003eCreate serializers using the Fast JSON API gem\u003c/li\u003e\n\u003cli\u003eRender related object attributes into JSON data\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've seen that it is entirely possible to create our own service class\nserializers from scratch. This issue is common enough, though, that there are\nsome popular standardized serializer options available for us to use. In this\nlesson, we are going to look at one popular option, the \u003ca href=\"https://github.com/Netflix/fast_jsonapi\"\u003eFast JSON API\u003c/a\u003e\ngem and use it to create a close approximation to our JSON data from the\nprevious lessons.\u003c/p\u003e\n\n\u003cp\u003eThe files in this lesson were populated using the API-only Rails build. Run\n\u003ccode\u003erails db:migrate\u003c/code\u003e and \u003ccode\u003erails db:seed\u003c/code\u003e to follow along.\u003c/p\u003e\n\n\u003ch2\u003eIntroduce the Fast JSON API\u003c/h2\u003e\n\n\u003cp\u003eThe Fast JSON API is a JSON serializer for Rails APIs. It provides a way for us\nto generate \u003cem\u003eserializer\u003c/em\u003e classes for each resource object in our API that is\ninvolved in customized JSON rendering. We can use these serializer classes to\ndefine the specific attributes we want objects to share or not share, along with\nthings like related object attributes.\u003c/p\u003e\n\n\u003cp\u003eThe result is that in our controller actions, rather than writing a custom\n\u003ccode\u003erender\u003c/code\u003e each time, we write out a serializer for each object once and use Fast\nJSON API to control the way our data is structured.\u003c/p\u003e\n\n\u003ch2\u003eInitial Configuration\u003c/h2\u003e\n\n\u003cp\u003eBefore we can see the solution Fast JSON API provides, let's look back at the\nproblem we've been dealing with. We will start at the same place we started when creating our own\nservice class serializer. This code-along has three resources set up: birds,\nlocations and sightings:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Bird \u0026lt; ApplicationRecord\u003cbr\u003e  has_many :sightings\u003cbr\u003e  has_many :locations, through: :sightings\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Location \u0026lt; ApplicationRecord\u003cbr\u003e  has_many :sightings\u003cbr\u003e  has_many :birds, through: :sightings\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Sighting \u0026lt; ApplicationRecord\u003cbr\u003e  belongs_to :bird\u003cbr\u003e  belongs_to :location\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe also have one customized controller action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingsController \u0026lt; ApplicationController\u003cbr\u003e  def show\u003cbr\u003e    sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e    render json: sighting.to_json(:include =\u0026gt; {\u003cbr\u003e      :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e      :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e    }, :except =\u0026gt; [:updated_at])\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis produces a specific set of data, with some but not all related attributes\nincluded:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"bird_id\": 2,\u003cbr\u003e  \"location_id\": 2,\u003cbr\u003e  \"created_at\": \"2019-05-14T11:20:37.228Z\",\u003cbr\u003e  \"bird\": {\u003cbr\u003e    \"name\": \"Grackle\",\u003cbr\u003e    \"species\": \"Quiscalus Quiscula\"\u003cbr\u003e  },\u003cbr\u003e  \"location\": {\u003cbr\u003e    \"latitude\": 30.26715,\u003cbr\u003e    \"longitude\": -97.74306\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith just three objects and some minor customization, rendering has become\ncomplicated. With Fast JSON API, we can extract and separate this work into\nSerializer classes, keeping our controller cleaner.\u003c/p\u003e\n\n\u003ch2\u003eSetting up Fast JSON API\u003c/h2\u003e\n\n\u003cp\u003eTo include Fast JSON API, add \u003ccode\u003egem 'fast_jsonapi'\u003c/code\u003e to your Rails project's Gemfile\nand run \u003ccode\u003ebundle install\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOnce installed, you will gain access to a new generator, \u003ccode\u003eserializer\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eImplementing the Fast JSON API\u003c/h2\u003e\n\n\u003cp\u003eWith the new \u003ccode\u003eserializer\u003c/code\u003e generator, we can create serializer classes for all\nthree of our models, which will be available to us in any controller actions\nlater.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erails g serializer Bird\u003cbr\u003erails g serializer Location\u003cbr\u003erails g serializer Sighting\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning the above generators will create a \u003ccode\u003eserializers\u003c/code\u003e folder within \u003ccode\u003e/app\u003c/code\u003e,\nand inside, \u003ccode\u003ebird_serializer.rb\u003c/code\u003e, \u003ccode\u003elocation_serializer.rb\u003c/code\u003e, and\n\u003ccode\u003esighting_serializer.rb\u003c/code\u003e. With these serializers, we can start\nto define information about each model and their \u003cem\u003erelated\u003c/em\u003e models we want \nto share in our API.\u003c/p\u003e\n\n\u003ch2\u003eUpdating the Controller Action\u003c/h2\u003e\n\n\u003cp\u003eTo start using the new serializers, we can update our \u003ccode\u003erender json:\u003c/code\u003e statement\nso that it initializes the newly created \u003ccode\u003eSightingSerializer\u003c/code\u003e, passing in a variable,\njust as we did when creating our own service class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingsController \u0026lt; ApplicationController\u003cbr\u003e  def show\u003cbr\u003e    sighting = Sighting.find(params[:id])\u003cbr\u003e    render json: SightingSerializer.new(sighting)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: Serializers generated by the Fast JSON API gem have two built-in methods \ncalled \u003ccode\u003eserializable_hash\u003c/code\u003e and \u003ccode\u003eserialized_json\u003c/code\u003e which return a serialized hash and a\nJSON string respectively. However, we don't actually need either of these in this example,\nas \u003ccode\u003eto_json\u003c/code\u003e will still be called on \u003ccode\u003eSightingSerializer.new(sighting)\u003c/code\u003e implicitly.\nAs we will see, once our serializers are configured and initialized, we will not need\u003cbr\u003e\nto do any additional work\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe \u003ccode\u003eSightingSerializer.new(sighting)\u003c/code\u003e statement can be used on \u003cem\u003eall\u003c/em\u003e \u003ccode\u003eSightingController\u003c/code\u003e \nactions we want to serialize, so if we were to add an \u003ccode\u003eindex\u003c/code\u003e, for instance, we just \npass in the array of all sightings as well:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  sightings = Sighting.all\u003cbr\u003e  render json: SightingSerializer.new(sightings)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut there is a problem still! If we fire up our Rails server and visit\n\u003ccode\u003ehttp://localhost:3000/sightings/2\u003c/code\u003e, all we see is the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": \"2\",\u003cbr\u003e  \"type\": \"sighting\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe serializer is working, but it behaves a little differently than we're \nused to.\u003c/p\u003e\n\n\u003ch2\u003eAdding Attributes\u003c/h2\u003e\n\n\u003cp\u003eWhen rendering JSON directly, controllers will render all attributes available by\ndefault. These serializers work the other way around - we must always specify\nwhat attributes we \u003cem\u003ewant\u003c/em\u003e to include. In our example, birds have \u003ccode\u003ename\u003c/code\u003e and\n\u003ccode\u003especies\u003c/code\u003e attributes and locations have \u003ccode\u003elatitude\u003c/code\u003e and \u003ccode\u003elongitude\u003c/code\u003e attributes,\nso to include these we would update both serializers. For sightings, we could\ninclude the \u003ccode\u003ecreated_at\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdSerializer\u003cbr\u003e  include FastJsonapi::ObjectSerializer\u003cbr\u003e  attributes :name, :species\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass LocationSerializer\u003cbr\u003e  include FastJsonapi::ObjectSerializer\u003cbr\u003e  attributes :latitude, :longitude\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingSerializer\u003cbr\u003e  include FastJsonapi::ObjectSerializer\u003cbr\u003e  attributes :created_at\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we go back and check \u003ccode\u003ehttp://localhost:3000/sightings/2\u003c/code\u003e again, this time,\nwe will see that the \u003ccode\u003ecreated_at\u003c/code\u003e attribute is present:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": \"2\",\u003cbr\u003e  \"type\": \"sighting\",\u003cbr\u003e  \"attributes\": {\u003cbr\u003e    \"created_at\": \"2019-05-14T16:39:37.011Z\"\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can also use attributes to access related objects, adding them alongside\nnormal object attributes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingSerializer\u003cbr\u003e  include FastJsonapi::ObjectSerializer\u003cbr\u003e  attributes :created_at, :bird, :location\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis results in our rendered JSON including an \u003ccode\u003e\"attributes\"\u003c/code\u003e object with \n\u003ccode\u003e\"created_at\"\u003c/code\u003e, \u003ccode\u003e\"bird\"\u003c/code\u003e, and \u003ccode\u003e\"location\"\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": \"2\",\u003cbr\u003e  \"type\": \"sighting\",\u003cbr\u003e  \"attributes\": {\u003cbr\u003e    \"created_at\": \"2019-05-14T16:39:37.011Z\",\u003cbr\u003e    \"bird\": {\u003cbr\u003e      \"id\": 2,\u003cbr\u003e      \"name\": \"Grackle\",\u003cbr\u003e      \"species\": \"Quiscalus Quiscula\",\u003cbr\u003e      \"created_at\": \"2019-05-14T16:39:36.917Z\",\u003cbr\u003e      \"updated_at\": \"2019-05-14T16:39:36.917Z\"\u003cbr\u003e    },\u003cbr\u003e    \"location\": {\u003cbr\u003e      \"id\": 2,\u003cbr\u003e      \"latitude\": 30.26715,\u003cbr\u003e      \"longitude\": -97.74306,\u003cbr\u003e      \"created_at\": \"2019-05-14T16:39:36.942Z\",\u003cbr\u003e      \"updated_at\": \"2019-05-14T16:39:36.942Z\"\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, here, we have no control over what attributes are included in the\nrelated objects, and so we get \u003cem\u003eall\u003c/em\u003e the attributes of \u003ccode\u003e\"bird\"\u003c/code\u003e and\n\u003ccode\u003e\"location\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eAdding Relationships\u003c/h2\u003e\n\n\u003cp\u003eObject relationships can be included in serializers in two steps. The first step\nis that we include the relationships we want to reflect in our serializers. We\ncan do this in the same way that we include them in the models themselves. A\nsighting, for instance, belongs to a bird and a location, so we can update the\nserializer to reflect this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingSerializer\u003cbr\u003e  include FastJsonapi::ObjectSerializer\u003cbr\u003e  attributes :created_at\u003cbr\u003e  belongs_to :bird\u003cbr\u003e  belongs_to :location\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, when visiting \u003ccode\u003ehttp://localhost:3000/sightings/2\u003c/code\u003e, Fast JSON API will \ndisplay a new \u003ccode\u003e\"relationships\"\u003c/code\u003e object, but will only provide limited\ninformation, including the id of the related object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": \"2\",\u003cbr\u003e  \"type\": \"sighting\",\u003cbr\u003e  \"attributes\": {\u003cbr\u003e    \"created_at\": \"2019-05-14T16:39:37.011Z\"\u003cbr\u003e  },\u003cbr\u003e  \"relationships\": {\u003cbr\u003e    \"bird\": {\u003cbr\u003e      \"data\": {\u003cbr\u003e        \"id\": \"2\",\u003cbr\u003e        \"type\": \"bird\"\u003cbr\u003e      }\u003cbr\u003e    },\u003cbr\u003e    \"location\": {\u003cbr\u003e      \"data\": {\u003cbr\u003e        \"id\": \"2\",\u003cbr\u003e        \"type\": \"location\"\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSetting these relationships up is necessary for the second step. Now that we\nhave included relationships connecting the \u003ccode\u003eSightingSerializer\u003c/code\u003e to \u003ccode\u003e:bird\u003c/code\u003e and\n\u003ccode\u003e:location\u003c/code\u003e, to include attributes from those objects, the recommended method is\nto pass in a second \u003cem\u003eoptions\u003c/em\u003e parameter to the serializer indicating that we want to\n\u003cem\u003einclude\u003c/em\u003e those objects:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  options = {\u003cbr\u003e    include: [:bird, :location]\u003cbr\u003e  }\u003cbr\u003e  render json: SightingSerializer.new(sighting, options)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe result:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"data\": {\u003cbr\u003e    \"id\": \"2\",\u003cbr\u003e    \"type\": \"sighting\",\u003cbr\u003e    \"attributes\": {\u003cbr\u003e      \"created_at\": \"2019-05-14T16:39:37.011Z\"\u003cbr\u003e    },\u003cbr\u003e    \"relationships\": {\u003cbr\u003e      \"bird\": {\u003cbr\u003e        \"data\": {\u003cbr\u003e          \"id\": \"2\",\u003cbr\u003e          \"type\": \"bird\"\u003cbr\u003e        }\u003cbr\u003e      },\u003cbr\u003e      \"location\": {\u003cbr\u003e        \"data\": {\u003cbr\u003e          \"id\": \"2\",\u003cbr\u003e          \"type\": \"location\"\u003cbr\u003e        }\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e  },\u003cbr\u003e  \"included\": [{\u003cbr\u003e      \"id\": \"2\",\u003cbr\u003e      \"type\": \"bird\",\u003cbr\u003e      \"attributes\": {\u003cbr\u003e        \"name\": \"Grackle\",\u003cbr\u003e        \"species\": \"Quiscalus Quiscula\"\u003cbr\u003e      }\u003cbr\u003e    },\u003cbr\u003e    {\u003cbr\u003e      \"id\": \"2\",\u003cbr\u003e      \"type\": \"location\",\u003cbr\u003e      \"attributes\": {\u003cbr\u003e        \"latitude\": 30.26715,\u003cbr\u003e        \"longitude\": -97.74306\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e  ]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause we have a \u003ccode\u003eBirdSerializer\u003c/code\u003e and a \u003ccode\u003eLocationSerializer\u003c/code\u003e, when including\n\u003ccode\u003e:bird\u003c/code\u003e and \u003ccode\u003e:location\u003c/code\u003e, Fast JSON API will automatically serialize their\nattributes as well.\u003c/p\u003e\n\n\u003ch2\u003eNot Quite the Data Structure We Started With\u003c/h2\u003e\n\n\u003cp\u003eAt the beginning of this lesson, we had the following JSON, but with a messy\ncontroller:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"bird_id\": 2,\u003cbr\u003e  \"location_id\": 2,\u003cbr\u003e  \"created_at\": \"2019-05-14T11:20:37.228Z\",\u003cbr\u003e  \"bird\": {\u003cbr\u003e    \"name\": \"Grackle\",\u003cbr\u003e    \"species\": \"Quiscalus Quiscula\"\u003cbr\u003e  },\u003cbr\u003e  \"location\": {\u003cbr\u003e    \"latitude\": 30.26715,\u003cbr\u003e    \"longitude\": -97.74306\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you recall from when we created our own service class, since we just moved\nthe \u003ccode\u003eto_json\u003c/code\u003e call from the controller action to our serializer, the\nJSON data structure looked the same.\u003c/p\u003e\n\n\u003cp\u003eUsing Fast JSON API, with the use of relationships and passing a second\nparameter, we are able to get the same \u003cem\u003edata\u003c/em\u003e, but in a much different\nstructure. Fast JSON API is meant to be flexible and easy to implement, and it\ndefinitely is! From this point in the example bird watching application, we\ncould fill out \u003ccode\u003eBird\u003c/code\u003e and \u003ccode\u003eLocation\u003c/code\u003e controllers and when we add in controller\nactions, we already have serializers created and ready to use!\u003c/p\u003e\n\n\u003cp\u003eIn using Fast JSON API though, we lose the ability to design the structure of\nour JSON data.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThere is a lot more you can do with the Fast JSON API gem, and it is worth\nreading through their \u003ca href=\"https://github.com/Netflix/fast_jsonapi#table-of-contents\"\u003edocumentation\u003c/a\u003e to become more familiar with\nit. It is possible, for instance, to create entirely custom attributes!\u003c/p\u003e\n\n\u003cp\u003eWhat we covered is enough to get us close to where we were creating our\nown customized serializers. We do not get to choose exactly how data gets\nserialized the way we do when writing our own serializer classes, but we\ngain a lot of flexibility by using the Fast JSON API.\u003c/p\u003e\n\n\u003cp\u003eThe Fast JSON API gem provides a quick way to generate and customize JSON\nserializers with minimal configuration. Its conventions also allow it to work\nwell even when dealing with a large number of related objects.\u003c/p\u003e\n\n\u003cp\u003eOverall, the goal of this section is to get you comfortable enough to get Rails\nAPIs up and running. With practice, it is possible to build a multi-resource\nAPI, complete with many serialized JSON rendering endpoints \u003cem\u003ewithin minutes\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eBeing able to quickly spin up an API to practice your \u003ccode\u003efetch()\u003c/code\u003e skills is an\nexcellent way to get familiar with asynchronous requests. As you move towards\nbuilding larger frontend projects, you'll also quickly need a place to persist\ndata and handle things like login security. Rails as an API will be a critical\nasset in your development through the remainder of this course.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Netflix/fast_jsonapi\"\u003eFast JSON API\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g34609dadc626cf2330b94a8f570de4de"}]},{"id":24129,"name":"Authorization","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g7e741cdccaf2e934400aa24ec35491f0","items":[{"id":220853,"title":"JWT Auth","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"jwt-auth-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/jwt-auth-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/jwt-auth-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/jwt-auth-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003e\u003cstrong\u003eThis is a sample application and walks through \u003cem\u003eone\u003c/em\u003e possible auth implementation. It does not cover everything there is to know about auth and is intended as an introduction. Please do not blindly copy/paste the code here. Use this as a guide for setting up auth in a React/Redux application using JSON Web Tokens.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSecond disclaimer: there are tradeoffs to every auth implementation. To secure our application further, we should set our tokens to expire and make sure our app is being served over \u003ca href=\"https://en.wikipedia.org/wiki/HTTPS\"\u003eHTTPS\u003c/a\u003e. Furthermore, there are some \u003ca href=\"https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage\"\u003etradeoffs to storing JWTs in browser \u003ccode\u003elocalStorage\u003c/code\u003e\u003c/a\u003e. \u003ca href=\"https://stackoverflow.com/questions/35291573/csrf-protection-with-json-web-tokens/35347022#35347022\"\u003eThis StackOverflow post has a concise summary of the benefits/tradeoffs about where/how to store tokens client-side\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\n\u003ch2\u003eRAILS BCrypt, JWT 🔐\u003c/h2\u003e\n\n\u003ch4\u003eBuilding Our Server\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eThis section will walk through building a rails server. If you have questions about \u003ccode\u003eCors\u003c/code\u003e, \u003ccode\u003eActiveModel::Serializer\u003c/code\u003e, \u003ccode\u003ePostgres\u003c/code\u003e, namespacing and versioning our API, and/or general questions about Rails as an api only, refer \u003ca href=\"https://github.com/learn-co-curriculum/mod3-project-week-setup-example\"\u003eto this guide\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLet's create our app with \u003ccode\u003erails new backend_project_name --api --database=postgresql\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe're going to need a few gems in our \u003ca href=\"https://learning.flatironschool.com/server/Gemfile\"\u003eGemfile\u003c/a\u003e so let's go ahead and add them: \u003ccode\u003ebundle add jwt \u0026amp;\u0026amp; bundle add active_model_serializers \u0026amp;\u0026amp; bundle add faker\u003c/code\u003e––if you get a gem not found error, try running gem install on each of these, or manually add them to your \u003ca href=\"https://learning.flatironschool.com/server/Gemfile\"\u003eGemfile\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDon't forget to uncomment \u003ccode\u003erack-cors\u003c/code\u003e and \u003ccode\u003ebcrypt\u003c/code\u003e from your \u003ca href=\"https://learning.flatironschool.com/server/Gemfile\"\u003eGemfile\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCall \u003ccode\u003ebundle install\u003c/code\u003e. Your \u003ca href=\"https://learning.flatironschool.com/server/Gemfile\"\u003eGemfile\u003c/a\u003e should look something like this:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003esource 'https://rubygems.org'\u003cbr\u003egit_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\u003cbr\u003e\u003cbr\u003eruby '2.5.1'\u003cbr\u003e\u003cbr\u003e# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'\u003cbr\u003egem 'rails', '~\u0026gt; 5.2.1'\u003cbr\u003e# Use postgresql as the database for Active Record\u003cbr\u003egem 'pg', '\u0026gt;= 0.18', '\u0026lt; 2.0'\u003cbr\u003e# Use Puma as the app server\u003cbr\u003egem 'puma', '~\u0026gt; 3.11'\u003cbr\u003e# Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder\u003cbr\u003e# gem 'jbuilder', '~\u0026gt; 2.5'\u003cbr\u003e# Use Redis adapter to run Action Cable in production\u003cbr\u003e# gem 'redis', '~\u0026gt; 4.0'\u003cbr\u003e# Use ActiveModel has_secure_password\u003cbr\u003egem 'bcrypt', '~\u0026gt; 3.1.7'\u003cbr\u003e\u003cbr\u003e# Use ActiveStorage variant\u003cbr\u003e# gem 'mini_magick', '~\u0026gt; 4.8'\u003cbr\u003e\u003cbr\u003e# Use Capistrano for deployment\u003cbr\u003e# gem 'capistrano-rails', group: :development\u003cbr\u003e\u003cbr\u003e# Reduces boot times through caching; required in config/boot.rb\u003cbr\u003egem 'bootsnap', '\u0026gt;= 1.1.0', require: false\u003cbr\u003e\u003cbr\u003e# Use Rack CORS for handling Cross-Origin Resource Sharing (CORS), making cross-origin AJAX possible\u003cbr\u003egem 'rack-cors'\u003cbr\u003e\u003cbr\u003e\u003cbr\u003egroup :development, :test do\u003cbr\u003e  # Call 'byebug' anywhere in the code to stop execution and get a debugger console\u003cbr\u003e  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egroup :development do\u003cbr\u003e  gem 'listen', '\u0026gt;= 3.0.5', '\u0026lt; 3.2'\u003cbr\u003e  # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring\u003cbr\u003e  gem 'spring'\u003cbr\u003e  gem 'spring-watcher-listen', '~\u0026gt; 2.0.0'\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e# Windows does not include zoneinfo files, so bundle the tzinfo-data gem\u003cbr\u003egem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby]\u003cbr\u003e\u003cbr\u003egem \"jwt\", \"~\u0026gt; 2.1\"\u003cbr\u003e\u003cbr\u003egem \"active_model_serializers\", \"~\u0026gt; 0.10.7\"\u003cbr\u003e\u003cbr\u003egem \"faker\", \"~\u0026gt; 1.9\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eDon't forget to enable \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eCORS\u003c/a\u003e in your app. Uncomment the following in \u003ca href=\"https://learning.flatironschool.com/server/config/initializers/cors.rb\"\u003e\u003ccode\u003econfig/initializers/cors.rb\u003c/code\u003e\u003c/a\u003e. Don't forget to change the origins from \u003ccode\u003eexample.com\u003c/code\u003e to \u003ccode\u003e*\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eDepending on the use-case and needs of our API, we might want to limit access to our app. For example, if our React frontend is deployed to \u003ccode\u003emyDankReactApp.com\u003c/code\u003e, we might want to limit access to that domain only. If certain endpoints are meant to be public, we can make those available but limit to \u003ccode\u003eGET\u003c/code\u003e requests, for example.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eRails.application.config.middleware.insert_before 0, Rack::Cors do\u003cbr\u003e  allow do\u003cbr\u003e    origins '*'\u003cbr\u003e\u003cbr\u003e    resource '*',\u003cbr\u003e      headers: :any,\u003cbr\u003e      methods: [:get, :post, :put, :patch, :delete, :options, :head]\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eYou can refer to the \u003ca href=\"https://github.com/cyu/rack-cors\"\u003erack-cors gem\u003c/a\u003e for more information about this file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePlease don't forget to change these settings before deploying your app to the internet. \u003cem\u003ePlease\u003c/em\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\n\u003ch4\u003eCreating Users\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eRun\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erails g model User username password_digest bio avatar\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erails g controller api/v1/users\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003erails g serializer user\u003c/code\u003e (if you want to \u003ca href=\"https://www.sitepoint.com/active-model-serializers-rails-and-json-oh-my/\"\u003euse a serializer\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erails db:create\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erails db:migrate\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAdd \u003ccode\u003ehas_secure_password\u003c/code\u003e to \u003ca href=\"https://learning.flatironschool.com/server/app/models/user.rb\"\u003e\u003ccode\u003eapp/models/user.rb\u003c/code\u003e\u003c/a\u003e. Recall that \u003ccode\u003ehas_secure_password\u003c/code\u003e comes from \u003ca href=\"https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password\"\u003e\u003ccode\u003eActiveModel\u003c/code\u003e and adds methods to set and authenticate against a BCrypt password\u003c/a\u003e:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass User \u0026lt; ApplicationRecord\u003cbr\u003e  has_secure_password\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eYou might also want to add some \u003ca href=\"https://guides.rubyonrails.org/active_record_validations.html\"\u003evalidations\u003c/a\u003e to your users:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass User \u0026lt; ApplicationRecord\u003cbr\u003e  has_secure_password\u003cbr\u003e  validates :username, uniqueness: { case_sensitive: false }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003ch4\u003eQuick BCrypt Tangent\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eRecall that \u003ccode\u003eBCrypt\u003c/code\u003e allows us to \u003ca href=\"https://en.wikipedia.org/wiki/Salt_(cryptography)\"\u003esalt\u003c/a\u003e users' plaintext passwords before running them through a \u003ca href=\"https://en.wikipedia.org/wiki/Cryptographic_hash_function\"\u003ehashing function\u003c/a\u003e. A hashing function is, basically, a \u003cem\u003eone way\u003c/em\u003e function. Similar to putting something in a meat grinder: we cannot \u003cem\u003efeasibly\u003c/em\u003e reconstruct something that's been ground up by a meat grinder. We then store these passwords that have been 'digested' by \u003ccode\u003eBCrypt\u003c/code\u003e in our database. \u003cstrong\u003e\u003ca href=\"https://blog.mozilla.org/webdev/2012/06/08/lets-talk-about-password-storage/\"\u003eNever ever ever store your users' plaintext passwords in your database\u003c/a\u003e. It's bad form and should be avoided at all costs.\u003c/strong\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLet's take a look at some of the functionality provided by \u003ccode\u003eBCrypt\u003c/code\u003e:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e# in rails console\u003cbr\u003e\u0026gt; BCrypt::Password.create('P@ssw0rd')\u003cbr\u003e =\u0026gt; \"$2a$10$D0iXNNy/5r2YC5GC4ArGB.dNL6IpUzxH3WjCewb3FM8ciwsHBt0cq\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eBCrypt::Password\u003c/code\u003e \u003ca href=\"https://github.com/codahale/bcrypt-ruby/blob/master/lib/bcrypt/password.rb#L23\"\u003einherits from the Ruby \u003ccode\u003eString\u003c/code\u003e class\u003c/a\u003e and has its own \u003ca href=\"https://github.com/codahale/bcrypt-ruby/blob/master/lib/bcrypt/password.rb#L65\"\u003e== instance method\u003c/a\u003e that allows us to run a plaintext password through \u003ccode\u003eBCrypt\u003c/code\u003e \u003cem\u003eusing the same salt\u003c/em\u003e and compare it against an already digested password:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e# in rails console\u003cbr\u003e\u0026gt; salted_pw = BCrypt::Password.create('P@ssw0rd')\u003cbr\u003e  =\u0026gt; \"$2a$10$YQvJPemUzm8IdCCaHxiOOes6HMEHda/.Hl60cUoYb4X4fncgT8ubG\"\u003cbr\u003e\u003cbr\u003e\u0026gt; salted_pw.class\u003cbr\u003e  =\u0026gt; BCrypt::Password\u003cbr\u003e\u003cbr\u003e\u0026gt; salted_pw == 'P@ssw0rd'\u003cbr\u003e  =\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eBCrypt\u003c/code\u003e also provides a method that will take a stringified \u003ccode\u003epassword_digest\u003c/code\u003e and turn it into an instance of \u003ccode\u003eBCrypt::Password\u003c/code\u003e, allowing us to call the over-written \u003ccode\u003e==\u003c/code\u003e method.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e# in rails console\u003cbr\u003e\u0026gt; sample_digest = User.last.password_digest\u003cbr\u003e  =\u0026gt; \"$2a$10$SJiIJnmQJ/A4z4fFG5EuE.aOoCjacFuQMVpVzQnhPSJKYLFCoqmWy\"\u003cbr\u003e\u003cbr\u003e\u0026gt; sample_digest.class\u003cbr\u003e  =\u0026gt; String\u003cbr\u003e\u003cbr\u003e\u0026gt; sample_digest == 'P@ssword'\u003cbr\u003e =\u0026gt; false\u003cbr\u003e\u003cbr\u003e\u0026gt; bcrypt_sample_digest = BCrypt::Password.new(sample_digest)\u003cbr\u003e  =\u0026gt; \"$2a$10$dw4sYcbLXc8XRX6YGc7ve.ot6LbYevMbSpFQZUaa8tm5NI8cxBPwa\"\u003cbr\u003e\u003cbr\u003e\u0026gt; bcrypt_sample_digest.class\u003cbr\u003e  =\u0026gt; BCrypt::Password\u003cbr\u003e\u003cbr\u003e\u0026gt; bcrypt_sample_digest == 'P@ssw0rd'\u003cbr\u003e  =\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/26ufdipQqU2lhNA4g/giphy.gif\" alt=\"mind blown\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWe have no way of storing instances of \u003ccode\u003eBCrypt::Password\u003c/code\u003e in our database. Instead, we're storing users' password digests \u003cstrong\u003e\u003ca href=\"https://learning.flatironschool.com/server/db/schema.rb\"\u003eas strings\u003c/a\u003e\u003c/strong\u003e. If we were to build our own \u003ccode\u003eUser#authenticate\u003c/code\u003e method using \u003ccode\u003eBCrypt\u003c/code\u003e, it might look something like this:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass User \u0026lt; ApplicationRecord\u003cbr\u003e  attr_accessor :password\u003cbr\u003e\u003cbr\u003e  def authenticate(plaintext_password)\u003cbr\u003e    if BCrypt::Password.new(self.password_digest) == plaintext_password\u003cbr\u003e      self\u003cbr\u003e    else\u003cbr\u003e      false\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# in rails console\u003cbr\u003e\u0026gt; User.last.authenticate('not my password')\u003cbr\u003e  =\u0026gt; false\u003cbr\u003e\u003cbr\u003e\u0026gt; User.last.authenticate('P@ssw0rd')\u003cbr\u003e  =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eInstead of creating our own \u003ccode\u003eUser#authenticate\u003c/code\u003e method, we can use \u003ca href=\"https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password\"\u003e\u003ccode\u003eActiveModel#has_secure_password\u003c/code\u003e\u003c/a\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass User \u0026lt; ApplicationRecord\u003cbr\u003e  has_secure_password\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/l4Jz3a8jO92crUlWM/giphy.gif\" alt=\"salt bae\"\u003e\u003c/p\u003e\n\n\u003ch4\u003eEnd of BCrypt Tangent\u003c/h4\u003e\n\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eLet's add a \u003ccode\u003ecreate\u003c/code\u003e method to our \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003e\u003ccode\u003eUsersController\u003c/code\u003e\u003c/a\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass Api::V1::UsersController \u0026lt; ApplicationController\u003cbr\u003e  def create\u003cbr\u003e    @user = User.create(user_params)\u003cbr\u003e    if @user.valid?\u003cbr\u003e      render json: { user: UserSerializer.new(@user) }, status: :created\u003cbr\u003e    else\u003cbr\u003e      render json: { error: 'failed to create user' }, status: :not_acceptable\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e  def user_params\u003cbr\u003e    params.require(:user).permit(:username, :password, :bio, :avatar)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWe can use the \u003ca href=\"https://gist.github.com/mlanett/a31c340b132ddefa9cca\"\u003ebuilt in Rails HTTP status code symbols\u003c/a\u003e when sending responses to the client; \u003ccode\u003estatus: :not_acceptable\u003c/code\u003e, for instance. Need a refresher on \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\"\u003eHTTP Status Codes\u003c/a\u003e? Check out \u003ca href=\"http://httpstatusrappers.com/\"\u003ehttpstatusrappers.com/\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAnd update our \u003ca href=\"https://learning.flatironschool.com/server/app/serializers/user_serializer.rb\"\u003e\u003ccode\u003eUserSerializer\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass UserSerializer \u0026lt; ActiveModel::Serializer\u003cbr\u003e  attributes :username, :avatar, :bio\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eNext let's add the routes we'll need for our server. In \u003ca href=\"https://learning.flatironschool.com/server/config/routes.rb\"\u003e\u003ccode\u003econfig/routes.rb\u003c/code\u003e\u003c/a\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eRails.application.routes.draw do\u003cbr\u003e  namespace :api do\u003cbr\u003e    namespace :v1 do\u003cbr\u003e      resources :users, only: [:create]\u003cbr\u003e      post '/login', to: 'auth#create'\u003cbr\u003e      get '/profile', to: 'users#profile'\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eTake some time to test this either in \u003ca href=\"https://www.getpostman.com/apps\"\u003ePostman\u003c/a\u003e or with JavaScript fetch:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003efetch('http://localhost:3000/api/v1/users', {\u003cbr\u003e  method: 'POST',\u003cbr\u003e  headers: {\u003cbr\u003e    'Content-Type': 'application/json',\u003cbr\u003e    Accept: 'application/json'\u003cbr\u003e  },\u003cbr\u003e  body: JSON.stringify({\u003cbr\u003e    user: {\u003cbr\u003e      username: \"sylviawoods\",\u003cbr\u003e      password: \"whatscooking\",\u003cbr\u003e      bio: \"Sylvia Woods was an American restaurateur who founded the sould food restaurant Sylvia's in Harlem on Lenox Avenue, New York City in 1962. She published two cookbooks and was an important figure in the community.\",\u003cbr\u003e      avatar: \"https://upload.wikimedia.org/wikipedia/commons/4/49/Syvia_of_Sylvia%27s_reaturant_N.Y.C_%28cropped%29.jpg\"\u003cbr\u003e    }\u003cbr\u003e  })\u003cbr\u003e})\u003cbr\u003e  .then(r =\u0026gt; r.json())\u003cbr\u003e  .then(console.log)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e if you're using Postman and your formatting is set to \"raw and JSON\", remember to use double quotes (\"\") in both keys and values in the request.\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003ch2\u003eMake Sure You Can POST and Create a New User Before Proceeding\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/pcPs6v6fhE7Ru/giphy.gif\" alt=\"intermission\"\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003ch4\u003eJSON Web Tokens (JWT)\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eToken-based authentication is \u003cstrong\u003estateless\u003c/strong\u003e. \u003cem\u003eWe are not storing any information about a logged in user on the server\u003c/em\u003e (which also means we don't need a model or table for our user sessions). No stored information means our application can scale and add more machines as necessary without worrying about where a user is logged in. Instead, the client (browser) stores a token and sends that token along with every authenticated request. Instead of storing a plaintext username, or user_id, we can encode user data with JSON Web Tokens (JWT) and store that encoded token client-side.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\n\u003ch4\u003eJWT Auth Flow:\u003c/h4\u003e\n\n\u003cp\u003e\u003cimg src=\"https://i.stack.imgur.com/f2ZhM.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eHere is the JWT authentication flow for logging in:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e An already existing user requests access with their username and password\u003c/li\u003e\n\u003cli\u003e The app validates these credentials\u003c/li\u003e\n\u003cli\u003e The app gives a signed token to the client\u003c/li\u003e\n\u003cli\u003e The client stores the token and presents it with every request. This token is effectively the user's access pass––it proves to our server that they are who they claim to be.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eJWTs are composed of three strings separated by periods:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e  aaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbb.ccccccccccccccccccc\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eThe first part (aaaaaaaaaaaa) is the header\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe second part (bbbbbbbbbbbb) is the payload - the good stuff, like who this person is, and their id in our database.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe third part (ccccccccccccc) is the signature. The signature is a hash of the header and the payload. It is hashed with a secret key, that we will provide (and should store in an environment variable using a gem like \u003ca href=\"https://github.com/laserlemon/figaro#getting-started\"\u003eFigaro\u003c/a\u003e)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eHead on over to \u003ca href=\"http://jwt.io/#debugger\"\u003ejwt.io\u003c/a\u003e and see for yourself:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg width=\"750\" alt=\"JWTs\" src=\"https://cloud.githubusercontent.com/assets/25366/9151601/2e3baf1a-3dbc-11e5-90f6-b22cda07a077.png\"\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003ch3\u003eEncoding and Decoding JWTs\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eSince we've already added \u003ca href=\"https://github.com/jwt/ruby-jwt\"\u003e\u003ccode\u003egem jwt\u003c/code\u003e\u003c/a\u003e to our \u003ca href=\"https://learning.flatironschool.com/server/Gemfile\"\u003egemfile\u003c/a\u003e, let's explore some JWT methods by opening a \u003ccode\u003erails console\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eJWT.encode\u003c/code\u003e takes up to three arguments: a payload to encode, an application secret of the user's choice, and an optional third that can be used to specify the hashing algorithm used. Typically, we don't need to show the third. This method returns a JWT as a string.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eJWT.decode\u003c/code\u003e takes three arguments as well: a JWT as a string, an application secret, and––optionally––a hashing algorithm.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e#in rails console\u003cbr\u003e\u0026gt;  payload = { beef: 'steak' }\u003cbr\u003e\u003cbr\u003e\u0026gt; jwt = JWT.encode(payload, 'boeuf')\u003cbr\u003e=\u0026gt; \"eyJhbGciOiJIUzI1NiJ9.eyJiZWVmIjoic3RlYWsifQ._IBTHTLGX35ZJWTCcY30tLmwU9arwdpNVxtVU0NpAuI\"\u003cbr\u003e\u003cbr\u003e\u0026gt; decoded_hash = JWT.decode(jwt, 'boeuf')\u003cbr\u003e=\u0026gt; [{\"beef\"=\u0026gt;\"steak\"}, {\"alg\"=\u0026gt;\"HS256\"}]\u003cbr\u003e\u003cbr\u003e\u0026gt; data = decoded_hash[0]\u003cbr\u003e=\u0026gt; {\"beef\"=\u0026gt;\"steak\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003ch4\u003eBuilding this functionality into our \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/application_controller.rb\"\u003e\u003ccode\u003eApplicationController\u003c/code\u003e\u003c/a\u003e:\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eGiven that many different controllers will need to \u003ca href=\"https://en.wikipedia.org/wiki/Authentication\"\u003eauthenticate\u003c/a\u003e and \u003ca href=\"https://en.wikipedia.org/wiki/Authorization\"\u003eauthorize\u003c/a\u003e users––\u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/auth_controller.rb\"\u003e\u003ccode\u003eAuthController\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003e\u003ccode\u003eUsersController\u003c/code\u003e\u003c/a\u003e, etc––it makes sense to lift the functionality of encoding/decoding tokens to our top level \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/application_controller.rb\"\u003e\u003ccode\u003eApplicationController\u003c/code\u003e\u003c/a\u003e. (Recall that \u003cstrong\u003eall\u003c/strong\u003e controllers inherit from \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/application_controller.rb\"\u003e\u003ccode\u003eApplicationController\u003c/code\u003e\u003c/a\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass ApplicationController \u0026lt; ActionController::API\u003cbr\u003e  def encode_token(payload)\u003cbr\u003e    # payload =\u0026gt; { beef: 'steak' }\u003cbr\u003e    JWT.encode(payload, 'my_s3cr3t')\u003cbr\u003e    # jwt string: \"eyJhbGciOiJIUzI1NiJ9.eyJiZWVmIjoic3RlYWsifQ._IBTHTLGX35ZJWTCcY30tLmwU9arwdpNVxtVU0NpAuI\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def decoded_token(token)\u003cbr\u003e    # token =\u0026gt; \"eyJhbGciOiJIUzI1NiJ9.eyJiZWVmIjoic3RlYWsifQ._IBTHTLGX35ZJWTCcY30tLmwU9arwdpNVxtVU0NpAuI\"\u003cbr\u003e\u003cbr\u003e    JWT.decode(token, 'my_s3cr3t')[0]\u003cbr\u003e    # JWT.decode =\u0026gt; [{ \"beef\"=\u0026gt;\"steak\" }, { \"alg\"=\u0026gt;\"HS256\" }]\u003cbr\u003e    # [0] gives us the payload { \"beef\"=\u0026gt;\"steak\" }\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://jwt.io/introduction/\"\u003eAccording to the JWT Documentation\u003c/a\u003e:\nWhenever the user wants to access a protected route or resource, the user agent (browser in our case) should send the JWT, typically in the Authorization header using the Bearer schema. The content of the header should look like the following:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ccode\u003eAuthorization: Bearer \u0026lt;token\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe corresponding \u003ccode\u003efetch\u003c/code\u003e request might look like this:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003efetch('http://localhost:3000/api/v1/profile', {\u003cbr\u003e  method: 'GET',\u003cbr\u003e  headers: {\u003cbr\u003e    Authorization: `Bearer `\u003cbr\u003e  }\u003cbr\u003e})\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eKnowing this, we can set up our server to anticipate a JWT sent along in request headers, \u003cem\u003einstead\u003c/em\u003e of passing the token directly to \u003ccode\u003eApplicationController#decoded_token\u003c/code\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass ApplicationController \u0026lt; ActionController::API\u003cbr\u003e  def encode_token(payload)\u003cbr\u003e    # payload =\u0026gt; { beef: 'steak' }\u003cbr\u003e    JWT.encode(payload, 'my_s3cr3t')\u003cbr\u003e    # jwt string: \"eyJhbGciOiJIUzI1NiJ9.eyJiZWVmIjoic3RlYWsifQ._IBTHTLGX35ZJWTCcY30tLmwU9arwdpNVxtVU0NpAuI\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def auth_header\u003cbr\u003e    # { 'Authorization': 'Bearer ' }\u003cbr\u003e    request.headers['Authorization']\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def decoded_token\u003cbr\u003e    if auth_header\u003cbr\u003e      token = auth_header.split(' ')[1]\u003cbr\u003e      # headers: { 'Authorization': 'Bearer ' }\u003cbr\u003e      begin\u003cbr\u003e        JWT.decode(token, 'my_s3cr3t', true, algorithm: 'HS256')\u003cbr\u003e        # JWT.decode =\u0026gt; [{ \"beef\"=\u0026gt;\"steak\" }, { \"alg\"=\u0026gt;\"HS256\" }]\u003cbr\u003e      rescue JWT::DecodeError\u003cbr\u003e        nil\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eA few things to note about the code above:\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ca href=\"https://ruby-doc.org/core-2.2.0/doc/syntax/exceptions_rdoc.html\"\u003e\u003ccode\u003eBegin/Rescue\u003c/code\u003e syntax\u003c/a\u003e allows us to \u003cstrong\u003erescue\u003c/strong\u003e out of an exception in Ruby. Let's see an example in a \u003ccode\u003erails console\u003c/code\u003e. In the event our server receives and attempts to decode an \u003cstrong\u003einvalid token\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e# in rails console\u003cbr\u003e\u0026gt; invalid_token = \"nnnnnnnooooooootttttt.vvvvvvaaaallliiiiidddddd.jjjjjjjwwwwwttttttt\"\u003cbr\u003e\u003cbr\u003e\u0026gt; JWT.decode(invalid_token, 'my_s3cr3t', true, algorithm: 'HS256')\u003cbr\u003e\u003cbr\u003eTraceback (most recent call last):\u003cbr\u003e        1: from (irb):6\u003cbr\u003eJWT::DecodeError (Invalid segment encoding)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eIn other words, if our server receives a bad token, this will raise an exception causing a \u003ca href=\"http://httpstatusrappers.com/500.html\"\u003e500 Internal Server Error\u003c/a\u003e. We can account for this by \u003cstrong\u003erescuing out of this exception\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e# in rails console\u003cbr\u003e\u0026gt; invalid_token = \"nnnnnnnooooooootttttt.vvvvvvaaaallliiiiidddddd.jjjjjjjwwwwwttttttt\"\u003cbr\u003e\u003cbr\u003e\u0026gt; begin JWT.decode(invalid_token, 'my_s3cr3t', true, algorithm: 'HS256')\u003cbr\u003e  rescue JWT::DecodeError\u003cbr\u003e    nil\u003cbr\u003e\u0026gt;  end\u003cbr\u003e =\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eInstead of crashing our server, we simply return \u003ccode\u003enil\u003c/code\u003e and keep trucking along.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/3xb5V0fbxHXck/giphy.gif\" alt=\"keep trucking\"\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eWe can then complete our \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/application_controller.rb\"\u003e\u003ccode\u003eApplicationController\u003c/code\u003e\u003c/a\u003e by automatically obtaining the user whenever an authorization header is present:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass ApplicationController \u0026lt; ActionController::API\u003cbr\u003e\u003cbr\u003e  def encode_token(payload)\u003cbr\u003e    # don't forget to hide your secret in an environment variable\u003cbr\u003e    JWT.encode(payload, 'my_s3cr3t')\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def auth_header\u003cbr\u003e    request.headers['Authorization']\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def decoded_token\u003cbr\u003e    if auth_header\u003cbr\u003e      token = auth_header.split(' ')[1]\u003cbr\u003e      begin\u003cbr\u003e        JWT.decode(token, 'my_s3cr3t', true, algorithm: 'HS256')\u003cbr\u003e      rescue JWT::DecodeError\u003cbr\u003e        nil\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def current_user\u003cbr\u003e    if decoded_token\u003cbr\u003e      # decoded_token=\u0026gt; [{\"user_id\"=\u0026gt;2}, {\"alg\"=\u0026gt;\"HS256\"}]\u003cbr\u003e      # or nil if we can't decode the token\u003cbr\u003e      user_id = decoded_token[0]['user_id']\u003cbr\u003e      @user = User.find_by(id: user_id)\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def logged_in?\u003cbr\u003e    !!current_user\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eRecall that a Ruby object/instance is 'truthy': \u003ccode\u003e!!user_instance #=\u0026gt; true\u003c/code\u003e and nil is 'falsey': \u003ccode\u003e!!nil #=\u0026gt; false\u003c/code\u003e. Therefore \u003ccode\u003elogged_in?\u003c/code\u003e will just return a boolean depending on what our \u003ccode\u003ecurrent_user\u003c/code\u003e method returns.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eFinally, let's lock down our application to prevent unauthorized access:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass ApplicationController \u0026lt; ActionController::API\u003cbr\u003e  before_action :authorized\u003cbr\u003e\u003cbr\u003e  def encode_token(payload)\u003cbr\u003e    # should store secret in env variable\u003cbr\u003e    JWT.encode(payload, 'my_s3cr3t')\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def auth_header\u003cbr\u003e    # { Authorization: 'Bearer ' }\u003cbr\u003e    request.headers['Authorization']\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def decoded_token\u003cbr\u003e    if auth_header\u003cbr\u003e      token = auth_header.split(' ')[1]\u003cbr\u003e      # header: { 'Authorization': 'Bearer ' }\u003cbr\u003e      begin\u003cbr\u003e        JWT.decode(token, 'my_s3cr3t', true, algorithm: 'HS256')\u003cbr\u003e      rescue JWT::DecodeError\u003cbr\u003e        nil\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def current_user\u003cbr\u003e    if decoded_token\u003cbr\u003e      user_id = decoded_token[0]['user_id']\u003cbr\u003e      @user = User.find_by(id: user_id)\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def logged_in?\u003cbr\u003e    !!current_user\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def authorized\u003cbr\u003e    render json: { message: 'Please log in' }, status: :unauthorized unless logged_in?\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eA few things to note about the code above:\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ebefore_action :authorized\u003c/code\u003e will call the authorized method \u003cstrong\u003ebefore anything else happens in our app\u003c/strong\u003e. This will effectively lock down the entire application. Next we'll augment our \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003e\u003ccode\u003eUsersController\u003c/code\u003e\u003c/a\u003e and build our \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/auth_controller.rb\"\u003e\u003ccode\u003eAuthController\u003c/code\u003e\u003c/a\u003e to allow signup/login.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\n\u003ch4\u003eUpdating the \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003eUsersController\u003c/a\u003e\n\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eLet's update the \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003eUsersController\u003c/a\u003e so that it issues a token when users register for our app:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass Api::V1::UsersController \u0026lt; ApplicationController\u003cbr\u003e  skip_before_action :authorized, only: [:create]\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    @user = User.create(user_params)\u003cbr\u003e    if @user.valid?\u003cbr\u003e      @token = encode_token(user_id: @user.id)\u003cbr\u003e      render json: { user: UserSerializer.new(@user), jwt: @token }, status: :created\u003cbr\u003e    else\u003cbr\u003e      render json: { error: 'failed to create user' }, status: :not_acceptable\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def user_params\u003cbr\u003e    params.require(:user).permit(:username, :password, :bio, :avatar)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eWe need to make sure to skip the \u003ccode\u003ebefore_action :authorized\u003c/code\u003e coming from \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/application_controller.rb\"\u003eApplicationController\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass Api::V1::UsersController \u0026lt; ApplicationController\u003cbr\u003e  skip_before_action :authorized, only: [:create]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eIt wouldn't make sense to ask our users to be logged in before they create an account. This circular logic will make it \u003cstrong\u003eimpossible\u003c/strong\u003e for users to authenticate into the app. How can a user create an account if our app asks them to be logged in or \u003ccode\u003eauthorized\u003c/code\u003e to do so? Skipping the before action 'unlocks' this portion of our app.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/l1J9Jzcs9OHXa310k/giphy.gif\" alt=\"omg\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eTry creating a new user again with either \u003ca href=\"https://www.getpostman.com/apps\"\u003epostman\u003c/a\u003e or fetch and confirm that your server successfully issues a token on signup.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/fSkMuhRxstDi5g5dwo/giphy.gif\" alt=\"sign me up gif\"\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003ch4\u003eImplementing Login\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eA token should be issued in two different controller actions: \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003e\u003ccode\u003eUsersController#create\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/auth_controller.rb\"\u003e\u003ccode\u003eAuthController#create\u003c/code\u003e\u003c/a\u003e. Think about what these methods are responsible for––\u003cstrong\u003ea user signing up for our app for the first time\u003c/strong\u003e and \u003cstrong\u003ean already existing user logging back in\u003c/strong\u003e. In both cases, our server needs to issue a new token🥇.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe'll need to create a new controller to handle login: \u003ccode\u003erails g controller api/v1/auth\u003c/code\u003e. Next, let's add the following to this newly created \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/auth_controller.rb\"\u003eAuthController\u003c/a\u003e:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass Api::V1::AuthController \u0026lt; ApplicationController\u003cbr\u003e  skip_before_action :authorized, only: [:create]\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    @user = User.find_by(username: user_login_params[:username])\u003cbr\u003e    #User#authenticate comes from BCrypt\u003cbr\u003e    if @user \u0026amp;\u0026amp; @user.authenticate(user_login_params[:password])\u003cbr\u003e      # encode token comes from ApplicationController\u003cbr\u003e      token = encode_token({ user_id: @user.id })\u003cbr\u003e      render json: { user: UserSerializer.new(@user), jwt: token }, status: :accepted\u003cbr\u003e    else\u003cbr\u003e      render json: { message: 'Invalid username or password' }, status: :unauthorized\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def user_login_params\u003cbr\u003e    # params { user: {username: 'Chandler Bing', password: 'hi' } }\u003cbr\u003e    params.require(:user).permit(:username, :password)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWe can simply call our \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/application_controller.rb\"\u003e\u003ccode\u003eApplicationController#encode_token\u003c/code\u003e\u003c/a\u003e method, passing the found user's ID in a payload. The newly created JWT can then be passed back along with the user's data. \u003cstrong\u003eThe user data can be stored in our application's state\u003c/strong\u003e, e.g., \u003ca href=\"https://reactjs.org/\"\u003eReact\u003c/a\u003e or \u003ca href=\"https://redux.js.org/\"\u003eRedux\u003c/a\u003e, while the token can be stored client-side.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eA few things to keep in mind about the code above:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eUser.find_by({ name: 'Chandler Bing' })\u003c/code\u003e will either return a user instance if that user can be found \u003cstrong\u003eOR\u003c/strong\u003e it will return \u003ccode\u003enil\u003c/code\u003e if that user is not found.\u003c/li\u003e\n\u003cli\u003eIn the event that the user is not found, \u003ccode\u003euser = User.find_by(username: params[:username])\u003c/code\u003e will evaluate to \u003ccode\u003enil\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eCan we call \u003ccode\u003e.authenticate\u003c/code\u003e on \u003ccode\u003enil\u003c/code\u003e? NO!! \u003ccode\u003eNoMethodError (undefined method 'authenticate' for nil:NilClass)\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eRuby, however, is \u003cstrong\u003elazy\u003c/strong\u003e. If Ruby encounters \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, both statements in the expression must evaluate to true. If the statement on the left side evaluates to false, Ruby will \u003cstrong\u003enot even look at the statement on the right\u003c/strong\u003e. Let's see an example:\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e# in irb or a rails console\u003cbr\u003e\u0026gt; true \u0026amp;\u0026amp; true\u003cbr\u003e  =\u0026gt; true\u003cbr\u003e\u003cbr\u003e\u0026gt; true \u0026amp;\u0026amp; false\u003cbr\u003e  =\u0026gt; false\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u0026gt; true \u0026amp;\u0026amp; not_a_variable\u003cbr\u003e  NameError (undefined local variable or method `not_a_variable` for main:Object)\u003cbr\u003e\u003cbr\u003e\u0026gt; false \u0026amp;\u0026amp; not_a_variable\u003cbr\u003e  =\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eLet's take another look at our previous example:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e@user = User.find_by(username: params[:username])\u003cbr\u003eif @user \u0026amp;\u0026amp; @user.authenticate(params[:password])\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eIf \u003ccode\u003e@user\u003c/code\u003e is \u003ccode\u003enil\u003c/code\u003e, which is falsey, \u003cstrong\u003eruby will not even attempt to call \u003ccode\u003e@user.authenticate\u003c/code\u003e\u003c/strong\u003e. Without this catch, we'd get a \u003ccode\u003eNoMethodError (undefined method 'authenticate' for nil:NilClass)\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eAgain, the client should be sending a JWT along with every authenticated request. Refer to this diagram from \u003ca href=\"https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication\"\u003escotch.io\u003c/a\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://cdn.scotch.io/scotchy-uploads/2014/11/tokens-new.png\" alt=\"scotch.io article on token auth\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA sample request might look like:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003efetch('http://localhost:3000/api/v1/profile', {\u003cbr\u003e  method: 'GET',\u003cbr\u003e  headers: {\u003cbr\u003e    Authorization: `Bearer `\u003cbr\u003e  }\u003cbr\u003e})\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eSo, let's update our \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003e\u003ccode\u003eUsersController\u003c/code\u003e\u003c/a\u003e so that an authenticated user can access their profile information:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass Api::V1::UsersController \u0026lt; ApplicationController\u003cbr\u003e  skip_before_action :authorized, only: [:create]\u003cbr\u003e\u003cbr\u003e  def profile\u003cbr\u003e    render json: { user: UserSerializer.new(current_user) }, status: :accepted\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    @user = User.create(user_params)\u003cbr\u003e    if @user.valid?\u003cbr\u003e      @token = encode_token({ user_id: @user.id })\u003cbr\u003e      render json: { user: UserSerializer.new(@user), jwt: @token }, status: :created\u003cbr\u003e    else\u003cbr\u003e      render json: { error: 'failed to create user' }, status: :not_acceptable\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def user_params\u003cbr\u003e    params.require(:user).permit(:username, :password, :bio, :avatar)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eOne final note about the snippet above: \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/application_controller.rb\"\u003e\u003ccode\u003eApplicationController\u003c/code\u003e\u003c/a\u003e calls \u003ccode\u003eauthorized\u003c/code\u003e \u003cstrong\u003ebefore any other controller methods are called\u003c/strong\u003e. If authorization fails, our server will never call \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003e\u003ccode\u003eUsersController#profile\u003c/code\u003e\u003c/a\u003e and will instead:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003erender json: { message: 'Please log in' }, status: :unauthorized\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003ch2\u003eThat's It For the Server!\u003c/h2\u003e\n\n\u003chr\u003e\n\n\u003ch3\u003eExternal Resources\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/HTTPS\"\u003eHTTPS Wikipedia Article\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage\"\u003eStoring JWTs in Cookies vs HTML5 localStorage\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://stackoverflow.com/questions/35291573/csrf-protection-with-json-web-tokens/35347022#35347022\"\u003eStackOverflow Post on Cookies vs localStorage for Storing Tokens\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/learn-co-curriculum/mod3-project-week-setup-example\"\u003eMod3 API Setup Guide\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/cyu/rack-cors\"\u003erack-cors gem\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eMDN article on CORS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/codahale/bcrypt-ruby\"\u003eBcrypt gem\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/codahale/bcrypt-ruby/blob/master/lib/bcrypt/password.rb#L23\"\u003eBcrypt::Password source code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Salt_(cryptography)\"\u003eWhat is a Salt in Cryptography\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Cryptographic_hash_function\"\u003eWhat is a Cryptographic Hash Function\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password\"\u003eActiveModel has\u003cem\u003esecure\u003c/em\u003epassword docs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.mozilla.org/webdev/2012/06/08/lets-talk-about-password-storage/\"\u003eMozilla Blog Post on Storing Passwords in a Database\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/rails-api/active_model_serializers\"\u003eActiveModelSerializers gem\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://guides.rubyonrails.org/active_record_validations.html\"\u003eActiveRecord Validations Documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.sitepoint.com/active-model-serializers-rails-and-json-oh-my/\"\u003eSitePoint Article on ActiveModelSerializers in Rails\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.getpostman.com/apps\"\u003ePostman App for making HTTP requests\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://jwt.io/introduction/\"\u003eJWT Documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/jwt/ruby-jwt\"\u003eJWT Ruby Gem on GitHub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.angular-university.io/angular-jwt/\"\u003eJWT in Depth\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication\"\u003eScotch.io: The Ins and Outs of Token Based Authentication\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Authentication\"\u003eAuthentication\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Authorization\"\u003eAuthorization\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://stackoverflow.com/questions/6556522/authentication-versus-authorization\"\u003eAuthentication vs Authorization\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/laserlemon/figaro#getting-started\"\u003eFigaro Gem for hiding secrets in your app\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ruby-doc.org/core-2.2.0/doc/syntax/exceptions_rdoc.html\"\u003eRuby Begin Rescue Documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://httpstatusrappers.com\"\u003eHTTP Status Rappers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\"\u003eMDN Article on HTTP Status Codes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gist.github.com/mlanett/a31c340b132ddefa9cca\"\u003eRails Status Code Symbols Cheat Sheet\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/\"\u003eReact Documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://redux.js.org/\"\u003eRedux Documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g8a41cbe247d8159e6f8d6b4f17672045"}]},{"id":24131,"name":"Redux: Building Redux from Scratch","status":"started","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g456e4dcee8e7cb6498b898b0b1be8417","items":[{"id":220861,"title":"Why Redux?","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"why-redux\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/why-redux\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/why-redux/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eIn this lesson, we will learn about the Redux architecture for building web applications. By the end of the lesson you will be able to:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eUnderstand how \u003cstrong\u003eRedux\u003c/strong\u003e encourages a single source of truth.\u003c/li\u003e \u003cli\u003eUnderstand how actions fit into the Redux flow.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eBenefits of moving to Redux\u003c/h2\u003e  \u003ch4\u003eSingle Source Of Truth\u003c/h4\u003e  \u003cp\u003eAs our \u003cstrong\u003eReact\u003c/strong\u003e applications become larger, our state becomes more spread out between different components.  At a certain point, the component tree becomes a web of props and state that can obscure our view of how components are handling and sharing data with each other.\u003c/p\u003e  \u003cp\u003eThere are ways to get around this, like storing all of our state in one high level container component, but this can ultimately \u003cem\u003eincrease\u003c/em\u003e the complexity of your props.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eRedux\u003c/strong\u003e offers a different solution. It encourages storing all of the necessary data in our application in a JavaScript object \u003cem\u003eseparate\u003c/em\u003e from our components.  It looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estate = {\u003cbr\u003e  user: {\u003cbr\u003e    name: 'bob',\u003cbr\u003e    hometown: 'philly'\u003cbr\u003e  },\u003cbr\u003e  interests: [\u003cbr\u003e    {\u003cbr\u003e      name: 'pokemon',\u003cbr\u003e      type: 'game'\u003cbr\u003e    },\u003cbr\u003e    {\u003cbr\u003e      name: 'game of thrones',\u003cbr\u003e      type:'tv show'\u003cbr\u003e    }\u003cbr\u003e  ]\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSimilar to component state, all our data is held in an object. The difference here is that, since Redux state is separate from the component tree, we can grab \u003cem\u003eany\u003c/em\u003e part of this data for \u003cem\u003eany\u003c/em\u003e component that needs it, just by connecting the component!\u003c/p\u003e  \u003ch4\u003eAccessing Our State\u003c/h4\u003e  \u003cp\u003eTo make this state available for components to connect to, we provide access by wrapping the component tree, similar to \u003ccode\u003eRouter\u003c/code\u003e. This gives us access to Redux functions that allow us to grab state and map it the props being given to a component. Components can then read these props like normal, as though they were receiving them from a parent component.\u003c/p\u003e  \u003cp\u003eConsequently, complex interaction between components is made easier. Take for example sibling components (rendered side by side in a parent) and cousin components (the children of sibling components). If siblings are both displaying or manipulating the same bit of shared data, without Redux, that data needs to be stored in their parent component's state. If \u003cem\u003ecousins\u003c/em\u003e are sharing data, the data needs to be stored in the \u003cem\u003egrandparent\u003c/em\u003e component, the closest shared 'ancestor' component.\u003c/p\u003e  \u003cp\u003eIn Redux all these interactions are structured the same way. Every component we allow can get and update state data regardless of the position of components in a tree.\u003c/p\u003e  \u003ch4\u003eUpdating Our State\u003c/h4\u003e  \u003cp\u003eSo we hold all of our data in one place and with some configuration, we can read it as props in regular React components. When we want to update that data, we must send an action, which is a set of strict instructions \u003cem\u003ewe create\u003c/em\u003e that \u003cstrong\u003eRedux\u003c/strong\u003e will use for how to update it.  \u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaction = {\u003cbr\u003e  type: 'ADD_INTEREST',\u003cbr\u003e  newInterest: {\u003cbr\u003e    name: 'hockey',\u003cbr\u003e    type: 'sport'\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, we can imagine that after a user fills out a form and clicks submit, we will create an action that tells \u003cstrong\u003eRedux\u003c/strong\u003e how to incorporate the update into the state.  Any time we update the state in \u003cstrong\u003eRedux\u003c/strong\u003e, we must create an action first. This action is just a plain old JavaScript object.\u003c/p\u003e  \u003cp\u003eThese actions are also made available to components. Any component we connect will be able to modify the state using an action we've defined.\u003c/p\u003e  \u003cp\u003eFollowing a specific design pattern that we'll explore through the upcoming lessons, we can use these actions to maintain and update our Redux state. These state changes trigger React's component lifecycle, and thus, the cycle of data is made.\u003c/p\u003e  \u003ch2\u003eSumming Up\u003c/h2\u003e  \u003cp\u003e\u003cstrong\u003eRedux\u003c/strong\u003e places all of our data in one place -- the state.  This state is just a plain JavaScript object. In fact, all the pieces of Redux are plain old JavaScript. It is the pattern, the way the information flows that makes Redux awesome.\u003c/p\u003e  \u003cp\u003eTo change our application state, we need to create an action that holds information for how to update that state. The action, combined with the previous state, produces an updated state.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\"\u003eRedux Justification - Dan Abramov\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=uvAXVMwHJXU\"\u003eLooking back at Redux - Dan Abramov\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/why-redux\"\u003eWhy Redux\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","exportId":"why-redux"},{"id":220863,"title":"Using Pure Functions to Update Application State","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-flow\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/redux-flow/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-flow\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-flow/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives:\u003c/h2\u003e\n\u003cp\u003eIn this lesson, you will learn the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLearn how pure functions update our application state.\u003c/li\u003e\n\u003cli\u003eLearn the fundamentals of the redux flow.\u003c/li\u003e\n\u003cli\u003eLearn how to adhere to the constraints of a pure function.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eReview\u003c/h2\u003e\n\u003cp\u003eSo far we know that all of our state is in a JavaScript object, and that our actions are in another JavaScript object called an action. Somehow the action updates our state.\u003c/p\u003e\n\u003cp\u003eLet's take a look at an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet state = {count: 0}\u003cbr\u003elet action = {type: 'INCREASE_COUNT'}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSomehow I want to send this action to the state so that at the end our state is updated to look like the following: \u003ccode\u003estate -\u0026gt; {count: 1}\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eBut how??\u003c/p\u003e\n\u003ch2\u003eFunctions to the Rescue\u003c/h2\u003e\n\u003cp\u003eThis seems easy enough. Why not just write a function that takes in our previous state, takes in our action, and depending on that action produces a new state. Here's what it could look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction changeState(state, action) {\u003cbr\u003e  if (action.type === 'INCREASE_COUNT') {\u003cbr\u003e    return {count: state.count + 1 }\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat's pretty straightforward code. If the action's type property is the String \u003ccode\u003e'INCREASE_COUNT'\u003c/code\u003e then go ahead and increment and return the new state.\u003c/p\u003e\n\u003cp\u003eThe important piece of information we looked at to determine how to change the state was \u003ccode\u003eaction.type\u003c/code\u003e. Actions always need a \u003ccode\u003etype\u003c/code\u003e property so the function knows what to do. If you can imagine a whole bunch of different actions that change the state in different ways, \u003ccode\u003e'DECREASE_COUNT'\u003c/code\u003e, \u003ccode\u003e'INCREASE_COUNT_BY_TEN'\u003c/code\u003e and so on, it shouldn't be hard to see how that code could become very messy with a bunch of \u003ccode\u003eif\u003c/code\u003es and \u003ccode\u003eelse if\u003c/code\u003es. Instead, it is customary to use a \u003ccode\u003eswitch case\u003c/code\u003e statement.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction changeState(state, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis makes it very explicit and clear that \u003ccode\u003eaction.type\u003c/code\u003e is the information we are switching on to make our decision on how to change the state.\u003c/p\u003e\n\u003cp\u003eWe'll talk about this more in-depth later, but it is important that when we change the state we never return \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003eundefined\u003c/code\u003e. We'll cover this by adding a \u003ccode\u003edefault\u003c/code\u003e case to our function.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction changeState(state, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis way, no matter what, when accessing the Redux state we'll always get some form of the state back.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet state = {count: 0}\u003cbr\u003elet action = {type: 'INCREASE_COUNT'}\u003cbr\u003e\u003cbr\u003echangeState(state, action)\u003cbr\u003e// =\u0026gt; {count: 1}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk, so if you copy and paste that code into a JavaScript console, you'll see that the function works just as we'd expect. The state and action are passed to our \u003ccode\u003echangeState function\u003c/code\u003e, which hits the \u003ccode\u003e'INCREASE_COUNT'\u003c/code\u003e case statement. Then it takes the state's count of zero, adds one to it, and returns a new object \u003ccode\u003e{count: 1}\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNow let's have this function respond to another action, decrease count. Give it a shot, the answer is below.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction changeState(state, action){      \u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    case 'DECREASE_COUNT':\u003cbr\u003e      return {count: state.count - 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet state = {count: 0}\u003cbr\u003e\u003cbr\u003echangeState(state, {type: 'INCREASE_COUNT'})\u003cbr\u003e// =\u0026gt; {count: 1}\u003cbr\u003e\u003cbr\u003echangeState(state, {type: 'DECREASE_COUNT'})\u003cbr\u003e// =\u0026gt; {count: -1}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk! That my friends, is the crux of redux. To summarize:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAction -\u0026gt; Function -\u0026gt; Updated State\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd let's give this function a name. Because it is combining two pieces of information, our current state and an action, reducing this combination into one value, we'll say that it \u003cem\u003ereduces\u003c/em\u003e the two into one updated state. For this reason, we call this function a reducer:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAction -\u0026gt; Reducer -\u0026gt; Updated State\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you learn more about redux, things may become more complex. Just remember that at the core of redux is always this flow. An action gets sent to a reducer which then updates the state of the application.\u003c/p\u003e\n\u003cp\u003eYou may notice a problem. While we can call the changeState reducer to increase the count from zero to one, if we call change state again we keep returning a count of one. In other words, we are not persisting this change of state. We'll tackle how this works in an upcoming section.\u003c/p\u003e\n\u003ch2\u003eReducers are pure functions\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003efunction reducer(state, action){      \u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    case 'DECREASE_COUNT':\u003cbr\u003e      return {count: state.count - 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAn important thing to note about reducers is that they are pure functions. Let's remember the characteristics of pure functions:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003ePure functions are only determined by their input values\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePure Functions have no side effects. By this we mean pure functions do not have any effect outside of the function. They only return a value.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: The reason we like pure functions so much is because if a function has no effect outside of the object, and if the function always returns the same value given a specific input, this means that our functions become really predictable. In addition, the lack of side effects means that the functions are also contained, and can be used safely without affecting the rest of your application.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLet's take these two characteristics of pure functions in turn, and ensure that we are adhering to them here.\u003c/p\u003e\n\u003cp\u003eOk, so the first characteristic of pure functions means that given the same input of the function, I will always receive the same output from that function. That seems to hold, given a specific state object like \u003ccode\u003e{count: 2}\u003c/code\u003e and an action object like \u003ccode\u003e{type: 'DECREASE_COUNT'}\u003c/code\u003e will I always get back the same value? Yes. Given those two arguments, the output will always be \u003ccode\u003e{count: 1}\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAs for the 'no side effects' characteristic, there's something pretty subtle going on in our reducer. The object returned is not the same object that is passed as an argument to the function, but rather a new object that is constructed each time our reducer is called. Do you see why? Take a close look at the line that says \u003ccode\u003ereturn {count: state.count + 1}\u003c/code\u003e. This line is constructing a new JavaScript object and setting its count attribute to equal the previous state's count plus one. So we adhere to the constraints of a pure function by not changing any value that is defined outside of the function.\u003c/p\u003e\n\u003ch2\u003eSummary\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eWe hold our application's state in one plain old JavaScript object, and we update that state by passing both an action and the old state to our reducer. Our reducer returns to us our new state.\u003c/li\u003e\n\u003cli\u003eSo to change our state we (1) create an action (an \u003cstrong\u003eaction\u003c/strong\u003e is just a plain object with a type key); and (2) and pass the action as an argument when we call the \u003cstrong\u003ereducer\u003c/strong\u003e (which is just a function with a switch/case statement). This produces a new state.\u003c/li\u003e\n\u003cli\u003eOur reducer is a pure function which means that given the same arguments of state and action, it will always produce the same new state. Also it means that our reducer never updates the previous state, but rather creates a new state object.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/redux-flow\"\u003eRedux Flow\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","exportId":"using-pure-functions-to-update-application-state"},{"id":220866,"title":"Reducers Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-reducer\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/redux-reducer/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-reducer\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-reducer/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/3o7TKwxYkeW0ZvTqsU/giphy.gif\" alt=\"reduce\"\u003e\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eWrite a reducer.\u003c/li\u003e \u003cli\u003eThe reducer should be a pure function.\u003c/li\u003e \u003cli\u003eWrite a reducer that takes an action(payload).\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eEach year, around the holidays especially, we forget who we need to buy presents for. Let's write a function that will help us manage our gift recipient list. We should be able to add a person we need to buy a present for and remove people we no longer like (or who give us socks every year!).\u003c/p\u003e  \u003cp\u003eIn this lab, we will focus on writing two reducers to help us handle this task. Since we're drilling down into one concept, React is not set up in this lab, nor is there an \u003ccode\u003eindex.html\u003c/code\u003e file. Follow the instructions below and implement your code in \u003ccode\u003esrc/reducers/manageFriends.js\u003c/code\u003e and \u003ccode\u003esrc/reducers/managePresents.js\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003col\u003e \u003cli\u003eIn \u003ccode\u003emanagePresents.js\u003c/code\u003e, write a function called \u003ccode\u003emanagePresents()\u003c/code\u003e that takes in the previous state and an action as its argument. Set a default value for the state argument - an object with a key, \u003ccode\u003enumberOfPresents\u003c/code\u003e, assigned to \u003ccode\u003e0\u003c/code\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eActions passed into this reducer will only have a \u003cem\u003etype\u003c/em\u003e attribute, so they    would look something like this:\u003c/p\u003e  \u003cp\u003e\u003ccode\u003ejs     action = {       type: \"INCREASE\"     } \u003c/code\u003e\u003c/p\u003e  \u003cp\u003eIf the reducer receives a \u003ccode\u003etype\u003c/code\u003e set to \u003ccode\u003e\"INCREASE\"\u003c/code\u003e, return a new state    where the value of \u003ccode\u003enumberOfPresents\u003c/code\u003e is increased by one. Use the tests to    guide you as you build out this reducer.\u003c/p\u003e  \u003col\u003e \u003cli\u003eIn \u003ccode\u003emanageFriends.js\u003c/code\u003e, write a function called \u003ccode\u003emanageFriends\u003c/code\u003e that takes in the previous state and an action as its argument.  Here, the initial state should be an object with a key, \u003ccode\u003efriends\u003c/code\u003e, set to an empty array.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eThis time, the reducer should be able to handle two actions, \u003ccode\u003e\"ADD_FRIEND\"\u003c/code\u003e    and \u003ccode\u003e\"REMOVE_FRIEND\"\u003c/code\u003e. When adding a friend, the action will include a    \u003ccode\u003efriend\u003c/code\u003e key assigned to an object with \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003ehometown\u003c/code\u003e, and \u003ccode\u003eid\u003c/code\u003e keys.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003ejs     action = {       type: \"ADD_FRIEND\",       friend: {         name: \"Chrome Boi\",         hometown: \"NYC\",         id: 1       }     } \u003c/code\u003e\u003c/p\u003e  \u003cp\u003eWhen our reducer receives \u003ccode\u003e\"ADD_FRIEND\"\u003c/code\u003e, it should return a new state with    this friend object added to the \u003ccode\u003efriends\u003c/code\u003e array.\u003c/p\u003e  \u003cp\u003eWhen removing a friend, instead of an object, the action will include an \u003ccode\u003eid\u003c/code\u003e key    with an integer. Find the friend with the matching \u003ccode\u003eid\u003c/code\u003e and remove them. Thought of    in another way, the reducer is really returning a new state with an array of \u003ccode\u003efriends\u003c/code\u003e    that includes everyone \u003cem\u003eexcept\u003c/em\u003e the removed friend.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003ejs     action = {       type: \"REMOVE_FRIEND\",       id: 1     } \u003c/code\u003e\u003c/p\u003e  \u003cp\u003eBoth reducers should be pure functions.  This means that the functions cannot change any object defined outside of the functions.  It also means that given an input, the reducers will always return the same output.\u003c/p\u003e  \u003ch2\u003eDon't Mutate State\u003c/h2\u003e  \u003cp\u003eAs the Redux documentation notes:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eSince one of the core tenets of Redux is to never mutate state, you'll often find yourself using \u003ccode\u003eObject.assign()\u003c/code\u003e to create copies of objects with new or updated values.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eIf you remember, \u003ccode\u003eObject.assign()\u003c/code\u003e is a function that takes any number of arguments. It works by copying over from left to right the properties in each object passed as an argument.  Let's go over an example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet dog = {id: 1, name: 'scooby', color: 'brown', age: 4};\u003cbr\u003e// if scooby had a birthday, we could write:\u003cbr\u003elet olderDog = Object.assign({}, dog, {age: dog.age + 1}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTranslating this to English would be something like, \"Start with a new empty object, copy over everything from the original \u003ccode\u003edog\u003c/code\u003e, then overwrite the \u003ccode\u003eage\u003c/code\u003e property with a new value.\"\u003c/p\u003e  \u003ch2\u003eA Note on the Object Spread Operator\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/l0CRCmMBYQbL7dCmI/giphy.gif\" alt=\"future\"\u003e\u003c/p\u003e  \u003cp\u003eWhile effective, using \u003ccode\u003eObject.assign()\u003c/code\u003e can quickly make simple reducers difficult to read given its rather verbose syntax.\u003c/p\u003e  \u003cp\u003eAn alternative approach is to use the object spread syntax, which lets you use the spread (...) operator to copy enumerable properties from one object to another in a more succinct way:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet dog = {id: 1, name: 'scooby', color: 'brown', age: 4};\u003cbr\u003e\u003cbr\u003elet olderDog = {...dog, age: dog.age + 1} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis would translate to the same English, \"Return a new object that contains all the key-value pairs from \u003ccode\u003edog\u003c/code\u003e copied over with the \u003ccode\u003eage\u003c/code\u003e key overwritten with a new value\".\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003eMozilla Object.assign\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://redux.js.org/docs/recipes/UsingObjectSpreadOperator.html\"\u003eRedux Docs: Object Spread Operator\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"\u003eMozilla findIndex\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://redux.js.org/docs/basics/Reducers.html\"\u003eRedux Documentation\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g55aeb08314277c027be476939ccf5635"},{"id":220870,"title":"Persisting State and Displaying State","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-dispatch\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/redux-dispatch/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-dispatch\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-dispatch/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003cp\u003eIn this code-along, you will learn the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHow to persist changes to state.\u003c/li\u003e\n\u003cli\u003eHow to display changes to the state in the view.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAn HTML page, \u003ccode\u003eindex.html\u003c/code\u003e, is provided and already linked to \u003ccode\u003ejs/reducer.js\u003c/code\u003e. Open \u003ccode\u003eindex.html\u003c/code\u003e in browser to access the functions in \u003ccode\u003ereducer.js\u003c/code\u003e and follow along.\u003c/p\u003e\n\u003ch2\u003eBuilding our Counter Application\u003c/h2\u003e\n\u003cp\u003ePreviously, we've had a reducer that updates state. In the example we used, we defined a \u003ccode\u003eswitch\u003c/code\u003e statement with one \u003ccode\u003ecase\u003c/code\u003e and a default:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction changeState(state, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet state = {count: 0}\u003cbr\u003elet action = {type: 'INCREASE_COUNT'}\u003cbr\u003e\u003cbr\u003echangeState(state, action)\u003cbr\u003e// =\u0026gt; {count: 1}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003ePersisting State\u003c/h2\u003e\n\u003cp\u003eWe currently have a problem. Let's call \u003ccode\u003echangeState\u003c/code\u003e multiple times:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003echangeState(state, {type: 'INCREASE_COUNT'})\u003cbr\u003e  // =\u0026gt; {count: 1}\u003cbr\u003echangeState(state, {type: 'INCREASE_COUNT'})\u003cbr\u003e  // =\u0026gt; {count: 1}\u003cbr\u003echangeState(state, {type: 'INCREASE_COUNT'})\u003cbr\u003e  // =\u0026gt; {count: 1}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee that? Our state never increases beyond one. It starts off as zero, and while the \u003ccode\u003echangeState\u003c/code\u003e function returns one more than that, if we look at state, it still returns \u003ccode\u003e{count: 0}\u003c/code\u003e. Now, fixing this in the console isn't so bad. We just write\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estate = changeState(state, {type: 'INCREASE_COUNT'})\u003cbr\u003estate\u003cbr\u003e  =\u0026gt; {count: 1}\u003cbr\u003estate = changeState(state, {type: 'INCREASE_COUNT'})\u003cbr\u003e  =\u0026gt; {count: 2}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we're reassigning state to the return value of our reducer. This way, the second time \u003ccode\u003echangeState\u003c/code\u003e is called, it is using the updated state in its arguments.\u003c/p\u003e\n\u003cp\u003eOk. So let's encapsulate this procedure in a function so that we can just call that method and it will persist our changes. We'll name that function \u003ccode\u003edispatch\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet state = {count: 0};\u003cbr\u003e\u003cbr\u003efunction changeState(state, action){\u003cbr\u003e    switch (action.type) {\u003cbr\u003e      case 'INCREASE_COUNT':\u003cbr\u003e        return {count: state.count + 1}\u003cbr\u003e      default:\u003cbr\u003e        return state;\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = changeState(state, action)\u003cbr\u003e  return state\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edispatch({type: 'INCREASE_COUNT'})\u003cbr\u003e  // =\u0026gt; {count: 1}\u003cbr\u003edispatch({type: 'INCREASE_COUNT'})\u003cbr\u003e  // =\u0026gt; {count: 2}\u003cbr\u003edispatch({type: 'INCREASE_COUNT'})\u003cbr\u003e  // =\u0026gt; {count: 3}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk, it's fixed!! Previously our state was stuck at one, but now we just call our \u003ccode\u003edispatch\u003c/code\u003e function, and pass through our action. Let's walk through it.\u003c/p\u003e\n\u003cp\u003eWe declare our state to equal an object \u003ccode\u003e{count: 0}\u003c/code\u003e. Then, we define our reducer and our new function \u003ccode\u003edispatch\u003c/code\u003e. At the bottom, we call the \u003ccode\u003edispatch\u003c/code\u003e function and pass through our action, \u003ccode\u003e{type: 'INCREASE_COUNT'}\u003c/code\u003e. When we call \u003ccode\u003edispatch\u003c/code\u003e, this calls our \u003ccode\u003echangeState\u003c/code\u003e reducer, and passes the action object to the reducer. When called, the \u003ccode\u003echangeState\u003c/code\u003e reducer also takes in \u003ccode\u003estate\u003c/code\u003e, which has been declared up above.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003estate\u003c/code\u003e is assigned the return value of \u003ccode\u003echangeState\u003c/code\u003e. Since the \u003ccode\u003eINCREASE_COUNT\u003c/code\u003e type was used, the returned value of \u003ccode\u003echangeState\u003c/code\u003e contains a \u003ccode\u003ecount\u003c/code\u003e equal to the previous state's count plus one.\u003c/p\u003e\n\u003cp\u003eThus, our state is updated. Each time \u003ccode\u003edispatch\u003c/code\u003e is called, the current version of \u003ccode\u003estate\u003c/code\u003e is passed into \u003ccode\u003echangeState\u003c/code\u003e, and then \u003ccode\u003estate\u003c/code\u003e is assigned a new value based on what \u003ccode\u003echangeState\u003c/code\u003e returns.\u003c/p\u003e\n\u003ch2\u003eRendering Our State\u003c/h2\u003e\n\u003cp\u003eIgnoring React for a bit, how would we display something like this on a page? And how would we make sure that our HTML updates every time we change our state? Well, to render this on the page we can write a render function that changes our HTML:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction render(){\u003cbr\u003e  document.body.textContent = state.count\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow if we want to call our render function, we'll see our state on the page:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet state = {count: 0};\u003cbr\u003e\u003cbr\u003efunction changeState(state, action){\u003cbr\u003e    switch (action.type) {\u003cbr\u003e      case 'INCREASE_COUNT':\u003cbr\u003e        return {count: state.count + 1}\u003cbr\u003e      default:\u003cbr\u003e        return state;\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = changeState(state, action)\u003cbr\u003e  return state\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction render(){\u003cbr\u003e  document.body.textContent = state.count\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// call the render function\u003cbr\u003erender()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd presto! Our number is displayed on the page. However, we want to call \u003ccode\u003erender\u003c/code\u003e every time our state changes. And it's safe to say our state will not change unless we call the \u003ccode\u003edispatch\u003c/code\u003e function. So we can ensure that the \u003ccode\u003erender\u003c/code\u003e function runs every time that our \u003ccode\u003edispatch\u003c/code\u003e function is called by changing our \u003ccode\u003edispatch\u003c/code\u003e function to the following.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction render(){\u003cbr\u003e  document.body.textContent = state.count\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = changeState(state, action)\u003cbr\u003e  render()\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edispatch({type: 'INCREASE_COUNT'})\u003cbr\u003edispatch({type: 'INCREASE_COUNT'})\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eSummary\u003c/h2\u003e\n\u003cp\u003eJust to show everything together finally:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet state = {count: 0};\u003cbr\u003e\u003cbr\u003efunction changeState(state, action){\u003cbr\u003e    switch (action.type) {\u003cbr\u003e      case 'INCREASE_COUNT':\u003cbr\u003e        return {count: state.count + 1}\u003cbr\u003e      default:\u003cbr\u003e        return state;\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003efunction render(){\u003cbr\u003e    document.body.textContent = state.count\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = changeState(state, action)\u003cbr\u003e  render()\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003erender()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you copy the code above into \u003ccode\u003ejs/reducer.js\u003c/code\u003e and open \u003ccode\u003eindex.html\u003c/code\u003e in your browser, in the console, you can confirm everything is working by running \u003ccode\u003edispatch({type: 'INCREASE_COUNT'})\u003c/code\u003e and watch as the displayed count increases!\u003c/p\u003e\n\u003cp\u003eWith just this set of functions, we could actually apply our own Redux pattern to a regular ol' JavaScript and HTML webpage!\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn this lesson, we've introduced a new function called the \u003ccode\u003edispatch\u003c/code\u003e function. Our \u003ccode\u003edispatch\u003c/code\u003e function solved two problems for us.\u003c/p\u003e\n\u003cp\u003eFirst, it persisted changes to our state. This is because we called the \u003ccode\u003edispatch\u003c/code\u003e function, the \u003ccode\u003edispatch\u003c/code\u003e function called our reducer, and then we took the return value from the reducer and assigned it to be our new state.\u003c/p\u003e\n\u003cp\u003eSecond, it ensured that each time our state updates, our HTML updates to reflect these changes. It does this by simply calling the \u003ccode\u003erender\u003c/code\u003e function. Each time we call \u003ccode\u003edispatch\u003c/code\u003e it's as if we are then calling render. Don't worry about re-rendering too much. Remember that when we integrate with React, React will only be virtually re-rendering the DOM, and then updating the DOM with the smallest number of changes to ensure a performant application.\u003c/p\u003e\n\u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/redux-dispatch\"\u003eRedux Dispatch\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","exportId":"g192a4500dc54ff2a392cf75c6f2e8b62"},{"id":220873,"title":"Dispatching an Initial Action for Setup","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-initial-dispatch\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/redux-initial-dispatch/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-initial-dispatch\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-initial-dispatch/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eIn this lesson, you will learn the following:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHow dispatching an initial action gives an initial render of the view.\u003c/li\u003e \u003cli\u003eHow dispatching an initial action gives an initial setup of the store's state.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eTo follow along in this code-along, use the \u003ccode\u003ejs/reducer.js\u003c/code\u003e file and update according to the Readme. Open \u003ccode\u003eindex.html\u003c/code\u003e and try running \u003ccode\u003edispatch({type: \"INCREASE_COUNT\"})\u003c/code\u003e in the browser console. You should see a \u003ccode\u003e1\u003c/code\u003e appear on the otherwise blank page.\u003c/p\u003e  \u003ch2\u003eDispatch an Initial Action to Render the View\u003c/h2\u003e  \u003cp\u003eCurrently, we have built our \u003ccode\u003echangeState()\u003c/code\u003e reducer, and the \u003ccode\u003edispatch()\u003c/code\u003e and \u003ccode\u003erender()\u003c/code\u003e functions.  Remember that we built the \u003ccode\u003edispatch()\u003c/code\u003e function such that each time we execute it, we call the \u003ccode\u003erender()\u003c/code\u003e function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state = {count: 0};\u003cbr\u003e\u003cbr\u003efunction changeState(state, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e    state = changeState(state, action)\u003cbr\u003e    render()\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction render(){\u003cbr\u003e    document.body.textContent = state.count\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that by calling \u003ccode\u003edispatch()\u003c/code\u003e with an action as an argument, we do render something on the page. We dispatch an action of \u003ccode\u003e\"INCREASE_COUNT\"\u003c/code\u003e and we see the number \u003ccode\u003e1\u003c/code\u003e in our HTML, but \u003cstrong\u003ewe never see the number zero displayed\u003c/strong\u003e.  One easy way to fix this is to simply call the \u003ccode\u003erender()\u003c/code\u003e function at the bottom of our JavaScript code, like the previous lesson. We'll choose a different approach, though, and use the \u003ccode\u003edispatch()\u003c/code\u003e function we already have.  \u003c/p\u003e  \u003cp\u003eRemember that our \u003ccode\u003edispatch()\u003c/code\u003e function also calls our \u003ccode\u003erender()\u003c/code\u003e function.  So, if we dispatch a meaningless action, our reducer will simply return the existing state (the \u003ccode\u003edefault\u003c/code\u003e case in our \u003ccode\u003eswitch\u003c/code\u003e), and then our \u003ccode\u003erender()\u003c/code\u003e function will be called.  Let's try it by dispatching an action of type \u003ccode\u003e@@INIT\u003c/code\u003e. If you already have \u003ccode\u003eindex.html\u003c/code\u003e open in browser, refresh the page and enter the following into the browser console:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edispatch({ type: '@@INIT' }) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCool, now our HTML starts off at zero.  And each time we call dispatch, the HTML is appropriately updated.  \u003c/p\u003e  \u003cp\u003eNote that we can dispatch an action of any type, so long as it doesn't hit our switch statement.  We dispatch an action of type \u003ccode\u003e@@INIT\u003c/code\u003e by convention, but you could just as well choose something else and get the same result:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edispatch({ type: 'beef' }) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003eswitch\u003c/code\u003e will return whatever state was passed into the \u003ccode\u003echangeState()\u003c/code\u003e function. Then \u003ccode\u003erender()\u003c/code\u003e will be called and that updated state will get applied to the DOM.\u003c/p\u003e  \u003cp\u003eNow, if we want our page to display \u003ccode\u003e0\u003c/code\u003e when it first loads, we can just add \u003ccode\u003edispatch({ type: '@@INIT' })\u003c/code\u003e at the end of the file.\u003c/p\u003e  \u003ch2\u003eDispatch an Initial Action to Set up our Initial State\u003c/h2\u003e  \u003cp\u003eNow that we've seen a simple fix for setting up the initial render of HTML, let's see if there's a simple fix for setting up our state.  Notice that currently we set the initial value of the state at the very first line of our JavaScript with the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state = { count: 0 }; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe problem here is that we would prefer to look to our reducer to see how to manage the state.  After all, our reducer returns the new state every time we dispatch a new action. Perhaps our reducer can also return our initial state?  \u003c/p\u003e  \u003cp\u003eLet's begin by simply declaring our state, but not assigning it to equal anything.  So, we accordingly change the first line of our JavaScript:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state; \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003efunction changeState(state, action) {\u003cbr\u003e\u003cbr\u003e  switch (action.type) {\u003cbr\u003e\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 }\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = changeState(state, action)\u003cbr\u003e  render()\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction render(){\u003cbr\u003e  document.body.textContent = state.count\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edispatch({ type: '@@INIT' }) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut, we find that dispatching the action of type \u003ccode\u003e@@INIT\u003c/code\u003e gives us an error:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eUncaught TypeError: Cannot read property 'count' of undefined(…) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSee that?  Our \u003ccode\u003erender()\u003c/code\u003e function is breaking because now state starts off as undefined.  When we dispatch our action, it calls the reducer, which passes through our state whose value is undefined, and then returns the default value of our switch statement, which is just our undefined state.  \u003c/p\u003e  \u003cp\u003eWhat would be really nice is if we could say when you pass a state of \u003ccode\u003eundefined\u003c/code\u003e to our reducer, assign a value to our initial state. Luckily, ES6 allows us to pass default arguments to functions and we can give our \u003ccode\u003echangeState()\u003c/code\u003e reducer a default argument to do just that.  Let's change our reducer to the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction changeState(state = { count: 0 }, action) {\u003cbr\u003e\u003cbr\u003e  switch (action.type) {\u003cbr\u003e\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 }\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow notice what happens:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  dispatch({ type: '@@INIT' })\u003cbr\u003e    -\u0026gt; { count: 0 }\u003cbr\u003e  dispatch({type: 'INCREASE_COUNT'})\u003cbr\u003e    -\u0026gt; { count: 1 } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk, pretty elegant.  How did that work?  Let's take it from the top.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state;\u003cbr\u003e\u003cbr\u003efunction changeState(state = { count: 0 }, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 }\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = changeState(state, action)\u003cbr\u003e  render()\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction render(){\u003cbr\u003e  document.body.textContent = state.count\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edispatch({type: '@@INIT'}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAt the top of the file, we declare but do not assign our state, so it starts off undefined.  Then at the bottom of the file, we dispatch an action of \u003ccode\u003e'@@INIT'\u003c/code\u003e. This calls our \u003ccode\u003edispatch()\u003c/code\u003e function and passes through our initial action. \u003ccode\u003edispatch()\u003c/code\u003e calls the \u003ccode\u003echangeState()\u003c/code\u003e reducer.  \u003ccode\u003echangeState()\u003c/code\u003e is executed, passing through two local variables: state and action.  \u003ccode\u003eaction\u003c/code\u003e is defined because we passed \u003ccode\u003e{ type: '@@INIT' }\u003c/code\u003e into dispatch. \u003ccode\u003estate\u003c/code\u003e is currently \u003cstrong\u003eundefined\u003c/strong\u003e, so, with  that initial dispatch we are really calling:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003echangeState(undefined, { type: '@@INIT' }) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBecause \u003ccode\u003echangeState()\u003c/code\u003e now has a default argument, the \u003ccode\u003estate\u003c/code\u003e argument is set to  \u003ccode\u003e{ count: 0 }\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhen \u003ccode\u003echangeState()\u003c/code\u003e executes, the \u003ccode\u003eswitch\u003c/code\u003e statement executes the \u003ccode\u003edefault\u003c/code\u003e case, returning the value of \u003ccode\u003estate\u003c/code\u003e. The code \u003ccode\u003echangeState(undefined, { type: '@@INIT' })\u003c/code\u003e  \u003cem\u003ereturns\u003c/em\u003e  \u003ccode\u003e{ count: 0 }\u003c/code\u003e, \u003c/p\u003e  \u003cp\u003eIn \u003ccode\u003edispatch()\u003c/code\u003e, when the \u003ccode\u003echangeState()\u003c/code\u003e reducer returns, dispatch assigns the return value to \u003ccode\u003estate\u003c/code\u003e, thus updating our state to the initial value of \u003ccode\u003e{ count: 0 }\u003c/code\u003e. On the next line, \u003ccode\u003erender()\u003c/code\u003e is called, displaying \u003ccode\u003e0\u003c/code\u003e in our HTML.\u003c/p\u003e  \u003cp\u003eEssentially, we take advantage of our state starting off as undefined, and never being undefined again.  This means the reducer's default argument can be used to set up the initial state and never be used again.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eWe learned that by dispatching an initial action of type \u003ccode\u003e'@@INIT'\u003c/code\u003e we get two benefits: an initial rendering of the state, and the ability to set our initial state in our reducer.  We set our initial state in our reducer by using a default argument for the state parameter.  Because state is not initially defined, dispatching an action assigns our state to that default value, and then sets state as the default.\u003c/p\u003e  \u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/redux-initial-dispatch\"\u003eRedux Initial Dispatch\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","exportId":"g524425c1a33d6a2c7e625a0646f0c088"},{"id":220877,"title":"Completing our Counter Application","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-dispatch-with-event-listeners\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/redux-dispatch-with-event-listeners/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-dispatch-with-event-listeners\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-dispatch-with-event-listeners/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eIn this lesson, you will learn the following:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHow to allow a user to execute the dispatch function by attaching dispatch to event listeners.\u003c/li\u003e \u003cli\u003eThe redux flow.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eUse \u003ccode\u003ejs/reducer.js\u003c/code\u003e to follow along. The file is already set up in \u003ccode\u003eindex.html\u003c/code\u003e, so if you run \u003ccode\u003eopen index.html\u003c/code\u003e, any code in \u003ccode\u003ejs/reducer.js\u003c/code\u003e will execute.\u003c/p\u003e  \u003ch2\u003eApplication Goal\u003c/h2\u003e  \u003cp\u003eWe have built out most of the redux pattern.  Don't worry, we'll review it.\u003c/p\u003e  \u003cp\u003eFor now, let's talk about what we want as a user experience.  Here it is: you click on a button, and you see a number on the page go from zero to one.  Click again, and you see the number go from one to two.  We can see a couple of steps involved in this.\u003c/p\u003e  \u003col\u003e \u003cli\u003eClicking on the button should change the state.\u003cbr\u003e\n\u003c/li\u003e \u003cli\u003eThis change in state should be rendered.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eBrief Redux Review\u003c/h2\u003e  \u003cp\u003eBy now, you've learned a lot about redux, but the basic story about it has not changed:\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eAction -\u0026gt; Reducer -\u0026gt; New State\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eFor example, to increase our state we call \u003ccode\u003edispatch({type: 'INCREASE_COUNT'})\u003c/code\u003e. Our dispatch function calls our reducer which updates state, and then we render that view on the page.\u003c/p\u003e  \u003cp\u003eIn the previous section, we learned that by dispatching an initial action and having a default argument in our reducer, we can set up our initial state.\u003c/p\u003e  \u003ch2\u003eRebuild our Dispatch Function and our Reducer\u003c/h2\u003e  \u003cp\u003eLet's code out our counter application from scratch.  \u003c/p\u003e  \u003ch4\u003e1. Start by remembering our core fact about how redux works.\u003c/h4\u003e  \u003cp\u003e\u003ccode\u003eaction -\u0026gt; reducer -\u0026gt; new state\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eOk, let's translate that into code.  This means if we pass an action and a previous state to our reducer, the reducer should return the new state.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state = {count: 0}\u003cbr\u003e\u003cbr\u003efunction reducer(state, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1};\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk copy this into the \u003ccode\u003ereducer.js\u003c/code\u003e file inside the \u003ccode\u003ejs\u003c/code\u003e folder.  Now let's get some feedback that we did this correctly by opening up our \u003ccode\u003eindex.html\u003c/code\u003e file in Chrome.  From your terminal type \u003ccode\u003eopen index.html\u003c/code\u003e. This index file has a link to the \u003ccode\u003ereducer.js\u003c/code\u003e file, so your code will be accessible from the console - press command+shift+c to open it up.  Now let's test the code by calling the   \u003ccode\u003ereducer()\u003c/code\u003e function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ereducer({count: 0}, {type: 'INCREASE_COUNT'}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see a return value of \u003ccode\u003e{count: 1}\u003c/code\u003e then give yourself a big smile. :)\u003c/p\u003e  \u003cp\u003eOk, if we type in state, we see that it's unchanged.  We need to assign our state to be the return value of our reducer each time that we call the reducer. So how do we do that?  Think hard, there's no rush.\u003c/p\u003e  \u003cp\u003eThinking...\u003c/p\u003e  \u003cp\u003eThinking...\u003c/p\u003e  \u003ch4\u003e2. Wrap the execution of our reducer in a function that we call dispatch\u003c/h4\u003e  \u003cp\u003eOk, so we can reassign the state by adding the dispatch function to our \u003ccode\u003ereducer.js\u003c/code\u003e file.  This dispatch function should receive an argument of action. It can access the state because it is declared earlier in the file in global scope.  \u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction dispatch(action){\u003cbr\u003e  state = reducer(state, action);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow let's see if this reassigns state. Add this \u003ccode\u003edispatch\u003c/code\u003e function in and open or refresh the \u003ccode\u003eindex.html\u003c/code\u003e file in a browser tab. Call \u003ccode\u003edispatch({type: 'INCREASE_COUNT'})\u003c/code\u003e.  It should return \u003ccode\u003eundefined\u003c/code\u003e, since \u003ccode\u003edispatch()\u003c/code\u003e doesn't return anything, but our \u003ccode\u003estate\u003c/code\u003e value should have changed! Type in \u003ccode\u003estate\u003c/code\u003e and see if this is true.  State should return \u003ccode\u003e{count: 1}\u003c/code\u003e.  Hurray! More smiles. :) :)\u003c/p\u003e  \u003cp\u003eNext problem.  Our state says the count is 1, but do you think that is reflected in our HTML?  Me neither.  Ok, so what function is in charge of that. Give it a shot.  I'll be waiting with the answer when you're ready.\u003c/p\u003e  \u003ch4\u003e3. Use the render function to display our state.\u003c/h4\u003e  \u003cp\u003eOk, so now we need a function called render that will place this count on the page.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction render(){\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = state.count;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo now when we call \u003ccode\u003erender\u003c/code\u003e from the console we should see HTML that reflects the current count. Entering \u003ccode\u003edispatch({type: 'INCREASE_COUNT'})\u003c/code\u003e to change state, then \u003ccode\u003erender\u003c/code\u003e again should update the number displayed.\u003c/p\u003e  \u003cp\u003eSince the two functions go together, the next step is to tie rendering with the dispatch function. Easy enough. Let's alter our dispatch method so that it looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction dispatch(action){\u003cbr\u003e  state = reducer(state, action);\u003cbr\u003e  render();\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk, so now each time we dispatch an action we should have to update our HTML because the \u003ccode\u003erender\u003c/code\u003e function is also called.  Now for a little refactoring. Let's have only our initial state set in the reducer.  We do that by setting our initial state as a default argument to our \u003ccode\u003ereducer\u003c/code\u003e reducer.  Go ahead and tackle it.  We'll show the code below.\u003c/p\u003e  \u003ch4\u003e4. Use a default argument in the reducer to set the initial state.\u003c/h4\u003e  \u003cp\u003eNow our \u003ccode\u003ereducer()\u003c/code\u003e function should look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// let state = {count: 0}\u003cbr\u003efunction reducer(state = {count: 0}, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe are commenting out/deleting the top line where we assign the state, because dispatching an action should take care of it (it doesn't).  Call \u003ccode\u003edispatch\u003c/code\u003e with an action like \u003ccode\u003edispatch({type: 'INCREASE_COUNT'})\u003c/code\u003e, and we would hope that because state is \u003ccode\u003eundefined\u003c/code\u003e, our default argument will be passed through.  The problem is that we still need to declare our state.  So now our updated (working) code looks like the following.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state;\u003cbr\u003efunction reducer(state = {count: 0}, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCall \u003ccode\u003edispatch({type: 'INCREASE_COUNT'})\u003c/code\u003e again, and we get no error.  Instead we get a beautiful piece of HTML code that says the number 1 on it.  Now, if instead we want to show the number zero, our default state, well we can just refresh our page, and then dispatch an action that returns the default state like so: \u003ccode\u003edispatch({type: '@@init'})\u003c/code\u003e.  This does not increase our state, but it does return our default state and then call render.\u003c/p\u003e  \u003cp\u003eThis is what we want to do each time we open our page.  So let's add \u003ccode\u003edispatch({type: '@@INIT'})\u003c/code\u003e at the end of our javascript file.  This is where we left off previously.  Our almost completed code should look like the following.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state;\u003cbr\u003e\u003cbr\u003efunction reducer(state = {count: 0}, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = reducer(state, action)\u003cbr\u003e  render()\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction render(){\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = state.count;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edispatch({type: '@@INIT'}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLooks good.  But we're going further today.  We need to make sure every time the user clicks on a button, we dispatch an action.  How do you think we do that.\u003c/p\u003e  \u003ch4\u003e5. Integrating dispatch with a user event\u003c/h4\u003e  \u003cp\u003eSo \u003ccode\u003edispatch\u003c/code\u003e is responsible for updating the state and re-rendering.  And we want an action to be dispatched each time a user clicks.  So let's attach \u003ccode\u003edispatch\u003c/code\u003e execution to a click event.\u003c/p\u003e  \u003cp\u003eWe'll be writing a \"vanilla\" JavaScript event listener.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet button = document.getElementById('button');\u003cbr\u003e\u003cbr\u003ebutton.addEventListener('click', () =\u0026gt; {\u003cbr\u003e  dispatch({type: 'INCREASE_COUNT'})\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow every time we click, we dispatch an action of type \u003ccode\u003e'INCREASE_COUNT'\u003c/code\u003e.  Dispatch first calls our reducer, which updates our state.  Then dispatch renders the updated view.\u003c/p\u003e  \u003cp\u003ePutting everything together, our code should look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state;\u003cbr\u003efunction reducer(state = {count: 0}, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = reducer(state, action);\u003cbr\u003e  render();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction render(){\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = state.count;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edispatch({type: '@@INIT'})\u003cbr\u003e\u003cbr\u003elet button = document.getElementById('button');\u003cbr\u003e\u003cbr\u003ebutton.addEventListener('click', () =\u0026gt; {\u003cbr\u003e  dispatch({type: 'INCREASE_COUNT'})\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eClick the button.  Our application is done!\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eOh yea!  Not much new here.  But that didn't stop the dopamine hit. We saw that by thinking about redux from the perspective of \u003ccode\u003eaction -\u0026gt; reducer -\u0026gt; new state\u003c/code\u003e, we are able to get going.  Then it's just a matter of tackling each problem.\u003c/p\u003e  \u003cp\u003eAs for new information, we saw that we can get the user to call the \u003ccode\u003edispatch\u003c/code\u003e method, by executing \u003ccode\u003edispatch\u003c/code\u003e from inside the callback of an event handler.\u003c/p\u003e","exportId":"g5965a6cf9b0567ae293af6537fd68d7f"},{"id":220880,"title":"Refactoring Our Code Into A Library","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-create-store\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/redux-create-store/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-create-store\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-create-store/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003cp\u003eIn this lesson, we will learn how to turn our code into a library that can be used across JavaScript applications. By the end of the lesson you will be able to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUnderstand which part of our codebase can be used across applications.\u003c/li\u003e\n\u003cli\u003eUnderstand how to encapsulate the functions we built.\u003c/li\u003e\n\u003cli\u003eLearn about the \u003ccode\u003egetState\u003c/code\u003e method and how it works.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUse \u003ccode\u003ejs/createStore.js\u003c/code\u003e to follow along. Open \u003ccode\u003eindex.html\u003c/code\u003e to try out the code.\u003c/p\u003e\n\u003ch2\u003eEncapsulate our application's state by wrapping our code in a function\u003c/h2\u003e\n\u003cp\u003eLet's look at the code that we wrote in the last section.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet state;\u003cbr\u003e\u003cbr\u003efunction reducer(state = { count: 0 }, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = reducer(state, action);\u003cbr\u003e  render();\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction render() {\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = state.count;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003edispatch({ type: '@@INIT' })\u003cbr\u003elet button = document.getElementById('button');\u003cbr\u003e\u003cbr\u003ebutton.addEventListener('click', () =\u0026gt; {\u003cbr\u003e    dispatch({ type: 'INCREASE_COUNT' });\u003cbr\u003e})\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee that \u003ccode\u003estate\u003c/code\u003e variable all the way at the top of our code? Remember, that variable holds a representation of all of our data we need to display. So it's not very good if this variable is global, and we can accidentally overwrite simply by writing \u003ccode\u003estate = 'bad news bears'\u003c/code\u003e somewhere else in our codebase. Goodbye state.\u003c/p\u003e\n\u003cp\u003eWe can solve this by wrapping our state in a function. (We will discuss a bit later why we have named this function \u003ccode\u003ecreateStore\u003c/code\u003e.)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction createStore() {\u003cbr\u003e  let state;\u003cbr\u003e}\u003cbr\u003e// ...\u003cbr\u003e\u003cbr\u003efunction dispatch(action) {\u003cbr\u003e  state = reducer(state, action);\u003cbr\u003e  render();\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction render() {\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = state.count;\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow if you reload the browser, you'll see an error pointing to where we are dispatching our initial action; this is because the \u003ccode\u003edispatch\u003c/code\u003e function does not have access to that declared state. Notice that \u003ccode\u003erender\u003c/code\u003e won't have access to our state either. At this point, we might be tempted to move everything inside of our new function. However, the goal here is to include only the code that would be common to all JavaScript applications inside the function. We'll try to figure out exactly what we should move in the next section.\u003c/p\u003e\n\u003ch2\u003eMove Code Common to Every JavaScript Application Inside Our New Function\u003c/h2\u003e\n\u003cp\u003eWe ultimately want our new function to become a function that all of our applications following the \u003cstrong\u003eRedux\u003c/strong\u003e pattern can use. To decide what our new function should be able to do, let's go back to our \u003cstrong\u003eRedux\u003c/strong\u003e fundamentals.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eAction -\u0026gt; Reducer -\u0026gt; New State.\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe function that goes through this flow for us is the \u003ccode\u003edispatch\u003c/code\u003e function. We call \u003ccode\u003edispatch\u003c/code\u003e with an action, and it calls our reducer and returns to us a new state. So let's move dispatch inside of our new method.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction createStore() {\u003cbr\u003e  let state;\u003cbr\u003e  // state is now accessible to dispatch\u003cbr\u003e\u003cbr\u003e  function dispatch(action) {\u003cbr\u003e    state = reducer(state, action);\u003cbr\u003e    render();\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: You may notice that in the above code we made a \u003cem\u003eclosure\u003c/em\u003e. As you surely remember a JavaScript function has access to all the variables that were in scope at the time of its definition. This feature is called a closure since a function encloses or draws a protective bubble around the variables in its scope and carries those with it when invoked later.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAs you see above, \u003ccode\u003edispatch\u003c/code\u003e is now private to our new function. But we'll need to call the function when certain events happen in our application (eg. we might want to call dispatch when a user clicks on a button). So we expose the method by having our function return a JavaScript object containing the \u003ccode\u003edispatch\u003c/code\u003e method. In \u003cstrong\u003eRedux\u003c/strong\u003e terms, this returned JavaScript object is called the \u003cstrong\u003estore\u003c/strong\u003e, so we've named the method \u003ccode\u003ecreateStore\u003c/code\u003e because that's what it does.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction createStore() {\u003cbr\u003e  let state;\u003cbr\u003e\u003cbr\u003e  function dispatch(action) {\u003cbr\u003e    state = reducer(state, action);\u003cbr\u003e    render();\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  return { dispatch };\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, in order to access the \u003ccode\u003edispatch\u003c/code\u003e method, we will create a variable \u003ccode\u003estore\u003c/code\u003e and set it equal to the result of calling \u003ccode\u003ecreateStore\u003c/code\u003e. Because \u003ccode\u003ecreateStore\u003c/code\u003e returns an object that contains the \u003ccode\u003edispatch\u003c/code\u003e method, we can now access the method from \u003ccode\u003estore\u003c/code\u003e. Let's modify the code where we dispatch the initial action as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet store = createStore();\u003cbr\u003estore.dispatch({ type: '@@INIT' });\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo now we have this object called a store which contains all of our application's state. Right now we can dispatch actions that modify that state, but we need some way to retrieve data from the store. To do this, our store should respond to one other method, \u003ccode\u003egetState\u003c/code\u003e. This method simply returns the state so we can use it elsewhere in our application. We will also need to add \u003ccode\u003egetState\u003c/code\u003e to the object our \u003ccode\u003ecreateStore\u003c/code\u003e function returns.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction createStore() {\u003cbr\u003e  let state;\u003cbr\u003e\u003cbr\u003e  function dispatch(action) {\u003cbr\u003e    state = reducer(state, action);\u003cbr\u003e    render();\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function getState() {\u003cbr\u003e    return state;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return {\u003cbr\u003e    dispatch,\u003cbr\u003e    getState\u003cbr\u003e  };\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can get our code working by changing \u003ccode\u003erender\u003c/code\u003e to the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction render() {\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = store.getState().count;\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...and then updating our button event listener to use \u003ccode\u003estore.dispatch\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet button = document.getElementById('button');\u003cbr\u003e\u003cbr\u003ebutton.addEventListener('click', () =\u0026gt; {\u003cbr\u003e    store.dispatch({ type: 'INCREASE_COUNT' });\u003cbr\u003e})\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAll in all, with these changes, the code should look like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction createStore() {\u003cbr\u003e  let state;\u003cbr\u003e\u003cbr\u003e  function dispatch(action) {\u003cbr\u003e    state = reducer(state, action);\u003cbr\u003e    render();\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function getState() {\u003cbr\u003e    return state;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return {\u003cbr\u003e    dispatch,\u003cbr\u003e    getState\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction reducer(state = { count: 0 }, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction render() {\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = store.getState().count;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003elet store = createStore();\u003cbr\u003estore.dispatch({ type: '@@INIT' });\u003cbr\u003elet button = document.getElementById('button');\u003cbr\u003e\u003cbr\u003ebutton.addEventListener('click', () =\u0026gt; {\u003cbr\u003e    store.dispatch({ type: 'INCREASE_COUNT' });\u003cbr\u003e})\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur code is back to working. And it looks like we have a function called \u003ccode\u003ecreateStore\u003c/code\u003e which can work with any JavaScript application...almost.\u003c/p\u003e\n\u003ch2\u003eAbstract away the reducer\u003c/h2\u003e\n\u003cp\u003eWe know that \u003cstrong\u003eRedux\u003c/strong\u003e works by having an action dispatched, which calls a reducer, and then renders the view. Our \u003ccode\u003ecreateStore\u003c/code\u003e's dispatch method does that.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction dispatch(action) {\u003cbr\u003e  state = reducer(state, action);\u003cbr\u003e  render();\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice, however, that we did not move the \u003ccode\u003ereducer\u003c/code\u003e function into the \u003ccode\u003ecreateStore\u003c/code\u003e function. Take a look at it. \u003cem\u003eThis code\u003c/em\u003e is particular to our application.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction reducer(state = { count: 0 }, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe happen to have an application that increases a count. But we can imagine applications that manage people's songs, their GitHub repositories, or their contacts. So we want our \u003ccode\u003edispatch\u003c/code\u003e method to call a reducer every time an action is dispatched. However, we don't want the \u003ccode\u003ecreateStore\u003c/code\u003e function to specify what that reducer is, or what it does. We want \u003ccode\u003ecreateStore\u003c/code\u003e to be generic enough for \u003cem\u003eany\u003c/em\u003e JavaScript application. Instead, we should make the reducer an argument to our \u003ccode\u003ecreateStore\u003c/code\u003e function. Then we pass through our reducer function when invoking the \u003ccode\u003ecreateStore\u003c/code\u003e method.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction createStore(reducer) {\u003cbr\u003e  let state;\u003cbr\u003e\u003cbr\u003e  function dispatch(action) {\u003cbr\u003e    state = reducer(state, action);\u003cbr\u003e    render();\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function getState() {\u003cbr\u003e    return state;\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  return {\u003cbr\u003e    dispatch,\u003cbr\u003e    getState\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction reducer(state = { count: 0 }, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e\u003cbr\u003efunction render() {\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = store.getState().count;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003elet store = createStore(reducer) // createStore takes the reducer as an argument\u003cbr\u003estore.dispatch({ type: '@@INIT' });\u003cbr\u003elet button = document.getElementById('button');\u003cbr\u003e\u003cbr\u003ebutton.addEventListener('click', () =\u0026gt; {\u003cbr\u003e  store.dispatch({ type: 'INCREASE_COUNT' });\u003cbr\u003e});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you see above, \u003ccode\u003ecreateStore\u003c/code\u003e takes the reducer as the argument. This sets the new store's reducer as \u003ccode\u003ereducer\u003c/code\u003e. When an action is dispatched, it calls the reducer that we passed through when creating the store.\u003c/p\u003e\n\u003ch2\u003eSummary\u003c/h2\u003e\n\u003cp\u003eWith this set up, we've got a fully functional \u003ccode\u003estore\u003c/code\u003e, that encapsulates our state and provides a controlled way to write (\u003ccode\u003edispatch\u003c/code\u003e) and retrieve (\u003ccode\u003egetState\u003c/code\u003e) information.\u003c/p\u003e\n\u003cp\u003eEvery piece of code that would be common to any JavaScript application following this pattern is wrapped inside of the \u003ccode\u003ecreateStore\u003c/code\u003e function. Any code that is particular to our application is outside that function.\u003c/p\u003e\n\u003cp\u003eWhat's particular to a specific application?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHow the DOM is updated in our \u003ccode\u003erender\u003c/code\u003e function\u003c/li\u003e\n\u003cli\u003eWhat events trigger a dispatch method\u003c/li\u003e\n\u003cli\u003eHow our state should change in response to different actions being dispatched.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese are all implemented outside of our \u003ccode\u003ecreateStore\u003c/code\u003e function. What is generic to each application following this pattern?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThat a call to \u003ccode\u003edispatch\u003c/code\u003e should call a reducer, reassign the state, and render a change.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis is implemented inside the \u003ccode\u003ecreateStore\u003c/code\u003e function.\u003c/p\u003e","exportId":"g300821787762e33d2f1a3370546c838f"},{"id":220884,"title":"(Candy) Store Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-create-store-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/redux-create-store-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-create-store-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-create-store-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/xT5LMwcxObBBA31D8c/giphy.gif\" alt=\"simpsons-candy\"\u003e\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eWrite a method to create a store.\u003c/li\u003e\n\u003cli\u003eWork with stores, reducers, and actions.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eGood news - you're opening a candy store! First, we just need to build an app to manage our inventory.\u003c/p\u003e\n\u003cp\u003eFor now, we'll want to create a store to keep track of all of the types of candy we sell. Later on, we'll learn how we can manage multiple pieces of state and more than one reducer, but for this challenge, the state is going to be a basic array of strings. By the end of this lab, you should be able to open \u003ccode\u003eindex.html\u003c/code\u003e, use your store's \u003ccode\u003edispatch\u003c/code\u003e function to add a name of a type of candy, and see that name appear on the page.\u003c/p\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eWrite your code in \u003ccode\u003esrc/index.js\u003c/code\u003e. We've provided the \u003ccode\u003ecandyReducer\u003c/code\u003e function for you, as well as a \u003ccode\u003erender\u003c/code\u003e function, so you can get a sense of how they'll work.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWrite a function called \u003ccode\u003ecreateStore\u003c/code\u003e that takes in a reducer function as an argument.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ecreateStore\u003c/code\u003e function should return an object with two methods - \u003ccode\u003egetState\u003c/code\u003e, \u003ccode\u003edispatch\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e* \u003ccode\u003egetState\u003c/code\u003e should return the current state. * \u003ccode\u003edispatch\u003c/code\u003e should take in an action, update the state using the reducer, and call the render function.\u003c/p\u003e\n\u003cp\u003eOnce you've written \u003ccode\u003ecreateStore\u003c/code\u003e, to get everything working, you'll need two more things at the end of \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eNotice that in the provided \u003ccode\u003erender\u003c/code\u003e function, a variable named \u003ccode\u003estore\u003c/code\u003e is called. Define a variable named \u003ccode\u003estore\u003c/code\u003e and assign it to whatever is returned by the \u003ccode\u003ecreateStore\u003c/code\u003e function you've written when it is passed the \u003ccode\u003ecandyReducer\u003c/code\u003e function.\u003c/li\u003e\n\u003cli\u003eInitialize your state using a \u003ccode\u003edispatch\u003c/code\u003e call to the reducer.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://redux.js.org/docs/basics/Store.html\"\u003eRedux Documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"gb5ee9abb5d48f9a5d3b62864e019cc5b"}]},{"id":24139,"name":"Redux: Using the Redux Library","status":"started","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gebabc444c6538c45f72be69a1c2cb9df","items":[{"id":220896,"title":"Intro to Redux: Reading Data from State","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"intro-to-redux-library-codealong\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/intro-to-redux-library-codealong/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-redux-library-codealong\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-redux-library-codealong/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUse the \u003ccode\u003ecreateStore()\u003c/code\u003e method provided by the redux library.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the previous section, we have been building using a \u003cstrong\u003ecreateStore()\u003c/strong\u003e method that we wrote, and passing a reducer to it. We have been using the \u003cstrong\u003edispatch\u003c/strong\u003e method from the store, to dispatch actions and update the state.\u003c/p\u003e  \u003cp\u003eNow let's think about which part of our application would belong in the official Redux library -- that is, which part of our codebase would be common to all applications. Well, probably not the reducer as our reducers seem unique to each React \u0026amp; Redux application. The reducers are unique because sometimes we have reducers that would add or remove items, or add or remove users, or edit users, etc. What these actions are and how the reducer manages the state is customized. Thus, the reducer would not be part of the redux library that other developers would use to build their application.\u003c/p\u003e  \u003cp\u003eThe \u003cstrong\u003ecreateStore()\u003c/strong\u003e, method however is generic across Redux applications. It always returns a store (given a reducer) that will have a dispatch method and a getState method.\u003c/p\u003e  \u003cp\u003eSo from now on, we will import our \u003cstrong\u003ecreateStore()\u003c/strong\u003e method from the official Redux library. Normally, to install Redux into a React application, you need to install two packages, \u003ccode\u003eredux\u003c/code\u003e and \u003ccode\u003ereact-redux\u003c/code\u003e by running \u003ccode\u003enpm install redux \u0026amp;\u0026amp; npm install react-redux\u003c/code\u003e. These are already included in this lesson's \u003ccode\u003epackage.json\u003c/code\u003e file, so all you need to do is run \u003ccode\u003enpm install \u0026amp;\u0026amp; npm start\u003c/code\u003e to get started.\u003c/p\u003e  \u003cp\u003eIn this code along, we'll be building a simple shopping list application that will allow a user to view an existing shopping list.\u003c/p\u003e  \u003ch3\u003eStep 1: Setting Up The Store\u003c/h3\u003e  \u003cp\u003eFirst things first, we'll use Redux to initialize our store and pass it down to our top-level container component.\u003c/p\u003e  \u003cp\u003eRedux provides a function, \u003ccode\u003ecreateStore()\u003c/code\u003e, that, when invoked, returns an instance of the Redux store for us. So we can use that method to create a store. We want to import \u003ccode\u003ecreateStore()\u003c/code\u003e in our \u003ccode\u003esrc/index.js\u003c/code\u003e file, where ReactDOM renders our application.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport { createStore } from 'redux'; /* code change */\u003cbr\u003eimport shoppingListItemReducer from './reducers/shoppingListItemReducer.js';\u003cbr\u003eimport App from './App';\u003cbr\u003eimport './index.css';\u003cbr\u003e\u003cbr\u003econst store = createStore(shoppingListItemReducer); /* code change */\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u0026lt;App /\u0026gt;, document.getElementById('root')); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we are importing the \u003ccode\u003ecreateStore\u003c/code\u003e function from Redux. Now, with the above set up, we \u003cem\u003ecould\u003c/em\u003e pass \u003ccode\u003estore\u003c/code\u003e down through App and we would be able to access the \u003cstrong\u003eRedux\u003c/strong\u003e store.\u003c/p\u003e  \u003cp\u003eHowever, reducing the need for passing props is part of why \u003cstrong\u003eRedux\u003c/strong\u003e works well with React. To avoid passing \u003ccode\u003estore\u003c/code\u003e as a prop, we use the \u003ccode\u003eProvider\u003c/code\u003e component, which is imported from \u003ccode\u003ereact-redux\u003c/code\u003e. The \u003ccode\u003eProvider\u003c/code\u003e component wraps the top level component, App, in this case, and is the only component where \u003ccode\u003estore\u003c/code\u003e is passed in:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport { createStore } from 'redux';\u003cbr\u003eimport { Provider } from 'react-redux'; /* code change */\u003cbr\u003eimport shoppingListItemReducer from './reducers/shoppingListItemReducer.js';\u003cbr\u003eimport App from './App';\u003cbr\u003eimport './index.css';\u003cbr\u003e\u003cbr\u003econst store = createStore(shoppingListItemReducer);\u003cbr\u003e\u003cbr\u003e// code change - added Provider to wrap around App\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store}\u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt; /* code change */,\u003cbr\u003e  document.getElementById('root')\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBy including the \u003ccode\u003eProvider\u003c/code\u003e, we'll be able to access our \u003cstrong\u003eRedux\u003c/strong\u003e store and/or dispatch actions from any component we want, regardless of where it is on the component tree.\u003c/p\u003e  \u003cp\u003eSo, to recap, just like we did previously, we call our \u003cstrong\u003ecreateStore()\u003c/strong\u003e method in \u003ccode\u003esrc/index.js\u003c/code\u003e. We pass our \u003cstrong\u003ecreateStore()\u003c/strong\u003e method a reducer, and then we pass our newly created store to our \u003cstrong\u003eApp\u003c/strong\u003e component as a prop. You can find the reducer in \u003ccode\u003e./src/reducers/shoppingListItemReducer.js\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/reducers/shoppingListItemReducer.js\u003cbr\u003e\u003cbr\u003eexport default function shoppingListItemReducer(\u003cbr\u003e  state = {\u003cbr\u003e    items: []\u003cbr\u003e  },\u003cbr\u003e  action\u003cbr\u003e) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        items: state.items.concat(state.items.length + 1)\u003cbr\u003e      }\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk so effectively, our reducer is just producing a counter. It adds a new item to the list each time it is called, and that item is one more than the last item.\u003c/p\u003e  \u003cp\u003eInstead of having all of our functions encapsulated in a closure within \u003ccode\u003eindex.js\u003c/code\u003e as we did while building our own redux set up, we've now separated out the reducer function, giving it a relevant name, \u003ccode\u003eshoppingListItemReducer\u003c/code\u003e, and let the Redux library take care of our \u003ccode\u003ecreateStore\u003c/code\u003e function. These two pieces are both imported into \u003ccode\u003esrc/index.js\u003c/code\u003e and used to create \u003ccode\u003estore\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThis \u003ccode\u003estore\u003c/code\u003e value is then passed in as a prop to \u003ccode\u003eProvider\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eTo gain access to the \u003ccode\u003estore\u003c/code\u003e somewhere in our app, we use a second function provided by \u003ccode\u003ereact-redux\u003c/code\u003e, \u003ccode\u003econnect\u003c/code\u003e. By modifying a component's export statement and included \u003ccode\u003econnect\u003c/code\u003e, we are able to take data from our \u003cstrong\u003eRedux\u003c/strong\u003e store and map them to a component's props. Similarly, we can \u003cem\u003ealso\u003c/em\u003e take actions, and by wrapping them in a dispatch and an anonymous function, be able pass them as props as well:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003eimport './App.css';\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e  handleOnClick = event =\u0026gt; {\u003cbr\u003e    this.props.increaseCount();\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={this.handleOnClick}\u0026gt;Click\u0026lt;/button\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;{this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    items: state.items\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    increaseCount: () =\u0026gt; dispatch({ type: 'INCREASE_COUNT' })\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect(\u003cbr\u003e  mapStateToProps,\u003cbr\u003e  mapDispatchToProps\u003cbr\u003e)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk, so this code places a button on the page with an \u003ccode\u003eonClick\u003c/code\u003e event listener pointed to \u003ccode\u003ethis.handleOnClick\u003c/code\u003e. When \u003ccode\u003ethis.handleOnClick\u003c/code\u003e is invoked, it calls a function, \u003ccode\u003ethis.props.increaseCount\u003c/code\u003e. Well.. \u003ccode\u003eincreaseCount\u003c/code\u003e is actually being provided by the new function below our App component: \u003ccode\u003emapDispatchToProps\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eMeanwhile, we've also got \u003ccode\u003ethis.props.items.length\u003c/code\u003e, which is \u003cem\u003ealso\u003c/em\u003e a prop created from our \u003cstrong\u003eRedux\u003c/strong\u003e store. As the store's \u003ccode\u003eitems\u003c/code\u003e property increases, App will display a different number!\u003c/p\u003e  \u003cp\u003eIf you boot up the app, you should see a button on the page, followed by a zero, using the core above for \u003ccode\u003eindex.js\u003c/code\u003e and \u003ccode\u003eApp.js\u003c/code\u003e, we can see \u003cstrong\u003eRedux\u003c/strong\u003e in action. Every button click dispatches an action to our store, causing it to change. Since data (\u003ccode\u003eitems\u003c/code\u003e) from that store is being accessed in App, App will re-render and display the updated counter.\u003c/p\u003e  \u003ch4\u003eAdd Logging to Our Reducer\u003c/h4\u003e  \u003cp\u003eOk, so getting our application to re-render takes a bit of work, and were going to go into greater depth in the next sections. In the meantime, let's get some feedback. First, let's log our action and the new state. So we'll change the reducer to the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/reducers/shoppingListItemReducer\u003cbr\u003e\u003cbr\u003eexport default function shoppingListItemReducer(\u003cbr\u003e  state = {\u003cbr\u003e    items: []\u003cbr\u003e  },\u003cbr\u003e  action\u003cbr\u003e) {\u003cbr\u003e  console.log(action);\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      console.log('Current state.items length %s', state.items.length);\u003cbr\u003e      console.log('Updating state.items length to %s', state.items.length + 1);\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        items: state.items.concat(state.items.length + 1)\u003cbr\u003e      };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      console.log('Initial state.items length: %s', state.items.length);\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk, so this may look like a lot, but really all were doing is adding some logging behavior. At the top of the function, we are logging the action. After the case statement, we are storing our state as current state first. Then we are logging the updating state value. Then under the default case statement, we just can log the previous state because this state is unchanged.\u003c/p\u003e  \u003cp\u003eNow, refresh your app, and give it a shot. You should see the correct action being dispatched, as well as an update to the state. While we aren't getting our state directly from the store, we know that we are dispatching actions. We know this because each time we click a button, we call store.dispatch({ type: 'INCREASE_COUNT' }) and somehow this is hitting our reducer. So things are happening.\u003c/p\u003e  \u003ch4\u003eRedux DevTools\u003c/h4\u003e  \u003cp\u003eThere is this amazing piece of software that allows us to nicely view the state of our store and each action that is dispatched. The software does a lot more than that. I'll let you read about it here: \u003ca href=\"https://github.com/zalmoxisus/redux-devtools-extension\"\u003eredux-devtools-extension\u003c/a\u003e. Ok, so let's get to incorporating this. In fact, every time we use the Redux library going forward, we should make sure we incorporate devtools. Otherwise, you are flying blind.\u003c/p\u003e  \u003cp\u003eFirst, just Google for Redux Devtools Chrome. There you will find the Chrome extension for Redux. Please download it, and refresh Chrome. You will know that you have installed the extension if you go to your developer console in Google Chrome (press command+shift+c to pull it up), and then at the top bar you will see a couple of arrows. Click those arrows, and if you see Redux as your dropdown, you properly installed the Chrome extension. Step one is done.\u003c/p\u003e  \u003cp\u003eSecond, we need to tell our application to communicate with this extension. Doing so is pretty easy. Now we change the arguments to our createStore method to the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport { createStore } from 'redux';\u003cbr\u003eimport { Provider } from 'react-redux';\u003cbr\u003eimport shoppingListItemReducer from './reducers/shoppingListItemReducer';\u003cbr\u003eimport App from './App';\u003cbr\u003eimport './index.css';\u003cbr\u003e\u003cbr\u003econst store = createStore(\u003cbr\u003e  shoppingListItemReducer,\u003cbr\u003e  window.__REDUX_DEVTOOLS_EXTENSION__ \u0026amp;\u0026amp; window.__REDUX_DEVTOOLS_EXTENSION__()\u003cbr\u003e); /* code change */\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store}\u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt;,\u003cbr\u003e  document.getElementById('root')\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk, notice that we are still passing through our reducer to the createStore method. The second argument is accessing our browser to find a method called \u003ccode\u003e__REDUX_DEVTOOLS_EXTENSION__\u003c/code\u003e. If that method is there, the method is executed. Now if you have your Chrome console opened, make sure the Redux Devtools Inspector is open (press command+shift+c, click on the arrows at the top right, and the dropdown for the extension). Now click on the tab that says state. You should see \u003ccode\u003e{ items: [] }\u003c/code\u003e. If you do, it means that your app is now communicating with the devtool. Click on the button in your application, to see if the state changes. Now for each time you click on it, you should see an action in the devtools that has the name of that action. If you are looking at the last state, you should see the changes in our state.\u003c/p\u003e  \u003cp\u003eWhew!\u003c/p\u003e  \u003ch3\u003eSummary\u003c/h3\u003e  \u003cp\u003eIn this lesson, we saw how to use the \u003cstrong\u003ecreateStore()\u003c/strong\u003e method. We saw that we can rely on the Redux library to provide this method, and that we still need to write our own reducer to tell the store what the new state will be given a particular action. We saw that when using the \u003cstrong\u003ecreateStore()\u003c/strong\u003e method, and passing through a reducer, we are able to change the state just as we did previously. We were able to see these changes by hooking our application up to a Chrome extension called Redux Devtools, and then providing the correct configuration.\u003c/p\u003e","exportId":"g520c968ac63384758aa448dc60945af8"},{"id":220901,"title":"Map State to Props","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"map-state-to-props-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/map-state-to-props-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-state-to-props-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-state-to-props-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eWhen we last left off, we successfully used our \u003cstrong\u003ecreateStore()\u003c/strong\u003e method, and integrated the method into our \u003cstrong\u003eReact\u003c/strong\u003e application to update our state. Unfortunately, our \u003cstrong\u003eReact\u003c/strong\u003e application did not re-render in response to changes in the state. In this lesson, we'll fix that.\u003c/p\u003e  \u003ch2\u003eUse the Provider component from React Redux\u003c/h2\u003e  \u003cp\u003eThe reason why the application did not re-render previously is because our \u003cstrong\u003eReact\u003c/strong\u003e and \u003cstrong\u003eRedux\u003c/strong\u003e libraries could not properly communicate to each other correctly to specify that a change in the store's state occurred. Luckily, we can use the \u003cstrong\u003eReact Redux\u003c/strong\u003e library to get React and Redux talking to one another. Run \u003ccode\u003enpm install react-redux --save\u003c/code\u003e to install it and add to our \u003ccode\u003epackage.json\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe \u003cstrong\u003eReact Redux\u003c/strong\u003e library gives access to a component called the \u003cstrong\u003eProvider\u003c/strong\u003e. The \u003cstrong\u003eProvider\u003c/strong\u003e is a component that comes from our \u003cstrong\u003eReact Redux\u003c/strong\u003e library. It wraps around our \u003cstrong\u003eApp\u003c/strong\u003e component. It does two things for us. The first is that it will alert our \u003cstrong\u003eRedux\u003c/strong\u003e app when there has been a change in state, and this will re-render our \u003cstrong\u003eReact\u003c/strong\u003e app. Let's give it a shot.\u003c/p\u003e  \u003cp\u003eLet's add the following code to our \u003ccode\u003esrc/index.js\u003c/code\u003e file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport { createStore } from 'redux';\u003cbr\u003eimport { Provider } from 'react-redux'; /* code change */\u003cbr\u003eimport shoppingListItemReducer from './reducers/shoppingListItemReducer';\u003cbr\u003eimport App from './App';\u003cbr\u003eimport './index.css';\u003cbr\u003e\u003cbr\u003econst store = createStore(\u003cbr\u003e  shoppingListItemReducer,\u003cbr\u003e  window.__REDUX_DEVTOOLS_EXTENSION__ \u0026amp;\u0026amp; window.__REDUX_DEVTOOLS_EXTENSION__()\u003cbr\u003e);\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store}\u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt;, /* code change */\u003cbr\u003e  document.getElementById('root')\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe just did a few things here:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWe imported \u003ccode\u003eProvider\u003c/code\u003e from React Redux\u003c/li\u003e \u003cli\u003eWe used \u003ccode\u003eProvider\u003c/code\u003e to wrap our React application\u003c/li\u003e \u003cli\u003eWe passed our store instance into \u003ccode\u003eProvider\u003c/code\u003e as a prop, making it available to all of our other components.\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eStep 2: Connecting The Container Component to Store\u003c/h3\u003e  \u003cp\u003eUsing the \u003ccode\u003e\u0026lt;Provider\u0026gt;\u003c/code\u003e component provided by the \u003cstrong\u003eReact Redux\u003c/strong\u003e library, we gave our components \u003cem\u003ethe ability to be connected to the store\u003c/em\u003e. However, we don't want every component re-rendering in response to every change in the state. So the \u003cstrong\u003eReact Redux\u003c/strong\u003e library requires us to specify which changes to the store's state should prompt a re-render of the application. We will specify this with the \u003cstrong\u003econnect()\u003c/strong\u003e function.\u003c/p\u003e  \u003ch4\u003eUsing the \u003ccode\u003econnect()\u003c/code\u003e function\u003c/h4\u003e  \u003cp\u003eFor a component to be connected to the store, i.e. to be able to get data from the store's internal state and to be told to re-render and get new data when that state changes, we will use the \u003cstrong\u003econnect()\u003c/strong\u003e function made available to us by React Redux.\u003c/p\u003e  \u003cp\u003eHere's how it works:\u003c/p\u003e  \u003cp\u003eOpen up \u003ccode\u003e./src/App.js\u003c/code\u003e and add the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux'; /* code change */\u003cbr\u003eimport './App.css';\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  handleOnClick() {\u003cbr\u003e    this.props.dispatch({\u003cbr\u003e      type: 'INCREASE_COUNT',\u003cbr\u003e    });\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={() =\u0026gt; this.handleOnClick()}\u0026gt;\u003cbr\u003e          Click\u003cbr\u003e        \u0026lt;/button\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;{this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e// start of code change\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return { items: state.items };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(App);\u003cbr\u003e// end of code change \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHoly cow those last few lines are confusing. Let's see if we can understand them. Remember, that we have two goals here: (a) to only re-render our \u003cstrong\u003eApp\u003c/strong\u003e component when specific changes to the state occur, and (b) to only provide the slice of the state that we need to our \u003cstrong\u003eApp\u003c/strong\u003e component. So we will need (1) a function that listens to every change in the store and then (2) filters out the changes relevant to a particular component to (3) provide to that component. That's exactly what's happening here. In the next paragraph, let's go through what is doing what.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport default connect(mapStateToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe connect function is taking care of task 1, it is synced up to our store, listening to each change in the state that occurs. When a change occurs, it calls a function \u003cem\u003ethat we write\u003c/em\u003e called \u003cstrong\u003emapStateToProps()\u003c/strong\u003e, and in \u003cstrong\u003emapStateToProps()\u003c/strong\u003e we specify exactly which slice of the state we want to provide to our component. Here, we want to provide \u003ccode\u003estate.items\u003c/code\u003e, and allow our component to have access to them through a prop called items. So that completes task 2. Then we have to say which component in our application we are providing this data to: you can see that we write \u003ccode\u003econnect(mapStateToProps)(App)\u003c/code\u003e to specify that we are connecting this state to the \u003cstrong\u003eApp\u003c/strong\u003e component.   Finally this entire \u003cstrong\u003econnect()\u003c/strong\u003e method returns a new component, it looks like the \u003cstrong\u003eApp\u003c/strong\u003e component we wrote, but now it also receives the correct data. This is the component we wish to export. So at the bottom of the file, you see:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return { items: state.items };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e We didn't have to import anything to define a \u003cstrong\u003emapStateToProps()\u003c/strong\u003e function! We wrote that function ourselves.\u003c/p\u003e  \u003cp\u003eFinally, in our \u003cstrong\u003emapStateToProps()\u003c/strong\u003e function we are saying that we are providing a new prop called items, so in our \u003cstrong\u003eApp\u003c/strong\u003e component, that is the prop we want to reference.\u003c/p\u003e  \u003cp\u003eOk, \u003cstrong\u003emapStateToProps()\u003c/strong\u003e and \u003cstrong\u003econnect()\u003c/strong\u003e is very confusing, so we'll go dig through it some more.  But for now, let's boot up our application, click the button, and see if we can finally get our application to render. Ok, it works - our component now properly re-renders!\u003c/p\u003e  \u003ch4\u003eA Note on \u003ccode\u003edispatch\u003c/code\u003e\n\u003c/h4\u003e  \u003cp\u003eIn the example code for App, you may have noticed something odd:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  handleOnClick() {\u003cbr\u003e    this.props.dispatch({\u003cbr\u003e      type: 'INCREASE_COUNT',\u003cbr\u003e    });\u003cbr\u003e  } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe have a prop named dispatch! But where did it come from if it's a prop? We  will go into greater detail later, but \u003ccode\u003edispatch\u003c/code\u003e is automatically provided by \u003ccode\u003econnect\u003c/code\u003e if it is missing a \u003cem\u003esecond\u003c/em\u003e argument. That second argument is reserved for \u003ccode\u003emapDispatchToProps\u003c/code\u003e, which allows us to customize how we send actions to our reducer. Without the second argument we will still be able to use \u003ccode\u003edispatch\u003c/code\u003e on any component wrapped with \u003ccode\u003econnect\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWe learned of two new pieces of \u003cstrong\u003eReact Redux\u003c/strong\u003e middleware: \u003cstrong\u003econnect()\u003c/strong\u003e and \u003cstrong\u003eProvider\u003c/strong\u003e.  The two pieces work hand in hand. \u003cstrong\u003eProvider\u003c/strong\u003e ensures that our entire React application can potentially access data from the store. Then \u003cstrong\u003econnect()\u003c/strong\u003e, allows us to specify which data we are listening to (through mapStateToProps), and which component we are providing the data. So when you see lines like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return { items: state.items };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econnect(mapStateToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat is saying connect the data in \u003cstrong\u003emapStateToProps()\u003c/strong\u003e (the items portion of the state) to the \u003cstrong\u003eApp\u003c/strong\u003e component. And the \u003cstrong\u003eApp\u003c/strong\u003e component can access that state with \u003ccode\u003ethis.props.items\u003c/code\u003e. Don't fret if you still feel hazy on \u003cstrong\u003econnect()\u003c/strong\u003e and \u003cstrong\u003emapStateToProps()\u003c/strong\u003e. This is a new middleware api that takes time to learn. We won't introduce any new material in the next code along, we'll just try to deepen our understanding of the material covered in this section. First, please take at least a 15 minute break before moving on.  \u003c/p\u003e  \u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/map-state-to-props-readme\"\u003eMap State To Props Readme\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","exportId":"g5fbcaf243f246fd358dab13164bedce4"},{"id":220907,"title":"Map State to Props Continued","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"review-map-state-to-props-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/review-map-state-to-props-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/review-map-state-to-props-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/review-map-state-to-props-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWhen we last left off, we successfully used our \u003cstrong\u003ecreateStore()\u003c/strong\u003e method, and were able have our application re-render through the rather confusing \u003ccode\u003econnect()\u003c/code\u003e method and \u003cstrong\u003eProvider\u003c/strong\u003e component. Whenever something in JavaScript is confusing, it is generally helpful to place some debuggers in the code and poke around. In this lesson we will guide you through that, and giving you a for your eyes only peak at the sordid underworld of \u003ccode\u003econnect()\u003c/code\u003e and \u003ccode\u003emapStateToProps()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eGet situated with the codebase changes\u003c/h2\u003e  \u003cp\u003eNow, we made some changes to the codebase, mainly to help this walkthrough a little easier to digest.  If you open up the file \u003ccode\u003eshoppingListItemReducer\u003c/code\u003e the first thing you'll see is that we added a new branch to our case statement. Our reducer now responds to the action types 'GET\u003cem\u003eCOUNT\u003c/em\u003eOF\u003cem\u003eITEMS', and 'GET\u003c/em\u003eCOUNT\u003cem\u003eOF\u003c/em\u003eUSERS'.  We did this to make our state slightly more complex. You'll notice at the top of our \u003cstrong\u003eshoppingListItemReducer\u003c/strong\u003e that we added a new key to our initial state called users, and populated it with an initial string to represent a user. You can also see that we removed the calls to console.log in the reducer, as we already have \u003cstrong\u003eRedux Devtools\u003c/strong\u003e setup.  \u003c/p\u003e  \u003cp\u003eThe next set of changes comes in the \u003ccode\u003e./src/App.js\u003c/code\u003e where you can see that we now have added a new button labeled click to change users. It does the same thing as our other button, but this time calls a callback which dispatches an action to change the part of the state related to users, instead of that related to items.\u003c/p\u003e  \u003cp\u003eAt the bottom of the file, inside the \u003ccode\u003emapStateToProps()\u003c/code\u003e function you can see we placed a debugger. Ok, now that you're a little better situated, let's start our exploration.\u003c/p\u003e  \u003ch2\u003eDeeper explanation of mapStateToProps\u003c/h2\u003e  \u003cp\u003eRemember that we encounter mapStateToProps when using the connect function.   In the current codebase, we have the code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003e\u003cbr\u003econnect(mapStateToProps)(App) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMeaning that we want to connect our \u003cstrong\u003eApp\u003c/strong\u003e component to a slice of the store's state specified in \u003ccode\u003emapStateToProps()\u003c/code\u003e. Currently our \u003ccode\u003emapStateToProps()\u003c/code\u003e looks like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003e\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  debugger;\u003cbr\u003e  return { items: state.items }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYes, we added a debugger to the body of our \u003ccode\u003emapStateToProps()\u003c/code\u003e function. So now boot up the app and click on the two buttons. You will see that clicking on the Items Count button renders an update to our \u003cstrong\u003eApp\u003c/strong\u003e Component, while clicking on the Users Count button does not. This makes sense: inside our App component all we do is reference the items count.  \u003c/p\u003e  \u003cp\u003eOk, now let's open up our console so that we hit our debugger. If you click on each of the buttons, you'll see that our debugger gets hit with each action that we dispatch. So even though we are not updating our \u003cstrong\u003eApp\u003c/strong\u003e component with information about users, the \u003ccode\u003emapStateToProps()\u003c/code\u003e function is executed with each change to the store's state. That's an important point. Say it with me one more time: the \u003ccode\u003emapStateToProps()\u003c/code\u003e method is executed with each change to the store's state.\u003c/p\u003e  \u003cp\u003eOk, now the next time we are in the debugger, let's notice that if you type the word state into the console while inside the \u003ccode\u003emapStateToProps()\u003c/code\u003e method, that it is the entire state of the store and not just that relevant to the component.\u003c/p\u003e  \u003cp\u003eNext question: what is so special about this \u003ccode\u003emapStateToProps()\u003c/code\u003e method that it is executed each time there is a change in state, and receives the entire state of the store as its argument? Let's change our code to the following in \u003ccode\u003esrc/App.js\u003c/code\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003e\u003cbr\u003econst vanilla = (milkshake) =\u0026gt; {\u003cbr\u003e  debugger;\u003cbr\u003e  return { items: milkshake.items }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(vanilla)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEssentially, all we did was rename our \u003ccode\u003emapStateToProps()\u003c/code\u003e function to \u003cstrong\u003evanilla()\u003c/strong\u003e, and rename the argument \u003ccode\u003estate\u003c/code\u003e to \u003ccode\u003emilkshake\u003c/code\u003e. Refresh the app, click the button, and notice that no functionality changes: the vanilla function now is hit every time there is a change in state, and milkshake now represents our store's state. So in other words, whatever function we pass to the \u003ccode\u003econnect()\u003c/code\u003e function will be called each time the state changes, and the first argument to that function, whatever its name, will be the state of the store.  \u003c/p\u003e  \u003cp\u003eWe can even shorten \u003ccode\u003emapStateToProps()\u003c/code\u003e down to an anonymous arrow function and pass it directly into \u003ccode\u003econnect()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport default connect( state =\u0026gt; ({ items: state.items }) )(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you've got a complicated amount of state you're mapping to props, stick with the original set up.\u003c/p\u003e  \u003ch2\u003eDeeper understanding of props\u003c/h2\u003e  \u003cp\u003eSo in the previous section we saw that whatever function we pass to \u003ccode\u003econnect()\u003c/code\u003e is executed each time there is a change in state, and that the argument that function is executed with is the entire state of the store. Changing the function back to \u003ccode\u003emapStateToProps()\u003c/code\u003e, let's pay special attention to the return value to that function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return { items: state.items }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis return value, is the value of the props that are added to the App component.  Let's see what happens if we change the key in the return value from items to orangePeel.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return { orangePeel: state.items }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's also place a debugger inside of our App component, as the first line underneath the render function, this way we can examine the props of our app component.  \u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003e\u003cbr\u003erender() {\u003cbr\u003e  debugger;\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; this.handleOnClickItems()}\u0026gt;\u003cbr\u003e        Click to change items count\u003cbr\u003e      \u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; this.handleOnClickUsers()}\u0026gt;\u003cbr\u003e        Click to change user count\u003cbr\u003e      \u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt; {this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you type in \u003ccode\u003ethis.props\u003c/code\u003e while inside the render function, you will see that we now have this.props.orangePeel, which returns our array of numbers. So by changing the key to the return value in \u003ccode\u003emapStateToProps()\u003c/code\u003e we changed the name of the prop in \u003cstrong\u003eApp\u003c/strong\u003e. As a second step, let's change the value to orangePeel as well:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003e\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return { orangePeel: ['a', 'b', 'c'] };\u003cbr\u003e}; ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eKeeping our debugger in our \u003cstrong\u003eApp\u003c/strong\u003e component's render function, you can see that \u003ccode\u003ethis.props.orangePeel\u003c/code\u003e now returns \u003ccode\u003e['a', 'b', 'c']\u003c/code\u003e. So now when we see the following code, perhaps we understand it a little better.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003e\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return { items: state.items }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe understand that the \u003ccode\u003econnect()\u003c/code\u003e function calls the \u003ccode\u003emapStateToProps()\u003c/code\u003e function each time there is a change in state, and that \u003ccode\u003emapStateToProps()\u003c/code\u003e receives \u003ccode\u003estate\u003c/code\u003e as its first argument.\u003c/p\u003e  \u003cp\u003eWe also know that \u003ccode\u003emapStateToProps()\u003c/code\u003e can happily ignore the store's state and return whatever it likes. We know that \u003ccode\u003econnect()\u003c/code\u003e takes whatever the return value is of the \u003ccode\u003emapStateToProps()\u003c/code\u003e function and passes it to the component that is in those last set of parentheses (in this case, App).\u003c/p\u003e  \u003cp\u003eBecause we are taking a part of the store's state and porting it to become props of the relevant component, we say that we are mapping it as props to the component, thus the name \u003cem\u003emapStateToProps\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003emapStateToProps, but Why?\u003c/h3\u003e  \u003cp\u003eBy now, you may be thinking, why would \u003cstrong\u003eRedux\u003c/strong\u003e choose this whole \u003ccode\u003emapStateToProps()\u003c/code\u003e technique. Didn't we live a simpler and happier life when we just passed our store down through each component. Well, maybe, but we do get some benefits by using this pattern. We'll talk more about the benefits of the \u003ccode\u003econnect()\u003c/code\u003e function later, but for now we can discuss the biggest benefit, separation of concerns.\u003c/p\u003e  \u003cp\u003eSeparation of concerns is the big win.  Take a look at the \u003cstrong\u003eApp\u003c/strong\u003e component again:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003eimport './App.css';\u003cbr\u003e\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  handleOnClickItems() {\u003cbr\u003e    this.props.dispatch({\u003cbr\u003e      type: 'GET_COUNT_OF_ITEMS',\u003cbr\u003e    });\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  handleOnClickUsers() {\u003cbr\u003e    this.props.dispatch({\u003cbr\u003e      type: 'GET_COUNT_OF_USERS',\u003cbr\u003e    })\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    debugger;\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e          \u0026lt;button onClick={() =\u0026gt; this.handleOnClickItems()}\u0026gt;\u003cbr\u003e            Click to change items count\u003cbr\u003e            \u0026lt;/button\u0026gt;\u003cbr\u003e          \u0026lt;button onClick={() =\u0026gt; this.handleOnClickUsers()}\u0026gt;\u003cbr\u003e            Click to change user count\u003cbr\u003e          \u0026lt;/button\u0026gt;\u003cbr\u003e          \u0026lt;p\u0026gt; {this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  // debugger;\u003cbr\u003e  return { items: state.items }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(App);\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou will notice that if it wasn't for the dispatch method (and in a later lesson we will remove that as well), our component would have no knowledge of our store, and thus no knowledge of anything related to \u003cstrong\u003eRedux\u003c/strong\u003e. This means that if someone wanted to take the component and use a different backend, like say \u003cstrong\u003eFlux\u003c/strong\u003e, it could. It also means that because all of our \u003cstrong\u003eRedux\u003c/strong\u003e is separated, if we wanted to add in changes to our application to be mobile by using \u003cstrong\u003eReact Native\u003c/strong\u003e. Then our \u003cstrong\u003eRedux\u003c/strong\u003e logic would largely stay the same. So with this pattern, both the view and its state management system are properly separated, and only connected by that \u003ccode\u003econnect()\u003c/code\u003e function.  \u003c/p\u003e  \u003ch3\u003eSummary\u003c/h3\u003e  \u003cp\u003eIn this lesson we saw that the \u003ccode\u003econnect()\u003c/code\u003e function is used for us to connect our \u003cstrong\u003eRedux\u003c/strong\u003e part of the application to the \u003cstrong\u003eReact\u003c/strong\u003e part of the application (we'll see even more of this later). We also see that whatever function we pass as the first argument to that \u003ccode\u003econnect()\u003c/code\u003e function is called each time there is a change of state, and has access to the entire store's state. The \u003ccode\u003econnect()\u003c/code\u003e function then takes the return value from the \u003ccode\u003emapStateToProps()\u003c/code\u003e function and adds that return value to the props of the component that is passed through in the last parentheses. We call that component a connected component, because that component is connected to the store.  \u003c/p\u003e","exportId":"g2acafb376b69fe9b565c7835714597e7"},{"id":220911,"title":"Mapping State to Props Using React and Redux","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"map-state-to-props-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/map-state-to-props-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-state-to-props-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-state-to-props-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eUse the \u003cstrong\u003eReact Redux\u003c/strong\u003e library to connect the store to the \u003cstrong\u003eReact\u003c/strong\u003e application.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eUtilize the \u003ccode\u003e\u0026lt;Provider /\u0026gt;\u003c/code\u003e component, the \u003ccode\u003econnect\u003c/code\u003e function and \u003ccode\u003emapStateToProps\u003c/code\u003e to access \u003cstrong\u003eRedux\u003c/strong\u003e store content.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lesson, we want to explore how \u003ccode\u003emapStateToProps\u003c/code\u003e is used to connect regular React components with the \u003cstrong\u003eRedux\u003c/strong\u003e store. This is also a good opportunity to review the steps for using the \u003ccode\u003eredux\u003c/code\u003e and \u003ccode\u003ereact-redux\u003c/code\u003e packages in your app.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eSome files are provided, including \u003ccode\u003eUserInput\u003c/code\u003e and the reducer, \u003ccode\u003emanageUsers\u003c/code\u003e, but the \u003cstrong\u003eRedux\u003c/strong\u003e store isn't fully hooked up yet.\u003c/p\u003e  \u003ch4\u003eConnecting to Redux\u003c/h4\u003e  \u003cp\u003eIn \u003ccode\u003esrc/index.js\u003c/code\u003e, use the \u003ccode\u003ecreateStore\u003c/code\u003e method from \u003ccode\u003eredux\u003c/code\u003e, passing in the  provided reducer, \u003ccode\u003emanageUsers\u003c/code\u003e, to create a \u003ccode\u003estore\u003c/code\u003e. Use \u003ccode\u003eProvider\u003c/code\u003e from  \u003ccode\u003ereact-redux\u003c/code\u003e to wrap \u003ccode\u003e\u0026lt;App /\u0026gt;\u003c/code\u003e, passing \u003ccode\u003estore\u003c/code\u003e as a prop to the \u003ccode\u003eProvider\u003c/code\u003e.  This will give your components access to the store.\u003c/p\u003e  \u003ch4\u003eTest by Dispatching an Action\u003c/h4\u003e  \u003cp\u003eRun \u003ccode\u003enpm start\u003c/code\u003e and open up your browser's dev console. If everything is connected correctly in \u003ccode\u003eindex.js\u003c/code\u003e, a form should appear in the browser. Submitting something using the form will cause a \u003ccode\u003econsole.log\u003c/code\u003e to fire in our reducer, indicating that the values have been added to our store.\u003c/p\u003e  \u003cp\u003eIn \u003ccode\u003eUserInput.js\u003c/code\u003e, we can see the code that fires when we press the submit button:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e...\u003cbr\u003e\u003cbr\u003ehandleOnSubmit = (event) =\u0026gt; {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  this.props.dispatch({type: 'ADD_USER', user: this.state})\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003erender() {\u003cbr\u003e  return(\u003cbr\u003e    \u0026lt;form onSubmit={this.handleOnSubmit}\u0026gt;\u003cbr\u003e      ...\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  )\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can see that, \u003cem\u003eon submit\u003c/em\u003e, \u003ccode\u003ehandleOnSubmit()\u003c/code\u003e is called. \u003ccode\u003eevent.preventDefault()\u003c/code\u003e is called to stop the page from refreshing, then \u003ccode\u003ethis.props.dispatch()\u003c/code\u003e is called with a custom action, \u003ccode\u003e{type: 'ADD_USER', user: this.state}\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport default connect()(UserInput); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWrapping a component in \u003ccode\u003econnect\u003c/code\u003e as we see above will, by default, pass \u003cem\u003eone\u003c/em\u003e function to props: \u003ccode\u003edispatch()\u003c/code\u003e. This makes it possible for us to dispatch custom actions, as we see here in \u003ccode\u003ehandleOnSubmit()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe will go into greater detail on how we can customize our dispatches using \u003ccode\u003econnect\u003c/code\u003e, but using \u003ccode\u003ethis.props.dispatch()\u003c/code\u003e like this is a handy way to allow any component to interact with the store.\u003c/p\u003e  \u003ch4\u003eMapping State\u003c/h4\u003e  \u003cp\u003eNow that we've got a working store, we want to get access to it and display the contents of our store's state.\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eConnect the Users component similar to how it is connected in UserInput.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eWrite a function in \u003ccode\u003eUsers.js\u003c/code\u003e, but outside of the Users class, called \u003ccode\u003emapStateToProps\u003c/code\u003e. \u003ccode\u003emapStateToProps\u003c/code\u003e accepts one argument, \u003ccode\u003estate\u003c/code\u003e, the current version of your store's state. Use \u003ccode\u003estate\u003c/code\u003e to access the array of \u003ccode\u003eusers\u003c/code\u003e. Your \u003ccode\u003emapStateToProps\u003c/code\u003e function should return an object with keys. Each key will become a prop in your component, allowing you to assign values based on the provided \u003ccode\u003estate\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eThe Users component should display the username of a user submitted to the store. To pass the final test, it should also display a total count of current users. Try to use \u003ccode\u003emapStateToProps\u003c/code\u003e to solve both, returning two keys, one for \u003ccode\u003eusers\u003c/code\u003e and one for the \u003ccode\u003euserCount\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWith all tests passing, you should have a working form that adds and successfully displays usernames, as well as a total count of those users. While these are small bits of data, we've got a fully integrated React/Redux application, ready to be expanded upon!\u003c/p\u003e","exportId":"g33e59328747e2d1ef2a3927098470ee8"},{"id":220917,"title":"Review and Dive into Actions","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-action-creators\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/redux-action-creators/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-action-creators\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-action-creators/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003cp\u003eIn this lesson, we will discuss: * The properties of an action * How to use action creators to create an action.\u003c/p\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eActions are just \u003cstrong\u003ePlain Old JavaScript Objects\u003c/strong\u003e (POJOs), but that doesn't mean we should ignore them. In this section, we'll discuss the properties of actions, and how to use functions to create actions.\u003c/p\u003e\n\u003ch2\u003ePurpose of Actions\u003c/h2\u003e\n\u003cp\u003eSo as you know, we've been dispatching actions to our store to indicate the changes we would make to our state. In this way, actions almost feel like the request object or the parameters hash that you would see in a web application like Ruby on Rails.\u003c/p\u003e\n\u003cp\u003eIn \u003cstrong\u003eRails\u003c/strong\u003e, a user clicking on a link kicks off a request, and that request is ultimately passed to the controller, which is responsible for changing the database. In \u003cstrong\u003eRedux\u003c/strong\u003e, a user may click on a button which dispatches an action, and the reducer would take information from that action to change the state. You saw in the last section that simply by placing a \u003cstrong\u003econsole.log\u003c/strong\u003e in our reducer, we could see a history of every action that was passed to the reducer, making our debugging job easier.\u003c/p\u003e\n\u003ch2\u003eStructuring Actions\u003c/h2\u003e\n\u003cp\u003eNow an action is simply a POJO that has a property of type. The reducer uses this type property to see what it should do. Here is an example of a valid action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst increaseCount = { type: 'INCREASE_COUNT' }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemember that the store has a dispatch method which we can now use to dispatch this action for it to be handled by the reducer.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estore.dispatch(increaseCount)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe dispatch method passes the action to the reducer, which then runs its switch statement to decide what to do.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cbr\u003efunction dispatch(action) {\u003cbr\u003e  reducer(state, action)\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction reducer(state = {\u003cbr\u003e  count: 0,\u003cbr\u003e}, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eAction Creators\u003c/h2\u003e\n\u003cp\u003eOk, now we know that our actions are simply a POJO with at least one property called type. An example of using our actions is \u003ccode\u003estore.dispatch({ type:\n'INCREASE_COUNT' })\u003c/code\u003e. Well what if we do the following.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cbr\u003efunction increaseCount() {\u003cbr\u003e  return { type: 'INCREASE_COUNT' };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003estore.dispatch(increaseCount());\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk, so in the above lines of code we define a function called \u003ccode\u003eincreaseCount()\u003c/code\u003e whose job it is to return an action. Then we execute the \u003ccode\u003eincreaseCount()\u003c/code\u003e function, which returns that action, and we dispatch that action to the store. If you think that this is equivalent to \u003ccode\u003estore.dispatch({\ntype: 'INCREASE_COUNT' })\u003c/code\u003e, you are right.\u003c/p\u003e\n\u003cp\u003eWe prefer wrapping our actions in a function, because oftentimes our actions have some parts that will need to change, and a function comes in handy. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction addTodo(todo) {\u003cbr\u003e  return {\u003cbr\u003e    type: 'ADD_TODO',\u003cbr\u003e    todo: todo\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo in the above function, we can imagine generating actions with different payload properties depending on what we pass to the addTodo function.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eaddTodo('buy groceries');\u003cbr\u003e// -\u0026gt; { type: 'ADD_TODO', todo: 'buy groceries' }\u003cbr\u003e\u003cbr\u003eaddTodo('watch netflix');\u003cbr\u003e// -\u0026gt; { type: 'ADD_TODO', todo: 'watch netflix' }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo essentially by wrapping our action in a function, we are able to easily keep some of the action properties the same, like type, while changing others, like todo. We would dispatch the action in the following way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estore.dispatch(addTodo('buy groceries'));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat would return the action \u003ccode\u003e{ type: 'ADD_TODO', todo: 'buy groceries' }\u003c/code\u003e, which we then send to the dispatch function.\u003c/p\u003e","exportId":"review-and-dive-into-actions"},{"id":220922,"title":"Mapping Dispatch to Props","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"map-dispatch-to-props-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/map-dispatch-to-props-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-dispatch-to-props-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-dispatch-to-props-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eWrite functions that connect Redux actions to component events\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eIntroduction\u003c/h3\u003e  \u003cp\u003eIn the last lessons, we learned that \u003ccode\u003emapStateToProps()\u003c/code\u003e separates concerns. We no longer have to reference the store inside our component when retrieving the state. We are moving towards having state management in one part of our code, and display logic in a different part.\u003c/p\u003e  \u003cp\u003eIn other words, we're moving knowledge of \u003cem\u003eRedux\u003c/em\u003e outside our components.\u003c/p\u003e  \u003cp\u003eWhat prevented us from fully removing a reference to \u003cstrong\u003eRedux\u003c/strong\u003e inside our components was that we did not know how to dispatch actions without calling \u003ccode\u003estore.dispatch()\u003c/code\u003e from our component.  Well, in this lesson we'll learn how to do just that. We'll remove knowledge of the store from our components by using a function similar to \u003ccode\u003emapStateToProps()\u003c/code\u003e, which is called \u003ccode\u003emapDispatchToProps()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eIdentifying the Problem\u003c/h2\u003e  \u003cp\u003eTo begin, take a look at the starting code provided in \u003ccode\u003esrc/App.js\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport './App.css';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003eimport { addItem } from  './actions/items';\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  handleOnClick() {\u003cbr\u003e    this.props.store.dispatch(addItem());\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={(event) =\u0026gt; this.handleOnClick(event)}\u0026gt;\u003cbr\u003e          Click\u003cbr\u003e          \u0026lt;/button\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;{this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    items: state.items\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can see that \u003ccode\u003emapStateToProps()\u003c/code\u003e is already implemented and is making \u003ccode\u003estate.items\u003c/code\u003e available to \u003ccode\u003eApp\u003c/code\u003e as \u003ccode\u003ethis.props.items\u003c/code\u003e. We also see that the button in \u003ccode\u003erender()\u003c/code\u003e calls \u003ccode\u003ehandleOnClick()\u003c/code\u003e when clicked. The \u003ccode\u003ehandleOnClick()\u003c/code\u003e does one thing - it dispatches an action  to the \u003cem\u003estore\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eIn the earlier \u003ccode\u003emapStateToProps()\u003c/code\u003e Readme, we changed our code such that we no longer reference the store to get an updated state of the items, but here we still reference the store in \u003ccode\u003ehandleOnClick()\u003c/code\u003e to dispatch an action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/app.js ...\u003cbr\u003e\u003cbr\u003ehandleOnClick(){\u003cbr\u003e  this.props.store.dispatch(addItem())\u003cbr\u003e}\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOkay, so this may seem small, but it introduces our old problem. Our component is no longer indifferent about its state management system. Instead, this line of code makes the component reliant on \u003cstrong\u003eRedux\u003c/strong\u003e.  \u003c/p\u003e  \u003cp\u003eWell we can fix this problem with our \u003ccode\u003econnect()\u003c/code\u003e function. Just like we can write code like \u003ccode\u003econnect(mapStateToProps)(App)\u003c/code\u003e to add new props to our \u003cstrong\u003eApp\u003c/strong\u003e component, we can pass \u003ccode\u003econnect()\u003c/code\u003e a second argument, and add our \u003cem\u003eaction creator\u003c/em\u003e as props. Then we can reference this action creator as a prop to call it from our component. We'll spend the rest of this lesson unpacking the previous sentence. Okay, let's see how this works.\u003c/p\u003e  \u003ch4\u003eUsing \u003ccode\u003emapDispatchToProps\u003c/code\u003e\n\u003c/h4\u003e  \u003cp\u003eTo quickly review: The first argument passed into \u003ccode\u003econnect()\u003c/code\u003e is a function. That function is written to accept the Redux store's state as an argument and returns an object created using all or some of that state. Key/value pairs in this returned object will become values we can access in the component we've wrapped with \u003ccode\u003econnect()\u003c/code\u003e. The below example, for instance, would make the entire state available as a prop:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return state\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe call this function \u003ccode\u003emapStateToProps\u003c/code\u003e because that is what it does. This function is passed in as the \u003cem\u003efirst\u003c/em\u003e argument to \u003ccode\u003econnect()\u003c/code\u003e. When \u003ccode\u003econnect()\u003c/code\u003e executes, it calls the function passed in as its first argument, passing in the current state to the function.\u003c/p\u003e  \u003cp\u003eJust like the first argument, \u003ccode\u003econnect()\u003c/code\u003e accepts a \u003cstrong\u003efunction\u003c/strong\u003e for the \u003cem\u003esecond\u003c/em\u003e argument. This time, again, when \u003ccode\u003econnect()\u003c/code\u003e executes, it calls the second function passed in. However, instead of passing \u003cem\u003estate\u003c/em\u003e in, it passes in the \u003cem\u003edispatch\u003c/em\u003e function. This means we can write a function assuming we have access to \u003ccode\u003edispatch()\u003c/code\u003e. We call it \u003ccode\u003emapDispatchToProps\u003c/code\u003e because that is what it does. Updating our \u003ccode\u003e./src/App.js\u003c/code\u003e file, it looks like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/App.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport './App.css';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003eimport { addItem } from  './actions/items';\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  handleOnClick = event =\u0026gt; {\u003cbr\u003e    this.props.addItem() // Code change: this.props.store.dispatch is no longer being called\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={this.handleOnClick}\u0026gt;\u003cbr\u003e          Click\u003cbr\u003e          \u0026lt;/button\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;{this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    items: state.items\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e// Code change: this new function takes in dispatch as an argument\u003cbr\u003e// It then returns an object that contains a function as a value!\u003cbr\u003e// Notice above in handleOnClick() that this function, addItem(),\u003cbr\u003e// is what is called, NOT the addItem action creator itself.\u003cbr\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    addItem: () =\u0026gt; {\u003cbr\u003e      dispatch(addItem())\u003cbr\u003e    }\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps, mapDispatchToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOkay, so let's see what adding our \u003ccode\u003emapDispatchToProps()\u003c/code\u003e function, and passing it through as a second argument accomplished. We'll place in another debugger in our component, right at the beginning of \u003ccode\u003erender()\u003c/code\u003e, just before the return statement. \u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/App.js ...\u003cbr\u003erender() {\u003cbr\u003e    debugger\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={this.handleOnClick}\u0026gt;\u003cbr\u003e          Click\u003cbr\u003e          \u0026lt;/button\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;{this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  } ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, boot up the app, open up your console and when you hit the debugger statement, type in \u003ccode\u003ethis.props.addItem\u003c/code\u003e. You'll see that it returns a function with dispatch inside. So, just like with \u003ccode\u003emapStateToProps()\u003c/code\u003e, we added a prop that pointed to a value, here we add a prop \u003ccode\u003eaddItem\u003c/code\u003e that points to the value, a function. The \u003ccode\u003edispatch\u003c/code\u003e function is available as an argument to \u003ccode\u003emapDispatchToProps\u003c/code\u003e. By defining the function \u003ccode\u003eaddItem\u003c/code\u003e inside \u003ccode\u003emapDispatchToProps\u003c/code\u003e, we're able to include \u003ccode\u003edispatch\u003c/code\u003e in the definition; we've bundled everything we need into a single prop value.\u003c/p\u003e  \u003cp\u003eWith \u003ccode\u003edispatch\u003c/code\u003e integrated into \u003ccode\u003ethis.props.addItem\u003c/code\u003e, we can change our code such that when the \u003ccode\u003ehandleOnClick()\u003c/code\u003e function gets called, we execute our action creator by referencing it as a prop:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003ehandleOnClick = event =\u0026gt; {\u003cbr\u003e  this.props.addItem()\u003cbr\u003e}\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis code calls the \u003ccode\u003ehandleOnClick()\u003c/code\u003e function after the button is clicked. The \u003ccode\u003ehandleOnClick()\u003c/code\u003e references and then executes the \u003ccode\u003eaddItem()\u003c/code\u003e function by calling \u003ccode\u003ethis.props.addItem()\u003c/code\u003e.  \u003c/p\u003e  \u003ch2\u003eAlternative Method\u003c/h2\u003e  \u003cp\u003eThere is an even simpler way to approach bundling our actions and \u003ccode\u003edispatch\u003c/code\u003e into props. The second argument of \u003ccode\u003econnect\u003c/code\u003e will accept a function (as we've seen) \u003cem\u003eor\u003c/em\u003e an object. If we pass in a function, \u003ccode\u003emapDispatchToProps()\u003c/code\u003e, we must incorporate \u003ccode\u003edispatch\u003c/code\u003e as with the previous example. If we pass in an object, \u003ccode\u003econnect\u003c/code\u003e handles this step for us! The object just needs to contain key/value pairs for each action creator we want to become props. In our example, we've using the \u003ccode\u003eaddItem\u003c/code\u003e action creator, so the object would look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  addItem: addItem\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs of JavaScript ES6, when we have an object with a key and value with the same name, we can use the shorthand syntax and write:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  addItem\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is all we need to pass in as a second argument for \u003ccode\u003econnect()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eApp\u003c/code\u003e then changes to look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { Component } from 'react';\u003cbr\u003eimport './App.css';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003eimport { addItem } from  './actions/items';\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  handleOnClick = event =\u0026gt; {\u003cbr\u003e    this.props.addItem()\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    debugger\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={this.handleOnClick}\u0026gt;\u003cbr\u003e          Click\u003cbr\u003e          \u0026lt;/button\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;{this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    items: state.items\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps, { addItem })(App); // Code change: no mapDispatchToProps function required! \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eAside\u003c/strong\u003e: We \u003cem\u003ecould\u003c/em\u003e go further and get rid of \u003ccode\u003emapStateToProps()\u003c/code\u003e as well. We still need to pass in a function as the first argument, but it can be an anonymous arrow function that handles everything in one line:\u003c/p\u003e \u003c/blockquote\u003e \u003cpre\u003e\u003ccode\u003eexport default connect(state =\u0026gt; ({ items: state.items }), { addItem })(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is equivalent to writing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    items: state.items\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    addItem: () =\u0026gt; { dispatch(addItem()) }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps, mapDispatchToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDefault Dispatch Behavior\u003c/h2\u003e  \u003cp\u003eIn addition to this, as per Dan Abramov, the creator of \u003cstrong\u003eRedux\u003c/strong\u003e:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eBy default mapDispatchToProps is just dispatch =\u0026gt; ({ dispatch }). So if you don't specify the second argument to connect(), you'll get dispatch injected as a prop in your component.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eThis means that if we were to simply write:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport default connect(state =\u0026gt; ({ items: state.items }))(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e...we would \u003cem\u003estill\u003c/em\u003e have \u003ccode\u003ethis.props.dispatch()\u003c/code\u003e available to us in App. If you would rather write \u003ccode\u003ethis.props.dispatch({ type: 'INCREASE_COUNT' })\u003c/code\u003e in App, or pass \u003ccode\u003edispatch\u003c/code\u003e down to children, you can!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://stackoverflow.com/questions/34458261/how-to-get-simple-dispatch-from-this-props-using-connect-w-redux\"\u003eDan Abramov Stack Overflow Response about mapDispatchToProps\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eIn this lesson, we saw that we can remove all references to our store from our component via the \u003ccode\u003emapDispatchToProps()\u003c/code\u003e function. We saw that \u003ccode\u003emapDispatchToProps()\u003c/code\u003e allows us to bring in actions, combine them with \u003ccode\u003edispatch\u003c/code\u003e and connect events on our page to actions in our store.\u003c/p\u003e","exportId":"gbd9bdcb69f4e2dad0b39443b1a8a7697"},{"id":220926,"title":"Map Dispatch to Props Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"map-dispatch-to-props-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/map-dispatch-to-props-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-dispatch-to-props-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-dispatch-to-props-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cp\u003eUse the \u003cstrong\u003eReact Redux\u003c/strong\u003e library to connect the store to the \u003cstrong\u003eReact\u003c/strong\u003e\napplication.   Utilize the \u003cstrong\u003eProvider\u003c/strong\u003e component, and the \u003cstrong\u003econnect()\u003c/strong\u003e\nfunction in the process. Make sure to also implement \u003cstrong\u003emapDispatchToProps()\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this application we will be building an application to keep track of our\nfavorite restaurants. We will keep our \u003cstrong\u003eReact\u003c/strong\u003e application separated from our\n\u003cstrong\u003eRedux\u003c/strong\u003e application by using the \u003cstrong\u003eProvider\u003c/strong\u003e component and the \u003cstrong\u003econnect()\u003c/strong\u003e\nfunction. We will not include a reference to the store in any component except\nfor the \u003cstrong\u003eProvider\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eRedux is already set up through \u003ccode\u003eindex.js\u003c/code\u003e and the reducer \u003ccode\u003emanageRestaurants\u003c/code\u003e.\nWrite a \u003cstrong\u003emapDispatchToProps()\u003c/strong\u003e function that allows us to pass dispatched\nactions as props.\u003c/p\u003e\n\n\u003cp\u003eRemember that \u003cstrong\u003emapDispatchToProps()\u003c/strong\u003e is provided \u003ccode\u003edispatch\u003c/code\u003e as an argument\n(passed in by \u003ccode\u003econnect\u003c/code\u003e when called), so we can wrap an imported action with\n\u003ccode\u003edispatch\u003c/code\u003e within \u003cstrong\u003emapDispatchToProps()\u003c/strong\u003e. Don't forget that the action\nprovided in \u003ccode\u003eactions/restaurants.js\u003c/code\u003e is a function that \u003cem\u003emust be called\u003c/em\u003e in\norder to return the action object.\u003c/p\u003e","exportId":"gf19dc7fe25c5d7d3eecd2b4688a3a574"},{"id":220932,"title":"Combining Reducers","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"combine-reducers\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/combine-reducers/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/combine-reducers\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/combine-reducers/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eWrite action creators and reducers to modify application state\u003c/li\u003e\n\u003cli\u003eBuild \u003cstrong\u003eRedux's combineReducers()\u003c/strong\u003e function\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003ecombineReducers()\u003c/code\u003e function to delegate different pieces of state to each reducer\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far we have been using a single reducer to return a new state when an action\nis dispatched. This works great for a small application where we only need our\nreducer to manage the state of one resource. However, as you will see, when\nworking with multiple resources, placing all of this logic in one reducer\nfunction can quickly become unwieldy.\u003c/p\u003e\n\n\u003cp\u003eEnter \u003ccode\u003ecombineReducers()\u003c/code\u003e to save the day! In this lab, we'll see how\n\u003cstrong\u003eRedux\u003c/strong\u003e's \u003ccode\u003ecombineReducers()\u003c/code\u003e function lets us delegate different pieces of\nstate to separate reducer functions.\u003c/p\u003e\n\n\u003cp\u003eWe'll do this in the context of a book application that we'll use to keep track\nof programming books that we've read.\u003c/p\u003e\n\n\u003cp\u003eWe want our app to do two things:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eKeep track of all the books we've read: title, author, description.\u003c/li\u003e\n\u003cli\u003eKeep track of the authors who wrote these books.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4\u003eDetermine Application State Structure\u003c/h4\u003e\n\n\u003cp\u003eOur app will need a state object that stores two types of information:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAll our books, in an array\u003c/li\u003e\n\u003cli\u003eOur authors, also in an array\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eEach of these types of information--all our books, and the authors--should be\nrepresented on our store's state object. We want to think of our store's state\nstructure as a database. We will represent this as a belongs to/has many\nrelationship, in that a book belongs to an author and an author has many books.\nSo this means each author would have its own id, and each book would have an\nauthorId as a foreign key.\u003c/p\u003e\n\n\u003cp\u003eWith that, we can set the application state as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  authors: //array of authors\u003cbr\u003e  books: // array of books,\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo our state object will have two top-level keys, each pointing to an array. For\nnow, let's write a single reducer to manage both of these resources.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexport default function bookApp(\u003cbr\u003e  state = {\u003cbr\u003e    authors: [],\u003cbr\u003e    books: []\u003cbr\u003e  },\u003cbr\u003e  action\u003cbr\u003e) {\u003cbr\u003e  let idx;\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case \"ADD_BOOK\":\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        authors: [...state.authors],\u003cbr\u003e        books: [...state.books, action.book]\u003cbr\u003e      };\u003cbr\u003e\u003cbr\u003e    case \"REMOVE_BOOK\":\u003cbr\u003e      idx = state.books.findIndex(book =\u0026gt; book.id === action.id);\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        authors: [...state.authors],\u003cbr\u003e        books: [...state.books.slice(0, idx), ...state.books.slice(idx + 1)]\u003cbr\u003e      };\u003cbr\u003e\u003cbr\u003e    case \"ADD_AUTHOR\":\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        books: [...state.books],\u003cbr\u003e        authors: [...state.authors, action.author]\u003cbr\u003e      };\u003cbr\u003e\u003cbr\u003e    case \"REMOVE_AUTHOR\":\u003cbr\u003e      idx = state.authors.findIndex(author =\u0026gt; author.id === action.id);\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        books: [...state.books],\u003cbr\u003e        authors: [...state.authors.slice(0, idx), ...state.authors.slice(idx + 1)]\u003cbr\u003e      };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is the current set up in \u003ccode\u003esrc/reducers/manageAuthorsAndBooks.js\u003c/code\u003e, and it\nworks. You can see, however, by working with just two resources, the size of our\nreducer increased significantly. Moreover, by placing each resource in the same\nreducer, we are coupling these resources together, where we would prefer to\nmaintain their separation. By creating separate reducers for each resource in an\napplication, we can keep our code organized as our applications get more\ncomplicated.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e You may have noticed something in the reducer example: when we\nupdate one part of \u003ccode\u003estate\u003c/code\u003e, we're still using the spread operator \u003cem\u003eon other\nparts\u003c/em\u003e. For example, in the \u003ccode\u003e\"ADD_AUTHOR\"\u003c/code\u003e case, we add \u003ccode\u003eaction.author\u003c/code\u003e to the\n\u003ccode\u003eauthors\u003c/code\u003e array, but \u003cstrong\u003ewe also use the spread operator to create a new \u003ccode\u003ebook\u003c/code\u003e\narray\u003c/strong\u003e. This is because both \u003ccode\u003eObject.assign()\u003c/code\u003e and the spread operator only\ncreate shallow copies of objects. If we leave out \u003ccode\u003ebooks: [...state.books]\u003c/code\u003e,\nand just write the following:\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003ereturn {\u003cbr\u003e        ...state,\u003cbr\u003e        authors: [...state.authors, action.author]\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA new reference to the old \u003ccode\u003estate.books\u003c/code\u003e array will be used, \u003cem\u003enot a new copy of\nthe array\u003c/em\u003e. This is subtle, and can easily be overlooked, but by referencing the\nold state, we are no longer maintaining an immutable state. \u003ca href=\"https://redux.js.org/faq/immutable-data#what-are-the-benefits-of-immutability\"\u003eThe official redux\ndocumentation\u003c/a\u003e goes into further detail on the benefits of immutability, \u003ca href=\"https://redux.js.org/faq/immutable-data#accidental-object-mutation\"\u003ediscusses\nthis exact issue\u003c/a\u003e, and \u003ca href=\"https://redux.js.org/recipes/structuring-reducers/immutable-update-patterns\"\u003eprovides further examples\u003c/a\u003e of how to properly use the\nspread operator to deeply copy nested data.\u003c/p\u003e\n\n\u003ch2\u003eRefactor by using combineReducers\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecombineReducers()\u003c/code\u003e function allows us to write two or more separate\nreducers, then pass each reducer to the \u003ccode\u003ecombineReducers()\u003c/code\u003e function to produce\nthe reducer we wrote above. Then we pass that combined reducer to the store in\n\u003ccode\u003esrc/index.js\u003c/code\u003e. Let's write some code, and then we'll walk through it below.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport { combineReducers } from \"redux\";\u003cbr\u003e\u003cbr\u003econst rootReducer = combineReducers({\u003cbr\u003e  authors: authorsReducer,\u003cbr\u003e  books: booksReducer\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003eexport default rootReducer;\u003cbr\u003e\u003cbr\u003efunction booksReducer(state = [], action) {\u003cbr\u003e  let idx;\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case \"ADD_BOOK\":\u003cbr\u003e      return [...state, action.book];\u003cbr\u003e\u003cbr\u003e    case \"REMOVE_BOOK\":\u003cbr\u003e      idx = state.findIndex(book =\u0026gt; book.id  === action.id)\u003cbr\u003e      return [...state.slice(0, idx), ...state.slice(idx + 1)];\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction authorsReducer(state = [], action) {\u003cbr\u003e  let idx;\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case \"ADD_AUTHOR\":\u003cbr\u003e      return [...state, action.author];\u003cbr\u003e\u003cbr\u003e    case \"REMOVE_AUTHOR\":\u003cbr\u003e      idx = state.findIndex(author =\u0026gt; author.id  === action.id)\u003cbr\u003e      return [...state.slice(0, idx), ...state.slice(idx + 1)];\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere's a lot of code there, so let's unpack it a bit. At the very top you see\nthe following line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport { combineReducers } from \"redux\";\u003cbr\u003e\u003cbr\u003econst rootReducer = combineReducers({\u003cbr\u003e  authors: authorsReducer,\u003cbr\u003e  books: booksReducer\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003eexport default rootReducer;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThrough \u003ccode\u003ecombineReducer\u003c/code\u003e, we're telling \u003cstrong\u003eRedux\u003c/strong\u003e to produce a reducer which\nwill return a state that has both a key of books with a value equal to the\nreturn value of the \u003ccode\u003ebooksReducer()\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e a key of \u003cstrong\u003eauthors\u003c/strong\u003e with a value\nequal to the return value of the \u003ccode\u003eauthorsReducer()\u003c/code\u003e. Now if you look at the\n\u003ccode\u003ebooksReducer()\u003c/code\u003e and the \u003ccode\u003eauthorsReducer()\u003c/code\u003e you will see that each returns a\ndefault state of an empty array.\u003c/p\u003e\n\n\u003cp\u003eSince we've changed the default export of \u003ccode\u003emanageAuthorsAndBooks.js\u003c/code\u003e, in\n\u003ccode\u003eindex.js\u003c/code\u003e, we don't need to change anything with createStore unless we wanted\nto update names we've assigned:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport { createStore } from \"redux\";\u003cbr\u003eimport rootReducer from \"./reducers/manageAuthorsAndBooks\";\u003cbr\u003e\u003cbr\u003econst store = createStore(\u003cbr\u003e  rootReducer,\u003cbr\u003e  window.__REDUX_DEVTOOLS_EXTENSION__ \u0026amp;\u0026amp; window.__REDUX_DEVTOOLS_EXTENSION__()\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy passing our rootReducer to the createStore method, the application maintains\nits initial state of \u003ccode\u003e{ books: [], authors: [] }\u003c/code\u003e, just as it did when we had\none reducer. From the application's perspective nothing has changed.\u003c/p\u003e\n\n\u003ch4\u003eExamining Our New Reducers\u003c/h4\u003e\n\n\u003cp\u003eNow if we examine the \u003ccode\u003eauthorsReducer()\u003c/code\u003e, notice that this reducer only\nconcerns itself with its own slice of the state. This makes sense. Remember that\nultimately the array that the \u003ccode\u003eauthorsReducer()\u003c/code\u003e returns will be the value to\nthe key of authors. Similarly the \u003ccode\u003eauthorsReducer()\u003c/code\u003e only receives as its\nstate argument the value of state.authors, in other words the authors array.\u003c/p\u003e\n\n\u003cp\u003eSo examining the \u003ccode\u003eauthorsReducer()\u003c/code\u003e, we see that we no longer retrieve the\nlist of authors with a call to \u003ccode\u003estate.authors\u003c/code\u003e, but can access the list of\nauthors simply by calling \u003ccode\u003estate\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction authorsReducer(state = [], action) {\u003cbr\u003e  let idx;\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case \"ADD_AUTHOR\":\u003cbr\u003e      return [...state, action.author];\u003cbr\u003e\u003cbr\u003e    case \"REMOVE_AUTHOR\":\u003cbr\u003e      idx = state.findIndex(author =\u0026gt; author.id === action.id);\u003cbr\u003e      return [...state.slice(0, idx), ...state.slice(idx + 1)];\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eDispatching Actions\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecombineReducer()\u003c/code\u003e function returns to us one large reducer that looks like\nthe following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction reducer(state = {\u003cbr\u003e  authors: [],\u003cbr\u003e  books: []\u003cbr\u003e}, action) {\u003cbr\u003e  let idx\u003cbr\u003e  switch (action.type) {\u003cbr\u003e\u003cbr\u003e    case \"ADD_AUTHOR\":\u003cbr\u003e      return [...state, action.author]\u003cbr\u003e\u003cbr\u003e    case 'REMOVE_AUTHOR':\u003cbr\u003e      ...\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause of this, we can dispatch actions the same way we always did.\n\u003ccode\u003estore.dispatch({ type: 'ADD_BOOK', { title: 'Snow Crash', author: 'Neal Stephenson' } });\u003c/code\u003e\nwill hit our switch statement in the reducer and add a new author. One thing\nto note, is that if you want to have more than one reducer respond to the same\naction, you can.\u003c/p\u003e\n\n\u003cp\u003eFor example, in our application, when a user inputs information about a book,\nthe user \u003cem\u003ealso\u003c/em\u003e inputs the author's name. It would be handy if, when a user\nsubmits a book with an author, that author is also added to our author array.\u003c/p\u003e\n\n\u003cp\u003eThe action dispatched doesn't change: \u003ccode\u003estore.dispatch({ type: 'ADD_BOOK', { title: 'Snow Crash', author: 'Neal Stephenson' } });\u003c/code\u003e. Our\n\u003ccode\u003ebooksReducer\u003c/code\u003e can stay the same for now:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction booksReducer(state = [], action) {\u003cbr\u003e  let idx;\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case \"ADD_BOOK\":\u003cbr\u003e      return [...state, action.book];\u003cbr\u003e\u003cbr\u003e    case \"REMOVE_BOOK\":\u003cbr\u003e      idx = state.findIndex(book =\u0026gt; book.id === action.id);\u003cbr\u003e      return [...state.slice(0, idx), ...state.slice(idx + 1)];\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, in \u003ccode\u003eauthorsReducer\u003c/code\u003e, we can \u003cem\u003ealso\u003c/em\u003e include a switch case for\n\"ADD_BOOK\":\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport uuid from \"uuid\";\u003cbr\u003e\u003cbr\u003efunction authorsReducer(state = [], action) {\u003cbr\u003e  let idx;\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case \"ADD_AUTHOR\":\u003cbr\u003e      return [...state, action.author];\u003cbr\u003e\u003cbr\u003e    case \"REMOVE_AUTHOR\":\u003cbr\u003e      idx = state.findIndex(book =\u0026gt; book.id === action.id);\u003cbr\u003e      return [...state.slice(0, idx), ...state.slice(idx + 1)];\u003cbr\u003e\u003cbr\u003e    case \"ADD_BOOK\":\u003cbr\u003e      let existingAuthor = state.filter(\u003cbr\u003e        author =\u0026gt; author.authorName === action.book.authorName\u003cbr\u003e      );\u003cbr\u003e      if (existingAuthor.length \u0026gt; 0) {\u003cbr\u003e        return state;\u003cbr\u003e      } else {\u003cbr\u003e        return [...state, { authorName: action.book.authorName, id: uuid() }];\u003cbr\u003e      }\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the new \"ADD\u003cem\u003eBOOK\" case, we're checking to see if an authorName matches with\nthe name dispatches from the BookInput component. If the name already exists,\nstate is returned unchanged. If the name is not present, it is added to the\nauthor array. Use the example above to modify the \u003ccode\u003emanageAuthorsAndBooks\u003c/code\u003e\nreducer and you can see the effect. We have two separate forms, one for adding\njust authors, and one that adds books _and\u003c/em\u003e authors.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e We're using a useful package, \u003ccode\u003euuid\u003c/code\u003e, to handle unique ID generation.\nWith this refactor, since we are creating an author ID from within the reducer\ninstead of in \u003ccode\u003eAuthorInput.js\u003c/code\u003e, we need to import it here as well.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eFor learning purposes, our two reducers are in the same file, but it is common\nto separate each reducer into its own file. You could then either import each\nreducer into a \u003cem\u003enew\u003c/em\u003e file, something like \u003ccode\u003ereducers/rootReducer.js\u003c/code\u003e, where\n\u003ccode\u003ecombineReducer\u003c/code\u003e is called. Or, alternatively, you could include\n\u003ccode\u003ecombineReducer\u003c/code\u003e in your \u003ccode\u003esrc/index.js\u003c/code\u003e file. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport authorsReducer from './reducers/authorsReducer';\u003cbr\u003eimport booksReducer from './reducers/booksReducer';\u003cbr\u003e\u003cbr\u003econst rootReducer = combineReducers({\u003cbr\u003e  books: booksReducer,\u003cbr\u003e  authors: authorsReducer\u003cbr\u003e})\u003cbr\u003e\u003cbr\u003econst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ \u0026amp;\u0026amp; window.__REDUX_DEVTOOLS_EXTENSION__())\u003cbr\u003e\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn React/Redux apps where we're using and storing many resources in our store,\nkeeping reducers separated helps us organize code and separate concerns. Actions\ncan cause multiple reducers to modify their own state, but we can still keep all\nmodifications to a \u003cem\u003eparticular\u003c/em\u003e resource within its own separate file.\u003c/p\u003e\n\n\u003ch4\u003eResources\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://egghead.io/lessons/javascript-redux-implementing-combinereducers-from-scratch\"\u003eImplementing Combine Reducers from Scratch\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","exportId":"g752113e2a440adaab4aacb2f014250de"},{"id":220938,"title":"Redux: Putting it All Together","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"quote-maker-react-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/quote-maker-react-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/quote-maker-react-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/quote-maker-react-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse the react-redux library and the redux library to build an application with\nmultiple resources.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab we will be building an application for making quotes. This will\ninclude creating a quote and updating the global Redux state.\u003c/p\u003e\n\n\u003cp\u003eIn our \u003ccode\u003eApp\u003c/code\u003e component we will render the components: \u003ccode\u003eQuoteForm\u003c/code\u003e \u0026amp; \u003ccode\u003eQuotes\u003c/code\u003e. We\nwill also need a reducer and actions file for our Quotes.\u003c/p\u003e\n\n\u003ch3\u003eQuotes Reducer\u003c/h3\u003e\n\n\u003cp\u003eThe quotes reducer should have an initial state of:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut when a Quote is added it should look like this\n(we will be using the uuid node package for generating ids):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e  {\u003cbr\u003e    id: '23423424242-42342423424242-fafdb',\u003cbr\u003e    content: 'One Awesome Quote',\u003cbr\u003e    author: 'Luke Ghenco'\u003cbr\u003e  }\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe will also need to extend out the Quotes Reducer to handle removing quotes,\nupvoting quotes, and downvoting quotes as well. Check out the test specs for how\nto build these.\u003c/p\u003e\n\n\u003ch3\u003eQuotes Actions\u003c/h3\u003e\n\n\u003cp\u003eBuild out several actions as specified in the tests that build Action Creators\nfor add, removing, upvoting and downvoting quotes.\u003c/p\u003e\n\n\u003ch3\u003eQuoteForm Component\u003c/h3\u003e\n\n\u003cp\u003eOur Quote form will have a textarea for a quotes content and an input for a\nquotes author. We will be using component state for updating the inputs so make\nsure to have a state of \u003ccode\u003e{ content: '', author: '' }\u003c/code\u003e in your \u003ccode\u003eQuoteForm\u003c/code\u003e\nconstructor. You will make a dispatch action to Redux using an action you will\ncreate called \u003ccode\u003eaddQuote()\u003c/code\u003e that will take a quote as an argument and start the\nreducer process.\u003c/p\u003e\n\n\u003ch3\u003eQuotes Component\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eQuotes\u003c/code\u003e Component will render a list of individual \u003ccode\u003eQuoteCard\u003c/code\u003e components.\nIt needs to be connected to the \u003ccode\u003eRedux\u003c/code\u003e state so that it can render the quotes.\nAlso make sure to attach the remove, upvote, and downvote actions from the\nQuotes Actions file to pass down as callback props to the \u003ccode\u003eQuoteCard\u003c/code\u003e component.\u003c/p\u003e\n\n\u003ch3\u003eQuoteCard Component\u003c/h3\u003e\n\n\u003cp\u003eMake sure to connect the callback action props to the the Upvote, Downvote and\nDelete buttons.\u003c/p\u003e\n\n\u003ch4\u003eExample App\u003c/h4\u003e\n\n\u003cp\u003eHere is an image of the example app, of what you are trying to build.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3-us-west-2.amazonaws.com/curriculum-content/web-development/react/quote-app-image.png\" alt=\"quote app example\"\u003e\u003c/p\u003e\n\n\u003ch4\u003eNote\u003c/h4\u003e\n\n\u003cp\u003eWe are using the \u003ccode\u003eNode UUID\u003c/code\u003e package for this to create random unique ids. Here\nis the documentation for \u003ca href=\"https://github.com/kelektiv/node-uuid\"\u003eNode UUID\u003c/a\u003e. To\nuse it just import it into your reducer and invoke it\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport uuid from 'uuid';\u003cbr\u003e\u003cbr\u003econst id = uuid();\u003cbr\u003econsole.log(id) // '1fd3234'\n\u003c/code\u003e\u003c/pre\u003e","exportId":"gf517f16385f462531ac7128b5be7e079"}]},{"id":24143,"name":"Redux Continued","status":"started","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"g38513fa259c23e02deb0fc6cdc6d8841","items":[{"id":220948,"title":"Components, Events, Actions, and Stores","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-components-events-actions-and-stores\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/react-components-events-actions-and-stores/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-components-events-actions-and-stores\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-components-events-actions-and-stores/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eIn this lesson we're going to revisit some of the concepts we have explored so far. Our focus will be on how components interact with each other and how global application state can be managed in a predictable, scalable way using actions, stores and event handlers.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003eReview interactions between different parts of a React application\u003c/li\u003e\n    \u003cli\u003eDiscuss trade-offs and benefits of one-way data flow\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eComponent State vs Store State\u003c/h2\u003e\n\u003cp\u003eWhile our previous lessons extensively focused on moving state \u003cstrong\u003eout\u003c/strong\u003e of individual components, we don't always have to. In fact, sometimes it might even introduce more complexity than needed. Using \u003ccode\u003esetState()\u003c/code\u003e and \"local\" component-level state is a perfectly fine choice in most cases.\u003c/p\u003e\n\u003cp\u003eIn general, we should not start out by putting all our state into some form of global store (or multiple stores).\u003c/p\u003e\n\u003cp\u003eWhen architecting a user interface, try to use local state and parent props \u003cstrong\u003efirst\u003c/strong\u003e. If we end up constantly passing down tons of props, we should consider connecting the component in question with a Redux store.\u003c/p\u003e\n\u003cp\u003eE.g. let's say we want to render some form of carousel, something like \u003ca href=\"https://getbootstrap.com/docs/4.0/components/carousel/\"\u003eBootstrap's Carousel component\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eA carousel is a perfect example on where using a store to extract out component state doesn't necessarily make things easier (or would simply be a massive overkill).\u003c/p\u003e\n\u003cp\u003eWriting the essential handler functions for the component in question using \"classical\" React-style without \u003cstrong\u003eany\u003c/strong\u003e \"outside\" state is trivial:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Carousel extends React.Component {\u003cbr\u003e  constructor(props) {\u003cbr\u003e    super(props);\u003cbr\u003e    this.state = {\u003cbr\u003e      // We start out rendering the first slide. 0 denotes the index of the\u003cbr\u003e      // active item.\u003cbr\u003e      currentSlide: 0,\u003cbr\u003e    };\u003cbr\u003e  }\u003cbr\u003e  /**\u003cbr\u003e   * Handler function that transitions to the next slide in the carousel.\u003cbr\u003e   * This is the function that will be run once the user clicks the \"next\"\u003cbr\u003e   * button.\u003cbr\u003e   */\u003cbr\u003e  goNext = () =\u0026gt; {\u003cbr\u003e    const previousSlide = this.state.currentSlide;\u003cbr\u003e    this.setState({ currentSlide: previousSlide + 1 });\u003cbr\u003e  }\u003cbr\u003e  /**\u003cbr\u003e   * Equivalent to `goNext`. Handler function that will be invoked when clicking\u003cbr\u003e   * the \"back\" button.\u003cbr\u003e   */\u003cbr\u003e  goBack = () =\u0026gt; {\u003cbr\u003e    const previousSlide = this.state.currentSlide;\u003cbr\u003e    this.setState({ currentSlide: previousSlide - 1 });\u003cbr\u003e  }\u003cbr\u003e  render() {\u003cbr\u003e    // Magic goes here\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this case, using the local state of the component has a couple of advantages over using an external store:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eThe state is \u003cstrong\u003eby definition\u003c/strong\u003e bound to the component\u003c/li\u003e\n\n\u003cp\u003eWhen rendering a very long list of carousels, keeping the state stored in the store in sync with the \u003cem\u003eactual\u003c/em\u003e list of rendered components is hard. Let's say we render one carousel for each photo \"collection\" — which could for example be represented by an array for image sources —\u0026nbsp;keeping the array length in sync with whatever data structure we would use in the store for representing the selected slide index is unnecessarily complex. For example, when adding a photo collection, we would need to add the \u003ccode\u003ecurrentSlide\u003c/code\u003e property to the store as well.\u003c/p\u003e\n\u003cp\u003eSimply distinguishing between \"component UI\" state and global application state radically simplified the architecture in the above case, since component state can by definition not exist without a matching component (and vice versa).\u003c/p\u003e\n\n    \u003cli\u003eSimplified Testing\u003c/li\u003e\n\n\u003cp\u003eTesting React components is extremely easy compared to other frameworks, such as Angular. Testing packages like \u003ca href=\"https://airbnb.io/enzyme/\"\u003eEnzyme\u003c/a\u003e from Airbnb allow us to mount individual components in a test, pass them props, cause state changes, check what JSX is rendered, etc...\u003c/p\u003e\n\u003cp\u003eUsing stores doesn't necessarily break this abstraction, but it makes it much harder to properly test all the possible states that a component can be in, since a store might contain state that isn't directly consumed by the component to be tested.\u003c/p\u003e\n\u003cp\u003eBut more importantly, we now need to manage a store during testing. We can use the same packages and functions like \u003ccode\u003ecreateStore()\u003c/code\u003e we use to set up Redux with React, but the tests become more complicated and sometimes less flexible as a result.\u003c/p\u003e\n\u003cp\u003eWe can also mock it out — some node packages allow us to create a fake store for the tests. Overall, though, because Redux changes the way data is maintained, tests need to change accordingly, becoming more complicated.\u003c/p\u003e\n\n    \u003cli\u003eReusing the component is possible\u003c/li\u003e\n\n\u003cp\u003eWhile we focused on implementing our own set of stores, some people prefer to use Redux, Rx, mobx or some other library for managing state and implementing unidirectional data flow.\u003c/p\u003e\n\u003cp\u003eBy storing state in an external store, we implicitly couple the component to whatever architecture we chose for our main application. If we're implementing an accordion component using \u003ca href=\"https://facebook.github.io/flux/\"\u003eFlux\u003c/a\u003e (the data flow pattern Redux is based on), it means everyone using our component will have to use Flux in order to interact with it (even though it might be hidden through the public API of the component).\u003c/p\u003e\n  \u003c/ol\u003e\n\u003cp\u003eHence using component state (and props) instead of stores is the preferred way when creating reusable components.\u003c/p\u003e\n\u003ch2\u003ePresentational vs Container Components\u003c/h2\u003e\n\u003cp\u003eWhile it is possible to connect any component to our store, one pattern is to only connect \u003cstrong\u003eContainer components\u003c/strong\u003e. Since they are primarily concerned managing state and actions that mutate the state of an app, they tend to be a good place to connect to the store.\u003c/p\u003e\n\u003cp\u003eIn single page apps, a good rule of thumb is to make each page of your application (or component attached to a sub-route) a container component. While it isn't necessarily a bad idea to use nested container components, passing props to pure components tends to be easier to test and reason about.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePresentational components\u003c/strong\u003e are modular, reusable (and typically small) components that are concerned with \"how stuff looks\". In this pattern, they are not typically connected to a store.\u003c/p\u003e\n\u003cp\u003eUsually UI elements (with a bit of interaction) are presentational components and therefore not concerned with the actual state of the application. E.g. a modal, accordion, or button should not be container components. They only receive props and display them.\u003c/p\u003e\n\u003cp\u003eThe benefit of separating presentational components from any \u003cstrong\u003eRedux\u003c/strong\u003e specific code is that it makes them highly reusable. They're just React components, after all.\u003c/p\u003e\n\u003cp\u003eThis is only a suggested pattern. Deciding whether or not something should be a container or presentational component is not a definitive decision. Making presentational components stateful by wiring them up to a store is usually quite easy and gets rid of a lot of indirection. For example passing down a lot of different props 5 levels deep is much more error prone than simply connecting the \"leaf\" component to the store.\u003c/p\u003e\n\u003cp\u003eIt also means we don't need to re-render all the components in between the presentational leaf component that is due to be rendered and the intermediate components that simply pass down the state via props from the container component.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html\"\u003eInteractivity and Dynamic UIs\u003c/a\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367#.7v3xs9al2\"\u003eYou Might Not Need Redux\u003c/a\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.jp0dni40i\"\u003ePresentational and Container Components\u003c/a\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/react-components-events-actions-and-stores\"\u003eComponents, Events, Actions And Stores\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","exportId":"components-events-actions-and-stores"},{"id":220954,"title":"Creating Items with Redux","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-forms-codealong\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/redux-forms-codealong/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-forms-codealong\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-forms-codealong/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWith this lesson, we will begin our journey in implementing the CRUD actions while using the Redux pattern.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eBy the end of this lesson, you will be able to:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eTake user input from our \u003cstrong\u003eReact\u003c/strong\u003e application and send information to \u003cstrong\u003eRedux\u003c/strong\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eOur Goal\u003c/h2\u003e  \u003cp\u003eWe'll build a form in \u003cstrong\u003eRedux\u003c/strong\u003e that allows us to create a list of todos. So this is a form that would have only one input, for the name of the todo, and the submit button.\u003c/p\u003e  \u003ch2\u003eCreate The Form in React\u003c/h2\u003e  \u003cp\u003eOkay, if you boot up the application (run \u003ccode\u003enpm install \u0026amp;\u0026amp; npm start\u003c/code\u003e), you'll see that there in the \u003ccode\u003e./src/App.js\u003c/code\u003e file we reference a createTodo form located at \u003ccode\u003e./src/components/todos/createTodo.js\u003c/code\u003e. That's where we need to build our form.\u003c/p\u003e  \u003cp\u003eSo in that file we want to change our component to look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/CreateTodo.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react'\u003cbr\u003e\u003cbr\u003eclass CreateTodo extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return(\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;form\u0026gt;\u003cbr\u003e          \u0026lt;p\u0026gt;\u003cbr\u003e            \u0026lt;label\u0026gt;add todo\u0026lt;/label\u0026gt;\u003cbr\u003e            \u0026lt;input type=\"text\" /\u0026gt;\u003cbr\u003e          \u0026lt;/p\u0026gt;\u003cbr\u003e          \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e        \u0026lt;/form\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default CreateTodo; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003ePlan for Integrating into Redux\u003c/h2\u003e  \u003cp\u003eNow let's think about how we want to integrate this into \u003cstrong\u003eRedux\u003c/strong\u003e. Essentially, upon submitting the form, we would like to dispatch the following action to the store:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  type: 'ADD_TODO',\u003cbr\u003e  todo: todo\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo if the user has typed in buy groceries, our action would look like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  type: 'ADD_TODO',\u003cbr\u003e  todo: 'buy groceries'\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut how do we get that text from the form's input? Well, we can use our normal React trick of updating the \u003cem\u003ecreateTodo component's\u003c/em\u003e state whenever someone types something into the form. Then, when the user clicks on the submit button, we can grab that state, and call \u003ccode\u003estore.dispatch({ type: 'ADD_TODO', todo: this.state })\u003c/code\u003e. Ok, time to implement it. Step one will be updating the component state whenever someone types in the form.\u003c/p\u003e  \u003ch3\u003e1. Create a Controlled Form Using State and an \u003ccode\u003eonChange\u003c/code\u003e Event Handler\u003c/h3\u003e  \u003cp\u003eEvery time the input is changed, we want to change the state. To do this we first add an event handler for every input that changes. So inside the createTodo component, we change our render function to the following.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/createTodo\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003erender(){\u003cbr\u003e  return(\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;form\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;\u003cbr\u003e          \u0026lt;label\u0026gt;add todo\u0026lt;/label\u0026gt;\u003cbr\u003e          \u0026lt;input type=\"text\" onChange={(event) =\u0026gt; this.handleChange(event)}/\u0026gt;\u003cbr\u003e        \u0026lt;/p\u0026gt;\u003cbr\u003e        \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e      \u0026lt;/form\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAll this code does is say that every time the user changes the input field (that is, whenever the user types something in) we should call our \u003ccode\u003ehandleChange()\u003c/code\u003e function (which we haven't written yet).\u003c/p\u003e  \u003cp\u003eOkay, our code calls the \u003ccode\u003ehandleChange()\u003c/code\u003e function each time the user types in the input, but we still need to write that handleChange function. Let's start with the old way, setting a state value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/createTodo\u003cbr\u003e ...\u003cbr\u003econstructor() {\u003cbr\u003e  super();\u003cbr\u003e  this.state = {\u003cbr\u003e    text: '',\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ehandleChange(event) {\u003cbr\u003e  this.setState({\u003cbr\u003e    text: event.target.value\u003cbr\u003e  });\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003erender(){\u003cbr\u003e  return(\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;form\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;\u003cbr\u003e          \u0026lt;label\u0026gt;add todo\u0026lt;/label\u0026gt;\u003cbr\u003e          \u0026lt;input type=\"text\" onChange={(event) =\u0026gt; this.handleChange(event)}/\u0026gt;\u003cbr\u003e        \u0026lt;/p\u0026gt;\u003cbr\u003e        \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e      \u0026lt;/form\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we pass through the event, which comes from the \u003ccode\u003eonChange\u003c/code\u003e event handler. The event's target is the input that was listening for the event (the text field), and the value is the current value of that text field.\u003c/p\u003e  \u003cp\u003eCurrently, we're using class method syntax to define \u003ccode\u003ehandleChange()\u003c/code\u003e on our component. The JSX code within our \u003ccode\u003erender()\u003c/code\u003e method is particular to a specific instance of the component, but, by default, \u003cstrong\u003eclass methods are called the context of the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\"\u003eprototype chain\u003c/a\u003e, not an instance\u003c/strong\u003e. In order for \u003ccode\u003ethis\u003c/code\u003e to correctly reference \u003cem\u003ethis\u003c/em\u003e specific instance of our component, we need to either bind it (often done in the \u003ccode\u003econstructor()\u003c/code\u003e), or use an arrow function in our \u003ccode\u003eonChange\u003c/code\u003e event handler. Because arrow functions don't define their own version of \u003ccode\u003ethis\u003c/code\u003e, they'll default to the context they are in.\u003c/p\u003e  \u003cp\u003eWe never intend for \u003ccode\u003ehandleChange()\u003c/code\u003e to be used any other way. In modern JavaScript, we are able to directly class assign properties instead of assigning them inside a \u003ccode\u003econstructor()\u003c/code\u003e. This means that, instead of writing \u003ccode\u003ehandleChange()\u003c/code\u003e as a class method, we could declare it as a class property and assign an arrow function to it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ehandleChange = event =\u0026gt; {\u003cbr\u003e    this.setState({\u003cbr\u003e        text: event.target.value\u003cbr\u003e    });\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe result is that \u003ccode\u003ehandleChange()\u003c/code\u003e will always be bound to the particular instance of the component it is defined in.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econstructor() {\u003cbr\u003e  super();\u003cbr\u003e  this.state = {\u003cbr\u003e    text: '',\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ehandleChange = (event) =\u0026gt; {\u003cbr\u003e  this.setState({\u003cbr\u003e    text: event.target.value\u003cbr\u003e  });\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003erender(){\u003cbr\u003e  return(\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;form\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;\u003cbr\u003e          \u0026lt;label\u0026gt;add todo\u0026lt;/label\u0026gt;\u003cbr\u003e          \u0026lt;input type=\"text\" onChange={(event) =\u0026gt; this.handleChange(event)}/\u0026gt;\u003cbr\u003e        \u0026lt;/p\u0026gt;\u003cbr\u003e        \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e      \u0026lt;/form\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow that \u003ccode\u003ehandleChange()\u003c/code\u003e is defined using an arrow function, we can actually write an even shorter \u003ccode\u003eonChange\u003c/code\u003e callback: \u003ccode\u003eonChange={this.handleChange}\u003c/code\u003e. In this case, \u003ccode\u003ethis.handleChange\u003c/code\u003e refers to the definition of a function that takes in the event as an argument. No need for the \u003ccode\u003eonChange\u003c/code\u003e arrow function callback anymore!\u003c/p\u003e  \u003cp\u003eTo make a completely controlled form, we will also need to set the \u003ccode\u003evalue\u003c/code\u003e attribute of our \u003ccode\u003einput\u003c/code\u003e element to \u003ccode\u003ethis.state.text\u003c/code\u003e. This way, every key stroke within \u003ccode\u003einput\u003c/code\u003e will call a \u003ccode\u003esetState\u003c/code\u003e from within \u003ccode\u003ehandleChange\u003c/code\u003e, the component will re-render and display the new value for \u003ccode\u003ethis.state.text\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe \u003cem\u003eCreateTodo\u003c/em\u003e component should look like the following now:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/CreateTodo.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003e\u003cbr\u003eclass CreateTodo extends Component {\u003cbr\u003e\u003cbr\u003e  constructor() {\u003cbr\u003e    super();\u003cbr\u003e    this.state = {\u003cbr\u003e      text: '',\u003cbr\u003e    };\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  handleChange = event =\u0026gt; {\u003cbr\u003e    this.setState({\u003cbr\u003e      text: event.target.value\u003cbr\u003e    });\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return(\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;form\u0026gt;\u003cbr\u003e          \u0026lt;p\u0026gt;\u003cbr\u003e            \u0026lt;label\u0026gt;add todo\u0026lt;/label\u0026gt;\u003cbr\u003e            \u0026lt;input\u003cbr\u003e          type=\"text\"\u003cbr\u003e          onChange={this.handleChange} value={this.state.text}/\u0026gt;\u003cbr\u003e          \u0026lt;/p\u0026gt;\u003cbr\u003e          \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e       \u0026lt;/form\u0026gt;\u003cbr\u003e       {this.state.text}\u003cbr\u003e     \u0026lt;/div\u0026gt;\u003cbr\u003e   );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default CreateTodo; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Inside the render function, we wrapped our form in a \u003ccode\u003ediv\u003c/code\u003e, and then at the bottom of that \u003ccode\u003ediv\u003c/code\u003e we've added the line \u003ccode\u003e{this.state.text}\u003c/code\u003e. This isn't necessary for functionality, but we do this just to visually confirm that we are properly changing the state. If we see our DOM change with every character we type in, we're in good shape.\u003c/p\u003e  \u003cp\u003eIt's on to step 2.\u003c/p\u003e  \u003ch3\u003e2. On Submission of Form, Dispatch an Action to the Store\u003c/h3\u003e  \u003cp\u003eOkay, so now we need to make changes to our form so that when the user clicks submit, we dispatch an action to the store. Notice that a lot of the setup for Redux is already done for you. Open up the \u003ccode\u003e./src/index.js\u003c/code\u003e file. There you'll see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport App from './App';\u003cbr\u003eimport manageTodo from './reducers/manageTodo';\u003cbr\u003eimport { Provider } from 'react-redux';\u003cbr\u003eimport { createStore } from 'redux';\u003cbr\u003e\u003cbr\u003elet store = createStore(manageTodo);\u003cbr\u003e\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store}\u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt;,\u003cbr\u003e  document.getElementById('root')\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eJust below the \u003ccode\u003eimport\u003c/code\u003e statements, you can see that we create the store using \u003ccode\u003ecreateStore\u003c/code\u003e, provided by \u003ccode\u003eredux\u003c/code\u003e. Then, further down, we pass the store into the \u003ccode\u003eProvider\u003c/code\u003e. This will allow us access when we \u003cem\u003econnect\u003c/em\u003e our components.\u003c/p\u003e  \u003cp\u003eOk, let's connect the CreateTodo. First, we want to import \u003ccode\u003econnect\u003c/code\u003e from \u003ccode\u003ereact-redux\u003c/code\u003e and modify our export statement:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/CreateTodo.js\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003eexport default connect(null, mapDispatchToProps)(CreateTodo); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this component, we are not currently concerned with writing a \u003ccode\u003emapStateToProps()\u003c/code\u003e function (the first argument passed to \u003ccode\u003econnect\u003c/code\u003e) as this component doesn't need any state. Since we only need to dispatch an action here and we are not getting information from our store, we can use \u003ccode\u003enull\u003c/code\u003e instead of \u003ccode\u003emapStateToProps\u003c/code\u003e as the first argument.\u003c/p\u003e  \u003cp\u003eNext, as we write out our \u003ccode\u003emapDispatchToProps()\u003c/code\u003e function, we'll need to decide on how to structure our data and the related action. The basic frame of the function will look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/CreateTodo.js\u003cbr\u003e\u003cbr\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    addTodo: () =\u0026gt; dispatch(\u0026lt;some action\u0026gt;)\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOn submission of the form in our component, we want to send the value we've captured in the local state to be added to our \u003cstrong\u003eRedux\u003c/strong\u003e store. With the above set up, \u003ccode\u003eaddTodo\u003c/code\u003e becomes a function in props that is able take arguments.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    addTodo: formData =\u0026gt; dispatch(\u0026lt;some action\u0026gt;)\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFrom the Redux docs, we know that  needs to be a plain javascript object with a \u003ccode\u003etype\u003c/code\u003e key describing the type of action. We also need to include the data from the form - in this case, we'll call that key 'payload'.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    addTodo: formData =\u0026gt; dispatch({ type: 'ADD_TODO', payload: formData })\u003cbr\u003e  };\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn our component, we could call something like \u003ccode\u003ethis.props.addTodo(this.state)\u003c/code\u003e. Since \u003ccode\u003ethis.state\u003c/code\u003e is an object with only one property, \u003ccode\u003etext\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eNow we need to update the \u003cstrong\u003erender()\u003c/strong\u003e function of the \u003cstrong\u003eCreateTodo\u003c/strong\u003e component to call a callback on the submission of a form:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/CreateTodo.js\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003e\u0026lt;form onSubmit={ event =\u0026gt; this.handleSubmit(event) }\u0026gt;\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cstrong\u003ehandleSubmit()\u003c/strong\u003e function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/CreateTodo.js\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003ehandleSubmit = event =\u0026gt; {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  this.props.addTodo(this.state)\u003cbr\u003e}\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen \u003ccode\u003ehandleSubmit()\u003c/code\u003e is called, whatever is currently stored in \u003ccode\u003ethis.state\u003c/code\u003e will be sent off to our reducer via our dispatched action. The fully redux'd component ends up looking the like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003e\u003cbr\u003eclass CreateTodo extends Component {\u003cbr\u003e  state = {\u003cbr\u003e    text: ''\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  handleChange = event =\u0026gt; {\u003cbr\u003e    this.setState({\u003cbr\u003e      text: event.target.value\u003cbr\u003e    });\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  handleSubmit = event =\u0026gt; {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    this.props.addTodo(this.state);\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;form onSubmit={event =\u0026gt; this.handleSubmit(event)}\u0026gt;\u003cbr\u003e          \u0026lt;p\u0026gt;\u003cbr\u003e            \u0026lt;label\u0026gt;add todo\u0026lt;/label\u0026gt;\u003cbr\u003e              \u0026lt;input\u003cbr\u003e                type=\"text\"\u003cbr\u003e                onChange={event =\u0026gt; this.handleChange(event)}\u003cbr\u003e                value={this.state.text}\u003cbr\u003e              /\u0026gt;\u003cbr\u003e          \u0026lt;/p\u0026gt;\u003cbr\u003e          \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e        \u0026lt;/form\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    addTodo: formData =\u0026gt; dispatch({ type: 'ADD_TODO', payload: formData })\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect(\u003cbr\u003e  null,\u003cbr\u003e  mapDispatchToProps\u003cbr\u003e)(CreateTodo); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, when the form is submitted, whatever the \u003ccode\u003ethis.state\u003c/code\u003e is will be dispatched to the reducer with the action.\u003c/p\u003e  \u003ch4\u003eAlternate \u003ccode\u003eexport\u003c/code\u003e statement\u003c/h4\u003e  \u003cp\u003eRemember that, if not given any arguments, \u003ccode\u003econnect\u003c/code\u003e will return \u003ccode\u003edispatch\u003c/code\u003e as a prop to the component we're wrapping with \u003ccode\u003econnect\u003c/code\u003e. So an alternative way to write the CreateTodo component could be:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003e\u003cbr\u003eclass CreateTodo extends Component {\u003cbr\u003e  state = {\u003cbr\u003e    text: ''\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  handleChange = event =\u0026gt; {\u003cbr\u003e    this.setState({\u003cbr\u003e      text: event.target.value\u003cbr\u003e    });\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  handleSubmit = event =\u0026gt; {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    this.props.dispatch({ type: 'ADD_TODO', payload: this.state });\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;form onSubmit={event =\u0026gt; this.handleSubmit(event)}\u0026gt;\u003cbr\u003e          \u0026lt;p\u0026gt;\u003cbr\u003e            \u0026lt;label\u0026gt;add todo\u0026lt;/label\u0026gt;\u003cbr\u003e            \u0026lt;input\u003cbr\u003e              type=\"text\"\u003cbr\u003e              onChange={event =\u0026gt; this.handleChange(event)}\u003cbr\u003e              value={this.state.text}\u003cbr\u003e            /\u0026gt;\u003cbr\u003e          \u0026lt;/p\u0026gt;\u003cbr\u003e          \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e        \u0026lt;/form\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect()(CreateTodo); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, if you start up the app and click the submit button, you should see your actions via a \u003ccode\u003econsole.log\u003c/code\u003e in our reducer.\u003c/p\u003e  \u003ch3\u003e3. Update State\u003c/h3\u003e  \u003cp\u003eSo we are properly dispatching the action, but the state is not being updated. What could be the problem? Well remember our crux of redux flow: Action -\u0026gt; Reducer -\u0026gt; New State. So if the action is properly dispatched, then our problem must lie with our reducer. Open up the file \u003ccode\u003e./src/reducers/manageTodo.js\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThis function does nothing. Let's fix that. First we need to provide an initial state. Because, we want our state to look like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estate = {\u003cbr\u003e  todos: [\u003cbr\u003e    { text: 'buy groceries' },\u003cbr\u003e    { text: 'watch netflix' },\u003cbr\u003e  ]\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur initial state should be an empty list of todos, { todos: [] }.\u003c/p\u003e  \u003cp\u003eSecond, we need to concatenate a new todo each time we receive an action that looks like \u003ccode\u003e{ type: 'ADD_TODO', payload: { text: 'watch baseball' } }\u003c/code\u003e. Ok, let's do it.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/reducers/manageTodo.js\u003cbr\u003e\u003cbr\u003eexport default function manageTodo(state = {\u003cbr\u003e  todos: [],\u003cbr\u003e}, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'ADD_TODO':\u003cbr\u003e\u003cbr\u003e      console.log({ todos: state.todos.concat(action.payload.text) });\u003cbr\u003e\u003cbr\u003e      return { todos: state.todos.concat(action.payload.text) };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk, once you change the \u003ccode\u003emanageTodo()\u003c/code\u003e reducer to the above function, open up the console in your browser, and try clicking the submit button a few times. The log will show that our reducer is concatenating new values every time the form is submitted!\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eThere's a lot of typing in this section, but three main steps.\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eFirst, we made sure the React component of our application was working. We did this by building a form, and then making sure that whenever the user typed in the form's input, the state was updated.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eSecond, We connected the component to \u003cstrong\u003eRedux\u003c/strong\u003e and designed our \u003ccode\u003emapDispatchToProps\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThird, we built our reducer such that it responded to the appropriate event and concatenated the payload into our array of todos.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g710381dee23a3c5fe34918d398c48662"},{"id":220959,"title":"Displaying a List of items with Redux","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-index-codealong\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/redux-index-codealong/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-index-codealong\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-index-codealong/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eWith this lesson we'll finish up what we worked on the in the forms code along by displaying our list of todos. By the end of this lesson, you will be able to:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eDisplay a list of elements from our \u003cstrong\u003eRedux\u003c/strong\u003e store\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eGoal\u003c/h2\u003e  \u003cp\u003eOur state is properly updating but we are not displaying these updates to the user. We need a component that references the store and then uses the data from the store to reference the list of Todos.\u003c/p\u003e  \u003ch2\u003eDisplaying todos\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003eCreateTodo\u003c/code\u003e component is handling the creation side of things, so let's make a new component where we'll be getting todos from the store. We'll call this \u003ccode\u003eTodosContainer\u003c/code\u003e and connect it to \u003cstrong\u003eRedux\u003c/strong\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/TodosContainer.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux'\u003cbr\u003e\u003cbr\u003eclass TodosContainer extends Component {\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return(\u003cbr\u003e      \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect()(TodosContainer); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we aren't worried about dispatching actions here, only getting state from \u003cstrong\u003eRedux\u003c/strong\u003e, so we'll need to write out a \u003ccode\u003emapStateToProps()\u003c/code\u003e function and include it as an argument for \u003ccode\u003econnect()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e...\u003cbr\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    todos: state.todos\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(TodosContainer); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can confirm this is working by adding a log in the render of TodosContainer and then adding TodosContainer to our App component so it will be rendered.\u003c/p\u003e  \u003cp\u003eNow that we have a way to get data from \u003cstrong\u003eRedux\u003c/strong\u003e, we can create a presentational component to handle displaying our todos.\u003c/p\u003e  \u003ch2\u003eCreating a Presentational Todo Component\u003c/h2\u003e  \u003cp\u003eTo start, we'll have each todo rendered as a list item. Inside the \u003ccode\u003e./src/components/\u003c/code\u003e folder, create a file \u003ccode\u003eTodo.js\u003c/code\u003e. Inside it, write a functional component that returns an \u003ccode\u003eli\u003c/code\u003e displaying props:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/Todo.js\u003cbr\u003e\u003cbr\u003eimport React from 'react'\u003cbr\u003e\u003cbr\u003econst Todo = props =\u0026gt; {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;li\u0026gt;{props.text}\u0026lt;/li\u0026gt;\u003cbr\u003e  );\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default Todo; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we need to call that component from a map function in the \u003cstrong\u003eTodosContainer\u003c/strong\u003e component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/TodosContainer.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux'\u003cbr\u003eimport Todo from './Todo'\u003cbr\u003e\u003cbr\u003eclass TodosContainer extends Component {\u003cbr\u003e\u003cbr\u003e  renderTodos = () =\u0026gt; this.props.todos.map((todo, id) =\u0026gt; \u0026lt;Todo key={id} text={todo} /\u0026gt;)\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return(\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        {this.renderTodos()}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    todos: state.todos\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(TodosContainer);\u003cbr\u003e\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow our TodosContainer is mapping over the todos it received from \u003cstrong\u003eRedux\u003c/strong\u003e, passing the value of each todo into a child component, Todo. Todo in this case doesn't have any \u003cstrong\u003eRedux\u003c/strong\u003e related code, and is a regular, functional component.\u003c/p\u003e  \u003ch2\u003eCleanup Todo Input\u003c/h2\u003e  \u003cp\u003eEach time we submit a todo, we want to clear out the input. Ok, so remember that each time we submit a form, we call \u003cstrong\u003ehandleSubmit\u003c/strong\u003e. Inside that \u003cstrong\u003ehandleSubmit\u003c/strong\u003e function let's reset the \u003cem\u003ecomponent's\u003c/em\u003e state by changing our function to the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/CreateTodo.js\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003ehandleSubmit = event =\u0026gt; {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  this.props.addTodo(this.state)\u003cbr\u003e  this.setState({\u003cbr\u003e    text: '',\u003cbr\u003e  })\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat's it! We've got a working app that takes in form data and displays it on a list.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eOk, so we got our \u003cstrong\u003eTodos\u003c/strong\u003e component working simply by accessing the state from the store, and then iterating through the list in the \u003cstrong\u003eTodos\u003c/strong\u003e component.\u003c/p\u003e  \u003ch2\u003eReferences\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/forms.html\"\u003eReact Documentation - Controlled Components\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","exportId":"g3f73ebd64b8ac8f2b3fe50f73f3d0bd7"},{"id":220963,"title":"Set List Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"building-forms-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/building-forms-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/building-forms-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/building-forms-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eUse forms to create new elements and update the store.\u003c/li\u003e\n\u003cli\u003eDisplay a list of the new elements in a separate component.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eGuess what - the bands are back! What we want is an application that allows us to add band names, and then have those band names instantly rendered below. We need to be incorporating Redux by dispatching actions and updating the store each time someone submits a new band.\u003c/p\u003e\n\u003cp\u003eSo we will be creating two different React components, and each of them need to have access to our Redux store, either directly or through props. One of the components will be a form where we input our band name, and the other component will display the list of bands.\u003c/p\u003e\n\u003cp\u003eThe createStore method and some basic setup has already been implemented for you.\u003c/p\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eYou will need to write the \u003ccode\u003eBandsContainer\u003c/code\u003e component. This component should act as your connection to the Redux store and should be a child of the App component. Any values we want to use from Redux as well as any actions we want to dispatch should be set up and available in \u003ccode\u003eBandsContainer\u003c/code\u003e so they can be passed down to other components.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou will need to write the \u003ccode\u003eBandInput\u003c/code\u003e component as a child of \u003ccode\u003eBandsContainer\u003c/code\u003e. This component should have a form with a text input and submit button. We would like to update this \u003cem\u003ecomponent's\u003c/em\u003e state each time the user types a new character in the input, stored as \u003ccode\u003ethis.state.name\u003c/code\u003e. We will only update the \u003cstrong\u003eRedux\u003c/strong\u003e store's state when the user hits the submit button. The dispatched action required to initiate this update should be set up in \u003ccode\u003eBandsContainer\u003c/code\u003e and passed down as the prop \u003ccode\u003eaddBand\u003c/code\u003e to \u003ccode\u003eBandInput\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou will also need to fill in the \u003ccode\u003emanageBand\u003c/code\u003e reducer located under \u003ccode\u003e./src/reducers/manageBand.js\u003c/code\u003e. It will need to respond to an action of \u003ccode\u003etype\n'ADD_BAND'\u003c/code\u003e and correspondingly concatenate a new band each time the action is dispatched.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce you've got a form successfully dispatching actions and adding bands to your \u003cstrong\u003eRedux\u003c/strong\u003e store, write the necessary code to display each band name from the store. Band names should be listed in individual \u003ccode\u003eli\u003c/code\u003e elements.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e","exportId":"ge2a8f5e91abe84546b9a265f45984fa1"},{"id":220968,"title":"Deleting Items with Redux","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-delete-codealong\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/redux-delete-codealong/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-delete-codealong\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-delete-codealong/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eWith this lesson we will continue through our journey through Redux. By the end of this lesson, you will be able to:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eDelete individual elements\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eReview and Goal\u003c/h2\u003e  \u003cp\u003eThroughout each code along in this section, notice that we are never updating the DOM directly. Instead, we use the Redux pattern to have our store hold and update our state, and we then have React display that state. We want to continue with this pattern here.  \u003c/p\u003e  \u003cp\u003eOur goal this time is to have a button next to each list element with the todo; such that when a user clicks on that button, the list element will be removed. In implementing this, remember that the \u003ccode\u003eTodos\u003c/code\u003e component displays the current list of todos, if we remove a todo from the store's state, the display of that todo should be removed.\u003c/p\u003e  \u003ch2\u003eDeleting A Todo\u003c/h2\u003e  \u003cp\u003eTo delete a todo we should add a button that when clicked, dispatches an action telling the store to delete a specific todo. How we tell the store which todo to delete, we'll figure out at the end. For now let's add in the button, and have it call a method that dispatches a delete action when clicked.  \u003c/p\u003e  \u003ch4\u003eModifying our TodosContainer\u003c/h4\u003e  \u003cp\u003eSticking with our container vs presentational set up, we don't want to load our presentational Todo component up with logic. Meanwhile, TodosContainer is where we're connected to \u003cstrong\u003eRedux\u003c/strong\u003e, so let's write in a new \u003ccode\u003emapDispatchToProps()\u003c/code\u003e function to include an action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/TodosContainer.js\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux'\u003cbr\u003eimport Todo from './Todo'\u003cbr\u003e\u003cbr\u003eclass TodosContainer extends Component {\u003cbr\u003e\u003cbr\u003e  renderTodos = () =\u0026gt; this.props.todos.map((todo, id) =\u0026gt; \u0026lt;Todo key={id} text={todo} /\u0026gt;)\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return(\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        {this.renderTodos()}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    todos: state.todos\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    delete: todoText =\u0026gt; dispatch({type: 'DELETE_TODO', payload: todoText })\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps, mapDispatchToProps)(TodosContainer); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, TodosContainer will have access to \u003ccode\u003ethis.props.delete\u003c/code\u003e, which can take in an argument and send it as the action's \u003ccode\u003epayload\u003c/code\u003e. We can then \u003cem\u003epass\u003c/em\u003e \u003ccode\u003ethis.props.delete\u003c/code\u003e down to Todo, so that each Todo component rendered will have access to our 'DELETE_TODO' action.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erenderTodos = () =\u0026gt; this.props.todos.map((todo, id) =\u0026gt; \u0026lt;Todo delete={this.props.delete} key={id} text={todo} /\u0026gt;)\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003eModifying the Todo Component\u003c/h4\u003e  \u003cp\u003eTodo is receiving \u003ccode\u003ethis.props.delete\u003c/code\u003e, so let's update the component a little and incorporate a button:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React from 'react'\u003cbr\u003e\u003cbr\u003econst Todo = props =\u0026gt; {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;span\u0026gt;{props.text}\u0026lt;/span\u0026gt;\u0026lt;button\u0026gt;DELETE\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  )\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Todo; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we click the button we want to be able to delete this particular todo. At the moment, our todos are just strings, stored in an array. Since that is all we have to work with, we add an \u003ccode\u003eonClick\u003c/code\u003e attribute to the new button. To keep this component small, we can provide an anonymous function in-line:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;span\u0026gt;{props.text}\u0026lt;/span\u0026gt;\u0026lt;button onClick={() =\u0026gt; props.delete(props.text)}\u0026gt;DELETE\u0026lt;/button\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo, what is happening here? We're providing a definition for an anonymous function. \u003cem\u003eInside\u003c/em\u003e the definition, we're calling \u003ccode\u003eprops.delete\u003c/code\u003e, and passing in the only other prop available, \u003ccode\u003eprops.text\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eBack in our connected TodosContainer, when this delete button is clicked, the value of \u003ccode\u003eprops.text\u003c/code\u003e is passed into our dispatched action as the payload.\u003c/p\u003e  \u003cp\u003eThere is a \u003ccode\u003econsole.log\u003c/code\u003e in our reducer that displays actions. Clicking the delete button should log an action with the todo's text content as the payload.\u003c/p\u003e  \u003cp\u003eOk, now we have the ability to dispatch an action to the reducer from each Todo!\u003c/p\u003e  \u003ch2\u003eTell the Store Which Todo to Delete\u003c/h2\u003e  \u003cp\u003eOur todos are stored as strings in an array. There are a number of ways to remove a specific string from an array, but one of the more brief options is to use \u003ccode\u003efilter\u003c/code\u003e. By adding a second case to our \u003ccode\u003emanageTodo\u003c/code\u003e reducer, we can write a \u003ccode\u003efilter\u003c/code\u003e that returns every todo that \u003cem\u003edoesn't\u003c/em\u003e match what is contained in \u003ccode\u003eaction.payload\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport default function manageTodo(state = {\u003cbr\u003e  todos: [],\u003cbr\u003e}, action) {\u003cbr\u003e  console.log(action);\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'ADD_TODO':\u003cbr\u003e\u003cbr\u003e      return { todos: state.todos.concat(action.payload.text) };\u003cbr\u003e\u003cbr\u003e    case 'DELETE_TODO':\u003cbr\u003e\u003cbr\u003e      return {todos: state.todos.filter(todo =\u0026gt; todo !== action.payload)}\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn our browser, the delete button should now successfully cause todos to disappear!\u003c/p\u003e  \u003cp\u003eThere is a problem though. What if you have multiple todos with the same text? With this set up, every todo that matches \u003ccode\u003eaction.payload\u003c/code\u003e will be filtered out.\u003c/p\u003e  \u003cp\u003eTo get around this, instead of filtering just text, it would be better if we gave our Todos specific IDs.\u003c/p\u003e  \u003ch4\u003eGive each Todo an id\u003c/h4\u003e  \u003cp\u003eA Todo should have an id the moment it gets created. So, we know that our reducer creates the Todo when a CREATE_TODO action is dispatched. Let's update the code in there so that it also adds an id.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/reducers/manageTodo.js\u003cbr\u003eimport uuid from 'uuid';\u003cbr\u003e\u003cbr\u003eexport default function manageTodo(state = {\u003cbr\u003e  todos: [],\u003cbr\u003e}, action) {\u003cbr\u003e  console.log(action);\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'ADD_TODO':\u003cbr\u003e\u003cbr\u003e      const todo = {\u003cbr\u003e        id: uuid(),\u003cbr\u003e        text: action.payload.text\u003cbr\u003e      }\u003cbr\u003e      return { todos: state.todos.concat(todo) };\u003cbr\u003e\u003cbr\u003e    case 'DELETE_TODO':\u003cbr\u003e\u003cbr\u003e      return {todos: state.todos.filter(todo =\u0026gt; todo !== action.payload)}\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUsing \u003ccode\u003euuid()\u003c/code\u003e will generate a long random string each time a todo is created. Now, instead of just storing an array of strings in our store,  we'll be storing an array of objects.\u003c/p\u003e  \u003cp\u003eThis causes a problem 'downstream', though: we need to update our TodosContainer to pass the correct content.\u003c/p\u003e  \u003ch4\u003eUpdate TodosContainer\u003c/h4\u003e  \u003cp\u003eIn TodosContainer, our \u003ccode\u003erenderTodos\u003c/code\u003e method will need to change a little:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erenderTodos = () =\u0026gt; {\u003cbr\u003e  return this.props.todos.map(todo =\u0026gt; \u0026lt;Todo delete={this.props.delete} key={todo.id} todo={todo} /\u0026gt;)\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe change is minimal, but this set up is actually better. Previously, \u003ccode\u003ekey\u003c/code\u003e was based off the \u003cem\u003eindex\u003c/em\u003e provided by \u003ccode\u003emap\u003c/code\u003e. Now its using our randomly generated ID, and is less prone to errors in the virtual DOM. We'll need both \u003ccode\u003etodo.id\u003c/code\u003e and \u003ccode\u003etodo.text\u003c/code\u003e to be passed into Todo so we pass both down as the object, \u003ccode\u003etodo\u003c/code\u003e.\u003c/p\u003e  \u003ch4\u003eUpdate the Todo Component\u003c/h4\u003e  \u003cp\u003eNow that we've got \u003ccode\u003etodo.id\u003c/code\u003e, we can modify the Todo component to use \u003ccode\u003eprops.todo.id\u003c/code\u003e on click:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React from 'react'\u003cbr\u003e\u003cbr\u003econst Todo = props =\u0026gt; {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;span\u0026gt;{props.todo.text}\u0026lt;/span\u0026gt;\u0026lt;button onClick={() =\u0026gt; props.delete(props.todo.id)}\u0026gt;DELETE\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  )\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Todo; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, when \u003ccode\u003eprops.delete\u003c/code\u003e is called, an action is dispatched that contains an \u003cem\u003eid\u003c/em\u003e only as its payload.\u003c/p\u003e  \u003ch4\u003eUpdating \u003ccode\u003eDELETE_TODO\u003c/code\u003e in the Reducer\u003c/h4\u003e  \u003cp\u003eNow that we're passing an \u003cem\u003eid\u003c/em\u003e to \u003ccode\u003eprops.delete\u003c/code\u003e, we need to modify our reducer once more:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecase 'DELETE_TODO':\u003cbr\u003e\u003cbr\u003e  return {todos: state.todos.filter(todo =\u0026gt; todo.id !== action.payload)} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInstead of comparing \u003ccode\u003etodo\u003c/code\u003e with \u003ccode\u003eaction.payload\u003c/code\u003e, now that \u003ccode\u003etodo\u003c/code\u003e is an object, we want to match \u003ccode\u003etodo.id\u003c/code\u003e with the payload.\u003c/p\u003e  \u003cp\u003eWith this final change, todo objects can be added and deleted, each with their own unique id!\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eOk, so in this lesson we covered how to delete a specific Todo. To implement this, we gave each Todo a unique id, and then made sure we passed that id into each Todo component. Then we made sure to send along that information when dispatching an action via \u003ccode\u003eprops.delete\u003c/code\u003e. Finally, we had our reducer update the state by filtering out the Todo to be deleted.\u003c/p\u003e","exportId":"g99c1a19f70f61bb1a1aab02655af1cb2"},{"id":220972,"title":"Set List Lab - Redux Delete","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-delete-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/redux-delete-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-delete-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-delete-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eImplement a delete button for each band, such that the store is appropriately updated.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eWell all things change, and sometimes that means that even our favorite bands breakup and we must remove all evidence of them. We want an application that allows us to remove specific bands, and have those changes reflected in our store's state, and on the page.\u003c/p\u003e\n\u003cp\u003eWe are starting off with our work from the previous lab, a React/Redux app that creates new band elements and displays them below. Your task will be to add the deleting a band functionality.\u003c/p\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eThe BandInput component is already set up for you and BandsContainer is partially working, but take a moment to note the flow of information. The BandsContainer is connected to \u003cstrong\u003eRedux\u003c/strong\u003e and has mapped \u003ccode\u003ename =\u0026gt; dispatch({ type:\n\"ADD_BAND\", name })\u003c/code\u003e to props.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eSet up the new \u003ccode\u003eBand\u003c/code\u003e component that is in charge of displaying the information for a single band.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCreate a new \u003ccode\u003eBands\u003c/code\u003e component. This component will handle the rendering of all \u003ccode\u003eBand\u003c/code\u003e components from a list of bands provided as props.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUse \u003ccode\u003eBandsContainer\u003c/code\u003e to access the Redux store that contains any band information using the provided \u003ccode\u003emapStateToProps\u003c/code\u003e method. Pass these bands into the \u003ccode\u003eBands\u003c/code\u003e component.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the \u003ccode\u003emanageBand\u003c/code\u003e reducer, change the structure of the state such that each band is assigned its own ID. You will also need to pass this info through to the band object (this should include the \u003cem\u003eid\u003c/em\u003e and \u003cem\u003ename\u003c/em\u003e of the band) as the props to each rendered \u003ccode\u003eBand\u003c/code\u003e component.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the \u003ccode\u003eBand\u003c/code\u003e component, you will need to add a button that dispatches an action of type \u003ccode\u003e'DELETE_BAND'\u003c/code\u003e and then passes through that band's id as the \u003ccode\u003eaction.id\u003c/code\u003e. This dispatched action should be provided as a prop from BandsContainer.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou will have to alter the reducer such that it creates a new list of bands that does not include the one whose delete button was pressed.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e","exportId":"g209ac03463a9ff2e616485f14b13ca9c"},{"id":220978,"title":"Create and Delete Lab","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"crud-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/crud-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/crud-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/crud-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eImplement a Yelp-like application where users can create and delete both restaurants and reviews of each restaurant.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this lab, we will practice creating and removing various items using Redux. We are working with two different resources, restaurants and reviews, with each restaurant having many reviews and reviews belonging to a restaurant. You will implement container components to connect each resource to your Redux store.\u003c/p\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003ch4\u003eRestaurants\u003c/h4\u003e\n\u003cp\u003eStart off by working on the components for displaying restaurants. First, you'll need a \u003cstrong\u003eRestaurantInput\u003c/strong\u003e component that allows a user to create new restaurants. Your form should have two inputs: a text input to enter the name of the restaraunt, and an input with type equal \u003ccode\u003esubmit\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNext, you will build out the \u003cstrong\u003eRestaurantsContainer\u003c/strong\u003e component that will connect to Redux and pass the appropriate props down to its children. You will then want to create a \u003cstrong\u003eRestaurants\u003c/strong\u003e component that renders a list of restaurants, and a \u003cstrong\u003eRestaurant\u003c/strong\u003e component that is responsible for each individual restaurant.\u003c/p\u003e\n\u003cp\u003eUsers should also be able to delete restaurants, so you will need to wire up the button rendered in the Restaurant component and give each restaurant an ID. To do that, you may want to use the \u003ccode\u003ecuid\u003c/code\u003e library that we have already imported into the reducer file for you. Like the \u003ccode\u003euuid\u003c/code\u003e library we have used in previous labs, \u003ccode\u003ecuid\u003c/code\u003e will generate a unique id for you:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  import cuid from 'cuid';\u003cbr\u003e\u003cbr\u003e  console.log(cuid());\u003cbr\u003e  // ch72gsb320000udocl363eofy\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRestaurants stored in Redux should have \u003ccode\u003etext\u003c/code\u003e and \u003ccode\u003eid\u003c/code\u003e keys.\u003c/p\u003e\n\u003ch4\u003eReviews\u003c/h4\u003e\n\u003cp\u003eNext you will work on the reviews resource. You will make a \u003cstrong\u003eReviewInput\u003c/strong\u003e component that will enable users to create a review that is associated with a specific restaurant. As with the \u003cstrong\u003eRestaurantInput\u003c/strong\u003e component, the form should have a text input for the content of the review along with an input of type \u003ccode\u003esubmit\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNext you will build out the \u003cstrong\u003eReviewsContainer\u003c/strong\u003e, \u003cstrong\u003eReviews\u003c/strong\u003e, and \u003cstrong\u003eReview\u003c/strong\u003e components. The \u003cstrong\u003eReviewsContainer\u003c/strong\u003e should be nested within the \u003cstrong\u003eRestaurant\u003c/strong\u003e component so reviews are displayed underneath the restaurant they belong to. Users should also be able to delete a specific review.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Take note of the structure of this app: containers can end up \u003cem\u003eanywhere\u003c/em\u003e in an app, even nested way down the component tree. This setup can feel a bit counterintuitive initially since we could have a presentational component that has a container component as a child, but the benefit is that \u003cem\u003enone\u003c/em\u003e of the non-container components have any code related to Redux! They're just firing props!\u003c/p\u003e\n\u003cp\u003eSince you'll need to be able to associate reviews to restaurants, \u003cem\u003eand\u003c/em\u003e delete specific reviews, reviews stored in Redux should have a \u003ccode\u003etext\u003c/code\u003e key for the review content, a \u003ccode\u003erestaurantId\u003c/code\u003e key to associate and display the review with a specific restaurant and an \u003ccode\u003eid\u003c/code\u003e key unique to the review itself.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Although each review belongs to a specific restaurant, that relationship should be implemented using the \u003ccode\u003erestaurantId\u003c/code\u003e key, \u003cem\u003enot\u003c/em\u003e in the structure of the store's state. In order to get the tests passing, the state will need to be structured as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    {\u003cbr\u003e      restaurants: [],\u003cbr\u003e      reviews: []\u003cbr\u003e    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eHint\u003c/strong\u003e: To simplify coding of the \u003ccode\u003emanageRestaurant\u003c/code\u003e reducer, you may want to use Redux's \u003ccode\u003ecombineReducers\u003c/code\u003e function that was introduced in an earlier lesson.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eOnce all tests are passing, you'll be able to create and delete restaurants \u003cem\u003eand\u003c/em\u003e their specific reviews.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBonus\u003c/strong\u003e: Implement \u003cstrong\u003eedit\u003c/strong\u003e functionality for restaurants and reviews. You will probably want to include an additional button with each restaurant and review that, when clicked, will open an input where a user could modify the contents of a specific item. You will then need to dispatch an \u003cstrong\u003eupdate\u003c/strong\u003e action to the reducer to update the store.\u003c/p\u003e","exportId":"g2c6139f0b4a33183f98004ada2eb45bf"}]},{"id":24148,"name":"Asynchronous Redux","status":"started","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"gf1592a3e620068af6c0c5dfbab0583b3","items":[{"id":220986,"title":"Asynchronous Web Requests with Using Thunk and Redux","type":"WikiPage","indent":0,"locked":false,"requirement":"must_view","completed":true,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-thunk-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-thunk-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-thunk-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eLearn how to use action creator functions to make asynchronous web requests for data in \u003ccode\u003eRedux\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eUnderstand why we need special middleware in order to make some action creator functions able to make asynchronous web requests.\u003c/li\u003e \u003cli\u003eLearn how to use the \u003cstrong\u003eRedux Thunk\u003c/strong\u003e middleware to make some actions asynchronous\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003ePart of the value of using Redux is that it provides a centralized way to control the data of an application. In a standard React + Redux application, any child component can connect to the store directly from anywhere in the app. This allows us to keep many of our React components simple — no need for passing props through many nested components, no need to use component \u003ccode\u003estate\u003c/code\u003e to keep track of all the data. A lot of code that would normally be stored in React components can be removed or replaced.\u003c/p\u003e  \u003cp\u003eWith Redux, we can focus more on presentation in our React components, and use actions and reducers to handle the logic of organizing data. In following with this pattern, we'll be discussing a package that works in conjunction with Redux: Thunk.\u003c/p\u003e  \u003cp\u003eThunk handles asynchronous calls when working with Redux. Think for a moment: we have Redux handling all our app's data. So far, it's all been hard-coded data, i.e. data that we set ourselves. It would be great if we could start getting data from other sources.\u003c/p\u003e  \u003cp\u003eWell, if we had a server or an API, we could \u003cem\u003efetch\u003c/em\u003e some remote data, but we're presented with a familiar problem: we've just removed a lot of logic from our components and now we're going to add more logic? Specifically, we're going to fetch data we'll likely want to keep in our Redux store — adding code to our components seems to be a step backwards.\u003c/p\u003e  \u003cp\u003eWith Thunk, we can incorporate asynchronous code in with our Redux actions. This allows us to continue keeping our components relatively simple and more focused on presentation. In this lesson, we're going to go through what Thunk is and how it is implemented with Redux.\u003c/p\u003e  \u003ch2\u003eTrying to Send an Asynchronous Request in Redux\u003c/h2\u003e  \u003cp\u003eWe're familiar with the \u003ccode\u003eRedux\u003c/code\u003e pattern in which the store dispatches an action to the reducer, the reducer uses that action to make changes to the state, and components re-render with new data.\u003c/p\u003e  \u003cp\u003eGoing back to hard-coded examples, in previous lessons, we populated our store using data inside an action creator function. Something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction fetchAstronauts() {\u003cbr\u003e  const astronauts = [\u003cbr\u003e    {name: \"Neil Armstrong\", craft: \"Apollo 11\"},\u003cbr\u003e    {name: \"Buzz Aldrin\", craft: \"Apollo 11\"},\u003cbr\u003e    {name: \"Michael Collins\", craft: \"Apollo 11\"}\u003cbr\u003e  ];\u003cbr\u003e  return {\u003cbr\u003e    type: 'ADD_ASTRONAUTS',\u003cbr\u003e    astronauts\u003cbr\u003e  };\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat happens though, when we're ready to pull in real live data from an external source like an API?\u003c/p\u003e  \u003cp\u003eWell, we already know how to make a web request. We can use something like JavaScript's native Fetch API to send a web request:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efetch('http://api.open-notify.org/astros.json') \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo, can we simply make a \u003ccode\u003efetch\u003c/code\u003e request inside our action creator function instead of hard-coding our data? The code below is a good attempt, but it ultimately ends in failure and disappointment:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react'\u003cbr\u003eimport { connect } from 'react-redux'\u003cbr\u003eimport { fetchAstronauts } from '../actions/fetchAstronauts'\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  handleOnClick() {\u003cbr\u003e    this.props.fetchAstronauts()\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    const astronauts = this.props.astronauts.map(astro =\u0026gt; \u0026lt;li key={astro.id}\u0026gt;{astro.name}\u0026lt;/li\u0026gt;);\u003cbr\u003e\u003cbr\u003e    return(\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={(event) =\u0026gt; this.handleOnClick(event)} /\u0026gt;\u003cbr\u003e        {astronauts}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction mapDispatchToProps(dispatch){\u003cbr\u003e  return { fetchAstronauts: () =\u0026gt; dispatch(fetchAstronauts()) }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction mapStateToProps(state){\u003cbr\u003e  return { astronauts: state.astronauts }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps, mapDispatchToProps)(App)\u003cbr\u003e\u003cbr\u003e// ./src/actions/fetchAstronauts.js\u003cbr\u003eexport function fetchAstronauts() {\u003cbr\u003e  const astronauts = fetch('http://api.open-notify.org/astros.json');\u003cbr\u003e  return {\u003cbr\u003e    type: 'ADD_ASTRONAUTS',\u003cbr\u003e    astronauts\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e// ./src/astronautsReducer.js\u003cbr\u003efunction astronautsReducer(state = { astronauts: [] }, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e\u003cbr\u003e    case 'ADD_ASTRONAUTS':\u003cbr\u003e      return { ...state, astronauts: action.astronauts }\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo if you look at the code above, you get a sense for what we are trying to do. When a user clicks on the button, we call the \u003ccode\u003ehandleOnClick()\u003c/code\u003e function. This calls our action creator, the \u003ccode\u003efetchAstronauts()\u003c/code\u003e function. The action creator then hits the API, and returns an action with our data, which then updates the state through the reducer.\u003c/p\u003e  \u003cp\u003eWhile this might seem like it should work, in reality we have a big problem.\u003c/p\u003e  \u003cp\u003eFetch requests in JavaScript are \u003cem\u003easynchronous\u003c/em\u003e. That means if we make a fetch request at the first line of our \u003ccode\u003efetchAstronauts()\u003c/code\u003e function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport function fetchAstronauts() {\u003cbr\u003e  const astronauts = fetch('http://api.open-notify.org/astros.json');\u003cbr\u003e  return {\u003cbr\u003e    type: 'ADD_ASTRONAUTS',\u003cbr\u003e    astronauts\u003cbr\u003e  };\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe code on the second line will start running \u003cem\u003ebefore the web request resolves and we have a response that we can work with\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eA \u003ccode\u003efetch()\u003c/code\u003e request returns something called a \u003cstrong\u003ePromise\u003c/strong\u003e. A Promise object is an object that represents some value that will be available later. We can access the data when the promise \"resolves\" and becomes available by chaining a \u003ccode\u003ethen()\u003c/code\u003e function onto our \u003ccode\u003efetch()\u003c/code\u003e call.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport function fetchAstronauts() {\u003cbr\u003e  const astronauts = fetch('http://api.open-notify.org/astros.json')\u003cbr\u003e                      .then(response =\u0026gt; response.json())\u003cbr\u003e  return {\u003cbr\u003e    type: 'ADD_ASTRONAUTS',\u003cbr\u003e    astronauts\u003cbr\u003e  };\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur \u003ccode\u003ethen()\u003c/code\u003e function will run when the Promise that \u003ccode\u003efetch()\u003c/code\u003e returns is \u003cem\u003eresolved\u003c/em\u003e, allowing us to access the response data and parse it into JSON. This doesn't solve our problem though because the \u003ccode\u003efetchAstronauts()\u003c/code\u003e function will still return before the Promise is resolved.\u003c/p\u003e  \u003cp\u003eThere's another problem. Because retrieving data takes time, and because we always want our \u003ccode\u003eRedux\u003c/code\u003e application to reflect the current application state, we want to represent the state of the application in between the user asking for data and the application receiving the data. It's almost like each time a user asks for data we want to dispatch two actions to update our state: one to place our state as loading, and another to update the state with the data.\u003c/p\u003e  \u003cp\u003eSo these are the steps we want to happen when the user wishes to call the API:\u003c/p\u003e  \u003col\u003e \u003cli\u003eInvoke \u003ccode\u003efetchAstronauts()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDirectly after invoking \u003ccode\u003efetchAstronauts()\u003c/code\u003e dispatch an action to indicate that we are loading data.\u003c/li\u003e \u003cli\u003eCall the \u003ccode\u003efetch()\u003c/code\u003e method, which runs, and returns a Promise that we are waiting to resolve.\u003c/li\u003e \u003cli\u003eWhen the Promise resolves, dispatch another action with a payload of the fetched data that gets sent to the reducer.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eGreat. So how do we do all of this?\u003c/p\u003e  \u003ch2\u003eWe Need Middleware\u003c/h2\u003e  \u003cp\u003eSo we need a way to dispatch an action saying we are loading data, then to make a request to the API, and then to wait for the response and then dispatch another action with the response data.\u003c/p\u003e  \u003cp\u003eLucky for us, we can use some \u003cstrong\u003emiddleware\u003c/strong\u003e for exactly that! Middleware, in this case, will allow us to slightly alter the behavior of our actions, allowing us to add in asynchronous requests. In this case, for middleware, we'll be using Thunk.\u003c/p\u003e  \u003cp\u003eTo use \u003cstrong\u003eRedux Thunk\u003c/strong\u003e you would need to install the NPM package:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003enpm install --save redux-thunk \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen, when you initialize the store in your \u003ccode\u003eindex.js\u003c/code\u003e file, you can incorporate your middleware like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/index.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport { Provider } from 'react-redux';\u003cbr\u003eimport { createStore, applyMiddleware } from 'redux';\u003cbr\u003eimport thunk from 'redux-thunk';\u003cbr\u003eimport rootReducer from './reducers';\u003cbr\u003e\u003cbr\u003econst store = createStore(rootReducer, applyMiddleware(thunk));\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store} \u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt;, document.getElementById('container')\u003cbr\u003e) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we imported in a new function \u003ccode\u003eapplyMiddleware()\u003c/code\u003e from \u003ccode\u003eredux\u003c/code\u003e, along with \u003ccode\u003ethunk\u003c/code\u003e from the \u003ccode\u003eredux-thunk\u003c/code\u003e package, and passed in \u003ccode\u003eapplyMiddleware(thunk)\u003c/code\u003e as a second argument to \u003ccode\u003ecreateStore\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eUsing Redux-Thunk Middleware\u003c/h2\u003e  \u003cp\u003eIn the above code, we tell our store to use the Thunk middleware. This middleware will do a couple of interesting things:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eThunk allows us to return a function inside of our action creator. Normally, our action creator returns a plain JavaScript object, so returning a function is a pretty big change. \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThat function receives the store's dispatch function as its argument. With that, we can dispatch multiple actions from inside that returned function.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eLet's see the code and then we'll walk through it.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// actions/fetchAstronauts.js\u003cbr\u003eexport function fetchAstronauts() {\u003cbr\u003e  return (dispatch) =\u0026gt; {\u003cbr\u003e    dispatch({ type: 'START_ADDING_ASTRONAUTS_REQUEST' });\u003cbr\u003e    fetch('http://api.open-notify.org/astros.json')\u003cbr\u003e      .then(response =\u0026gt; response.json())\u003cbr\u003e      .then(astronauts =\u0026gt; dispatch({ type: 'ADD_ASTRONAUTS', astronauts }));\u003cbr\u003e  };\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo you can see above that we are returning a function and not an action, and that the power we now get is the ability to dispatch actions from inside of the returned function. So with that power, we first dispatch an action to indicate that we are about to make a request to our API. Then we make the request. We do not hit our \u003ccode\u003ethen()\u003c/code\u003e function until the response is received, which means that we are not dispatching our action of type 'ADD_ASTRONAUTS' until we receive our data. Thus, we are able to send along that data.\u003c/p\u003e  \u003ch3\u003eReviewing Everything Together\u003c/h3\u003e  \u003cp\u003eLet's review the whole application now with Redux and Thunk configured. First we have \u003ccode\u003eindex.js\u003c/code\u003e, which now imports \u003ccode\u003ethunk\u003c/code\u003e and \u003ccode\u003eapplyMiddleware\u003c/code\u003e and uses them when creating the Redux store:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport { Provider } from 'react-redux';\u003cbr\u003eimport { createStore, applyMiddleware } from 'redux';\u003cbr\u003eimport thunk from 'redux-thunk';\u003cbr\u003eimport rootReducer from './reducers';\u003cbr\u003e\u003cbr\u003econst store = createStore(rootReducer, applyMiddleware(thunk));\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store} \u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt;, document.getElementById('container')\u003cbr\u003e) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003eApp.js\u003c/code\u003e component we showed earlier can remain the same — note that although we've called a function \u003ccode\u003efetchAstronauts()\u003c/code\u003e, no actual asynchronous code is in the component. The component's main purpose is to render JSX. It uses data from Redux via \u003ccode\u003emapStateToProps()\u003c/code\u003e and connects an \u003ccode\u003eonClick\u003c/code\u003e event to an action through \u003ccode\u003emapDispatchToProps()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react'\u003cbr\u003eimport { connect } from 'react-redux'\u003cbr\u003eimport { fetchAstronauts } from '../actions/fetchAstronauts'\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  handleOnClick() {\u003cbr\u003e    this.props.fetchAstronauts()\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    const astronauts = this.props.astronauts.map(astro =\u0026gt; \u0026lt;li key={astro.id}\u0026gt;{astro.name}\u0026lt;/li\u0026gt;);\u003cbr\u003e\u003cbr\u003e    return(\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={(event) =\u0026gt; this.handleOnClick(event)} /\u0026gt;\u003cbr\u003e        {astronauts}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction mapDispatchToProps(dispatch){\u003cbr\u003e  return { fetchAstronauts: () =\u0026gt; dispatch(fetchAstronauts()) }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction mapStateToProps(state){\u003cbr\u003e  return {astronauts: state.astronauts}\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps, mapDispatchToProps)(App) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat happens when the \u003ccode\u003eonClick\u003c/code\u003e event is fired? All of that logic is taken care of outside of the component, in our \u003ccode\u003efetchAstronauts()\u003c/code\u003e action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// actions/fetchAstronauts.js\u003cbr\u003eexport function fetchAstronauts() {\u003cbr\u003e  return (dispatch) =\u0026gt; {\u003cbr\u003e    dispatch({ type: 'START_ADDING_ASTRONAUTS_REQUEST' });\u003cbr\u003e    fetch('http://api.open-notify.org/astros.json')\u003cbr\u003e      .then(response =\u0026gt; response.json())\u003cbr\u003e      .then(astronauts =\u0026gt; dispatch({ type: 'ADD_ASTRONAUTS', astronauts }));\u003cbr\u003e  };\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith Thunk configured, our actions can now \u003cem\u003ereturn\u003c/em\u003e a function. We must write the function, but we know that \u003ccode\u003edispatch()\u003c/code\u003e is passed in as an argument. Notice in the code above that there are \u003cem\u003etwo\u003c/em\u003e calls to \u003ccode\u003edispatch()\u003c/code\u003e, first passing in \u003ccode\u003e{ type: 'START_ADDING_ASTRONAUTS_REQUEST' }\u003c/code\u003e before the \u003ccode\u003efetch()\u003c/code\u003e call, then passing in \u003ccode\u003e{ type: 'ADD_ASTRONAUTS', astronauts }\u003c/code\u003e \u003cem\u003einside\u003c/em\u003e \u003ccode\u003e.then()\u003c/code\u003e. By having both \u003ccode\u003edispatch()\u003c/code\u003e calls, it is possible to know just before our application sends a remote request, and then immediately after that request is resolved.\u003c/p\u003e  \u003cp\u003eWe can update our reducer to include both \u003ccode\u003etype\u003c/code\u003es and to also change a bit of state to indicate if data is in the process of being fetched. We'll modify the initial state to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/astronautsReducer.js\u003cbr\u003efunction astronautsReducer(state = { astronauts: [], requesting: false }, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e\u003cbr\u003e    case 'START_ADDING_ASTRONAUTS_REQUEST':\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        astronauts: [...state.astronauts],\u003cbr\u003e        requesting: true\u003cbr\u003e      }\u003cbr\u003e\u003cbr\u003e    case 'ADD_ASTRONAUTS':\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        astronauts: action.astronauts,\u003cbr\u003e        requesting: false\u003cbr\u003e      }\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we have a way to indicate in our app when data is being loaded! If \u003ccode\u003erequesting\u003c/code\u003e is true, we could display a loading message in JSX!\u003c/p\u003e  \u003ch3\u003eSummary\u003c/h3\u003e  \u003cp\u003eWe saw that when retrieving data from APIs, we run into a problem where the action creator returns an action before the data is retrieved. To resolve this, we use a middleware called Thunk. Thunk allows us to return a function inside of our action creator instead of a plain JavaScript object. That returned function receives the store's dispatch function, and with that we are able to dispatch multiple actions: one to place the state in a loading state, and another to update our store with the returned data.\u003c/p\u003e  \u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/redux-thunk-readme\"\u003eRedux Thunk Readme\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","exportId":"asynchronous-web-requests-with-using-thunk-and-redux"},{"id":220990,"title":"Async Redux Lab: Pictures of Cats","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-thunk-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/redux-thunk-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-thunk-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-thunk-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eWho doesn't want to look at pictures of cats? Well, now you can look at up to 20 pictures of cats with our new React + Redux app. All you have to do is... build it yourself! In this lab, you are tasked with building out a React + Redux app that fetches data using Thunk. Since this is a pretty specific task, we'll walk through it a bit in this Readme. Let's get started! \u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eUse Redux-Thunk middleware to make an asynchronous web request in an action creator function\u003c/li\u003e \u003cli\u003eDispatch an action from the \u003ccode\u003ecomponentDidMount\u003c/code\u003e lifecycle method.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eWe'll build out our app following the \u003cstrong\u003econtainer pattern\u003c/strong\u003e. We'll have one top-level component, \u003ccode\u003eApp\u003c/code\u003e, that connects to the store and gets data from the state via \u003ccode\u003emapStateToProps\u003c/code\u003e. \u003ccode\u003eApp\u003c/code\u003e will render a child presentational component, \u003ccode\u003eCatList\u003c/code\u003e, which will receive the list of cat pics from \u003ccode\u003eApp\u003c/code\u003e and render them in a series of \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tags.\u003c/p\u003e  \u003cp\u003eWe'll be getting our cat pics from a real API! Sort of. We made a very special API just for you to use with this lab (aren't you so lucky). We've got a GitHub repository set up with GitHub pages to deliver a JSON file. If you point your browser to \u003ca href=\"https://learn-co-curriculum.github.io/cat-api/cats.json\"\u003ehttps://learn-co-curriculum.github.io/cat-api/cats.json\u003c/a\u003e  you should see a JSON collection of 20 cat image objects. Now that we have a  source for the data, we'll need to set up Redux and Thunk.\u003c/p\u003e  \u003ch3\u003ePart 1: Set Up the Store and Reducer and Action Creator\u003c/h3\u003e  \u003ch4\u003eConfiguring the Store\u003c/h4\u003e  \u003cp\u003eFirst things first, use Redux's \u003ccode\u003ecreateStore()\u003c/code\u003e function to initialize your store in \u003ccode\u003esrc/index.js\u003c/code\u003e. To get Redux configured, we'll need to import \u003ccode\u003ecreateStore\u003c/code\u003e from \u003ccode\u003eredux\u003c/code\u003e and \u003ccode\u003eProvider\u003c/code\u003e from \u003ccode\u003ereact-redux\u003c/code\u003e. We'll also need to import a reducer. We haven't written it yet, but let's import from \u003ccode\u003esrc/reducers/catsReducer.js\u003c/code\u003e. We pass this reducer into \u003ccode\u003ecreateStore\u003c/code\u003e, assigning the return value to \u003ccode\u003estore\u003c/code\u003e. Then, we'll wrap the \u003ccode\u003eApp\u003c/code\u003e component in \u003ccode\u003eProvider\u003c/code\u003e and pass \u003ccode\u003estore\u003c/code\u003e to it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport App from './App';\u003cbr\u003e\u003cbr\u003eimport { Provider } from 'react-redux';\u003cbr\u003eimport { createStore } from 'redux';\u003cbr\u003eimport catsReducer from './reducers/catsReducer.js';\u003cbr\u003e\u003cbr\u003econst store = createStore(catsReducer)\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store}\u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt;,\u003cbr\u003e  document.getElementById('root')\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is the Redux configuration we've seen previously. To implement Thunk, we'll also need to import \u003ccode\u003eapplyMiddleware\u003c/code\u003e from \u003ccode\u003eredux\u003c/code\u003e and \u003ccode\u003ethunk\u003c/code\u003e from \u003ccode\u003eredux-thunk\u003c/code\u003e (package already included in \u003ccode\u003epackage.json\u003c/code\u003e). We pass \u003ccode\u003ethunk\u003c/code\u003e into \u003ccode\u003eapplyMiddleware()\u003c/code\u003e, and pass \u003cem\u003ethat\u003c/em\u003e in as the second argument for \u003ccode\u003ecreateStore\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport App from './App';\u003cbr\u003e\u003cbr\u003eimport { Provider } from 'react-redux';\u003cbr\u003eimport { createStore, applyMiddleware } from 'redux';\u003cbr\u003eimport thunk from 'redux-thunk';\u003cbr\u003eimport catsReducer from './reducers/catsReducer.js';\u003cbr\u003e\u003cbr\u003econst store = createStore(catsReducer, applyMiddleware(thunk))\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store}\u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt;,\u003cbr\u003e  document.getElementById('root')\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe have the setup for connecting Redux to the React app, and we've configured Thunk. Now, we need to build out the reducer.\u003c/p\u003e  \u003ch4\u003eSetting up the Reducer\u003c/h4\u003e  \u003cp\u003eFor our \u003ccode\u003ecatsReducer()\u003c/code\u003e function in \u003ccode\u003e./src/reducers/catsReducer.js\u003c/code\u003e, we'll want to set up a switch that handles two action types, \u003ccode\u003e'LOADING_CATS'\u003c/code\u003e and \u003ccode\u003e'ADD_CATS'\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/reducers/catsReducer.js\u003cbr\u003e\u003cbr\u003econst catsReducer = (state = { cats: [], loading: false }, action) =\u0026gt; {\u003cbr\u003e  switch(action.type) {\u003cbr\u003e    case 'LOADING_CATS':\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        cats: [...state.cats],\u003cbr\u003e        loading: true\u003cbr\u003e      }\u003cbr\u003e    case 'ADD_CATS':\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        cats: action.cats,\u003cbr\u003e        loading: false\u003cbr\u003e      }\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default catsReducer; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe also set up the initial state here. We can see that in the \u003ccode\u003e'LOADING_CATS'\u003c/code\u003e case, \u003ccode\u003estate.loading\u003c/code\u003e becomes \u003ccode\u003etrue\u003c/code\u003e, while the rest of \u003ccode\u003estate\u003c/code\u003e is just copied to a new object. In the \u003ccode\u003e'ADD_CATS'\u003c/code\u003e case, \u003ccode\u003estate.loading\u003c/code\u003e becomes \u003ccode\u003efalse\u003c/code\u003e, and \u003ccode\u003estate.cats\u003c/code\u003e is set to the \u003ccode\u003eaction.cats\u003c/code\u003e payload (HINT: so we know we're expecting a payload object with a \u003ccode\u003ecats\u003c/code\u003e key).\u003c/p\u003e  \u003ch4\u003eSetting up the Action Creator\u003c/h4\u003e  \u003cp\u003eNow, define your action creator function, \u003ccode\u003efetchCats()\u003c/code\u003e in \u003ccode\u003esrc/actions/catActions\u003c/code\u003e. Remember, Thunk alters the behavior of action creator functions, allowing us to \u003cem\u003ereturn\u003c/em\u003e a function that takes in \u003ccode\u003edispatch\u003c/code\u003e. Inside this function, we can execute asynchronous code, and, once resolved, we can use \u003ccode\u003edispatch\u003c/code\u003e to update our store with the remote data.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003efetchCats()\u003c/code\u003e action creator should use \u003ccode\u003efetch()\u003c/code\u003e to make the web request for your cat pic JSON. It should use a \u003ccode\u003e.then()\u003c/code\u003e function to parse the JSON of the response to this request, and another \u003ccode\u003e.then()\u003c/code\u003e function chained on that to grab the actual collection of cat pic image objects. Something like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efetch('https://learn-co-curriculum.github.io/cat-api/cats.json').then(response =\u0026gt; {\u003cbr\u003e  return response.json()\u003cbr\u003e}).then(responseJSON =\u0026gt; {\u003cbr\u003e  // instead of logging here, call dispatch and send the cat JSON data to your store\u003cbr\u003e  console.log(responseJSON.images)\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRemember, we built the \u003ccode\u003ecatsReducer\u003c/code\u003e to look for two action types. The first,  \u003ccode\u003e'LOADING_CATS'\u003c/code\u003e, should be dispatched \u003cem\u003ebefore\u003c/em\u003e the \u003ccode\u003efetch()\u003c/code\u003e request is called. The other type, \u003ccode\u003e'ADD_CATS'\u003c/code\u003e, should be dispatched along with a payload of the cats JSON collection. Judging by the case for \u003ccode\u003e'ADD_CATS'\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e...\u003cbr\u003ecase 'ADD_CATS':\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        cats: action.cats,\u003cbr\u003e        loading: false\u003cbr\u003e      } ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can see that the reducer is expecting an action that looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  type: 'ADD_CATS',\u003cbr\u003e  cats: // cat data from the cat API\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePutting what we know together, we can start by writing the basic function definition:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport const fetchCats = () =\u0026gt; {\u003cbr\u003e  return (dispatch) =\u0026gt; {\u003cbr\u003e\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe first thing we want to do in this function is send a \u003ccode\u003edispatch\u003c/code\u003e to indicate we're loading (fetching) the cats:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport const fetchCats = () =\u0026gt; {\u003cbr\u003e  return (dispatch) =\u0026gt; {\u003cbr\u003e    dispatch({ type: 'LOADING_CATS' })\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen, we call \u003ccode\u003efetch()\u003c/code\u003e, dispatching the returned data:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport const fetchCats = () =\u0026gt; {\u003cbr\u003e  return (dispatch) =\u0026gt; {\u003cbr\u003e    dispatch({ type: 'LOADING_CATS'})\u003cbr\u003e    fetch('https://learn-co-curriculum.github.io/cat-api/cats.json').then(response =\u0026gt; {\u003cbr\u003e      return response.json()\u003cbr\u003e    }).then(responseJSON =\u0026gt; {\u003cbr\u003e      dispatch({ type: 'ADD_CATS', cats: responseJSON.images })\u003cbr\u003e    })\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, we just need the data inside \u003ccode\u003eimages\u003c/code\u003e, so we can pass that directly when calling the second \u003ccode\u003edispatch\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003ePart 2: Build the Container Component\u003c/h3\u003e  \u003cp\u003eNow that Redux and Thunk are set up, it is time to display the retrieved data in our app. First, let's set up the \u003ccode\u003eApp\u003c/code\u003e component to read from our Redux store. We'll do this by first importing \u003ccode\u003econnect\u003c/code\u003e from \u003ccode\u003ereact-redux\u003c/code\u003e, wrapping the function around \u003ccode\u003eApp\u003c/code\u003e on the export line. Then, we'll write a \u003ccode\u003emapStateToProps()\u003c/code\u003e helper function. This function will be passed into \u003ccode\u003econnect\u003c/code\u003e. \u003ccode\u003econnect\u003c/code\u003e calls this function, passing in the state from the Redux store. Any key/value pairs returned by \u003ccode\u003emapStateToProps()\u003c/code\u003e will become props in the \u003ccode\u003eApp\u003c/code\u003e component. Once  all this is set up, let's also add a \u003ccode\u003econsole.log\u003c/code\u003e in the \u003ccode\u003erender\u003c/code\u003e method so we  can confirm Redux is correctly creating its initial state and that we're able  to access that state in our React components.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/App.js\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    console.log(this.props.catPics)\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;h1\u0026gt;CatBook\u0026lt;/h1\u0026gt;\u003cbr\u003e        {/* missing component */}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    catPics: state.cats,\u003cbr\u003e    loading: state.loading\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(App) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUsing the above code, you should see an empty array logged in the console when the app is launched. This is the empty \u003ccode\u003ecats\u003c/code\u003e array in our initial state, which  has been mapped to \u003ccode\u003ethis.props.catPics\u003c/code\u003e in \u003ccode\u003eApp\u003c/code\u003e.\u003c/p\u003e  \u003ch4\u003eDispatching the \u003ccode\u003efetchCats\u003c/code\u003e Action\u003c/h4\u003e  \u003cp\u003eThis is something new, so read carefully...\u003c/p\u003e  \u003cp\u003eYou might be wondering when/where we will actually dispatch our \u003ccode\u003efetchCats\u003c/code\u003e action to get all the cat pics into state. We want our cat pics to be fetched when the \u003ccode\u003eApp\u003c/code\u003e component is first loaded up. So, we'll enact a common pattern in which we hook into a component lifecycle method to fetch the cat pics.\u003c/p\u003e  \u003ch4\u003eThe \u003ccode\u003ecomponentDidMount\u003c/code\u003e function\u003c/h4\u003e  \u003cp\u003eThe \u003ccode\u003ecomponentDidMount()\u003c/code\u003e function will \u003cem\u003ealways be called automatically when the component is mounting for the first time\u003c/em\u003e. This is the perfect place to go and get the cat pics.\u003c/p\u003e  \u003cp\u003eWe need to define our \u003ccode\u003ecomponentDidMount()\u003c/code\u003e function so that it calls our \u003ccode\u003efetchCats()\u003c/code\u003e action creator. We also need to write out a \u003ccode\u003emapDispatchToProps()\u003c/code\u003e function so we can access the function as \u003ccode\u003ethis.props.fetchCats()\u003c/code\u003e inside the  component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/App.js\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003eimport { fetchCats } from './actions/catActions'\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  componentDidMount() {\u003cbr\u003e    console.log(this.props)\u003cbr\u003e    this.props.fetchCats()\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    console.log(this.props.catPics) // log will fire every time App renders\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;h1\u0026gt;CatBook\u0026lt;/h1\u0026gt;\u003cbr\u003e        {/* missing component */}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    catPics: state.cats,\u003cbr\u003e    loading: state.loading\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    fetchCats: () =\u0026gt; dispatch(fetchCats())\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003eexport default connect(mapStateToProps, mapDispatchToProps)(App) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAh! If we check the console, we'll see that \u003ccode\u003ethis.props.catPics\u003c/code\u003e is set to \u003ccode\u003e[]\u003c/code\u003e on the first two renders, but on the third, we see an array of 20 cat objects! Notice that we still can call \u003ccode\u003edispatch\u003c/code\u003e here, even though we're also calling \u003ccode\u003edispatch\u003c/code\u003e in our action creator.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eAside\u003c/strong\u003e: Why is \u003ccode\u003ethis.props.catPics\u003c/code\u003e set to \u003ccode\u003e[]\u003c/code\u003e on the first two renders? The first render is the initial render, so an empty \u003ccode\u003ecatPics\u003c/code\u003e array is always  expected. The \u003cem\u003esecond\u003c/em\u003e render, however, occurs when we send our \u003cem\u003efirst\u003c/em\u003e dispatch, \u003ccode\u003edispatch({type: 'LOADING_CATS'})\u003c/code\u003e, which happens before the fetch request is  executed. \u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eSo far, we have successfully fetched the cats and put them in state, then grabbed  them from state and passed them to the \u003ccode\u003eApp\u003c/code\u003e component as \u003ccode\u003ethis.props.catPics\u003c/code\u003e.  Now we're ready to build the \u003ccode\u003eCatList\u003c/code\u003e component.\u003c/p\u003e  \u003ch4\u003eThe Presentational Component\u003c/h4\u003e  \u003cp\u003eWe will leave the final task to you — building the \u003ccode\u003eCatList\u003c/code\u003e component. Your container component, \u003ccode\u003eApp\u003c/code\u003e, should render the \u003ccode\u003eCatList\u003c/code\u003e component. \u003ccode\u003eApp\u003c/code\u003e will pass \u003ccode\u003ecatPics\u003c/code\u003e down to \u003ccode\u003eCatList\u003c/code\u003e as a prop. \u003ccode\u003eCatList\u003c/code\u003e should iterate over the cat pics and display each cat pic in an image URL. Remember to use \u003ccode\u003edebugger\u003c/code\u003e to take a look at the \u003ccode\u003ecatPics\u003c/code\u003e collection and determine which property of each \u003ccode\u003ecatPic\u003c/code\u003e object you will use to populate your \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tag and render the image.  In order to get the tests to pass, you will need to wrap your \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tags in a  \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e tag or something similar.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWith all tests passing, you should have a working example of a React + Redux + Thunk application. Of the two components, one is purely presentational, just like a regular React app. The other connects to Redux, it's not any different than a  regular React + Redux app. Thunk lets us augment our action creators and handle  our asynchronous requests without requiring any major changes to other parts of  the application.\u003c/p\u003e  \u003ch2\u003eBonus\u003c/h2\u003e  \u003cp\u003eWhile we have a working application, there is one more thing we did not fully implement: handling loading. If you've followed the instructions, you should have access to \u003ccode\u003ethis.props.loading\u003c/code\u003e in your \u003ccode\u003eApp\u003c/code\u003e component. If we log this value, we should see that it starts off \u003ccode\u003efalse\u003c/code\u003e, then becomes \u003ccode\u003etrue\u003c/code\u003e briefly before switching back to \u003ccode\u003efalse\u003c/code\u003e again.\u003c/p\u003e  \u003cp\u003eWhile content is being fetched, it would be nice to show the user something. Spinning icons are often used, but even just a simple 'Loading...' is enough to show to the user that content is on the way.\u003c/p\u003e  \u003cp\u003eHow might we use the value of \u003ccode\u003ethis.props.loading\u003c/code\u003e to implement a loading message until the cat images arrive?\u003c/p\u003e","exportId":"g112f2a05e2e37700f50a586a64dbe366"}]},{"id":24150,"name":"Milestones","status":"completed","unlockDate":null,"prereqs":[],"requirement":"all","sequential":false,"exportId":"ge69913c504abda2f9c765fbffd87b152","items":[{"id":220998,"title":"Phase 4 Rubric","type":"Assignment","indent":0,"locked":false,"submissionTypes":null,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_mark_done","completed":true,"content":"\u003cp\u003e\u003cspan\u003eRead the rubric attached below.\u003c/span\u003e\u003c/p\u003e","exportId":"g22bbbfde2e00dfc32f23585d63ca3970"},{"id":221001,"title":"Phase 4 Code Challenge Instructions","type":"WikiPage","indent":0,"locked":false,"requirement":"must_mark_done","completed":true,"content":"\u003cp\u003eBefore you can start working on the code challenge, be sure to follow the steps below:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFind your code challenge in the Phase 2 Milestones module\u003c/li\u003e\n\u003cli\u003eOpen the code challenge assignment and download the linked ZIP file\u003c/li\u003e\n\u003cli\u003eUnzip the file on your computer\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;cd\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e into the directory in your terminal (after, run \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ls \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;; you should see a \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;bin/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory and a \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;file)\u003c/li\u003e\n\u003cli\u003eRun \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ruby bin/start \u0026lt;your-name\u0026gt;\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e from the directory; this will create a new directory called \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;cd\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e to and open the new \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory in your code editor\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo work on your code challenge:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eEnsure that you're in the\u0026nbsp;\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory\u003c/li\u003e\n\u003cli\u003eFollow the instructions in the \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;README.md \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;file\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;git add . \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;and \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;git commit \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;inside of the\u0026nbsp;\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory often as you're working\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo submit the code challenge:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eNavigate to the parent directory of \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;in your terminal.\u003c/li\u003e\n\u003cli\u003eRun \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ruby bin/end \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e, which will create a new file, \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;\u0026lt;your-name\u0026gt;.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;in that directory (for example, \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;alicia.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e).\u003c/li\u003e\n\u003cli\u003eNavigate back to the code challenge assignment in the Phase 2 Milestones module in Canvas\u003c/li\u003e\n\u003cli\u003eUpload \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;\u0026lt;your-name\u0026gt;.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;to the assignment and submit\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eReach out to your instructors\u0026nbsp;\u003cstrong\u003eimmediately\u0026nbsp;\u003c/strong\u003eif you run into issues downloading, working on, or uploading your code challenge.\u003c/p\u003e\n\u003cp\u003eUse this video to guide you through these instructions:\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.youtube-nocookie.com/embed/3AM3qXUtnQY\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\u003c/p\u003e","exportId":"phase-4-code-challenge-instructions"},{"id":221013,"title":"Phase 4 Code Challenge: Superheroines","type":"Assignment","indent":1,"locked":false,"submissionTypes":"a file upload","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":"must_submit","completed":true,"content":"\u003cp\u003e\u003ca class=\"instructure_file_link\" title=\"phase-2-superheroines-20200928.zip\" href=\"viewer/files/Uploaded%20Media/phase-2-superheroines-20200928.zip?canvas_download=1\u0026amp;canvas_qs_wrap=1\" target=\"_blank\" data-canvas-previewable=\"false\" data-api-endpoint=\"https://learning.flatironschool.com/api/v1/courses/3300/files/896754\" data-api-returntype=\"File\"\u003ephase-4-superheroines-20200928.zip\u003c/a\u003e\u003c/p\u003e","exportId":"g4c8ecc607f3a52cef0bf45216bddeec1"},{"id":229942,"title":"Phase 4 Project Requirements","type":"Assignment","indent":0,"locked":false,"submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null,"requirement":null,"completed":false,"content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Rails-project-requirements\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/Rails-project-requirements/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Rails-project-requirements\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Rails-project-requirements/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003cp\u003eYou've made it! You're ready to build a React application! Before you start ideating, think about some of the project requirements.\u003c/p\u003e\n\u003ch2\u003eRequirements\u003c/h2\u003e\n\u003cp\u003eYou've been through quite a few Project Modes by now and should have some idea how to think about scoping a project, what you can accomplish in the designated time, and what is expected of you in terms of meeting complexity requirements.\u003c/p\u003e\n\u003cp\u003eThe guidelines here are minimal but be sure that you:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eUse a \u003cem\u003eRails API backend\u003c/em\u003e with a separate \u003cem\u003eReact frontend\u003c/em\u003e that are created in two different Github repositories.\u003c/li\u003e\n\u003cli\u003eHave at least three resources (three DB tables) on the backend and your application must have full CRUD actions for at least one resource.\u003c/li\u003e\n\u003cli\u003eMust have at least two different \u003cem\u003eclient-side routes\u003c/em\u003e (i.e. use react-router). Ex: even if your whole app is mostly a single page app, have the form to signup be found at \u003ccode\u003e/signup\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eOptional:\u003c/strong\u003e Your application can have authentication/authorization. You are welcome to use an auth template as discussed in class.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIt is highly suggested that any calls to 3rd party APIs are made \u003cem\u003ethrough your backend\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eExample: A user clicks a button that says 'Get Gifs' * React makes a request to Rails * Rails makes a request to the Giphy API * Rails receives the response from Giphy and sends to React * React receives the response from Rails and you do something with it on the client\u003c/p\u003e\n\u003cp\u003eThis is so you can avoid any \u003cem\u003eCORS\u003c/em\u003e issues. If you are unable to hit an API from your React app due to a CORS restriction, it is very likely that it is impossible to do so. \u003cem\u003eBrief Refresher on CORS: the idea is that from one domain (the port your webpack development server is running on) you are not allowed to access another domain. You must make the request from a server (i.e. Rails), so the request is exempt from the Same-Origin Policy restriction.\u003c/em\u003e\u003c/p\u003e\n\u003ch2\u003eBackend Setup\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003erails new  --api -T --database=postgresql \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's go through this in detail:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e--api\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eMake a \u003ca href=\"http://edgeguides.rubyonrails.org/api_app.html\"\u003eRails 5 API\u003c/a\u003e, basically you're telling Rails you don't want any of the stuff you wouldn't need for an application where Rails is not rendering views. Think the ActionView library (\u003ccode\u003eform_for\u003c/code\u003e, \u003ccode\u003elink_to\u003c/code\u003e, etc..), ERB, Security protections that ensure forms were rendered by the Rails app, things like that.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e-T\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003edon't generate tests for this app\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e--database=postgresql\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eSet this up to use a Postgres (as opposed to SQLite) database. If you ever want to push this to Heroku, Heroku requires a Postgres database. There won't be too much difference in how you have to write your code. You'll have to be sure to run \u003ccode\u003erails db:create\u003c/code\u003e and make sure you have postgres running (i.e you can see the elephant)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eBe sure to do the necessary setup for the \u003ca href=\"https://github.com/cyu/rack-cors\"\u003erack-cors-gem\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eYou may want to use \u003ca href=\"https://github.com/rails-api/active_model_serializers/tree/0-10-stable\"\u003eactive-model-serializers\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eFrontend Setup\u003c/h2\u003e\n\u003cp\u003eTo create your React project, you may use a tool called \u003ca href=\"https://github.com/facebookincubator/create-react-app\"\u003ecreate-react-app\u003c/a\u003e, an awesome project generator developed by Facebook. To use this + \u003ccode\u003enpm install -g create-react-app\u003c/code\u003e - this installs the generator as a global package + In the directory where you'd like to create your project, \u003ccode\u003ecreate-react-app my-project-client\u003c/code\u003e. It's that simple!\u003c/p\u003e\n\u003cp\u003eWe'd recommend to begin by removing any of the default stuff given to you by Create React App that you do not understand. The following are some really great resources on how to think about setting up a React project (\u003cem\u003eSpoiler: They both say the same thing, \"There's no right answer!\"\u003c/em\u003e) * \u003ca href=\"https://github.com/reactjs/reactjs.org/blob/71788c647daa07392a8156609fdbede8e9ed24f7/content/docs/faq-structure.md\"\u003eReact Docs\u003c/a\u003e This was written by Dan Abramov himself \u0026lt;3 \u0026lt;3 \u0026lt;3.... * \u003ca href=\"https://hackernoon.com/the-100-correct-way-to-structure-a-react-app-or-why-theres-no-such-thing-3ede534ef1ed\"\u003eThe 100% Correct Way to Structure a React App (or why there’s no such thing)\u003c/a\u003e\u003c/p\u003e\n\u003ch2\u003eNotes\u003c/h2\u003e\n\u003cp\u003eBy default both your client app and your rails app will run on port 3000. You'll have to specify one or the other to run on a separate port. * Rails: \u003ccode\u003erails s -p \u0026lt;some_number_thats_not_3000\u0026gt;\u003c/code\u003e * React: Check out this \u003ca href=\"https://github.com/facebookincubator/create-react-app/issues/1083\"\u003eissue\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA great article on how \u003ca href=\"http://jeromedalbert.com/how-dhh-organizes-his-rails-controllers/\"\u003eDHH thinks about setting up controllers in Rails\u003c/a\u003e\u003c/p\u003e","exportId":"gec6c7b936b021c3efe5412755a705258"}]}],"pages":[{"exportId":"using-pure-functions-to-update-application-state","title":"Using Pure Functions to Update Application State","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-flow\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/redux-flow/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-flow\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-flow/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives:\u003c/h2\u003e\n\u003cp\u003eIn this lesson, you will learn the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLearn how pure functions update our application state.\u003c/li\u003e\n\u003cli\u003eLearn the fundamentals of the redux flow.\u003c/li\u003e\n\u003cli\u003eLearn how to adhere to the constraints of a pure function.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eReview\u003c/h2\u003e\n\u003cp\u003eSo far we know that all of our state is in a JavaScript object, and that our actions are in another JavaScript object called an action. Somehow the action updates our state.\u003c/p\u003e\n\u003cp\u003eLet's take a look at an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet state = {count: 0}\u003cbr\u003elet action = {type: 'INCREASE_COUNT'}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSomehow I want to send this action to the state so that at the end our state is updated to look like the following: \u003ccode\u003estate -\u0026gt; {count: 1}\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eBut how??\u003c/p\u003e\n\u003ch2\u003eFunctions to the Rescue\u003c/h2\u003e\n\u003cp\u003eThis seems easy enough. Why not just write a function that takes in our previous state, takes in our action, and depending on that action produces a new state. Here's what it could look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction changeState(state, action) {\u003cbr\u003e  if (action.type === 'INCREASE_COUNT') {\u003cbr\u003e    return {count: state.count + 1 }\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat's pretty straightforward code. If the action's type property is the String \u003ccode\u003e'INCREASE_COUNT'\u003c/code\u003e then go ahead and increment and return the new state.\u003c/p\u003e\n\u003cp\u003eThe important piece of information we looked at to determine how to change the state was \u003ccode\u003eaction.type\u003c/code\u003e. Actions always need a \u003ccode\u003etype\u003c/code\u003e property so the function knows what to do. If you can imagine a whole bunch of different actions that change the state in different ways, \u003ccode\u003e'DECREASE_COUNT'\u003c/code\u003e, \u003ccode\u003e'INCREASE_COUNT_BY_TEN'\u003c/code\u003e and so on, it shouldn't be hard to see how that code could become very messy with a bunch of \u003ccode\u003eif\u003c/code\u003es and \u003ccode\u003eelse if\u003c/code\u003es. Instead, it is customary to use a \u003ccode\u003eswitch case\u003c/code\u003e statement.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction changeState(state, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis makes it very explicit and clear that \u003ccode\u003eaction.type\u003c/code\u003e is the information we are switching on to make our decision on how to change the state.\u003c/p\u003e\n\u003cp\u003eWe'll talk about this more in-depth later, but it is important that when we change the state we never return \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003eundefined\u003c/code\u003e. We'll cover this by adding a \u003ccode\u003edefault\u003c/code\u003e case to our function.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction changeState(state, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis way, no matter what, when accessing the Redux state we'll always get some form of the state back.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet state = {count: 0}\u003cbr\u003elet action = {type: 'INCREASE_COUNT'}\u003cbr\u003e\u003cbr\u003echangeState(state, action)\u003cbr\u003e// =\u0026gt; {count: 1}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk, so if you copy and paste that code into a JavaScript console, you'll see that the function works just as we'd expect. The state and action are passed to our \u003ccode\u003echangeState function\u003c/code\u003e, which hits the \u003ccode\u003e'INCREASE_COUNT'\u003c/code\u003e case statement. Then it takes the state's count of zero, adds one to it, and returns a new object \u003ccode\u003e{count: 1}\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNow let's have this function respond to another action, decrease count. Give it a shot, the answer is below.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction changeState(state, action){      \u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    case 'DECREASE_COUNT':\u003cbr\u003e      return {count: state.count - 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet state = {count: 0}\u003cbr\u003e\u003cbr\u003echangeState(state, {type: 'INCREASE_COUNT'})\u003cbr\u003e// =\u0026gt; {count: 1}\u003cbr\u003e\u003cbr\u003echangeState(state, {type: 'DECREASE_COUNT'})\u003cbr\u003e// =\u0026gt; {count: -1}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk! That my friends, is the crux of redux. To summarize:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAction -\u0026gt; Function -\u0026gt; Updated State\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd let's give this function a name. Because it is combining two pieces of information, our current state and an action, reducing this combination into one value, we'll say that it \u003cem\u003ereduces\u003c/em\u003e the two into one updated state. For this reason, we call this function a reducer:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAction -\u0026gt; Reducer -\u0026gt; Updated State\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you learn more about redux, things may become more complex. Just remember that at the core of redux is always this flow. An action gets sent to a reducer which then updates the state of the application.\u003c/p\u003e\n\u003cp\u003eYou may notice a problem. While we can call the changeState reducer to increase the count from zero to one, if we call change state again we keep returning a count of one. In other words, we are not persisting this change of state. We'll tackle how this works in an upcoming section.\u003c/p\u003e\n\u003ch2\u003eReducers are pure functions\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003efunction reducer(state, action){      \u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    case 'DECREASE_COUNT':\u003cbr\u003e      return {count: state.count - 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAn important thing to note about reducers is that they are pure functions. Let's remember the characteristics of pure functions:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003ePure functions are only determined by their input values\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePure Functions have no side effects. By this we mean pure functions do not have any effect outside of the function. They only return a value.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: The reason we like pure functions so much is because if a function has no effect outside of the object, and if the function always returns the same value given a specific input, this means that our functions become really predictable. In addition, the lack of side effects means that the functions are also contained, and can be used safely without affecting the rest of your application.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLet's take these two characteristics of pure functions in turn, and ensure that we are adhering to them here.\u003c/p\u003e\n\u003cp\u003eOk, so the first characteristic of pure functions means that given the same input of the function, I will always receive the same output from that function. That seems to hold, given a specific state object like \u003ccode\u003e{count: 2}\u003c/code\u003e and an action object like \u003ccode\u003e{type: 'DECREASE_COUNT'}\u003c/code\u003e will I always get back the same value? Yes. Given those two arguments, the output will always be \u003ccode\u003e{count: 1}\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAs for the 'no side effects' characteristic, there's something pretty subtle going on in our reducer. The object returned is not the same object that is passed as an argument to the function, but rather a new object that is constructed each time our reducer is called. Do you see why? Take a close look at the line that says \u003ccode\u003ereturn {count: state.count + 1}\u003c/code\u003e. This line is constructing a new JavaScript object and setting its count attribute to equal the previous state's count plus one. So we adhere to the constraints of a pure function by not changing any value that is defined outside of the function.\u003c/p\u003e\n\u003ch2\u003eSummary\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eWe hold our application's state in one plain old JavaScript object, and we update that state by passing both an action and the old state to our reducer. Our reducer returns to us our new state.\u003c/li\u003e\n\u003cli\u003eSo to change our state we (1) create an action (an \u003cstrong\u003eaction\u003c/strong\u003e is just a plain object with a type key); and (2) and pass the action as an argument when we call the \u003cstrong\u003ereducer\u003c/strong\u003e (which is just a function with a switch/case statement). This produces a new state.\u003c/li\u003e\n\u003cli\u003eOur reducer is a pure function which means that given the same arguments of state and action, it will always produce the same new state. Also it means that our reducer never updates the previous state, but rather creates a new state object.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/redux-flow\"\u003eRedux Flow\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","frontPage":false},{"exportId":"active-record-validations","title":"Active Record Validations","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"activerecord-validations-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/activerecord-validations-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-validations-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-validations-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eActiveRecord can validate our models for us before they even touch the database. This means it's harder to end up with bad data, which can cause problems later even if our code is technically bug-free.\u003c/p\u003e  \u003cp\u003eWe can use \u003ccode\u003eActiveRecord::Base\u003c/code\u003e helper methods like \u003ccode\u003e#validates\u003c/code\u003e to set things up.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eAfter this lesson, you should be able to:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eIdentify when validation occurs in the lifespan of an object\u003c/li\u003e \u003cli\u003eIntrospect on the \u003ccode\u003eActiveRecord::Errors\u003c/code\u003e collection object on an AR instance  \u003cul\u003e \u003cli\u003euse \u003ccode\u003e#valid?\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003euse \u003ccode\u003e#errors\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003eGenerate \u003ccode\u003efull_message\u003c/code\u003es for errors\u003c/li\u003e \u003cli\u003eCheck an attribute for validation errors\u003c/li\u003e \u003cli\u003eAdd a custom validation error to an AR model\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eContext: Databases and Data Validity\u003c/h2\u003e  \u003cp\u003eWhat is a \"validation\"?\u003c/p\u003e  \u003cp\u003eIn the context of Rails, validations are special method calls that go at the top of model class definitions and prevent them from being saved to the database if their data doesn't look right.\u003c/p\u003e  \u003cp\u003eIn general, \"validations\" are any code that perform the job of protecting the database from invalid data.\u003c/p\u003e  \u003ch3\u003eAR Validations Are Not Database Constraints (Validations)\u003c/h3\u003e  \u003cp\u003eMany relational databases, such as SQLite and PostgreSQL, have data validation features that check things like length and data type. These validations are typically added via migrations, and depending on the specific validation, they may or may not be reflected in the schema.rb file.\u003c/p\u003e  \u003cp\u003eDatabase constraints and model validations are also functionally different. Database constraints will ALWAYS be checked when adding or updating data in the database, while AR validations will only be checked when adding or updating data through Ruby/Rails (e.g. if we use SQL code in the command line to modify the database, AR validations are not run).\u003c/p\u003e  \u003cp\u003eSome developers use database constraints and AR validations, while others rely on AR validations alone. Ultimately, it depends on how the developer plans to add and update data in the database. In this lesson, we'll be focusing on AR validations.\u003c/p\u003e  \u003ch3\u003eWhat is \"invalid data\"?\u003c/h3\u003e  \u003cp\u003eSuppose you get a new phone and you ask all of your friends for their phone number again. One of them tells you, \"555-868-902\". If you're paying attention, you'll probably wrinkle your nose and think, \"Wait a minute. That doesn't sound like a real phone number.\"\u003c/p\u003e  \u003cp\u003e\"555-868-902\" is an example of \u003cstrong\u003einvalid data\u003c/strong\u003e... for a phone number. It's probably a valid account number for some internet service provider in Alaska, but there's no way to figure out what your friend's phone number is from those nine numbers. It's a showstopper, and even worse, it kind of looks like valid data if you're not looking closely.\u003c/p\u003e  \u003ch3\u003eValidations Protect the Database\u003c/h3\u003e  \u003cp\u003eInvalid data is the bogeyman of web applications: it hides in your database until the worst possible moment, then jumps out and ruins everything by causing confusing errors.\u003c/p\u003e  \u003cp\u003eImagine the phone number above being saved to the database in an application that makes automatic calls using the Twilio API. When your system tries to call this number, there will be an error because no such phone number exists, which means you need to have an entire branch of code dedicated to handling \u003cem\u003ejust\u003c/em\u003e that edge case.\u003c/p\u003e  \u003cp\u003eIt would be much easier if you never have bad data in the first place, so you can focus on handling edge cases that are truly unpredictable.\u003c/p\u003e  \u003cp\u003eThat's where validations come in.\u003c/p\u003e  \u003ch2\u003eBasic Usage\u003c/h2\u003e  \u003cp\u003eFor more examples of basic validation usage, see the Rails Guide for \u003ca href=\"http://guides.rubyonrails.org/active_record_validations.html\"\u003eActive Record Validations\u003c/a\u003e. Take a few minutes to browse the helpers listed in Section 2.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Person \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates :name, presence: true\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003ePerson.create(name: \"John Doe\").valid? # =\u0026gt; true\u003cbr\u003ePerson.create(name: nil).valid? # =\u0026gt; false \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003e#validates\u003c/code\u003e is our Swiss Army knife for validations. It takes two arguments: the first is the name of the attribute we want to validate, and the second is a hash of options that will include the details of how to validate it.\u003c/p\u003e  \u003cp\u003eIn this example, the options hash is \u003ccode\u003e{ presence: true }\u003c/code\u003e, which implements the most basic form of validation, preventing the object from being saved if its \u003ccode\u003ename\u003c/code\u003e attribute is empty.\u003c/p\u003e  \u003ch2\u003eLifecycle Timing\u003c/h2\u003e  \u003cp\u003eBefore proceeding, keep the answer to this question in mind:\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eWhat is the difference between \u003ccode\u003e#new\u003c/code\u003e and \u003ccode\u003e#create\u003c/code\u003e?\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eIf you've forgotten, \u003ccode\u003e#new\u003c/code\u003e instantiates a new ActiveRecord model \u003cem\u003ewithout\u003c/em\u003e saving it to the database, whereas \u003ccode\u003e#create\u003c/code\u003e immediately attempts to save it, as if you had called \u003ccode\u003e#new\u003c/code\u003e and then \u003ccode\u003e#save\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eDatabase activity triggers validation\u003c/strong\u003e. An ActiveRecord model instantiated with \u003ccode\u003e#new\u003c/code\u003e will not be validated, because no attempt to write to the database was made. Validations won't run unless you call a method that actually hits the DB, like \u003ccode\u003e#save\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe only way to trigger validation without touching the database is to call the \u003ccode\u003e#valid?\u003c/code\u003e method.\u003c/p\u003e  \u003cp\u003eFor a full list of methods that trigger validation, see \u003ca href=\"http://guides.rubyonrails.org/active_record_callbacks.html#running-callbacks\"\u003eSection 4\u003c/a\u003e of the Rails Guide for Active Record Callbacks. Don't worry about the rest of the information in that guide just yet; we'll go into callbacks later!\u003c/p\u003e  \u003ch2\u003eValidation Failure\u003c/h2\u003e  \u003cp\u003eHere it is, the moment of truth. What can we do when a record fails validation?\u003c/p\u003e  \u003ch3\u003eHow can you tell when a record fails validation?\u003c/h3\u003e  \u003cp\u003e\u003cstrong\u003ePay attention to return values!\u003c/strong\u003e\u003c/p\u003e  \u003cp\u003eBy default, ActiveRecord does not raise an exception when validation fails.  DB operation methods (such as \u003ccode\u003e#save\u003c/code\u003e) will simply return \u003ccode\u003efalse\u003c/code\u003e and decline to update the database.\u003c/p\u003e  \u003cp\u003eEvery database method has a sister method with a \u003ccode\u003e!\u003c/code\u003e at the end which will raise an exception (\u003ccode\u003e#create!\u003c/code\u003e instead of \u003ccode\u003e#create\u003c/code\u003e and so on).\u003c/p\u003e  \u003cp\u003eAnd of course, you can always check manually with \u003ccode\u003e#valid?\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Person \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates :name, presence: true\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eperson = Person.new\u003cbr\u003eperson.valid? #=\u0026gt; false\u003cbr\u003eperson.save #=\u0026gt; false\u003cbr\u003eperson.save! #=\u0026gt; EXCEPTION \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eFinding out why validations failed\u003c/h3\u003e  \u003cp\u003eTo find out what went wrong, you can look at the model's \u003ccode\u003e#errors\u003c/code\u003e object.\u003c/p\u003e  \u003cp\u003eYou can check all errors at once by examining \u003ccode\u003eerrors.messages\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eperson = Person.new\u003cbr\u003eperson.errors.messages #=\u0026gt; empty\u003cbr\u003eperson.valid? #=\u0026gt; false\u003cbr\u003eperson.errors.messages #=\u0026gt; name: can't be blank \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou can check one attribute at a time by passing the name to \u003ccode\u003eerrors\u003c/code\u003e as a key, like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eperson.errors[:name] \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDisplaying Validation Errors in Views\u003c/h2\u003e  \u003cp\u003eSee \u003ca href=\"http://guides.rubyonrails.org/active_record_validations.html#displaying-validation-errors-in-views\"\u003eSection 8\u003c/a\u003e of the Rails Guide for an example of how to use the \u003ccode\u003eActiveModel::Errors#full_messages\u003c/code\u003e helper, reproduced here for convenience:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% if @article.errors.any? %\u0026gt;\u003cbr\u003e  \u0026lt;div id=\"error_explanation\"\u0026gt;\u003cbr\u003e    \u0026lt;h2\u0026gt;\u003cbr\u003e      \u0026lt;%= pluralize(@article.errors.count, \"error\") %\u0026gt;\u003cbr\u003e      prohibited this article from being saved:\u003cbr\u003e    \u0026lt;/h2\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;ul\u0026gt;\u003cbr\u003e    \u0026lt;% @article.errors.full_messages.each do |msg| %\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;\u0026lt;%= msg %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;% end %\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis constructs more complete-looking sentences from the more terse messages available in \u003ccode\u003eerrors.messages\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eOther Built-in Validators\u003c/h2\u003e  \u003cp\u003eRails has a host of built-in helpers.\u003c/p\u003e  \u003ch3\u003eLength\u003c/h3\u003e  \u003cp\u003e\u003ccode\u003elength\u003c/code\u003e is one of the most versatile:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Person \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates :name, length: { minimum: 2 }\u003cbr\u003e  validates :bio, length: { maximum: 500 }\u003cbr\u003e  validates :password, length: { in: 6..20 }\u003cbr\u003e  validates :registration_number, length: { is: 6 }\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003ein\u003c/code\u003e argument makes use of a \u003ca href=\"http://ruby-doc.org/core/Range.html\"\u003eRange\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eRemember that there's no syntactical magic happening with any of these method calls. If we weren't using Ruby's \"poetry mode\" (which is considered standard for Rails), the above code would look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Person \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates(:name, { :length =\u0026gt; { :minimum =\u0026gt; 2 } })\u003cbr\u003e  validates(:bio, { :length =\u0026gt; { :maximum =\u0026gt; 500 } })\u003cbr\u003e  validates(:password, { :length =\u0026gt; { :in =\u0026gt; 6..20 } })\u003cbr\u003e  validates(:registration_number, { :length =\u0026gt; { :is =\u0026gt; 6 } })\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePhew!\u003c/p\u003e  \u003ch3\u003eUniqueness\u003c/h3\u003e  \u003cp\u003eAnother common built-in validator is \u003ccode\u003euniqueness\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Account \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates :email, uniqueness: true\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will prevent any account from being created with the same email as another already-existing account.\u003c/p\u003e  \u003ch3\u003eCustom Messages\u003c/h3\u003e  \u003cp\u003eThis isn't a validator in its own right, but a handy convenience option for specifying your own error messages:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Person \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates :not_a_robot, acceptance: true, message: \"Humans only!\"\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003ch3\u003eCustom Validators\u003c/h3\u003e  \u003cp\u003eThere are three ways to implement custom validators, with examples in \u003ca href=\"http://guides.rubyonrails.org/active_record_validations.html#performing-custom-validations\"\u003eSection 6\u003c/a\u003e of the Rails Guide.\u003c/p\u003e  \u003cp\u003eOf the three, \u003ccode\u003e#validate\u003c/code\u003e is the simplest. If your validation needs become more complex, consult the documentation. For \u003cem\u003emost\u003c/em\u003e validations, though, the following method should be good enough.\u003c/p\u003e  \u003col\u003e \u003cli\u003eCreate a new directory in \u003ccode\u003eapp\u003c/code\u003e called \u003ccode\u003evalidators\u003c/code\u003e. Because most Rails developers don't need to write custom validation, this directory is \u003cstrong\u003enot\u003c/strong\u003e created by default like \u003ccode\u003emodels\u003c/code\u003e or \u003ccode\u003econtrollers\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eIdentify the ActiveRecord attribute you want to validate. Is it the \u003ccode\u003eemail\u003c/code\u003e or the \u003ccode\u003elast_name\u003c/code\u003e on the \u003ccode\u003ePerson\u003c/code\u003e class, for example?\u003c/li\u003e \u003cli\u003eCreate a new file in the \u003ccode\u003eapp/validators\u003c/code\u003e directory of the form attribute (from the previous step) + \u003ccode\u003e_validator.rb\u003c/code\u003e. So in the case of validating an attribute called \u003ccode\u003eemail\u003c/code\u003e, create a file \u003ccode\u003eapp/validators/email_validator.rb\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eInside the new file, define the class. The class name should match the file name of the file, but \"Camel-Cased.\" So \u003ccode\u003eemail_validator\u003c/code\u003e should be class \u003ccode\u003eEmailValidator\u003c/code\u003e. The class should inherit from \u003ccode\u003eActiveModel::Validator\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eThe validator class must have one instance method, \u003ccode\u003e#validate\u003c/code\u003e. This method will receive one argument typically called \u003ccode\u003erecord\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eInside of \u003ccode\u003e#validate\u003c/code\u003e, you'll be able to get properties from \u003ccode\u003erecord\u003c/code\u003e and determine \u003cstrong\u003e\u003cem\u003ewhether it is invalid\u003c/em\u003e\u003c/strong\u003e. If the record is \u003cstrong\u003einvalid\u003c/strong\u003e, push (\u003ccode\u003e\u0026amp;lt;\u0026amp;lt;\u003c/code\u003e) to \u003ccode\u003erecord.errors[:attribute]\u003c/code\u003e e.g. \u003ccode\u003erecord.errors[:email]\u003c/code\u003e a \u003ccode\u003eString\u003c/code\u003e which is a message that you want to display that describes why the message is not valid.\u003c/li\u003e \u003cli\u003eLastly, in the implementation of the class being validated e.g. \u003ccode\u003ePerson\u003c/code\u003e, add:  \u003col\u003e \u003cli\u003eAn \u003ccode\u003einclude\u003c/code\u003e of ActiveModel::Validations\u003c/li\u003e \u003cli\u003eThe helper call: \u003ccode\u003evalidates_with (className)\u003c/code\u003e. In our example we'd put, \u003ccode\u003evalidates_with EmailValidator\u003c/code\u003e (see step 4, above)\u003c/li\u003e \u003c/ol\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eThe result of these steps should be the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass EmailValidator \u0026lt; ActiveModel::Validator\u003cbr\u003e  def validate(record)\u003cbr\u003e    unless record.email.match?(/flatironschool.com/)\u003cbr\u003e      record.errors[:email] \u0026lt;\u0026lt; \"We're only allowed to have people who work for the company in the database!\"\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Person\u003cbr\u003e  include ActiveModel::Validations\u003cbr\u003e  validates_with EmailValidator\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we validate that all email addresses are in the \u003ccode\u003eflatironschool.com\u003c/code\u003e domain.\u003c/p\u003e","frontPage":false},{"exportId":"phase-4-code-challenge-instructions","title":"Phase 4 Code Challenge Instructions","type":"WikiPage","content":"\u003cp\u003eBefore you can start working on the code challenge, be sure to follow the steps below:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFind your code challenge in the Phase 2 Milestones module\u003c/li\u003e\n\u003cli\u003eOpen the code challenge assignment and download the linked ZIP file\u003c/li\u003e\n\u003cli\u003eUnzip the file on your computer\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;cd\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e into the directory in your terminal (after, run \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ls \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;; you should see a \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;bin/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory and a \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;file)\u003c/li\u003e\n\u003cli\u003eRun \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ruby bin/start \u0026lt;your-name\u0026gt;\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e from the directory; this will create a new directory called \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;cd\u0026nbsp;\u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e to and open the new \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory in your code editor\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo work on your code challenge:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eEnsure that you're in the\u0026nbsp;\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory\u003c/li\u003e\n\u003cli\u003eFollow the instructions in the \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;README.md \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;file\u003c/li\u003e\n\u003cli\u003e\n\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;git add . \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;and \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;git commit \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;inside of the\u0026nbsp;\u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;directory often as you're working\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo submit the code challenge:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eNavigate to the parent directory of \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;code-challenge/ \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;in your terminal.\u003c/li\u003e\n\u003cli\u003eRun \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;ruby bin/end \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e, which will create a new file, \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;\u0026lt;your-name\u0026gt;.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;in that directory (for example, \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;alicia.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e).\u003c/li\u003e\n\u003cli\u003eNavigate back to the code challenge assignment in the Phase 2 Milestones module in Canvas\u003c/li\u003e\n\u003cli\u003eUpload \u003cspan style=\"background-color: #fbeeb8;\"\u003e\u003cstrong\u003e\u003cspan style=\"font-family: 'courier new', courier;\"\u003e\u0026nbsp;\u0026lt;your-name\u0026gt;.bundle \u003c/span\u003e\u003c/strong\u003e\u003c/span\u003e\u0026nbsp;to the assignment and submit\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eReach out to your instructors\u0026nbsp;\u003cstrong\u003eimmediately\u0026nbsp;\u003c/strong\u003eif you run into issues downloading, working on, or uploading your code challenge.\u003c/p\u003e\n\u003cp\u003eUse this video to guide you through these instructions:\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://www.youtube-nocookie.com/embed/3AM3qXUtnQY\" width=\"560\" height=\"315\" allowfullscreen=\"allowfullscreen\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\u003e\u003c/iframe\u003e\u003c/p\u003e","frontPage":false},{"exportId":"creating-a-rails-api-from-scratch","title":"Creating a Rails API from Scratch","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-creating-a-rails-api-from-scratch\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-creating-a-rails-api-from-scratch/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-creating-a-rails-api-from-scratch\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-creating-a-rails-api-from-scratch/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate an API-Only Rails Build\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the last few lessons, we saw how we can easily adapt the MVC structure of\nRails to render JSON. Rails is flexible enough to be able to respond to\ndifferent formats, and is ready to do so out of the box. For the purposes of\nbuilding applications in JavaScript and frameworks like React, though, we\nspecifically need it to act as an API that responds with JSON.\u003c/p\u003e\n\n\u003cp\u003eWhen first building a Rails application, it is possible to flag that the\napplication should be API-only. In this lesson, we will take a look at what this\nmeans and how it provides us with some useful automatic configurations.\u003c/p\u003e\n\n\u003ch2\u003eUsing the \u003ccode\u003e--api\u003c/code\u003e Flag\u003c/h2\u003e\n\n\u003cp\u003eTo create an API-only Rails build from scratch, include the \u003ccode\u003e--api\u003c/code\u003e after the\nname of the Rails application name upon creation:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erails new bird-watcher-api --api\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy using the \u003ccode\u003e--api\u003c/code\u003e flag, Rails will remove a lot of default features and\nmiddleware, mostly related to the browser, since it won't be needed. Controllers\nwill inherit from \u003ccode\u003eActionController::API\u003c/code\u003e rather than \u003ccode\u003eActionController::Base\u003c/code\u003e\nand generators will skip generating views.\u003c/p\u003e\n\n\u003cp\u003eOne noticeable change - some browser errors will disappear. Normally, when a Rails\nserver is running, it produces an error message in browser when something goes\nwrong while attempting to render. Since there is no way to render views in this\nAPI-only build, if the Rails API fails and we visit it in browser, it will just\nshow a blank screen.\u003c/p\u003e\n\n\u003cp\u003eNo changes are required when setting up resources for an API-only Rails build.\u003c/p\u003e\n\n\u003ch2\u003eFrom Beginning to End\u003c/h2\u003e\n\n\u003cp\u003eWe've gone over the pieces of building an API, so to briefly summarize what\nwe've done in the last few lessons combined with this new knowledge, first we\ncreate the API-only Rails build:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erails new bird-watcher-api --api\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, navigate into the new Rails application once created. Rather than create\n\u003cem\u003eeverything\u003c/em\u003e by hand this time, we can use a generator to help us out with\nresources.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erails g resource bird name species\u003cbr\u003erails g resource location latitude longitude\u003cbr\u003erails g resource sighting bird:references location:references\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will create three migrations, three models, and three empty controllers. With\nminimal seed data we could then test that everything was working as expected:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebird_a = Bird.create(name: \"Black-Capped Chickadee\", species: \"Poecile Atricapillus\")\u003cbr\u003ebird_b = Bird.create(name: \"Grackle\", species: \"Quiscalus Quiscula\")\u003cbr\u003ebird_c = Bird.create(name: \"Common Starling\", species: \"Sturnus Vulgaris\")\u003cbr\u003ebird_d = Bird.create(name: \"Mourning Dove\", species: \"Zenaida Macroura\")\u003cbr\u003e\u003cbr\u003elocation_a = Location.create(latitude: \"40.730610\", longitude: \"-73.935242\")\u003cbr\u003elocation_b = Location.create(latitude: \"30.26715\", longitude: \"-97.74306\")\u003cbr\u003elocation_c = Location.create(latitude: \"45.512794\", longitude: \"-122.679565\")\u003cbr\u003e\u003cbr\u003esighting_a = Sighting.create(bird: bird_a, location: location_a)\u003cbr\u003esighting_b = Sighting.create(bird: bird_b, location: location_b)\u003cbr\u003esighting_c = Sighting.create(bird: bird_c, location: location_c)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen the controller actions we want in the API will need to be added:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  sightings = Sighting.all\u003cbr\u003e  render json: sightings, include: [:bird, :location]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSince the \u003ccode\u003eresource\u003c/code\u003e generator was used, it would be good to be diligent and\nclean up \u003ccode\u003econfig/routes.rb\u003c/code\u003e once we've decided what endpoints the API should\nhave.\u003c/p\u003e\n\n\u003ch2\u003eA Note While Developing APIs - Dealing with CORS\u003c/h2\u003e\n\n\u003cp\u003eWhile working on your own APIs, you'll typically want to have your Rails server\nrunning while also trying out various endpoints using \u003ccode\u003efetch()\u003c/code\u003e. In order to do\nthis, though, you will need deal with \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eCross-Origin Resource Sharing\u003c/a\u003e, or CORS.\u003c/p\u003e\n\n\u003cp\u003eCORS is designed to prevent scripts like \u003ccode\u003efetch()\u003c/code\u003e from one origin accessing a\nresource from a different origin unless that resource specifically states that\nit expects to share. So, for instance, if you have run the command \u003ccode\u003erails\nserver\u003c/code\u003e with your server running at \u003ccode\u003ehttp://localhost:3000\u003c/code\u003e, then go to\n'\u003ca href=\"http://www.google.com,\"\u003ewww.google.com,\u003c/a\u003e' open the browser console and attempt to send a \u003ccode\u003efetch()\u003c/code\u003e to your\nserver. The browser considers these two different origins, and will \u003cem\u003erefuse\u003c/em\u003e\nyour request.\u003c/p\u003e\n\n\u003cp\u003eA solution is already provided though. By using the \u003ccode\u003e--api\u003c/code\u003e flag, the \u003ccode\u003eGemfile\u003c/code\u003e\nwas altered to include the \u003ca href=\"https://github.com/cyu/rack-cors\"\u003e\u003ccode\u003erack-cors\u003c/code\u003e\u003c/a\u003e gem. The gem will be commented out initially:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# Use Rack CORS for handling Cross-Origin Resource Sharing (CORS), making cross-origin AJAX possible\u003cbr\u003e# gem 'rack-cors'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo get \u003ccode\u003erack-cors\u003c/code\u003e working, uncomment the gem and run \u003ccode\u003ebundle install\u003c/code\u003e. Then, add the following to\n\u003ccode\u003econfig/application.rb\u003c/code\u003e \u003cstrong\u003einside\u003c/strong\u003e \u003ccode\u003eclass Application \u0026lt; Rails::Application\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e config.middleware.insert_before 0, Rack::Cors do\u003cbr\u003e      allow do\u003cbr\u003e        origins '*'\u003cbr\u003e        resource '*',\u003cbr\u003e          :headers =\u0026gt; :any,\u003cbr\u003e          :methods =\u0026gt; [:get, :post, :delete, :put, :patch, :options, :head],\u003cbr\u003e          :max_age =\u0026gt; 0\u003cbr\u003e      end\u003cbr\u003e    end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis shouldn't replace anything else inside \u003ccode\u003eclass Application \u0026lt; Rails::Application\u003c/code\u003e,\njust be included in addition.\u003c/p\u003e\n\n\u003cp\u003eThis will allow you to test your APIs while developing them locally. Secretly,\n\u003ccode\u003erack-cors\u003c/code\u003e has been bundled with the last set of lessons to ensure they were\nall working smoothly in case you decided to code along and spin up a rudimentary\nAPI.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWARNING:\u003c/strong\u003e Disabling CORS altogether in the long term can leave your server\nunsecure. Check out the documentation on \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eCORS\u003c/a\u003e and \u003ca href=\"https://github.com/cyu/rack-cors\"\u003e\u003ccode\u003erack-cors\u003c/code\u003e\u003c/a\u003e for\nadditional information.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith CORS enabled and your resources configured, you should be able to now\nrun \u003ccode\u003erails server\u003c/code\u003e, start up your API and begin sending requests to it. \u003c/p\u003e\n\n\u003cp\u003eYou have all that you need to get your own API-only Rails builds into\ndevelopment. If you can think of something that can be turned into an API, you\nnow have the power to spin one up in short order.\u003c/p\u003e\n\n\u003cp\u003eWith the ability to create APIs, we will take a closer look at shaping them.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://guides.rubyonrails.org/api_app.html\"\u003eUsing Rails for API-Only Applications\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eCORS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"review-and-dive-into-actions","title":"Review and Dive into Actions","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-action-creators\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/redux-action-creators/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-action-creators\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-action-creators/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003cp\u003eIn this lesson, we will discuss: * The properties of an action * How to use action creators to create an action.\u003c/p\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eActions are just \u003cstrong\u003ePlain Old JavaScript Objects\u003c/strong\u003e (POJOs), but that doesn't mean we should ignore them. In this section, we'll discuss the properties of actions, and how to use functions to create actions.\u003c/p\u003e\n\u003ch2\u003ePurpose of Actions\u003c/h2\u003e\n\u003cp\u003eSo as you know, we've been dispatching actions to our store to indicate the changes we would make to our state. In this way, actions almost feel like the request object or the parameters hash that you would see in a web application like Ruby on Rails.\u003c/p\u003e\n\u003cp\u003eIn \u003cstrong\u003eRails\u003c/strong\u003e, a user clicking on a link kicks off a request, and that request is ultimately passed to the controller, which is responsible for changing the database. In \u003cstrong\u003eRedux\u003c/strong\u003e, a user may click on a button which dispatches an action, and the reducer would take information from that action to change the state. You saw in the last section that simply by placing a \u003cstrong\u003econsole.log\u003c/strong\u003e in our reducer, we could see a history of every action that was passed to the reducer, making our debugging job easier.\u003c/p\u003e\n\u003ch2\u003eStructuring Actions\u003c/h2\u003e\n\u003cp\u003eNow an action is simply a POJO that has a property of type. The reducer uses this type property to see what it should do. Here is an example of a valid action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst increaseCount = { type: 'INCREASE_COUNT' }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemember that the store has a dispatch method which we can now use to dispatch this action for it to be handled by the reducer.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estore.dispatch(increaseCount)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe dispatch method passes the action to the reducer, which then runs its switch statement to decide what to do.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cbr\u003efunction dispatch(action) {\u003cbr\u003e  reducer(state, action)\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction reducer(state = {\u003cbr\u003e  count: 0,\u003cbr\u003e}, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eAction Creators\u003c/h2\u003e\n\u003cp\u003eOk, now we know that our actions are simply a POJO with at least one property called type. An example of using our actions is \u003ccode\u003estore.dispatch({ type:\n'INCREASE_COUNT' })\u003c/code\u003e. Well what if we do the following.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cbr\u003efunction increaseCount() {\u003cbr\u003e  return { type: 'INCREASE_COUNT' };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003estore.dispatch(increaseCount());\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk, so in the above lines of code we define a function called \u003ccode\u003eincreaseCount()\u003c/code\u003e whose job it is to return an action. Then we execute the \u003ccode\u003eincreaseCount()\u003c/code\u003e function, which returns that action, and we dispatch that action to the store. If you think that this is equivalent to \u003ccode\u003estore.dispatch({\ntype: 'INCREASE_COUNT' })\u003c/code\u003e, you are right.\u003c/p\u003e\n\u003cp\u003eWe prefer wrapping our actions in a function, because oftentimes our actions have some parts that will need to change, and a function comes in handy. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction addTodo(todo) {\u003cbr\u003e  return {\u003cbr\u003e    type: 'ADD_TODO',\u003cbr\u003e    todo: todo\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo in the above function, we can imagine generating actions with different payload properties depending on what we pass to the addTodo function.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eaddTodo('buy groceries');\u003cbr\u003e// -\u0026gt; { type: 'ADD_TODO', todo: 'buy groceries' }\u003cbr\u003e\u003cbr\u003eaddTodo('watch netflix');\u003cbr\u003e// -\u0026gt; { type: 'ADD_TODO', todo: 'watch netflix' }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo essentially by wrapping our action in a function, we are able to easily keep some of the action properties the same, like type, while changing others, like todo. We would dispatch the action in the following way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estore.dispatch(addTodo('buy groceries'));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat would return the action \u003ccode\u003e{ type: 'ADD_TODO', todo: 'buy groceries' }\u003c/code\u003e, which we then send to the dispatch function.\u003c/p\u003e","frontPage":false},{"exportId":"forms-and-basic-associations-in-rails","title":"Forms And Basic Associations in Rails","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"forms-and-basic-associations-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/forms-and-basic-associations-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/forms-and-basic-associations-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003ePopulate select options based on association options.\u003c/li\u003e \u003cli\u003eAssign a foreign key based on an input box value directly through mass assignment (\u003ccode\u003epost[category_id]\u003c/code\u003e).\u003c/li\u003e \u003cli\u003eDefine a belongs_to association writer.\u003c/li\u003e \u003cli\u003eBuild a form field that will delegate to a belongs\u003cem\u003eto association writer (`post#category\u003c/em\u003ename=`) through controller mass assignment.\u003c/li\u003e \u003cli\u003eDefine a has_many association writer.\u003c/li\u003e \u003cli\u003eBuild a form field that will delegate to a has\u003cem\u003emany association writer (`category#post\u003c/em\u003eids=`) through controller mass assignment.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eThe problem\u003c/h2\u003e  \u003cp\u003eLet's say we have a simple blogging system. Our models are Post and Category. A Post \u003ccode\u003ebelongs_to\u003c/code\u003e a Category.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/post.rb\u003cbr\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e  belongs_to :category\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e# app/models/category.rb\u003cbr\u003eclass Category \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :posts\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we need to build the functionality for a user to create a Post. We're going to need a form for the Post's content, and some way to represent what Category the Post belongs to.\u003c/p\u003e  \u003ch2\u003eUsing the category ID\u003c/h2\u003e  \u003cp\u003eAs a first pass, we might build a form like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label :category_id, :category %\u0026gt;\u0026lt;%= f.text_field :category_id %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :content %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will work if we wire up our \u003ccode\u003ePostsController\u003c/code\u003e with the right parameters:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass PostsController \u0026lt; ApplicationController\u003cbr\u003e  def create\u003cbr\u003e    Post.create(post_params)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def post_params\u003cbr\u003e    params.require(:post).permit(:category_id, :content)\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut as a user experience, this is miserable. I have to know the ID of the category I want to use. As a user, it is very unlikely that I know this or want to.\u003c/p\u003e  \u003cp\u003eWe could rewrite our controller to accept a \u003ccode\u003ecategory_name\u003c/code\u003e instead of an ID:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass PostsController \u0026lt; ApplicationController\u003cbr\u003e  def create\u003cbr\u003e    category = Category.find_or_create_by(name: params[:post][:category_name])\u003cbr\u003e    Post.create(content: params[:post][:content], category: category)\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut we'll have to do this anywhere we want to set the category for a Post. When we're setting a Post's categories, the one thing we know we have is a Post object. What if we could move this logic to the model?\u003c/p\u003e  \u003cp\u003eSpecifically, what if we gave the Post model a \u003ccode\u003ecategory_name\u003c/code\u003e attribute?\u003c/p\u003e  \u003ch2\u003eDefining a custom setter and getter (convenience attributes on models)\u003c/h2\u003e  \u003cp\u003eSince our Active Record models are still just Ruby classes, we can define our own setter and getter methods:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/post.rb\u003cbr\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e   def category_name=(name)\u003cbr\u003e     self.category = Category.find_or_create_by(name: name)\u003cbr\u003e   end\u003cbr\u003e\u003cbr\u003e   def category_name\u003cbr\u003e      self.category ? self.category.name : nil\u003cbr\u003e   end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe setter method \u003ccode\u003e#category_name=\u003c/code\u003e is called whenever a \u003ccode\u003ePost\u003c/code\u003e is initialized with a \u003ccode\u003ecategory_name\u003c/code\u003e field. We can expand \u003ccode\u003ePost.create(post_params)\u003c/code\u003e to\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ePost.create({\u003cbr\u003e  category_name: params[:post][:category_name],\u003cbr\u003e  content: params[:post][:content]\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eso that you can see that \u003ccode\u003e#category_name=\u003c/code\u003e will indeed be called. Since we have defined this setter ourselves, \u003ccode\u003ePost.create\u003c/code\u003e does not try to fall back to setting \u003ccode\u003ecategory_name\u003c/code\u003e through Active Record. You can think of \u003ccode\u003e#category_name=\u003c/code\u003e as intercepting the call to the database and instead shadowing the attribute \u003ccode\u003ecategory_name\u003c/code\u003e by, one, making sure the \u003ccode\u003eCategory\u003c/code\u003e exists; and, two, providing it in-memory for the \u003ccode\u003ePost\u003c/code\u003e model. We sometimes call these in-memory attributes \"virtuals\".\u003c/p\u003e  \u003cp\u003eNow we can set \u003ccode\u003ecategory_name\u003c/code\u003e on a post. We can do it when creating a post too, so our controller becomes quite simple again:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass PostsController \u0026lt; ApplicationController\u003cbr\u003e  def create\u003cbr\u003e    Post.create(post_params)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def post_params\u003cbr\u003e    params.require(:post).permit(:category_name, :content)\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice the difference –– we're now accepting a category name, rather than a category ID. Even though there's no Active Record field for \u003ccode\u003ecategory_name\u003c/code\u003e, the \u003ccode\u003ecategory_name\u003c/code\u003e key in the \u003ccode\u003epost_params\u003c/code\u003e hash prompts a call to the \u003ccode\u003ecategory_name=\u003c/code\u003e method.\u003c/p\u003e  \u003cp\u003eWe can change the view as well now:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label :category_name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :category_name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :content %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow the user can enter a category by name (instead of needing to look up its ID), and we handle finding or creating the \u003ccode\u003eCategory\u003c/code\u003e in the black box of the server. This results in a much friendlier experience for the user.\u003c/p\u003e  \u003ch2\u003eSelecting from existing categories\u003c/h2\u003e  \u003cp\u003eIf we want to let the user pick from existing categories, we can use a \u003ca href=\"http://apidock.com/rails/ActionView/Helpers/FormOptionsHelper/collection_select\"\u003eCollection Select\u003c/a\u003e helper to render a \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e tag:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.collection_select :category_name, Category.all, :name, :name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :content %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will create a drop down selection input where the user can pick a category.\u003c/p\u003e  \u003cp\u003eHowever, we've lost the ability for users to create their own categories.\u003c/p\u003e  \u003cp\u003eThat might be what you want. For example, the content management system for a magazine would probably want to enforce that the category of an article is one of the sections actually printed in the magazine.\u003c/p\u003e  \u003cp\u003eIn our case, however, we want to give users the flexibility to create a new category \u003cem\u003eor\u003c/em\u003e pick an existing one. What we want is autocompletion, which we can get with a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist\"\u003e\u003ccode\u003edatalist\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :category_name, list: \"categories_autocomplete\" %\u0026gt;\u003cbr\u003e  \u0026lt;datalist id=\"categories_autocomplete\"\u0026gt;\u003cbr\u003e    \u0026lt;% Category.all.each do |category| %\u0026gt;\u003cbr\u003e      \u0026lt;option value=\"\u0026lt;%= category.name %\u0026gt;\"\u0026gt;\u003cbr\u003e    \u0026lt;% end %\u0026gt;\u003cbr\u003e  \u0026lt;/datalist\u0026gt;\u003cbr\u003e  \u0026lt;textarea name=\"post[content]\"\u0026gt;\u0026lt;/textarea\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003edatalist\u003c/code\u003e is a new element in the HTML5 spec that allows for easy autocomplete. Check below in \u003ca href=\"#resources\"\u003eResources\u003c/a\u003e for further reading.\u003c/p\u003e  \u003ch2\u003eUpdating multiple rows\u003c/h2\u003e  \u003cp\u003eLet's think about the reverse association. Categories have many posts.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/category.rb\u003cbr\u003eclass Category \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :posts\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGiven a category, how do we let a user specify many different posts to categorize? We can't do it with just one \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e because we can have many posts in that category.\u003c/p\u003e  \u003ch3\u003eUsing array parameters\u003c/h3\u003e  \u003cp\u003eRails uses a \u003ca href=\"http://guides.rubyonrails.org/v3.2.13/form_helpers.html#understanding-parameter-naming-conventions\"\u003enaming convention\u003c/a\u003e to let you submit an array of values to a controller.\u003c/p\u003e  \u003cp\u003eIf you put this in a view, it looks like this.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for @category do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"category[post_ids][]\"\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"category[post_ids][]\"\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"category[post_ids][]\"\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" value=\"Submit\"\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen the form is submitted, your controller will have access to a \u003ccode\u003epost_ids\u003c/code\u003e param, which will be an array of strings.\u003c/p\u003e  \u003cp\u003eWe can write a setter method for this, just like we did for \u003ccode\u003ecategory_name\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/category.rb\u003cbr\u003eclass Category \u0026lt; ActiveRecord::Base\u003cbr\u003e   def post_ids=(ids)\u003cbr\u003e     ids.each do |id|\u003cbr\u003e       post = Post.find(id)\u003cbr\u003e       self.posts \u0026lt;\u0026lt; post\u003cbr\u003e     end\u003cbr\u003e   end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we're certain that the post ids being submitted in the form all belong to existing posts, we don't even need this setter method! The following code is valid and will automatically assign the new category id to each post:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# As long as posts 5, 2, 3 exist, this will work! The category_id for each of these\u003cbr\u003e# posts will be set to the new category's id\u003cbr\u003eCategory.create(name: 'This and That', post_ids: %w[5 2 3]) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we can use the same wiring in the controller to set \u003ccode\u003epost_ids\u003c/code\u003e from \u003ccode\u003eparams\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/categories_controller.rb\u003cbr\u003eclass CategoriesController \u0026lt; ApplicationController\u003cbr\u003e  def create\u003cbr\u003e    Category.create(category_params)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def category_params\u003cbr\u003e    params.require(:category).permit(:name, post_ids: [])\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist\"\u003edatalist\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://apidock.com/rails/ActionView/Helpers/FormOptionsHelper/collection_select\"\u003ecollection_select\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/v3.2.13/form_helpers.html#understanding-parameter-naming-conventions\"\u003enaming convention\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","frontPage":false},{"exportId":"validations-in-controller-actions","title":"Validations in Controller Actions","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"validations-in-controller-actions-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/validations-in-controller-actions-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-in-controller-actions-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-in-controller-actions-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eNow that we know Rails automatically performs validations defined on models, let's use this information to help users fix typos or other problems in their form submissions.\u003c/p\u003e\n\n\u003cp\u003eAt this point, we'll be covering step two of the following flow:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eUser fills out the form and hits \"Submit\", transmitting the form data via a POST request.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThe controller sees that validations have failed, and re-renders the form.\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eThe view displays the errors to the user.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cp\u003eAfter this lesson, you'll be able to...\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine validations on a model\u003c/li\u003e\n\u003cli\u003eUse the validation state of a model in a response conditional in an action\u003c/li\u003e\n\u003cli\u003eRe-render a form with validation errors\u003c/li\u003e\n\u003cli\u003eValidate a create action\u003c/li\u003e\n\u003cli\u003eValidate an update action\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eManually Checking Validation\u003c/h2\u003e\n\n\u003cp\u003eUp until this point, our \u003ccode\u003ecreate\u003c/code\u003e action has looked something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    @post = Post.create(post_params)\u003cbr\u003e\u003cbr\u003e    redirect_to post_path(@post)\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, we have two problems now:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIf the post is invalid, there will be no \u003ccode\u003eshow\u003c/code\u003e path to redirect to. The post was never saved to the database, so that \u003ccode\u003epost_path\u003c/code\u003e will result in a 404!\u003c/li\u003e\n\u003cli\u003eIf we redirect, we start a new page load, which will lose all of the feedback from the validations.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eA Note About Page Loads\u003c/h3\u003e\n\n\u003cp\u003eWhen a form is submitted, a \u003cstrong\u003efull page load\u003c/strong\u003e occurs, as if you had navigated to a completely new URL. This means that all of the variables set by the controller's \u003ccode\u003enew\u003c/code\u003e action (like \u003ccode\u003e@post\u003c/code\u003e) \u003cem\u003edisappear\u003c/em\u003e and are unavailable to the \u003ccode\u003ecreate\u003c/code\u003e action.\u003c/p\u003e\n\n\u003cp\u003eThe browser throws everything out after each request, except for cookies.\u003c/p\u003e\n\n\u003cp\u003eRails throws everything out after each request, except for the \u003ccode\u003esession\u003c/code\u003e hash.\u003c/p\u003e\n\n\u003cp\u003eYou're probably used to validations happening almost instantaneously on websites that you interact with on a daily basis. When you get validation feedback \u003cem\u003ewithout\u003c/em\u003e a full page load, that's JavaScript at work, sneakily performing requests in the background without throwing away the current page. We won't be using that advanced technique just yet!\u003c/p\u003e\n\n\u003cp\u003eLet's use \u003ccode\u003evalid?\u003c/code\u003e to see what's going on before deciding how to respond:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    # Create a brand new, unsaved, not-yet-validated Post object from the form.\u003cbr\u003e    @post = Post.new(post_params)\u003cbr\u003e\u003cbr\u003e    # Run the validations WITHOUT attempting to save to the database, returning\u003cbr\u003e    # true if the Post is valid, and false if it's not.\u003cbr\u003e    if @post.valid?\u003cbr\u003e      # If--and only if--the post is valid, do what we usually do.\u003cbr\u003e      @post.save\u003cbr\u003e      # This returns a status_code of 302, which instructs the browser to\u003cbr\u003e      # perform a NEW REQUEST! (AKA: throw @post away and let the show action\u003cbr\u003e      # worry about re-reading it from the database)\u003cbr\u003e      redirect_to post_path(@post)\u003cbr\u003e    else\u003cbr\u003e      # If the post is invalid, hold on to @post, because it is now full of\u003cbr\u003e      # useful error messages, and re-render the :new page, which knows how\u003cbr\u003e      # to display them alongside the user's entries.\u003cbr\u003e      render :new\u003cbr\u003e    end\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003erender\u003c/code\u003e can be instructed to render the templates from other actions. In the above code, since we want the \u003ccode\u003e:new\u003c/code\u003e template from the same controller, we don't have to specify anything except the template name.\u003c/p\u003e\n\n\u003cp\u003eYou can read more about this (and other) creative uses of \u003ccode\u003erender\u003c/code\u003e in Section 2.2.2 of the Rails Guide on \u003ca href=\"http://guides.rubyonrails.org/layouts_and_rendering.html#using-render\"\u003eLayout and Rendering\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eRemember: \u003cstrong\u003eredirects incur a new page load\u003c/strong\u003e. When we redirect after validation failure, we \u003cstrong\u003elose\u003c/strong\u003e the instance of \u003ccode\u003e@post\u003c/code\u003e that has feedback (messages for the user) in its \u003ccode\u003eerrors\u003c/code\u003e attribute.\u003c/p\u003e\n\n\u003cp\u003eAnother way to differentiate redirects is this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eIf you hit Refresh after a redirect/page load, your browser resubmits the \u003ccode\u003eGET\u003c/code\u003e request without complaint.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIf you hit Refresh after rendering on a form submit, your browser gives you a popup to confirm that you want to resubmit form data with the \u003ccode\u003ePOST\u003c/code\u003e request.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the next lessons, we'll learn how to use the error information in \u003ccode\u003e@post.errors\u003c/code\u003e to display feedback to the user through our view.\u003c/p\u003e","frontPage":false},{"exportId":"introduction-to-rails-as-an-api","title":"Introduction to Rails as an API","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-intro\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-intro/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eNow that you've become familiar with asynchronous requests in JavaScript,\nwe are going to take a brief step back and revisit Rails for a few lessons. Rails\nitself can serve as both the frontend and backend of a website, but it can also\nbe configured specifically to work as an API.\u003c/p\u003e\n\n\u003cp\u003eAn API, short for Application Programming Interface, put broadly, is a way for one \nsystem to communicate with other \u003cem\u003eexternal\u003c/em\u003e systems. An API abstracts away any\nof the complicated logic of a system and presents something that is easier to interact with or build\nupon, whether the API is serving up useful functions, services, or data. In relation \nto web development, APIs are often sources of data that we can use in our own \napplications, like weather info or the number of people currently in space.\u003c/p\u003e\n\n\u003cp\u003eUsing Rails, \u003cem\u003ewe can create our own APIs from scratch\u003c/em\u003e - if you've got hold of some data to you'd \nlove to share with the others - for instance statistics about your local sports \nteam or maybe the biographical information of all the characters in your \nfavorite fantasy novel - you could build an API and share that information on the web.\u003c/p\u003e\n\n\u003cp\u003eIn addition, Rails APIs render JSON strings, which is particularly useful, since \nwe can use them when building frontends using JavaScript, DOM manipulation and \nasynchronous requests.\u003c/p\u003e\n\n\u003cp\u003eAs we go through the process of setting up and configuring APIs, we will also \nlook at different ways in which we can organize the data the API is providing. As\nthe creator of an API, you have full control over how information is structured,\nand must always consider how that structure affects your code.\u003c/p\u003e\n\n\u003cp\u003eWith some practice building APIs in Rails, combined with your skills with fetch\nin JavaScript, you will be able to build full stack applications by the end of\nthis section.\u003c/p\u003e","frontPage":false},{"exportId":"validations-with-form-for","title":"Validations with form_for","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"validations-with-form_for-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-with-form_for-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-with-form_for-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eNow that we know Rails automatically performs validations defined on models, let's use this information to easily display validation errors to the user.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eAfter this lesson, you'll be able to...\u003c/p\u003e  \u003cul\u003e \u003cli\u003euse \u003ccode\u003eform_for\u003c/code\u003e to display a form with Validations\u003c/li\u003e \u003cli\u003eprint out full error messages above the form\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eThe differences between \u003ccode\u003eform_for\u003c/code\u003e and \u003ccode\u003eform_tag\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThis step will make heavy usage of \u003ccode\u003eform_for\u003c/code\u003e, the high-powered alternative to \u003ccode\u003eform_tag\u003c/code\u003e. The biggest difference between these two helpers is that \u003ccode\u003eform_for\u003c/code\u003e creates a form specifically \u003cstrong\u003efor\u003c/strong\u003e a model object. \u003ccode\u003eform_for\u003c/code\u003e is full of convenient features.\u003c/p\u003e  \u003cp\u003eIn the example below, \u003ccode\u003e@post\u003c/code\u003e is the model object that needs a form. \u003ccode\u003eform_for\u003c/code\u003e automatically performs a route lookup to find the right URL for post.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eform_for\u003c/code\u003e takes a block. It passes an instance of \u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html\"\u003eFormBuilder\u003c/a\u003e as a parameter to the block, which is what \u003ccode\u003ef\u003c/code\u003e is below.\u003c/p\u003e  \u003cp\u003eA basic implementation looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/edit.html.erb //--\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_area :content %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis creates the HTML:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form\u003cbr\u003e  class=\"edit_post\"\u003cbr\u003e  id=\"edit_post\"\u003cbr\u003e  action=\"/posts/1\"\u003cbr\u003e  accept-charset=\"UTF-8\"\u003cbr\u003e  method=\"post\"\u003cbr\u003e\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"utf8\" type=\"hidden\" value=\"✓\" /\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"hidden\" name=\"_method\" value=\"patch\" /\u0026gt;\u003cbr\u003e  \u0026lt;input\u003cbr\u003e    type=\"hidden\"\u003cbr\u003e    name=\"authenticity_token\"\u003cbr\u003e    value=\"nRPP2OqVKB00/Cr+8EvHfYrb5sAkZRtr8f6dzBaJAI+cMceR0fUatcLWd4zdwYCpojW2J3QLK6uyBKeFAgZvmw==\"\u003cbr\u003e  /\u0026gt;\u003cbr\u003e  \u0026lt;input\u003cbr\u003e    type=\"text\"\u003cbr\u003e    name=\"post[title]\"\u003cbr\u003e    id=\"post_title\"\u003cbr\u003e    value=\"Existing Post Title\"\u003cbr\u003e  /\u0026gt;\u003cbr\u003e  \u0026lt;textarea name=\"post[content]\" id=\"post_content\"\u0026gt;\u003cbr\u003eExisting Post Content\u0026lt;/textarea\u003cbr\u003e  \u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" name=\"commit\" value=\"Update Post\" /\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere's what we would need to do with \u003ccode\u003eform_tag\u003c/code\u003e to generate the exact same HTML:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/edit.html.erb //--\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag post_path(@post), method: \"patch\", name: \"edit_post\", id: \"edit_post\" do %\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag \"post[title]\", @post.title %\u0026gt;\u003cbr\u003e  \u0026lt;%= text_area \"post[content]\", @post.content %\u0026gt;\u003cbr\u003e  \u0026lt;%= submit_tag \"Update Post\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003eform_tag\u003c/code\u003e doesn't know what action we're going to use it for, because it has no model object to check. \u003ccode\u003eform_for\u003c/code\u003e knows that an empty, unsaved model object needs a \u003ccode\u003enew\u003c/code\u003e form and a populated object needs an \u003ccode\u003eedit\u003c/code\u003e form. This means we get to skip all of these steps:\u003c/p\u003e  \u003col\u003e \u003cli\u003eSetting the \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eid\u003c/code\u003e of the \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e element.\u003c/li\u003e \u003cli\u003eSetting the method to \u003ccode\u003epatch\u003c/code\u003e on edits.\u003c/li\u003e \u003cli\u003eSetting the text of the \u003ccode\u003e\u0026lt;submit\u0026gt;\u003c/code\u003e element.\u003c/li\u003e \u003cli\u003eSpecifying the root parameter name (\u003ccode\u003epost[whatever]\u003c/code\u003e) for every field.\u003c/li\u003e \u003cli\u003eChoosing the attribute (\u003ccode\u003e@post.whatever\u003c/code\u003e) to fill for every field.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eNifty!\u003c/p\u003e  \u003ch2\u003eUsing \u003ccode\u003eform_for\u003c/code\u003e to generate empty forms\u003c/h2\u003e  \u003cp\u003eTo wire up an empty form in our \u003ccode\u003enew\u003c/code\u003e view, we need to create a blank object:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003e  def new\u003cbr\u003e    @post = Post.new\u003cbr\u003e  end \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere's our usual vanilla \u003ccode\u003ecreate\u003c/code\u003e action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    @post = Post.create(post_params)\u003cbr\u003e\u003cbr\u003e    redirect_to post_path(@post)\u003cbr\u003e  end \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe still have to solve the dual problem of what to do when there's no valid model object to redirect to, and how to hold on to our error messages while re-rendering the same form.\u003c/p\u003e  \u003ch2\u003eRe-Rendering With Errors\u003c/h2\u003e  \u003cp\u003eRemember from a few lessons ago how CRUD methods return \u003ccode\u003efalse\u003c/code\u003e when validation fails? We can use that to our advantage here and branch our actions based on the result:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    @post = Post.new(post_params)\u003cbr\u003e\u003cbr\u003e    if @post.save\u003cbr\u003e      redirect post_path(@post)\u003cbr\u003e    else\u003cbr\u003e      render :new\u003cbr\u003e    end\u003cbr\u003e  end \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eFull Messages with Prepopulated Fields\u003c/h2\u003e  \u003cp\u003eBecause of \u003ccode\u003eform_for\u003c/code\u003e, Rails will automatically prepopulate the \u003ccode\u003enew\u003c/code\u003e form with the values the user entered on the previous page.\u003c/p\u003e  \u003cp\u003eTo get some extra verbosity, we can add the snippet from the previous lesson to the top of the form:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/new.html.erb //--\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;% if @post.errors.any? %\u0026gt;\u003cbr\u003e  \u0026lt;div id=\"error_explanation\"\u0026gt;\u003cbr\u003e    \u0026lt;h2\u0026gt;\u003cbr\u003e      \u0026lt;%= pluralize(@post.errors.count, \"error\") %\u0026gt;\u003cbr\u003e      prohibited this post from being saved:\u003cbr\u003e    \u0026lt;/h2\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;ul\u0026gt;\u003cbr\u003e    \u0026lt;% @post.errors.full_messages.each do |msg| %\u0026gt;\u003cbr\u003e      \u0026lt;li\u0026gt;\u0026lt;%= msg %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;% end %\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eMore Freebies: \u003ccode\u003efield_with_errors\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eLet's look at another nice feature of \u003ccode\u003eFormBuilder\u003c/code\u003e. Here's our \u003ccode\u003eform_for\u003c/code\u003e code again:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/edit.html.erb //--\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_area :content %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003etext_field\u003c/code\u003e call generates this tag:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;input\u003cbr\u003e  type=\"text\"\u003cbr\u003e  name=\"post[title]\"\u003cbr\u003e  id=\"post_title\"\u003cbr\u003e  value=\"Existing Post Title\"\u003cbr\u003e/\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNot only will \u003ccode\u003eFormBuilder\u003c/code\u003e pre-fill an existing \u003ccode\u003ePost\u003c/code\u003e object's data, it will also wrap the tag in a \u003ccode\u003ediv\u003c/code\u003e with an error class if the field has failed validation(s):\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div class=\"field_with_errors\"\u0026gt;\u003cbr\u003e  \u0026lt;input\u003cbr\u003e    type=\"text\"\u003cbr\u003e    name=\"post[title]\"\u003cbr\u003e    id=\"post_title\"\u003cbr\u003e    value=\"Existing Post Title\"\u003cbr\u003e  /\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis can also result in some unexpected styling changes because \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e is a block tag (which takes up the entire width of its container) while \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e is an inline tag. If your layout suddenly gets messed up when a field has errors, this is probably why.\u003c/p\u003e  \u003ch2\u003eRecap\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eform_for\u003c/code\u003e gives us a lot of power!\u003c/p\u003e  \u003cp\u003eOur challenge as developers is to keep track of the different layers of magic that make this tool so convenient. The old adage is true: we're responsible for understanding not only \u003cem\u003ehow\u003c/em\u003e to use \u003ccode\u003eform_for\u003c/code\u003e but also \u003cem\u003ewhy\u003c/em\u003e it works. Otherwise, we'll be completely lost as soon as a sufficiently unusual edge case appears.\u003c/p\u003e  \u003cp\u003eWhen in doubt, \u003cstrong\u003eread the HTML\u003c/strong\u003e. Get used to hitting the \"View Source\" and \"Open Inspector\" hotkeys in your browser (\u003ccode\u003eCtrl-u\u003c/code\u003e and \u003ccode\u003eCtrl-Shift-i\u003c/code\u003e on Chrome Windows; \u003ccode\u003eOption-Command-u\u003c/code\u003e and \u003ccode\u003eOption-Command-i\u003c/code\u003e on Chrome Mac), and remember that most browsers let you \u003ca href=\"http://superuser.com/questions/395919/where-is-the-post-tab-in-chrome-developer-tools-network\"\u003eexamine \u003ccode\u003ePOST\u003c/code\u003e data in their developer network tools\u003c/a\u003e.\u003c/p\u003e","frontPage":false},{"exportId":"layouts-and-templates","title":"Layouts and Templates","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-layouts-and-templates\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-layouts-and-templates\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-layouts-and-templates/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eThis lesson will show you how to use layouts to achieve a common look and feel between different views in your app.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eAfter this lesson, you'll be able to...\u003c/p\u003e  \u003col\u003e \u003cli\u003eIdentify the default application layout.\u003c/li\u003e \u003cli\u003eYield to view templates from a layout.\u003c/li\u003e \u003cli\u003eSpecify a custom layout in ActionController on a controller level using the \u003ccode\u003elayout\u003c/code\u003e macro and on the action level using the \u003ccode\u003erender :layout =\u0026gt; \"custom\"\u003c/code\u003e option.\u003c/li\u003e \u003cli\u003eUse :layout =\u0026gt; false to shut off the layout and only render the view\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eLife Without Layouts\u003c/h2\u003e  \u003cp\u003eImagine that you're tasked to build an online store app with Rails.\u003c/p\u003e  \u003cp\u003eYou would probably have a few different views in this app, for example:\u003c/p\u003e  \u003col\u003e \u003cli\u003eA list of products\u003c/li\u003e \u003cli\u003eA detail view that shows more info for a selected product\u003c/li\u003e \u003cli\u003eA shopping cart\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eAcross all these views you would want a consistent look. This consistent look perhaps contains something like a logo, navigation links, a search bar, and a footer at the bottom that contains some info about the shop.\u003c/p\u003e  \u003cp\u003eYou start building the list of products, and you end up with an action template that looks something like this. It has a nav component, a list of products, and a footer. It would be the worst online shop ever, but let's keep it simple for now.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/products/index.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;Flatiron Store\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' =\u0026gt; true %\u0026gt;\u003cbr\u003e  \u0026lt;%= javascript_include_tag 'application', 'data-turbolinks-track' =\u0026gt; true %\u0026gt;\u003cbr\u003e  \u0026lt;%= csrf_meta_tags %\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt;\u003cbr\u003e\u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;div class=\"navigation\"\u0026gt;\u003cbr\u003e      \u0026lt;ul\u0026gt;\u003cbr\u003e        \u0026lt;a href=\"/products\"\u0026gt;Products\u0026lt;/a\u0026gt;\u003cbr\u003e        \u0026lt;a href=\"/cart\"\u0026gt;Cart\u0026lt;/a\u0026gt;\u003cbr\u003e      \u0026lt;/ul\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;h1\u0026gt;The Product List\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;ul\u0026gt;\u003cbr\u003e      \u0026lt;% @products.each do |job| %\u0026gt;\u003cbr\u003e        \u0026lt;li\u0026gt;\u0026lt;%= link_to 'Show', job %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;% end %\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;div class=\"footer\"\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;This shop promises the lowest prices in widgets!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGreat, so you have a list of products now! Any shop should have that, shouldn't it? Next, you decide to build the view that will show the product details when customers click on a link for that product.\u003c/p\u003e  \u003cp\u003eYou finish sorting out the view's structure with a nav and footer. You open up \u003ccode\u003eapp/views/products/index.html.erb\u003c/code\u003e, select all of the code, and copy it onto your clipboard. Now you are ready to paste it into your new template and customize it to show product info.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/products/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;Flatiron Store\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' =\u0026gt; true %\u0026gt;\u003cbr\u003e  \u0026lt;%= javascript_include_tag 'application', 'data-turbolinks-track' =\u0026gt; true %\u0026gt;\u003cbr\u003e  \u0026lt;%= csrf_meta_tags %\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt;\u003cbr\u003e\u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;div class=\"navigation\"\u0026gt;\u003cbr\u003e      \u0026lt;ul\u0026gt;\u003cbr\u003e        \u0026lt;a href=\"/products\"\u0026gt;Products\u0026lt;/a\u0026gt;\u003cbr\u003e        \u0026lt;a href=\"/cart\"\u0026gt;Cart\u0026lt;/a\u0026gt;\u003cbr\u003e      \u0026lt;/ul\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;h1\u0026gt;\u0026lt;%= @product.name%\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;p\u0026gt;\u003cbr\u003e      \u0026lt;strong\u0026gt;Category:\u0026lt;/strong\u0026gt;\u003cbr\u003e      \u0026lt;%= @product.category %\u0026gt;\u003cbr\u003e    \u0026lt;/p\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;p\u0026gt;\u003cbr\u003e      \u0026lt;strong\u0026gt;Price:\u0026lt;/strong\u0026gt;\u003cbr\u003e      \u0026lt;%= @product.price %\u0026gt;\u003cbr\u003e    \u0026lt;/p\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;div class=\"footer\"\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt;This shop promises the lowest prices in widgets!\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou call over your colleagues, all excited that you've managed to get it working so quickly. The designer takes one look and says: \"You know what, the navigation is all wrong. You need to make it use the \u003ccode\u003eorange\u003c/code\u003e class, and also make it pop by using the \u003ccode\u003epop\u003c/code\u003e class.\"\u003c/p\u003e  \u003cp\u003eOh no! You have to go and change it in two files! Imagine having tens or even hundreds of templates like this. Making the same change over and over again would be very time consuming and prone to errors. In other words, it'll be a total drag. Because we've violated the DRY principle, we have to make changes in more than one place. Layouts apply the same principle as methods to generating HTML code.\u003c/p\u003e  \u003ch2\u003eLayouts to the Rescue\u003c/h2\u003e  \u003cp\u003eLuckily, you don't need to copy content from one template file to the next because layouts in Rails are enabled by default. When you generate a new Rails app, it generates a layout for you.\u003c/p\u003e  \u003cp\u003eTo find the generated layout, go and have a look in your Rails app at the following path. When you render a template for an action without specifying a different layout to use, Rails will use the layout found at this location: \u003ccode\u003eapp/views/layouts/application.html.erb\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhen you first generate a Rails app, depending on your version of Rails, the automatically generated layout file will look similar to this. The \u003ccode\u003eapplication.html.erb\u003c/code\u003e file is a very good place to start adding common components like the navigation, search, and footer from the example above.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/layouts/application.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;Flatiron Store\u0026lt;/title\u0026gt;\u003cbr\u003e  \u0026lt;%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' =\u0026gt; true %\u0026gt;\u003cbr\u003e  \u0026lt;%= javascript_include_tag 'application', 'data-turbolinks-track' =\u0026gt; true %\u0026gt;\u003cbr\u003e  \u0026lt;%= csrf_meta_tags %\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt;\u003cbr\u003e\u0026lt;body\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= yield %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eYield\u003c/h2\u003e  \u003cp\u003eLet's say you code a new layout from scratch, ending up with something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/layouts/application.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;Flatiron Store\u0026lt;/title\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt;\u003cbr\u003e\u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Welcome To The Flatiron Store!\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e usually you should include links to assets like style sheets and JavaScript files in your layouts, which was omitted in the code above to keep it simple.\u003c/p\u003e  \u003cp\u003eOther than the missing links to common assets, this layout is missing something \u003cstrong\u003eterribly important\u003c/strong\u003e. To see what it is, have a look at the following example that uses this layout.\u003c/p\u003e  \u003cp\u003eThis is an example of an action (\u003ccode\u003estatic#about\u003c/code\u003e) where we expect the corresponding template (\u003ccode\u003eapp/views/static/about.html.erb\u003c/code\u003e) to render within the \u003ccode\u003eapplication.html.erb\u003c/code\u003e layout defined above.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/static_controller.rb\u003cbr\u003e\u003cbr\u003eclass StaticController \u0026lt; ApplicationController\u003cbr\u003e  def about\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThere should also be an associated route in the \u003ccode\u003econfig/routes.rb\u003c/code\u003e file to route a request to \u003ccode\u003e/about\u003c/code\u003e to the \u003ccode\u003estatic#about\u003c/code\u003e action in the \u003ccode\u003eStaticController\u003c/code\u003e, above.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003eRails.application.routes.draw do\u003cbr\u003e  get 'about', to: 'static#about'\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd this is the template for the \u003ccode\u003estatic#about\u003c/code\u003e action with a simple message, which we would want to display nested inside the \u003ccode\u003eapplication.html.erb\u003c/code\u003e layout:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/static/about.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen you load up the \u003ccode\u003estatic#about\u003c/code\u003e route in your browser, you will be greeted with a very bold message –– \u003cstrong\u003eWelcome To The Flatiron Store!\u003c/strong\u003e –– but you won't see the \"Hello!\" from the about action's template, which we just coded above. What gives?\u003c/p\u003e  \u003cp\u003eThis is happening because the layout file at \u003ccode\u003eapp/views/layouts/application.html.erb\u003c/code\u003e does not have a \u003ccode\u003eyield\u003c/code\u003e statement in it. \u003ccode\u003eyield\u003c/code\u003e is what Rails uses to decide where in the layout to render the content for the action. If you don't put a \u003ccode\u003eyield\u003c/code\u003e in your layout, the layout itself will render just fine, but any additional content coded into the action templates will not be correctly placed within the layout.\u003c/p\u003e  \u003cp\u003eTo fix this issue, add a \u003ccode\u003eyield\u003c/code\u003e to the layout file at \u003ccode\u003eapp/views/layouts/application.html.erb\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/layouts/application.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003cbr\u003e\u0026lt;html\u0026gt;\u003cbr\u003e\u0026lt;head\u0026gt;\u003cbr\u003e  \u0026lt;title\u0026gt;Flatiron Store\u0026lt;/title\u0026gt;\u003cbr\u003e\u0026lt;/head\u0026gt;\u003cbr\u003e\u0026lt;body\u0026gt;\u003cbr\u003e    \u0026lt;h1\u0026gt;Welcome To The Flatiron Store!\u0026lt;/h1\u0026gt;\u003cbr\u003e    \u0026lt;%= yield %\u0026gt;\u003cbr\u003e\u0026lt;/body\u0026gt;\u003cbr\u003e\u0026lt;/html\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow when you hit up the \u003ccode\u003estatic#about\u003c/code\u003e route in your browser, you will see \u003cstrong\u003eWelcome To The Flatiron Store!\u003c/strong\u003e followed by \u003cstrong\u003eHello!\u003c/strong\u003e This means that, when the layout rendered, it pulled the action's specific template into the correct place –– right where we added the \u003ccode\u003eyield\u003c/code\u003e statement!\u003c/p\u003e  \u003cp\u003eThose of you who remember Ruby blocks might be thinking that this looks very similar to how Ruby yields to blocks in a method call. The same principle is at work here: we're yielding to a chunk of code and don't know what it will do in advance. We always want to run the layout part of the method, and we let any other chunk of code that produces HTML (a template in this case) run at the \u003ccode\u003eyield\u003c/code\u003e point in the method call.\u003c/p\u003e  \u003ch2\u003eHow Layouts and Templates are Stitched Together\u003c/h2\u003e  \u003cp\u003eAt its simplest level, this is what happens when a request is made to your Rails application:\u003c/p\u003e  \u003col\u003e \u003cli\u003eRails finds the template for the corresponding action based either on convention or any other options passed to the \u003ccode\u003erender\u003c/code\u003e method in your controller action.\u003c/li\u003e \u003cli\u003eSimilarly, it then finds the correct layout to use, either through naming/directory conventions or from specific options that you provided.\u003c/li\u003e \u003cli\u003eRails uses the action template to generate the content specific to the action. (Note that the template might be composed of partial views, which you'll learn about a bit later.)\u003c/li\u003e \u003cli\u003eIt then looks for the layout's \u003ccode\u003eyield\u003c/code\u003e statement and inserts the action's template there.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eSo this means that, for every request handled by Rails, at most one layout and action template will be used. The action template can call out to other templates, called partials, to render itself. Partials are covered in upcoming lessons, so don't worry too much about the concept for now.\u003c/p\u003e  \u003ch2\u003eHow Rails Decides Which Layout to Use\u003c/h2\u003e  \u003cp\u003eThink about the example from earlier in this lesson, the Flatiron store app. As mentioned before, it would make sense to have the same layout for the product list, product detail pages, and cart because you would want some common elements in the same place within each view.\u003c/p\u003e  \u003cp\u003eBut when you add administrative functionality to the online store –– say, in order to allow someone to add new products to the site, update prices, and perhaps draw reports –– you'll probably want to use a different layout, which is quite easy to do with Rails.\u003c/p\u003e  \u003ch3\u003eDeciding on a Layout Through Convention\u003c/h3\u003e  \u003cp\u003eRails uses a simple convention to find the correct layout for your request. If you have a controller called \u003ccode\u003eProductsController\u003c/code\u003e, Rails will see whether there is a layout for that controller at \u003ccode\u003elayouts/products.html.erb\u003c/code\u003e. Similarly, if you have a controller called \u003ccode\u003eAdminController\u003c/code\u003e, it'll look for a layout at \u003ccode\u003elayouts/admin.html.erb\u003c/code\u003e. If it can't find a layout specific to your controller, it'll use the default layout at \u003ccode\u003eapp/views/layouts/application.html.erb\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWith the exception of the admin section of a site, most applications use the default layout for everything, so there's no need to have a layout for each controller. You want to have a consistent look and feel throughout your site, using a different layout only if the situation really warrants it.\u003c/p\u003e  \u003ch3\u003eOverriding Conventions\u003c/h3\u003e  \u003cp\u003eIf you need to override the conventions explained above, you can easily do so. For example, if you have a controller called \u003ccode\u003eShoppingCartController\u003c/code\u003e and want to use the layout at \u003ccode\u003elayouts/products.html.erb\u003c/code\u003e, you have two options:\u003c/p\u003e  \u003col\u003e \u003cli\u003eIf you want to use the products layout for every action, simply specify that you want to use the products layout by invoking the \u003ccode\u003elayout\u003c/code\u003e method in your controller, passing it a string that it can use to find the desired layout:\u003c/li\u003e \u003c/ol\u003e \u003cpre\u003e\u003ccode\u003eclass ShoppingCartController \u0026lt; ApplicationController\u003cbr\u003e  layout \"products\"\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003col\u003e \u003cli\u003eIf you want to use the products layout only for a particular action, simply use the \u003ccode\u003erender\u003c/code\u003e method in the controller action, specifying the layout you want it to use like this:\u003c/li\u003e \u003c/ol\u003e \u003cpre\u003e\u003ccode\u003eclass ShoppingCartController \u0026lt; ApplicationController\u003cbr\u003e  def list\u003cbr\u003e    render :layout =\u0026gt; \"products\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # the rest of the actions will use standard conventions\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you want to render your action template without a layout, you can do the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass ShoppingCartController \u0026lt; ApplicationController\u003cbr\u003e  def list\u003cbr\u003e    render :layout =\u0026gt; false\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  # the rest of the actions will use standard conventions\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It's pretty unusual to not render the layout in a standard action. However, once you start using AJAX (JavaScript), it's quite common. Keep this in the back of your mind when you get to JavaScript.\u003c/p\u003e  \u003ch2\u003eRecap\u003c/h2\u003e  \u003cp\u003eUse layouts to provide a common look and feel between different views of your app. As much as possible, use and adapt only the default layout until you have a good reason to use a different layout for a different section or action.\u003c/p\u003e  \u003cp\u003eNext, we'll take what we've learned here and apply it in a lab.\u003c/p\u003e","frontPage":false},{"exportId":"why-redux","title":"Why Redux?","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"why-redux\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/why-redux\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/why-redux/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eIn this lesson, we will learn about the Redux architecture for building web applications. By the end of the lesson you will be able to:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eUnderstand how \u003cstrong\u003eRedux\u003c/strong\u003e encourages a single source of truth.\u003c/li\u003e \u003cli\u003eUnderstand how actions fit into the Redux flow.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eBenefits of moving to Redux\u003c/h2\u003e  \u003ch4\u003eSingle Source Of Truth\u003c/h4\u003e  \u003cp\u003eAs our \u003cstrong\u003eReact\u003c/strong\u003e applications become larger, our state becomes more spread out between different components.  At a certain point, the component tree becomes a web of props and state that can obscure our view of how components are handling and sharing data with each other.\u003c/p\u003e  \u003cp\u003eThere are ways to get around this, like storing all of our state in one high level container component, but this can ultimately \u003cem\u003eincrease\u003c/em\u003e the complexity of your props.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eRedux\u003c/strong\u003e offers a different solution. It encourages storing all of the necessary data in our application in a JavaScript object \u003cem\u003eseparate\u003c/em\u003e from our components.  It looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estate = {\u003cbr\u003e  user: {\u003cbr\u003e    name: 'bob',\u003cbr\u003e    hometown: 'philly'\u003cbr\u003e  },\u003cbr\u003e  interests: [\u003cbr\u003e    {\u003cbr\u003e      name: 'pokemon',\u003cbr\u003e      type: 'game'\u003cbr\u003e    },\u003cbr\u003e    {\u003cbr\u003e      name: 'game of thrones',\u003cbr\u003e      type:'tv show'\u003cbr\u003e    }\u003cbr\u003e  ]\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSimilar to component state, all our data is held in an object. The difference here is that, since Redux state is separate from the component tree, we can grab \u003cem\u003eany\u003c/em\u003e part of this data for \u003cem\u003eany\u003c/em\u003e component that needs it, just by connecting the component!\u003c/p\u003e  \u003ch4\u003eAccessing Our State\u003c/h4\u003e  \u003cp\u003eTo make this state available for components to connect to, we provide access by wrapping the component tree, similar to \u003ccode\u003eRouter\u003c/code\u003e. This gives us access to Redux functions that allow us to grab state and map it the props being given to a component. Components can then read these props like normal, as though they were receiving them from a parent component.\u003c/p\u003e  \u003cp\u003eConsequently, complex interaction between components is made easier. Take for example sibling components (rendered side by side in a parent) and cousin components (the children of sibling components). If siblings are both displaying or manipulating the same bit of shared data, without Redux, that data needs to be stored in their parent component's state. If \u003cem\u003ecousins\u003c/em\u003e are sharing data, the data needs to be stored in the \u003cem\u003egrandparent\u003c/em\u003e component, the closest shared 'ancestor' component.\u003c/p\u003e  \u003cp\u003eIn Redux all these interactions are structured the same way. Every component we allow can get and update state data regardless of the position of components in a tree.\u003c/p\u003e  \u003ch4\u003eUpdating Our State\u003c/h4\u003e  \u003cp\u003eSo we hold all of our data in one place and with some configuration, we can read it as props in regular React components. When we want to update that data, we must send an action, which is a set of strict instructions \u003cem\u003ewe create\u003c/em\u003e that \u003cstrong\u003eRedux\u003c/strong\u003e will use for how to update it.  \u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaction = {\u003cbr\u003e  type: 'ADD_INTEREST',\u003cbr\u003e  newInterest: {\u003cbr\u003e    name: 'hockey',\u003cbr\u003e    type: 'sport'\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere, we can imagine that after a user fills out a form and clicks submit, we will create an action that tells \u003cstrong\u003eRedux\u003c/strong\u003e how to incorporate the update into the state.  Any time we update the state in \u003cstrong\u003eRedux\u003c/strong\u003e, we must create an action first. This action is just a plain old JavaScript object.\u003c/p\u003e  \u003cp\u003eThese actions are also made available to components. Any component we connect will be able to modify the state using an action we've defined.\u003c/p\u003e  \u003cp\u003eFollowing a specific design pattern that we'll explore through the upcoming lessons, we can use these actions to maintain and update our Redux state. These state changes trigger React's component lifecycle, and thus, the cycle of data is made.\u003c/p\u003e  \u003ch2\u003eSumming Up\u003c/h2\u003e  \u003cp\u003e\u003cstrong\u003eRedux\u003c/strong\u003e places all of our data in one place -- the state.  This state is just a plain JavaScript object. In fact, all the pieces of Redux are plain old JavaScript. It is the pattern, the way the information flows that makes Redux awesome.\u003c/p\u003e  \u003cp\u003eTo change our application state, we need to create an action that holds information for how to update that state. The action, combined with the previous state, produces an updated state.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\"\u003eRedux Justification - Dan Abramov\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=uvAXVMwHJXU\"\u003eLooking back at Redux - Dan Abramov\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/why-redux\"\u003eWhy Redux\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","frontPage":false},{"exportId":"rails-testing","title":"Rails Testing","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ruby-rails-testing\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/ruby-rails-testing/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-rails-testing\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ruby-rails-testing/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eOne of the most fundamental aspects of programmer productivity is \u003cstrong\u003ethe feedback\nloop\u003c/strong\u003e. \"Scripting\" languages like Ruby and Python are great for this because\nyou can run your code immediately after writing it. Conversely, lower-level\nlanguages like C must be compiled before being run.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://imgs.xkcd.com/comics/compiling.png\" alt=\"Two programmers swordfight from their office chairs, using \u0026quot;Compiling!\u0026quot; as an\nexcuse\" title=\"Compiling!\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eThe Feedback Loop\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDecide what to do next\u003c/li\u003e\n\u003cli\u003eThink of an approach\u003c/li\u003e\n\u003cli\u003eWrite some code\u003c/li\u003e\n\u003cli\u003eCompile/run the code\u003c/li\u003e\n\u003cli\u003eObserve the output\n\n\u003cul\u003e\n\u003cli\u003eIf it looks good, move on to Step 1 for the next task.\u003c/li\u003e\n\u003cli\u003eIf there are problems, go back to Step 1 for this task.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eHaving a short feedback loop –– from brain to fingertips to running\nprocess –– lowers the resistance for trying new things and protects you from\ndistractions that sneak in while you're waiting between steps.\u003c/p\u003e\n\n\u003cp\u003eUnfortunately, there's more than one way to distract a programmer!\u003c/p\u003e\n\n\u003ch2\u003eThe Rails Feedback Loop\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDecide what to do next\u003c/li\u003e\n\u003cli\u003eRead every related Rails Guide at least twice\u003c/li\u003e\n\u003cli\u003eSpend an hour poring over StackOverflow answers from two major versions ago\u003c/li\u003e\n\u003cli\u003eCopy-paste some sketchy-looking code\u003c/li\u003e\n\u003cli\u003eRun the code, which immediately screws up your database\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003ebundle exec rake db:reset\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eGet a migraine because you forgot to put your painstakingly-designed seed\ndata in \u003ccode\u003edb/seeds.rb\u003c/code\u003e, and now it's all gone\u003c/li\u003e\n\u003cli\u003eGo for a walk\u003c/li\u003e\n\u003cli\u003eWrite some code\u003c/li\u003e\n\u003cli\u003eRefresh browser\u003c/li\u003e\n\u003cli\u003eScratch your head over why it says there's a missing template\u003c/li\u003e\n\u003cli\u003eSpend another hour tweaking your new code until you realize you made a typo\nin the filename and nothing you've been doing for the past three hours had a\nchance of working in the first place\u003c/li\u003e\n\u003cli\u003eTake a break to read \u003cem\u003eThe Hitchhiker's Guide to Rails\u003c/em\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eRails is big. Really big. You just won't believe how vastly, hugely,\nmind-bogglingly big it is. I mean, you may think it's a long way down the road\nto the chemist, but that's just peanuts to Rails.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e-- Douglas Adams\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e(Okay, so maybe Mr. Adams was talking about space, but he totally \u003cem\u003ewould have\u003c/em\u003e\nsaid it this way if he'd been writing about web development instead of interstellar\ntravel.)\u003c/p\u003e\n\n\u003cp\u003eRails ships with many features to save precious seconds in developer feedback\nloops, but there's no two ways about it: in anything but the most trivial app,\nit can be pretty complex to make sure your code is actually working correctly.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we'll learn to shorten our feedback loop with different flavors\nof Rails tests, combining some standard approaches suggested in the Guides\nthemselves with some more advanced practices that require additional\ndependencies (namely Capybara).\u003c/p\u003e\n\n\n\n\u003cp\u003eAfter this lesson, you should be able to...\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eList the different types of tests applicable to a Sinatra/Rails app.\u003c/li\u003e\n\u003cli\u003eCompare and contrast the different types of tests.\u003c/li\u003e\n\u003cli\u003eDescribe the usage of Capybara in feature testing.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWe'll be covering three types of tests:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eModels\u003c/strong\u003e (RSpec)\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eControllers\u003c/strong\u003e (RSpec)\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eFeatures\u003c/strong\u003e (RSpec/Capybara)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFeatures are the fanciest, so we'll leave them for last. They are preferred over\nregular Rails \"View\" tests.\u003c/p\u003e\n\n\n\n\u003cp\u003eBy default, Rails uses \u003ccode\u003eTest::Unit\u003c/code\u003e for testing, which keeps its tests in the\nmysteriously-named \u003ccode\u003etest/\u003c/code\u003e folder.\u003c/p\u003e\n\n\u003cp\u003eIf you're planning from the start to use RSpec instead, you can tell Rails to\nskip \u003ccode\u003eTest::Unit\u003c/code\u003e by passing the \u003ccode\u003e-T\u003c/code\u003e flag to \u003ccode\u003erails new\u003c/code\u003e, like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erails new cool_app -T\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, you will add the gem to your Gemfile:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem 'rspec-rails'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd use the built-in generator to add a \u003ccode\u003espec\u003c/code\u003e folder with the right boilerplate:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebundle install\u003cbr\u003ebundle exec rails g rspec:install\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is the Rails equivalent of the usual \u003ccode\u003erspec --init\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt's not enough to know \u003cem\u003ehow\u003c/em\u003e to test applications; we must also understand\n\u003cem\u003ewhy\u003c/em\u003e it makes sense to test them in a certain way. To help with this, try\nthinking of Rails applications like cars:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eModels\u003c/strong\u003e are the \u003cstrong\u003ebasic parts\u003c/strong\u003e that make cars useful, like the fuel tank,\nengine, and tires.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eViews\u003c/strong\u003e are the \u003cstrong\u003einteractive parts\u003c/strong\u003e that the driver (user) can see and\ntouch, like the steering wheel, pedals, and gear shift.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eControllers\u003c/strong\u003e are the rest of the \u003cstrong\u003econnecting parts\u003c/strong\u003e under the hood that\nconnect the views to the models, like how the steering column (along with the\nrest of the steering assembly) connects the wheel to the tires. The users don't\nreally see them, think of them, or even necessarily know they exist, but they're\njust as necessary.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eModels are not too difficult to test because they have very specific purposes\nthat can be easily separated from the rest of the application.\u003c/p\u003e\n\n\u003cp\u003eThis holds true for cars as well: a good tire has a tread that grips the road in\nadverse conditions, doesn't puncture easily, and so on. You don't really need to\nthink about the rest of the car when you're testing what makes a good wheel.\u003c/p\u003e\n\n\u003cp\u003eThis gets a little trickier for views and controllers, but we'll talk more about\nthat once we're done with models.\u003c/p\u003e\n\n\n\n\u003cp\u003eThese go in \u003ccode\u003espec/models\u003c/code\u003e, one file per model.\u003c/p\u003e\n\n\u003cp\u003eModel tests use the least amount of special features, since all you really need\nis the model class itself. The most common usage for model tests is to make sure\nyou have set up your validations correctly.\u003c/p\u003e\n\n\u003cp\u003eSuppose we're working with this model:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# app/models/monster.rb\u003cbr\u003e\u003cbr\u003eclass Monster \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates :name, presence: true\u003cbr\u003e  validates :size, inclusion: { in: [\"tiny\", \"average\", \"like, REALLY big\"] }\u003cbr\u003e  validates :taxonomy, format: { with: /\\A[A-Z](\\.|[a-z]+) [a-z]{2,}\\z/,\u003cbr\u003e    message: \"must include genus and species, like 'Homo sapiens'\" }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eTesting for Validity\u003c/h2\u003e\n\n\u003cp\u003eFirst, we'll make sure that it understands a valid Monster:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# spec/models/monster_spec.rb\u003cbr\u003e\u003cbr\u003edescribe Monster do\u003cbr\u003e  let(:attributes) do\u003cbr\u003e    {\u003cbr\u003e      name: \"Dustwing\",\u003cbr\u003e      size: \"tiny\",\u003cbr\u003e      taxonomy: \"Abradacus nonexistus\"\u003cbr\u003e    }\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it \"is considered valid\" do\u003cbr\u003e    expect(Monster.new(attributes)).to be_valid\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSome questions to answer first:\u003c/p\u003e\n\n\u003ch3\u003eWhat is \u003ccode\u003elet\u003c/code\u003e?\u003c/h3\u003e\n\n\u003cp\u003eIf you haven't seen \u003ccode\u003elet\u003c/code\u003e before, it is a \u003ca href=\"http://www.relishapp.com/rspec/rspec-core/docs/helper-methods/let-and-let\"\u003estandard helper method\u003c/a\u003e\nthat takes a symbol and a block. It runs the block \u003cstrong\u003eonce per example\u003c/strong\u003e in which\nit is called and saves the return value in a local variable named according to\nthe symbol. This means you get a fresh copy in every test case.\u003c/p\u003e\n\n\u003ch3\u003eWhy is \u003ccode\u003elet\u003c/code\u003e better than \u003ccode\u003ebefore :each\u003c/code\u003e?\u003c/h3\u003e\n\n\u003cp\u003eIt's more fine-grained, which means you have better control over your data. It\ncan be used in combination with \u003ccode\u003ebefore\u003c/code\u003e statements to set up your test data\n\u003cem\u003ejust right\u003c/em\u003e before the examples are run.\u003c/p\u003e\n\n\u003ch3\u003eWhy did we use \u003ccode\u003elet\u003c/code\u003e to make an attribute hash?\u003c/h3\u003e\n\n\u003cp\u003eWe could have put the entire \u003ccode\u003eMonster.new\u003c/code\u003e call inside our \u003ccode\u003elet\u003c/code\u003e block, but\nusing an attribute hash instead has some advantages:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf we want to tweak the data first, we can just pass \u003ccode\u003eattributes.merge(name:\n\"Other\")\u003c/code\u003e while preserving the rest of the attributes.\u003c/li\u003e\n\u003cli\u003eWe can also refer to \u003ccode\u003eattributes\u003c/code\u003e when making assertions about what the actual\nobject should look like.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIt's a good balance between saving keystrokes and maintaining the flexibility of\nyour test data.\u003c/p\u003e\n\n\u003ch3\u003eWhere does \u003ccode\u003ebe_valid\u003c/code\u003e come from?\u003c/h3\u003e\n\n\u003cp\u003eRSpec provides plenty of built-in matchers, which you can peruse in their \u003ca href=\"http://rspec.info/documentation/3.4/rspec-expectations/frames.html#!RSpec/Matchers.html\"\u003eAPI\ndocs\u003c/a\u003e, but \u003ccode\u003ebe_valid\u003c/code\u003e is conspicuously absent from the list.\u003c/p\u003e\n\n\u003cp\u003eThis code uses a neat trick that RSpec refers to as \"\u003ca href=\"https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers/predicate-matchers\"\u003epredicate\nmatchers\u003c/a\u003e\", and you'll see it \u003cstrong\u003ea lot\u003c/strong\u003e in Rails testing.\u003c/p\u003e\n\n\u003cp\u003eIn Ruby, it's conventional for methods that return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e to be named\nwith a question mark at the end. These methods are called \u003cstrong\u003epredicate methods\u003c/strong\u003e,\nbecause \"predicate\" is an English grammar term for the part of a sentence that\nmakes a statement about the subject.\u003c/p\u003e\n\n\u003cp\u003eAs you learned earlier in this unit, Rails provides a \u003ccode\u003evalid?\u003c/code\u003e method that\nreturns \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e depending on whether the model object in question\npassed its validations.\u003c/p\u003e\n\n\u003cp\u003eIn RSpec, when you call a nonexistent matcher (such as \u003ccode\u003ebe_valid\u003c/code\u003e), it strips\noff the \u003ccode\u003ebe_\u003c/code\u003e (\u003ccode\u003evalid\u003c/code\u003e), adds a question mark (\u003ccode\u003evalid?\u003c/code\u003e), and checks to see if\nthe object responds to a method by that name (\u003ccode\u003emonster.valid?\u003c/code\u003e).\u003c/p\u003e\n\n\u003ch2\u003eTesting for Validation Failure\u003c/h2\u003e\n\n\u003cp\u003eNow, let's add some tests to make sure our validations are working in the\nopposite direction:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# spec/models/monster_spec.rb\u003cbr\u003e\u003cbr\u003e  let(:missing_name) { attributes.except(:name) }\u003cbr\u003e  let(:invalid_size) { attributes.merge(size: \"not that big\") }\u003cbr\u003e  let(:missing_species) { attributes.merge(taxonomy: \"Abradacus\") }\u003cbr\u003e\u003cbr\u003e  it \"is invalid without a name\" do\u003cbr\u003e    expect(Monster.new(missing_name)).not_to be_valid\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it \"is invalid with an unusual size\" do\u003cbr\u003e    expect(Monster.new(invalid_size)).not_to be_valid\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it \"is invalid with a missing species\" do\u003cbr\u003e    expect(Monster.new(missing_species)).not_to be_valid\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that each of these \u003ccode\u003elet\u003c/code\u003e blocks rely on the first one, \u003ccode\u003eattributes\u003c/code\u003e, which\ncontains all of our valid attributes. \u003ccode\u003emissing_name\u003c/code\u003e uses the Rails hash helper\n\u003ccode\u003eexcept\u003c/code\u003e to exclude the \u003ccode\u003ename\u003c/code\u003e key while the other two use the standard Ruby\n\u003ccode\u003emerge\u003c/code\u003e method to overwrite valid attributes with invalid ones.\u003c/p\u003e\n\n\u003ch2\u003eI saw some search results using \u003ccode\u003eshould\u003c/code\u003e. What is that?\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eshould\u003c/code\u003e is an older RSpec syntax that has been deprecated in favor of \u003ccode\u003eexpect\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eAny other RSpec features to know about?\u003c/h2\u003e\n\n\u003cp\u003eSeveral RSpec features have been moved over time into the\n\u003ca href=\"https://github.com/rspec/rspec-collection_matchers\"\u003erspec-collection_matchers\u003c/a\u003e gem, which can make some\ndetailed assertions more readable.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe biggest risk in writing controller tests is redundancy: controllers exist\nto connect views and models, so it's difficult to test them in isolation.\u003c/p\u003e\n\n\u003cp\u003eFirst, we'll go over \u003cstrong\u003ehow\u003c/strong\u003e to write controller tests. Then, our discussion of\nthe \u003cstrong\u003ewhy\u003c/strong\u003e will bring us into the final subject, \"feature tests\".\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# spec/controllers/monsters_controller_spec.rb\u003cbr\u003e\u003cbr\u003edescribe MonstersController, type: :controller do\u003cbr\u003e  let(:attributes) do\u003cbr\u003e    {\u003cbr\u003e      name: \"Dustwing\",\u003cbr\u003e      size: \"tiny\",\u003cbr\u003e      taxonomy: \"Abradacus nonexistus\"\u003cbr\u003e    }\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it \"renders the show template\" do\u003cbr\u003e    monster = Monster.create!(attributes)\u003cbr\u003e    get :show, id: monster.id\u003cbr\u003e    expect(response).to render_template(:show)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  describe \"creation\" do\u003cbr\u003e    before { post :create, monster: attributes }\u003cbr\u003e    let(:monster) { Monster.find_by(name: \"Dustwing\") }\u003cbr\u003e\u003cbr\u003e    it \"creates a new monster\" do\u003cbr\u003e      expect(monster).to_not be_nil\u003cbr\u003e    end\u003cbr\u003e\u003cbr\u003e    it \"redirects to the monster's show page\" do\u003cbr\u003e      expect(response).to redirect_to(monster_path(monster))\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can use the \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003epost\u003c/code\u003e methods (along with \u003ccode\u003epatch\u003c/code\u003e and \u003ccode\u003edelete\u003c/code\u003e) to\ninitiate test requests on the controller. A \u003ccode\u003eresponse\u003c/code\u003e object is available to\nset expectations on, such as \u003ccode\u003erender_template\u003c/code\u003e or \u003ccode\u003eredirect_to\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe tests above are great, especially while we're still getting used to how\ncontrollers are wired. However, almost these exact tests could be copied for\n\u003cem\u003eany\u003c/em\u003e controller set up according to Rails' RESTish conventions. There's nothing\ninherently wrong with that, but the redundance, along with the need to test\nviews, inspired the creation of a new type of test supported by Capybara known\nas a \"Feature Test\".\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you were going to write tests for a car's steering wheel, what would you\nstart with?\u003c/p\u003e\n\n\u003cp\u003eHere's one idea:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhen the steering wheel is rotated to the left, the tires rotate to the left.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis makes sense, but it's testing much more than the steering wheel. This test\nrelies on the view (steering wheel), the model (tires), \u003cem\u003eand\u003c/em\u003e the controller\n(steering column)!\u003c/p\u003e\n\n\u003cp\u003eThis is called an \u003cstrong\u003eacceptance test\u003c/strong\u003e because it is phrased in terms of\nfeatures that provide value to the user. (It could also be called an\n\u003cstrong\u003eintegration test\u003c/strong\u003e because it tests more than one piece of the system at\nonce.)\u003c/p\u003e\n\n\u003cp\u003eCan we \u003cem\u003eisolate\u003c/em\u003e the steering wheel while still testing its functionality?\u003c/p\u003e\n\n\u003cp\u003eNot really –– the whole point of the steering wheel is to control the tires. We\ncould talk about how it looks or what it's made of, but the functionality is\ninherently tied to the underlying system, just like the views in a Rails app.\nAll of those forms and templates are meaningless without controllers and models\nto populate them.\u003c/p\u003e\n\n\u003cp\u003eIn the last section, we did our best to isolate the controller, and, as a result,\nwe wrote many of our tests in terms of the controller's internal parts (such as\nredirects and request methods). We don't care what the HTML looks like, what\nbutton the user pressed, or how the models are behaving.\u003c/p\u003e\n\n\u003cp\u003eThis is called a \u003cstrong\u003eunit test\u003c/strong\u003e, because it tests a single unit of functionality.\u003c/p\u003e\n\n\u003cp\u003eFor a car, it might look like this:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhen the steering column's flange rotates, the steering shaft transmits the\nrotation to the steering box.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003ePhew. Good thing they covered steering assemblies on the last episode of Car\nTalk, or I wouldn't have known where to start!\u003c/p\u003e\n\n\u003cp\u003eBy now you're probably realizing that if you say \"steering\" enough times, it\nstops sounding like a real word.\u003c/p\u003e\n\n\u003cp\u003eBut, more importantly, it can be difficult to write isolated \u003cstrong\u003eunit tests\u003c/strong\u003e, and\nit's not always clear whether they're useful. Compare the jargon-heavy, extremely\nspecific unit test, above, to this test covering the steering wheel\n(view) \u003cem\u003eand\u003c/em\u003e steering column (controller):\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhen the steering wheel is rotated to the left, the steering column transmits\nthe rotation to the steering box.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis is a \u003cstrong\u003efeature test\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eacceptance test\u003c/strong\u003e at the top of this section covers too much ground,\nmaking it brittle and difficult to maintain.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eunit test\u003c/strong\u003e in the middle of this section is so specific that it almost\nfeels like we just rewrote the controller code with different phrasing.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003efeature test\u003c/strong\u003e, on the other hand, is Just Right. It lets us think like a\nuser (in terms of the steering wheel, or view) while still making intelligent\nassertions about how the underlying system should respond to input (in terms of\nthe steering column, or controller).\u003c/p\u003e\n\n\u003cp\u003eNow, on to the \u003cem\u003ehow\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eCapybara\u003c/h2\u003e\n\n\u003cp\u003eWhen you see key words like \u003ccode\u003evisit\u003c/code\u003e, \u003ccode\u003efill_in\u003c/code\u003e, and \u003ccode\u003epage\u003c/code\u003e, you know you're\nlooking at a \u003ca href=\"https://github.com/jnicklas/capybara\"\u003eCapybara\u003c/a\u003e test.\u003c/p\u003e\n\n\u003cp\u003eTo set up Capybara, one must first add the gem to the \u003ccode\u003eGemfile\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egem 'capybara'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen set up Capybara-Rails integration in \u003ccode\u003espec/rails_helper.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'capybara/rails'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen set up Capybara-RSpec integration in \u003ccode\u003espec/spec_helper.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'capybara/rspec'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFeature tests are traditionally located in \u003ccode\u003espec/features\u003c/code\u003e, but you can put them\nanywhere if you pass the \u003ccode\u003e:type =\u0026gt; :feature\u003c/code\u003e option to your \u003ccode\u003edescribe\u003c/code\u003e call.\u003c/p\u003e\n\n\u003cp\u003eTo test our monster manager with Capybara, we'll start by setting up a \u003ccode\u003eGET\u003c/code\u003e\nrequest and then use Capybara's convenient helper functions to interact with the\npage just like a user would:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# spec/features/monster_creation.rb\u003cbr\u003e\u003cbr\u003edescribe \"monster creation\", type: :feature do\u003cbr\u003e  before do\u003cbr\u003e    visit new_monster_path\u003cbr\u003e    fill_in \"Name\", with: \"Dustwing\"\u003cbr\u003e    select \"tiny\", from: \"monster_size\"\u003cbr\u003e    fill_in \"Taxonomy\", with: \"Abradacus nonexistus\"\u003cbr\u003e    click_button \"Create Monster\"\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen \u003ccode\u003eclick_button\u003c/code\u003e is called, this will trigger the \u003ccode\u003ePOST\u003c/code\u003e request to the\ncontroller's \u003ccode\u003ecreate\u003c/code\u003e action, just as if a user had clicked it in their browser.\u003c/p\u003e\n\n\u003cp\u003eNow, we can write our original controller tests like usual:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  let(:monster) { Monster.find_by(name: \"Dustwing\") }\u003cbr\u003e\u003cbr\u003e  it \"creates a monster\" do\u003cbr\u003e    expect(monster).to_not be_nil\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it \"redirects to the new monster's page\" do\u003cbr\u003e    expect(current_path).to eq(monster_path(monster))\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd because we're in Capybara land, we also have a very convenient way of making\nassertions about the final \u003ccode\u003eGET\u003c/code\u003e request:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  it \"displays the monster's name\" do\u003cbr\u003e    within \"h1\" do\u003cbr\u003e      expect(page).to have_content(monster.name)\u003cbr\u003e    end\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003ewithin\u003c/code\u003e sets the context for our next expectation, restricting it to the first\n\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e tag encountered on the page. This way, our \u003ccode\u003eexpect\u003c/code\u003e call will only pass\nif the specified content (\u003ccode\u003e\"Dustwing\"\u003c/code\u003e) appears inside that first heading.\u003c/p\u003e\n\n\u003cp\u003eOne interesting thing about this approach is that we're being much \u003cem\u003eless\u003c/em\u003e\nexplicit about certain expectations. For example, we're testing the redirect not\nwith the initial \u003ccode\u003e302\u003c/code\u003e response but instead by examining the current path in\nCapybara's virtual \"browser session\". This is much more powerful and intuitive,\nand it doesn't sacrifice much in the way of expressivity.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe hardest part about testing usually ends up being the \"why\" and not the\n\"how\". Why write the test this way and not that way?\u003c/p\u003e\n\n\u003cp\u003eYou will probably see Capybara feature tests in wider usage than direct\ncontroller and view tests, but they're not universal. If you're doing something\nunusual, like a series of complex redirects that change based on authorization\nlevel, it makes sense to write a more isolated controller test. But for standard\nCRUD functionality, Capybara is designed to save you a lot of time and mental\neffort.\u003c/p\u003e\n\n\u003cp\u003eThese can serve as fairly reliable guidelines:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eModels should always be thoroughly unit tested.\u003c/li\u003e\n\u003cli\u003eControllers should be as thin as possible to keep your feature tests simple.\u003c/li\u003e\n\u003cli\u003eIf you can't avoid making a controller complex, it deserves its own isolated\ntest.\u003c/li\u003e\n\u003cli\u003eCapybara's syntax is much more powerful than Rails's built-in functionality for\nview tests, so stick with it whenever possible.\u003c/li\u003e\n\u003cli\u003eDon't get carried away with the details when testing views: you just need to\nmake sure the information is in the right place. If your tests are too strict,\nit will be impossible to make even simple tweaks to your templates without\nbreaking the build.\u003c/li\u003e\n\u003c/ul\u003e","frontPage":false},{"exportId":"asynchronous-web-requests-with-using-thunk-and-redux","title":"Asynchronous Web Requests with Using Thunk and Redux","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-thunk-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-thunk-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-thunk-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eLearn how to use action creator functions to make asynchronous web requests for data in \u003ccode\u003eRedux\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eUnderstand why we need special middleware in order to make some action creator functions able to make asynchronous web requests.\u003c/li\u003e \u003cli\u003eLearn how to use the \u003cstrong\u003eRedux Thunk\u003c/strong\u003e middleware to make some actions asynchronous\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003ePart of the value of using Redux is that it provides a centralized way to control the data of an application. In a standard React + Redux application, any child component can connect to the store directly from anywhere in the app. This allows us to keep many of our React components simple — no need for passing props through many nested components, no need to use component \u003ccode\u003estate\u003c/code\u003e to keep track of all the data. A lot of code that would normally be stored in React components can be removed or replaced.\u003c/p\u003e  \u003cp\u003eWith Redux, we can focus more on presentation in our React components, and use actions and reducers to handle the logic of organizing data. In following with this pattern, we'll be discussing a package that works in conjunction with Redux: Thunk.\u003c/p\u003e  \u003cp\u003eThunk handles asynchronous calls when working with Redux. Think for a moment: we have Redux handling all our app's data. So far, it's all been hard-coded data, i.e. data that we set ourselves. It would be great if we could start getting data from other sources.\u003c/p\u003e  \u003cp\u003eWell, if we had a server or an API, we could \u003cem\u003efetch\u003c/em\u003e some remote data, but we're presented with a familiar problem: we've just removed a lot of logic from our components and now we're going to add more logic? Specifically, we're going to fetch data we'll likely want to keep in our Redux store — adding code to our components seems to be a step backwards.\u003c/p\u003e  \u003cp\u003eWith Thunk, we can incorporate asynchronous code in with our Redux actions. This allows us to continue keeping our components relatively simple and more focused on presentation. In this lesson, we're going to go through what Thunk is and how it is implemented with Redux.\u003c/p\u003e  \u003ch2\u003eTrying to Send an Asynchronous Request in Redux\u003c/h2\u003e  \u003cp\u003eWe're familiar with the \u003ccode\u003eRedux\u003c/code\u003e pattern in which the store dispatches an action to the reducer, the reducer uses that action to make changes to the state, and components re-render with new data.\u003c/p\u003e  \u003cp\u003eGoing back to hard-coded examples, in previous lessons, we populated our store using data inside an action creator function. Something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction fetchAstronauts() {\u003cbr\u003e  const astronauts = [\u003cbr\u003e    {name: \"Neil Armstrong\", craft: \"Apollo 11\"},\u003cbr\u003e    {name: \"Buzz Aldrin\", craft: \"Apollo 11\"},\u003cbr\u003e    {name: \"Michael Collins\", craft: \"Apollo 11\"}\u003cbr\u003e  ];\u003cbr\u003e  return {\u003cbr\u003e    type: 'ADD_ASTRONAUTS',\u003cbr\u003e    astronauts\u003cbr\u003e  };\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat happens though, when we're ready to pull in real live data from an external source like an API?\u003c/p\u003e  \u003cp\u003eWell, we already know how to make a web request. We can use something like JavaScript's native Fetch API to send a web request:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efetch('http://api.open-notify.org/astros.json') \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo, can we simply make a \u003ccode\u003efetch\u003c/code\u003e request inside our action creator function instead of hard-coding our data? The code below is a good attempt, but it ultimately ends in failure and disappointment:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react'\u003cbr\u003eimport { connect } from 'react-redux'\u003cbr\u003eimport { fetchAstronauts } from '../actions/fetchAstronauts'\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  handleOnClick() {\u003cbr\u003e    this.props.fetchAstronauts()\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    const astronauts = this.props.astronauts.map(astro =\u0026gt; \u0026lt;li key={astro.id}\u0026gt;{astro.name}\u0026lt;/li\u0026gt;);\u003cbr\u003e\u003cbr\u003e    return(\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={(event) =\u0026gt; this.handleOnClick(event)} /\u0026gt;\u003cbr\u003e        {astronauts}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction mapDispatchToProps(dispatch){\u003cbr\u003e  return { fetchAstronauts: () =\u0026gt; dispatch(fetchAstronauts()) }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction mapStateToProps(state){\u003cbr\u003e  return { astronauts: state.astronauts }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps, mapDispatchToProps)(App)\u003cbr\u003e\u003cbr\u003e// ./src/actions/fetchAstronauts.js\u003cbr\u003eexport function fetchAstronauts() {\u003cbr\u003e  const astronauts = fetch('http://api.open-notify.org/astros.json');\u003cbr\u003e  return {\u003cbr\u003e    type: 'ADD_ASTRONAUTS',\u003cbr\u003e    astronauts\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e// ./src/astronautsReducer.js\u003cbr\u003efunction astronautsReducer(state = { astronauts: [] }, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e\u003cbr\u003e    case 'ADD_ASTRONAUTS':\u003cbr\u003e      return { ...state, astronauts: action.astronauts }\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo if you look at the code above, you get a sense for what we are trying to do. When a user clicks on the button, we call the \u003ccode\u003ehandleOnClick()\u003c/code\u003e function. This calls our action creator, the \u003ccode\u003efetchAstronauts()\u003c/code\u003e function. The action creator then hits the API, and returns an action with our data, which then updates the state through the reducer.\u003c/p\u003e  \u003cp\u003eWhile this might seem like it should work, in reality we have a big problem.\u003c/p\u003e  \u003cp\u003eFetch requests in JavaScript are \u003cem\u003easynchronous\u003c/em\u003e. That means if we make a fetch request at the first line of our \u003ccode\u003efetchAstronauts()\u003c/code\u003e function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport function fetchAstronauts() {\u003cbr\u003e  const astronauts = fetch('http://api.open-notify.org/astros.json');\u003cbr\u003e  return {\u003cbr\u003e    type: 'ADD_ASTRONAUTS',\u003cbr\u003e    astronauts\u003cbr\u003e  };\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe code on the second line will start running \u003cem\u003ebefore the web request resolves and we have a response that we can work with\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eA \u003ccode\u003efetch()\u003c/code\u003e request returns something called a \u003cstrong\u003ePromise\u003c/strong\u003e. A Promise object is an object that represents some value that will be available later. We can access the data when the promise \"resolves\" and becomes available by chaining a \u003ccode\u003ethen()\u003c/code\u003e function onto our \u003ccode\u003efetch()\u003c/code\u003e call.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport function fetchAstronauts() {\u003cbr\u003e  const astronauts = fetch('http://api.open-notify.org/astros.json')\u003cbr\u003e                      .then(response =\u0026gt; response.json())\u003cbr\u003e  return {\u003cbr\u003e    type: 'ADD_ASTRONAUTS',\u003cbr\u003e    astronauts\u003cbr\u003e  };\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur \u003ccode\u003ethen()\u003c/code\u003e function will run when the Promise that \u003ccode\u003efetch()\u003c/code\u003e returns is \u003cem\u003eresolved\u003c/em\u003e, allowing us to access the response data and parse it into JSON. This doesn't solve our problem though because the \u003ccode\u003efetchAstronauts()\u003c/code\u003e function will still return before the Promise is resolved.\u003c/p\u003e  \u003cp\u003eThere's another problem. Because retrieving data takes time, and because we always want our \u003ccode\u003eRedux\u003c/code\u003e application to reflect the current application state, we want to represent the state of the application in between the user asking for data and the application receiving the data. It's almost like each time a user asks for data we want to dispatch two actions to update our state: one to place our state as loading, and another to update the state with the data.\u003c/p\u003e  \u003cp\u003eSo these are the steps we want to happen when the user wishes to call the API:\u003c/p\u003e  \u003col\u003e \u003cli\u003eInvoke \u003ccode\u003efetchAstronauts()\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eDirectly after invoking \u003ccode\u003efetchAstronauts()\u003c/code\u003e dispatch an action to indicate that we are loading data.\u003c/li\u003e \u003cli\u003eCall the \u003ccode\u003efetch()\u003c/code\u003e method, which runs, and returns a Promise that we are waiting to resolve.\u003c/li\u003e \u003cli\u003eWhen the Promise resolves, dispatch another action with a payload of the fetched data that gets sent to the reducer.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eGreat. So how do we do all of this?\u003c/p\u003e  \u003ch2\u003eWe Need Middleware\u003c/h2\u003e  \u003cp\u003eSo we need a way to dispatch an action saying we are loading data, then to make a request to the API, and then to wait for the response and then dispatch another action with the response data.\u003c/p\u003e  \u003cp\u003eLucky for us, we can use some \u003cstrong\u003emiddleware\u003c/strong\u003e for exactly that! Middleware, in this case, will allow us to slightly alter the behavior of our actions, allowing us to add in asynchronous requests. In this case, for middleware, we'll be using Thunk.\u003c/p\u003e  \u003cp\u003eTo use \u003cstrong\u003eRedux Thunk\u003c/strong\u003e you would need to install the NPM package:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003enpm install --save redux-thunk \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen, when you initialize the store in your \u003ccode\u003eindex.js\u003c/code\u003e file, you can incorporate your middleware like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/index.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport { Provider } from 'react-redux';\u003cbr\u003eimport { createStore, applyMiddleware } from 'redux';\u003cbr\u003eimport thunk from 'redux-thunk';\u003cbr\u003eimport rootReducer from './reducers';\u003cbr\u003e\u003cbr\u003econst store = createStore(rootReducer, applyMiddleware(thunk));\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store} \u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt;, document.getElementById('container')\u003cbr\u003e) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we imported in a new function \u003ccode\u003eapplyMiddleware()\u003c/code\u003e from \u003ccode\u003eredux\u003c/code\u003e, along with \u003ccode\u003ethunk\u003c/code\u003e from the \u003ccode\u003eredux-thunk\u003c/code\u003e package, and passed in \u003ccode\u003eapplyMiddleware(thunk)\u003c/code\u003e as a second argument to \u003ccode\u003ecreateStore\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eUsing Redux-Thunk Middleware\u003c/h2\u003e  \u003cp\u003eIn the above code, we tell our store to use the Thunk middleware. This middleware will do a couple of interesting things:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eThunk allows us to return a function inside of our action creator. Normally, our action creator returns a plain JavaScript object, so returning a function is a pretty big change. \u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThat function receives the store's dispatch function as its argument. With that, we can dispatch multiple actions from inside that returned function.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eLet's see the code and then we'll walk through it.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// actions/fetchAstronauts.js\u003cbr\u003eexport function fetchAstronauts() {\u003cbr\u003e  return (dispatch) =\u0026gt; {\u003cbr\u003e    dispatch({ type: 'START_ADDING_ASTRONAUTS_REQUEST' });\u003cbr\u003e    fetch('http://api.open-notify.org/astros.json')\u003cbr\u003e      .then(response =\u0026gt; response.json())\u003cbr\u003e      .then(astronauts =\u0026gt; dispatch({ type: 'ADD_ASTRONAUTS', astronauts }));\u003cbr\u003e  };\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo you can see above that we are returning a function and not an action, and that the power we now get is the ability to dispatch actions from inside of the returned function. So with that power, we first dispatch an action to indicate that we are about to make a request to our API. Then we make the request. We do not hit our \u003ccode\u003ethen()\u003c/code\u003e function until the response is received, which means that we are not dispatching our action of type 'ADD_ASTRONAUTS' until we receive our data. Thus, we are able to send along that data.\u003c/p\u003e  \u003ch3\u003eReviewing Everything Together\u003c/h3\u003e  \u003cp\u003eLet's review the whole application now with Redux and Thunk configured. First we have \u003ccode\u003eindex.js\u003c/code\u003e, which now imports \u003ccode\u003ethunk\u003c/code\u003e and \u003ccode\u003eapplyMiddleware\u003c/code\u003e and uses them when creating the Redux store:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport { Provider } from 'react-redux';\u003cbr\u003eimport { createStore, applyMiddleware } from 'redux';\u003cbr\u003eimport thunk from 'redux-thunk';\u003cbr\u003eimport rootReducer from './reducers';\u003cbr\u003e\u003cbr\u003econst store = createStore(rootReducer, applyMiddleware(thunk));\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store} \u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt;, document.getElementById('container')\u003cbr\u003e) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003eApp.js\u003c/code\u003e component we showed earlier can remain the same — note that although we've called a function \u003ccode\u003efetchAstronauts()\u003c/code\u003e, no actual asynchronous code is in the component. The component's main purpose is to render JSX. It uses data from Redux via \u003ccode\u003emapStateToProps()\u003c/code\u003e and connects an \u003ccode\u003eonClick\u003c/code\u003e event to an action through \u003ccode\u003emapDispatchToProps()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react'\u003cbr\u003eimport { connect } from 'react-redux'\u003cbr\u003eimport { fetchAstronauts } from '../actions/fetchAstronauts'\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  handleOnClick() {\u003cbr\u003e    this.props.fetchAstronauts()\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    const astronauts = this.props.astronauts.map(astro =\u0026gt; \u0026lt;li key={astro.id}\u0026gt;{astro.name}\u0026lt;/li\u0026gt;);\u003cbr\u003e\u003cbr\u003e    return(\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={(event) =\u0026gt; this.handleOnClick(event)} /\u0026gt;\u003cbr\u003e        {astronauts}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction mapDispatchToProps(dispatch){\u003cbr\u003e  return { fetchAstronauts: () =\u0026gt; dispatch(fetchAstronauts()) }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction mapStateToProps(state){\u003cbr\u003e  return {astronauts: state.astronauts}\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps, mapDispatchToProps)(App) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat happens when the \u003ccode\u003eonClick\u003c/code\u003e event is fired? All of that logic is taken care of outside of the component, in our \u003ccode\u003efetchAstronauts()\u003c/code\u003e action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// actions/fetchAstronauts.js\u003cbr\u003eexport function fetchAstronauts() {\u003cbr\u003e  return (dispatch) =\u0026gt; {\u003cbr\u003e    dispatch({ type: 'START_ADDING_ASTRONAUTS_REQUEST' });\u003cbr\u003e    fetch('http://api.open-notify.org/astros.json')\u003cbr\u003e      .then(response =\u0026gt; response.json())\u003cbr\u003e      .then(astronauts =\u0026gt; dispatch({ type: 'ADD_ASTRONAUTS', astronauts }));\u003cbr\u003e  };\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith Thunk configured, our actions can now \u003cem\u003ereturn\u003c/em\u003e a function. We must write the function, but we know that \u003ccode\u003edispatch()\u003c/code\u003e is passed in as an argument. Notice in the code above that there are \u003cem\u003etwo\u003c/em\u003e calls to \u003ccode\u003edispatch()\u003c/code\u003e, first passing in \u003ccode\u003e{ type: 'START_ADDING_ASTRONAUTS_REQUEST' }\u003c/code\u003e before the \u003ccode\u003efetch()\u003c/code\u003e call, then passing in \u003ccode\u003e{ type: 'ADD_ASTRONAUTS', astronauts }\u003c/code\u003e \u003cem\u003einside\u003c/em\u003e \u003ccode\u003e.then()\u003c/code\u003e. By having both \u003ccode\u003edispatch()\u003c/code\u003e calls, it is possible to know just before our application sends a remote request, and then immediately after that request is resolved.\u003c/p\u003e  \u003cp\u003eWe can update our reducer to include both \u003ccode\u003etype\u003c/code\u003es and to also change a bit of state to indicate if data is in the process of being fetched. We'll modify the initial state to do this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/astronautsReducer.js\u003cbr\u003efunction astronautsReducer(state = { astronauts: [], requesting: false }, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e\u003cbr\u003e    case 'START_ADDING_ASTRONAUTS_REQUEST':\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        astronauts: [...state.astronauts],\u003cbr\u003e        requesting: true\u003cbr\u003e      }\u003cbr\u003e\u003cbr\u003e    case 'ADD_ASTRONAUTS':\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        astronauts: action.astronauts,\u003cbr\u003e        requesting: false\u003cbr\u003e      }\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we have a way to indicate in our app when data is being loaded! If \u003ccode\u003erequesting\u003c/code\u003e is true, we could display a loading message in JSX!\u003c/p\u003e  \u003ch3\u003eSummary\u003c/h3\u003e  \u003cp\u003eWe saw that when retrieving data from APIs, we run into a problem where the action creator returns an action before the data is retrieved. To resolve this, we use a middleware called Thunk. Thunk allows us to return a function inside of our action creator instead of a plain JavaScript object. That returned function receives the store's dispatch function, and with that we are able to dispatch multiple actions: one to place the state in a loading state, and another to update our store with the returned data.\u003c/p\u003e  \u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/redux-thunk-readme\"\u003eRedux Thunk Readme\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","frontPage":false},{"exportId":"validations-with-`form-tag`","title":"Validations with `form_tag`","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"validations-with-form_tag-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-with-form_tag-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-with-form_tag-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eNow that we've learned to handle the server side of validations, we need to take care of the client side.\u003c/p\u003e  \u003cp\u003eAt this point, we'll be in step three of the following flow:\u003c/p\u003e  \u003col\u003e \u003cli\u003eUser fills out the form and hits \"Submit\", transmitting the form data via a POST request.\u003c/li\u003e \u003cli\u003eThe controller sees that validations have failed, and re-renders the form.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eThe view displays the errors to the user\u003c/strong\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eAfter this lesson, you'll be able to...\u003c/p\u003e  \u003cul\u003e \u003cli\u003ePrefill in form values based on an instance\u003c/li\u003e \u003cli\u003ePrint out full error messages based on an invalid instance\u003c/li\u003e \u003cli\u003eIntrospect on errors for a field\u003c/li\u003e \u003cli\u003eApply an error class to invalid fields\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003ePre-Filling Form Values\u003c/h2\u003e  \u003cp\u003eNo one likes re-doing work. First, let's make sure we know how to pre-fill forms with the user's input so they don't have to type everything all over again.\u003c/p\u003e  \u003cp\u003eThere are two ways to pre-fill forms in Rails: \u003ccode\u003eform_tag\u003c/code\u003e and \u003ccode\u003eform_for\u003c/code\u003e. \u003ccode\u003eform_for\u003c/code\u003e is \u003cem\u003every\u003c/em\u003e heavy on Rails magic and continues to baffle scientists to this day, so we'll be going over \u003ccode\u003eform_tag\u003c/code\u003e first.\u003c/p\u003e  \u003cp\u003eLet's start with a vanilla form (no pre-filled values yet), using the \u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html\"\u003eFormTagHelper\u003c/a\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/people/new.html.erb //--\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag(\"/people\") do %\u0026gt;\u003cbr\u003e  Name: \u0026lt;%= text_field_tag \"name\" %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  Email: \u0026lt;%= text_field_tag \"email\" %\u0026gt;\u003cbr\u003e  \u0026lt;%= submit_tag \"Create Person\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere's what the HTML output will look like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form action=\"/people\" accept-charset=\"UTF-8\" method=\"post\"\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"utf8\" type=\"hidden\" value=\"✓\" /\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"hidden\" name=\"authenticity_token\" value=\"TKTzvQF+atT/XHG/7h48xKVdXvILdiPj83XQhn2mWBNNhvv0Oh5YfAl2LM3DlHsQjbMOFVsYEyOwj+rPaSk3Bw==\" /\u0026gt;\u003cbr\u003e  Name: \u0026lt;input type=\"text\" name=\"name\" id=\"name\" /\u0026gt;\u0026lt;br /\u0026gt;\u003cbr\u003e  Email: \u0026lt;input type=\"text\" name=\"email\" id=\"email\" /\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" name=\"commit\" value=\"Create Person\" /\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe're working with this \u003ccode\u003ePerson\u003c/code\u003e model:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/person.rb\u003cbr\u003e\u003cbr\u003eclass Person \u0026lt; ActiveRecord::Base\u003cbr\u003e  validates :name, format: { without: /[0-9]/, message: \"does not allow numbers\" }\u003cbr\u003e  validates :email, uniqueness: true\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis means validation will fail if we put numbers into the \"Name\" field, and the form will be re-rendered with the invalid \u003ccode\u003e@person\u003c/code\u003e object available.\u003c/p\u003e  \u003cp\u003eRemember that our \u003ccode\u003ecreate\u003c/code\u003e action now looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/people_controller.rb\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    @person = Person.new(person_params)\u003cbr\u003e\u003cbr\u003e    if @person.valid?\u003cbr\u003e      @person.save\u003cbr\u003e      redirect_to person_path(@person)\u003cbr\u003e    else\u003cbr\u003e      # re-render the :new template WITHOUT throwing away the invalid @person\u003cbr\u003e      render :new\u003cbr\u003e    end\u003cbr\u003e  end \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith this in mind, we can use the invalid \u003ccode\u003e@person\u003c/code\u003e object to \"re-fill\" the usually-empty \u003ccode\u003enew\u003c/code\u003e form with the user's invalid entries. This way they don't have to re-type anything.\u003c/p\u003e  \u003cp\u003e(You wouldn't \u003cem\u003ealways\u003c/em\u003e want to do this –– for example, with credit card numbers –– because you want to minimize the amount of times sensitive information travels back and forth over the internet.)\u003c/p\u003e  \u003cp\u003eNow, let's plug the information back into the form:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/people/new.html.erb //--\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag \"/people\" do %\u0026gt;\u003cbr\u003e  Name: \u0026lt;%= text_field_tag \"name\", @person.name %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  Email: \u0026lt;%= text_field_tag \"email\", @person.email %\u0026gt;\u003cbr\u003e  \u0026lt;%= submit_tag \"Create Person\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs you can see from the \u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-text_field_tag\"\u003edocs\u003c/a\u003e, the second argument to \u003ccode\u003etext_field_tag\u003c/code\u003e, as with most form tag helpers, is the \"default\" value. The HTML for the two field inputs used to look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eName: \u0026lt;input type=\"text\" name=\"name\" id=\"name\" /\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003eEmail: \u0026lt;input type=\"text\" name=\"email\" id=\"email\" /\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut now it will look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eName: \u0026lt;input type=\"text\" name=\"name\" id=\"name\" value=\"Jane Developer\" /\u0026gt;\u0026lt;br /\u0026gt;\u003cbr\u003eEmail: \u0026lt;input type=\"text\" name=\"email\" id=\"email\" value=\"jane@developers.fake\" /\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen the browser renders those inputs, they'll be pre-filled with the data in their \u003ccode\u003evalue\u003c/code\u003e attributes.\u003c/p\u003e  \u003cp\u003eThis is the same technique used to create \u003ccode\u003eedit\u003c/code\u003e/\u003ccode\u003eupdate\u003c/code\u003e forms.\u003c/p\u003e  \u003cp\u003eWe can also use the \u003cstrong\u003esame\u003c/strong\u003e form code for empty \u003cem\u003eand\u003c/em\u003e pre-filled forms because \u003ccode\u003e@person = Person.new\u003c/code\u003e will create an empty model object whose attributes are all \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eDisplaying All Errors With \u003ccode\u003eerrors.full_messages\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eWhen a model fails validation, its \u003ccode\u003eerrors\u003c/code\u003e attribute is filled with information about what went wrong. Rails creates an \u003ca href=\"http://api.rubyonrails.org/classes/ActiveModel/Errors.html\"\u003eActiveModel::Errors\u003c/a\u003e object to carry this information.\u003c/p\u003e  \u003cp\u003eThe simplest way to show errors is to just spit them all out at the top of the form by iterating over \u003ccode\u003e@person.errors.full_messages\u003c/code\u003e. But first, we'll have to check whether there are errors to display with \u003ccode\u003e@person.errors.any?\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% if @person.errors.any? %\u0026gt;\u003cbr\u003e  \u0026lt;div id=\"error_explanation\"\u0026gt;\u003cbr\u003e    \u0026lt;h2\u0026gt;There were some errors:\u0026lt;/h2\u0026gt;\u003cbr\u003e    \u0026lt;ul\u0026gt;\u003cbr\u003e      \u0026lt;% @person.errors.full_messages.each do |message| %\u0026gt;\u003cbr\u003e        \u0026lt;li\u0026gt;\u0026lt;%= message %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;% end %\u0026gt;\u003cbr\u003e    \u0026lt;/ul\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf the model has two errors, there will be two items in \u003ccode\u003efull_messages\u003c/code\u003e, which could result in the following HTML:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"error_explanation\"\u0026gt;\u003cbr\u003e  \u0026lt;h2\u0026gt;There were some errors:\u0026lt;/h2\u0026gt;\u003cbr\u003e  \u0026lt;ul\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;Name does not allow numbers\u0026lt;/li\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;Email is already taken\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;/ul\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is nice, but it's not very helpful from a user interface standpoint. It would be much better if the incorrect fields themselves were highlighted somehow.\u003c/p\u003e  \u003ch2\u003eDisplaying Pre-Field Errors With \u003ccode\u003eerrors[]\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eActiveModel::Errors\u003c/code\u003e has much more than just a list of \u003ccode\u003efull_message\u003c/code\u003e error strings. It can also be used to access field-specific errors by interacting with it like a hash. If the field has errors, they will be returned in an array of strings:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e@person.errors[:name] #=\u0026gt; [\"does not allow numbers\"]\u003cbr\u003e@person.errors[:email] #=\u0026gt; [] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith this in mind, we can conditionally \"error-ify\" each field in the form, targeting the divs containing each field:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div class=\"field\"\u0026gt;\u003cbr\u003e  \u0026lt;%= label_tag \"name\", \"Name\" %\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag \"name\", @person.name %\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRails will add a class if there are errors, but you can manually do so like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div class=\"field\u0026lt;%= ' field_with_errors' if @person.errors[:name].any? %\u0026gt;\"\u0026gt;\u003cbr\u003e  \u0026lt;%= label_tag \"name\", \"Name\" %\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag \"name\", @person.name %\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou can override \u003ccode\u003eActionView::Base.field_error_proc\u003c/code\u003e to change it to something that suits your UI. It's currently defined as this within \u003ccode\u003eActionView::Base:\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e There is a deliberate space added in \u003ccode\u003e' field_with_errors'\u003c/code\u003e in the example above. If \u003ccode\u003e@person.errors[:name].any?\u003c/code\u003e validates to true, the goal here is to produce two class names separated by a space (\u003ccode\u003eclass=field field_with_errors\u003c/code\u003e). Without the added space, we would get \u003ccode\u003eclass=fieldfield_with_errors\u003c/code\u003e instead!\u003c/p\u003e  \u003ch2\u003eThe Whole Picture\u003c/h2\u003e  \u003cp\u003eBy now, our full form has grown quite a bit:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_tag(\"/people\") do %\u0026gt;\u003cbr\u003e  \u0026lt;% if @person.errors.any? %\u0026gt;\u003cbr\u003e    \u0026lt;div id=\"error_explanation\"\u0026gt;\u003cbr\u003e      \u0026lt;h2\u0026gt;There were some errors:\u0026lt;/h2\u0026gt;\u003cbr\u003e      \u0026lt;ul\u0026gt;\u003cbr\u003e        \u0026lt;% @person.errors.full_messages.each do |message| %\u0026gt;\u003cbr\u003e          \u0026lt;li\u0026gt;\u0026lt;%= message %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e        \u0026lt;% end %\u0026gt;\u003cbr\u003e      \u0026lt;/ul\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;% end %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e  \u0026lt;div class=\"field\u0026lt;%= ' field_with_errors' if @person.errors[:name].any? %\u0026gt;\"\u0026gt;\u003cbr\u003e    \u0026lt;%= label_tag \"name\", \"Name\" %\u0026gt;\u003cbr\u003e    \u0026lt;%= text_field_tag \"name\", @person.name %\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;div class=\"field\u0026lt;%= ' field_with_errors' if @person.errors[:email].any? %\u0026gt;\"\u0026gt;\u003cbr\u003e    \u0026lt;%= label_tag \"email\", \"Email\" %\u0026gt;\u003cbr\u003e    \u0026lt;%= text_field_tag \"email\", @person.email %\u0026gt;\u003cbr\u003e  \u0026lt;/div\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= submit_tag \"Create\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that some whitespace has been added for \"breathing room\" and increased readability. Additionally, indentation has been very carefully maintained.\u003c/p\u003e  \u003cp\u003eIt's already starting to feel pretty unwieldy to manually manage all of this conditional display logic, but, without an understanding of the dirty details, we can't even begin to use more powerful tools like \u003ccode\u003eform_for\u003c/code\u003e correctly.\u003c/p\u003e  \u003cp\u003eNext, we'll dive into a lab using \u003ccode\u003eform_tag\u003c/code\u003e and artisanally craft our own markup.\u003c/p\u003e","frontPage":false},{"exportId":"delete-forms-and-requests","title":"DELETE Forms and Requests","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"delete-forms-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/delete-forms-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/delete-forms-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eSo far, we've worked with three pieces of the CRUD puzzle:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eCreating records, using HTTP \u003ccode\u003ePOST\u003c/code\u003e requests.\u003c/li\u003e \u003cli\u003eReading records, using HTTP \u003ccode\u003eGET\u003c/code\u003e requests.\u003c/li\u003e \u003cli\u003eUpdating records, using HTTP \u003ccode\u003ePATCH\u003c/code\u003e requests.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eOne piece remains:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eDeleting records, using HTTP \u003ccode\u003eDELETE\u003c/code\u003e requests.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eBut, all is not well in Browsertown. In many cases, sending a request with the \u003ccode\u003ePATCH\u003c/code\u003e or \u003ccode\u003eDELETE\u003c/code\u003e method will not work. In this lesson, we'll focus on \u003ccode\u003eDELETE\u003c/code\u003e, but many of the same issues arise with \u003ccode\u003ePATCH\u003c/code\u003e requests, as well.\u003c/p\u003e  \u003cp\u003eWhy? What can we do as a workaround?\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eAfter this lesson, you'll be able to...\u003c/p\u003e  \u003cul\u003e \u003cli\u003eDraw a \u003ccode\u003edelete\u003c/code\u003e route mapping to a \u003ccode\u003e#destroy()\u003c/code\u003e action\u003c/li\u003e \u003cli\u003eExplain the problem with submitting \u003ccode\u003edelete\u003c/code\u003e requests\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003eform_tag\u003c/code\u003e to build a delete form for an object\u003c/li\u003e \u003cli\u003eBuild a \u003ccode\u003e#destroy()\u003c/code\u003e action that finds the instance, destroys it, and redirects to the \u003ccode\u003eindex\u003c/code\u003e action\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003elink_to\u003c/code\u003e and \u003ccode\u003ebutton_to :method =\u0026gt; :delete\u003c/code\u003e to destroy an object without a form\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIgnorance is bliss\u003c/h2\u003e  \u003cp\u003eBefore we dive into the problem with \u003ccode\u003eDELETE\u003c/code\u003e (and \u003ccode\u003ePATCH\u003c/code\u003e) requests, let's proceed as if we were none the wiser, setting up our route and form as usual:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003edelete '/people/:id', to: 'people#destroy', as:'person' \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# app/views/people/show.html.erb\u003cbr\u003e\u003cbr\u003e\u0026lt;h2\u0026gt;\u0026lt;%= @person.name %\u0026gt;\u0026lt;/h2\u0026gt;\u003cbr\u003e\u0026lt;%= @person.email %\u0026gt;\u003cbr\u003e\u0026lt;%= form_tag person_path(@person.id), method: \"delete\" do %\u0026gt;\u003cbr\u003e  \u0026lt;%= submit_tag \"Delete #{@person.name}\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut, wait a minute... there's something weird about the output we get:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h2\u0026gt;Caligula\u0026lt;/h2\u0026gt;\u003cbr\u003ecaligula@rome-circa-40-AD.com\u003cbr\u003e\u0026lt;form accept-charset=\"UTF-8\" action=\"/people/1\" method=\"post\"\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"_method\" type=\"hidden\" value=\"delete\" /\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"utf8\" type=\"hidden\" value=\"✓\" /\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"authenticity_token\" type=\"hidden\" value=\"f755bb0ed134b76c432144748a6d4b7a7ddf2b71\" /\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"commit\" type=\"submit\" value=\"Delete Caligula\" /\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEnhance!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form accept-charset=\"UTF-8\" action=\"/people/1\" method=\"**post**\"\u0026gt;\u003cbr\u003e  \u0026lt;input name=\"_method\" type=\"hidden\" value=\"**delete**\" /\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat's going on? Why the extra input?\u003c/p\u003e  \u003ch2\u003eProgramming is hard\u003c/h2\u003e  \u003cp\u003eWeb developers love to be on the cutting edge. We hoover up new tools and techniques and aren't afraid of breaking a few million eggs to figure out that we actually have no idea how to make an omelette. Projects like Rails themselves are a product of this incredible devotion to progress and automation.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eBrowser\u003c/strong\u003e and \u003cstrong\u003eserver\u003c/strong\u003e developers are the yin to the web developers' yang. These are the people who own and maintain the tools themselves: Internet Explorer, Firefox, Chrome, Apache, and so on.\u003c/p\u003e  \u003cp\u003eWhen a web developer makes a mistake, it might affect the users of their site.\u003c/p\u003e  \u003cp\u003eWhen a browser or server developer makes a mistake, it might affect \u003ca href=\"http://venturebeat.com/2015/05/28/google-chrome-now-has-over-1-billion-users/\"\u003e\u003cstrong\u003e\u003cem\u003eover a billion people\u003c/em\u003e\u003c/strong\u003e\u003c/a\u003e!\u003c/p\u003e  \u003cp\u003eBecause of this, browser/server developers have to go slow. \u003cem\u003eReally\u003c/em\u003e slow. And they have to resist the urge to release \"duct tape\" solutions because duct tape doesn't scale to a billion users!\u003c/p\u003e  \u003cp\u003eThis means that, sometimes, incomplete solutions can remain in place for years, or even decades, while the maintainers go back and forth trying to find a better approach that won't open an eldritch portal to Bosch's \u003ca href=\"https://www.khanacademy.org/humanities/renaissance-reformation/northern/hieronymus-bosch/a/bosch-the-garden-of-earthly-delights\"\u003eGarden of Earthly Delights\u003c/a\u003e.\u003c/p\u003e  \u003ch2\u003eWhat's all this have to do with \u003ccode\u003eDELETE\u003c/code\u003e requests?\u003c/h2\u003e  \u003cp\u003eAs of HTML5, forms officially do not support \u003ccode\u003eDELETE\u003c/code\u003e and \u003ccode\u003ePATCH\u003c/code\u003e for their methods.\u003c/p\u003e  \u003cp\u003eThere's no short and sweet answer to explain this. If you want to dive deep and understand as much as possible about the decisions that went into it, you can read more on \u003ca href=\"http://programmers.stackexchange.com/questions/114156/why-are-there-are-no-put-and-delete-methods-on-html-forms\"\u003ethis illuminating StackExchange post\u003c/a\u003e, but, for the purposes of succinct explanation, you can always stick with the tried and true \"for historical reasons.\"\u003c/p\u003e  \u003cp\u003eWhat you're seeing in the above \u003ccode\u003e#form_tag()\u003c/code\u003e behavior is a \u003cstrong\u003eworkaround\u003c/strong\u003e implemented for us by Rails itself. With this in mind, we get the best of both worlds:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWe get to be \u003cstrong\u003egood HTTP-abiding citizens\u003c/strong\u003e who use the correct request methods for their corresponding goals (\u003ccode\u003eGET\u003c/code\u003e for read, \u003ccode\u003ePATCH\u003c/code\u003e for update, and so on).\u003c/li\u003e \u003cli\u003eWe get to \u003cstrong\u003emaintain our sanity\u003c/strong\u003e and not worry about W3C drama while writing views.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eThat's great. Can we actually delete something now?\u003c/h2\u003e  \u003cp\u003eThus enlightened, we can (finally) proceed with our original goal:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/people_controller.rb\u003cbr\u003e\u003cbr\u003e  def destroy\u003cbr\u003e    Person.find(params[:id]).destroy\u003cbr\u003e    redirect_to people_url\u003cbr\u003e  end \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNothing too special happening here except for a bit of method-chaining to immediately destroy the found instance.\u003c/p\u003e  \u003ch2\u003eFancy JavaScript Helper\u003c/h2\u003e  \u003cp\u003eAs shown, you have to go to a user's \u003ccode\u003eshow\u003c/code\u003e page to delete them. What if we want an admin control panel where users can be deleted from a list?\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/people/index.html.erb //--\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;% @people.each do |person| %\u0026gt;\u003cbr\u003e\u0026lt;div class=\"person\"\u0026gt;\u003cbr\u003e  \u0026lt;span\u0026gt;\u0026lt;%= person.name %\u0026gt;\u0026lt;/span\u0026gt;\u003cbr\u003e  \u0026lt;%= link_to \"Delete\", person, method: :delete, data: { confirm: \"Really?\" } %\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html#method-i-link_to\"\u003e\u003ccode\u003elink_to\u003c/code\u003e\u003c/a\u003e is a method of \u003ccode\u003eUrlHelper\u003c/code\u003e that has a number of convenient features.\u003c/p\u003e  \u003cp\u003eThe HTML generated by that call to \u003ccode\u003elink_to\u003c/code\u003e looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;a data-confirm=\"Really?\" rel=\"nofollow\" data-method=\"delete\" href=\"/people/1\"\u0026gt;Delete\u0026lt;/a\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003edata-confirm\u003c/code\u003e attribute and the \u003ccode\u003edata-method\u003c/code\u003e attribute rely on some JavaScript built into Rails.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003edata-method\u003c/code\u003e will \"submit\" a \u003ccode\u003eDELETE\u003c/code\u003e request as if a form had been submitted. It will use \u003ccode\u003eGET\u003c/code\u003e (the default method used by all browsers for HTML links) if the user has JavaScript disabled.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003edata-confirm\u003c/code\u003e pops up a confirmation window before the link is followed, allowing the user to make sure they're ready to delete someone forever (what a decision!).\u003c/p\u003e  \u003ch2\u003eUse button_to\u003c/h2\u003e  \u003cp\u003eA slight variation from the \u003ccode\u003elink_to\u003c/code\u003e method described above is using \u003ccode\u003ebutton_to\u003c/code\u003e to send a delete request.\u003c/p\u003e  \u003cp\u003eSays the \u003ca href=\"https://api.rubyonrails.org/v5.1.7/classes/ActionView/Helpers/UrlHelper.html#method-i-button_to\"\u003edocumentation\u003c/a\u003e:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e[\u003ccode\u003ebutton_to\u003c/code\u003e] Generates a form containing a single button that submits to the URL created by the set of options.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eSo while we taught \u003ccode\u003elink_to\u003c/code\u003e first, Rails thinks that \u003ccode\u003ebutton_to\u003c/code\u003e is a safer tool for representing delete requests. Interesting! The \u003ccode\u003ebutton_to\u003c/code\u003e helper works very similarly to \u003ccode\u003elink_to\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= button_to \"Delete Image\", image_path(@image), method: :delete %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs you can read in the documentation, or guess thanks to Ruby's simple syntax, the first argument is the button text; the second argument is an expression of a route, and \u003ccode\u003emethod\u003c/code\u003e is used to tell the form to send its payload as an HTTP \u003ccode\u003eDELETE\u003c/code\u003e action.\u003c/p\u003e","frontPage":false},{"exportId":"components-events-actions-and-stores","title":"Components, Events, Actions, and Stores","type":"WikiPage","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"react-components-events-actions-and-stores\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/react-components-events-actions-and-stores/fork\" target=\"_blank\"\u003e\n        \u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-components-events-actions-and-stores\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/react-components-events-actions-and-stores/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eIn this lesson we're going to revisit some of the concepts we have explored so far. Our focus will be on how components interact with each other and how global application state can be managed in a predictable, scalable way using actions, stores and event handlers.\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003eReview interactions between different parts of a React application\u003c/li\u003e\n    \u003cli\u003eDiscuss trade-offs and benefits of one-way data flow\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eComponent State vs Store State\u003c/h2\u003e\n\u003cp\u003eWhile our previous lessons extensively focused on moving state \u003cstrong\u003eout\u003c/strong\u003e of individual components, we don't always have to. In fact, sometimes it might even introduce more complexity than needed. Using \u003ccode\u003esetState()\u003c/code\u003e and \"local\" component-level state is a perfectly fine choice in most cases.\u003c/p\u003e\n\u003cp\u003eIn general, we should not start out by putting all our state into some form of global store (or multiple stores).\u003c/p\u003e\n\u003cp\u003eWhen architecting a user interface, try to use local state and parent props \u003cstrong\u003efirst\u003c/strong\u003e. If we end up constantly passing down tons of props, we should consider connecting the component in question with a Redux store.\u003c/p\u003e\n\u003cp\u003eE.g. let's say we want to render some form of carousel, something like \u003ca href=\"https://getbootstrap.com/docs/4.0/components/carousel/\"\u003eBootstrap's Carousel component\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eA carousel is a perfect example on where using a store to extract out component state doesn't necessarily make things easier (or would simply be a massive overkill).\u003c/p\u003e\n\u003cp\u003eWriting the essential handler functions for the component in question using \"classical\" React-style without \u003cstrong\u003eany\u003c/strong\u003e \"outside\" state is trivial:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Carousel extends React.Component {\u003cbr\u003e  constructor(props) {\u003cbr\u003e    super(props);\u003cbr\u003e    this.state = {\u003cbr\u003e      // We start out rendering the first slide. 0 denotes the index of the\u003cbr\u003e      // active item.\u003cbr\u003e      currentSlide: 0,\u003cbr\u003e    };\u003cbr\u003e  }\u003cbr\u003e  /**\u003cbr\u003e   * Handler function that transitions to the next slide in the carousel.\u003cbr\u003e   * This is the function that will be run once the user clicks the \"next\"\u003cbr\u003e   * button.\u003cbr\u003e   */\u003cbr\u003e  goNext = () =\u0026gt; {\u003cbr\u003e    const previousSlide = this.state.currentSlide;\u003cbr\u003e    this.setState({ currentSlide: previousSlide + 1 });\u003cbr\u003e  }\u003cbr\u003e  /**\u003cbr\u003e   * Equivalent to `goNext`. Handler function that will be invoked when clicking\u003cbr\u003e   * the \"back\" button.\u003cbr\u003e   */\u003cbr\u003e  goBack = () =\u0026gt; {\u003cbr\u003e    const previousSlide = this.state.currentSlide;\u003cbr\u003e    this.setState({ currentSlide: previousSlide - 1 });\u003cbr\u003e  }\u003cbr\u003e  render() {\u003cbr\u003e    // Magic goes here\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this case, using the local state of the component has a couple of advantages over using an external store:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eThe state is \u003cstrong\u003eby definition\u003c/strong\u003e bound to the component\u003c/li\u003e\n\n\u003cp\u003eWhen rendering a very long list of carousels, keeping the state stored in the store in sync with the \u003cem\u003eactual\u003c/em\u003e list of rendered components is hard. Let's say we render one carousel for each photo \"collection\" — which could for example be represented by an array for image sources —\u0026nbsp;keeping the array length in sync with whatever data structure we would use in the store for representing the selected slide index is unnecessarily complex. For example, when adding a photo collection, we would need to add the \u003ccode\u003ecurrentSlide\u003c/code\u003e property to the store as well.\u003c/p\u003e\n\u003cp\u003eSimply distinguishing between \"component UI\" state and global application state radically simplified the architecture in the above case, since component state can by definition not exist without a matching component (and vice versa).\u003c/p\u003e\n\n    \u003cli\u003eSimplified Testing\u003c/li\u003e\n\n\u003cp\u003eTesting React components is extremely easy compared to other frameworks, such as Angular. Testing packages like \u003ca href=\"https://airbnb.io/enzyme/\"\u003eEnzyme\u003c/a\u003e from Airbnb allow us to mount individual components in a test, pass them props, cause state changes, check what JSX is rendered, etc...\u003c/p\u003e\n\u003cp\u003eUsing stores doesn't necessarily break this abstraction, but it makes it much harder to properly test all the possible states that a component can be in, since a store might contain state that isn't directly consumed by the component to be tested.\u003c/p\u003e\n\u003cp\u003eBut more importantly, we now need to manage a store during testing. We can use the same packages and functions like \u003ccode\u003ecreateStore()\u003c/code\u003e we use to set up Redux with React, but the tests become more complicated and sometimes less flexible as a result.\u003c/p\u003e\n\u003cp\u003eWe can also mock it out — some node packages allow us to create a fake store for the tests. Overall, though, because Redux changes the way data is maintained, tests need to change accordingly, becoming more complicated.\u003c/p\u003e\n\n    \u003cli\u003eReusing the component is possible\u003c/li\u003e\n\n\u003cp\u003eWhile we focused on implementing our own set of stores, some people prefer to use Redux, Rx, mobx or some other library for managing state and implementing unidirectional data flow.\u003c/p\u003e\n\u003cp\u003eBy storing state in an external store, we implicitly couple the component to whatever architecture we chose for our main application. If we're implementing an accordion component using \u003ca href=\"https://facebook.github.io/flux/\"\u003eFlux\u003c/a\u003e (the data flow pattern Redux is based on), it means everyone using our component will have to use Flux in order to interact with it (even though it might be hidden through the public API of the component).\u003c/p\u003e\n  \u003c/ol\u003e\n\u003cp\u003eHence using component state (and props) instead of stores is the preferred way when creating reusable components.\u003c/p\u003e\n\u003ch2\u003ePresentational vs Container Components\u003c/h2\u003e\n\u003cp\u003eWhile it is possible to connect any component to our store, one pattern is to only connect \u003cstrong\u003eContainer components\u003c/strong\u003e. Since they are primarily concerned managing state and actions that mutate the state of an app, they tend to be a good place to connect to the store.\u003c/p\u003e\n\u003cp\u003eIn single page apps, a good rule of thumb is to make each page of your application (or component attached to a sub-route) a container component. While it isn't necessarily a bad idea to use nested container components, passing props to pure components tends to be easier to test and reason about.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePresentational components\u003c/strong\u003e are modular, reusable (and typically small) components that are concerned with \"how stuff looks\". In this pattern, they are not typically connected to a store.\u003c/p\u003e\n\u003cp\u003eUsually UI elements (with a bit of interaction) are presentational components and therefore not concerned with the actual state of the application. E.g. a modal, accordion, or button should not be container components. They only receive props and display them.\u003c/p\u003e\n\u003cp\u003eThe benefit of separating presentational components from any \u003cstrong\u003eRedux\u003c/strong\u003e specific code is that it makes them highly reusable. They're just React components, after all.\u003c/p\u003e\n\u003cp\u003eThis is only a suggested pattern. Deciding whether or not something should be a container or presentational component is not a definitive decision. Making presentational components stateful by wiring them up to a store is usually quite easy and gets rid of a lot of indirection. For example passing down a lot of different props 5 levels deep is much more error prone than simply connecting the \"leaf\" component to the store.\u003c/p\u003e\n\u003cp\u003eIt also means we don't need to re-render all the components in between the presentational leaf component that is due to be rendered and the intermediate components that simply pass down the state via props from the container component.\u003c/p\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html\"\u003eInteractivity and Dynamic UIs\u003c/a\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367#.7v3xs9al2\"\u003eYou Might Not Need Redux\u003c/a\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ca href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.jp0dni40i\"\u003ePresentational and Container Components\u003c/a\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/react-components-events-actions-and-stores\"\u003eComponents, Events, Actions And Stores\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","frontPage":false}],"assignments":[{"exportId":"g3fe4218578c4b633053d65328b7363e2","title":"Active Record Lifecycle","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"activerecord-lifecycle-reading\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/activerecord-lifecycle-reading/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-lifecycle-reading\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-lifecycle-reading/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the concept of AR Lifecycle methods\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003ebefore_save\u003c/code\u003e, \u003ccode\u003ebefore_create\u003c/code\u003e, and \u003ccode\u003ebefore_validation\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eUnderstand when to use \u003ccode\u003ebefore_validation\u003c/code\u003e vs. \u003ccode\u003ebefore_save\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eCallbacks\u003c/h2\u003e\n\n\u003cp\u003eNow that we are integrating \u003ccode\u003eActiveRecord\u003c/code\u003e into Rails, we should note that\nwe can make bits of code run whenever something happens in our model: like when\nit's created (but not yet saved to the database), saved to the database, or\neven deleted.  Everything we cover here is called an \"Active Record Lifecycle\nCallback\". Many people just call them callbacks. It's a bit shorter.\u003c/p\u003e\n\n\u003cp\u003eTake a look at the blog app that is included. Be sure to run the migrations\nbefore you start learning from Rails (we do this with \u003ccode\u003erake db:migrate\u003c/code\u003e)! We\nhave a \u003ccode\u003ePost\u003c/code\u003e model and a few views.  The \u003ccode\u003ePost\u003c/code\u003e \u003ccode\u003ebelongs_to\u003c/code\u003e an \u003ccode\u003eAuthor\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNote also that in the \u003ccode\u003ePost\u003c/code\u003e model you'll notice a \u003cstrong\u003evalidation\u003c/strong\u003e to make sure\nthat post titles are in title case. Title case means every word starts with a\ncapital letter.\u003c/p\u003e\n\n\u003cp\u003eSo, in order to make sure that our validation always passes, before every save,\nwe want Rails to run our title-case algorithm on the \u003ccode\u003etitle\u003c/code\u003e of the \u003ccode\u003ePost\u003c/code\u003e.\nLet's create the \u003ccode\u003emake_title_case\u003c/code\u003e method then.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# post.rb\u003cbr\u003e\u003cbr\u003edef make_title_case\u003cbr\u003e  self.title = self.title.titlecase\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo make sure that all of our \u003ccode\u003ePost\u003c/code\u003es have the correctly-formatted title, we're\ngoing to run \u003ccode\u003emake_title_case\u003c/code\u003e during the first of the available lifecycle\n\"points:\" \u003ccode\u003ebefore_save\u003c/code\u003e.  Our validation and lifecycle callback will make sure\nour posts are always title-cased.\u003c/p\u003e\n\n\u003cp\u003eWe write lifecycle callbacks similarly to how you use \u003ccode\u003ehas_many\u003c/code\u003e or \u003ccode\u003evalidates\u003c/code\u003e\nand place this \"hook\" onto saving at the top of our model file. Since lifecycle\nmethods run \"as if by magic,\" we won't see them being called explicitly in one\nmethod by another method versus Rails running it for us, we put such statements\nat the top so that it catches other programmers' eyes.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e\u003cbr\u003e  belongs_to :author\u003cbr\u003e  validate :is_title_case\u003cbr\u003e\u003cbr\u003e  # New Code!!\u003cbr\u003e  before_save :make_title_case\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e  def is_title_case\u003cbr\u003e    if title.split.any?{|w|w[0].upcase != w[0]}\u003cbr\u003e      errors.add(:title, \"Title must be in title case\")\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def make_title_case\u003cbr\u003e    # Rails provides a String#titlecase method\u003cbr\u003e    self.title = self.title.titlecase\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe'd expect that whenever Rails persists \u003ccode\u003ePost\u003c/code\u003e models to the database, (so\n\u003ccode\u003e#save\u003c/code\u003e and \u003ccode\u003e#create\u003c/code\u003e) this code will get run. Let's open up the console\n(\u003ccode\u003erails c\u003c/code\u003e) and test it out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ep = Post.create(title: \"testing\")\u003cbr\u003e#   (0.1ms)  begin transaction\u003cbr\u003e#   (0.1ms)  rollback transaction\u003cbr\u003e# =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWait! There was no \u003ccode\u003eINSERT\u003c/code\u003e SQL command issued. In fact, we see the \u003ccode\u003erollback\ntransaction\u003c/code\u003e line. That means that it didn't actually save to the database. If\nwe do \u003ccode\u003ep.valid?\u003c/code\u003e right now it will return \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis feels surprising. Most of the time when we have this feeling while\nprogramming it's because we didn't understand something subtle. This is true\nhere.\u003c/p\u003e\n\n\u003cp\u003eIt turns out that the \u003ccode\u003ebefore_save\u003c/code\u003e is called \u003cstrong\u003eafter\u003c/strong\u003e validation occurs. So\nRails goes \u003ccode\u003eis valid?\u003c/code\u003e \"Nope! Stop!\", and never makes it to \u003ccode\u003ebefore_save\u003c/code\u003e. We\nmissed that subtlety.\u003c/p\u003e\n\n\u003cp\u003eLet's change our callback to the \u003ccode\u003ebefore_validation\u003c/code\u003e callback. This one happens\n\u003cstrong\u003ebefore\u003c/strong\u003e validation. That means that first our \u003ccode\u003ebefore_validation\u003c/code\u003e code\nworks, which title cases the title, \u003cem\u003ethen\u003c/em\u003e the validation runs, which passes!\nHere is the final code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e\u003cbr\u003e  belongs_to :author\u003cbr\u003e  validate :is_title_case\u003cbr\u003e\u003cbr\u003e  # New Code!!\u003cbr\u003e  before_validation :make_title_case\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def is_title_case\u003cbr\u003e    if title.split.any?{|w|w[0].upcase != w[0]}\u003cbr\u003e      errors.add(:title, \"Title must be in title case\")\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def make_title_case\u003cbr\u003e    self.title = self.title.titlecase\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere is a rule of thumb: \u003cstrong\u003eWhenever you are modifying an attribute of the\nmodel, use \u003ccode\u003ebefore_validation\u003c/code\u003e. If you are doing some other action, then use\n\u003ccode\u003ebefore_save\u003c/code\u003e.\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3\u003eBefore Save\u003c/h3\u003e\n\n\u003cp\u003eNow let's do something that (properly) belongs in the \u003ccode\u003ebefore_save\u003c/code\u003e. We use\n\u003ccode\u003ebefore_save\u003c/code\u003e for actions that need to occur that aren't modifying the model\nitself. For example, whenever you save to the database, let's send an email to\nthe \u003ccode\u003eAuthor\u003c/code\u003e alerting them that the post was just saved!\u003c/p\u003e\n\n\u003cp\u003eThis is a perfect \u003ccode\u003ebefore_save\u003c/code\u003e action. It doesn't modify the model so there is\nno validation weirdness, and we don't want to email the user if the Post is\ninvalid. That would be just mean! So if you had some method called\n\u003ccode\u003eemail_author_about_post\u003c/code\u003e you would modify your \u003ccode\u003ePost\u003c/code\u003e model to look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e\u003cbr\u003e  belongs_to :author\u003cbr\u003e  validate :is_title_case\u003cbr\u003e\u003cbr\u003e  before_validation :make_title_case\u003cbr\u003e\u003cbr\u003e  # New Code!!\u003cbr\u003e  before_save :email_author_about_post\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def is_title_case\u003cbr\u003e    if title.split.any?{|w|w[0].upcase != w[0]}\u003cbr\u003e      errors.add(:title, \"Title must be in title case\")\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def email_author_about_post\u003cbr\u003e    # Not implemented.\u003cbr\u003e    # For more information: https://guides.rubyonrails.org/action_mailer_basics.html\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def make_title_case\u003cbr\u003e    self.title = self.title.titlecase\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eBefore Create\u003c/h3\u003e\n\n\u003cp\u003eBefore you move on, let's cover one last callback that is useful:\n\u003ccode\u003ebefore_create\u003c/code\u003e. \u003ccode\u003ebefore_create\u003c/code\u003e is very close to \u003ccode\u003ebefore_save\u003c/code\u003e with one major\ndifference: it only gets called when a model is created for the first time.\nThis means not every time the object is persisted, just when it is \u003cstrong\u003enew\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor more information on all of the callbacks available to you, check out \u003ca href=\"http://guides.rubyonrails.org/active_record_callbacks.html\"\u003ethis\namazing rails guide\u003c/a\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g9db15065ca5aa4ec74cd2351babe3abd","title":"Active Record Validations Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"activerecord-validations-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/activerecord-validations-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-validations-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/activerecord-validations-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eBasic Validations\u003c/h2\u003e\n\n\u003cp\u003eAdd validations to these models such that...\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAll authors have a name\u003c/li\u003e\n\u003cli\u003eNo two authors have the same name\u003c/li\u003e\n\u003cli\u003eAuthor phone numbers are exactly ten digits\u003c/li\u003e\n\u003cli\u003eAll posts have a title\u003c/li\u003e\n\u003cli\u003ePost content is at least 250 characters long\u003c/li\u003e\n\u003cli\u003ePost summary is a maximum of 250 characters\u003c/li\u003e\n\u003cli\u003ePost category is either \u003ccode\u003eFiction\u003c/code\u003e or \u003ccode\u003eNon-Fiction\u003c/code\u003e\nThis step requires an \u003ccode\u003einclusion\u003c/code\u003e validator, which was not outlined in the\nlesson. You'll need to refer to the \u003ca href=\"https://guides.rubyonrails.org/active_record_validations.html\"\u003eRails guide\u003c/a\u003e to look\nup how to use it.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eCustom Validations\u003c/h2\u003e\n\n\u003cp\u003eFinally, add a custom validator to \u003ccode\u003ePost\u003c/code\u003e that ensures the title is\nsufficiently clickbait-y. If the title does not contain \"Won't Believe\",\n\"Secret\", \"Top [number]\", or \"Guess\", the validator should add a validation.\u003c/p\u003e\n\n\u003cp\u003eUse the \u003ca href=\"https://guides.rubyonrails.org/active_record_validations.html#custom-methods\"\u003eCustom methods\u003c/a\u003e style of validator found in the Rails documentation.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gf05dcfc8bc945bf6963bd4ec5f26eddf","title":"Associations and Validations","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-blog-associations-validations\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-blog-associations-validations/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-blog-associations-validations\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-blog-associations-validations/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eThis is the second lab iteration off of \u003ca href=\"https://github.com/learn-co-curriculum/rails-blog-scaffold/tree/master\"\u003eRails Blog Scaffold\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003e\u003cem\u003eRemember\u003c/em\u003e: when you generate models, controllers, etc., be sure to include the \u003ccode\u003e--no-test-framework\u003c/code\u003e option so that it skips tests (which the labs already have).\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eAdd a column to an existing table.\u003c/li\u003e \u003cli\u003eGenerate models, views, and controllers.\u003c/li\u003e \u003cli\u003eCreate associations between models.\u003c/li\u003e \u003cli\u003eDefine proper routes.\u003c/li\u003e \u003cli\u003eAdd validations.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eMigrations, Associations, and Routes\u003c/h2\u003e  \u003col\u003e \u003cli\u003eChange the migration for \u003ccode\u003eposts\u003c/code\u003e to include \u003ccode\u003econtent\u003c/code\u003e (set \u003ccode\u003econtent\u003c/code\u003e's datatype to \u003ccode\u003etext\u003c/code\u003e to account for character length).\u003c/li\u003e \u003cli\u003eCreate a migration, model, and optionally controller for \u003ccode\u003eUser\u003c/code\u003e and \u003ccode\u003eTag\u003c/code\u003e (via \u003ccode\u003erails generate\u003c/code\u003e). Check out the documentation on \u003ca href=\"http://api.rubyonrails.org/classes/Rails/Generators.html\"\u003egenerators\u003c/a\u003e, and remember to skip adding tests.\u003c/li\u003e \u003cli\u003eIn order to create the appropriate associations between \u003ccode\u003ePost\u003c/code\u003e and \u003ccode\u003eTag\u003c/code\u003e, we need to create a join table as well.\u003c/li\u003e \u003cli\u003eBuild out model associations and migrations.\u003c/li\u003e \u003cli\u003eBe sure to create the appropriate routes. For now, they can be written as \u003ccode\u003eresources\u003c/code\u003e.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003ecreate\u003c/code\u003e the database, \u003ccode\u003emigrate\u003c/code\u003e the schema, and \u003ccode\u003eseed\u003c/code\u003e it.\u003c/li\u003e \u003cli\u003eMake the model association tests pass.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eValidations\u003c/h2\u003e  \u003cp\u003eActive Record has handy methods you can place on columns in a table to validate certain attributes, like \u003ccode\u003epresence\u003c/code\u003e, \u003ccode\u003elength\u003c/code\u003e, and \u003ccode\u003euniqueness\u003c/code\u003e. These are called in a model. Check out the \u003ca href=\"http://guides.rubyonrails.org/active_record_validations.html\"\u003edocumentation\u003c/a\u003e to see more.\u003c/p\u003e  \u003cp\u003eLet's add validations to...\u003c/p\u003e  \u003col\u003e \u003cli\u003e\n\u003ccode\u003ePost\u003c/code\u003e for the \u003ccode\u003epresence\u003c/code\u003e of both \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003econtent\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eUser\u003c/code\u003e for the \u003ccode\u003euniqueness\u003c/code\u003e of \u003ccode\u003ename\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eTag\u003c/code\u003e for the \u003ccode\u003euniqueness\u003c/code\u003e of \u003ccode\u003ename\u003c/code\u003e\n\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eActive Record handles errors when validations aren't met via user input on our forms. Take a look at what's happening in the partial \u003ccode\u003e_form.html.erb\u003c/code\u003e for users, which was created when we used Rails's scaffold generator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for(@user) do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;% if @user.errors.any? %\u0026gt;\u003cbr\u003e    \u0026lt;div id=\"error_explanation\"\u0026gt;\u003cbr\u003e      \u0026lt;h2\u0026gt;\u0026lt;%= pluralize(@user.errors.count, \"error\") %\u0026gt; prohibited this user from being saved:\u0026lt;/h2\u0026gt;\u003cbr\u003e\u003cbr\u003e      \u0026lt;ul\u0026gt;\u003cbr\u003e      \u0026lt;% @user.errors.full_messages.each do |msg| %\u0026gt;\u003cbr\u003e        \u0026lt;li\u0026gt;\u0026lt;%= msg %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e      \u0026lt;% end %\u0026gt;\u003cbr\u003e      \u0026lt;/ul\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  \u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eBuild out the forms for creating a new post\u003c/h2\u003e  \u003cp\u003eYou've got a great post on kittens that was generated via the seed file, but you want to be able to add some tags. Create a form on the posts form page that lists all the tags as checkboxes, allowing a user to select multiple tags.\u003c/p\u003e  \u003cp\u003eCheck out the documentation for the \u003ccode\u003ecollection_check_boxes\u003c/code\u003e form helper \u003ca href=\"http://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-collection_check_boxes\"\u003ehere\u003c/a\u003e and this post on strong params to be able to make the association between Post and Tag via the Post_Tag join model \u003ca href=\"http://stackoverflow.com/questions/16549382/how-to-permit-an-array-with-strong-parameters\"\u003ehere\u003c/a\u003e.\u003c/p\u003e  \u003cp\u003eMake the tests in \u003ccode\u003efeatures/tags_for_posts_spec.rb\u003c/code\u003e pass.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cp\u003e\u003ca href=\"http://guides.rubyonrails.org/active_record_validations.html\"\u003eActive Record Validations\u003c/a\u003e\u003c/p\u003e  \u003cp\u003e\u003ca href=\"http://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-collection_check_boxes\"\u003eCheck Boxes\u003c/a\u003e\u003c/p\u003e  \u003cp\u003e\u003ca href=\"http://stackoverflow.com/questions/16549382/how-to-permit-an-array-with-strong-parameters\"\u003eStrong Params Array\u003c/a\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g112f2a05e2e37700f50a586a64dbe366","title":"Async Redux Lab: Pictures of Cats","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-thunk-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/redux-thunk-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-thunk-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-thunk-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eWho doesn't want to look at pictures of cats? Well, now you can look at up to 20 pictures of cats with our new React + Redux app. All you have to do is... build it yourself! In this lab, you are tasked with building out a React + Redux app that fetches data using Thunk. Since this is a pretty specific task, we'll walk through it a bit in this Readme. Let's get started! \u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eUse Redux-Thunk middleware to make an asynchronous web request in an action creator function\u003c/li\u003e \u003cli\u003eDispatch an action from the \u003ccode\u003ecomponentDidMount\u003c/code\u003e lifecycle method.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eWe'll build out our app following the \u003cstrong\u003econtainer pattern\u003c/strong\u003e. We'll have one top-level component, \u003ccode\u003eApp\u003c/code\u003e, that connects to the store and gets data from the state via \u003ccode\u003emapStateToProps\u003c/code\u003e. \u003ccode\u003eApp\u003c/code\u003e will render a child presentational component, \u003ccode\u003eCatList\u003c/code\u003e, which will receive the list of cat pics from \u003ccode\u003eApp\u003c/code\u003e and render them in a series of \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tags.\u003c/p\u003e  \u003cp\u003eWe'll be getting our cat pics from a real API! Sort of. We made a very special API just for you to use with this lab (aren't you so lucky). We've got a GitHub repository set up with GitHub pages to deliver a JSON file. If you point your browser to \u003ca href=\"https://learn-co-curriculum.github.io/cat-api/cats.json\"\u003ehttps://learn-co-curriculum.github.io/cat-api/cats.json\u003c/a\u003e  you should see a JSON collection of 20 cat image objects. Now that we have a  source for the data, we'll need to set up Redux and Thunk.\u003c/p\u003e  \u003ch3\u003ePart 1: Set Up the Store and Reducer and Action Creator\u003c/h3\u003e  \u003ch4\u003eConfiguring the Store\u003c/h4\u003e  \u003cp\u003eFirst things first, use Redux's \u003ccode\u003ecreateStore()\u003c/code\u003e function to initialize your store in \u003ccode\u003esrc/index.js\u003c/code\u003e. To get Redux configured, we'll need to import \u003ccode\u003ecreateStore\u003c/code\u003e from \u003ccode\u003eredux\u003c/code\u003e and \u003ccode\u003eProvider\u003c/code\u003e from \u003ccode\u003ereact-redux\u003c/code\u003e. We'll also need to import a reducer. We haven't written it yet, but let's import from \u003ccode\u003esrc/reducers/catsReducer.js\u003c/code\u003e. We pass this reducer into \u003ccode\u003ecreateStore\u003c/code\u003e, assigning the return value to \u003ccode\u003estore\u003c/code\u003e. Then, we'll wrap the \u003ccode\u003eApp\u003c/code\u003e component in \u003ccode\u003eProvider\u003c/code\u003e and pass \u003ccode\u003estore\u003c/code\u003e to it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport App from './App';\u003cbr\u003e\u003cbr\u003eimport { Provider } from 'react-redux';\u003cbr\u003eimport { createStore } from 'redux';\u003cbr\u003eimport catsReducer from './reducers/catsReducer.js';\u003cbr\u003e\u003cbr\u003econst store = createStore(catsReducer)\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store}\u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt;,\u003cbr\u003e  document.getElementById('root')\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is the Redux configuration we've seen previously. To implement Thunk, we'll also need to import \u003ccode\u003eapplyMiddleware\u003c/code\u003e from \u003ccode\u003eredux\u003c/code\u003e and \u003ccode\u003ethunk\u003c/code\u003e from \u003ccode\u003eredux-thunk\u003c/code\u003e (package already included in \u003ccode\u003epackage.json\u003c/code\u003e). We pass \u003ccode\u003ethunk\u003c/code\u003e into \u003ccode\u003eapplyMiddleware()\u003c/code\u003e, and pass \u003cem\u003ethat\u003c/em\u003e in as the second argument for \u003ccode\u003ecreateStore\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport App from './App';\u003cbr\u003e\u003cbr\u003eimport { Provider } from 'react-redux';\u003cbr\u003eimport { createStore, applyMiddleware } from 'redux';\u003cbr\u003eimport thunk from 'redux-thunk';\u003cbr\u003eimport catsReducer from './reducers/catsReducer.js';\u003cbr\u003e\u003cbr\u003econst store = createStore(catsReducer, applyMiddleware(thunk))\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store}\u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt;,\u003cbr\u003e  document.getElementById('root')\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe have the setup for connecting Redux to the React app, and we've configured Thunk. Now, we need to build out the reducer.\u003c/p\u003e  \u003ch4\u003eSetting up the Reducer\u003c/h4\u003e  \u003cp\u003eFor our \u003ccode\u003ecatsReducer()\u003c/code\u003e function in \u003ccode\u003e./src/reducers/catsReducer.js\u003c/code\u003e, we'll want to set up a switch that handles two action types, \u003ccode\u003e'LOADING_CATS'\u003c/code\u003e and \u003ccode\u003e'ADD_CATS'\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/reducers/catsReducer.js\u003cbr\u003e\u003cbr\u003econst catsReducer = (state = { cats: [], loading: false }, action) =\u0026gt; {\u003cbr\u003e  switch(action.type) {\u003cbr\u003e    case 'LOADING_CATS':\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        cats: [...state.cats],\u003cbr\u003e        loading: true\u003cbr\u003e      }\u003cbr\u003e    case 'ADD_CATS':\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        cats: action.cats,\u003cbr\u003e        loading: false\u003cbr\u003e      }\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default catsReducer; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe also set up the initial state here. We can see that in the \u003ccode\u003e'LOADING_CATS'\u003c/code\u003e case, \u003ccode\u003estate.loading\u003c/code\u003e becomes \u003ccode\u003etrue\u003c/code\u003e, while the rest of \u003ccode\u003estate\u003c/code\u003e is just copied to a new object. In the \u003ccode\u003e'ADD_CATS'\u003c/code\u003e case, \u003ccode\u003estate.loading\u003c/code\u003e becomes \u003ccode\u003efalse\u003c/code\u003e, and \u003ccode\u003estate.cats\u003c/code\u003e is set to the \u003ccode\u003eaction.cats\u003c/code\u003e payload (HINT: so we know we're expecting a payload object with a \u003ccode\u003ecats\u003c/code\u003e key).\u003c/p\u003e  \u003ch4\u003eSetting up the Action Creator\u003c/h4\u003e  \u003cp\u003eNow, define your action creator function, \u003ccode\u003efetchCats()\u003c/code\u003e in \u003ccode\u003esrc/actions/catActions\u003c/code\u003e. Remember, Thunk alters the behavior of action creator functions, allowing us to \u003cem\u003ereturn\u003c/em\u003e a function that takes in \u003ccode\u003edispatch\u003c/code\u003e. Inside this function, we can execute asynchronous code, and, once resolved, we can use \u003ccode\u003edispatch\u003c/code\u003e to update our store with the remote data.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003efetchCats()\u003c/code\u003e action creator should use \u003ccode\u003efetch()\u003c/code\u003e to make the web request for your cat pic JSON. It should use a \u003ccode\u003e.then()\u003c/code\u003e function to parse the JSON of the response to this request, and another \u003ccode\u003e.then()\u003c/code\u003e function chained on that to grab the actual collection of cat pic image objects. Something like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efetch('https://learn-co-curriculum.github.io/cat-api/cats.json').then(response =\u0026gt; {\u003cbr\u003e  return response.json()\u003cbr\u003e}).then(responseJSON =\u0026gt; {\u003cbr\u003e  // instead of logging here, call dispatch and send the cat JSON data to your store\u003cbr\u003e  console.log(responseJSON.images)\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRemember, we built the \u003ccode\u003ecatsReducer\u003c/code\u003e to look for two action types. The first,  \u003ccode\u003e'LOADING_CATS'\u003c/code\u003e, should be dispatched \u003cem\u003ebefore\u003c/em\u003e the \u003ccode\u003efetch()\u003c/code\u003e request is called. The other type, \u003ccode\u003e'ADD_CATS'\u003c/code\u003e, should be dispatched along with a payload of the cats JSON collection. Judging by the case for \u003ccode\u003e'ADD_CATS'\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e...\u003cbr\u003ecase 'ADD_CATS':\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        cats: action.cats,\u003cbr\u003e        loading: false\u003cbr\u003e      } ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can see that the reducer is expecting an action that looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  type: 'ADD_CATS',\u003cbr\u003e  cats: // cat data from the cat API\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003ePutting what we know together, we can start by writing the basic function definition:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport const fetchCats = () =\u0026gt; {\u003cbr\u003e  return (dispatch) =\u0026gt; {\u003cbr\u003e\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe first thing we want to do in this function is send a \u003ccode\u003edispatch\u003c/code\u003e to indicate we're loading (fetching) the cats:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport const fetchCats = () =\u0026gt; {\u003cbr\u003e  return (dispatch) =\u0026gt; {\u003cbr\u003e    dispatch({ type: 'LOADING_CATS' })\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen, we call \u003ccode\u003efetch()\u003c/code\u003e, dispatching the returned data:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport const fetchCats = () =\u0026gt; {\u003cbr\u003e  return (dispatch) =\u0026gt; {\u003cbr\u003e    dispatch({ type: 'LOADING_CATS'})\u003cbr\u003e    fetch('https://learn-co-curriculum.github.io/cat-api/cats.json').then(response =\u0026gt; {\u003cbr\u003e      return response.json()\u003cbr\u003e    }).then(responseJSON =\u0026gt; {\u003cbr\u003e      dispatch({ type: 'ADD_CATS', cats: responseJSON.images })\u003cbr\u003e    })\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, we just need the data inside \u003ccode\u003eimages\u003c/code\u003e, so we can pass that directly when calling the second \u003ccode\u003edispatch\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003ePart 2: Build the Container Component\u003c/h3\u003e  \u003cp\u003eNow that Redux and Thunk are set up, it is time to display the retrieved data in our app. First, let's set up the \u003ccode\u003eApp\u003c/code\u003e component to read from our Redux store. We'll do this by first importing \u003ccode\u003econnect\u003c/code\u003e from \u003ccode\u003ereact-redux\u003c/code\u003e, wrapping the function around \u003ccode\u003eApp\u003c/code\u003e on the export line. Then, we'll write a \u003ccode\u003emapStateToProps()\u003c/code\u003e helper function. This function will be passed into \u003ccode\u003econnect\u003c/code\u003e. \u003ccode\u003econnect\u003c/code\u003e calls this function, passing in the state from the Redux store. Any key/value pairs returned by \u003ccode\u003emapStateToProps()\u003c/code\u003e will become props in the \u003ccode\u003eApp\u003c/code\u003e component. Once  all this is set up, let's also add a \u003ccode\u003econsole.log\u003c/code\u003e in the \u003ccode\u003erender\u003c/code\u003e method so we  can confirm Redux is correctly creating its initial state and that we're able  to access that state in our React components.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/App.js\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    console.log(this.props.catPics)\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;h1\u0026gt;CatBook\u0026lt;/h1\u0026gt;\u003cbr\u003e        {/* missing component */}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    catPics: state.cats,\u003cbr\u003e    loading: state.loading\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(App) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUsing the above code, you should see an empty array logged in the console when the app is launched. This is the empty \u003ccode\u003ecats\u003c/code\u003e array in our initial state, which  has been mapped to \u003ccode\u003ethis.props.catPics\u003c/code\u003e in \u003ccode\u003eApp\u003c/code\u003e.\u003c/p\u003e  \u003ch4\u003eDispatching the \u003ccode\u003efetchCats\u003c/code\u003e Action\u003c/h4\u003e  \u003cp\u003eThis is something new, so read carefully...\u003c/p\u003e  \u003cp\u003eYou might be wondering when/where we will actually dispatch our \u003ccode\u003efetchCats\u003c/code\u003e action to get all the cat pics into state. We want our cat pics to be fetched when the \u003ccode\u003eApp\u003c/code\u003e component is first loaded up. So, we'll enact a common pattern in which we hook into a component lifecycle method to fetch the cat pics.\u003c/p\u003e  \u003ch4\u003eThe \u003ccode\u003ecomponentDidMount\u003c/code\u003e function\u003c/h4\u003e  \u003cp\u003eThe \u003ccode\u003ecomponentDidMount()\u003c/code\u003e function will \u003cem\u003ealways be called automatically when the component is mounting for the first time\u003c/em\u003e. This is the perfect place to go and get the cat pics.\u003c/p\u003e  \u003cp\u003eWe need to define our \u003ccode\u003ecomponentDidMount()\u003c/code\u003e function so that it calls our \u003ccode\u003efetchCats()\u003c/code\u003e action creator. We also need to write out a \u003ccode\u003emapDispatchToProps()\u003c/code\u003e function so we can access the function as \u003ccode\u003ethis.props.fetchCats()\u003c/code\u003e inside the  component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/App.js\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003eimport { fetchCats } from './actions/catActions'\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  componentDidMount() {\u003cbr\u003e    console.log(this.props)\u003cbr\u003e    this.props.fetchCats()\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    console.log(this.props.catPics) // log will fire every time App renders\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;h1\u0026gt;CatBook\u0026lt;/h1\u0026gt;\u003cbr\u003e        {/* missing component */}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    catPics: state.cats,\u003cbr\u003e    loading: state.loading\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    fetchCats: () =\u0026gt; dispatch(fetchCats())\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003eexport default connect(mapStateToProps, mapDispatchToProps)(App) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAh! If we check the console, we'll see that \u003ccode\u003ethis.props.catPics\u003c/code\u003e is set to \u003ccode\u003e[]\u003c/code\u003e on the first two renders, but on the third, we see an array of 20 cat objects! Notice that we still can call \u003ccode\u003edispatch\u003c/code\u003e here, even though we're also calling \u003ccode\u003edispatch\u003c/code\u003e in our action creator.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eAside\u003c/strong\u003e: Why is \u003ccode\u003ethis.props.catPics\u003c/code\u003e set to \u003ccode\u003e[]\u003c/code\u003e on the first two renders? The first render is the initial render, so an empty \u003ccode\u003ecatPics\u003c/code\u003e array is always  expected. The \u003cem\u003esecond\u003c/em\u003e render, however, occurs when we send our \u003cem\u003efirst\u003c/em\u003e dispatch, \u003ccode\u003edispatch({type: 'LOADING_CATS'})\u003c/code\u003e, which happens before the fetch request is  executed. \u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eSo far, we have successfully fetched the cats and put them in state, then grabbed  them from state and passed them to the \u003ccode\u003eApp\u003c/code\u003e component as \u003ccode\u003ethis.props.catPics\u003c/code\u003e.  Now we're ready to build the \u003ccode\u003eCatList\u003c/code\u003e component.\u003c/p\u003e  \u003ch4\u003eThe Presentational Component\u003c/h4\u003e  \u003cp\u003eWe will leave the final task to you — building the \u003ccode\u003eCatList\u003c/code\u003e component. Your container component, \u003ccode\u003eApp\u003c/code\u003e, should render the \u003ccode\u003eCatList\u003c/code\u003e component. \u003ccode\u003eApp\u003c/code\u003e will pass \u003ccode\u003ecatPics\u003c/code\u003e down to \u003ccode\u003eCatList\u003c/code\u003e as a prop. \u003ccode\u003eCatList\u003c/code\u003e should iterate over the cat pics and display each cat pic in an image URL. Remember to use \u003ccode\u003edebugger\u003c/code\u003e to take a look at the \u003ccode\u003ecatPics\u003c/code\u003e collection and determine which property of each \u003ccode\u003ecatPic\u003c/code\u003e object you will use to populate your \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tag and render the image.  In order to get the tests to pass, you will need to wrap your \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tags in a  \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e tag or something similar.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWith all tests passing, you should have a working example of a React + Redux + Thunk application. Of the two components, one is purely presentational, just like a regular React app. The other connects to Redux, it's not any different than a  regular React + Redux app. Thunk lets us augment our action creators and handle  our asynchronous requests without requiring any major changes to other parts of  the application.\u003c/p\u003e  \u003ch2\u003eBonus\u003c/h2\u003e  \u003cp\u003eWhile we have a working application, there is one more thing we did not fully implement: handling loading. If you've followed the instructions, you should have access to \u003ccode\u003ethis.props.loading\u003c/code\u003e in your \u003ccode\u003eApp\u003c/code\u003e component. If we log this value, we should see that it starts off \u003ccode\u003efalse\u003c/code\u003e, then becomes \u003ccode\u003etrue\u003c/code\u003e briefly before switching back to \u003ccode\u003efalse\u003c/code\u003e again.\u003c/p\u003e  \u003cp\u003eWhile content is being fetched, it would be nice to show the user something. Spinning icons are often used, but even just a simple 'Loading...' is enough to show to the user that content is on the way.\u003c/p\u003e  \u003cp\u003eHow might we use the value of \u003ccode\u003ethis.props.loading\u003c/code\u003e to implement a loading message until the cat images arrive?\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb5ee9abb5d48f9a5d3b62864e019cc5b","title":"(Candy) Store Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-create-store-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/redux-create-store-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-create-store-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-create-store-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/xT5LMwcxObBBA31D8c/giphy.gif\" alt=\"simpsons-candy\"\u003e\u003c/p\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eWrite a method to create a store.\u003c/li\u003e\n\u003cli\u003eWork with stores, reducers, and actions.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eGood news - you're opening a candy store! First, we just need to build an app to manage our inventory.\u003c/p\u003e\n\u003cp\u003eFor now, we'll want to create a store to keep track of all of the types of candy we sell. Later on, we'll learn how we can manage multiple pieces of state and more than one reducer, but for this challenge, the state is going to be a basic array of strings. By the end of this lab, you should be able to open \u003ccode\u003eindex.html\u003c/code\u003e, use your store's \u003ccode\u003edispatch\u003c/code\u003e function to add a name of a type of candy, and see that name appear on the page.\u003c/p\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eWrite your code in \u003ccode\u003esrc/index.js\u003c/code\u003e. We've provided the \u003ccode\u003ecandyReducer\u003c/code\u003e function for you, as well as a \u003ccode\u003erender\u003c/code\u003e function, so you can get a sense of how they'll work.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWrite a function called \u003ccode\u003ecreateStore\u003c/code\u003e that takes in a reducer function as an argument.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ecreateStore\u003c/code\u003e function should return an object with two methods - \u003ccode\u003egetState\u003c/code\u003e, \u003ccode\u003edispatch\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e* \u003ccode\u003egetState\u003c/code\u003e should return the current state. * \u003ccode\u003edispatch\u003c/code\u003e should take in an action, update the state using the reducer, and call the render function.\u003c/p\u003e\n\u003cp\u003eOnce you've written \u003ccode\u003ecreateStore\u003c/code\u003e, to get everything working, you'll need two more things at the end of \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eNotice that in the provided \u003ccode\u003erender\u003c/code\u003e function, a variable named \u003ccode\u003estore\u003c/code\u003e is called. Define a variable named \u003ccode\u003estore\u003c/code\u003e and assign it to whatever is returned by the \u003ccode\u003ecreateStore\u003c/code\u003e function you've written when it is passed the \u003ccode\u003ecandyReducer\u003c/code\u003e function.\u003c/li\u003e\n\u003cli\u003eInitialize your state using a \u003ccode\u003edispatch\u003c/code\u003e call to the reducer.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eResources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://redux.js.org/docs/basics/Store.html\"\u003eRedux Documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g752113e2a440adaab4aacb2f014250de","title":"Combining Reducers","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"combine-reducers\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/combine-reducers/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/combine-reducers\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/combine-reducers/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eWrite action creators and reducers to modify application state\u003c/li\u003e\n\u003cli\u003eBuild \u003cstrong\u003eRedux's combineReducers()\u003c/strong\u003e function\u003c/li\u003e\n\u003cli\u003eUse the \u003ccode\u003ecombineReducers()\u003c/code\u003e function to delegate different pieces of state to each reducer\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far we have been using a single reducer to return a new state when an action\nis dispatched. This works great for a small application where we only need our\nreducer to manage the state of one resource. However, as you will see, when\nworking with multiple resources, placing all of this logic in one reducer\nfunction can quickly become unwieldy.\u003c/p\u003e\n\n\u003cp\u003eEnter \u003ccode\u003ecombineReducers()\u003c/code\u003e to save the day! In this lab, we'll see how\n\u003cstrong\u003eRedux\u003c/strong\u003e's \u003ccode\u003ecombineReducers()\u003c/code\u003e function lets us delegate different pieces of\nstate to separate reducer functions.\u003c/p\u003e\n\n\u003cp\u003eWe'll do this in the context of a book application that we'll use to keep track\nof programming books that we've read.\u003c/p\u003e\n\n\u003cp\u003eWe want our app to do two things:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eKeep track of all the books we've read: title, author, description.\u003c/li\u003e\n\u003cli\u003eKeep track of the authors who wrote these books.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4\u003eDetermine Application State Structure\u003c/h4\u003e\n\n\u003cp\u003eOur app will need a state object that stores two types of information:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAll our books, in an array\u003c/li\u003e\n\u003cli\u003eOur authors, also in an array\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eEach of these types of information--all our books, and the authors--should be\nrepresented on our store's state object. We want to think of our store's state\nstructure as a database. We will represent this as a belongs to/has many\nrelationship, in that a book belongs to an author and an author has many books.\nSo this means each author would have its own id, and each book would have an\nauthorId as a foreign key.\u003c/p\u003e\n\n\u003cp\u003eWith that, we can set the application state as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  authors: //array of authors\u003cbr\u003e  books: // array of books,\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo our state object will have two top-level keys, each pointing to an array. For\nnow, let's write a single reducer to manage both of these resources.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexport default function bookApp(\u003cbr\u003e  state = {\u003cbr\u003e    authors: [],\u003cbr\u003e    books: []\u003cbr\u003e  },\u003cbr\u003e  action\u003cbr\u003e) {\u003cbr\u003e  let idx;\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case \"ADD_BOOK\":\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        authors: [...state.authors],\u003cbr\u003e        books: [...state.books, action.book]\u003cbr\u003e      };\u003cbr\u003e\u003cbr\u003e    case \"REMOVE_BOOK\":\u003cbr\u003e      idx = state.books.findIndex(book =\u0026gt; book.id === action.id);\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        authors: [...state.authors],\u003cbr\u003e        books: [...state.books.slice(0, idx), ...state.books.slice(idx + 1)]\u003cbr\u003e      };\u003cbr\u003e\u003cbr\u003e    case \"ADD_AUTHOR\":\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        books: [...state.books],\u003cbr\u003e        authors: [...state.authors, action.author]\u003cbr\u003e      };\u003cbr\u003e\u003cbr\u003e    case \"REMOVE_AUTHOR\":\u003cbr\u003e      idx = state.authors.findIndex(author =\u0026gt; author.id === action.id);\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        books: [...state.books],\u003cbr\u003e        authors: [...state.authors.slice(0, idx), ...state.authors.slice(idx + 1)]\u003cbr\u003e      };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is the current set up in \u003ccode\u003esrc/reducers/manageAuthorsAndBooks.js\u003c/code\u003e, and it\nworks. You can see, however, by working with just two resources, the size of our\nreducer increased significantly. Moreover, by placing each resource in the same\nreducer, we are coupling these resources together, where we would prefer to\nmaintain their separation. By creating separate reducers for each resource in an\napplication, we can keep our code organized as our applications get more\ncomplicated.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e You may have noticed something in the reducer example: when we\nupdate one part of \u003ccode\u003estate\u003c/code\u003e, we're still using the spread operator \u003cem\u003eon other\nparts\u003c/em\u003e. For example, in the \u003ccode\u003e\"ADD_AUTHOR\"\u003c/code\u003e case, we add \u003ccode\u003eaction.author\u003c/code\u003e to the\n\u003ccode\u003eauthors\u003c/code\u003e array, but \u003cstrong\u003ewe also use the spread operator to create a new \u003ccode\u003ebook\u003c/code\u003e\narray\u003c/strong\u003e. This is because both \u003ccode\u003eObject.assign()\u003c/code\u003e and the spread operator only\ncreate shallow copies of objects. If we leave out \u003ccode\u003ebooks: [...state.books]\u003c/code\u003e,\nand just write the following:\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode\u003ereturn {\u003cbr\u003e        ...state,\u003cbr\u003e        authors: [...state.authors, action.author]\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA new reference to the old \u003ccode\u003estate.books\u003c/code\u003e array will be used, \u003cem\u003enot a new copy of\nthe array\u003c/em\u003e. This is subtle, and can easily be overlooked, but by referencing the\nold state, we are no longer maintaining an immutable state. \u003ca href=\"https://redux.js.org/faq/immutable-data#what-are-the-benefits-of-immutability\"\u003eThe official redux\ndocumentation\u003c/a\u003e goes into further detail on the benefits of immutability, \u003ca href=\"https://redux.js.org/faq/immutable-data#accidental-object-mutation\"\u003ediscusses\nthis exact issue\u003c/a\u003e, and \u003ca href=\"https://redux.js.org/recipes/structuring-reducers/immutable-update-patterns\"\u003eprovides further examples\u003c/a\u003e of how to properly use the\nspread operator to deeply copy nested data.\u003c/p\u003e\n\n\u003ch2\u003eRefactor by using combineReducers\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecombineReducers()\u003c/code\u003e function allows us to write two or more separate\nreducers, then pass each reducer to the \u003ccode\u003ecombineReducers()\u003c/code\u003e function to produce\nthe reducer we wrote above. Then we pass that combined reducer to the store in\n\u003ccode\u003esrc/index.js\u003c/code\u003e. Let's write some code, and then we'll walk through it below.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport { combineReducers } from \"redux\";\u003cbr\u003e\u003cbr\u003econst rootReducer = combineReducers({\u003cbr\u003e  authors: authorsReducer,\u003cbr\u003e  books: booksReducer\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003eexport default rootReducer;\u003cbr\u003e\u003cbr\u003efunction booksReducer(state = [], action) {\u003cbr\u003e  let idx;\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case \"ADD_BOOK\":\u003cbr\u003e      return [...state, action.book];\u003cbr\u003e\u003cbr\u003e    case \"REMOVE_BOOK\":\u003cbr\u003e      idx = state.findIndex(book =\u0026gt; book.id  === action.id)\u003cbr\u003e      return [...state.slice(0, idx), ...state.slice(idx + 1)];\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction authorsReducer(state = [], action) {\u003cbr\u003e  let idx;\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case \"ADD_AUTHOR\":\u003cbr\u003e      return [...state, action.author];\u003cbr\u003e\u003cbr\u003e    case \"REMOVE_AUTHOR\":\u003cbr\u003e      idx = state.findIndex(author =\u0026gt; author.id  === action.id)\u003cbr\u003e      return [...state.slice(0, idx), ...state.slice(idx + 1)];\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere's a lot of code there, so let's unpack it a bit. At the very top you see\nthe following line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport { combineReducers } from \"redux\";\u003cbr\u003e\u003cbr\u003econst rootReducer = combineReducers({\u003cbr\u003e  authors: authorsReducer,\u003cbr\u003e  books: booksReducer\u003cbr\u003e});\u003cbr\u003e\u003cbr\u003eexport default rootReducer;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThrough \u003ccode\u003ecombineReducer\u003c/code\u003e, we're telling \u003cstrong\u003eRedux\u003c/strong\u003e to produce a reducer which\nwill return a state that has both a key of books with a value equal to the\nreturn value of the \u003ccode\u003ebooksReducer()\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e a key of \u003cstrong\u003eauthors\u003c/strong\u003e with a value\nequal to the return value of the \u003ccode\u003eauthorsReducer()\u003c/code\u003e. Now if you look at the\n\u003ccode\u003ebooksReducer()\u003c/code\u003e and the \u003ccode\u003eauthorsReducer()\u003c/code\u003e you will see that each returns a\ndefault state of an empty array.\u003c/p\u003e\n\n\u003cp\u003eSince we've changed the default export of \u003ccode\u003emanageAuthorsAndBooks.js\u003c/code\u003e, in\n\u003ccode\u003eindex.js\u003c/code\u003e, we don't need to change anything with createStore unless we wanted\nto update names we've assigned:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport { createStore } from \"redux\";\u003cbr\u003eimport rootReducer from \"./reducers/manageAuthorsAndBooks\";\u003cbr\u003e\u003cbr\u003econst store = createStore(\u003cbr\u003e  rootReducer,\u003cbr\u003e  window.__REDUX_DEVTOOLS_EXTENSION__ \u0026amp;\u0026amp; window.__REDUX_DEVTOOLS_EXTENSION__()\u003cbr\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy passing our rootReducer to the createStore method, the application maintains\nits initial state of \u003ccode\u003e{ books: [], authors: [] }\u003c/code\u003e, just as it did when we had\none reducer. From the application's perspective nothing has changed.\u003c/p\u003e\n\n\u003ch4\u003eExamining Our New Reducers\u003c/h4\u003e\n\n\u003cp\u003eNow if we examine the \u003ccode\u003eauthorsReducer()\u003c/code\u003e, notice that this reducer only\nconcerns itself with its own slice of the state. This makes sense. Remember that\nultimately the array that the \u003ccode\u003eauthorsReducer()\u003c/code\u003e returns will be the value to\nthe key of authors. Similarly the \u003ccode\u003eauthorsReducer()\u003c/code\u003e only receives as its\nstate argument the value of state.authors, in other words the authors array.\u003c/p\u003e\n\n\u003cp\u003eSo examining the \u003ccode\u003eauthorsReducer()\u003c/code\u003e, we see that we no longer retrieve the\nlist of authors with a call to \u003ccode\u003estate.authors\u003c/code\u003e, but can access the list of\nauthors simply by calling \u003ccode\u003estate\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction authorsReducer(state = [], action) {\u003cbr\u003e  let idx;\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case \"ADD_AUTHOR\":\u003cbr\u003e      return [...state, action.author];\u003cbr\u003e\u003cbr\u003e    case \"REMOVE_AUTHOR\":\u003cbr\u003e      idx = state.findIndex(author =\u0026gt; author.id === action.id);\u003cbr\u003e      return [...state.slice(0, idx), ...state.slice(idx + 1)];\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eDispatching Actions\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecombineReducer()\u003c/code\u003e function returns to us one large reducer that looks like\nthe following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction reducer(state = {\u003cbr\u003e  authors: [],\u003cbr\u003e  books: []\u003cbr\u003e}, action) {\u003cbr\u003e  let idx\u003cbr\u003e  switch (action.type) {\u003cbr\u003e\u003cbr\u003e    case \"ADD_AUTHOR\":\u003cbr\u003e      return [...state, action.author]\u003cbr\u003e\u003cbr\u003e    case 'REMOVE_AUTHOR':\u003cbr\u003e      ...\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause of this, we can dispatch actions the same way we always did.\n\u003ccode\u003estore.dispatch({ type: 'ADD_BOOK', { title: 'Snow Crash', author: 'Neal Stephenson' } });\u003c/code\u003e\nwill hit our switch statement in the reducer and add a new author. One thing\nto note, is that if you want to have more than one reducer respond to the same\naction, you can.\u003c/p\u003e\n\n\u003cp\u003eFor example, in our application, when a user inputs information about a book,\nthe user \u003cem\u003ealso\u003c/em\u003e inputs the author's name. It would be handy if, when a user\nsubmits a book with an author, that author is also added to our author array.\u003c/p\u003e\n\n\u003cp\u003eThe action dispatched doesn't change: \u003ccode\u003estore.dispatch({ type: 'ADD_BOOK', { title: 'Snow Crash', author: 'Neal Stephenson' } });\u003c/code\u003e. Our\n\u003ccode\u003ebooksReducer\u003c/code\u003e can stay the same for now:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction booksReducer(state = [], action) {\u003cbr\u003e  let idx;\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case \"ADD_BOOK\":\u003cbr\u003e      return [...state, action.book];\u003cbr\u003e\u003cbr\u003e    case \"REMOVE_BOOK\":\u003cbr\u003e      idx = state.findIndex(book =\u0026gt; book.id === action.id);\u003cbr\u003e      return [...state.slice(0, idx), ...state.slice(idx + 1)];\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, in \u003ccode\u003eauthorsReducer\u003c/code\u003e, we can \u003cem\u003ealso\u003c/em\u003e include a switch case for\n\"ADD_BOOK\":\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport uuid from \"uuid\";\u003cbr\u003e\u003cbr\u003efunction authorsReducer(state = [], action) {\u003cbr\u003e  let idx;\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case \"ADD_AUTHOR\":\u003cbr\u003e      return [...state, action.author];\u003cbr\u003e\u003cbr\u003e    case \"REMOVE_AUTHOR\":\u003cbr\u003e      idx = state.findIndex(book =\u0026gt; book.id === action.id);\u003cbr\u003e      return [...state.slice(0, idx), ...state.slice(idx + 1)];\u003cbr\u003e\u003cbr\u003e    case \"ADD_BOOK\":\u003cbr\u003e      let existingAuthor = state.filter(\u003cbr\u003e        author =\u0026gt; author.authorName === action.book.authorName\u003cbr\u003e      );\u003cbr\u003e      if (existingAuthor.length \u0026gt; 0) {\u003cbr\u003e        return state;\u003cbr\u003e      } else {\u003cbr\u003e        return [...state, { authorName: action.book.authorName, id: uuid() }];\u003cbr\u003e      }\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the new \"ADD\u003cem\u003eBOOK\" case, we're checking to see if an authorName matches with\nthe name dispatches from the BookInput component. If the name already exists,\nstate is returned unchanged. If the name is not present, it is added to the\nauthor array. Use the example above to modify the \u003ccode\u003emanageAuthorsAndBooks\u003c/code\u003e\nreducer and you can see the effect. We have two separate forms, one for adding\njust authors, and one that adds books _and\u003c/em\u003e authors.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e We're using a useful package, \u003ccode\u003euuid\u003c/code\u003e, to handle unique ID generation.\nWith this refactor, since we are creating an author ID from within the reducer\ninstead of in \u003ccode\u003eAuthorInput.js\u003c/code\u003e, we need to import it here as well.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eFor learning purposes, our two reducers are in the same file, but it is common\nto separate each reducer into its own file. You could then either import each\nreducer into a \u003cem\u003enew\u003c/em\u003e file, something like \u003ccode\u003ereducers/rootReducer.js\u003c/code\u003e, where\n\u003ccode\u003ecombineReducer\u003c/code\u003e is called. Or, alternatively, you could include\n\u003ccode\u003ecombineReducer\u003c/code\u003e in your \u003ccode\u003esrc/index.js\u003c/code\u003e file. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport authorsReducer from './reducers/authorsReducer';\u003cbr\u003eimport booksReducer from './reducers/booksReducer';\u003cbr\u003e\u003cbr\u003econst rootReducer = combineReducers({\u003cbr\u003e  books: booksReducer,\u003cbr\u003e  authors: authorsReducer\u003cbr\u003e})\u003cbr\u003e\u003cbr\u003econst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ \u0026amp;\u0026amp; window.__REDUX_DEVTOOLS_EXTENSION__())\u003cbr\u003e\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn React/Redux apps where we're using and storing many resources in our store,\nkeeping reducers separated helps us organize code and separate concerns. Actions\ncan cause multiple reducers to modify their own state, but we can still keep all\nmodifications to a \u003cem\u003eparticular\u003c/em\u003e resource within its own separate file.\u003c/p\u003e\n\n\u003ch4\u003eResources\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://egghead.io/lessons/javascript-redux-implementing-combinereducers-from-scratch\"\u003eImplementing Combine Reducers from Scratch\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g5965a6cf9b0567ae293af6537fd68d7f","title":"Completing our Counter Application","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-dispatch-with-event-listeners\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/redux-dispatch-with-event-listeners/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-dispatch-with-event-listeners\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-dispatch-with-event-listeners/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eIn this lesson, you will learn the following:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHow to allow a user to execute the dispatch function by attaching dispatch to event listeners.\u003c/li\u003e \u003cli\u003eThe redux flow.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eUse \u003ccode\u003ejs/reducer.js\u003c/code\u003e to follow along. The file is already set up in \u003ccode\u003eindex.html\u003c/code\u003e, so if you run \u003ccode\u003eopen index.html\u003c/code\u003e, any code in \u003ccode\u003ejs/reducer.js\u003c/code\u003e will execute.\u003c/p\u003e  \u003ch2\u003eApplication Goal\u003c/h2\u003e  \u003cp\u003eWe have built out most of the redux pattern.  Don't worry, we'll review it.\u003c/p\u003e  \u003cp\u003eFor now, let's talk about what we want as a user experience.  Here it is: you click on a button, and you see a number on the page go from zero to one.  Click again, and you see the number go from one to two.  We can see a couple of steps involved in this.\u003c/p\u003e  \u003col\u003e \u003cli\u003eClicking on the button should change the state.\u003cbr\u003e\n\u003c/li\u003e \u003cli\u003eThis change in state should be rendered.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eBrief Redux Review\u003c/h2\u003e  \u003cp\u003eBy now, you've learned a lot about redux, but the basic story about it has not changed:\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eAction -\u0026gt; Reducer -\u0026gt; New State\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eFor example, to increase our state we call \u003ccode\u003edispatch({type: 'INCREASE_COUNT'})\u003c/code\u003e. Our dispatch function calls our reducer which updates state, and then we render that view on the page.\u003c/p\u003e  \u003cp\u003eIn the previous section, we learned that by dispatching an initial action and having a default argument in our reducer, we can set up our initial state.\u003c/p\u003e  \u003ch2\u003eRebuild our Dispatch Function and our Reducer\u003c/h2\u003e  \u003cp\u003eLet's code out our counter application from scratch.  \u003c/p\u003e  \u003ch4\u003e1. Start by remembering our core fact about how redux works.\u003c/h4\u003e  \u003cp\u003e\u003ccode\u003eaction -\u0026gt; reducer -\u0026gt; new state\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eOk, let's translate that into code.  This means if we pass an action and a previous state to our reducer, the reducer should return the new state.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state = {count: 0}\u003cbr\u003e\u003cbr\u003efunction reducer(state, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1};\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk copy this into the \u003ccode\u003ereducer.js\u003c/code\u003e file inside the \u003ccode\u003ejs\u003c/code\u003e folder.  Now let's get some feedback that we did this correctly by opening up our \u003ccode\u003eindex.html\u003c/code\u003e file in Chrome.  From your terminal type \u003ccode\u003eopen index.html\u003c/code\u003e. This index file has a link to the \u003ccode\u003ereducer.js\u003c/code\u003e file, so your code will be accessible from the console - press command+shift+c to open it up.  Now let's test the code by calling the   \u003ccode\u003ereducer()\u003c/code\u003e function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ereducer({count: 0}, {type: 'INCREASE_COUNT'}); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you see a return value of \u003ccode\u003e{count: 1}\u003c/code\u003e then give yourself a big smile. :)\u003c/p\u003e  \u003cp\u003eOk, if we type in state, we see that it's unchanged.  We need to assign our state to be the return value of our reducer each time that we call the reducer. So how do we do that?  Think hard, there's no rush.\u003c/p\u003e  \u003cp\u003eThinking...\u003c/p\u003e  \u003cp\u003eThinking...\u003c/p\u003e  \u003ch4\u003e2. Wrap the execution of our reducer in a function that we call dispatch\u003c/h4\u003e  \u003cp\u003eOk, so we can reassign the state by adding the dispatch function to our \u003ccode\u003ereducer.js\u003c/code\u003e file.  This dispatch function should receive an argument of action. It can access the state because it is declared earlier in the file in global scope.  \u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction dispatch(action){\u003cbr\u003e  state = reducer(state, action);\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow let's see if this reassigns state. Add this \u003ccode\u003edispatch\u003c/code\u003e function in and open or refresh the \u003ccode\u003eindex.html\u003c/code\u003e file in a browser tab. Call \u003ccode\u003edispatch({type: 'INCREASE_COUNT'})\u003c/code\u003e.  It should return \u003ccode\u003eundefined\u003c/code\u003e, since \u003ccode\u003edispatch()\u003c/code\u003e doesn't return anything, but our \u003ccode\u003estate\u003c/code\u003e value should have changed! Type in \u003ccode\u003estate\u003c/code\u003e and see if this is true.  State should return \u003ccode\u003e{count: 1}\u003c/code\u003e.  Hurray! More smiles. :) :)\u003c/p\u003e  \u003cp\u003eNext problem.  Our state says the count is 1, but do you think that is reflected in our HTML?  Me neither.  Ok, so what function is in charge of that. Give it a shot.  I'll be waiting with the answer when you're ready.\u003c/p\u003e  \u003ch4\u003e3. Use the render function to display our state.\u003c/h4\u003e  \u003cp\u003eOk, so now we need a function called render that will place this count on the page.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction render(){\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = state.count;\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo now when we call \u003ccode\u003erender\u003c/code\u003e from the console we should see HTML that reflects the current count. Entering \u003ccode\u003edispatch({type: 'INCREASE_COUNT'})\u003c/code\u003e to change state, then \u003ccode\u003erender\u003c/code\u003e again should update the number displayed.\u003c/p\u003e  \u003cp\u003eSince the two functions go together, the next step is to tie rendering with the dispatch function. Easy enough. Let's alter our dispatch method so that it looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction dispatch(action){\u003cbr\u003e  state = reducer(state, action);\u003cbr\u003e  render();\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk, so now each time we dispatch an action we should have to update our HTML because the \u003ccode\u003erender\u003c/code\u003e function is also called.  Now for a little refactoring. Let's have only our initial state set in the reducer.  We do that by setting our initial state as a default argument to our \u003ccode\u003ereducer\u003c/code\u003e reducer.  Go ahead and tackle it.  We'll show the code below.\u003c/p\u003e  \u003ch4\u003e4. Use a default argument in the reducer to set the initial state.\u003c/h4\u003e  \u003cp\u003eNow our \u003ccode\u003ereducer()\u003c/code\u003e function should look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// let state = {count: 0}\u003cbr\u003efunction reducer(state = {count: 0}, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe are commenting out/deleting the top line where we assign the state, because dispatching an action should take care of it (it doesn't).  Call \u003ccode\u003edispatch\u003c/code\u003e with an action like \u003ccode\u003edispatch({type: 'INCREASE_COUNT'})\u003c/code\u003e, and we would hope that because state is \u003ccode\u003eundefined\u003c/code\u003e, our default argument will be passed through.  The problem is that we still need to declare our state.  So now our updated (working) code looks like the following.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state;\u003cbr\u003efunction reducer(state = {count: 0}, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCall \u003ccode\u003edispatch({type: 'INCREASE_COUNT'})\u003c/code\u003e again, and we get no error.  Instead we get a beautiful piece of HTML code that says the number 1 on it.  Now, if instead we want to show the number zero, our default state, well we can just refresh our page, and then dispatch an action that returns the default state like so: \u003ccode\u003edispatch({type: '@@init'})\u003c/code\u003e.  This does not increase our state, but it does return our default state and then call render.\u003c/p\u003e  \u003cp\u003eThis is what we want to do each time we open our page.  So let's add \u003ccode\u003edispatch({type: '@@INIT'})\u003c/code\u003e at the end of our javascript file.  This is where we left off previously.  Our almost completed code should look like the following.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state;\u003cbr\u003e\u003cbr\u003efunction reducer(state = {count: 0}, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = reducer(state, action)\u003cbr\u003e  render()\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction render(){\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = state.count;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edispatch({type: '@@INIT'}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLooks good.  But we're going further today.  We need to make sure every time the user clicks on a button, we dispatch an action.  How do you think we do that.\u003c/p\u003e  \u003ch4\u003e5. Integrating dispatch with a user event\u003c/h4\u003e  \u003cp\u003eSo \u003ccode\u003edispatch\u003c/code\u003e is responsible for updating the state and re-rendering.  And we want an action to be dispatched each time a user clicks.  So let's attach \u003ccode\u003edispatch\u003c/code\u003e execution to a click event.\u003c/p\u003e  \u003cp\u003eWe'll be writing a \"vanilla\" JavaScript event listener.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet button = document.getElementById('button');\u003cbr\u003e\u003cbr\u003ebutton.addEventListener('click', () =\u0026gt; {\u003cbr\u003e  dispatch({type: 'INCREASE_COUNT'})\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow every time we click, we dispatch an action of type \u003ccode\u003e'INCREASE_COUNT'\u003c/code\u003e.  Dispatch first calls our reducer, which updates our state.  Then dispatch renders the updated view.\u003c/p\u003e  \u003cp\u003ePutting everything together, our code should look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state;\u003cbr\u003efunction reducer(state = {count: 0}, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = reducer(state, action);\u003cbr\u003e  render();\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction render(){\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = state.count;\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edispatch({type: '@@INIT'})\u003cbr\u003e\u003cbr\u003elet button = document.getElementById('button');\u003cbr\u003e\u003cbr\u003ebutton.addEventListener('click', () =\u0026gt; {\u003cbr\u003e  dispatch({type: 'INCREASE_COUNT'})\u003cbr\u003e}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eClick the button.  Our application is done!\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eOh yea!  Not much new here.  But that didn't stop the dopamine hit. We saw that by thinking about redux from the perspective of \u003ccode\u003eaction -\u0026gt; reducer -\u0026gt; new state\u003c/code\u003e, we are able to get going.  Then it's just a matter of tackling each problem.\u003c/p\u003e  \u003cp\u003eAs for new information, we saw that we can get the user to call the \u003ccode\u003edispatch\u003c/code\u003e method, by executing \u003ccode\u003edispatch\u003c/code\u003e from inside the callback of an event handler.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g2c6139f0b4a33183f98004ada2eb45bf","title":"Create and Delete Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"crud-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/crud-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/crud-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/crud-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eImplement a Yelp-like application where users can create and delete both restaurants and reviews of each restaurant.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this lab, we will practice creating and removing various items using Redux. We are working with two different resources, restaurants and reviews, with each restaurant having many reviews and reviews belonging to a restaurant. You will implement container components to connect each resource to your Redux store.\u003c/p\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003ch4\u003eRestaurants\u003c/h4\u003e\n\u003cp\u003eStart off by working on the components for displaying restaurants. First, you'll need a \u003cstrong\u003eRestaurantInput\u003c/strong\u003e component that allows a user to create new restaurants. Your form should have two inputs: a text input to enter the name of the restaraunt, and an input with type equal \u003ccode\u003esubmit\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNext, you will build out the \u003cstrong\u003eRestaurantsContainer\u003c/strong\u003e component that will connect to Redux and pass the appropriate props down to its children. You will then want to create a \u003cstrong\u003eRestaurants\u003c/strong\u003e component that renders a list of restaurants, and a \u003cstrong\u003eRestaurant\u003c/strong\u003e component that is responsible for each individual restaurant.\u003c/p\u003e\n\u003cp\u003eUsers should also be able to delete restaurants, so you will need to wire up the button rendered in the Restaurant component and give each restaurant an ID. To do that, you may want to use the \u003ccode\u003ecuid\u003c/code\u003e library that we have already imported into the reducer file for you. Like the \u003ccode\u003euuid\u003c/code\u003e library we have used in previous labs, \u003ccode\u003ecuid\u003c/code\u003e will generate a unique id for you:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  import cuid from 'cuid';\u003cbr\u003e\u003cbr\u003e  console.log(cuid());\u003cbr\u003e  // ch72gsb320000udocl363eofy\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRestaurants stored in Redux should have \u003ccode\u003etext\u003c/code\u003e and \u003ccode\u003eid\u003c/code\u003e keys.\u003c/p\u003e\n\u003ch4\u003eReviews\u003c/h4\u003e\n\u003cp\u003eNext you will work on the reviews resource. You will make a \u003cstrong\u003eReviewInput\u003c/strong\u003e component that will enable users to create a review that is associated with a specific restaurant. As with the \u003cstrong\u003eRestaurantInput\u003c/strong\u003e component, the form should have a text input for the content of the review along with an input of type \u003ccode\u003esubmit\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNext you will build out the \u003cstrong\u003eReviewsContainer\u003c/strong\u003e, \u003cstrong\u003eReviews\u003c/strong\u003e, and \u003cstrong\u003eReview\u003c/strong\u003e components. The \u003cstrong\u003eReviewsContainer\u003c/strong\u003e should be nested within the \u003cstrong\u003eRestaurant\u003c/strong\u003e component so reviews are displayed underneath the restaurant they belong to. Users should also be able to delete a specific review.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Take note of the structure of this app: containers can end up \u003cem\u003eanywhere\u003c/em\u003e in an app, even nested way down the component tree. This setup can feel a bit counterintuitive initially since we could have a presentational component that has a container component as a child, but the benefit is that \u003cem\u003enone\u003c/em\u003e of the non-container components have any code related to Redux! They're just firing props!\u003c/p\u003e\n\u003cp\u003eSince you'll need to be able to associate reviews to restaurants, \u003cem\u003eand\u003c/em\u003e delete specific reviews, reviews stored in Redux should have a \u003ccode\u003etext\u003c/code\u003e key for the review content, a \u003ccode\u003erestaurantId\u003c/code\u003e key to associate and display the review with a specific restaurant and an \u003ccode\u003eid\u003c/code\u003e key unique to the review itself.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Although each review belongs to a specific restaurant, that relationship should be implemented using the \u003ccode\u003erestaurantId\u003c/code\u003e key, \u003cem\u003enot\u003c/em\u003e in the structure of the store's state. In order to get the tests passing, the state will need to be structured as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    {\u003cbr\u003e      restaurants: [],\u003cbr\u003e      reviews: []\u003cbr\u003e    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eHint\u003c/strong\u003e: To simplify coding of the \u003ccode\u003emanageRestaurant\u003c/code\u003e reducer, you may want to use Redux's \u003ccode\u003ecombineReducers\u003c/code\u003e function that was introduced in an earlier lesson.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eOnce all tests are passing, you'll be able to create and delete restaurants \u003cem\u003eand\u003c/em\u003e their specific reviews.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBonus\u003c/strong\u003e: Implement \u003cstrong\u003eedit\u003c/strong\u003e functionality for restaurants and reviews. You will probably want to include an additional button with each restaurant and review that, when clicked, will open an input where a user could modify the contents of a specific item. You will then need to dispatch an \u003cstrong\u003eupdate\u003c/strong\u003e action to the reducer to update the store.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g710381dee23a3c5fe34918d398c48662","title":"Creating Items with Redux","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-forms-codealong\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/redux-forms-codealong/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-forms-codealong\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-forms-codealong/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWith this lesson, we will begin our journey in implementing the CRUD actions while using the Redux pattern.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eBy the end of this lesson, you will be able to:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eTake user input from our \u003cstrong\u003eReact\u003c/strong\u003e application and send information to \u003cstrong\u003eRedux\u003c/strong\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eOur Goal\u003c/h2\u003e  \u003cp\u003eWe'll build a form in \u003cstrong\u003eRedux\u003c/strong\u003e that allows us to create a list of todos. So this is a form that would have only one input, for the name of the todo, and the submit button.\u003c/p\u003e  \u003ch2\u003eCreate The Form in React\u003c/h2\u003e  \u003cp\u003eOkay, if you boot up the application (run \u003ccode\u003enpm install \u0026amp;\u0026amp; npm start\u003c/code\u003e), you'll see that there in the \u003ccode\u003e./src/App.js\u003c/code\u003e file we reference a createTodo form located at \u003ccode\u003e./src/components/todos/createTodo.js\u003c/code\u003e. That's where we need to build our form.\u003c/p\u003e  \u003cp\u003eSo in that file we want to change our component to look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/CreateTodo.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react'\u003cbr\u003e\u003cbr\u003eclass CreateTodo extends Component {\u003cbr\u003e  render() {\u003cbr\u003e    return(\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;form\u0026gt;\u003cbr\u003e          \u0026lt;p\u0026gt;\u003cbr\u003e            \u0026lt;label\u0026gt;add todo\u0026lt;/label\u0026gt;\u003cbr\u003e            \u0026lt;input type=\"text\" /\u0026gt;\u003cbr\u003e          \u0026lt;/p\u0026gt;\u003cbr\u003e          \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e        \u0026lt;/form\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default CreateTodo; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003ePlan for Integrating into Redux\u003c/h2\u003e  \u003cp\u003eNow let's think about how we want to integrate this into \u003cstrong\u003eRedux\u003c/strong\u003e. Essentially, upon submitting the form, we would like to dispatch the following action to the store:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  type: 'ADD_TODO',\u003cbr\u003e  todo: todo\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo if the user has typed in buy groceries, our action would look like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  type: 'ADD_TODO',\u003cbr\u003e  todo: 'buy groceries'\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut how do we get that text from the form's input? Well, we can use our normal React trick of updating the \u003cem\u003ecreateTodo component's\u003c/em\u003e state whenever someone types something into the form. Then, when the user clicks on the submit button, we can grab that state, and call \u003ccode\u003estore.dispatch({ type: 'ADD_TODO', todo: this.state })\u003c/code\u003e. Ok, time to implement it. Step one will be updating the component state whenever someone types in the form.\u003c/p\u003e  \u003ch3\u003e1. Create a Controlled Form Using State and an \u003ccode\u003eonChange\u003c/code\u003e Event Handler\u003c/h3\u003e  \u003cp\u003eEvery time the input is changed, we want to change the state. To do this we first add an event handler for every input that changes. So inside the createTodo component, we change our render function to the following.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/createTodo\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003erender(){\u003cbr\u003e  return(\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;form\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;\u003cbr\u003e          \u0026lt;label\u0026gt;add todo\u0026lt;/label\u0026gt;\u003cbr\u003e          \u0026lt;input type=\"text\" onChange={(event) =\u0026gt; this.handleChange(event)}/\u0026gt;\u003cbr\u003e        \u0026lt;/p\u0026gt;\u003cbr\u003e        \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e      \u0026lt;/form\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAll this code does is say that every time the user changes the input field (that is, whenever the user types something in) we should call our \u003ccode\u003ehandleChange()\u003c/code\u003e function (which we haven't written yet).\u003c/p\u003e  \u003cp\u003eOkay, our code calls the \u003ccode\u003ehandleChange()\u003c/code\u003e function each time the user types in the input, but we still need to write that handleChange function. Let's start with the old way, setting a state value:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/createTodo\u003cbr\u003e ...\u003cbr\u003econstructor() {\u003cbr\u003e  super();\u003cbr\u003e  this.state = {\u003cbr\u003e    text: '',\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ehandleChange(event) {\u003cbr\u003e  this.setState({\u003cbr\u003e    text: event.target.value\u003cbr\u003e  });\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003erender(){\u003cbr\u003e  return(\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;form\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;\u003cbr\u003e          \u0026lt;label\u0026gt;add todo\u0026lt;/label\u0026gt;\u003cbr\u003e          \u0026lt;input type=\"text\" onChange={(event) =\u0026gt; this.handleChange(event)}/\u0026gt;\u003cbr\u003e        \u0026lt;/p\u0026gt;\u003cbr\u003e        \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e      \u0026lt;/form\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we pass through the event, which comes from the \u003ccode\u003eonChange\u003c/code\u003e event handler. The event's target is the input that was listening for the event (the text field), and the value is the current value of that text field.\u003c/p\u003e  \u003cp\u003eCurrently, we're using class method syntax to define \u003ccode\u003ehandleChange()\u003c/code\u003e on our component. The JSX code within our \u003ccode\u003erender()\u003c/code\u003e method is particular to a specific instance of the component, but, by default, \u003cstrong\u003eclass methods are called the context of the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\"\u003eprototype chain\u003c/a\u003e, not an instance\u003c/strong\u003e. In order for \u003ccode\u003ethis\u003c/code\u003e to correctly reference \u003cem\u003ethis\u003c/em\u003e specific instance of our component, we need to either bind it (often done in the \u003ccode\u003econstructor()\u003c/code\u003e), or use an arrow function in our \u003ccode\u003eonChange\u003c/code\u003e event handler. Because arrow functions don't define their own version of \u003ccode\u003ethis\u003c/code\u003e, they'll default to the context they are in.\u003c/p\u003e  \u003cp\u003eWe never intend for \u003ccode\u003ehandleChange()\u003c/code\u003e to be used any other way. In modern JavaScript, we are able to directly class assign properties instead of assigning them inside a \u003ccode\u003econstructor()\u003c/code\u003e. This means that, instead of writing \u003ccode\u003ehandleChange()\u003c/code\u003e as a class method, we could declare it as a class property and assign an arrow function to it:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ehandleChange = event =\u0026gt; {\u003cbr\u003e    this.setState({\u003cbr\u003e        text: event.target.value\u003cbr\u003e    });\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe result is that \u003ccode\u003ehandleChange()\u003c/code\u003e will always be bound to the particular instance of the component it is defined in.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econstructor() {\u003cbr\u003e  super();\u003cbr\u003e  this.state = {\u003cbr\u003e    text: '',\u003cbr\u003e  };\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003ehandleChange = (event) =\u0026gt; {\u003cbr\u003e  this.setState({\u003cbr\u003e    text: event.target.value\u003cbr\u003e  });\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003erender(){\u003cbr\u003e  return(\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;form\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;\u003cbr\u003e          \u0026lt;label\u0026gt;add todo\u0026lt;/label\u0026gt;\u003cbr\u003e          \u0026lt;input type=\"text\" onChange={(event) =\u0026gt; this.handleChange(event)}/\u0026gt;\u003cbr\u003e        \u0026lt;/p\u0026gt;\u003cbr\u003e        \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e      \u0026lt;/form\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow that \u003ccode\u003ehandleChange()\u003c/code\u003e is defined using an arrow function, we can actually write an even shorter \u003ccode\u003eonChange\u003c/code\u003e callback: \u003ccode\u003eonChange={this.handleChange}\u003c/code\u003e. In this case, \u003ccode\u003ethis.handleChange\u003c/code\u003e refers to the definition of a function that takes in the event as an argument. No need for the \u003ccode\u003eonChange\u003c/code\u003e arrow function callback anymore!\u003c/p\u003e  \u003cp\u003eTo make a completely controlled form, we will also need to set the \u003ccode\u003evalue\u003c/code\u003e attribute of our \u003ccode\u003einput\u003c/code\u003e element to \u003ccode\u003ethis.state.text\u003c/code\u003e. This way, every key stroke within \u003ccode\u003einput\u003c/code\u003e will call a \u003ccode\u003esetState\u003c/code\u003e from within \u003ccode\u003ehandleChange\u003c/code\u003e, the component will re-render and display the new value for \u003ccode\u003ethis.state.text\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe \u003cem\u003eCreateTodo\u003c/em\u003e component should look like the following now:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/CreateTodo.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003e\u003cbr\u003eclass CreateTodo extends Component {\u003cbr\u003e\u003cbr\u003e  constructor() {\u003cbr\u003e    super();\u003cbr\u003e    this.state = {\u003cbr\u003e      text: '',\u003cbr\u003e    };\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  handleChange = event =\u0026gt; {\u003cbr\u003e    this.setState({\u003cbr\u003e      text: event.target.value\u003cbr\u003e    });\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return(\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;form\u0026gt;\u003cbr\u003e          \u0026lt;p\u0026gt;\u003cbr\u003e            \u0026lt;label\u0026gt;add todo\u0026lt;/label\u0026gt;\u003cbr\u003e            \u0026lt;input\u003cbr\u003e          type=\"text\"\u003cbr\u003e          onChange={this.handleChange} value={this.state.text}/\u0026gt;\u003cbr\u003e          \u0026lt;/p\u0026gt;\u003cbr\u003e          \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e       \u0026lt;/form\u0026gt;\u003cbr\u003e       {this.state.text}\u003cbr\u003e     \u0026lt;/div\u0026gt;\u003cbr\u003e   );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default CreateTodo; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Inside the render function, we wrapped our form in a \u003ccode\u003ediv\u003c/code\u003e, and then at the bottom of that \u003ccode\u003ediv\u003c/code\u003e we've added the line \u003ccode\u003e{this.state.text}\u003c/code\u003e. This isn't necessary for functionality, but we do this just to visually confirm that we are properly changing the state. If we see our DOM change with every character we type in, we're in good shape.\u003c/p\u003e  \u003cp\u003eIt's on to step 2.\u003c/p\u003e  \u003ch3\u003e2. On Submission of Form, Dispatch an Action to the Store\u003c/h3\u003e  \u003cp\u003eOkay, so now we need to make changes to our form so that when the user clicks submit, we dispatch an action to the store. Notice that a lot of the setup for Redux is already done for you. Open up the \u003ccode\u003e./src/index.js\u003c/code\u003e file. There you'll see the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport App from './App';\u003cbr\u003eimport manageTodo from './reducers/manageTodo';\u003cbr\u003eimport { Provider } from 'react-redux';\u003cbr\u003eimport { createStore } from 'redux';\u003cbr\u003e\u003cbr\u003elet store = createStore(manageTodo);\u003cbr\u003e\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store}\u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt;,\u003cbr\u003e  document.getElementById('root')\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eJust below the \u003ccode\u003eimport\u003c/code\u003e statements, you can see that we create the store using \u003ccode\u003ecreateStore\u003c/code\u003e, provided by \u003ccode\u003eredux\u003c/code\u003e. Then, further down, we pass the store into the \u003ccode\u003eProvider\u003c/code\u003e. This will allow us access when we \u003cem\u003econnect\u003c/em\u003e our components.\u003c/p\u003e  \u003cp\u003eOk, let's connect the CreateTodo. First, we want to import \u003ccode\u003econnect\u003c/code\u003e from \u003ccode\u003ereact-redux\u003c/code\u003e and modify our export statement:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/CreateTodo.js\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003eexport default connect(null, mapDispatchToProps)(CreateTodo); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this component, we are not currently concerned with writing a \u003ccode\u003emapStateToProps()\u003c/code\u003e function (the first argument passed to \u003ccode\u003econnect\u003c/code\u003e) as this component doesn't need any state. Since we only need to dispatch an action here and we are not getting information from our store, we can use \u003ccode\u003enull\u003c/code\u003e instead of \u003ccode\u003emapStateToProps\u003c/code\u003e as the first argument.\u003c/p\u003e  \u003cp\u003eNext, as we write out our \u003ccode\u003emapDispatchToProps()\u003c/code\u003e function, we'll need to decide on how to structure our data and the related action. The basic frame of the function will look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/CreateTodo.js\u003cbr\u003e\u003cbr\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    addTodo: () =\u0026gt; dispatch(\u0026lt;some action\u0026gt;)\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOn submission of the form in our component, we want to send the value we've captured in the local state to be added to our \u003cstrong\u003eRedux\u003c/strong\u003e store. With the above set up, \u003ccode\u003eaddTodo\u003c/code\u003e becomes a function in props that is able take arguments.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    addTodo: formData =\u0026gt; dispatch(\u0026lt;some action\u0026gt;)\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFrom the Redux docs, we know that  needs to be a plain javascript object with a \u003ccode\u003etype\u003c/code\u003e key describing the type of action. We also need to include the data from the form - in this case, we'll call that key 'payload'.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    addTodo: formData =\u0026gt; dispatch({ type: 'ADD_TODO', payload: formData })\u003cbr\u003e  };\u003cbr\u003e}; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn our component, we could call something like \u003ccode\u003ethis.props.addTodo(this.state)\u003c/code\u003e. Since \u003ccode\u003ethis.state\u003c/code\u003e is an object with only one property, \u003ccode\u003etext\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eNow we need to update the \u003cstrong\u003erender()\u003c/strong\u003e function of the \u003cstrong\u003eCreateTodo\u003c/strong\u003e component to call a callback on the submission of a form:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/CreateTodo.js\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003e\u0026lt;form onSubmit={ event =\u0026gt; this.handleSubmit(event) }\u0026gt;\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003cstrong\u003ehandleSubmit()\u003c/strong\u003e function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/CreateTodo.js\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003ehandleSubmit = event =\u0026gt; {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  this.props.addTodo(this.state)\u003cbr\u003e}\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen \u003ccode\u003ehandleSubmit()\u003c/code\u003e is called, whatever is currently stored in \u003ccode\u003ethis.state\u003c/code\u003e will be sent off to our reducer via our dispatched action. The fully redux'd component ends up looking the like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003e\u003cbr\u003eclass CreateTodo extends Component {\u003cbr\u003e  state = {\u003cbr\u003e    text: ''\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  handleChange = event =\u0026gt; {\u003cbr\u003e    this.setState({\u003cbr\u003e      text: event.target.value\u003cbr\u003e    });\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  handleSubmit = event =\u0026gt; {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    this.props.addTodo(this.state);\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;form onSubmit={event =\u0026gt; this.handleSubmit(event)}\u0026gt;\u003cbr\u003e          \u0026lt;p\u0026gt;\u003cbr\u003e            \u0026lt;label\u0026gt;add todo\u0026lt;/label\u0026gt;\u003cbr\u003e              \u0026lt;input\u003cbr\u003e                type=\"text\"\u003cbr\u003e                onChange={event =\u0026gt; this.handleChange(event)}\u003cbr\u003e                value={this.state.text}\u003cbr\u003e              /\u0026gt;\u003cbr\u003e          \u0026lt;/p\u0026gt;\u003cbr\u003e          \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e        \u0026lt;/form\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    addTodo: formData =\u0026gt; dispatch({ type: 'ADD_TODO', payload: formData })\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect(\u003cbr\u003e  null,\u003cbr\u003e  mapDispatchToProps\u003cbr\u003e)(CreateTodo); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, when the form is submitted, whatever the \u003ccode\u003ethis.state\u003c/code\u003e is will be dispatched to the reducer with the action.\u003c/p\u003e  \u003ch4\u003eAlternate \u003ccode\u003eexport\u003c/code\u003e statement\u003c/h4\u003e  \u003cp\u003eRemember that, if not given any arguments, \u003ccode\u003econnect\u003c/code\u003e will return \u003ccode\u003edispatch\u003c/code\u003e as a prop to the component we're wrapping with \u003ccode\u003econnect\u003c/code\u003e. So an alternative way to write the CreateTodo component could be:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003e\u003cbr\u003eclass CreateTodo extends Component {\u003cbr\u003e  state = {\u003cbr\u003e    text: ''\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  handleChange = event =\u0026gt; {\u003cbr\u003e    this.setState({\u003cbr\u003e      text: event.target.value\u003cbr\u003e    });\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  handleSubmit = event =\u0026gt; {\u003cbr\u003e    event.preventDefault();\u003cbr\u003e    this.props.dispatch({ type: 'ADD_TODO', payload: this.state });\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        \u0026lt;form onSubmit={event =\u0026gt; this.handleSubmit(event)}\u0026gt;\u003cbr\u003e          \u0026lt;p\u0026gt;\u003cbr\u003e            \u0026lt;label\u0026gt;add todo\u0026lt;/label\u0026gt;\u003cbr\u003e            \u0026lt;input\u003cbr\u003e              type=\"text\"\u003cbr\u003e              onChange={event =\u0026gt; this.handleChange(event)}\u003cbr\u003e              value={this.state.text}\u003cbr\u003e            /\u0026gt;\u003cbr\u003e          \u0026lt;/p\u0026gt;\u003cbr\u003e          \u0026lt;input type=\"submit\" /\u0026gt;\u003cbr\u003e        \u0026lt;/form\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect()(CreateTodo); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, if you start up the app and click the submit button, you should see your actions via a \u003ccode\u003econsole.log\u003c/code\u003e in our reducer.\u003c/p\u003e  \u003ch3\u003e3. Update State\u003c/h3\u003e  \u003cp\u003eSo we are properly dispatching the action, but the state is not being updated. What could be the problem? Well remember our crux of redux flow: Action -\u0026gt; Reducer -\u0026gt; New State. So if the action is properly dispatched, then our problem must lie with our reducer. Open up the file \u003ccode\u003e./src/reducers/manageTodo.js\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThis function does nothing. Let's fix that. First we need to provide an initial state. Because, we want our state to look like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003estate = {\u003cbr\u003e  todos: [\u003cbr\u003e    { text: 'buy groceries' },\u003cbr\u003e    { text: 'watch netflix' },\u003cbr\u003e  ]\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur initial state should be an empty list of todos, { todos: [] }.\u003c/p\u003e  \u003cp\u003eSecond, we need to concatenate a new todo each time we receive an action that looks like \u003ccode\u003e{ type: 'ADD_TODO', payload: { text: 'watch baseball' } }\u003c/code\u003e. Ok, let's do it.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/reducers/manageTodo.js\u003cbr\u003e\u003cbr\u003eexport default function manageTodo(state = {\u003cbr\u003e  todos: [],\u003cbr\u003e}, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'ADD_TODO':\u003cbr\u003e\u003cbr\u003e      console.log({ todos: state.todos.concat(action.payload.text) });\u003cbr\u003e\u003cbr\u003e      return { todos: state.todos.concat(action.payload.text) };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk, once you change the \u003ccode\u003emanageTodo()\u003c/code\u003e reducer to the above function, open up the console in your browser, and try clicking the submit button a few times. The log will show that our reducer is concatenating new values every time the form is submitted!\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eThere's a lot of typing in this section, but three main steps.\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eFirst, we made sure the React component of our application was working. We did this by building a form, and then making sure that whenever the user typed in the form's input, the state was updated.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eSecond, We connected the component to \u003cstrong\u003eRedux\u003c/strong\u003e and designed our \u003ccode\u003emapDispatchToProps\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThird, we built our reducer such that it responded to the appropriate event and concatenated the payload into our array of todos.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gd39f57ac1e93231c73edd797864296af","title":"Custom JSON Rendering","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-custom-json-rendering-using-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-custom-json-rendering-using-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-custom-json-rendering-using-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-custom-json-rendering-using-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRender JSON from a Rails controller\u003c/li\u003e\n\u003cli\u003eSelect specific model attributes to render in a Rails controller\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eBy using \u003ccode\u003erender json:\u003c/code\u003e in our Rails controller, we can take entire models or\neven collections of models, have Rails convert them to JSON, and send them out\non request. We already have the makings of a basic API. In this lesson, we're\ngoing to look at shaping that data that gets converted to JSON and making it more\nuseful to us from the frontend JavaScript perspective.\u003c/p\u003e\n\n\u003cp\u003eThe way we structure our data matters - it can lead to better, simpler code in\nthe future. By specifically defining what data is being sent via a Rails\ncontroller, we have full control over what data our frontend has access to.\u003c/p\u003e\n\n\u003cp\u003eTo follow along, run \u003ccode\u003erails db:migrate\u003c/code\u003e and \u003ccode\u003erails db:seed\u003c/code\u003e to set up your\ndatabase and example data. We will continue to use our bird watching example in\nthis lesson.\u003c/p\u003e\n\n\u003ch2\u003eAdding Additional Routes to Separate JSON Data\u003c/h2\u003e\n\n\u003cp\u003eThe simplest way to make data more useful to us is to provide more routes and\nactions that help to divide and organize our data. For instance, we could add a\n\u003ccode\u003eshow\u003c/code\u003e action to allow us to send specific record/model instances. First, we'd\nadd a route:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eRails.application.routes.draw do\u003cbr\u003e  get '/birds' =\u0026gt; 'birds#index'\u003cbr\u003e  get '/birds/:id' =\u0026gt; 'birds#show' # new\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen we could add an additional action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    birds = Bird.all\u003cbr\u003e    render json: birds\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def show\u003cbr\u003e    bird = Bird.find_by(id: params[:id])\u003cbr\u003e    render json: bird\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e No need for instance variables anymore, since we're immediately\nrendering \u003ccode\u003ebirds\u003c/code\u003e and \u003ccode\u003ebird\u003c/code\u003e to JSON and are not going to be using ERB.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNow, visiting \u003ccode\u003ehttp://localhost:3000/birds\u003c/code\u003e will produce an array of \u003ccode\u003eBird\u003c/code\u003e\nobjects, but \u003ccode\u003ehttp://localhost:3000/birds/2\u003c/code\u003e will produce just one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"name\": \"Grackle\",\u003cbr\u003e  \"species\": \"Quiscalus Quiscula\",\u003cbr\u003e  \"created_at\": \"2019-05-09T21:51:41.543Z\",\u003cbr\u003e  \"updated_at\": \"2019-05-09T21:51:41.543Z\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can use multiple routes to differentiate between specific requests. In an\nAPI, these are typically referred to as endpoints. A user of the API uses\nendpoints to access specific pieces of data. Just like a normal Rails app,\nwe can create full CRUD based controllers that only render JSON. \u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE:\u003c/strong\u003e If you've ever tried using \u003ccode\u003erails generate scaffold\u003c/code\u003e to create a\nresource, you'll find that this is the case. Rails has favored convention over\nconfiguration and will set up JSON rendering for you almost immediately out\nof the box.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn terms of communicating with JavaScript, even when sending POST requests, we\ndo not need to change anything in our controller to handle a \u003ccode\u003efetch()\u003c/code\u003e request\ncompared to a normal user visiting a page. This means that you could go back to\n\u003cem\u003eany\u003c/em\u003e existing Rails project and all you would need to do is change the\nrendering portion of the controller to make it render JSON. Bam! You have a\nrudimentary Rails API!\u003c/p\u003e\n\n\u003cp\u003eEven though we are no longer serving up views the same way, maintaining RESTful\nconventions is still a HUGE plus here for your API end user (mainly yourself at\nthe moment).\u003c/p\u003e\n\n\u003ch2\u003eRemoving Content When Rendering\u003c/h2\u003e\n\n\u003cp\u003eSometimes, when sending JSON data, such as an entire model, we don't want or\nneed to send the entire thing. Some data is sensitive, for instance. An API that\nsends user information might contain details of a user internally that it\ndoes not want to ever share externally. Sometimes, data is just extra \nclutter we don't need. Consider, for instance, the last piece of data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"name\": \"Grackle\",\u003cbr\u003e  \"species\": \"Quiscalus Quiscula\",\u003cbr\u003e  \"created_at\": \"2019-05-09T21:51:41.543Z\",\u003cbr\u003e  \"updated_at\": \"2019-05-09T21:51:41.543Z\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor our bird watching purposes, we probably don't need bits of data like\n\u003ccode\u003ecreated_at\u003c/code\u003e and \u003ccode\u003eupdated_at\u003c/code\u003e. Rather than send this unnecessary info when\nrendering, we could just pick and choose what we want to send:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  bird = Bird.find_by(id: params[:id])\u003cbr\u003e  render json: {id: bird.id, name: bird.name, species: bird.species } \u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we've created a new hash out of three keys, assigning the keys manually\nwith the attributes of \u003ccode\u003ebird\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe result is that when we visit a specific bird's endpoint, like\n\u003ccode\u003ehttp://localhost:3000/birds/3\u003c/code\u003e, we'll see just the id, name and species:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": \"3\",\u003cbr\u003e  \"name\": \"Common Starling\",\u003cbr\u003e  \"species\": \"Sturnus Vulgaris\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnother option would be to use Ruby's built-in \u003ccode\u003eslice\u003c/code\u003e method. On the \u003ccode\u003eshow\u003c/code\u003e\naction, that would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  bird = Bird.find_by(id: params[:id])\u003cbr\u003e  render json: bird.slice(:id, :name, :species)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis achieves the same result but in a slightly different way. Rather than\nhaving to spell out each key, the \u003ccode\u003eHash\u003c/code\u003e \u003ca href=\"https://ruby-doc.org/core-2.5.0/Hash.html#method-i-slice\"\u003e\u003ccode\u003eslice\u003c/code\u003e method\u003c/a\u003e returns a \u003cem\u003enew\u003c/em\u003e\nhash with only the keys that are passed into \u003ccode\u003eslice\u003c/code\u003e. In this case, \u003ccode\u003e:id\u003c/code\u003e,\n\u003ccode\u003e:name\u003c/code\u003e, and \u003ccode\u003e:species\u003c/code\u003e were passed in, so \u003ccode\u003ecreated_at\u003c/code\u003e and \u003ccode\u003eupdated_at\u003c/code\u003e get\nleft out, just like before.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": \"3\",\u003cbr\u003e  \"name\": \"Common Starling\",\u003cbr\u003e  \"species\": \"Sturnus Vulgaris\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCool, but once again, Rails has one better. While \u003ccode\u003eslice\u003c/code\u003e works fine for a\nsingle hash, as with \u003ccode\u003ebird\u003c/code\u003e, it won't work for an array of hashes like the one\nwe have in our \u003ccode\u003eindex\u003c/code\u003e action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  birds = Bird.all\u003cbr\u003e  render json: birds\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this case, we can add in the \u003ccode\u003eonly:\u003c/code\u003e option directly after listing an object\nwe want to render to JSON:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  birds = Bird.all\u003cbr\u003e  render json: birds, only: [:id, :name, :species]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eVisiting or fetching \u003ccode\u003ehttp://localhost:3000/birds\u003c/code\u003e will now produce our array of\nbird objects and each object will \u003cem\u003eonly\u003c/em\u003e have the \u003ccode\u003eid\u003c/code\u003e, \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003especies\u003c/code\u003e\nvalues, leaving out everything else:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e  {\u003cbr\u003e    \"id\": 1,\u003cbr\u003e    \"name\": \"Black-Capped Chickadee\",\u003cbr\u003e    \"species\": \"Poecile Atricapillus\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    \"id\": 2,\u003cbr\u003e    \"name\": \"Grackle\",\u003cbr\u003e    \"species\": \"Quiscalus Quiscula\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    \"id\": 3,\u003cbr\u003e    \"name\": \"Common Starling\",\u003cbr\u003e    \"species\": \"Sturnus Vulgaris\"\u003cbr\u003e  },\u003cbr\u003e  {\u003cbr\u003e    \"id\": 4,\u003cbr\u003e    \"name\": \"Mourning Dove\",\u003cbr\u003e    \"species\": \"Zenaida Macroura\"\u003cbr\u003e  }\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlternatively, rather than specifically listing every key we want to include, we\ncould also exclude particular content using the \u003ccode\u003eexcept:\u003c/code\u003e option, like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  birds = Bird.all\u003cbr\u003e  render json: birds, except: [:created_at, :updated_at]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe above code would achieve the same result, producing only \u003ccode\u003eid\u003c/code\u003e, \u003ccode\u003ename\u003c/code\u003e, and\n\u003ccode\u003especies\u003c/code\u003e for each bird. All the keys \u003cem\u003eexcept\u003c/em\u003e \u003ccode\u003ecreated_at\u003c/code\u003e and \u003ccode\u003eupdated_at\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDrawing Back the Curtain on Rendering JSON Data\u003c/h2\u003e\n\n\u003cp\u003eAs we touched upon briefly in the previous lesson, the controller actions we \nhave seen so far have a bit of Rails 'magic' in them that obscures what is actually happening \nin the render statements. The \u003ccode\u003eonly\u003c/code\u003e and \u003ccode\u003eexcept\u003c/code\u003e keywords are actually \nparameters of the \u003ccode\u003eto_json\u003c/code\u003e method, obscured by that magic. The last code snippet can be\nrewritten in full to show what is actually happening:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  birds = Bird.all\u003cbr\u003e  render json: birds.to_json(except: [:created_at, :updated_at])\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs customization becomes more complicated, writing in sometimes help to clarify what is happening.\u003c/p\u003e\n\n\u003ch2\u003eBasic Error Messaging When Rendering JSON Data\u003c/h2\u003e\n\n\u003cp\u003eWith the power to create our own APIs, we also have the power to define what to\ndo when things go wrong. In our \u003ccode\u003eshow\u003c/code\u003e action, we are currently using\n\u003ccode\u003eBird.find_by\u003c/code\u003e, passing in \u003ccode\u003eid: params[:id]\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  bird = Bird.find_by(id: params[:id])\u003cbr\u003e  render json: {id: bird.id, name: bird.name, species: bird.species } \u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen using \u003ccode\u003efind_by\u003c/code\u003e, if the record is not found, \u003ccode\u003enil\u003c/code\u003e is returned. As we have \nit set up, if \u003ccode\u003eparams[:id]\u003c/code\u003e does not match a valid id, \u003ccode\u003enil\u003c/code\u003e will be assigned to \nthe \u003ccode\u003ebird\u003c/code\u003e variable.\u003c/p\u003e\n\n\u003cp\u003eAs \u003ccode\u003enil\u003c/code\u003e is a \u003cem\u003efalse-y\u003c/em\u003e value in Ruby, this gives us the ability to write our\nown error messaging in the event that a request is made for a record that\ndoesn't exist:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  bird = Bird.find_by(id: params[:id])\u003cbr\u003e  if bird\u003cbr\u003e    render json: { id: bird.id, name: bird.name, species: bird.species }\u003cbr\u003e  else\u003cbr\u003e    render json: { message: 'Bird not found' }\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, if we were to send a request to an invalid endpoint like \u003ccode\u003ehttp://localhost:3000/birds/hello_birds\u003c/code\u003e,\nrather than receiving a general HTTP error, we would still receive a response\nfrom the API:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"message\": \"Bird not found\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFrom here, we could build a more complex response, including additional details\nabout what might have occurred.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe can now take a single model or all the instances of that model and render it\nto JSON, extracting out any specific content we do or do not want to send!\u003c/p\u003e\n\n\u003cp\u003eWhether you are building a professional API for a company or for your own\npersonal site, having the ability to fine tune how your data look is a critical\nskill that we're only just beginning to scratch the surface on.\u003c/p\u003e\n\n\u003cp\u003eIn the next lesson, we're going to continue to look at options for customizing\nrendered JSON content. Particularly, we'll be looking more at what we can \u003cem\u003eadd\u003c/em\u003e.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g99c1a19f70f61bb1a1aab02655af1cb2","title":"Deleting Items with Redux","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-delete-codealong\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/redux-delete-codealong/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-delete-codealong\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-delete-codealong/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eWith this lesson we will continue through our journey through Redux. By the end of this lesson, you will be able to:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eDelete individual elements\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eReview and Goal\u003c/h2\u003e  \u003cp\u003eThroughout each code along in this section, notice that we are never updating the DOM directly. Instead, we use the Redux pattern to have our store hold and update our state, and we then have React display that state. We want to continue with this pattern here.  \u003c/p\u003e  \u003cp\u003eOur goal this time is to have a button next to each list element with the todo; such that when a user clicks on that button, the list element will be removed. In implementing this, remember that the \u003ccode\u003eTodos\u003c/code\u003e component displays the current list of todos, if we remove a todo from the store's state, the display of that todo should be removed.\u003c/p\u003e  \u003ch2\u003eDeleting A Todo\u003c/h2\u003e  \u003cp\u003eTo delete a todo we should add a button that when clicked, dispatches an action telling the store to delete a specific todo. How we tell the store which todo to delete, we'll figure out at the end. For now let's add in the button, and have it call a method that dispatches a delete action when clicked.  \u003c/p\u003e  \u003ch4\u003eModifying our TodosContainer\u003c/h4\u003e  \u003cp\u003eSticking with our container vs presentational set up, we don't want to load our presentational Todo component up with logic. Meanwhile, TodosContainer is where we're connected to \u003cstrong\u003eRedux\u003c/strong\u003e, so let's write in a new \u003ccode\u003emapDispatchToProps()\u003c/code\u003e function to include an action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/TodosContainer.js\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux'\u003cbr\u003eimport Todo from './Todo'\u003cbr\u003e\u003cbr\u003eclass TodosContainer extends Component {\u003cbr\u003e\u003cbr\u003e  renderTodos = () =\u0026gt; this.props.todos.map((todo, id) =\u0026gt; \u0026lt;Todo key={id} text={todo} /\u0026gt;)\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return(\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        {this.renderTodos()}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    todos: state.todos\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    delete: todoText =\u0026gt; dispatch({type: 'DELETE_TODO', payload: todoText })\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps, mapDispatchToProps)(TodosContainer); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, TodosContainer will have access to \u003ccode\u003ethis.props.delete\u003c/code\u003e, which can take in an argument and send it as the action's \u003ccode\u003epayload\u003c/code\u003e. We can then \u003cem\u003epass\u003c/em\u003e \u003ccode\u003ethis.props.delete\u003c/code\u003e down to Todo, so that each Todo component rendered will have access to our 'DELETE_TODO' action.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erenderTodos = () =\u0026gt; this.props.todos.map((todo, id) =\u0026gt; \u0026lt;Todo delete={this.props.delete} key={id} text={todo} /\u0026gt;)\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003ch4\u003eModifying the Todo Component\u003c/h4\u003e  \u003cp\u003eTodo is receiving \u003ccode\u003ethis.props.delete\u003c/code\u003e, so let's update the component a little and incorporate a button:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React from 'react'\u003cbr\u003e\u003cbr\u003econst Todo = props =\u0026gt; {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;span\u0026gt;{props.text}\u0026lt;/span\u0026gt;\u0026lt;button\u0026gt;DELETE\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  )\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Todo; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhen we click the button we want to be able to delete this particular todo. At the moment, our todos are just strings, stored in an array. Since that is all we have to work with, we add an \u003ccode\u003eonClick\u003c/code\u003e attribute to the new button. To keep this component small, we can provide an anonymous function in-line:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;div\u0026gt;\u003cbr\u003e  \u0026lt;span\u0026gt;{props.text}\u0026lt;/span\u0026gt;\u0026lt;button onClick={() =\u0026gt; props.delete(props.text)}\u0026gt;DELETE\u0026lt;/button\u0026gt;\u003cbr\u003e\u0026lt;/div\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo, what is happening here? We're providing a definition for an anonymous function. \u003cem\u003eInside\u003c/em\u003e the definition, we're calling \u003ccode\u003eprops.delete\u003c/code\u003e, and passing in the only other prop available, \u003ccode\u003eprops.text\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eBack in our connected TodosContainer, when this delete button is clicked, the value of \u003ccode\u003eprops.text\u003c/code\u003e is passed into our dispatched action as the payload.\u003c/p\u003e  \u003cp\u003eThere is a \u003ccode\u003econsole.log\u003c/code\u003e in our reducer that displays actions. Clicking the delete button should log an action with the todo's text content as the payload.\u003c/p\u003e  \u003cp\u003eOk, now we have the ability to dispatch an action to the reducer from each Todo!\u003c/p\u003e  \u003ch2\u003eTell the Store Which Todo to Delete\u003c/h2\u003e  \u003cp\u003eOur todos are stored as strings in an array. There are a number of ways to remove a specific string from an array, but one of the more brief options is to use \u003ccode\u003efilter\u003c/code\u003e. By adding a second case to our \u003ccode\u003emanageTodo\u003c/code\u003e reducer, we can write a \u003ccode\u003efilter\u003c/code\u003e that returns every todo that \u003cem\u003edoesn't\u003c/em\u003e match what is contained in \u003ccode\u003eaction.payload\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport default function manageTodo(state = {\u003cbr\u003e  todos: [],\u003cbr\u003e}, action) {\u003cbr\u003e  console.log(action);\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'ADD_TODO':\u003cbr\u003e\u003cbr\u003e      return { todos: state.todos.concat(action.payload.text) };\u003cbr\u003e\u003cbr\u003e    case 'DELETE_TODO':\u003cbr\u003e\u003cbr\u003e      return {todos: state.todos.filter(todo =\u0026gt; todo !== action.payload)}\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn our browser, the delete button should now successfully cause todos to disappear!\u003c/p\u003e  \u003cp\u003eThere is a problem though. What if you have multiple todos with the same text? With this set up, every todo that matches \u003ccode\u003eaction.payload\u003c/code\u003e will be filtered out.\u003c/p\u003e  \u003cp\u003eTo get around this, instead of filtering just text, it would be better if we gave our Todos specific IDs.\u003c/p\u003e  \u003ch4\u003eGive each Todo an id\u003c/h4\u003e  \u003cp\u003eA Todo should have an id the moment it gets created. So, we know that our reducer creates the Todo when a CREATE_TODO action is dispatched. Let's update the code in there so that it also adds an id.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/reducers/manageTodo.js\u003cbr\u003eimport uuid from 'uuid';\u003cbr\u003e\u003cbr\u003eexport default function manageTodo(state = {\u003cbr\u003e  todos: [],\u003cbr\u003e}, action) {\u003cbr\u003e  console.log(action);\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'ADD_TODO':\u003cbr\u003e\u003cbr\u003e      const todo = {\u003cbr\u003e        id: uuid(),\u003cbr\u003e        text: action.payload.text\u003cbr\u003e      }\u003cbr\u003e      return { todos: state.todos.concat(todo) };\u003cbr\u003e\u003cbr\u003e    case 'DELETE_TODO':\u003cbr\u003e\u003cbr\u003e      return {todos: state.todos.filter(todo =\u0026gt; todo !== action.payload)}\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUsing \u003ccode\u003euuid()\u003c/code\u003e will generate a long random string each time a todo is created. Now, instead of just storing an array of strings in our store,  we'll be storing an array of objects.\u003c/p\u003e  \u003cp\u003eThis causes a problem 'downstream', though: we need to update our TodosContainer to pass the correct content.\u003c/p\u003e  \u003ch4\u003eUpdate TodosContainer\u003c/h4\u003e  \u003cp\u003eIn TodosContainer, our \u003ccode\u003erenderTodos\u003c/code\u003e method will need to change a little:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erenderTodos = () =\u0026gt; {\u003cbr\u003e  return this.props.todos.map(todo =\u0026gt; \u0026lt;Todo delete={this.props.delete} key={todo.id} todo={todo} /\u0026gt;)\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe change is minimal, but this set up is actually better. Previously, \u003ccode\u003ekey\u003c/code\u003e was based off the \u003cem\u003eindex\u003c/em\u003e provided by \u003ccode\u003emap\u003c/code\u003e. Now its using our randomly generated ID, and is less prone to errors in the virtual DOM. We'll need both \u003ccode\u003etodo.id\u003c/code\u003e and \u003ccode\u003etodo.text\u003c/code\u003e to be passed into Todo so we pass both down as the object, \u003ccode\u003etodo\u003c/code\u003e.\u003c/p\u003e  \u003ch4\u003eUpdate the Todo Component\u003c/h4\u003e  \u003cp\u003eNow that we've got \u003ccode\u003etodo.id\u003c/code\u003e, we can modify the Todo component to use \u003ccode\u003eprops.todo.id\u003c/code\u003e on click:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React from 'react'\u003cbr\u003e\u003cbr\u003econst Todo = props =\u0026gt; {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div\u0026gt;\u003cbr\u003e      \u0026lt;span\u0026gt;{props.todo.text}\u0026lt;/span\u0026gt;\u0026lt;button onClick={() =\u0026gt; props.delete(props.todo.id)}\u0026gt;DELETE\u0026lt;/button\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  )\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default Todo; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, when \u003ccode\u003eprops.delete\u003c/code\u003e is called, an action is dispatched that contains an \u003cem\u003eid\u003c/em\u003e only as its payload.\u003c/p\u003e  \u003ch4\u003eUpdating \u003ccode\u003eDELETE_TODO\u003c/code\u003e in the Reducer\u003c/h4\u003e  \u003cp\u003eNow that we're passing an \u003cem\u003eid\u003c/em\u003e to \u003ccode\u003eprops.delete\u003c/code\u003e, we need to modify our reducer once more:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecase 'DELETE_TODO':\u003cbr\u003e\u003cbr\u003e  return {todos: state.todos.filter(todo =\u0026gt; todo.id !== action.payload)} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInstead of comparing \u003ccode\u003etodo\u003c/code\u003e with \u003ccode\u003eaction.payload\u003c/code\u003e, now that \u003ccode\u003etodo\u003c/code\u003e is an object, we want to match \u003ccode\u003etodo.id\u003c/code\u003e with the payload.\u003c/p\u003e  \u003cp\u003eWith this final change, todo objects can be added and deleted, each with their own unique id!\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eOk, so in this lesson we covered how to delete a specific Todo. To implement this, we gave each Todo a unique id, and then made sure we passed that id into each Todo component. Then we made sure to send along that information when dispatching an action via \u003ccode\u003eprops.delete\u003c/code\u003e. Finally, we had our reducer update the state by filtering out the Todo to be deleted.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g524425c1a33d6a2c7e625a0646f0c088","title":"Dispatching an Initial Action for Setup","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-initial-dispatch\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/redux-initial-dispatch/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-initial-dispatch\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-initial-dispatch/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eIn this lesson, you will learn the following:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eHow dispatching an initial action gives an initial render of the view.\u003c/li\u003e \u003cli\u003eHow dispatching an initial action gives an initial setup of the store's state.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eTo follow along in this code-along, use the \u003ccode\u003ejs/reducer.js\u003c/code\u003e file and update according to the Readme. Open \u003ccode\u003eindex.html\u003c/code\u003e and try running \u003ccode\u003edispatch({type: \"INCREASE_COUNT\"})\u003c/code\u003e in the browser console. You should see a \u003ccode\u003e1\u003c/code\u003e appear on the otherwise blank page.\u003c/p\u003e  \u003ch2\u003eDispatch an Initial Action to Render the View\u003c/h2\u003e  \u003cp\u003eCurrently, we have built our \u003ccode\u003echangeState()\u003c/code\u003e reducer, and the \u003ccode\u003edispatch()\u003c/code\u003e and \u003ccode\u003erender()\u003c/code\u003e functions.  Remember that we built the \u003ccode\u003edispatch()\u003c/code\u003e function such that each time we execute it, we call the \u003ccode\u003erender()\u003c/code\u003e function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state = {count: 0};\u003cbr\u003e\u003cbr\u003efunction changeState(state, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e    state = changeState(state, action)\u003cbr\u003e    render()\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction render(){\u003cbr\u003e    document.body.textContent = state.count\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that by calling \u003ccode\u003edispatch()\u003c/code\u003e with an action as an argument, we do render something on the page. We dispatch an action of \u003ccode\u003e\"INCREASE_COUNT\"\u003c/code\u003e and we see the number \u003ccode\u003e1\u003c/code\u003e in our HTML, but \u003cstrong\u003ewe never see the number zero displayed\u003c/strong\u003e.  One easy way to fix this is to simply call the \u003ccode\u003erender()\u003c/code\u003e function at the bottom of our JavaScript code, like the previous lesson. We'll choose a different approach, though, and use the \u003ccode\u003edispatch()\u003c/code\u003e function we already have.  \u003c/p\u003e  \u003cp\u003eRemember that our \u003ccode\u003edispatch()\u003c/code\u003e function also calls our \u003ccode\u003erender()\u003c/code\u003e function.  So, if we dispatch a meaningless action, our reducer will simply return the existing state (the \u003ccode\u003edefault\u003c/code\u003e case in our \u003ccode\u003eswitch\u003c/code\u003e), and then our \u003ccode\u003erender()\u003c/code\u003e function will be called.  Let's try it by dispatching an action of type \u003ccode\u003e@@INIT\u003c/code\u003e. If you already have \u003ccode\u003eindex.html\u003c/code\u003e open in browser, refresh the page and enter the following into the browser console:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edispatch({ type: '@@INIT' }) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eCool, now our HTML starts off at zero.  And each time we call dispatch, the HTML is appropriately updated.  \u003c/p\u003e  \u003cp\u003eNote that we can dispatch an action of any type, so long as it doesn't hit our switch statement.  We dispatch an action of type \u003ccode\u003e@@INIT\u003c/code\u003e by convention, but you could just as well choose something else and get the same result:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edispatch({ type: 'beef' }) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003eswitch\u003c/code\u003e will return whatever state was passed into the \u003ccode\u003echangeState()\u003c/code\u003e function. Then \u003ccode\u003erender()\u003c/code\u003e will be called and that updated state will get applied to the DOM.\u003c/p\u003e  \u003cp\u003eNow, if we want our page to display \u003ccode\u003e0\u003c/code\u003e when it first loads, we can just add \u003ccode\u003edispatch({ type: '@@INIT' })\u003c/code\u003e at the end of the file.\u003c/p\u003e  \u003ch2\u003eDispatch an Initial Action to Set up our Initial State\u003c/h2\u003e  \u003cp\u003eNow that we've seen a simple fix for setting up the initial render of HTML, let's see if there's a simple fix for setting up our state.  Notice that currently we set the initial value of the state at the very first line of our JavaScript with the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state = { count: 0 }; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe problem here is that we would prefer to look to our reducer to see how to manage the state.  After all, our reducer returns the new state every time we dispatch a new action. Perhaps our reducer can also return our initial state?  \u003c/p\u003e  \u003cp\u003eLet's begin by simply declaring our state, but not assigning it to equal anything.  So, we accordingly change the first line of our JavaScript:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state; \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003efunction changeState(state, action) {\u003cbr\u003e\u003cbr\u003e  switch (action.type) {\u003cbr\u003e\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 }\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = changeState(state, action)\u003cbr\u003e  render()\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction render(){\u003cbr\u003e  document.body.textContent = state.count\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edispatch({ type: '@@INIT' }) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBut, we find that dispatching the action of type \u003ccode\u003e@@INIT\u003c/code\u003e gives us an error:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eUncaught TypeError: Cannot read property 'count' of undefined(…) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSee that?  Our \u003ccode\u003erender()\u003c/code\u003e function is breaking because now state starts off as undefined.  When we dispatch our action, it calls the reducer, which passes through our state whose value is undefined, and then returns the default value of our switch statement, which is just our undefined state.  \u003c/p\u003e  \u003cp\u003eWhat would be really nice is if we could say when you pass a state of \u003ccode\u003eundefined\u003c/code\u003e to our reducer, assign a value to our initial state. Luckily, ES6 allows us to pass default arguments to functions and we can give our \u003ccode\u003echangeState()\u003c/code\u003e reducer a default argument to do just that.  Let's change our reducer to the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003efunction changeState(state = { count: 0 }, action) {\u003cbr\u003e\u003cbr\u003e  switch (action.type) {\u003cbr\u003e\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 }\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow notice what happens:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  dispatch({ type: '@@INIT' })\u003cbr\u003e    -\u0026gt; { count: 0 }\u003cbr\u003e  dispatch({type: 'INCREASE_COUNT'})\u003cbr\u003e    -\u0026gt; { count: 1 } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk, pretty elegant.  How did that work?  Let's take it from the top.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet state;\u003cbr\u003e\u003cbr\u003efunction changeState(state = { count: 0 }, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 }\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = changeState(state, action)\u003cbr\u003e  render()\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction render(){\u003cbr\u003e  document.body.textContent = state.count\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edispatch({type: '@@INIT'}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAt the top of the file, we declare but do not assign our state, so it starts off undefined.  Then at the bottom of the file, we dispatch an action of \u003ccode\u003e'@@INIT'\u003c/code\u003e. This calls our \u003ccode\u003edispatch()\u003c/code\u003e function and passes through our initial action. \u003ccode\u003edispatch()\u003c/code\u003e calls the \u003ccode\u003echangeState()\u003c/code\u003e reducer.  \u003ccode\u003echangeState()\u003c/code\u003e is executed, passing through two local variables: state and action.  \u003ccode\u003eaction\u003c/code\u003e is defined because we passed \u003ccode\u003e{ type: '@@INIT' }\u003c/code\u003e into dispatch. \u003ccode\u003estate\u003c/code\u003e is currently \u003cstrong\u003eundefined\u003c/strong\u003e, so, with  that initial dispatch we are really calling:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003echangeState(undefined, { type: '@@INIT' }) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBecause \u003ccode\u003echangeState()\u003c/code\u003e now has a default argument, the \u003ccode\u003estate\u003c/code\u003e argument is set to  \u003ccode\u003e{ count: 0 }\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWhen \u003ccode\u003echangeState()\u003c/code\u003e executes, the \u003ccode\u003eswitch\u003c/code\u003e statement executes the \u003ccode\u003edefault\u003c/code\u003e case, returning the value of \u003ccode\u003estate\u003c/code\u003e. The code \u003ccode\u003echangeState(undefined, { type: '@@INIT' })\u003c/code\u003e  \u003cem\u003ereturns\u003c/em\u003e  \u003ccode\u003e{ count: 0 }\u003c/code\u003e, \u003c/p\u003e  \u003cp\u003eIn \u003ccode\u003edispatch()\u003c/code\u003e, when the \u003ccode\u003echangeState()\u003c/code\u003e reducer returns, dispatch assigns the return value to \u003ccode\u003estate\u003c/code\u003e, thus updating our state to the initial value of \u003ccode\u003e{ count: 0 }\u003c/code\u003e. On the next line, \u003ccode\u003erender()\u003c/code\u003e is called, displaying \u003ccode\u003e0\u003c/code\u003e in our HTML.\u003c/p\u003e  \u003cp\u003eEssentially, we take advantage of our state starting off as undefined, and never being undefined again.  This means the reducer's default argument can be used to set up the initial state and never be used again.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eWe learned that by dispatching an initial action of type \u003ccode\u003e'@@INIT'\u003c/code\u003e we get two benefits: an initial rendering of the state, and the ability to set our initial state in our reducer.  We set our initial state in our reducer by using a default argument for the state parameter.  Because state is not initially defined, dispatching an action assigns our state to that default value, and then sets state as the default.\u003c/p\u003e  \u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/redux-initial-dispatch\"\u003eRedux Initial Dispatch\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3f73ebd64b8ac8f2b3fe50f73f3d0bd7","title":"Displaying a List of items with Redux","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-index-codealong\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/redux-index-codealong/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-index-codealong\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-index-codealong/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eWith this lesson we'll finish up what we worked on the in the forms code along by displaying our list of todos. By the end of this lesson, you will be able to:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eDisplay a list of elements from our \u003cstrong\u003eRedux\u003c/strong\u003e store\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eGoal\u003c/h2\u003e  \u003cp\u003eOur state is properly updating but we are not displaying these updates to the user. We need a component that references the store and then uses the data from the store to reference the list of Todos.\u003c/p\u003e  \u003ch2\u003eDisplaying todos\u003c/h2\u003e  \u003cp\u003eThe \u003ccode\u003eCreateTodo\u003c/code\u003e component is handling the creation side of things, so let's make a new component where we'll be getting todos from the store. We'll call this \u003ccode\u003eTodosContainer\u003c/code\u003e and connect it to \u003cstrong\u003eRedux\u003c/strong\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/TodosContainer.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux'\u003cbr\u003e\u003cbr\u003eclass TodosContainer extends Component {\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return(\u003cbr\u003e      \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect()(TodosContainer); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we aren't worried about dispatching actions here, only getting state from \u003cstrong\u003eRedux\u003c/strong\u003e, so we'll need to write out a \u003ccode\u003emapStateToProps()\u003c/code\u003e function and include it as an argument for \u003ccode\u003econnect()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e...\u003cbr\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    todos: state.todos\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(TodosContainer); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can confirm this is working by adding a log in the render of TodosContainer and then adding TodosContainer to our App component so it will be rendered.\u003c/p\u003e  \u003cp\u003eNow that we have a way to get data from \u003cstrong\u003eRedux\u003c/strong\u003e, we can create a presentational component to handle displaying our todos.\u003c/p\u003e  \u003ch2\u003eCreating a Presentational Todo Component\u003c/h2\u003e  \u003cp\u003eTo start, we'll have each todo rendered as a list item. Inside the \u003ccode\u003e./src/components/\u003c/code\u003e folder, create a file \u003ccode\u003eTodo.js\u003c/code\u003e. Inside it, write a functional component that returns an \u003ccode\u003eli\u003c/code\u003e displaying props:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/Todo.js\u003cbr\u003e\u003cbr\u003eimport React from 'react'\u003cbr\u003e\u003cbr\u003econst Todo = props =\u0026gt; {\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;li\u0026gt;{props.text}\u0026lt;/li\u0026gt;\u003cbr\u003e  );\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default Todo; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we need to call that component from a map function in the \u003cstrong\u003eTodosContainer\u003c/strong\u003e component:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/TodosContainer.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux'\u003cbr\u003eimport Todo from './Todo'\u003cbr\u003e\u003cbr\u003eclass TodosContainer extends Component {\u003cbr\u003e\u003cbr\u003e  renderTodos = () =\u0026gt; this.props.todos.map((todo, id) =\u0026gt; \u0026lt;Todo key={id} text={todo} /\u0026gt;)\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return(\u003cbr\u003e      \u0026lt;div\u0026gt;\u003cbr\u003e        {this.renderTodos()}\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    todos: state.todos\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(TodosContainer);\u003cbr\u003e\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow our TodosContainer is mapping over the todos it received from \u003cstrong\u003eRedux\u003c/strong\u003e, passing the value of each todo into a child component, Todo. Todo in this case doesn't have any \u003cstrong\u003eRedux\u003c/strong\u003e related code, and is a regular, functional component.\u003c/p\u003e  \u003ch2\u003eCleanup Todo Input\u003c/h2\u003e  \u003cp\u003eEach time we submit a todo, we want to clear out the input. Ok, so remember that each time we submit a form, we call \u003cstrong\u003ehandleSubmit\u003c/strong\u003e. Inside that \u003cstrong\u003ehandleSubmit\u003c/strong\u003e function let's reset the \u003cem\u003ecomponent's\u003c/em\u003e state by changing our function to the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/components/todos/CreateTodo.js\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003ehandleSubmit = event =\u0026gt; {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  this.props.addTodo(this.state)\u003cbr\u003e  this.setState({\u003cbr\u003e    text: '',\u003cbr\u003e  })\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat's it! We've got a working app that takes in form data and displays it on a list.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eOk, so we got our \u003cstrong\u003eTodos\u003c/strong\u003e component working simply by accessing the state from the store, and then iterating through the list in the \u003cstrong\u003eTodos\u003c/strong\u003e component.\u003c/p\u003e  \u003ch2\u003eReferences\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://facebook.github.io/react/docs/forms.html\"\u003eReact Documentation - Controlled Components\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g617b11a1d7250af90b6ee643a7ac10fa","title":"Displaying Associations in Rails","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"displaying-associations-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/displaying-associations-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-associations-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-associations-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cp\u003eAfter this lesson, you should be able to...\u003c/p\u003e  \u003col\u003e \u003cli\u003eCreate a \u003ccode\u003ehas_many\u003c/code\u003e and \u003ccode\u003ebelongs_to\u003c/code\u003e association.\u003c/li\u003e \u003cli\u003eBuild associated data through the console and \u003ccode\u003edb/seeds.rb\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eQuery for associated data using methods provided by association.\u003c/li\u003e \u003cli\u003eEmbed association data within views.\u003c/li\u003e \u003cli\u003eIterate over associated data within a view displaying individual instances.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eBlog Categories\u003c/h2\u003e  \u003cp\u003eIn this lesson, we'll be setting up a blog admin panel so that \u003ccode\u003ePost\u003c/code\u003e objects can be created, associated with \u003ccode\u003eCategory\u003c/code\u003e objects, and listed by \u003ccode\u003eCategory\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eThe Models\u003c/h2\u003e  \u003cp\u003eFirst, we'll set up associated models, just like in the preceding lesson:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/post.rb\u003cbr\u003e\u003cbr\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e  belongs_to :category\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# app/models/category.rb\u003cbr\u003e\u003cbr\u003eclass Category \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :posts\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eSeed Data\u003c/h2\u003e  \u003cp\u003eOnce you start working with more and more complicated data sets, you will realize that there is a lot of \u003cem\u003estuff\u003c/em\u003e you have to set up just to be able to play with your methods. The associations are so vast that you need to make many posts with many categories and all of that! How frustrating. What you are doing is called \"seeding\" the database. Pretty much putting in some test data so that you can play with your app. In Rails we set up our seed data in \u003ccode\u003edb/seeds.rb\u003c/code\u003e. Then we'll be able to just seed (or re-seed) the database with a quick \u003ccode\u003erake db:seed\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# db/seeds.rb\u003cbr\u003e\u003cbr\u003eclickbait = Category.create!(name: \"Motivation\")\u003cbr\u003eclickbait.posts.create!(title: \"10 Ways You Are Already Awesome\")\u003cbr\u003eclickbait.posts.create!(title: \"This Yoga Stretch Cures Procrastination, Maybe\")\u003cbr\u003eclickbait.posts.create!(title: \"The Power of Positive Thinking and 100 Gallons of Coffee\")\u003cbr\u003e\u003cbr\u003emovies = Category.create!(name: \"Movies\")\u003cbr\u003emovies.posts.create!(title: \"Top 20 Summer Blockbusters Featuring a Cute Dog\") \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWoot! The best thing about the \u003ccode\u003eseeds.rb\u003c/code\u003e file is that it's just Ruby! There is no magic. Look, super standard Ruby. To run the seed file in the development environment, you can activate the rake task:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erake db:seed \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you want to play around with the data, of course, it's always possible to take the create statements exactly as written above and type them into \u003ccode\u003erails console\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eThe Views\u003c/h2\u003e  \u003ch3\u003ePosts\u003c/h3\u003e  \u003cp\u003eWhen viewing a single post, we'll want to have a link to its category available.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h3\u0026gt;Category: \u0026lt;%= link_to @post.category.name, category_path(@post.category) if @post.category %\u0026gt;\u0026lt;/h3\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;p\u0026gt;\u0026lt;%= @post.description %\u0026gt;\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003e@post.category\u003c/code\u003e is the \u003ccode\u003eCategory\u003c/code\u003e model itself, so we can use it anywhere we would use \u003ccode\u003e@category\u003c/code\u003e in a view for that object. Also note that we added the \u003ccode\u003eif @post.category\u003c/code\u003e conditional to ensure that the view doesn't try to call \u003ccode\u003e@post.category.name\u003c/code\u003e if the post has not been associated with a category.\u003c/p\u003e  \u003ch3\u003eCategories\u003c/h3\u003e  \u003cp\u003eIn this domain, the primary use of a category is as a bucket for posts, so we'll definitely have to make heavy use of associations when designing the view.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/categories/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @category.name %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h3\u0026gt;\u0026lt;%= pluralize(@category.posts.count, 'Post') %\u0026gt;\u0026lt;/h3\u0026gt;\u003cbr\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;% @category.posts.each do |p| %\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;\u0026lt;%= link_to p.title, post_path(p) %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;% end %\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe object returned by an association method (\u003ccode\u003eposts\u003c/code\u003e in this case) is a \u003ca href=\"http://edgeapi.rubyonrails.org/classes/ActiveRecord/Associations/CollectionProxy.html\"\u003eCollectionProxy\u003c/a\u003e, and it responds to most of the methods you can use on an array. Think of it like an array.\u003c/p\u003e  \u003cp\u003eIf we open up \u003ccode\u003erails console\u003c/code\u003e, we can confirm that the \u003ccode\u003ecount\u003c/code\u003e results are accurate:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ePost.count\u003cbr\u003e =\u0026gt; 4\u003cbr\u003eclickbait = Category.find_by(name: \"Motivation\")\u003cbr\u003e =\u0026gt; #\u0026lt;Category id: 1, ...\u0026gt;\u003cbr\u003eclickbait.posts.count\u003cbr\u003e =\u0026gt; 3 \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMeanwhile, for listing a category's posts, we wrote a loop very similar to the loops we've been writing in \u003ccode\u003eindex\u003c/code\u003e actions, which makes sense since a category is essentially an index of its posts. Let's compare them side-by-side:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/categories/show.html.erb --\u0026gt;\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003e\u0026lt;% @category.posts.each do |p| %\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\u0026lt;%= link_to p.title, post_path(p) %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt;\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eVersus:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/index.html.erb --\u0026gt;\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003e\u0026lt;% @posts.each do |p| %\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt;\u0026lt;%= link_to p.title, post_path(p) %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt;\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn fact, the only difference is what we call \u003ccode\u003eeach\u003c/code\u003e on.\u003c/p\u003e  \u003ch2\u003eRecap\u003c/h2\u003e  \u003cp\u003eWith Active Record's powerful association macros and instance methods, we can treat related models exactly the same as we treat directly-accessed models. As long as the database and classes are set up correctly, Active Record will figure the rest out for us!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g0c823957d9f9fa92eed91301c3242fc2","title":"Displaying Associations in Rails Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"displaying-associations-rails-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/displaying-associations-rails-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-associations-rails-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-associations-rails-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn the previous unit, we used validations and forms to create a management\ndashboard for songs and artists. Now we're ready to start connecting those\nmodels and using their relationships to display more interesting data.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eIn the controllers, this lab will require you to write \u003ccode\u003eshow\u003c/code\u003e and \u003ccode\u003eindex\u003c/code\u003e\nactions for both \u003ccode\u003eSong\u003c/code\u003e and \u003ccode\u003eArtist\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYou'll need to add a foreign key by writing your own migration.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYou'll need to set up the association in the model classes.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYou'll need to format and link to the songs and artists according to the\nspecs.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAdditionally, you'll find that the specs require two special methods,\n\u003ccode\u003eArtist#song_count\u003c/code\u003e and \u003ccode\u003eSong#artist_name\u003c/code\u003e. These methods are meant to protect\nthe views from complexity that belongs in the model.\u003c/p\u003e\n\n\u003cp\u003eThey are also a great example of a software design principle called the\n\u003ca href=\"https://en.wikipedia.org/wiki/Law_of_Demeter\"\u003eLaw of Demeter\u003c/a\u003e, which is sometimes called the \"one dot\" rule in\nobject-oriented languages like Ruby. In other words, \u003ccode\u003eruby user.best_friend\u003c/code\u003e is\nbetter than \u003ccode\u003eruby user.friends.find_by(best: true)\u003c/code\u003e because all of the\n\"friend\"-related complexity is hidden away within the user model. This\n\u003cstrong\u003eprotects\u003c/strong\u003e user-related code from future changes to friend functionality.\u003c/p\u003e\n\n\u003cp\u003eFor example, if the above architecture changed such that best friendship was\ndetermined by the highest \"friendship\" value instead of a boolean \u003ccode\u003ebest\u003c/code\u003e flag,\nthe \"two-dots\" code would need to be changed \u003cem\u003eeverywhere\u003c/em\u003e, but the first\nsnippet, which obeys the Law of Demeter, hides that complexity in the\n\u003ccode\u003eUser#best_friend\u003c/code\u003e method, whose definition can be changed without having to\ntrack down and update every single usage.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gaa578f4c7c47d18f241ff6cfb73cc5d1","title":"Displaying Has Many Through In Rails","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"displaying-has-many-through-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/displaying-has-many-through-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-has-many-through-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-has-many-through-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eConstruct a bi-directional has_many through.\u003c/li\u003e \u003cli\u003eQuery for associations via the belongs\u003cem\u003eto, has\u003c/em\u003emany, and has_many through associations.\u003c/li\u003e \u003cli\u003eIterate over associations in a view and display associated data for a primary instance.\u003c/li\u003e \u003cli\u003eIdentify the join model in a has_many through.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eWe've seen how we can use simple associations to display data to our users in Rails, but what about more complex relationships? Lucky for us, the interface for displaying this type of data is just as easy thanks to Active Record and \u003ccode\u003ehas_many, through\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eLesson\u003c/h2\u003e  \u003ch3\u003ehas_many, through\u003c/h3\u003e  \u003cp\u003eLet's say you're making a blog and want to give users the ability to sign up and comment on your posts. What's the relationship between a post and a comment? If you said, \"A comment belongs to a post, and a post has many comments,\" give yourself a pat on the back!\u003c/p\u003e  \u003cp\u003eWhat about the relationship between a user and a comment? Again, a user has many comments, and a comment belongs to the user. So far, this is pretty straightforward.\u003c/p\u003e  \u003cp\u003eThings get slightly more complicated when we talk about the relationship between a user and the posts that the user has commented on. How would you describe that relationship? Well, a user obviously can comment on many posts, and a post has comments from many users. Yep, this is a many to many relationship. We can set up a many-to-many relationship using a join table. In this case, \u003ccode\u003ecomments\u003c/code\u003e will act as our join table. Any table that contains two foreign keys can be thought of as a join table. A row in our \u003ccode\u003ecomments\u003c/code\u003e table will look something like this:\u003c/p\u003e  \u003ctable border=\"1\" cellpadding=\"4\" cellspacing=\"0\"\u003e   \u003ctbody\u003e\n\u003ctr\u003e     \u003ctd\u003eid\u003c/td\u003e     \u003ctd\u003econtent\u003c/td\u003e     \u003ctd\u003epost_id\u003c/td\u003e     \u003ctd\u003euser_id\u003c/td\u003e   \u003c/tr\u003e      \u003ctr\u003e     \u003ctd\u003e1\u003c/td\u003e     \u003ctd\u003e\"I loved this post!\"\u003c/td\u003e     \u003ctd\u003e5\u003c/td\u003e     \u003ctd\u003e3\u003c/td\u003e   \u003c/tr\u003e \u003c/tbody\u003e\n\u003c/table\u003e  \u003cp\u003eFor this instance, we know that the \u003ccode\u003eComment\u003c/code\u003e with an ID of \u003ccode\u003e1\u003c/code\u003e was created by the \u003ccode\u003eUser\u003c/code\u003e with an ID of \u003ccode\u003e3\u003c/code\u003e for the \u003ccode\u003ePost\u003c/code\u003e with an ID of \u003ccode\u003e5\u003c/code\u003e. We have all of the information we need to determine all of the posts that a particular user has commented on as well as all of the users who commented on any post. When we're done, we'll be able to simply call \u003ccode\u003e@user.posts\u003c/code\u003e to get a collection of all of those posts.\u003c/p\u003e  \u003cp\u003eLet's set this up. First, we'll need migrations for \u003ccode\u003ecomments\u003c/code\u003e, \u003ccode\u003eposts\u003c/code\u003e, and \u003ccode\u003eusers\u003c/code\u003e tables. We've included migrations and models in this repo, so you can follow along.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# db/migrate/xxx_create_posts\u003cbr\u003e\u003cbr\u003eclass CreatePosts \u0026lt; ActiveRecord::Migration\u003cbr\u003e  def change\u003cbr\u003e    create_table :posts do |t|\u003cbr\u003e      t.string :title\u003cbr\u003e      t.string :content\u003cbr\u003e      t.timestamps null: false\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# db/migrate/xxx_create_users\u003cbr\u003e\u003cbr\u003eclass CreateUsers \u0026lt; ActiveRecord::Migration\u003cbr\u003e   def change\u003cbr\u003e    create_table :users do |t|\u003cbr\u003e      t.string :username\u003cbr\u003e      t.string :email\u003cbr\u003e      t.timestamps null: false\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# db/migrate/xxx_create_comments\u003cbr\u003e\u003cbr\u003eclass CreateComments \u0026lt; ActiveRecord::Migration\u003cbr\u003e  def change\u003cbr\u003e    create_table :comments do |t|\u003cbr\u003e      t.string :content\u003cbr\u003e      t.belongs_to :user\u003cbr\u003e      t.belongs_to :post\u003cbr\u003e      t.timestamps null: false\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn our models, we have the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/post.rb\u003cbr\u003e\u003cbr\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :comments\u003cbr\u003e  has_many :users, through: :comments\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# app/models/user.rb\u003cbr\u003e\u003cbr\u003eclass User \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :comments\u003cbr\u003e  has_many :posts, through: :comments\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# app/models/comment.rb\u003cbr\u003e\u003cbr\u003eclass Comment \u0026lt; ActiveRecord::Base\u003cbr\u003e  belongs_to :user\u003cbr\u003e  belongs_to :post\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we can't just declare that our \u003ccode\u003eUser\u003c/code\u003e \u003ccode\u003ehas_many :posts\u003c/code\u003e because our \u003ccode\u003eposts\u003c/code\u003e table doesn't have a foreign key called \u003ccode\u003euser_id\u003c/code\u003e. Instead, we tell Active Record to look through the \u003ccode\u003ecomments\u003c/code\u003e table to figure out this association by declaring that our \u003ccode\u003eUser\u003c/code\u003e \u003ccode\u003ehas_many :posts, through: :comments\u003c/code\u003e. Now, instances of our \u003ccode\u003eUser\u003c/code\u003e model respond to a method called \u003ccode\u003eposts\u003c/code\u003e. This will return a collection of posts that share a comment with the user.\u003c/p\u003e  \u003ch3\u003eDisplaying Comments on Our Posts\u003c/h3\u003e  \u003cp\u003eNow that our association is set up, let's display some data. First, let's set up our \u003ccode\u003ePost#show\u003c/code\u003e page to display all of the comments on a particular post. We'll include the username of the user who created the comment as well as a link to their show page.\u003c/p\u003e  \u003cp\u003eIn \u003ccode\u003eapp/controllers/posts_controller.rb\u003c/code\u003e, define a \u003ccode\u003eshow\u003c/code\u003e action that finds a particular post to make it available for display.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003eclass PostsController \u0026lt; ApplicationController\u003cbr\u003e\u003cbr\u003e  def show\u003cbr\u003e    @post = Post.find(params[:id])\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn our \u003ccode\u003ePost#show\u003c/code\u003e page, we'll display the title and content information for the post as well as the information for each comment associated with the post.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/views/posts/show.html.erb\u003cbr\u003e\u003cbr\u003e\u0026lt;h2\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h2\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;\u003cbr\u003e  Content: \u0026lt;%= @post.content %\u0026gt;\u003cbr\u003e\u0026lt;/p\u0026gt;\u003cbr\u003eComments:\u003cbr\u003e  \u0026lt;% @post.comments.each do |comment| %\u0026gt;\u003cbr\u003e    \u0026lt;%= link_to comment.user.username, user_path(comment.user) %\u0026gt; said\u003cbr\u003e    \u0026lt;%= comment.content %\u0026gt;\u003cbr\u003e  \u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is the same as we've done before –– we're simply looking at data associated with posts and comments. Calling \u003ccode\u003ecomment.user\u003c/code\u003e returns for us the \u003ccode\u003eUser\u003c/code\u003e object associated with that comment. We can then call any method that our user responds to, such as \u003ccode\u003eusername\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eAdding Posts to Our Users\u003c/h2\u003e  \u003cp\u003eLet's say that on our \u003ccode\u003eUser#show\u003c/code\u003e page we want our users to see a list of all of the posts that they've commented on. What would that look like?\u003c/p\u003e  \u003cp\u003eBecause we've set up a join model, the interface will look almost identical. We can simply call the \u003ccode\u003eposts\u003c/code\u003e method on our user and iterate through.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/views/users/show.html.erb\u003cbr\u003e\u003cbr\u003e\u0026lt;h2\u0026gt;\u0026lt;%= @user.username %\u0026gt; \u0026lt;/h2\u0026gt; has commented on the following posts:\u003cbr\u003e\u003cbr\u003e\u0026lt;% @user.posts.each do |post| %\u0026gt;\u003cbr\u003e  \u0026lt;%= link_to post.title, post_path(post) %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eDisplaying data via a \u003ccode\u003ehas_many, through\u003c/code\u003e relationship looks identical to displaying data through a normal relationship. That's the beauty of abstraction –– all of the details about how our models are associated with each other get abstracted away, and we can focus simply on the presentation.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gfcac0450979a1b60c6339ed6dff4c0a3","title":"Displaying Has Many Through In Rails Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"displaying-has-many-through-rails-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/displaying-has-many-through-rails-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-has-many-through-rails-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/displaying-has-many-through-rails-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eConstruct a bi-directional has many through.\u003c/li\u003e\n\u003cli\u003eQuery for associations via the belongs\u003cem\u003eto, has\u003c/em\u003emany, and has_many through associations.\u003c/li\u003e\n\u003cli\u003eIterate over associations in a view and display associated data for a primary instance.\u003c/li\u003e\n\u003cli\u003eIdentify the join model in a has many through.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eThe poor doctors at Seattle Grace Hospital are so overworked that they're having trouble keeping track of their patients' appointments! Let's help them (and practice our associations) by building some associations and displaying the data.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://57.media.tumblr.com/cbcd8f29790e720e4cea60f44cb2c6b9/tumblr_mrbut3kX1g1r6kab2o1_500.gif\" alt=\"greys-anatomy\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFirst, fork and clone this lab.\u003c/p\u003e\n\n\u003cp\u003eYou'll need to create all of the migrations, models, controllers, and views for this lab.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE\u003c/em\u003e\u003c/strong\u003e: As with much of our Rails curriculum, remember to always use the \u003ccode\u003e--no-test-framework\u003c/code\u003e flag when you generate models, controllers, etc. That way, the Rails generators will not create additional tests on top of the test suite that already comes with the lesson. E.g., \u003ccode\u003erails g model User username:string email:string --no-test-framework\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAdditional note about routes and generators\u003c/em\u003e\u003c/strong\u003e: We've written the routes for you in the \u003ccode\u003econfig/routes.rb\u003c/code\u003e file, so be sure to use the \u003ccode\u003e--skip-routes\u003c/code\u003e flag. This prevents the Rails generators from adding any unnecessary routes. You can use however many flags you need in the generators, so something like \u003ccode\u003erails g model Post title:string content:text --no-test-framework --skip-routes\u003c/code\u003e is perfectly valid. (If you want to see what other flags and options are available, you can run commands such as \u003ccode\u003erails g --help\u003c/code\u003e and \u003ccode\u003erails g model --help\u003c/code\u003e.)\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eCreate migrations and models for doctor, patient, and appointment. Because this is for a hospital, a doctor can have many patients, but a patient can also have many doctors. Patients and doctors both have many appointments. Our \u003ccode\u003eappointments\u003c/code\u003e table should have a column called \u003ccode\u003eappointment_datetime\u003c/code\u003e to represent the date and time the appointment will take place. (When you display this datetime, make sure it's in a human readable format. The tests will be expecting \"January 12, 2016 at 3:00\".)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a \u003ccode\u003eDoctor#show\u003c/code\u003e page that displays the doctor's name, department, and appointments, with each appointment's date, time, and patient name (linking to the patient's show page).\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a \u003ccode\u003ePatient#show\u003c/code\u003e page that lists the date and time for each of their appointments and links to the corresponding doctor's show page.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a \u003ccode\u003ePatient#index\u003c/code\u003e page that displays a link to each patient's show page and the total number of appointments they have.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate an \u003ccode\u003eAppointment#show\u003c/code\u003e page that shows the date, time, patient, and doctor for that particular appointment. Note that there should NOT be an \u003ccode\u003eAppointment#index\u003c/code\u003e page –– we don't want to have all of the appointments on display for anyone to see.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWe've provided a seed file so you can have some data to play around with –– run \u003ccode\u003erake db:seed\u003c/code\u003e once your migrations and models are complete.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb033ad52f11b0e8075652fb1f184b645","title":"Dynamic Request Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-dynamic-request-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-dynamic-request-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-dynamic-request-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-dynamic-request-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eDraw a route with a dynamic variable\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUse a routes variable in params within the logic of an action\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAssign an instance variable in a controller action\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUse a controller instance variable to generate a dynamic ERB template.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBuild a classical show action/view\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThere are three RSpec/Capybara specs in this lesson; you can find them in \u003ccode\u003espec/features/student_spec.rb\u003c/code\u003e. Make sure they pass without breaking the other tests. To complete this section, all specs should pass.\u003c/p\u003e\n\n\u003cp\u003eIn this lab, you will work through the full MVC pattern by building a student management app for The Flatiron School. At a high level, you will integrate the following scenario in your application:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eThe user is able to go to \u003ccode\u003e/students/2\u003c/code\u003e to receive information on the student with an id of \u003ccode\u003e2\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe application should render the values from the \u003ccode\u003estudent\u003c/code\u003e record in the database\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eKeys to remember\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eMake sure that you use a route variable for the \u003ccode\u003eshow\u003c/code\u003e request path\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIf you google around and discover generators/scaffolds, \u003cstrong\u003edon't use them\u003c/strong\u003e for this lab\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActionDispatch/Routing.html\"\u003eDocumentation\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/rails-dynamic-request-readme\"\u003eReading\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g4cd8afea5011cc5a92e4de5753686fc7","title":"Edit/Update Action","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-edit-update-action-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-edit-update-action-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-edit-update-action-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-edit-update-action-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eRails Controller Conventions\u003c/h2\u003e  \u003cp\u003eNow that you know how to implement a create action, the next logical step will be to integrate an edit/update action. As you may have noticed, there is a trend in Rails conventions where the logic for rendering a form is separate from the action that manages the database record alteration. For example:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eThe \u003ccode\u003enew\u003c/code\u003e action in the controller simply renders the \u003ccode\u003enew\u003c/code\u003e form\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThe \u003ccode\u003ecreate\u003c/code\u003e action is what actually handles the process of inserting the form data into the database\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIn like fashion, the \u003ccode\u003eedit\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e actions have a similar convention:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eThe \u003ccode\u003eedit\u003c/code\u003e action will handle rendering the \u003ccode\u003eedit\u003c/code\u003e form\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThe \u003ccode\u003eupdate\u003c/code\u003e action will be the method that updates the database record itself\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eRendering the \u003ccode\u003eedit\u003c/code\u003e form\u003c/h2\u003e  \u003cp\u003eTo start off, let's draw a \u003ccode\u003eget\u003c/code\u003e route for our edit form. Since the form will need to know which record is being edited, this will need to be a dynamic route that accepts an \u003ccode\u003e:id\u003c/code\u003e as a parameter that the controller can access:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eget 'articles/:id/edit', to: 'articles#edit', as: :edit_article \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe still need to draw one additional route to handle the \u003ccode\u003eupdate\u003c/code\u003e action. This second route will also need to be dynamic, accepting the same \u003ccode\u003e:id\u003c/code\u003e as a parameter so that the action will know which record is being altered. If you're curious about which HTTP verb should be selected, consider the following: we're sending data to the server, so we know it's not \u003ccode\u003eGET\u003c/code\u003e, and since we're not creating a new record it shouldn't be \u003ccode\u003ePOST\u003c/code\u003e. That's right- \u003ccode\u003ePATCH\u003c/code\u003e should be the HTTP verb!\u003c/p\u003e \u003cpre\u003e\u003ccode\u003epatch 'articles/:id', to: 'articles#update' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e What about \u003ccode\u003ePUT\u003c/code\u003e? \u003ccode\u003ePUT\u003c/code\u003e will actually work just fine here, but briefly, \u003ccode\u003ePUT\u003c/code\u003e is meant to be used when replacing a whole resource. \u003ccode\u003ePATCH\u003c/code\u003e, on the other hand, is for used for sending a set of changes to a resource.\u003c/p\u003e  \u003cp\u003eIf you run \u003ccode\u003erake routes\u003c/code\u003e, you will see we have some new routes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ePrefix      Verb  URI Pattern               Controller#Action\u003cbr\u003e                        ...\u003cbr\u003eedit_article   GET  /articles/:id/edit(.:format) articles#edit\u003cbr\u003e          PATCH  /articles/:id(.:format)      articles#update \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOn a side note, as a shortcut you could also simply add the \u003ccode\u003eedit\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e actions to the \u003ccode\u003eresources\u003c/code\u003e call in the routes file. That would accomplish the same goal that these two lines do:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  resources :articles, only: [:index, :show, :new, :create, :edit, :update] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will give you the same routes along with a \u003ccode\u003ePUT\u003c/code\u003e route for \u003ccode\u003earticles#update\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWith our routes in place, let's add in the controller actions...\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef edit\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003edef update\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e...and then create the edit view template in \u003ccode\u003eapp/views/articles/edit.html.erb\u003c/code\u003e. Let's just copy and paste the \u003ccode\u003enew\u003c/code\u003e form:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_tag articles_path do %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Article title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag :title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Article Description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_area_tag :description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= submit_tag \"Submit Article\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you open the browser and go to the \u003ccode\u003eedit\u003c/code\u003e page, it will now display the form, but you may have noticed a pretty big flaw. It doesn't load the record's data into the form! There are a few things that we'll need to do in order to implement this behavior. First, let's have our \u003ccode\u003eedit\u003c/code\u003e action store the \u003ccode\u003earticle\u003c/code\u003e record in an instance variable:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef edit\u003cbr\u003e  @article = Article.find(params[:id])\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow that the \u003ccode\u003eedit\u003c/code\u003e view template will have access to the \u003ccode\u003eArticle\u003c/code\u003e object (stored in \u003ccode\u003e@article\u003c/code\u003e), we need to refactor the form so that it auto-fills the form fields with the corresponding data from \u003ccode\u003e@article\u003c/code\u003e. We'll also use a different form helper,  \u003ccode\u003eform_for\u003c/code\u003e, which will automatically set up the url where the form will be sent.  These changes can be seen below:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% # app/views/articles/edit.html.erb %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for @article do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label 'Article Title' %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= f.label 'Article Description' %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_area :description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= f.submit \"Submit Article\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this case, \u003ccode\u003eform_for\u003c/code\u003e takes care of some work for us. Using the object \u003ccode\u003e@article\u003c/code\u003e we've provided, \u003ccode\u003eform_for\u003c/code\u003e determines that \u003ccode\u003e@article\u003c/code\u003e is \u003cstrong\u003enot a \u003cem\u003enew\u003c/em\u003e instance\u003c/strong\u003e of the \u003ccode\u003eArticle\u003c/code\u003e class. Because of this, \u003ccode\u003eform_for\u003c/code\u003e knows to automatically send to the \u003cem\u003eupdate\u003c/em\u003e path.\u003c/p\u003e  \u003cp\u003eSince \u003ccode\u003e@article\u003c/code\u003e is not a new instance of \u003ccode\u003eArticle\u003c/code\u003e, the inputs on this form, the text field and text area, will be populated with the corresponding object values.\u003c/p\u003e  \u003cp\u003eWhen submitted, the form will be routed to the \u003ccode\u003eupdate\u003c/code\u003e action. Before we try to implement the \u003ccode\u003eupdate\u003c/code\u003e action, let's first make sure the data is being routed properly. Enter the following code inside of the \u003ccode\u003eupdate\u003c/code\u003e method:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef update\u003cbr\u003e  raise params.inspect\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003eraise\u003c/code\u003e method will cause the application to pause and print out the \u003ccode\u003eparams\u003c/code\u003e on an error page. You could also see the \u003ccode\u003eparams\u003c/code\u003e if you called  \u003ccode\u003eputs params.inspect\u003c/code\u003e; using \u003ccode\u003eputs\u003c/code\u003e would simply require you to track  down the data in the Rails server log.\u003c/p\u003e  \u003cp\u003eIf you open up the browser, navigate to an edit page (such as \u003ccode\u003elocalhost:3000/articles/2/edit\u003c/code\u003e), change some elements in the form, and submit it, it should take you to an error page that prints out the params from the form, such as in the below image:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://i.imgur.com/38MhjpO.png\" alt=\"Raised Exception for Update Action\"\u003e\u003c/p\u003e  \u003cp\u003eAs you can see, the parameters are being passed to the \u003ccode\u003eupdate\u003c/code\u003e action. With that in mind, let's implement the functionality needed inside of the \u003ccode\u003eupdate\u003c/code\u003e action so that it will take the form data and update the specified record. Let's sketch out a basic flow for what the \u003ccode\u003eupdate\u003c/code\u003e action should do:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eQuery the database for the \u003ccode\u003eArticle\u003c/code\u003e record that matches the \u003ccode\u003e:id\u003c/code\u003e passed to the route.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eStore the query in an instance variable.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eUpdate the values passed from the form (the update method here is the \u003ccode\u003eupdate\u003c/code\u003e method supplied by Active Record, not the \u003ccode\u003eupdate\u003c/code\u003e method we're creating). \u003cstrong\u003eThe update method takes a hash of the attributes for the model as its argument, e.g. `Article.find(1).update(title: \"I'm Changed\", description: \"And here too!\")\u003c/strong\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eSave the changes in the database.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eRedirect the user to the \u003ccode\u003eshow\u003c/code\u003e page so they can see the updated record.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eWe'll take advantage of Active Record's \u003ccode\u003eupdate\u003c/code\u003e method so that we're not manually assigning each attribute:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef update\u003cbr\u003e  @article = Article.find(params[:id])\u003cbr\u003e  @article.update(title: params[:article][:title], description: params[:article][:description])\u003cbr\u003e  redirect_to article_path(@article)\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if you go to the \u003ccode\u003eedit\u003c/code\u003e page and make changes to the \u003ccode\u003etitle\u003c/code\u003e or \u003ccode\u003edescription\u003c/code\u003e form elements, you will see they are changed when the form is submitted. The \u003ccode\u003eedit\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e functions are working properly!\u003c/p\u003e  \u003ch2\u003eExtra Credit\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eWhen only one form element is updated, such as the \u003ccode\u003etitle\u003c/code\u003e, does the \u003ccode\u003edescription\u003c/code\u003e also get updated?\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eHow could we refactor this form code? You may notice that we have a form for the \u003ccode\u003enew\u003c/code\u003e and \u003ccode\u003eedit\u003c/code\u003e actions. Is there a better way of doing this?\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8ca2f0be6190d4c26a41f5865a54cf01","title":"Extracting a Service Class","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-extracting-a-service-class\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-extracting-a-service-class/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-extracting-a-service-class\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-extracting-a-service-class/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRemove logic from controller actions into a separate service class\u003c/li\u003e\n\u003cli\u003eRefactor code to eliminate repetition\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lessons, we started to see how customizing our JSON data in the\ncontroller works but can start to get pretty complicated. It is possible for\na single controller action to render data from multiple models on our Rails\nAPI. It is also possible to specify what we want and don't want to render.\u003c/p\u003e\n\n\u003cp\u003eThe complication comes when we start to scale. More models, more data, more\npieces to customize until it becomes unmanageable. In this code-along, we're going\nto look at building our own solution to this problem.\u003c/p\u003e\n\n\u003cp\u003eThe files in this lesson were populated using the API-only Rails build. Run\n\u003ccode\u003erails db:migrate\u003c/code\u003e and \u003ccode\u003erails db:seed\u003c/code\u003e to follow along.\u003c/p\u003e\n\n\u003ch2\u003eInitial Configuration\u003c/h2\u003e\n\n\u003cp\u003eThere are already three resources set up based on where we left off in the\nprevious lesson on \u003ccode\u003einclude\u003c/code\u003e: birds, locations, and sightings. Birds and\nlocations are related together through sightings:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Bird \u0026lt; ApplicationRecord\u003cbr\u003e  has_many :sightings\u003cbr\u003e  has_many :locations, through: :sightings\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Location \u0026lt; ApplicationRecord\u003cbr\u003e  has_many :sightings\u003cbr\u003e  has_many :birds, through: :sightings\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Sighting \u0026lt; ApplicationRecord\u003cbr\u003e  belongs_to :bird\u003cbr\u003e  belongs_to :location\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd we left off with a messy combination of \u003ccode\u003einclude\u003c/code\u003e, \u003ccode\u003eonly\u003c/code\u003e, and \u003ccode\u003eexcept\u003c/code\u003e in\norder to customize what attributes we wanted to render to JSON:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  render json: sighting.to_json(:include =\u0026gt; {\u003cbr\u003e    :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e    :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e  }, :except =\u0026gt; [:updated_at])\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlthough this is difficult to read, it does work. With this action in place,\nvisiting \u003ccode\u003ehttp://localhost:3000/sightings/2\u003c/code\u003e produces the following set of data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"bird_id\": 2,\u003cbr\u003e  \"location_id\": 2,\u003cbr\u003e  \"created_at\": \"2019-05-14T14:56:35.978Z\",\u003cbr\u003e  \"bird\": {\u003cbr\u003e    \"name\": \"Grackle\",\u003cbr\u003e    \"species\": \"Quiscalus Quiscula\"\u003cbr\u003e  },\u003cbr\u003e  \"location\": {\u003cbr\u003e    \"latitude\": 30.26715,\u003cbr\u003e    \"longitude\": -97.74306\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can use the same render statement in an \u003ccode\u003eindex\u003c/code\u003e action without having to change it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    sightings = Sighting.all\u003cbr\u003e    render json: sightings.to_json(:include =\u0026gt; {\u003cbr\u003e      :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e      :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e    }, :except =\u0026gt; [:updated_at])\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def show\u003cbr\u003e    sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e    render json: sighting.to_json(:include =\u0026gt; {\u003cbr\u003e      :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e      :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e    }, :except =\u0026gt; [:updated_at])\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, the way things are presents some problems. Having to include this in\nevery controller action would not be very DRY. In addition, as mentioned\nbefore, it is difficult to read, and equally difficult to write and update without\nmaking errors.\u003c/p\u003e\n\n\u003cp\u003eThere is also a separate issue - controllers are really just meant to act as a\nrelay between our models and our view, or well, our rendered JSON in this case.\nIf we can extract the work of customizing our JSON data and put it somewhere\nelse, we could keep our controller actions cleaner.\u003c/p\u003e\n\n\u003cp\u003eLet's resolve this issue before resolving the issue of readability. One way to\nresolve this issue is to build a service class.\u003c/p\u003e\n\n\u003ch2\u003eCreating a Service Class\u003c/h2\u003e\n\n\u003cp\u003eA service class is a class specific to our domain that handles some of the business\nlogic of the application. In this case, we are looking to handle the logic of\narranging our JSON data the way we want it.\u003c/p\u003e\n\n\u003cp\u003eIn the \u003ccode\u003eSightingsController\u003c/code\u003e, we already have working render statements. Our\ngoal is not to change these statements, just move the work off of the controller.\u003c/p\u003e\n\n\u003cp\u003eTo create a class we will be able to utilize in place of the current render\nstatements, first, we'll create a new folder within \u003ccode\u003eapp\u003c/code\u003e called \u003ccode\u003eservices\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emkdir app/services\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen we'll need to create a service class to use in our \u003ccode\u003eSightingsController\u003c/code\u003e.\nSince we're specifically arranging and serving up data, and also for reasons\nthat will become much clearer in the next lesson, we'll create a class called\n\u003ccode\u003eSightingSerializer\u003c/code\u003e and save it in the \u003ccode\u003eservices\u003c/code\u003e folder as\n\u003ccode\u003esighting_serializer.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etouch app/services/sighting_serializer.rb\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis can be a plain Ruby class without the need to inherit from anything:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingSerializer\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce a new class and file are created this way, you'll need to restart the Rails\nserver if it is running in order for \u003ccode\u003eSightingSerializer\u003c/code\u003e to be recognized\nand available in places like \u003ccode\u003eSightingsController\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConfiguring the New Serializer\u003c/h2\u003e\n\n\u003cp\u003eLooking back at \u003ccode\u003eSightingsController\u003c/code\u003e, we are currently calling the \u003ccode\u003eto_json\u003c/code\u003e\nmethod on the variables \u003ccode\u003esightings\u003c/code\u003e and \u003ccode\u003esighting\u003c/code\u003e in the two controller\nactions:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    sightings = Sighting.all\u003cbr\u003e    render json: sightings.to_json(:include =\u0026gt; {\u003cbr\u003e      :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e      :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e    }, :except =\u0026gt; [:updated_at])\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def show\u003cbr\u003e    sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e    render json: sighting.to_json(:include =\u0026gt; {\u003cbr\u003e      :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e      :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e    }, :except =\u0026gt; [:updated_at])\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemember, though, that everything following \u003ccode\u003eto_json\u003c/code\u003e is the same for both\nactions. The goal of our new serializer class is to replace this without having\nto change too much.\u003c/p\u003e\n\n\u003cp\u003eWe will approach configuring the serializer in two steps. First, we will want to\ndefine an \u003ccode\u003einitialize\u003c/code\u003e method for the class. If you recall from object-oriented\nRuby, we use the \u003ccode\u003einitialize\u003c/code\u003e method to set up any instance variables that we\nmight want to share over multiple methods. In this case, \u003ccode\u003einitialize\u003c/code\u003e will take\nin whatever variable we're dealing with in a particular action, and store it as\nan instance variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingSerializer\u003cbr\u003e\u003cbr\u003e  def initialize(sighting_object)\u003cbr\u003e    @sighting = sighting_object\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, whatever we pass when initializing a new instance of \u003ccode\u003eSightingSerializer\u003c/code\u003e\nwill be stored as \u003ccode\u003e@sighting\u003c/code\u003e. We will need access to this variable elsewhere\nin the \u003ccode\u003eSightingSerializer\u003c/code\u003e, so an instance variable is needed here.\u003c/p\u003e\n\n\u003cp\u003eThe second step is to write a method that will call \u003ccode\u003eto_json\u003c/code\u003e on this instance\nvariable, handling the inclusion and exclusion of attributes, and return the results. \nWe will call this method \u003ccode\u003eto_serialized_json\u003c/code\u003e, and for now we can directly copy the \n\u003ccode\u003eto_json\u003c/code\u003e logic that currently exists in \u003ccode\u003eSightingsController\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingSerializer\u003cbr\u003e\u003cbr\u003e  def initialize(sighting_object)\u003cbr\u003e    @sighting = sighting_object\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def to_serialized_json\u003cbr\u003e    @sighting.to_json(:include =\u0026gt; {\u003cbr\u003e      :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e      :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e    }, :except =\u0026gt; [:updated_at])\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this setup, once an instance of \u003ccode\u003eSightingSerializer\u003c/code\u003e is created, we can\ncall \u003ccode\u003eto_serialized_json\u003c/code\u003e on it to get our data customized and ready to go as\na JSON string!\u003c/p\u003e\n\n\u003cp\u003eNow it is time to clean up \u003ccode\u003eSightingsController\u003c/code\u003e and replace the original render\nstatements with our new service class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    sightings = Sighting.all\u003cbr\u003e    render json: SightingSerializer.new(sightings).to_serialized_json\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def show\u003cbr\u003e    sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e    render json: SightingSerializer.new(sighting).to_serialized_json\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExtraction complete! We've resolved the issue of keeping our controller clear of\nexcess logic by moving it to a separate class. However, we still haven't made\nour \u003ccode\u003eto_json\u003c/code\u003e any easier to read.\u003c/p\u003e\n\n\u003ch2\u003eOrganizing Options\u003c/h2\u003e\n\n\u003cp\u003eIn the \u003ccode\u003eto_serialized_json\u003c/code\u003e method, we are passing multiple options into\n\u003ccode\u003eto_json\u003c/code\u003e when it is called. These options are just key/value pairs in a hash,\nthough, and we can choose to break this line up to get a better grasp of what is\nactually going on. Rewriting the method without changing any functionality, we\ncould write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef to_serialized_json\u003cbr\u003e  options = {\u003cbr\u003e    include: {\u003cbr\u003e      bird: {\u003cbr\u003e        only: [:name, :species]\u003cbr\u003e      },\u003cbr\u003e      location: {\u003cbr\u003e        only: [:latitude, :longitude]\u003cbr\u003e      }\u003cbr\u003e    },\u003cbr\u003e    except: [:updated_at],\u003cbr\u003e  }\u003cbr\u003e  @sighting.to_json(options)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAbove, we define a variable, \u003ccode\u003eoptions\u003c/code\u003e, assigning it to a hash. We then\ndefine two keys on that hash, \u003ccode\u003e:include\u003c/code\u003e and \u003ccode\u003e:except\u003c/code\u003e, and assign them the\nsame values as before. Finally, at the end of the method, instead of filling \n\u003ccode\u003eto_json\u003c/code\u003e with a long list of options, we pass in the \u003ccode\u003eoptions\u003c/code\u003e hash.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith a fully extracted \u003ccode\u003eSightingSerializer\u003c/code\u003e, we were able to leave our controller\nfree of clutter and extra logic. We were able to write a small class and utilize\nits methods multiple times, rather than repeat ourselves. Meanwhile, we now have\nthe space within that class to make our code as easy to understand as possible.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g9ad5a9d073443fc3fddc1dca5f5916be","title":"Flatiron Kitchen Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"flatiron-kitchen\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/flatiron-kitchen/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/flatiron-kitchen\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/flatiron-kitchen/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eDeliverables\u003c/h2\u003e\n\n\u003cp\u003eFork this repository. Deliver your solution in master.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFlatiron Kitchen started off as a bubble tea bar in the corner of Flatiron School and is now a five-star restaurant known for its blueberry pancakes.\u003c/p\u003e\n\n\u003cp\u003eThings used to be simpler when there were only a few chefs at Flatiron Kitchen, but now that it's expanding an application is needed to keep track of all of the world-class recipes.\u003c/p\u003e\n\n\u003cp\u003eWe need to be able to track which ingredients the restaurant has available and which ingredients are used in each recipe.\u003c/p\u003e\n\n\u003cp\u003eYour application should use a join table called \"recipe_ingredients\" to keep track of the ingredients for each recipe.\u003c/p\u003e\n\n\u003cp\u003eBuild your site so that it passes the tests in spec/features. There aren't tests for index pages or things like page headers or links, but feel free to add these (otherwise your app will be difficult to navigate).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e when you generate models, controllers, etc., be sure to include the \u003ccode\u003e--no-test-framework\u003c/code\u003e option so that Rails doesn't create tests (which are already included in the lab).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Each test has a helpful comment above it!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHINT:\u003c/strong\u003e If you give a checkbox \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e a name attribute like \u003ccode\u003eninja_turtle_colors[]\u003c/code\u003e, each ninja turtle color will be passed to the \u003ccode\u003eparams\u003c/code\u003e hash in an array: \u003ccode\u003e{ ninja_turtle_colors: [\"red\", \"blue\", \"orange\", \"purple\"] }\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eBonuses!\u003c/h2\u003e\n\n\u003cp\u003eKeep track of the quantity of ingredients currently on hand. Display on each recipe page how many dishes can be made given the existing ingredients.\u003c/p\u003e\n\n\u003cp\u003eWrite RSpec unit tests to verify your ingredients-to-dishes calculator.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"http://guides.rubyonrails.org/\"\u003eRails Guides\u003c/a\u003e - \u003ca href=\"http://guides.rubyonrails.org/association_basics.html\"\u003eActive Record Basics\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://guides.rubyonrails.org/\"\u003eRails Guides\u003c/a\u003e - \u003ca href=\"http://guides.rubyonrails.org/action_controller_overview.html\"\u003eAction Controller Overview\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g68048607edaf4db204f93a5becc4f1c2","title":"Forms and Basic Associations in Rails Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"forms-and-basic-associations-rails-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/forms-and-basic-associations-rails-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/forms-and-basic-associations-rails-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/forms-and-basic-associations-rails-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice defining associations\u003c/li\u003e\n\u003cli\u003ePractice building forms in ERB when working with nested models\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eA \u003ccode\u003eSong\u003c/code\u003e Library\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to make a song library that helps record thoughts\nabout various \u003ccode\u003eSong\u003c/code\u003es. Our data model looks like this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eArtist\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003ehas a \u003ccode\u003ename\u003c/code\u003e attribute (\u003ccode\u003eString\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003ehas many \u003ccode\u003eSong\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eSong\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003ehas a \u003ccode\u003etitle\u003c/code\u003e attribute (\u003ccode\u003eString\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003ebelongs to an \u003ccode\u003eArtist\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ebelongs to a \u003ccode\u003eGenre\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ehas many \u003ccode\u003eNote\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eGenre\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003ehas a \u003ccode\u003ename\u003c/code\u003e attribute (\u003ccode\u003eString\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003ehas many \u003ccode\u003esongs\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eNote\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003ehas \u003ccode\u003econtent\u003c/code\u003e attribute (\u003ccode\u003eString\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003ebelongs to a \u003ccode\u003eSong\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eThe base models, controllers, and seed data have been provided for you.\u003c/li\u003e\n\u003cli\u003eYou should create and migrate the database before starting to develop your\nsolution.\u003c/li\u003e\n\u003cli\u003eSeeding the database provides many \u003ccode\u003eGenre\u003c/code\u003es. You will add data about\n\u003ccode\u003eArtist\u003c/code\u003es, \u003ccode\u003eNote\u003c/code\u003es, and \u003ccode\u003eSong\u003c/code\u003es during the development of this application.\nThe \u003ccode\u003eArtistsController\u003c/code\u003e and \u003ccode\u003eSongsController\u003c/code\u003e have been built out so that you\ncan do this.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFirst, connect the models by using the \u003ccode\u003eActiveRecord\u003c/code\u003e association commands.\u003c/p\u003e\n\n\u003cp\u003eNext, update the minimal \u003ccode\u003eapp/views/songs/new.html.erb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis view should have a form that provides:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA text input box that sets the \u003ccode\u003eSong\u003c/code\u003e's title.\u003c/li\u003e\n\u003cli\u003eA text input box for the \u003ccode\u003eArtist\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eA selection box for \u003ccode\u003eGenre\u003c/code\u003e. Users should be able to pick amongst existing genres only.\u003c/li\u003e\n\u003cli\u003eSeveral text input boxes to add notes to the song. These should have the IDs\n\u003ccode\u003esong_notes_1\u003c/code\u003e, \u003ccode\u003esong_notes_2\u003c/code\u003e, and so on for the specs to pass.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is a challenging lab. Here are some hints:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou might need to search around for how to pass an array using \u003ccode\u003estrong_params\u003c/code\u003e!\u003c/li\u003e\n\u003cli\u003eIt's easy to get confused between getting an \u003ccode\u003eArtist\u003c/code\u003e \u003cem\u003einstance\u003c/em\u003e from a\n\u003ccode\u003eSong\u003c/code\u003e and an \u003ccode\u003eArtist\u003c/code\u003e's name. To help make your form work easier, solve the\n\u003ccode\u003espec/models/song_spec.rb\u003c/code\u003e \u003cem\u003efirst\u003c/em\u003e. You can run a single spec by invoking it\nwith e.g. \u003ccode\u003erspec spec/models/song_spec.rb\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eMake use of the references below!\u003c/li\u003e\n\u003cli\u003eWhile we direct you to update \u003ccode\u003enew.html.erb\u003c/code\u003e, you're going to need to make\nchanges in multiple models and the \u003ccode\u003eSongsController\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eReferences\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://guides.rubyonrails.org/association_basics.html#has-many-association-reference\"\u003e\u003ccode\u003ehas_many\u003c/code\u003e association reference\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://guides.rubyonrails.org/association_basics.html#belongs-to-association-reference\"\u003e\u003ccode\u003ebelongs_to\u003c/code\u003e association reference\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://apidock.com/rails/ActionController/Parameters/permit\"\u003eSpecifying which parameters are accepted in Rails Controllers\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8c8ceb478eaa37355567d78bfc416f52","title":"Form_Tag Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-form_tag-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-form_tag-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_tag-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_tag-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eBuild a functional Rails form using a \u003ccode\u003eform_tag\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ePass a route helper as the argument to a \u003ccode\u003eform_tag\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ePass an options hash with a method to a \u003ccode\u003eform_tag\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUse a \u003ccode\u003etext_field_tag\u003c/code\u003e and other form controls to create inputs\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBuild a \u003ccode\u003enew\u003c/code\u003e action that renders a form that submits to the \u003ccode\u003ecreate\u003c/code\u003e action\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThe two specs for this lab that are currently failing are located within the\n\u003ccode\u003eform page\u003c/code\u003e feature in \u003ccode\u003especs/features/student_spec.rb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor this lab, you need to build a form to create a new student, have the form\nredirect \u003cem\u003eback\u003c/em\u003e to the \u003ccode\u003enew\u003c/code\u003e view template (commonly, a \u003ccode\u003ecreate\u003c/code\u003e action would\nredirect to \u003ccode\u003eindex\u003c/code\u003e), and print out the form params to the screen.  Below are a\nfew items to keep in mind:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eDraw a \u003ccode\u003enew\u003c/code\u003e and \u003ccode\u003ecreate\u003c/code\u003e route for the \u003ccode\u003estudents\u003c/code\u003e resource\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ePrint out the student value to the view template page\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eKeys to remember\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eLook at the tests to see which field values you should be using\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eMake sure to use the \u003ccode\u003eform_tag\u003c/code\u003e helpers\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/learn-co-curriculum/rails-form_tag-readme\"\u003eReading\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html\"\u003eForm Helper Documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gfcb7964edf57b6fbad11e49107791e31","title":"Has Many Through Forms in Rails","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"has-many-through-forms-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/has-many-through-forms-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/has-many-through-forms-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/has-many-through-forms-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eConstruct a bi-directional has many through.\u003c/li\u003e \u003cli\u003eIdentify the join model in a has many through.\u003c/li\u003e \u003cli\u003eConstruct a nested params hash with data about the primary object and a has many through association.\u003c/li\u003e \u003cli\u003eUse the conventional key names for associated data (association_attributes).\u003c/li\u003e \u003cli\u003eName form inputs correctly to create a nested params hash with has many through association data.\u003c/li\u003e \u003cli\u003eDefine a conventional association writer for the primary model to properly instantiate associations based on the nested params association data.\u003c/li\u003e \u003cli\u003eDefine a custom association writer for the primary model to properly instantiate associations with custom logic (like unique by name) on the nested params association data.\u003c/li\u003e \u003cli\u003eUse fields_for to generate the association fields.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eWe've looked at the different ways we can interact with our associated models through nested forms as well as displaying data from more complex associations. In this lesson, we'll look at some different ways we can create data from our complex associations to make for a great user experience.\u003c/p\u003e  \u003ch2\u003eJoin Model Forms\u003c/h2\u003e  \u003cp\u003eSometimes, it may be appropriate for a user to create an instance of our join model directly. Think back to the hospital domain from our previous lab. It makes perfect sense that a user would go to \u003ccode\u003eappointments/new\u003c/code\u003e and fill out a form to create a new appointment.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for @appointment do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.datetime_select :appointment_datetime %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.collection_select :doctor, Doctor.all, :id, :name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.collection_select :patient, Patient.all, :id, :name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this example, a user is filling out a form, entering the date and time they'd like to come, and choosing their doctor and their name from a dropdown. We're assigning these properties directly to the appointment as it's created.\u003c/p\u003e  \u003cp\u003eOther times, we need to be more abstract. Let's return to our blog example, but this time we'll say that a post can have many categories and categories can have many posts. For this, we'll need a join table –– let's call it \u003ccode\u003epost_categories\u003c/code\u003e. If our user wants to associate a post with a category, it doesn't make sense for them to go to \u003ccode\u003e/post_categories/new\u003c/code\u003e and fill out a \"new post category form.\" That's confusing! Let's look at a more abstract way that we can do this thanks to the magic of Active Record.\u003c/p\u003e  \u003ch2\u003eSetting up our Posts and Categories\u003c/h2\u003e \u003cpre\u003e\u003ccode\u003e# app/models/post.rb\u003cbr\u003e\u003cbr\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :post_categories\u003cbr\u003e  has_many :categories, through: :post_categories\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# app/models/category.rb\u003cbr\u003e\u003cbr\u003eclass Category \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :post_categories\u003cbr\u003e  has_many :posts, through: :post_categories\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# app/models/post_category.rb\u003cbr\u003e\u003cbr\u003eclass PostCategory \u0026lt; ActiveRecord::Base\u003cbr\u003e  belongs_to :post\u003cbr\u003e  belongs_to :category\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, let's make it so that our user can assign categories to a post when the post is created. We did this in a previous example without a join table. Our post was directly related to its category, and the \u003ccode\u003eposts\u003c/code\u003e table had the foreign key for its category. Because of this, instances of our \u003ccode\u003ePost\u003c/code\u003e class responded to a method called \u003ccode\u003ecategory_ids=\u003c/code\u003e. We called upon this method from our form helpers to build out a nested form.\u003c/p\u003e  \u003cp\u003eLuckily, \u003ccode\u003ehas_many, through\u003c/code\u003e functions exactly the same as a \u003ccode\u003ehas_many\u003c/code\u003e relationship. Instances of our \u003ccode\u003ePost\u003c/code\u003e class still respond to a method called \u003ccode\u003ecategory_ids=\u003c/code\u003e. We'll use a helper method very similar to the \u003ccode\u003ecollection_select\u003c/code\u003e we used previously.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/views/posts/_form.html.erb\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label \"Title\" %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label \"Content\" %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_area :content %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.collection_check_boxes :category_ids, Category.all, :id, :name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will create a checkbox field for each \u003ccode\u003eCategory\u003c/code\u003e in our database. The HTML generated looks something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;input\u003cbr\u003e  type=\"checkbox\"\u003cbr\u003e  value=\"1\"\u003cbr\u003e  name=\"post[category_ids][]\"\u003cbr\u003e  id=\"post_category_ids_1\"\u003cbr\u003e/\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn our controller, we've setup our \u003ccode\u003epost_params\u003c/code\u003e to expect a key of \u003ccode\u003e:category_ids\u003c/code\u003e with a value of an array.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/post_controller.rb\u003cbr\u003e\u003cbr\u003eclass PostsController \u0026lt; ApplicationController\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def post_params\u003cbr\u003e    params.require(:post).permit(:title, :content, category_ids:[])\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter submitting the form, we end up with \u003ccode\u003epost_params\u003c/code\u003e that look something like:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\"title\"=\u0026gt;\"New Post\", \"content\"=\u0026gt;\"Some great content!!\", \"category_ids\"=\u0026gt;[\"2\", \"3\", \"\"]} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's check out the SQL that fires from creating our new post.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef create\u003cbr\u003e  post = Post.create(post_params)\u003cbr\u003e  redirect_to post\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eINSERT INTO \"posts\" (\"title\", \"content\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"title\", \"New Post\"], [\"content\", \"Some great content!!\"], [\"created_at\", \"2016-01-15 21:25:59.963430\"], [\"updated_at\", \"2016-01-15 21:25:59.963430\"]]\u003cbr\u003e\u003cbr\u003eINSERT INTO \"post_categories\" (\"category_id\", \"post_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"category_id\", 2], [\"post_id\", 6], [\"created_at\", \"2016-01-15 21:25:59.966654\"], [\"updated_at\", \"2016-01-15 21:25:59.966654\"]]\u003cbr\u003e\u003cbr\u003eINSERT INTO \"post_categories\" (\"category_id\", \"post_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"category_id\", 3], [\"post_id\", 6], [\"created_at\", \"2016-01-15 21:25:59.968301\"], [\"updated_at\", \"2016-01-15 21:25:59.968301\"]] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFirst, we're creating a new row in our \u003ccode\u003eposts\u003c/code\u003e table with \u003ccode\u003etitle\u003c/code\u003e and \u003ccode\u003econtent\u003c/code\u003e. Next, we create a row in our \u003ccode\u003epost_categories\u003c/code\u003e table for each ID number that was stored in our \u003ccode\u003ecategory_ids\u003c/code\u003e array. This functions just like it did with a \u003ccode\u003ehas_many\u003c/code\u003e relationship, but, instead of creating a new record in our \u003ccode\u003ecategories\u003c/code\u003e table, Active Record is creating two new rows in our \u003ccode\u003epost_categories\u003c/code\u003e table. This means that we can interact with our higher-level models directly without having to think too much at all about our join table - ActiveRecord will manage that relationship for us behind the scenes.\u003c/p\u003e  \u003ch2\u003eCreating New Categories\u003c/h2\u003e  \u003cp\u003eWe can now associate categories with our posts, but what about creating new categories? If I'm posting about baby elephants and no one has created the category \"Super Cute!\" yet, I want to be able to create it at the same time as my post. Again, this will be very similar to the way we've done things before.\u003c/p\u003e  \u003cp\u003eFirst, we want a text field to enter the name of our new category. The value of the name should be nested under our \u003ccode\u003epost_params\u003c/code\u003e, so we don't have to add too much code to our controller. We can use the \u003ccode\u003efields_for\u003c/code\u003e helper to do this very easily.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/views/posts/_form.html.erb\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for @post do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label \"Title\" %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label \"Content\" %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_area :content %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.collection_check_boxes :category_ids, Category.all, :id, :name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.fields_for :categories, post.categories.build do |categories_fields| %\u0026gt;\u003cbr\u003e    \u0026lt;%= categories_fields.text_field :name %\u0026gt;\u003cbr\u003e  \u0026lt;% end %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003efields_for\u003c/code\u003e helper takes two arguments: the associated model that we're creating and an object to wrap around. In this case, we've passed in the \u003ccode\u003e:categories\u003c/code\u003e association and built an empty category associated with the post.\u003c/p\u003e  \u003cp\u003eLet's look at the html that this generated for us.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;input\u003cbr\u003e  type=\"text\"\u003cbr\u003e  name=\"post[categories_attributes][0][name]\"\u003cbr\u003e  id=\"post_categories_attributes_0_name\"\u003cbr\u003e/\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur params hash will now have a key of \u003ccode\u003e:categories_attributes\u003c/code\u003e nested under the key of \u003ccode\u003epost\u003c/code\u003e. Let's add that to our strong params and tell it to expect a key of \u003ccode\u003ename\u003c/code\u003e inside for the category's name.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/post_controller.rb\u003cbr\u003e\u003cbr\u003eclass PostsController \u0026lt; ApplicationController\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def post_params\u003cbr\u003e    params.require(:post).permit(:title, :content, category_ids:[], categories_attributes: [:name])\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, when we do mass assignment, our \u003ccode\u003ePost\u003c/code\u003e model will call a method called \u003ccode\u003ecategories_attributes=\u003c/code\u003e. Let's add that method to our model using the \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e macro.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :post_categories\u003cbr\u003e  has_many :categories, through: :post_categories\u003cbr\u003e  accepts_nested_attributes_for :categories\u003cbr\u003e\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eVoila! Just like when our models were directly related, we can now create categories that are automatically associated with our new post. Looking at the SQL that gets generated, we can see that it's creating new instances of \u003ccode\u003ePostCategory\u003c/code\u003e without us ever having to interact with them.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e(0.1ms)  begin transaction\u003cbr\u003e  SQL (0.4ms)  INSERT INTO \"posts\" (\"title\", \"content\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"title\", \"A New Post!\"], [\"content\", \"It was the best of times, it was the worst of times\"], [\"created_at\", \"2016-01-15 22:08:37.271367\"], [\"updated_at\", \"2016-01-15 22:08:37.271367\"]]\u003cbr\u003e  SQL (0.1ms)  INSERT INTO \"categories\" (\"name\", \"created_at\", \"updated_at\") VALUES (?, ?, ?)  [[\"name\", \"Really Neat!\"], [\"created_at\", \"2016-01-15 22:08:37.277421\"], [\"updated_at\", \"2016-01-15 22:08:37.277421\"]]\u003cbr\u003e  SQL (0.3ms)  INSERT INTO \"post_categories\" (\"post_id\", \"category_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"post_id\", 9], [\"category_id\", 5], [\"created_at\", \"2016-01-15 22:08:37.279564\"], [\"updated_at\", \"2016-01-15 22:08:37.279564\"]]\u003cbr\u003e   (1.0ms)  commit transaction \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eStill, there's a problem. We're creating a new category each time, regardless of whether or not it exists. It will look pretty weird if three people type in \"Super Cute!\" and we get three different categories. In this case, we need to customize the way our category is created. Luckily, we can easily do this by creating our own \u003ccode\u003ecategories_attributes=\u003c/code\u003e method.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :post_categories\u003cbr\u003e  has_many :categories, through: :post_categories\u003cbr\u003e  # accepts_nested_attributes_for :categories\u003cbr\u003e\u003cbr\u003e  def categories_attributes=(category_attributes)\u003cbr\u003e    category_attributes.values.each do |category_attribute|\u003cbr\u003e      category = Category.find_or_create_by(category_attribute)\u003cbr\u003e      self.categories \u0026lt;\u0026lt; category\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, we're only creating a new category if it doesn't already exist with the current name. We're also using a cool method called \u003ccode\u003ecategories\u0026lt;\u0026lt;\u003c/code\u003e. What's great about this is you can mentally think of it as two steps. First, we call \u003ccode\u003eself.categories\u003c/code\u003e, which returns an array of \u003ccode\u003eCategory\u003c/code\u003e objects, and then we call the shovel (\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e) method to add our newly found or created \u003ccode\u003eCategory\u003c/code\u003e object to the array. We could imagine later calling \u003ccode\u003esave\u003c/code\u003e on the \u003ccode\u003ePost\u003c/code\u003e object and this then creating the \u003ccode\u003epost_categories\u003c/code\u003e join record for us. In reality, this is syntactic sugar for the \u003ccode\u003ecategories\u0026lt;\u0026lt;\u003c/code\u003e method. That's the actual method name, and behind the scenes it will create the join record for us. It's one of the methods dynamically created for us whenever we use a \u003ccode\u003ehas_many\u003c/code\u003e association. The end result is this method doing exactly what Active Record was doing for us before; we're just customizing the behavior a little bit.\u003c/p\u003e  \u003ch2\u003eConclusion/So What?\u003c/h2\u003e  \u003cp\u003eAs you can see, it doesn't really matter how complex our associations are –– Active Record is really good at managing that complexity for us. We can always drop down a level of abstraction if needed to customize the way our application behaves.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g40481c0296bf646eb32feee9736815ac","title":"Has Many Through Forms in Rails Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"has-many-through-forms-rails-labs\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/has-many-through-forms-rails-labs/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/has-many-through-forms-rails-labs\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/has-many-through-forms-rails-labs/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eWe've looked at setting up the associations behind posts with comments, categories, and users. Now, let's actually give our users the ability to create new comments, users, and categories! For this lab, your models are already stubbed out, but you may need to update them to make your forms work properly.\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eConstruct a bi-directional has many through.\u003c/li\u003e \u003cli\u003eIdentify the join model in a has many through.\u003c/li\u003e \u003cli\u003eConstruct a nested params hash with data about the primary object and a has many through association.\u003c/li\u003e \u003cli\u003eUse the conventional key names for associated data (association_attributes).\u003c/li\u003e \u003cli\u003eName form inputs correctly to create a nested params hash with has many through association data.\u003c/li\u003e \u003cli\u003eDefine a conventional association writer for the primary model to properly instantiate associations based on the nested params association data.\u003c/li\u003e \u003cli\u003eDefine a custom association writer for the primary model to properly instantiate associations with custom logic (like unique by name) on the nested params association data.\u003c/li\u003e \u003cli\u003eUse fields_for to generate the association fields.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eCreate a form at \u003ccode\u003eposts#new\u003c/code\u003e to create a new post. The form should include check boxes for us to select categories as well as a text field to create a new category. You should do this with a nested form so that our controller stays thin. Also, typing in a \u003ccode\u003eCategory\u003c/code\u003e name that already exists should not create a new category. Instead, if we type in a category that already exists, we should select it from the database and associate the post we've created with the existing category.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\n\u003cp\u003eCreate a \u003ccode\u003eposts#show\u003c/code\u003e page to display the following:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eThe title, categories, and content of the post.\u003c/li\u003e \u003cli\u003eAll of the comments associated with the post.\u003c/li\u003e \u003cli\u003eA list of all the unique users who have commented on the post. A user's name should only show up once in this section, even if they've commented multiple times.\u003c/li\u003e \u003cli\u003eA form to add a new comment. The form should have a drop-down menu to select a user (we'll change this in future lessons to automatically associate the comment with a logged-in user). We should also be able to create a new user here and automatically associate it with the post. To associate a new comment with a post, you'll have to use a \u003cem\u003e[hidden field](\u003ca href=\"https://apidock.com/rails/ActionView/Helpers/FormHelper/hidden\"\u003ehttps://apidock.com/rails/ActionView/Helpers/FormHelper/hidden\u003c/a\u003e\u003c/em\u003efield)_:\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ol\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= f.hidden_field :post_id, value: @post.id %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003col\u003e \u003cli\u003e\u003cp\u003eCreate a \u003ccode\u003eusers#show\u003c/code\u003e page that links to all of the posts a user has commented on.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eCreate a \u003ccode\u003ecategories#show\u003c/code\u003e page that links to all of the posts associated with a given category.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eHints\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eWhen creating new comments, we should only create a new user if they filled in that input. \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e has a \u003ccode\u003ereject_if\u003c/code\u003e option that you can configure to only create new records if all the fields aren't blank.\u003c/li\u003e \u003cli\u003eAlso, the select box that we use for the users needs to have a blank option –– check out the \u003ccode\u003einclude_blank\u003c/code\u003e option for \u003ccode\u003ecollection_select\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html\"\u003eAccepts Nested Attributes For\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://apidock.com/rails/ActionView/Helpers/FormOptionsHelper/collection_select\"\u003eCollection Select\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=k7s2LjVF3YY\"\u003eLab Review\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://apidock.com/rails/ActionView/Helpers/FormHelper/hidden_field\"\u003eAPI Doc: hidden_field\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g520c968ac63384758aa448dc60945af8","title":"Intro to Redux: Reading Data from State","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"intro-to-redux-library-codealong\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/intro-to-redux-library-codealong/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-redux-library-codealong\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/intro-to-redux-library-codealong/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eUse the \u003ccode\u003ecreateStore()\u003c/code\u003e method provided by the redux library.\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eIn the previous section, we have been building using a \u003cstrong\u003ecreateStore()\u003c/strong\u003e method that we wrote, and passing a reducer to it. We have been using the \u003cstrong\u003edispatch\u003c/strong\u003e method from the store, to dispatch actions and update the state.\u003c/p\u003e  \u003cp\u003eNow let's think about which part of our application would belong in the official Redux library -- that is, which part of our codebase would be common to all applications. Well, probably not the reducer as our reducers seem unique to each React \u0026amp; Redux application. The reducers are unique because sometimes we have reducers that would add or remove items, or add or remove users, or edit users, etc. What these actions are and how the reducer manages the state is customized. Thus, the reducer would not be part of the redux library that other developers would use to build their application.\u003c/p\u003e  \u003cp\u003eThe \u003cstrong\u003ecreateStore()\u003c/strong\u003e, method however is generic across Redux applications. It always returns a store (given a reducer) that will have a dispatch method and a getState method.\u003c/p\u003e  \u003cp\u003eSo from now on, we will import our \u003cstrong\u003ecreateStore()\u003c/strong\u003e method from the official Redux library. Normally, to install Redux into a React application, you need to install two packages, \u003ccode\u003eredux\u003c/code\u003e and \u003ccode\u003ereact-redux\u003c/code\u003e by running \u003ccode\u003enpm install redux \u0026amp;\u0026amp; npm install react-redux\u003c/code\u003e. These are already included in this lesson's \u003ccode\u003epackage.json\u003c/code\u003e file, so all you need to do is run \u003ccode\u003enpm install \u0026amp;\u0026amp; npm start\u003c/code\u003e to get started.\u003c/p\u003e  \u003cp\u003eIn this code along, we'll be building a simple shopping list application that will allow a user to view an existing shopping list.\u003c/p\u003e  \u003ch3\u003eStep 1: Setting Up The Store\u003c/h3\u003e  \u003cp\u003eFirst things first, we'll use Redux to initialize our store and pass it down to our top-level container component.\u003c/p\u003e  \u003cp\u003eRedux provides a function, \u003ccode\u003ecreateStore()\u003c/code\u003e, that, when invoked, returns an instance of the Redux store for us. So we can use that method to create a store. We want to import \u003ccode\u003ecreateStore()\u003c/code\u003e in our \u003ccode\u003esrc/index.js\u003c/code\u003e file, where ReactDOM renders our application.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport { createStore } from 'redux'; /* code change */\u003cbr\u003eimport shoppingListItemReducer from './reducers/shoppingListItemReducer.js';\u003cbr\u003eimport App from './App';\u003cbr\u003eimport './index.css';\u003cbr\u003e\u003cbr\u003econst store = createStore(shoppingListItemReducer); /* code change */\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u0026lt;App /\u0026gt;, document.getElementById('root')); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we are importing the \u003ccode\u003ecreateStore\u003c/code\u003e function from Redux. Now, with the above set up, we \u003cem\u003ecould\u003c/em\u003e pass \u003ccode\u003estore\u003c/code\u003e down through App and we would be able to access the \u003cstrong\u003eRedux\u003c/strong\u003e store.\u003c/p\u003e  \u003cp\u003eHowever, reducing the need for passing props is part of why \u003cstrong\u003eRedux\u003c/strong\u003e works well with React. To avoid passing \u003ccode\u003estore\u003c/code\u003e as a prop, we use the \u003ccode\u003eProvider\u003c/code\u003e component, which is imported from \u003ccode\u003ereact-redux\u003c/code\u003e. The \u003ccode\u003eProvider\u003c/code\u003e component wraps the top level component, App, in this case, and is the only component where \u003ccode\u003estore\u003c/code\u003e is passed in:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport { createStore } from 'redux';\u003cbr\u003eimport { Provider } from 'react-redux'; /* code change */\u003cbr\u003eimport shoppingListItemReducer from './reducers/shoppingListItemReducer.js';\u003cbr\u003eimport App from './App';\u003cbr\u003eimport './index.css';\u003cbr\u003e\u003cbr\u003econst store = createStore(shoppingListItemReducer);\u003cbr\u003e\u003cbr\u003e// code change - added Provider to wrap around App\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store}\u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt; /* code change */,\u003cbr\u003e  document.getElementById('root')\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eBy including the \u003ccode\u003eProvider\u003c/code\u003e, we'll be able to access our \u003cstrong\u003eRedux\u003c/strong\u003e store and/or dispatch actions from any component we want, regardless of where it is on the component tree.\u003c/p\u003e  \u003cp\u003eSo, to recap, just like we did previously, we call our \u003cstrong\u003ecreateStore()\u003c/strong\u003e method in \u003ccode\u003esrc/index.js\u003c/code\u003e. We pass our \u003cstrong\u003ecreateStore()\u003c/strong\u003e method a reducer, and then we pass our newly created store to our \u003cstrong\u003eApp\u003c/strong\u003e component as a prop. You can find the reducer in \u003ccode\u003e./src/reducers/shoppingListItemReducer.js\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/reducers/shoppingListItemReducer.js\u003cbr\u003e\u003cbr\u003eexport default function shoppingListItemReducer(\u003cbr\u003e  state = {\u003cbr\u003e    items: []\u003cbr\u003e  },\u003cbr\u003e  action\u003cbr\u003e) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        items: state.items.concat(state.items.length + 1)\u003cbr\u003e      }\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk so effectively, our reducer is just producing a counter. It adds a new item to the list each time it is called, and that item is one more than the last item.\u003c/p\u003e  \u003cp\u003eInstead of having all of our functions encapsulated in a closure within \u003ccode\u003eindex.js\u003c/code\u003e as we did while building our own redux set up, we've now separated out the reducer function, giving it a relevant name, \u003ccode\u003eshoppingListItemReducer\u003c/code\u003e, and let the Redux library take care of our \u003ccode\u003ecreateStore\u003c/code\u003e function. These two pieces are both imported into \u003ccode\u003esrc/index.js\u003c/code\u003e and used to create \u003ccode\u003estore\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThis \u003ccode\u003estore\u003c/code\u003e value is then passed in as a prop to \u003ccode\u003eProvider\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eTo gain access to the \u003ccode\u003estore\u003c/code\u003e somewhere in our app, we use a second function provided by \u003ccode\u003ereact-redux\u003c/code\u003e, \u003ccode\u003econnect\u003c/code\u003e. By modifying a component's export statement and included \u003ccode\u003econnect\u003c/code\u003e, we are able to take data from our \u003cstrong\u003eRedux\u003c/strong\u003e store and map them to a component's props. Similarly, we can \u003cem\u003ealso\u003c/em\u003e take actions, and by wrapping them in a dispatch and an anonymous function, be able pass them as props as well:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003eimport './App.css';\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e  handleOnClick = event =\u0026gt; {\u003cbr\u003e    this.props.increaseCount();\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={this.handleOnClick}\u0026gt;Click\u0026lt;/button\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;{this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    items: state.items\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    increaseCount: () =\u0026gt; dispatch({ type: 'INCREASE_COUNT' })\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect(\u003cbr\u003e  mapStateToProps,\u003cbr\u003e  mapDispatchToProps\u003cbr\u003e)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk, so this code places a button on the page with an \u003ccode\u003eonClick\u003c/code\u003e event listener pointed to \u003ccode\u003ethis.handleOnClick\u003c/code\u003e. When \u003ccode\u003ethis.handleOnClick\u003c/code\u003e is invoked, it calls a function, \u003ccode\u003ethis.props.increaseCount\u003c/code\u003e. Well.. \u003ccode\u003eincreaseCount\u003c/code\u003e is actually being provided by the new function below our App component: \u003ccode\u003emapDispatchToProps\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eMeanwhile, we've also got \u003ccode\u003ethis.props.items.length\u003c/code\u003e, which is \u003cem\u003ealso\u003c/em\u003e a prop created from our \u003cstrong\u003eRedux\u003c/strong\u003e store. As the store's \u003ccode\u003eitems\u003c/code\u003e property increases, App will display a different number!\u003c/p\u003e  \u003cp\u003eIf you boot up the app, you should see a button on the page, followed by a zero, using the core above for \u003ccode\u003eindex.js\u003c/code\u003e and \u003ccode\u003eApp.js\u003c/code\u003e, we can see \u003cstrong\u003eRedux\u003c/strong\u003e in action. Every button click dispatches an action to our store, causing it to change. Since data (\u003ccode\u003eitems\u003c/code\u003e) from that store is being accessed in App, App will re-render and display the updated counter.\u003c/p\u003e  \u003ch4\u003eAdd Logging to Our Reducer\u003c/h4\u003e  \u003cp\u003eOk, so getting our application to re-render takes a bit of work, and were going to go into greater depth in the next sections. In the meantime, let's get some feedback. First, let's log our action and the new state. So we'll change the reducer to the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/reducers/shoppingListItemReducer\u003cbr\u003e\u003cbr\u003eexport default function shoppingListItemReducer(\u003cbr\u003e  state = {\u003cbr\u003e    items: []\u003cbr\u003e  },\u003cbr\u003e  action\u003cbr\u003e) {\u003cbr\u003e  console.log(action);\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      console.log('Current state.items length %s', state.items.length);\u003cbr\u003e      console.log('Updating state.items length to %s', state.items.length + 1);\u003cbr\u003e      return {\u003cbr\u003e        ...state,\u003cbr\u003e        items: state.items.concat(state.items.length + 1)\u003cbr\u003e      };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      console.log('Initial state.items length: %s', state.items.length);\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk, so this may look like a lot, but really all were doing is adding some logging behavior. At the top of the function, we are logging the action. After the case statement, we are storing our state as current state first. Then we are logging the updating state value. Then under the default case statement, we just can log the previous state because this state is unchanged.\u003c/p\u003e  \u003cp\u003eNow, refresh your app, and give it a shot. You should see the correct action being dispatched, as well as an update to the state. While we aren't getting our state directly from the store, we know that we are dispatching actions. We know this because each time we click a button, we call store.dispatch({ type: 'INCREASE_COUNT' }) and somehow this is hitting our reducer. So things are happening.\u003c/p\u003e  \u003ch4\u003eRedux DevTools\u003c/h4\u003e  \u003cp\u003eThere is this amazing piece of software that allows us to nicely view the state of our store and each action that is dispatched. The software does a lot more than that. I'll let you read about it here: \u003ca href=\"https://github.com/zalmoxisus/redux-devtools-extension\"\u003eredux-devtools-extension\u003c/a\u003e. Ok, so let's get to incorporating this. In fact, every time we use the Redux library going forward, we should make sure we incorporate devtools. Otherwise, you are flying blind.\u003c/p\u003e  \u003cp\u003eFirst, just Google for Redux Devtools Chrome. There you will find the Chrome extension for Redux. Please download it, and refresh Chrome. You will know that you have installed the extension if you go to your developer console in Google Chrome (press command+shift+c to pull it up), and then at the top bar you will see a couple of arrows. Click those arrows, and if you see Redux as your dropdown, you properly installed the Chrome extension. Step one is done.\u003c/p\u003e  \u003cp\u003eSecond, we need to tell our application to communicate with this extension. Doing so is pretty easy. Now we change the arguments to our createStore method to the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport { createStore } from 'redux';\u003cbr\u003eimport { Provider } from 'react-redux';\u003cbr\u003eimport shoppingListItemReducer from './reducers/shoppingListItemReducer';\u003cbr\u003eimport App from './App';\u003cbr\u003eimport './index.css';\u003cbr\u003e\u003cbr\u003econst store = createStore(\u003cbr\u003e  shoppingListItemReducer,\u003cbr\u003e  window.__REDUX_DEVTOOLS_EXTENSION__ \u0026amp;\u0026amp; window.__REDUX_DEVTOOLS_EXTENSION__()\u003cbr\u003e); /* code change */\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store}\u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt;,\u003cbr\u003e  document.getElementById('root')\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOk, notice that we are still passing through our reducer to the createStore method. The second argument is accessing our browser to find a method called \u003ccode\u003e__REDUX_DEVTOOLS_EXTENSION__\u003c/code\u003e. If that method is there, the method is executed. Now if you have your Chrome console opened, make sure the Redux Devtools Inspector is open (press command+shift+c, click on the arrows at the top right, and the dropdown for the extension). Now click on the tab that says state. You should see \u003ccode\u003e{ items: [] }\u003c/code\u003e. If you do, it means that your app is now communicating with the devtool. Click on the button in your application, to see if the state changes. Now for each time you click on it, you should see an action in the devtools that has the name of that action. If you are looking at the last state, you should see the changes in our state.\u003c/p\u003e  \u003cp\u003eWhew!\u003c/p\u003e  \u003ch3\u003eSummary\u003c/h3\u003e  \u003cp\u003eIn this lesson, we saw how to use the \u003cstrong\u003ecreateStore()\u003c/strong\u003e method. We saw that we can rely on the Redux library to provide this method, and that we still need to write our own reducer to tell the store what the new state will be given a particular action. We saw that when using the \u003cstrong\u003ecreateStore()\u003c/strong\u003e method, and passing through a reducer, we are able to change the state just as we did previously. We were able to see these changes by hooking our application up to a Chrome extension called Redux Devtools, and then providing the correct configuration.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g14f311f0eb725e6cf95b4824fe6efc1b","title":"Join the Fun Rails Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"join-the-fun-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/join-the-fun-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/join-the-fun-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/join-the-fun-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFlatiron School has started its own taxi service, FlatironX, and we need to\nstart developing the application's domain model!\u003c/p\u003e\n\n\u003cp\u003eThree basic models have already been created, \u003ccode\u003ePassenger\u003c/code\u003e, \u003ccode\u003eRide\u003c/code\u003e, and \u003ccode\u003eTaxi\u003c/code\u003e. Just run\n\u003ccode\u003erake db:migrate\u003c/code\u003e and \u003ccode\u003erake db:migrate RAILS_ENV=test\u003c/code\u003e to apply the migrations to the\ndevelopment and test databases, respectively.\u003c/p\u003e\n\n\u003cp\u003eThe next step is set up a \u003ccode\u003ehas_many :through\u003c/code\u003e relationship between\nthese three models so that we can keep track of who's driving who around.\nIt will work like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eTaxi -\u0026lt; Rides \u0026gt;- Passengers\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis way, a taxi can have many passengers, and a passenger can have many taxis!\u003c/p\u003e\n\n\u003cp\u003eEach table only has a primary key, so you'll need to write a migration to\nget the database ready to handle the \"has_many :through\" relationship.\u003c/p\u003e\n\n\u003cp\u003eCheck out the join table section in the \u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association\"\u003eActive Record Association Rails Guide\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eRun the tests using the \u003ccode\u003erspec\u003c/code\u003e or \u003ccode\u003elearn test\u003c/code\u003e command.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/\"\u003eRails Guides\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/association_basics.html#the-has-many-through-association\"\u003eActive Record Associations: Join Table section\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8a41cbe247d8159e6f8d6b4f17672045","title":"JWT Auth","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"jwt-auth-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/jwt-auth-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/jwt-auth-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/jwt-auth-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003e\u003cstrong\u003eThis is a sample application and walks through \u003cem\u003eone\u003c/em\u003e possible auth implementation. It does not cover everything there is to know about auth and is intended as an introduction. Please do not blindly copy/paste the code here. Use this as a guide for setting up auth in a React/Redux application using JSON Web Tokens.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSecond disclaimer: there are tradeoffs to every auth implementation. To secure our application further, we should set our tokens to expire and make sure our app is being served over \u003ca href=\"https://en.wikipedia.org/wiki/HTTPS\"\u003eHTTPS\u003c/a\u003e. Furthermore, there are some \u003ca href=\"https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage\"\u003etradeoffs to storing JWTs in browser \u003ccode\u003elocalStorage\u003c/code\u003e\u003c/a\u003e. \u003ca href=\"https://stackoverflow.com/questions/35291573/csrf-protection-with-json-web-tokens/35347022#35347022\"\u003eThis StackOverflow post has a concise summary of the benefits/tradeoffs about where/how to store tokens client-side\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\n\u003ch2\u003eRAILS BCrypt, JWT 🔐\u003c/h2\u003e\n\n\u003ch4\u003eBuilding Our Server\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eThis section will walk through building a rails server. If you have questions about \u003ccode\u003eCors\u003c/code\u003e, \u003ccode\u003eActiveModel::Serializer\u003c/code\u003e, \u003ccode\u003ePostgres\u003c/code\u003e, namespacing and versioning our API, and/or general questions about Rails as an api only, refer \u003ca href=\"https://github.com/learn-co-curriculum/mod3-project-week-setup-example\"\u003eto this guide\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLet's create our app with \u003ccode\u003erails new backend_project_name --api --database=postgresql\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe're going to need a few gems in our \u003ca href=\"https://learning.flatironschool.com/server/Gemfile\"\u003eGemfile\u003c/a\u003e so let's go ahead and add them: \u003ccode\u003ebundle add jwt \u0026amp;\u0026amp; bundle add active_model_serializers \u0026amp;\u0026amp; bundle add faker\u003c/code\u003e––if you get a gem not found error, try running gem install on each of these, or manually add them to your \u003ca href=\"https://learning.flatironschool.com/server/Gemfile\"\u003eGemfile\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDon't forget to uncomment \u003ccode\u003erack-cors\u003c/code\u003e and \u003ccode\u003ebcrypt\u003c/code\u003e from your \u003ca href=\"https://learning.flatironschool.com/server/Gemfile\"\u003eGemfile\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCall \u003ccode\u003ebundle install\u003c/code\u003e. Your \u003ca href=\"https://learning.flatironschool.com/server/Gemfile\"\u003eGemfile\u003c/a\u003e should look something like this:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003esource 'https://rubygems.org'\u003cbr\u003egit_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\u003cbr\u003e\u003cbr\u003eruby '2.5.1'\u003cbr\u003e\u003cbr\u003e# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'\u003cbr\u003egem 'rails', '~\u0026gt; 5.2.1'\u003cbr\u003e# Use postgresql as the database for Active Record\u003cbr\u003egem 'pg', '\u0026gt;= 0.18', '\u0026lt; 2.0'\u003cbr\u003e# Use Puma as the app server\u003cbr\u003egem 'puma', '~\u0026gt; 3.11'\u003cbr\u003e# Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder\u003cbr\u003e# gem 'jbuilder', '~\u0026gt; 2.5'\u003cbr\u003e# Use Redis adapter to run Action Cable in production\u003cbr\u003e# gem 'redis', '~\u0026gt; 4.0'\u003cbr\u003e# Use ActiveModel has_secure_password\u003cbr\u003egem 'bcrypt', '~\u0026gt; 3.1.7'\u003cbr\u003e\u003cbr\u003e# Use ActiveStorage variant\u003cbr\u003e# gem 'mini_magick', '~\u0026gt; 4.8'\u003cbr\u003e\u003cbr\u003e# Use Capistrano for deployment\u003cbr\u003e# gem 'capistrano-rails', group: :development\u003cbr\u003e\u003cbr\u003e# Reduces boot times through caching; required in config/boot.rb\u003cbr\u003egem 'bootsnap', '\u0026gt;= 1.1.0', require: false\u003cbr\u003e\u003cbr\u003e# Use Rack CORS for handling Cross-Origin Resource Sharing (CORS), making cross-origin AJAX possible\u003cbr\u003egem 'rack-cors'\u003cbr\u003e\u003cbr\u003e\u003cbr\u003egroup :development, :test do\u003cbr\u003e  # Call 'byebug' anywhere in the code to stop execution and get a debugger console\u003cbr\u003e  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003egroup :development do\u003cbr\u003e  gem 'listen', '\u0026gt;= 3.0.5', '\u0026lt; 3.2'\u003cbr\u003e  # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring\u003cbr\u003e  gem 'spring'\u003cbr\u003e  gem 'spring-watcher-listen', '~\u0026gt; 2.0.0'\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e# Windows does not include zoneinfo files, so bundle the tzinfo-data gem\u003cbr\u003egem 'tzinfo-data', platforms: [:mingw, :mswin, :x64_mingw, :jruby]\u003cbr\u003e\u003cbr\u003egem \"jwt\", \"~\u0026gt; 2.1\"\u003cbr\u003e\u003cbr\u003egem \"active_model_serializers\", \"~\u0026gt; 0.10.7\"\u003cbr\u003e\u003cbr\u003egem \"faker\", \"~\u0026gt; 1.9\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eDon't forget to enable \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eCORS\u003c/a\u003e in your app. Uncomment the following in \u003ca href=\"https://learning.flatironschool.com/server/config/initializers/cors.rb\"\u003e\u003ccode\u003econfig/initializers/cors.rb\u003c/code\u003e\u003c/a\u003e. Don't forget to change the origins from \u003ccode\u003eexample.com\u003c/code\u003e to \u003ccode\u003e*\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eDepending on the use-case and needs of our API, we might want to limit access to our app. For example, if our React frontend is deployed to \u003ccode\u003emyDankReactApp.com\u003c/code\u003e, we might want to limit access to that domain only. If certain endpoints are meant to be public, we can make those available but limit to \u003ccode\u003eGET\u003c/code\u003e requests, for example.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eRails.application.config.middleware.insert_before 0, Rack::Cors do\u003cbr\u003e  allow do\u003cbr\u003e    origins '*'\u003cbr\u003e\u003cbr\u003e    resource '*',\u003cbr\u003e      headers: :any,\u003cbr\u003e      methods: [:get, :post, :put, :patch, :delete, :options, :head]\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eYou can refer to the \u003ca href=\"https://github.com/cyu/rack-cors\"\u003erack-cors gem\u003c/a\u003e for more information about this file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePlease don't forget to change these settings before deploying your app to the internet. \u003cem\u003ePlease\u003c/em\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\n\u003ch4\u003eCreating Users\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eRun\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erails g model User username password_digest bio avatar\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erails g controller api/v1/users\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003erails g serializer user\u003c/code\u003e (if you want to \u003ca href=\"https://www.sitepoint.com/active-model-serializers-rails-and-json-oh-my/\"\u003euse a serializer\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erails db:create\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003erails db:migrate\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAdd \u003ccode\u003ehas_secure_password\u003c/code\u003e to \u003ca href=\"https://learning.flatironschool.com/server/app/models/user.rb\"\u003e\u003ccode\u003eapp/models/user.rb\u003c/code\u003e\u003c/a\u003e. Recall that \u003ccode\u003ehas_secure_password\u003c/code\u003e comes from \u003ca href=\"https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password\"\u003e\u003ccode\u003eActiveModel\u003c/code\u003e and adds methods to set and authenticate against a BCrypt password\u003c/a\u003e:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass User \u0026lt; ApplicationRecord\u003cbr\u003e  has_secure_password\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eYou might also want to add some \u003ca href=\"https://guides.rubyonrails.org/active_record_validations.html\"\u003evalidations\u003c/a\u003e to your users:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass User \u0026lt; ApplicationRecord\u003cbr\u003e  has_secure_password\u003cbr\u003e  validates :username, uniqueness: { case_sensitive: false }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003ch4\u003eQuick BCrypt Tangent\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eRecall that \u003ccode\u003eBCrypt\u003c/code\u003e allows us to \u003ca href=\"https://en.wikipedia.org/wiki/Salt_(cryptography)\"\u003esalt\u003c/a\u003e users' plaintext passwords before running them through a \u003ca href=\"https://en.wikipedia.org/wiki/Cryptographic_hash_function\"\u003ehashing function\u003c/a\u003e. A hashing function is, basically, a \u003cem\u003eone way\u003c/em\u003e function. Similar to putting something in a meat grinder: we cannot \u003cem\u003efeasibly\u003c/em\u003e reconstruct something that's been ground up by a meat grinder. We then store these passwords that have been 'digested' by \u003ccode\u003eBCrypt\u003c/code\u003e in our database. \u003cstrong\u003e\u003ca href=\"https://blog.mozilla.org/webdev/2012/06/08/lets-talk-about-password-storage/\"\u003eNever ever ever store your users' plaintext passwords in your database\u003c/a\u003e. It's bad form and should be avoided at all costs.\u003c/strong\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLet's take a look at some of the functionality provided by \u003ccode\u003eBCrypt\u003c/code\u003e:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e# in rails console\u003cbr\u003e\u0026gt; BCrypt::Password.create('P@ssw0rd')\u003cbr\u003e =\u0026gt; \"$2a$10$D0iXNNy/5r2YC5GC4ArGB.dNL6IpUzxH3WjCewb3FM8ciwsHBt0cq\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eBCrypt::Password\u003c/code\u003e \u003ca href=\"https://github.com/codahale/bcrypt-ruby/blob/master/lib/bcrypt/password.rb#L23\"\u003einherits from the Ruby \u003ccode\u003eString\u003c/code\u003e class\u003c/a\u003e and has its own \u003ca href=\"https://github.com/codahale/bcrypt-ruby/blob/master/lib/bcrypt/password.rb#L65\"\u003e== instance method\u003c/a\u003e that allows us to run a plaintext password through \u003ccode\u003eBCrypt\u003c/code\u003e \u003cem\u003eusing the same salt\u003c/em\u003e and compare it against an already digested password:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e# in rails console\u003cbr\u003e\u0026gt; salted_pw = BCrypt::Password.create('P@ssw0rd')\u003cbr\u003e  =\u0026gt; \"$2a$10$YQvJPemUzm8IdCCaHxiOOes6HMEHda/.Hl60cUoYb4X4fncgT8ubG\"\u003cbr\u003e\u003cbr\u003e\u0026gt; salted_pw.class\u003cbr\u003e  =\u0026gt; BCrypt::Password\u003cbr\u003e\u003cbr\u003e\u0026gt; salted_pw == 'P@ssw0rd'\u003cbr\u003e  =\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eBCrypt\u003c/code\u003e also provides a method that will take a stringified \u003ccode\u003epassword_digest\u003c/code\u003e and turn it into an instance of \u003ccode\u003eBCrypt::Password\u003c/code\u003e, allowing us to call the over-written \u003ccode\u003e==\u003c/code\u003e method.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e# in rails console\u003cbr\u003e\u0026gt; sample_digest = User.last.password_digest\u003cbr\u003e  =\u0026gt; \"$2a$10$SJiIJnmQJ/A4z4fFG5EuE.aOoCjacFuQMVpVzQnhPSJKYLFCoqmWy\"\u003cbr\u003e\u003cbr\u003e\u0026gt; sample_digest.class\u003cbr\u003e  =\u0026gt; String\u003cbr\u003e\u003cbr\u003e\u0026gt; sample_digest == 'P@ssword'\u003cbr\u003e =\u0026gt; false\u003cbr\u003e\u003cbr\u003e\u0026gt; bcrypt_sample_digest = BCrypt::Password.new(sample_digest)\u003cbr\u003e  =\u0026gt; \"$2a$10$dw4sYcbLXc8XRX6YGc7ve.ot6LbYevMbSpFQZUaa8tm5NI8cxBPwa\"\u003cbr\u003e\u003cbr\u003e\u0026gt; bcrypt_sample_digest.class\u003cbr\u003e  =\u0026gt; BCrypt::Password\u003cbr\u003e\u003cbr\u003e\u0026gt; bcrypt_sample_digest == 'P@ssw0rd'\u003cbr\u003e  =\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/26ufdipQqU2lhNA4g/giphy.gif\" alt=\"mind blown\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWe have no way of storing instances of \u003ccode\u003eBCrypt::Password\u003c/code\u003e in our database. Instead, we're storing users' password digests \u003cstrong\u003e\u003ca href=\"https://learning.flatironschool.com/server/db/schema.rb\"\u003eas strings\u003c/a\u003e\u003c/strong\u003e. If we were to build our own \u003ccode\u003eUser#authenticate\u003c/code\u003e method using \u003ccode\u003eBCrypt\u003c/code\u003e, it might look something like this:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass User \u0026lt; ApplicationRecord\u003cbr\u003e  attr_accessor :password\u003cbr\u003e\u003cbr\u003e  def authenticate(plaintext_password)\u003cbr\u003e    if BCrypt::Password.new(self.password_digest) == plaintext_password\u003cbr\u003e      self\u003cbr\u003e    else\u003cbr\u003e      false\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e# in rails console\u003cbr\u003e\u0026gt; User.last.authenticate('not my password')\u003cbr\u003e  =\u0026gt; false\u003cbr\u003e\u003cbr\u003e\u0026gt; User.last.authenticate('P@ssw0rd')\u003cbr\u003e  =\u0026gt; #\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eInstead of creating our own \u003ccode\u003eUser#authenticate\u003c/code\u003e method, we can use \u003ca href=\"https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password\"\u003e\u003ccode\u003eActiveModel#has_secure_password\u003c/code\u003e\u003c/a\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass User \u0026lt; ApplicationRecord\u003cbr\u003e  has_secure_password\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/l4Jz3a8jO92crUlWM/giphy.gif\" alt=\"salt bae\"\u003e\u003c/p\u003e\n\n\u003ch4\u003eEnd of BCrypt Tangent\u003c/h4\u003e\n\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eLet's add a \u003ccode\u003ecreate\u003c/code\u003e method to our \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003e\u003ccode\u003eUsersController\u003c/code\u003e\u003c/a\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass Api::V1::UsersController \u0026lt; ApplicationController\u003cbr\u003e  def create\u003cbr\u003e    @user = User.create(user_params)\u003cbr\u003e    if @user.valid?\u003cbr\u003e      render json: { user: UserSerializer.new(@user) }, status: :created\u003cbr\u003e    else\u003cbr\u003e      render json: { error: 'failed to create user' }, status: :not_acceptable\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e  def user_params\u003cbr\u003e    params.require(:user).permit(:username, :password, :bio, :avatar)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWe can use the \u003ca href=\"https://gist.github.com/mlanett/a31c340b132ddefa9cca\"\u003ebuilt in Rails HTTP status code symbols\u003c/a\u003e when sending responses to the client; \u003ccode\u003estatus: :not_acceptable\u003c/code\u003e, for instance. Need a refresher on \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\"\u003eHTTP Status Codes\u003c/a\u003e? Check out \u003ca href=\"http://httpstatusrappers.com/\"\u003ehttpstatusrappers.com/\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAnd update our \u003ca href=\"https://learning.flatironschool.com/server/app/serializers/user_serializer.rb\"\u003e\u003ccode\u003eUserSerializer\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass UserSerializer \u0026lt; ActiveModel::Serializer\u003cbr\u003e  attributes :username, :avatar, :bio\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eNext let's add the routes we'll need for our server. In \u003ca href=\"https://learning.flatironschool.com/server/config/routes.rb\"\u003e\u003ccode\u003econfig/routes.rb\u003c/code\u003e\u003c/a\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eRails.application.routes.draw do\u003cbr\u003e  namespace :api do\u003cbr\u003e    namespace :v1 do\u003cbr\u003e      resources :users, only: [:create]\u003cbr\u003e      post '/login', to: 'auth#create'\u003cbr\u003e      get '/profile', to: 'users#profile'\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eTake some time to test this either in \u003ca href=\"https://www.getpostman.com/apps\"\u003ePostman\u003c/a\u003e or with JavaScript fetch:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003efetch('http://localhost:3000/api/v1/users', {\u003cbr\u003e  method: 'POST',\u003cbr\u003e  headers: {\u003cbr\u003e    'Content-Type': 'application/json',\u003cbr\u003e    Accept: 'application/json'\u003cbr\u003e  },\u003cbr\u003e  body: JSON.stringify({\u003cbr\u003e    user: {\u003cbr\u003e      username: \"sylviawoods\",\u003cbr\u003e      password: \"whatscooking\",\u003cbr\u003e      bio: \"Sylvia Woods was an American restaurateur who founded the sould food restaurant Sylvia's in Harlem on Lenox Avenue, New York City in 1962. She published two cookbooks and was an important figure in the community.\",\u003cbr\u003e      avatar: \"https://upload.wikimedia.org/wikipedia/commons/4/49/Syvia_of_Sylvia%27s_reaturant_N.Y.C_%28cropped%29.jpg\"\u003cbr\u003e    }\u003cbr\u003e  })\u003cbr\u003e})\u003cbr\u003e  .then(r =\u0026gt; r.json())\u003cbr\u003e  .then(console.log)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e if you're using Postman and your formatting is set to \"raw and JSON\", remember to use double quotes (\"\") in both keys and values in the request.\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003ch2\u003eMake Sure You Can POST and Create a New User Before Proceeding\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/pcPs6v6fhE7Ru/giphy.gif\" alt=\"intermission\"\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003ch4\u003eJSON Web Tokens (JWT)\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eToken-based authentication is \u003cstrong\u003estateless\u003c/strong\u003e. \u003cem\u003eWe are not storing any information about a logged in user on the server\u003c/em\u003e (which also means we don't need a model or table for our user sessions). No stored information means our application can scale and add more machines as necessary without worrying about where a user is logged in. Instead, the client (browser) stores a token and sends that token along with every authenticated request. Instead of storing a plaintext username, or user_id, we can encode user data with JSON Web Tokens (JWT) and store that encoded token client-side.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\n\u003ch4\u003eJWT Auth Flow:\u003c/h4\u003e\n\n\u003cp\u003e\u003cimg src=\"https://i.stack.imgur.com/f2ZhM.png\" alt=\"\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eHere is the JWT authentication flow for logging in:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e An already existing user requests access with their username and password\u003c/li\u003e\n\u003cli\u003e The app validates these credentials\u003c/li\u003e\n\u003cli\u003e The app gives a signed token to the client\u003c/li\u003e\n\u003cli\u003e The client stores the token and presents it with every request. This token is effectively the user's access pass––it proves to our server that they are who they claim to be.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eJWTs are composed of three strings separated by periods:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e  aaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbbbb.ccccccccccccccccccc\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eThe first part (aaaaaaaaaaaa) is the header\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe second part (bbbbbbbbbbbb) is the payload - the good stuff, like who this person is, and their id in our database.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe third part (ccccccccccccc) is the signature. The signature is a hash of the header and the payload. It is hashed with a secret key, that we will provide (and should store in an environment variable using a gem like \u003ca href=\"https://github.com/laserlemon/figaro#getting-started\"\u003eFigaro\u003c/a\u003e)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eHead on over to \u003ca href=\"http://jwt.io/#debugger\"\u003ejwt.io\u003c/a\u003e and see for yourself:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg width=\"750\" alt=\"JWTs\" src=\"https://cloud.githubusercontent.com/assets/25366/9151601/2e3baf1a-3dbc-11e5-90f6-b22cda07a077.png\"\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003ch3\u003eEncoding and Decoding JWTs\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eSince we've already added \u003ca href=\"https://github.com/jwt/ruby-jwt\"\u003e\u003ccode\u003egem jwt\u003c/code\u003e\u003c/a\u003e to our \u003ca href=\"https://learning.flatironschool.com/server/Gemfile\"\u003egemfile\u003c/a\u003e, let's explore some JWT methods by opening a \u003ccode\u003erails console\u003c/code\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eJWT.encode\u003c/code\u003e takes up to three arguments: a payload to encode, an application secret of the user's choice, and an optional third that can be used to specify the hashing algorithm used. Typically, we don't need to show the third. This method returns a JWT as a string.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eJWT.decode\u003c/code\u003e takes three arguments as well: a JWT as a string, an application secret, and––optionally––a hashing algorithm.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e#in rails console\u003cbr\u003e\u0026gt;  payload = { beef: 'steak' }\u003cbr\u003e\u003cbr\u003e\u0026gt; jwt = JWT.encode(payload, 'boeuf')\u003cbr\u003e=\u0026gt; \"eyJhbGciOiJIUzI1NiJ9.eyJiZWVmIjoic3RlYWsifQ._IBTHTLGX35ZJWTCcY30tLmwU9arwdpNVxtVU0NpAuI\"\u003cbr\u003e\u003cbr\u003e\u0026gt; decoded_hash = JWT.decode(jwt, 'boeuf')\u003cbr\u003e=\u0026gt; [{\"beef\"=\u0026gt;\"steak\"}, {\"alg\"=\u0026gt;\"HS256\"}]\u003cbr\u003e\u003cbr\u003e\u0026gt; data = decoded_hash[0]\u003cbr\u003e=\u0026gt; {\"beef\"=\u0026gt;\"steak\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003ch4\u003eBuilding this functionality into our \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/application_controller.rb\"\u003e\u003ccode\u003eApplicationController\u003c/code\u003e\u003c/a\u003e:\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eGiven that many different controllers will need to \u003ca href=\"https://en.wikipedia.org/wiki/Authentication\"\u003eauthenticate\u003c/a\u003e and \u003ca href=\"https://en.wikipedia.org/wiki/Authorization\"\u003eauthorize\u003c/a\u003e users––\u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/auth_controller.rb\"\u003e\u003ccode\u003eAuthController\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003e\u003ccode\u003eUsersController\u003c/code\u003e\u003c/a\u003e, etc––it makes sense to lift the functionality of encoding/decoding tokens to our top level \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/application_controller.rb\"\u003e\u003ccode\u003eApplicationController\u003c/code\u003e\u003c/a\u003e. (Recall that \u003cstrong\u003eall\u003c/strong\u003e controllers inherit from \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/application_controller.rb\"\u003e\u003ccode\u003eApplicationController\u003c/code\u003e\u003c/a\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass ApplicationController \u0026lt; ActionController::API\u003cbr\u003e  def encode_token(payload)\u003cbr\u003e    # payload =\u0026gt; { beef: 'steak' }\u003cbr\u003e    JWT.encode(payload, 'my_s3cr3t')\u003cbr\u003e    # jwt string: \"eyJhbGciOiJIUzI1NiJ9.eyJiZWVmIjoic3RlYWsifQ._IBTHTLGX35ZJWTCcY30tLmwU9arwdpNVxtVU0NpAuI\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def decoded_token(token)\u003cbr\u003e    # token =\u0026gt; \"eyJhbGciOiJIUzI1NiJ9.eyJiZWVmIjoic3RlYWsifQ._IBTHTLGX35ZJWTCcY30tLmwU9arwdpNVxtVU0NpAuI\"\u003cbr\u003e\u003cbr\u003e    JWT.decode(token, 'my_s3cr3t')[0]\u003cbr\u003e    # JWT.decode =\u0026gt; [{ \"beef\"=\u0026gt;\"steak\" }, { \"alg\"=\u0026gt;\"HS256\" }]\u003cbr\u003e    # [0] gives us the payload { \"beef\"=\u0026gt;\"steak\" }\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"https://jwt.io/introduction/\"\u003eAccording to the JWT Documentation\u003c/a\u003e:\nWhenever the user wants to access a protected route or resource, the user agent (browser in our case) should send the JWT, typically in the Authorization header using the Bearer schema. The content of the header should look like the following:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ccode\u003eAuthorization: Bearer \u0026lt;token\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe corresponding \u003ccode\u003efetch\u003c/code\u003e request might look like this:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003efetch('http://localhost:3000/api/v1/profile', {\u003cbr\u003e  method: 'GET',\u003cbr\u003e  headers: {\u003cbr\u003e    Authorization: `Bearer `\u003cbr\u003e  }\u003cbr\u003e})\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eKnowing this, we can set up our server to anticipate a JWT sent along in request headers, \u003cem\u003einstead\u003c/em\u003e of passing the token directly to \u003ccode\u003eApplicationController#decoded_token\u003c/code\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass ApplicationController \u0026lt; ActionController::API\u003cbr\u003e  def encode_token(payload)\u003cbr\u003e    # payload =\u0026gt; { beef: 'steak' }\u003cbr\u003e    JWT.encode(payload, 'my_s3cr3t')\u003cbr\u003e    # jwt string: \"eyJhbGciOiJIUzI1NiJ9.eyJiZWVmIjoic3RlYWsifQ._IBTHTLGX35ZJWTCcY30tLmwU9arwdpNVxtVU0NpAuI\"\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def auth_header\u003cbr\u003e    # { 'Authorization': 'Bearer ' }\u003cbr\u003e    request.headers['Authorization']\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def decoded_token\u003cbr\u003e    if auth_header\u003cbr\u003e      token = auth_header.split(' ')[1]\u003cbr\u003e      # headers: { 'Authorization': 'Bearer ' }\u003cbr\u003e      begin\u003cbr\u003e        JWT.decode(token, 'my_s3cr3t', true, algorithm: 'HS256')\u003cbr\u003e        # JWT.decode =\u0026gt; [{ \"beef\"=\u0026gt;\"steak\" }, { \"alg\"=\u0026gt;\"HS256\" }]\u003cbr\u003e      rescue JWT::DecodeError\u003cbr\u003e        nil\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eA few things to note about the code above:\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ca href=\"https://ruby-doc.org/core-2.2.0/doc/syntax/exceptions_rdoc.html\"\u003e\u003ccode\u003eBegin/Rescue\u003c/code\u003e syntax\u003c/a\u003e allows us to \u003cstrong\u003erescue\u003c/strong\u003e out of an exception in Ruby. Let's see an example in a \u003ccode\u003erails console\u003c/code\u003e. In the event our server receives and attempts to decode an \u003cstrong\u003einvalid token\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e# in rails console\u003cbr\u003e\u0026gt; invalid_token = \"nnnnnnnooooooootttttt.vvvvvvaaaallliiiiidddddd.jjjjjjjwwwwwttttttt\"\u003cbr\u003e\u003cbr\u003e\u0026gt; JWT.decode(invalid_token, 'my_s3cr3t', true, algorithm: 'HS256')\u003cbr\u003e\u003cbr\u003eTraceback (most recent call last):\u003cbr\u003e        1: from (irb):6\u003cbr\u003eJWT::DecodeError (Invalid segment encoding)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eIn other words, if our server receives a bad token, this will raise an exception causing a \u003ca href=\"http://httpstatusrappers.com/500.html\"\u003e500 Internal Server Error\u003c/a\u003e. We can account for this by \u003cstrong\u003erescuing out of this exception\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e# in rails console\u003cbr\u003e\u0026gt; invalid_token = \"nnnnnnnooooooootttttt.vvvvvvaaaallliiiiidddddd.jjjjjjjwwwwwttttttt\"\u003cbr\u003e\u003cbr\u003e\u0026gt; begin JWT.decode(invalid_token, 'my_s3cr3t', true, algorithm: 'HS256')\u003cbr\u003e  rescue JWT::DecodeError\u003cbr\u003e    nil\u003cbr\u003e\u0026gt;  end\u003cbr\u003e =\u0026gt; nil\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eInstead of crashing our server, we simply return \u003ccode\u003enil\u003c/code\u003e and keep trucking along.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/3xb5V0fbxHXck/giphy.gif\" alt=\"keep trucking\"\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eWe can then complete our \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/application_controller.rb\"\u003e\u003ccode\u003eApplicationController\u003c/code\u003e\u003c/a\u003e by automatically obtaining the user whenever an authorization header is present:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass ApplicationController \u0026lt; ActionController::API\u003cbr\u003e\u003cbr\u003e  def encode_token(payload)\u003cbr\u003e    # don't forget to hide your secret in an environment variable\u003cbr\u003e    JWT.encode(payload, 'my_s3cr3t')\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def auth_header\u003cbr\u003e    request.headers['Authorization']\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def decoded_token\u003cbr\u003e    if auth_header\u003cbr\u003e      token = auth_header.split(' ')[1]\u003cbr\u003e      begin\u003cbr\u003e        JWT.decode(token, 'my_s3cr3t', true, algorithm: 'HS256')\u003cbr\u003e      rescue JWT::DecodeError\u003cbr\u003e        nil\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def current_user\u003cbr\u003e    if decoded_token\u003cbr\u003e      # decoded_token=\u0026gt; [{\"user_id\"=\u0026gt;2}, {\"alg\"=\u0026gt;\"HS256\"}]\u003cbr\u003e      # or nil if we can't decode the token\u003cbr\u003e      user_id = decoded_token[0]['user_id']\u003cbr\u003e      @user = User.find_by(id: user_id)\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def logged_in?\u003cbr\u003e    !!current_user\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eRecall that a Ruby object/instance is 'truthy': \u003ccode\u003e!!user_instance #=\u0026gt; true\u003c/code\u003e and nil is 'falsey': \u003ccode\u003e!!nil #=\u0026gt; false\u003c/code\u003e. Therefore \u003ccode\u003elogged_in?\u003c/code\u003e will just return a boolean depending on what our \u003ccode\u003ecurrent_user\u003c/code\u003e method returns.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eFinally, let's lock down our application to prevent unauthorized access:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass ApplicationController \u0026lt; ActionController::API\u003cbr\u003e  before_action :authorized\u003cbr\u003e\u003cbr\u003e  def encode_token(payload)\u003cbr\u003e    # should store secret in env variable\u003cbr\u003e    JWT.encode(payload, 'my_s3cr3t')\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def auth_header\u003cbr\u003e    # { Authorization: 'Bearer ' }\u003cbr\u003e    request.headers['Authorization']\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def decoded_token\u003cbr\u003e    if auth_header\u003cbr\u003e      token = auth_header.split(' ')[1]\u003cbr\u003e      # header: { 'Authorization': 'Bearer ' }\u003cbr\u003e      begin\u003cbr\u003e        JWT.decode(token, 'my_s3cr3t', true, algorithm: 'HS256')\u003cbr\u003e      rescue JWT::DecodeError\u003cbr\u003e        nil\u003cbr\u003e      end\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def current_user\u003cbr\u003e    if decoded_token\u003cbr\u003e      user_id = decoded_token[0]['user_id']\u003cbr\u003e      @user = User.find_by(id: user_id)\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def logged_in?\u003cbr\u003e    !!current_user\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def authorized\u003cbr\u003e    render json: { message: 'Please log in' }, status: :unauthorized unless logged_in?\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eA few things to note about the code above:\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ebefore_action :authorized\u003c/code\u003e will call the authorized method \u003cstrong\u003ebefore anything else happens in our app\u003c/strong\u003e. This will effectively lock down the entire application. Next we'll augment our \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003e\u003ccode\u003eUsersController\u003c/code\u003e\u003c/a\u003e and build our \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/auth_controller.rb\"\u003e\u003ccode\u003eAuthController\u003c/code\u003e\u003c/a\u003e to allow signup/login.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\n\u003ch4\u003eUpdating the \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003eUsersController\u003c/a\u003e\n\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eLet's update the \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003eUsersController\u003c/a\u003e so that it issues a token when users register for our app:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass Api::V1::UsersController \u0026lt; ApplicationController\u003cbr\u003e  skip_before_action :authorized, only: [:create]\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    @user = User.create(user_params)\u003cbr\u003e    if @user.valid?\u003cbr\u003e      @token = encode_token(user_id: @user.id)\u003cbr\u003e      render json: { user: UserSerializer.new(@user), jwt: @token }, status: :created\u003cbr\u003e    else\u003cbr\u003e      render json: { error: 'failed to create user' }, status: :not_acceptable\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def user_params\u003cbr\u003e    params.require(:user).permit(:username, :password, :bio, :avatar)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eWe need to make sure to skip the \u003ccode\u003ebefore_action :authorized\u003c/code\u003e coming from \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/application_controller.rb\"\u003eApplicationController\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass Api::V1::UsersController \u0026lt; ApplicationController\u003cbr\u003e  skip_before_action :authorized, only: [:create]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eIt wouldn't make sense to ask our users to be logged in before they create an account. This circular logic will make it \u003cstrong\u003eimpossible\u003c/strong\u003e for users to authenticate into the app. How can a user create an account if our app asks them to be logged in or \u003ccode\u003eauthorized\u003c/code\u003e to do so? Skipping the before action 'unlocks' this portion of our app.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/l1J9Jzcs9OHXa310k/giphy.gif\" alt=\"omg\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eTry creating a new user again with either \u003ca href=\"https://www.getpostman.com/apps\"\u003epostman\u003c/a\u003e or fetch and confirm that your server successfully issues a token on signup.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/fSkMuhRxstDi5g5dwo/giphy.gif\" alt=\"sign me up gif\"\u003e\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003ch4\u003eImplementing Login\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eA token should be issued in two different controller actions: \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003e\u003ccode\u003eUsersController#create\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/auth_controller.rb\"\u003e\u003ccode\u003eAuthController#create\u003c/code\u003e\u003c/a\u003e. Think about what these methods are responsible for––\u003cstrong\u003ea user signing up for our app for the first time\u003c/strong\u003e and \u003cstrong\u003ean already existing user logging back in\u003c/strong\u003e. In both cases, our server needs to issue a new token🥇.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe'll need to create a new controller to handle login: \u003ccode\u003erails g controller api/v1/auth\u003c/code\u003e. Next, let's add the following to this newly created \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/auth_controller.rb\"\u003eAuthController\u003c/a\u003e:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass Api::V1::AuthController \u0026lt; ApplicationController\u003cbr\u003e  skip_before_action :authorized, only: [:create]\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    @user = User.find_by(username: user_login_params[:username])\u003cbr\u003e    #User#authenticate comes from BCrypt\u003cbr\u003e    if @user \u0026amp;\u0026amp; @user.authenticate(user_login_params[:password])\u003cbr\u003e      # encode token comes from ApplicationController\u003cbr\u003e      token = encode_token({ user_id: @user.id })\u003cbr\u003e      render json: { user: UserSerializer.new(@user), jwt: token }, status: :accepted\u003cbr\u003e    else\u003cbr\u003e      render json: { message: 'Invalid username or password' }, status: :unauthorized\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def user_login_params\u003cbr\u003e    # params { user: {username: 'Chandler Bing', password: 'hi' } }\u003cbr\u003e    params.require(:user).permit(:username, :password)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWe can simply call our \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/application_controller.rb\"\u003e\u003ccode\u003eApplicationController#encode_token\u003c/code\u003e\u003c/a\u003e method, passing the found user's ID in a payload. The newly created JWT can then be passed back along with the user's data. \u003cstrong\u003eThe user data can be stored in our application's state\u003c/strong\u003e, e.g., \u003ca href=\"https://reactjs.org/\"\u003eReact\u003c/a\u003e or \u003ca href=\"https://redux.js.org/\"\u003eRedux\u003c/a\u003e, while the token can be stored client-side.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eA few things to keep in mind about the code above:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eUser.find_by({ name: 'Chandler Bing' })\u003c/code\u003e will either return a user instance if that user can be found \u003cstrong\u003eOR\u003c/strong\u003e it will return \u003ccode\u003enil\u003c/code\u003e if that user is not found.\u003c/li\u003e\n\u003cli\u003eIn the event that the user is not found, \u003ccode\u003euser = User.find_by(username: params[:username])\u003c/code\u003e will evaluate to \u003ccode\u003enil\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eCan we call \u003ccode\u003e.authenticate\u003c/code\u003e on \u003ccode\u003enil\u003c/code\u003e? NO!! \u003ccode\u003eNoMethodError (undefined method 'authenticate' for nil:NilClass)\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eRuby, however, is \u003cstrong\u003elazy\u003c/strong\u003e. If Ruby encounters \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, both statements in the expression must evaluate to true. If the statement on the left side evaluates to false, Ruby will \u003cstrong\u003enot even look at the statement on the right\u003c/strong\u003e. Let's see an example:\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e# in irb or a rails console\u003cbr\u003e\u0026gt; true \u0026amp;\u0026amp; true\u003cbr\u003e  =\u0026gt; true\u003cbr\u003e\u003cbr\u003e\u0026gt; true \u0026amp;\u0026amp; false\u003cbr\u003e  =\u0026gt; false\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u0026gt; true \u0026amp;\u0026amp; not_a_variable\u003cbr\u003e  NameError (undefined local variable or method `not_a_variable` for main:Object)\u003cbr\u003e\u003cbr\u003e\u0026gt; false \u0026amp;\u0026amp; not_a_variable\u003cbr\u003e  =\u0026gt; false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eLet's take another look at our previous example:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e@user = User.find_by(username: params[:username])\u003cbr\u003eif @user \u0026amp;\u0026amp; @user.authenticate(params[:password])\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eIf \u003ccode\u003e@user\u003c/code\u003e is \u003ccode\u003enil\u003c/code\u003e, which is falsey, \u003cstrong\u003eruby will not even attempt to call \u003ccode\u003e@user.authenticate\u003c/code\u003e\u003c/strong\u003e. Without this catch, we'd get a \u003ccode\u003eNoMethodError (undefined method 'authenticate' for nil:NilClass)\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr\u003e\n\n\u003cul\u003e\n\u003cli\u003eAgain, the client should be sending a JWT along with every authenticated request. Refer to this diagram from \u003ca href=\"https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication\"\u003escotch.io\u003c/a\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://cdn.scotch.io/scotchy-uploads/2014/11/tokens-new.png\" alt=\"scotch.io article on token auth\"\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA sample request might look like:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003efetch('http://localhost:3000/api/v1/profile', {\u003cbr\u003e  method: 'GET',\u003cbr\u003e  headers: {\u003cbr\u003e    Authorization: `Bearer `\u003cbr\u003e  }\u003cbr\u003e})\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eSo, let's update our \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003e\u003ccode\u003eUsersController\u003c/code\u003e\u003c/a\u003e so that an authenticated user can access their profile information:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003eclass Api::V1::UsersController \u0026lt; ApplicationController\u003cbr\u003e  skip_before_action :authorized, only: [:create]\u003cbr\u003e\u003cbr\u003e  def profile\u003cbr\u003e    render json: { user: UserSerializer.new(current_user) }, status: :accepted\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    @user = User.create(user_params)\u003cbr\u003e    if @user.valid?\u003cbr\u003e      @token = encode_token({ user_id: @user.id })\u003cbr\u003e      render json: { user: UserSerializer.new(@user), jwt: @token }, status: :created\u003cbr\u003e    else\u003cbr\u003e      render json: { error: 'failed to create user' }, status: :not_acceptable\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def user_params\u003cbr\u003e    params.require(:user).permit(:username, :password, :bio, :avatar)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eOne final note about the snippet above: \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/application_controller.rb\"\u003e\u003ccode\u003eApplicationController\u003c/code\u003e\u003c/a\u003e calls \u003ccode\u003eauthorized\u003c/code\u003e \u003cstrong\u003ebefore any other controller methods are called\u003c/strong\u003e. If authorization fails, our server will never call \u003ca href=\"https://learning.flatironschool.com/server/app/controllers/api/v1/users_controller.rb\"\u003e\u003ccode\u003eUsersController#profile\u003c/code\u003e\u003c/a\u003e and will instead:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003erender json: { message: 'Please log in' }, status: :unauthorized\n\u003c/code\u003e\u003c/pre\u003e\n\u003chr\u003e\n\n\u003ch2\u003eThat's It For the Server!\u003c/h2\u003e\n\n\u003chr\u003e\n\n\u003ch3\u003eExternal Resources\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/HTTPS\"\u003eHTTPS Wikipedia Article\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage\"\u003eStoring JWTs in Cookies vs HTML5 localStorage\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://stackoverflow.com/questions/35291573/csrf-protection-with-json-web-tokens/35347022#35347022\"\u003eStackOverflow Post on Cookies vs localStorage for Storing Tokens\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/learn-co-curriculum/mod3-project-week-setup-example\"\u003eMod3 API Setup Guide\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/cyu/rack-cors\"\u003erack-cors gem\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"\u003eMDN article on CORS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/codahale/bcrypt-ruby\"\u003eBcrypt gem\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/codahale/bcrypt-ruby/blob/master/lib/bcrypt/password.rb#L23\"\u003eBcrypt::Password source code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Salt_(cryptography)\"\u003eWhat is a Salt in Cryptography\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Cryptographic_hash_function\"\u003eWhat is a Cryptographic Hash Function\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password\"\u003eActiveModel has\u003cem\u003esecure\u003c/em\u003epassword docs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.mozilla.org/webdev/2012/06/08/lets-talk-about-password-storage/\"\u003eMozilla Blog Post on Storing Passwords in a Database\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/rails-api/active_model_serializers\"\u003eActiveModelSerializers gem\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://guides.rubyonrails.org/active_record_validations.html\"\u003eActiveRecord Validations Documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.sitepoint.com/active-model-serializers-rails-and-json-oh-my/\"\u003eSitePoint Article on ActiveModelSerializers in Rails\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.getpostman.com/apps\"\u003ePostman App for making HTTP requests\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://jwt.io/introduction/\"\u003eJWT Documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/jwt/ruby-jwt\"\u003eJWT Ruby Gem on GitHub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.angular-university.io/angular-jwt/\"\u003eJWT in Depth\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://scotch.io/tutorials/the-ins-and-outs-of-token-based-authentication\"\u003eScotch.io: The Ins and Outs of Token Based Authentication\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Authentication\"\u003eAuthentication\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Authorization\"\u003eAuthorization\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://stackoverflow.com/questions/6556522/authentication-versus-authorization\"\u003eAuthentication vs Authorization\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/laserlemon/figaro#getting-started\"\u003eFigaro Gem for hiding secrets in your app\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ruby-doc.org/core-2.2.0/doc/syntax/exceptions_rdoc.html\"\u003eRuby Begin Rescue Documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://httpstatusrappers.com\"\u003eHTTP Status Rappers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\"\u003eMDN Article on HTTP Status Codes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gist.github.com/mlanett/a31c340b132ddefa9cca\"\u003eRails Status Code Symbols Cheat Sheet\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://reactjs.org/\"\u003eReact Documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://redux.js.org/\"\u003eRedux Documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gfcbac6873335e3b1e3f9c0c4eaf6fa95","title":"Layouts and Templates Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-layouts-and-templates-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-layouts-and-templates-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-layouts-and-templates-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-layouts-and-templates-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cp\u003eYour task is to build an online store! Okay, maybe not a whole online store, but\nat least some layouts and controllers for an online store. Not only will you\nlearn how to create a layout and how to get an action to use that layout but\nalso how to override defaults and specify layouts on the action level.\u003c/p\u003e\n\n\u003ch2\u003eThe Default Layout\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eMake a new controller called \u003ccode\u003eStaticController\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a home view with an \u003ccode\u003eh2\u003c/code\u003e that says \"Welcome to Flatiron Widgets\" and a\nnew action in \u003ccode\u003eStaticController\u003c/code\u003e called \u003ccode\u003ehome\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a default application layout at the correct location, and add an \u003ccode\u003eh1\u003c/code\u003e\nto it that says \"Flatiron Widgets Store\". This is for the main site's welcome\nbar.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eCustom Layouts for a Controller\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eCreate a new controller called \u003ccode\u003eStoreAdminController\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe want this controller to use a new layout called \u003ccode\u003eadmin\u003c/code\u003e. This layout\nshould have an \u003ccode\u003eh1\u003c/code\u003e that says \"Flatiron Widgets: Admin\".\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a home view layout for \u003ccode\u003eStoreAdminController\u003c/code\u003e with an \u003ccode\u003eh2\u003c/code\u003e that says\n\"Welcome Flatiron Admin\".\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eGet your newly created action to use the \u003ccode\u003eadmin\u003c/code\u003e template.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eCustom Layouts for an Action\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eCreate a new view for \u003ccode\u003eStoreAdminController\u003c/code\u003e called \u003ccode\u003eorders\u003c/code\u003e with an \u003ccode\u003eh2\u003c/code\u003e that\nsays \"Welcome to Flatiron Open Orders\". Also add an \u003ccode\u003eol\u003c/code\u003e with a few \u003ccode\u003eli\u003c/code\u003e\nelements containing fake orders.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eNow you should create a new layout called \u003ccode\u003eorder_administration\u003c/code\u003e and add an\n\u003ccode\u003eh1\u003c/code\u003e that says \"Flatiron Widgets: Open Orders\".\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAt this point, the \u003ccode\u003estore_admin#orders\u003c/code\u003e action will use the \u003ccode\u003eadmin\u003c/code\u003e layout\nyou defined earlier, but we need it to use the new \u003ccode\u003eorder_administration\u003c/code\u003e\nlayout. The trick is we want only the \u003ccode\u003estore_admin#orders\u003c/code\u003e action to use the\n\u003ccode\u003eorder_administration\u003c/code\u003e layout, and we want to keep the \u003ccode\u003eadmin\u003c/code\u003e layout as the\ndefault for the other actions in \u003ccode\u003eStoreAdminController\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eIgnore Layouts for an Action\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eCreate a new action in \u003ccode\u003eStoreAdminController\u003c/code\u003e called \u003ccode\u003einvoice\u003c/code\u003e, and insert an\n\u003ccode\u003eh1\u003c/code\u003e that says \"Your Invoice\".\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThis action is assigned the default layout for the controller, \u003ccode\u003eadmin\u003c/code\u003e, but\nwe don't want it to use any layout at all (while also not affecting the layouts\nassigned to other actions in the controller).\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gf19dc7fe25c5d7d3eecd2b4688a3a574","title":"Map Dispatch to Props Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"map-dispatch-to-props-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/map-dispatch-to-props-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-dispatch-to-props-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-dispatch-to-props-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cp\u003eUse the \u003cstrong\u003eReact Redux\u003c/strong\u003e library to connect the store to the \u003cstrong\u003eReact\u003c/strong\u003e\napplication.   Utilize the \u003cstrong\u003eProvider\u003c/strong\u003e component, and the \u003cstrong\u003econnect()\u003c/strong\u003e\nfunction in the process. Make sure to also implement \u003cstrong\u003emapDispatchToProps()\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this application we will be building an application to keep track of our\nfavorite restaurants. We will keep our \u003cstrong\u003eReact\u003c/strong\u003e application separated from our\n\u003cstrong\u003eRedux\u003c/strong\u003e application by using the \u003cstrong\u003eProvider\u003c/strong\u003e component and the \u003cstrong\u003econnect()\u003c/strong\u003e\nfunction. We will not include a reference to the store in any component except\nfor the \u003cstrong\u003eProvider\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eRedux is already set up through \u003ccode\u003eindex.js\u003c/code\u003e and the reducer \u003ccode\u003emanageRestaurants\u003c/code\u003e.\nWrite a \u003cstrong\u003emapDispatchToProps()\u003c/strong\u003e function that allows us to pass dispatched\nactions as props.\u003c/p\u003e\n\n\u003cp\u003eRemember that \u003cstrong\u003emapDispatchToProps()\u003c/strong\u003e is provided \u003ccode\u003edispatch\u003c/code\u003e as an argument\n(passed in by \u003ccode\u003econnect\u003c/code\u003e when called), so we can wrap an imported action with\n\u003ccode\u003edispatch\u003c/code\u003e within \u003cstrong\u003emapDispatchToProps()\u003c/strong\u003e. Don't forget that the action\nprovided in \u003ccode\u003eactions/restaurants.js\u003c/code\u003e is a function that \u003cem\u003emust be called\u003c/em\u003e in\norder to return the action object.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gbd9bdcb69f4e2dad0b39443b1a8a7697","title":"Mapping Dispatch to Props","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"map-dispatch-to-props-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/map-dispatch-to-props-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-dispatch-to-props-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-dispatch-to-props-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eWrite functions that connect Redux actions to component events\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eIntroduction\u003c/h3\u003e  \u003cp\u003eIn the last lessons, we learned that \u003ccode\u003emapStateToProps()\u003c/code\u003e separates concerns. We no longer have to reference the store inside our component when retrieving the state. We are moving towards having state management in one part of our code, and display logic in a different part.\u003c/p\u003e  \u003cp\u003eIn other words, we're moving knowledge of \u003cem\u003eRedux\u003c/em\u003e outside our components.\u003c/p\u003e  \u003cp\u003eWhat prevented us from fully removing a reference to \u003cstrong\u003eRedux\u003c/strong\u003e inside our components was that we did not know how to dispatch actions without calling \u003ccode\u003estore.dispatch()\u003c/code\u003e from our component.  Well, in this lesson we'll learn how to do just that. We'll remove knowledge of the store from our components by using a function similar to \u003ccode\u003emapStateToProps()\u003c/code\u003e, which is called \u003ccode\u003emapDispatchToProps()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eIdentifying the Problem\u003c/h2\u003e  \u003cp\u003eTo begin, take a look at the starting code provided in \u003ccode\u003esrc/App.js\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport './App.css';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003eimport { addItem } from  './actions/items';\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  handleOnClick() {\u003cbr\u003e    this.props.store.dispatch(addItem());\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={(event) =\u0026gt; this.handleOnClick(event)}\u0026gt;\u003cbr\u003e          Click\u003cbr\u003e          \u0026lt;/button\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;{this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    items: state.items\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can see that \u003ccode\u003emapStateToProps()\u003c/code\u003e is already implemented and is making \u003ccode\u003estate.items\u003c/code\u003e available to \u003ccode\u003eApp\u003c/code\u003e as \u003ccode\u003ethis.props.items\u003c/code\u003e. We also see that the button in \u003ccode\u003erender()\u003c/code\u003e calls \u003ccode\u003ehandleOnClick()\u003c/code\u003e when clicked. The \u003ccode\u003ehandleOnClick()\u003c/code\u003e does one thing - it dispatches an action  to the \u003cem\u003estore\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003eIn the earlier \u003ccode\u003emapStateToProps()\u003c/code\u003e Readme, we changed our code such that we no longer reference the store to get an updated state of the items, but here we still reference the store in \u003ccode\u003ehandleOnClick()\u003c/code\u003e to dispatch an action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/app.js ...\u003cbr\u003e\u003cbr\u003ehandleOnClick(){\u003cbr\u003e  this.props.store.dispatch(addItem())\u003cbr\u003e}\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOkay, so this may seem small, but it introduces our old problem. Our component is no longer indifferent about its state management system. Instead, this line of code makes the component reliant on \u003cstrong\u003eRedux\u003c/strong\u003e.  \u003c/p\u003e  \u003cp\u003eWell we can fix this problem with our \u003ccode\u003econnect()\u003c/code\u003e function. Just like we can write code like \u003ccode\u003econnect(mapStateToProps)(App)\u003c/code\u003e to add new props to our \u003cstrong\u003eApp\u003c/strong\u003e component, we can pass \u003ccode\u003econnect()\u003c/code\u003e a second argument, and add our \u003cem\u003eaction creator\u003c/em\u003e as props. Then we can reference this action creator as a prop to call it from our component. We'll spend the rest of this lesson unpacking the previous sentence. Okay, let's see how this works.\u003c/p\u003e  \u003ch4\u003eUsing \u003ccode\u003emapDispatchToProps\u003c/code\u003e\n\u003c/h4\u003e  \u003cp\u003eTo quickly review: The first argument passed into \u003ccode\u003econnect()\u003c/code\u003e is a function. That function is written to accept the Redux store's state as an argument and returns an object created using all or some of that state. Key/value pairs in this returned object will become values we can access in the component we've wrapped with \u003ccode\u003econnect()\u003c/code\u003e. The below example, for instance, would make the entire state available as a prop:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return state\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe call this function \u003ccode\u003emapStateToProps\u003c/code\u003e because that is what it does. This function is passed in as the \u003cem\u003efirst\u003c/em\u003e argument to \u003ccode\u003econnect()\u003c/code\u003e. When \u003ccode\u003econnect()\u003c/code\u003e executes, it calls the function passed in as its first argument, passing in the current state to the function.\u003c/p\u003e  \u003cp\u003eJust like the first argument, \u003ccode\u003econnect()\u003c/code\u003e accepts a \u003cstrong\u003efunction\u003c/strong\u003e for the \u003cem\u003esecond\u003c/em\u003e argument. This time, again, when \u003ccode\u003econnect()\u003c/code\u003e executes, it calls the second function passed in. However, instead of passing \u003cem\u003estate\u003c/em\u003e in, it passes in the \u003cem\u003edispatch\u003c/em\u003e function. This means we can write a function assuming we have access to \u003ccode\u003edispatch()\u003c/code\u003e. We call it \u003ccode\u003emapDispatchToProps\u003c/code\u003e because that is what it does. Updating our \u003ccode\u003e./src/App.js\u003c/code\u003e file, it looks like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/App.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport './App.css';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003eimport { addItem } from  './actions/items';\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  handleOnClick = event =\u0026gt; {\u003cbr\u003e    this.props.addItem() // Code change: this.props.store.dispatch is no longer being called\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={this.handleOnClick}\u0026gt;\u003cbr\u003e          Click\u003cbr\u003e          \u0026lt;/button\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;{this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    items: state.items\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e// Code change: this new function takes in dispatch as an argument\u003cbr\u003e// It then returns an object that contains a function as a value!\u003cbr\u003e// Notice above in handleOnClick() that this function, addItem(),\u003cbr\u003e// is what is called, NOT the addItem action creator itself.\u003cbr\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    addItem: () =\u0026gt; {\u003cbr\u003e      dispatch(addItem())\u003cbr\u003e    }\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps, mapDispatchToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOkay, so let's see what adding our \u003ccode\u003emapDispatchToProps()\u003c/code\u003e function, and passing it through as a second argument accomplished. We'll place in another debugger in our component, right at the beginning of \u003ccode\u003erender()\u003c/code\u003e, just before the return statement. \u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// src/App.js ...\u003cbr\u003erender() {\u003cbr\u003e    debugger\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={this.handleOnClick}\u0026gt;\u003cbr\u003e          Click\u003cbr\u003e          \u0026lt;/button\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;{this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  } ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, boot up the app, open up your console and when you hit the debugger statement, type in \u003ccode\u003ethis.props.addItem\u003c/code\u003e. You'll see that it returns a function with dispatch inside. So, just like with \u003ccode\u003emapStateToProps()\u003c/code\u003e, we added a prop that pointed to a value, here we add a prop \u003ccode\u003eaddItem\u003c/code\u003e that points to the value, a function. The \u003ccode\u003edispatch\u003c/code\u003e function is available as an argument to \u003ccode\u003emapDispatchToProps\u003c/code\u003e. By defining the function \u003ccode\u003eaddItem\u003c/code\u003e inside \u003ccode\u003emapDispatchToProps\u003c/code\u003e, we're able to include \u003ccode\u003edispatch\u003c/code\u003e in the definition; we've bundled everything we need into a single prop value.\u003c/p\u003e  \u003cp\u003eWith \u003ccode\u003edispatch\u003c/code\u003e integrated into \u003ccode\u003ethis.props.addItem\u003c/code\u003e, we can change our code such that when the \u003ccode\u003ehandleOnClick()\u003c/code\u003e function gets called, we execute our action creator by referencing it as a prop:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003ehandleOnClick = event =\u0026gt; {\u003cbr\u003e  this.props.addItem()\u003cbr\u003e}\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis code calls the \u003ccode\u003ehandleOnClick()\u003c/code\u003e function after the button is clicked. The \u003ccode\u003ehandleOnClick()\u003c/code\u003e references and then executes the \u003ccode\u003eaddItem()\u003c/code\u003e function by calling \u003ccode\u003ethis.props.addItem()\u003c/code\u003e.  \u003c/p\u003e  \u003ch2\u003eAlternative Method\u003c/h2\u003e  \u003cp\u003eThere is an even simpler way to approach bundling our actions and \u003ccode\u003edispatch\u003c/code\u003e into props. The second argument of \u003ccode\u003econnect\u003c/code\u003e will accept a function (as we've seen) \u003cem\u003eor\u003c/em\u003e an object. If we pass in a function, \u003ccode\u003emapDispatchToProps()\u003c/code\u003e, we must incorporate \u003ccode\u003edispatch\u003c/code\u003e as with the previous example. If we pass in an object, \u003ccode\u003econnect\u003c/code\u003e handles this step for us! The object just needs to contain key/value pairs for each action creator we want to become props. In our example, we've using the \u003ccode\u003eaddItem\u003c/code\u003e action creator, so the object would look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  addItem: addItem\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs of JavaScript ES6, when we have an object with a key and value with the same name, we can use the shorthand syntax and write:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  addItem\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is all we need to pass in as a second argument for \u003ccode\u003econnect()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eApp\u003c/code\u003e then changes to look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eimport React, { Component } from 'react';\u003cbr\u003eimport './App.css';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003eimport { addItem } from  './actions/items';\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  handleOnClick = event =\u0026gt; {\u003cbr\u003e    this.props.addItem()\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    debugger\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={this.handleOnClick}\u0026gt;\u003cbr\u003e          Click\u003cbr\u003e          \u0026lt;/button\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;{this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    items: state.items\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps, { addItem })(App); // Code change: no mapDispatchToProps function required! \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eAside\u003c/strong\u003e: We \u003cem\u003ecould\u003c/em\u003e go further and get rid of \u003ccode\u003emapStateToProps()\u003c/code\u003e as well. We still need to pass in a function as the first argument, but it can be an anonymous arrow function that handles everything in one line:\u003c/p\u003e \u003c/blockquote\u003e \u003cpre\u003e\u003ccode\u003eexport default connect(state =\u0026gt; ({ items: state.items }), { addItem })(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is equivalent to writing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mapStateToProps = state =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    items: state.items\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapDispatchToProps = dispatch =\u0026gt; {\u003cbr\u003e  return {\u003cbr\u003e    addItem: () =\u0026gt; { dispatch(addItem()) }\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps, mapDispatchToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDefault Dispatch Behavior\u003c/h2\u003e  \u003cp\u003eIn addition to this, as per Dan Abramov, the creator of \u003cstrong\u003eRedux\u003c/strong\u003e:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eBy default mapDispatchToProps is just dispatch =\u0026gt; ({ dispatch }). So if you don't specify the second argument to connect(), you'll get dispatch injected as a prop in your component.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eThis means that if we were to simply write:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport default connect(state =\u0026gt; ({ items: state.items }))(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e...we would \u003cem\u003estill\u003c/em\u003e have \u003ccode\u003ethis.props.dispatch()\u003c/code\u003e available to us in App. If you would rather write \u003ccode\u003ethis.props.dispatch({ type: 'INCREASE_COUNT' })\u003c/code\u003e in App, or pass \u003ccode\u003edispatch\u003c/code\u003e down to children, you can!\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://stackoverflow.com/questions/34458261/how-to-get-simple-dispatch-from-this-props-using-connect-w-redux\"\u003eDan Abramov Stack Overflow Response about mapDispatchToProps\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eIn this lesson, we saw that we can remove all references to our store from our component via the \u003ccode\u003emapDispatchToProps()\u003c/code\u003e function. We saw that \u003ccode\u003emapDispatchToProps()\u003c/code\u003e allows us to bring in actions, combine them with \u003ccode\u003edispatch\u003c/code\u003e and connect events on our page to actions in our store.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g33e59328747e2d1ef2a3927098470ee8","title":"Mapping State to Props Using React and Redux","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"map-state-to-props-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/map-state-to-props-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-state-to-props-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-state-to-props-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eUse the \u003cstrong\u003eReact Redux\u003c/strong\u003e library to connect the store to the \u003cstrong\u003eReact\u003c/strong\u003e application.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eUtilize the \u003ccode\u003e\u0026lt;Provider /\u0026gt;\u003c/code\u003e component, the \u003ccode\u003econnect\u003c/code\u003e function and \u003ccode\u003emapStateToProps\u003c/code\u003e to access \u003cstrong\u003eRedux\u003c/strong\u003e store content.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eIn this lesson, we want to explore how \u003ccode\u003emapStateToProps\u003c/code\u003e is used to connect regular React components with the \u003cstrong\u003eRedux\u003c/strong\u003e store. This is also a good opportunity to review the steps for using the \u003ccode\u003eredux\u003c/code\u003e and \u003ccode\u003ereact-redux\u003c/code\u003e packages in your app.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003cp\u003eSome files are provided, including \u003ccode\u003eUserInput\u003c/code\u003e and the reducer, \u003ccode\u003emanageUsers\u003c/code\u003e, but the \u003cstrong\u003eRedux\u003c/strong\u003e store isn't fully hooked up yet.\u003c/p\u003e  \u003ch4\u003eConnecting to Redux\u003c/h4\u003e  \u003cp\u003eIn \u003ccode\u003esrc/index.js\u003c/code\u003e, use the \u003ccode\u003ecreateStore\u003c/code\u003e method from \u003ccode\u003eredux\u003c/code\u003e, passing in the  provided reducer, \u003ccode\u003emanageUsers\u003c/code\u003e, to create a \u003ccode\u003estore\u003c/code\u003e. Use \u003ccode\u003eProvider\u003c/code\u003e from  \u003ccode\u003ereact-redux\u003c/code\u003e to wrap \u003ccode\u003e\u0026lt;App /\u0026gt;\u003c/code\u003e, passing \u003ccode\u003estore\u003c/code\u003e as a prop to the \u003ccode\u003eProvider\u003c/code\u003e.  This will give your components access to the store.\u003c/p\u003e  \u003ch4\u003eTest by Dispatching an Action\u003c/h4\u003e  \u003cp\u003eRun \u003ccode\u003enpm start\u003c/code\u003e and open up your browser's dev console. If everything is connected correctly in \u003ccode\u003eindex.js\u003c/code\u003e, a form should appear in the browser. Submitting something using the form will cause a \u003ccode\u003econsole.log\u003c/code\u003e to fire in our reducer, indicating that the values have been added to our store.\u003c/p\u003e  \u003cp\u003eIn \u003ccode\u003eUserInput.js\u003c/code\u003e, we can see the code that fires when we press the submit button:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e...\u003cbr\u003e\u003cbr\u003ehandleOnSubmit = (event) =\u0026gt; {\u003cbr\u003e  event.preventDefault();\u003cbr\u003e  this.props.dispatch({type: 'ADD_USER', user: this.state})\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003erender() {\u003cbr\u003e  return(\u003cbr\u003e    \u0026lt;form onSubmit={this.handleOnSubmit}\u0026gt;\u003cbr\u003e      ...\u003cbr\u003e    \u0026lt;/form\u0026gt;\u003cbr\u003e  )\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can see that, \u003cem\u003eon submit\u003c/em\u003e, \u003ccode\u003ehandleOnSubmit()\u003c/code\u003e is called. \u003ccode\u003eevent.preventDefault()\u003c/code\u003e is called to stop the page from refreshing, then \u003ccode\u003ethis.props.dispatch()\u003c/code\u003e is called with a custom action, \u003ccode\u003e{type: 'ADD_USER', user: this.state}\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport default connect()(UserInput); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWrapping a component in \u003ccode\u003econnect\u003c/code\u003e as we see above will, by default, pass \u003cem\u003eone\u003c/em\u003e function to props: \u003ccode\u003edispatch()\u003c/code\u003e. This makes it possible for us to dispatch custom actions, as we see here in \u003ccode\u003ehandleOnSubmit()\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe will go into greater detail on how we can customize our dispatches using \u003ccode\u003econnect\u003c/code\u003e, but using \u003ccode\u003ethis.props.dispatch()\u003c/code\u003e like this is a handy way to allow any component to interact with the store.\u003c/p\u003e  \u003ch4\u003eMapping State\u003c/h4\u003e  \u003cp\u003eNow that we've got a working store, we want to get access to it and display the contents of our store's state.\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eConnect the Users component similar to how it is connected in UserInput.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eWrite a function in \u003ccode\u003eUsers.js\u003c/code\u003e, but outside of the Users class, called \u003ccode\u003emapStateToProps\u003c/code\u003e. \u003ccode\u003emapStateToProps\u003c/code\u003e accepts one argument, \u003ccode\u003estate\u003c/code\u003e, the current version of your store's state. Use \u003ccode\u003estate\u003c/code\u003e to access the array of \u003ccode\u003eusers\u003c/code\u003e. Your \u003ccode\u003emapStateToProps\u003c/code\u003e function should return an object with keys. Each key will become a prop in your component, allowing you to assign values based on the provided \u003ccode\u003estate\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eThe Users component should display the username of a user submitted to the store. To pass the final test, it should also display a total count of current users. Try to use \u003ccode\u003emapStateToProps\u003c/code\u003e to solve both, returning two keys, one for \u003ccode\u003eusers\u003c/code\u003e and one for the \u003ccode\u003euserCount\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWith all tests passing, you should have a working form that adds and successfully displays usernames, as well as a total count of those users. While these are small bits of data, we've got a fully integrated React/Redux application, ready to be expanded upon!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g5fbcaf243f246fd358dab13164bedce4","title":"Map State to Props","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"map-state-to-props-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/map-state-to-props-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-state-to-props-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/map-state-to-props-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eWhen we last left off, we successfully used our \u003cstrong\u003ecreateStore()\u003c/strong\u003e method, and integrated the method into our \u003cstrong\u003eReact\u003c/strong\u003e application to update our state. Unfortunately, our \u003cstrong\u003eReact\u003c/strong\u003e application did not re-render in response to changes in the state. In this lesson, we'll fix that.\u003c/p\u003e  \u003ch2\u003eUse the Provider component from React Redux\u003c/h2\u003e  \u003cp\u003eThe reason why the application did not re-render previously is because our \u003cstrong\u003eReact\u003c/strong\u003e and \u003cstrong\u003eRedux\u003c/strong\u003e libraries could not properly communicate to each other correctly to specify that a change in the store's state occurred. Luckily, we can use the \u003cstrong\u003eReact Redux\u003c/strong\u003e library to get React and Redux talking to one another. Run \u003ccode\u003enpm install react-redux --save\u003c/code\u003e to install it and add to our \u003ccode\u003epackage.json\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThe \u003cstrong\u003eReact Redux\u003c/strong\u003e library gives access to a component called the \u003cstrong\u003eProvider\u003c/strong\u003e. The \u003cstrong\u003eProvider\u003c/strong\u003e is a component that comes from our \u003cstrong\u003eReact Redux\u003c/strong\u003e library. It wraps around our \u003cstrong\u003eApp\u003c/strong\u003e component. It does two things for us. The first is that it will alert our \u003cstrong\u003eRedux\u003c/strong\u003e app when there has been a change in state, and this will re-render our \u003cstrong\u003eReact\u003c/strong\u003e app. Let's give it a shot.\u003c/p\u003e  \u003cp\u003eLet's add the following code to our \u003ccode\u003esrc/index.js\u003c/code\u003e file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/index.js\u003cbr\u003e\u003cbr\u003eimport React from 'react';\u003cbr\u003eimport ReactDOM from 'react-dom';\u003cbr\u003eimport { createStore } from 'redux';\u003cbr\u003eimport { Provider } from 'react-redux'; /* code change */\u003cbr\u003eimport shoppingListItemReducer from './reducers/shoppingListItemReducer';\u003cbr\u003eimport App from './App';\u003cbr\u003eimport './index.css';\u003cbr\u003e\u003cbr\u003econst store = createStore(\u003cbr\u003e  shoppingListItemReducer,\u003cbr\u003e  window.__REDUX_DEVTOOLS_EXTENSION__ \u0026amp;\u0026amp; window.__REDUX_DEVTOOLS_EXTENSION__()\u003cbr\u003e);\u003cbr\u003e\u003cbr\u003eReactDOM.render(\u003cbr\u003e  \u0026lt;Provider store={store}\u0026gt;\u003cbr\u003e    \u0026lt;App /\u0026gt;\u003cbr\u003e  \u0026lt;/Provider\u0026gt;, /* code change */\u003cbr\u003e  document.getElementById('root')\u003cbr\u003e); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe just did a few things here:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eWe imported \u003ccode\u003eProvider\u003c/code\u003e from React Redux\u003c/li\u003e \u003cli\u003eWe used \u003ccode\u003eProvider\u003c/code\u003e to wrap our React application\u003c/li\u003e \u003cli\u003eWe passed our store instance into \u003ccode\u003eProvider\u003c/code\u003e as a prop, making it available to all of our other components.\u003c/li\u003e \u003c/ul\u003e  \u003ch3\u003eStep 2: Connecting The Container Component to Store\u003c/h3\u003e  \u003cp\u003eUsing the \u003ccode\u003e\u0026lt;Provider\u0026gt;\u003c/code\u003e component provided by the \u003cstrong\u003eReact Redux\u003c/strong\u003e library, we gave our components \u003cem\u003ethe ability to be connected to the store\u003c/em\u003e. However, we don't want every component re-rendering in response to every change in the state. So the \u003cstrong\u003eReact Redux\u003c/strong\u003e library requires us to specify which changes to the store's state should prompt a re-render of the application. We will specify this with the \u003cstrong\u003econnect()\u003c/strong\u003e function.\u003c/p\u003e  \u003ch4\u003eUsing the \u003ccode\u003econnect()\u003c/code\u003e function\u003c/h4\u003e  \u003cp\u003eFor a component to be connected to the store, i.e. to be able to get data from the store's internal state and to be told to re-render and get new data when that state changes, we will use the \u003cstrong\u003econnect()\u003c/strong\u003e function made available to us by React Redux.\u003c/p\u003e  \u003cp\u003eHere's how it works:\u003c/p\u003e  \u003cp\u003eOpen up \u003ccode\u003e./src/App.js\u003c/code\u003e and add the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux'; /* code change */\u003cbr\u003eimport './App.css';\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  handleOnClick() {\u003cbr\u003e    this.props.dispatch({\u003cbr\u003e      type: 'INCREASE_COUNT',\u003cbr\u003e    });\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e        \u0026lt;button onClick={() =\u0026gt; this.handleOnClick()}\u0026gt;\u003cbr\u003e          Click\u003cbr\u003e        \u0026lt;/button\u0026gt;\u003cbr\u003e        \u0026lt;p\u0026gt;{this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003e// start of code change\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return { items: state.items };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(App);\u003cbr\u003e// end of code change \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHoly cow those last few lines are confusing. Let's see if we can understand them. Remember, that we have two goals here: (a) to only re-render our \u003cstrong\u003eApp\u003c/strong\u003e component when specific changes to the state occur, and (b) to only provide the slice of the state that we need to our \u003cstrong\u003eApp\u003c/strong\u003e component. So we will need (1) a function that listens to every change in the store and then (2) filters out the changes relevant to a particular component to (3) provide to that component. That's exactly what's happening here. In the next paragraph, let's go through what is doing what.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport default connect(mapStateToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe connect function is taking care of task 1, it is synced up to our store, listening to each change in the state that occurs. When a change occurs, it calls a function \u003cem\u003ethat we write\u003c/em\u003e called \u003cstrong\u003emapStateToProps()\u003c/strong\u003e, and in \u003cstrong\u003emapStateToProps()\u003c/strong\u003e we specify exactly which slice of the state we want to provide to our component. Here, we want to provide \u003ccode\u003estate.items\u003c/code\u003e, and allow our component to have access to them through a prop called items. So that completes task 2. Then we have to say which component in our application we are providing this data to: you can see that we write \u003ccode\u003econnect(mapStateToProps)(App)\u003c/code\u003e to specify that we are connecting this state to the \u003cstrong\u003eApp\u003c/strong\u003e component.   Finally this entire \u003cstrong\u003econnect()\u003c/strong\u003e method returns a new component, it looks like the \u003cstrong\u003eApp\u003c/strong\u003e component we wrote, but now it also receives the correct data. This is the component we wish to export. So at the bottom of the file, you see:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return { items: state.items };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e We didn't have to import anything to define a \u003cstrong\u003emapStateToProps()\u003c/strong\u003e function! We wrote that function ourselves.\u003c/p\u003e  \u003cp\u003eFinally, in our \u003cstrong\u003emapStateToProps()\u003c/strong\u003e function we are saying that we are providing a new prop called items, so in our \u003cstrong\u003eApp\u003c/strong\u003e component, that is the prop we want to reference.\u003c/p\u003e  \u003cp\u003eOk, \u003cstrong\u003emapStateToProps()\u003c/strong\u003e and \u003cstrong\u003econnect()\u003c/strong\u003e is very confusing, so we'll go dig through it some more.  But for now, let's boot up our application, click the button, and see if we can finally get our application to render. Ok, it works - our component now properly re-renders!\u003c/p\u003e  \u003ch4\u003eA Note on \u003ccode\u003edispatch\u003c/code\u003e\n\u003c/h4\u003e  \u003cp\u003eIn the example code for App, you may have noticed something odd:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  handleOnClick() {\u003cbr\u003e    this.props.dispatch({\u003cbr\u003e      type: 'INCREASE_COUNT',\u003cbr\u003e    });\u003cbr\u003e  } \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe have a prop named dispatch! But where did it come from if it's a prop? We  will go into greater detail later, but \u003ccode\u003edispatch\u003c/code\u003e is automatically provided by \u003ccode\u003econnect\u003c/code\u003e if it is missing a \u003cem\u003esecond\u003c/em\u003e argument. That second argument is reserved for \u003ccode\u003emapDispatchToProps\u003c/code\u003e, which allows us to customize how we send actions to our reducer. Without the second argument we will still be able to use \u003ccode\u003edispatch\u003c/code\u003e on any component wrapped with \u003ccode\u003econnect\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eWe learned of two new pieces of \u003cstrong\u003eReact Redux\u003c/strong\u003e middleware: \u003cstrong\u003econnect()\u003c/strong\u003e and \u003cstrong\u003eProvider\u003c/strong\u003e.  The two pieces work hand in hand. \u003cstrong\u003eProvider\u003c/strong\u003e ensures that our entire React application can potentially access data from the store. Then \u003cstrong\u003econnect()\u003c/strong\u003e, allows us to specify which data we are listening to (through mapStateToProps), and which component we are providing the data. So when you see lines like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return { items: state.items };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003econnect(mapStateToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat is saying connect the data in \u003cstrong\u003emapStateToProps()\u003c/strong\u003e (the items portion of the state) to the \u003cstrong\u003eApp\u003c/strong\u003e component. And the \u003cstrong\u003eApp\u003c/strong\u003e component can access that state with \u003ccode\u003ethis.props.items\u003c/code\u003e. Don't fret if you still feel hazy on \u003cstrong\u003econnect()\u003c/strong\u003e and \u003cstrong\u003emapStateToProps()\u003c/strong\u003e. This is a new middleware api that takes time to learn. We won't introduce any new material in the next code along, we'll just try to deepen our understanding of the material covered in this section. First, please take at least a 15 minute break before moving on.  \u003c/p\u003e  \u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/map-state-to-props-readme\"\u003eMap State To Props Readme\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g2acafb376b69fe9b565c7835714597e7","title":"Map State to Props Continued","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"review-map-state-to-props-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/review-map-state-to-props-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/review-map-state-to-props-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/review-map-state-to-props-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWhen we last left off, we successfully used our \u003cstrong\u003ecreateStore()\u003c/strong\u003e method, and were able have our application re-render through the rather confusing \u003ccode\u003econnect()\u003c/code\u003e method and \u003cstrong\u003eProvider\u003c/strong\u003e component. Whenever something in JavaScript is confusing, it is generally helpful to place some debuggers in the code and poke around. In this lesson we will guide you through that, and giving you a for your eyes only peak at the sordid underworld of \u003ccode\u003econnect()\u003c/code\u003e and \u003ccode\u003emapStateToProps()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eGet situated with the codebase changes\u003c/h2\u003e  \u003cp\u003eNow, we made some changes to the codebase, mainly to help this walkthrough a little easier to digest.  If you open up the file \u003ccode\u003eshoppingListItemReducer\u003c/code\u003e the first thing you'll see is that we added a new branch to our case statement. Our reducer now responds to the action types 'GET\u003cem\u003eCOUNT\u003c/em\u003eOF\u003cem\u003eITEMS', and 'GET\u003c/em\u003eCOUNT\u003cem\u003eOF\u003c/em\u003eUSERS'.  We did this to make our state slightly more complex. You'll notice at the top of our \u003cstrong\u003eshoppingListItemReducer\u003c/strong\u003e that we added a new key to our initial state called users, and populated it with an initial string to represent a user. You can also see that we removed the calls to console.log in the reducer, as we already have \u003cstrong\u003eRedux Devtools\u003c/strong\u003e setup.  \u003c/p\u003e  \u003cp\u003eThe next set of changes comes in the \u003ccode\u003e./src/App.js\u003c/code\u003e where you can see that we now have added a new button labeled click to change users. It does the same thing as our other button, but this time calls a callback which dispatches an action to change the part of the state related to users, instead of that related to items.\u003c/p\u003e  \u003cp\u003eAt the bottom of the file, inside the \u003ccode\u003emapStateToProps()\u003c/code\u003e function you can see we placed a debugger. Ok, now that you're a little better situated, let's start our exploration.\u003c/p\u003e  \u003ch2\u003eDeeper explanation of mapStateToProps\u003c/h2\u003e  \u003cp\u003eRemember that we encounter mapStateToProps when using the connect function.   In the current codebase, we have the code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003e\u003cbr\u003econnect(mapStateToProps)(App) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eMeaning that we want to connect our \u003cstrong\u003eApp\u003c/strong\u003e component to a slice of the store's state specified in \u003ccode\u003emapStateToProps()\u003c/code\u003e. Currently our \u003ccode\u003emapStateToProps()\u003c/code\u003e looks like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003e\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  debugger;\u003cbr\u003e  return { items: state.items }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYes, we added a debugger to the body of our \u003ccode\u003emapStateToProps()\u003c/code\u003e function. So now boot up the app and click on the two buttons. You will see that clicking on the Items Count button renders an update to our \u003cstrong\u003eApp\u003c/strong\u003e Component, while clicking on the Users Count button does not. This makes sense: inside our App component all we do is reference the items count.  \u003c/p\u003e  \u003cp\u003eOk, now let's open up our console so that we hit our debugger. If you click on each of the buttons, you'll see that our debugger gets hit with each action that we dispatch. So even though we are not updating our \u003cstrong\u003eApp\u003c/strong\u003e component with information about users, the \u003ccode\u003emapStateToProps()\u003c/code\u003e function is executed with each change to the store's state. That's an important point. Say it with me one more time: the \u003ccode\u003emapStateToProps()\u003c/code\u003e method is executed with each change to the store's state.\u003c/p\u003e  \u003cp\u003eOk, now the next time we are in the debugger, let's notice that if you type the word state into the console while inside the \u003ccode\u003emapStateToProps()\u003c/code\u003e method, that it is the entire state of the store and not just that relevant to the component.\u003c/p\u003e  \u003cp\u003eNext question: what is so special about this \u003ccode\u003emapStateToProps()\u003c/code\u003e method that it is executed each time there is a change in state, and receives the entire state of the store as its argument? Let's change our code to the following in \u003ccode\u003esrc/App.js\u003c/code\u003e\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003e\u003cbr\u003econst vanilla = (milkshake) =\u0026gt; {\u003cbr\u003e  debugger;\u003cbr\u003e  return { items: milkshake.items }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(vanilla)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eEssentially, all we did was rename our \u003ccode\u003emapStateToProps()\u003c/code\u003e function to \u003cstrong\u003evanilla()\u003c/strong\u003e, and rename the argument \u003ccode\u003estate\u003c/code\u003e to \u003ccode\u003emilkshake\u003c/code\u003e. Refresh the app, click the button, and notice that no functionality changes: the vanilla function now is hit every time there is a change in state, and milkshake now represents our store's state. So in other words, whatever function we pass to the \u003ccode\u003econnect()\u003c/code\u003e function will be called each time the state changes, and the first argument to that function, whatever its name, will be the state of the store.  \u003c/p\u003e  \u003cp\u003eWe can even shorten \u003ccode\u003emapStateToProps()\u003c/code\u003e down to an anonymous arrow function and pass it directly into \u003ccode\u003econnect()\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eexport default connect( state =\u0026gt; ({ items: state.items }) )(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you've got a complicated amount of state you're mapping to props, stick with the original set up.\u003c/p\u003e  \u003ch2\u003eDeeper understanding of props\u003c/h2\u003e  \u003cp\u003eSo in the previous section we saw that whatever function we pass to \u003ccode\u003econnect()\u003c/code\u003e is executed each time there is a change in state, and that the argument that function is executed with is the entire state of the store. Changing the function back to \u003ccode\u003emapStateToProps()\u003c/code\u003e, let's pay special attention to the return value to that function:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return { items: state.items }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis return value, is the value of the props that are added to the App component.  Let's see what happens if we change the key in the return value from items to orangePeel.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return { orangePeel: state.items }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's also place a debugger inside of our App component, as the first line underneath the render function, this way we can examine the props of our app component.  \u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003e\u003cbr\u003erender() {\u003cbr\u003e  debugger;\u003cbr\u003e  return (\u003cbr\u003e    \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; this.handleOnClickItems()}\u0026gt;\u003cbr\u003e        Click to change items count\u003cbr\u003e      \u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;button onClick={() =\u0026gt; this.handleOnClickUsers()}\u0026gt;\u003cbr\u003e        Click to change user count\u003cbr\u003e      \u0026lt;/button\u0026gt;\u003cbr\u003e      \u0026lt;p\u0026gt; {this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e    \u0026lt;/div\u0026gt;\u003cbr\u003e  );\u003cbr\u003e}\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you type in \u003ccode\u003ethis.props\u003c/code\u003e while inside the render function, you will see that we now have this.props.orangePeel, which returns our array of numbers. So by changing the key to the return value in \u003ccode\u003emapStateToProps()\u003c/code\u003e we changed the name of the prop in \u003cstrong\u003eApp\u003c/strong\u003e. As a second step, let's change the value to orangePeel as well:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003e\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return { orangePeel: ['a', 'b', 'c'] };\u003cbr\u003e}; ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eKeeping our debugger in our \u003cstrong\u003eApp\u003c/strong\u003e component's render function, you can see that \u003ccode\u003ethis.props.orangePeel\u003c/code\u003e now returns \u003ccode\u003e['a', 'b', 'c']\u003c/code\u003e. So now when we see the following code, perhaps we understand it a little better.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js ...\u003cbr\u003e\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  return { items: state.items }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(App); \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe understand that the \u003ccode\u003econnect()\u003c/code\u003e function calls the \u003ccode\u003emapStateToProps()\u003c/code\u003e function each time there is a change in state, and that \u003ccode\u003emapStateToProps()\u003c/code\u003e receives \u003ccode\u003estate\u003c/code\u003e as its first argument.\u003c/p\u003e  \u003cp\u003eWe also know that \u003ccode\u003emapStateToProps()\u003c/code\u003e can happily ignore the store's state and return whatever it likes. We know that \u003ccode\u003econnect()\u003c/code\u003e takes whatever the return value is of the \u003ccode\u003emapStateToProps()\u003c/code\u003e function and passes it to the component that is in those last set of parentheses (in this case, App).\u003c/p\u003e  \u003cp\u003eBecause we are taking a part of the store's state and porting it to become props of the relevant component, we say that we are mapping it as props to the component, thus the name \u003cem\u003emapStateToProps\u003c/em\u003e.\u003c/p\u003e  \u003ch3\u003emapStateToProps, but Why?\u003c/h3\u003e  \u003cp\u003eBy now, you may be thinking, why would \u003cstrong\u003eRedux\u003c/strong\u003e choose this whole \u003ccode\u003emapStateToProps()\u003c/code\u003e technique. Didn't we live a simpler and happier life when we just passed our store down through each component. Well, maybe, but we do get some benefits by using this pattern. We'll talk more about the benefits of the \u003ccode\u003econnect()\u003c/code\u003e function later, but for now we can discuss the biggest benefit, separation of concerns.\u003c/p\u003e  \u003cp\u003eSeparation of concerns is the big win.  Take a look at the \u003cstrong\u003eApp\u003c/strong\u003e component again:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e// ./src/App.js\u003cbr\u003e\u003cbr\u003eimport React, { Component } from 'react';\u003cbr\u003eimport { connect } from 'react-redux';\u003cbr\u003eimport './App.css';\u003cbr\u003e\u003cbr\u003e\u003cbr\u003eclass App extends Component {\u003cbr\u003e\u003cbr\u003e  handleOnClickItems() {\u003cbr\u003e    this.props.dispatch({\u003cbr\u003e      type: 'GET_COUNT_OF_ITEMS',\u003cbr\u003e    });\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  handleOnClickUsers() {\u003cbr\u003e    this.props.dispatch({\u003cbr\u003e      type: 'GET_COUNT_OF_USERS',\u003cbr\u003e    })\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  render() {\u003cbr\u003e    debugger;\u003cbr\u003e    return (\u003cbr\u003e      \u0026lt;div className=\"App\"\u0026gt;\u003cbr\u003e          \u0026lt;button onClick={() =\u0026gt; this.handleOnClickItems()}\u0026gt;\u003cbr\u003e            Click to change items count\u003cbr\u003e            \u0026lt;/button\u0026gt;\u003cbr\u003e          \u0026lt;button onClick={() =\u0026gt; this.handleOnClickUsers()}\u0026gt;\u003cbr\u003e            Click to change user count\u003cbr\u003e          \u0026lt;/button\u0026gt;\u003cbr\u003e          \u0026lt;p\u0026gt; {this.props.items.length}\u0026lt;/p\u0026gt;\u003cbr\u003e      \u0026lt;/div\u0026gt;\u003cbr\u003e    );\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003econst mapStateToProps = (state) =\u0026gt; {\u003cbr\u003e  // debugger;\u003cbr\u003e  return { items: state.items }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003eexport default connect(mapStateToProps)(App);\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou will notice that if it wasn't for the dispatch method (and in a later lesson we will remove that as well), our component would have no knowledge of our store, and thus no knowledge of anything related to \u003cstrong\u003eRedux\u003c/strong\u003e. This means that if someone wanted to take the component and use a different backend, like say \u003cstrong\u003eFlux\u003c/strong\u003e, it could. It also means that because all of our \u003cstrong\u003eRedux\u003c/strong\u003e is separated, if we wanted to add in changes to our application to be mobile by using \u003cstrong\u003eReact Native\u003c/strong\u003e. Then our \u003cstrong\u003eRedux\u003c/strong\u003e logic would largely stay the same. So with this pattern, both the view and its state management system are properly separated, and only connected by that \u003ccode\u003econnect()\u003c/code\u003e function.  \u003c/p\u003e  \u003ch3\u003eSummary\u003c/h3\u003e  \u003cp\u003eIn this lesson we saw that the \u003ccode\u003econnect()\u003c/code\u003e function is used for us to connect our \u003cstrong\u003eRedux\u003c/strong\u003e part of the application to the \u003cstrong\u003eReact\u003c/strong\u003e part of the application (we'll see even more of this later). We also see that whatever function we pass as the first argument to that \u003ccode\u003econnect()\u003c/code\u003e function is called each time there is a change of state, and has access to the entire store's state. The \u003ccode\u003econnect()\u003c/code\u003e function then takes the return value from the \u003ccode\u003emapStateToProps()\u003c/code\u003e function and adds that return value to the props of the component that is passed through in the last parentheses. We call that component a connected component, because that component is connected to the store.  \u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc1c1bc2211f738fdfe4994cce3c36039","title":"Modifying Nested Resources","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"modification-nested-routes-reading\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/modification-nested-routes-reading/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/modification-nested-routes-reading\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/modification-nested-routes-reading/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eUnderstand how to handle modifications (create/update) of nested resources.\u003c/li\u003e \u003cli\u003eHandle errors and validate data from nested resources.\u003c/li\u003e \u003cli\u003eReview the use of view helpers to keep views clean.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eLesson\u003c/h2\u003e  \u003cp\u003eContinuing with our blog application, we're going to extend our nested resources to allow for creating and modifying blog posts by author.\u003c/p\u003e  \u003ch3\u003eCreating A New Post For An Author\u003c/h3\u003e  \u003cp\u003eThe first thing we want to do is create a new post that is automatically linked to an \u003ccode\u003eAuthor\u003c/code\u003e. We could set up a select box on the post page and make the user choose an author. However, if we're already on the author's new post page, we know who the author is, so why not do it without forcing the user to choose?\u003c/p\u003e  \u003cp\u003eWe already used nested resources to view posts by author, so now let's look at nested resources to create posts by author. As usual, we want to start with the route. We want to add \u003ccode\u003e:new\u003c/code\u003e to our nested \u003ccode\u003e:posts\u003c/code\u003e resource:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003eresources :authors, only: [:show, :index] do\u003cbr\u003e  resources :posts, only: [:show, :index, :new]\u003cbr\u003eend\u003cbr\u003eresources :posts \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis gives us access to \u003ccode\u003e/authors/:author_id/posts/new\u003c/code\u003e, and a \u003ccode\u003enew_author_post_path\u003c/code\u003e helper.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e Remember to run \u003ccode\u003erake routes\u003c/code\u003e if you're unsure of the URL helper name.\u003c/p\u003e  \u003cp\u003eWe have the route, so now we need to update our \u003ccode\u003eposts_controller#new\u003c/code\u003e action to handle the \u003ccode\u003e:author_id\u003c/code\u003e parameter.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef new\u003cbr\u003e  @post = Post.new(author_id: params[:author_id])\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice that we're passing the \u003ccode\u003eparams[:author_id]\u003c/code\u003e into \u003ccode\u003ePost.new()\u003c/code\u003e. We want to make sure that, if we capture an \u003ccode\u003eauthor_id\u003c/code\u003e through a nested route, we keep track of it and assign the post to that author. We'll actually be carrying this \u003ccode\u003eid\u003c/code\u003e with us for the next few steps, babysitting it through the server request/response cycle.\u003c/p\u003e  \u003cp\u003eNow let's get into our author \u003ccode\u003eshow\u003c/code\u003e template and add a link to the nested new post page for that author.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- authors/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @author.name %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= link_to \"New Post\", new_author_post_path(@author) %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;p\u0026gt;Posts:\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;% @author.posts.each do |post| %\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u0026lt;%= post.title %\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's launch the app (don't forget to \u003ccode\u003erake db:seed\u003c/code\u003e), browse to \u003ccode\u003e/authors\u003c/code\u003e, click on an author's name, and then click the new post link. Once there, let's make a post.\u003c/p\u003e  \u003cp\u003eSomething seems off. Where's our author? Looks like we didn't do a great job babysitting that \u003ccode\u003eauthor_id\u003c/code\u003e. We set it up in the \u003ccode\u003enew\u003c/code\u003e action, but it never made it to the view so that it could get submitted back to the server. Let's fix that. Open up the post form partial and add a hidden field for the \u003ccode\u003e:author_id\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- posts/_form.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for(@post) do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= f.hidden_field :author_id %\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post Description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_area :description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we reload the new post page for the author and inspect the source, we should see something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;input type=\"hidden\" value=\"1\" name=\"post[author_id]\" id=\"post_author_id\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGreat. That part's working, but we need to carry that \u003ccode\u003eauthor_id\u003c/code\u003e with us even further.\u003c/p\u003e  \u003cp\u003eRemember \u003ca href=\"http://guides.rubyonrails.org/action_controller_overview.html#strong-parameters\"\u003eStrong Parameters\u003c/a\u003e? We need to update our \u003ccode\u003eposts_controller\u003c/code\u003e to accept \u003ccode\u003e:author_id\u003c/code\u003e as a parameter for a post. So let's get in there and modify our \u003ccode\u003epost_params\u003c/code\u003e method.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# controllers/posts_controller.rb\u003cbr\u003e ...\u003cbr\u003e\u003cbr\u003eprivate\u003cbr\u003e\u003cbr\u003edef post_params\u003cbr\u003e  params.require(:post).permit(:title, :description, :author_id)\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we know the \u003ccode\u003eauthor_id\u003c/code\u003e will be allowed for mass-assignment in the \u003ccode\u003ecreate\u003c/code\u003e action.\u003c/p\u003e  \u003cp\u003eLet's try it out. Go to an author's new post page, and make a post. We should see the author's name in the byline now!\u003c/p\u003e  \u003cp\u003eWhy didn't we have to make a nested resource route for \u003ccode\u003e:create\u003c/code\u003e in addition to \u003ccode\u003e:new\u003c/code\u003e? \u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003eform_for(@post)\u003c/code\u003e helper in \u003ccode\u003eposts/_form.html.erb\u003c/code\u003e will automatically route to \u003ccode\u003ePOST posts_controller#create\u003c/code\u003e for a new \u003ccode\u003ePost\u003c/code\u003e. By carrying the \u003ccode\u003eauthor_id\u003c/code\u003e as we did and allowing it through strong parameters, the existing \u003ccode\u003ecreate\u003c/code\u003e route and action can be used without needing to do anything else.\u003c/p\u003e  \u003ch3\u003eEditing An Author's Posts\u003c/h3\u003e  \u003cp\u003eWe can use the same technique to allow us to directly edit an author's posts.\u003c/p\u003e  \u003cp\u003eFirst, we allow the \u003ccode\u003e:edit\u003c/code\u003e action in the nested route:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003eresources :authors, only: [:show, :index] do\u003cbr\u003e  resources :posts, only: [:show, :index, :new, :edit]\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe don't have to change any views because \u003ccode\u003enew\u003c/code\u003e and \u003ccode\u003eedit\u003c/code\u003e both use the same \u003ccode\u003e_form\u003c/code\u003e partial that already has the \u003ccode\u003eauthor_id\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eNow we need to update our post \u003ccode\u003eshow\u003c/code\u003e view to give us the new nested link to edit the post for the author.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- posts/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;by \u0026lt;%= link_to @post.author.name, author_path(@post.author) if @post.author %\u0026gt; (\u0026lt;%= link_to \"Edit Post\", edit_author_post_path(@post.author, @post) if @post.author %\u0026gt;)\u0026lt;/p\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;\u0026lt;%= @post.description %\u0026gt; \u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe need to make one small change to the controller:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef update\u003cbr\u003e  @post = Post.find(params[:id])\u003cbr\u003e  @post.update(post_params)\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow if we try it out, everything should work just fine. Reload the page, click the edit link, and edit the post.\u003c/p\u003e  \u003cp\u003ePretty easy, right? What's the catch?\u003c/p\u003e  \u003ch3\u003eHandling Mischief And Errors In Our URLs\u003c/h3\u003e  \u003cp\u003eThe catch is that we've opened ourselves up to a couple of potential bugs or, worse, opportunities for our more playful users to make a mess of our data. Let's work backward, starting with our recent changes to \u003ccode\u003eedit\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf you go back to your author post edit page, you'll see a URL similar to \u003ccode\u003ehttp://localhost:3000/authors/1/posts/1/edit\u003c/code\u003e. This tells us that we are editing the \u003ccode\u003ePost\u003c/code\u003e with \u003ccode\u003eid: 1\u003c/code\u003e by the \u003ccode\u003eAuthor\u003c/code\u003e with \u003ccode\u003eid: 1\u003c/code\u003e. But what if we change that \u003ccode\u003eauthor_id\u003c/code\u003e in the URL? Try browsing to \u003ccode\u003ehttp://localhost:3000/authors/123456/posts/1/edit\u003c/code\u003e, and see what happens.\u003c/p\u003e  \u003cp\u003eWe end up on the same page! But post \u003ccode\u003e1\u003c/code\u003e belongs to author \u003ccode\u003e1\u003c/code\u003e — not author \u003ccode\u003e123456\u003c/code\u003e. In fact, there \u003cem\u003eis no\u003c/em\u003e author \u003ccode\u003e123456\u003c/code\u003e in the system. How is this happening?\u003c/p\u003e  \u003cp\u003eRemember how we didn't have to change the controller when we added the nested resource route for \u003ccode\u003e:edit\u003c/code\u003e? Well, this is the price we pay for taking shortcuts. What we should do is check to make sure that 1) the \u003ccode\u003eauthor_id\u003c/code\u003e is valid and 2) the post matches the author. So let's fix that now.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef edit\u003cbr\u003e  if params[:author_id]\u003cbr\u003e    author = Author.find_by(id: params[:author_id])\u003cbr\u003e    if author.nil?\u003cbr\u003e      redirect_to authors_path, alert: \"Author not found.\"\u003cbr\u003e    else\u003cbr\u003e      @post = author.posts.find_by(id: params[:id])\u003cbr\u003e      redirect_to author_posts_path(author), alert: \"Post not found.\" if @post.nil?\u003cbr\u003e    end\u003cbr\u003e  else\u003cbr\u003e    @post = Post.find(params[:id])\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we're looking for the existence of \u003ccode\u003eparams[:author_id]\u003c/code\u003e, which we know would come from our nested route. If it's there, we want to make sure that we find a valid author. If we can't, we redirect them to the \u003ccode\u003eauthors_path\u003c/code\u003e with a \u003ccode\u003eflash[:alert]\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf we do find the author, we next want to find the post by \u003ccode\u003eparams[:id]\u003c/code\u003e, but, instead of directly looking for \u003ccode\u003ePost.find()\u003c/code\u003e, we need to filter the query through our \u003ccode\u003eauthor.posts\u003c/code\u003e collection to make sure we find it in that author's posts. It may be a valid post \u003ccode\u003eid\u003c/code\u003e, but it might not belong to that author, which makes this an invalid request.\u003c/p\u003e  \u003cp\u003eNow if we go back and try our invalid URL (\u003ccode\u003ehttp://localhost:3000/authors/123456/posts/1/edit\u003c/code\u003e), we should be redirected back to where we belong.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e One of the downsides of RESTful URL schemes is that curious users can edit the URLs to try to explore the system further. This is how we discovered \u003ca href=\"http://mashable.com/2016/01/11/netflix-search-codes/#LM6QcfeksZqG\"\u003eall the hidden Netflix genres\u003c/a\u003e. However, this could also lead to security holes in your system, allowing users to potentially mismatch id parameters and wreak havoc in your database, so always guard against that by doing what we've done above.\u003c/p\u003e  \u003cp\u003eWhile we're at it, we should fix up our \u003ccode\u003enew\u003c/code\u003e action to ensure that we're creating a new post for a valid author. Let's make it look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef new\u003cbr\u003e  if params[:author_id] \u0026amp;\u0026amp; !Author.exists?(params[:author_id])\u003cbr\u003e    redirect_to authors_path, alert: \"Author not found.\"\u003cbr\u003e  else\u003cbr\u003e    @post = Post.new(author_id: params[:author_id])\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere we check for \u003ccode\u003eparams[:author_id]\u003c/code\u003e and then for \u003ccode\u003eAuthor.exists?\u003c/code\u003e to see if the author is real.\u003c/p\u003e  \u003cp\u003eWhy aren't we doing a \u003ccode\u003efind_by\u003c/code\u003e and getting the author instance? Because we don't need a whole author instance for \u003ccode\u003ePost.new\u003c/code\u003e; we just need the \u003ccode\u003eauthor_id\u003c/code\u003e. And we don't need to check against the \u003ccode\u003eposts\u003c/code\u003e of the author because we're just creating a new one. So we use \u003ccode\u003eexists?\u003c/code\u003e to quickly check the database in the most efficient way.\u003c/p\u003e  \u003cp\u003eBut what if \u003ccode\u003eparams[:author_id]\u003c/code\u003e is \u003ccode\u003enil\u003c/code\u003e in the example above? If we just did \u003ccode\u003ePost.new\u003c/code\u003e without the \u003ccode\u003e(author_id: params[:author_id])\u003c/code\u003e argument, the \u003ccode\u003eauthor_id\u003c/code\u003e attribute of the new \u003ccode\u003ePost\u003c/code\u003e would be initialized as \u003ccode\u003enil\u003c/code\u003e anyway. So we don't have to do anything special to handle it. It works for us if there is or isn't an \u003ccode\u003eauthor_id\u003c/code\u003e present.\u003c/p\u003e  \u003cp\u003eWhich brings us to the last thing we have to do.\u003c/p\u003e  \u003ch3\u003eMissing Authors\u003c/h3\u003e  \u003cp\u003eWhen someone creates a new post via our nested route, we automatically assign an author, and everything works great. But what about when they create a new post from the regular old \u003ccode\u003enew_post_path\u003c/code\u003e?\u003c/p\u003e  \u003cp\u003eWe could just eliminate that route and only allow post creation through the nested resource. That might be a valid choice in some applications.\u003c/p\u003e  \u003cp\u003eBut we've decided we want to be able to select an author at the time of posting if we haven't used the nested route.\u003c/p\u003e  \u003cp\u003eSince we're already set up to handle \u003ccode\u003eauthor_id\u003c/code\u003e on the controller, all we have to do is augment our \u003ccode\u003eposts/_form.html.erb\u003c/code\u003e partial to present a list of authors when none is present.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- posts/_form.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for(@post) do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;% if @post.author.nil? %\u0026gt;\u003cbr\u003e    \u0026lt;%= f.select :author_id, options_from_collection_for_select(Author.all, :id, :name) %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;% end %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.hidden_field :author_id %\u0026gt;\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat gives us a select control if we don't have an author, but we have a problem. We can only have one \u003ccode\u003e:author_id\u003c/code\u003e field. We could put that \u003ccode\u003ehidden_field\u003c/code\u003e in an \u003ccode\u003eelse\u003c/code\u003e, which would work, but then we would have a whole bunch of logic cluttering up our view. So let's dump it in our \u003ccode\u003eposts_helper\u003c/code\u003e and clean up that form.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# helpers/posts_helper.rb\u003cbr\u003e\u003cbr\u003emodule PostsHelper\u003cbr\u003e  def author_id_field(post)\u003cbr\u003e    if post.author.nil?\u003cbr\u003e      select_tag \"post[author_id]\", options_from_collection_for_select(Author.all, :id, :name)\u003cbr\u003e    else\u003cbr\u003e      hidden_field_tag \"post[author_id]\", post.author_id\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd back in our form partial:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- posts/_form.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for(@post) do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= author_id_field(@post) %\u0026gt;\u003cbr\u003e  \u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we should have a selector when we browse to \u003ccode\u003e/posts/new\u003c/code\u003e and a hidden \u003ccode\u003eauthor_id\u003c/code\u003e field when we browse to \u003ccode\u003e/authors/1/posts/new\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eWe've seen how to create and edit nested resources, handle for errors or mischievous users in our parameters, and use helpers to extend our views to handle for nested and non-nested versions of the resource.\u003c/p\u003e  \u003cp\u003eYou're well on your way to becoming a nested resource ninja!\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"http://i.giphy.com/ErdfMetILIMko.gif\" alt=\"Ninja Baby\"\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g53c5f6d77d9b8c53753996d2be95510d","title":"Namespaced Routes","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"namespaced-routes-reading\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/namespaced-routes-reading/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/namespaced-routes-reading\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/namespaced-routes-reading/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUnderstand the use of \u003ccode\u003escope\u003c/code\u003e and \u003ccode\u003enamespace\u003c/code\u003e in \u003ccode\u003eroutes.rb\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eCreate a module scoped controller.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eLesson\u003c/h2\u003e\n\n\u003cp\u003eWe're going to explore different ways of routing things in our blog application\nto help us organize and group certain routes and controllers more logically.\u003c/p\u003e\n\n\u003ch4\u003eBlog Stats\u003c/h4\u003e\n\n\u003cp\u003eWe decide that we want to keep track of some basic blog statistics, such as how\nmany posts and authors we have. We start by creating a \u003ccode\u003estats_controller.rb\u003c/code\u003e\nwith an \u003ccode\u003eindex\u003c/code\u003e action and corresponding view.\u003c/p\u003e\n\n\u003cp\u003eWe can't actually browse to it yet because we need to set up a route. Let's add it to \u003ccode\u003eroutes.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003eget '/stats', to: 'stats#index'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEasy enough, but, after thinking about it, \u003ccode\u003e/stats\u003c/code\u003e isn't something we want to\njust hang off the root of our blog URL for anyone to see. It's really just for\nblog admins, and we want to set up a URL scheme to segregate admin things into\ntheir own logical space.\u003c/p\u003e\n\n\u003cp\u003eWe modify our route:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003eget '/admin/stats', to: 'stats#index'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can browse to \u003ccode\u003e/admin/stats\u003c/code\u003e for the stats page, and we can no longer go\nstraight to \u003ccode\u003e/stats\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eScoping Routes\u003c/h4\u003e\n\n\u003cp\u003eOver time, we might decide to add more admin functions, grouping them all\ntogether like we did above, until eventually our \u003ccode\u003eroutes.rb\u003c/code\u003e looks something\nlike this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\n...\u003cbr\u003e\u003cbr\u003eget '/admin/stats', to: 'stats#index'\u003cbr\u003eget '/admin/authors/new', to: 'authors#new'\u003cbr\u003eget '/admin/authors/delete', to: 'authors#delete'\u003cbr\u003eget '/admin/authors/create', to: 'authors#create'\u003cbr\u003eget '/admin/comments/moderate', to: 'comments#moderate'\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, even with only a few more actions in our \u003ccode\u003eadmin\u003c/code\u003e section, our\nroutes are getting ugly. Not to mention we're repeating ourselves a lot by\ntyping in \u003ccode\u003e/admin\u003c/code\u003e on all these routes. Yes, even routes should be DRY!\u003c/p\u003e\n\n\u003cp\u003eWhat we need is a way to group all these under \u003ccode\u003e/admin\u003c/code\u003e without typing \u003ccode\u003e/admin\u003c/code\u003e\nall the time. That's where \u003ccode\u003escope\u003c/code\u003e comes in.\u003c/p\u003e\n\n\u003cp\u003eIn routing, \u003ccode\u003escope\u003c/code\u003e allows us to prefix a block of routes under one grouping. So\nlet's change our stats route:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config\\routes.rb\u003cbr\u003e\u003cbr\u003escope '/admin' do\u003cbr\u003e  resources :stats, only: [:index]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can reload \u003ccode\u003e/admin/stats\u003c/code\u003e, and it still works. Notice our new route is\nresourced. Now that we don't have to manually prefix \u003ccode\u003e/admin\u003c/code\u003e, we can go back to\nusing resourced routes within the \u003ccode\u003e/admin\u003c/code\u003e scope.\u003c/p\u003e\n\n\u003cp\u003eIf you run \u003ccode\u003erake routes\u003c/code\u003e, you'll see that the new \u003ccode\u003e/admin/stats\u003c/code\u003e helpers are\n\u003ccode\u003estats_path\u003c/code\u003e and \u003ccode\u003estats_url\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4\u003eScoping With Modules\u003c/h4\u003e\n\n\u003cp\u003eScoping works nicely to group our URLs together logically, but what happens when\nwe have a bunch of controllers that are handling admin functions? As the\napplication grows, it's going to be harder and harder to keep track of which\ncontrollers are for regular blog functions and which are for admin functions.\u003c/p\u003e\n\n\u003cp\u003eWe want to group all our admin controllers logically to make it easier to\nmaintain and add to the app, so let's add an \u003ccode\u003e/admin\u003c/code\u003e directory under\n\u003ccode\u003e/controllers\u003c/code\u003e where all the admin controllers will go:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003emkdir app/controllers/admin\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eNow let's move our \u003ccode\u003estats_controller.rb\u003c/code\u003e into the \u003ccode\u003e/admin\u003c/code\u003e folder:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003emv app/controllers/stats_controller.rb app/controllers/admin\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eWhen you create a new folder under \u003ccode\u003e/controllers\u003c/code\u003e, Rails will automatically pick\nthat up as a \u003ccode\u003emodule\u003c/code\u003e and expect you to namespace the controller accordingly. We\nneed to modify our \u003ccode\u003eadmin/stats_controller.rb\u003c/code\u003e to look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# controllers/admin/stats_controller.rb\u003cbr\u003e\u003cbr\u003eclass Admin::StatsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e\u003cbr\u003e    ...\u003cbr\u003e\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow that we have our controller in a module, Rails will expect the views to\nmatch. Let's create a new directory at \u003ccode\u003e/app/views/admin/stats\u003c/code\u003e and move our\n\u003ccode\u003estats/index.html.erb\u003c/code\u003e into it, so we'll wind up with\n\u003ccode\u003e/app/views/admin/stats/index.html.erb\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e The \u003ccode\u003eviews\u003c/code\u003e folder for a controller module (in this case \u003ccode\u003e/admin\u003c/code\u003e) expects a\nsubfolder structure that matches the names of the controllers (in this case\n\u003ccode\u003e/admin/stats\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eIf we try to reload \u003ccode\u003e/admin/stats\u003c/code\u003e now, we will get an error because we need to\ntell our routes about our new module.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003escope '/admin', module: 'admin' do\u003cbr\u003e  resources :stats, only: [:index]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe're telling \u003ccode\u003escope\u003c/code\u003e that we want to use \u003ccode\u003e/admin\u003c/code\u003e as a URL prefix, and we're\nalso letting Rails know that all of the included routes will be handled by\ncontrollers in the \u003ccode\u003eadmin\u003c/code\u003e module.\u003c/p\u003e\n\n\u003cp\u003eIf we reload \u003ccode\u003e/admin/stats\u003c/code\u003e, everything should work just like it did, but now we\nare logically organizing our controllers.\u003c/p\u003e\n\n\u003ch4\u003eNamespace\u003c/h4\u003e\n\n\u003cp\u003eRight now, our route is scoped as \u003ccode\u003escope '/admin', module: 'admin'\u003c/code\u003e, which is\nfine but perhaps a bit less DRY than we'd like.\u003c/p\u003e\n\n\u003cp\u003eFortunately, Rails gives us a shortcut here. When we want to route with a module\n\u003cem\u003eand\u003c/em\u003e use that module's name as the URL prefix, we can use the \u003ccode\u003enamespace\u003c/code\u003e\nmethod instead of \u003ccode\u003escope, module\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003enamespace :admin do\u003cbr\u003e  resources :stats, only: [:index]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we reload \u003ccode\u003e/admin/stats\u003c/code\u003e, everything still works, but we've simplified the\ndeclaration of the routes. The \u003ccode\u003enamespace\u003c/code\u003e method makes the assumption that the\npath prefix and module name match, saving us some typing.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e There is one important difference between \u003ccode\u003escope '/admin', module: 'admin'\u003c/code\u003e and\n\u003ccode\u003enamespace :admin\u003c/code\u003e, and it's in the URL helpers. Remember above that using\n\u003ccode\u003escope\u003c/code\u003e gave us a \u003ccode\u003estats_path\u003c/code\u003e helper. But now that we are using \u003ccode\u003enamespace\u003c/code\u003e,\nrun \u003ccode\u003erake routes\u003c/code\u003e again. You'll see that the helper is now prefixed with\n\u003ccode\u003eadmin_\u003c/code\u003e, so \u003ccode\u003estats_path\u003c/code\u003e becomes \u003ccode\u003eadmin_stats_path\u003c/code\u003e. If you switch from \u003ccode\u003escope\u003c/code\u003e\nto \u003ccode\u003enamespace\u003c/code\u003e, take care to update any URL helpers you have in use!\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eWe learned how to organize our URLs by using \u003ccode\u003escope\u003c/code\u003e to group them with an\n\u003ccode\u003e/admin\u003c/code\u003e prefix; how to further organize our controllers using directories and\nmodules; and how to use \u003ccode\u003escope, module\u003c/code\u003e or \u003ccode\u003enamespace\u003c/code\u003e in our routes.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g1ee2828d6cbc11eb432ad90aef9f5d7b","title":"Namespaced Routes Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"namespaced-routes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/namespaced-routes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/namespaced-routes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/namespaced-routes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eOrganize controllers using a module.\u003c/li\u003e\n\u003cli\u003eUse namespaced routes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe're going to add some administrative functions to our song library.\nUsing what we learned about namespaced routes and module scope, we'll\norganize our controllers and routes under an \u003ccode\u003eadmin\u003c/code\u003e namespace to keep\nthem separate from the regular user functions.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThe base application has been provided with tests. Make sure to run\n\u003ccode\u003erake db:seed\u003c/code\u003e to set up seed data. Tests can be run with \u003ccode\u003erspec\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Since we're building new features on an existing project that\nalready has tests, part of the job is to make sure the tests that\nalready pass at the beginning still pass when you're done!\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a \u003ccode\u003ePreference\u003c/code\u003e model that will store preferences for the app. It will need\nto have fields for:\n\n\u003cul\u003e\n\u003cli\u003eAllowing creation of new songs. Used to control the ability to add new songs to the system.\u003c/li\u003e\n\u003cli\u003eAllowing creation of new artists. Used to control the ability to add new artists to the system.\n\u003cstrong\u003eNote:\u003c/strong\u003e There will only be 1 instance of \u003ccode\u003ePreference\u003c/code\u003e, not a preference associated with each artist/song. After creating the model, run \u003ccode\u003erake preferences:load\u003c/code\u003e so that your code will work in the browser.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCreate a \u003ccode\u003ePreferencesController\u003c/code\u003e, routes, and views. Do this under an \u003ccode\u003eAdmin\u003c/code\u003e module to separate it from the standard user functionality.\u003c/li\u003e\n\u003cli\u003eUpdate the \u003ccode\u003esongs#new\u003c/code\u003e and \u003ccode\u003eartists#new\u003c/code\u003e actions to check that creating new songs or artists is enabled, and redirect to \u003ccode\u003e/songs\u003c/code\u003e and \u003ccode\u003e/artists\u003c/code\u003e, respectively, if that preference is disabled.\u003c/li\u003e\n\u003cli\u003eMake sure tests pass.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cimg src=\"http://i.giphy.com/h2Q9ZYee54UOk.gif\" alt=\"Happy Gilmore\"\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g799860cd2f648ee17ee006843192f749","title":"Nested Forms","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"basic-nested-forms\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/basic-nested-forms/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/basic-nested-forms\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/basic-nested-forms/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eConstruct a nested \u003ccode\u003eparams\u003c/code\u003e hash with data about the primary object and a \u003ccode\u003ebelongs_to\u003c/code\u003e and \u003ccode\u003ehas_many\u003c/code\u003e association.\u003c/li\u003e \u003cli\u003eUse the conventional key names for associated data (association_attributes).\u003c/li\u003e \u003cli\u003eName form inputs correctly to create a nested \u003ccode\u003eparams\u003c/code\u003e hash with \u003ccode\u003ebelongs_to\u003c/code\u003e and \u003ccode\u003ehas_many\u003c/code\u003e associated data.\u003c/li\u003e \u003cli\u003eDefine a conventional association writer for the primary model to properly instantiate associations based on the nested \u003ccode\u003eparams\u003c/code\u003e association data.\u003c/li\u003e \u003cli\u003eDefine a custom association writer for the primary model to properly instantiate associations with custom logic (like unique by name) on the nested \u003ccode\u003eparams\u003c/code\u003e association data.\u003c/li\u003e \u003cli\u003eUse \u003ccode\u003efields_for\u003c/code\u003e to generate the association fields.\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eData model\u003c/h2\u003e  \u003cp\u003eLet's say we're writing an address book.\u003c/p\u003e  \u003cp\u003eEach \u003ccode\u003ePerson\u003c/code\u003e can have multiple addresses. Each \u003ccode\u003eAddress\u003c/code\u003e has a bunch of address info fields.\u003c/p\u003e  \u003cp\u003eOur data model looks like this:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003ccode\u003ePerson\u003c/code\u003e  \u003cul\u003e \u003cli\u003ehas many \u003ccode\u003eaddresses\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003ehas a \u003ccode\u003ename\u003c/code\u003e (string)\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eAddress\u003c/code\u003e  \u003cul\u003e \u003cli\u003ehas one \u003ccode\u003eperson\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003ehas the first line of the street address stored as \u003ccode\u003estreet_address_1\u003c/code\u003e (string)\u003c/li\u003e \u003cli\u003ehas the second line of the street address stored as \u003ccode\u003estreet_address_2\u003c/code\u003e (string)\u003c/li\u003e \u003cli\u003ehas a \u003ccode\u003ecity\u003c/code\u003e (string)\u003c/li\u003e \u003cli\u003ehas a \u003ccode\u003estate\u003c/code\u003e (string)\u003c/li\u003e \u003cli\u003ehas a \u003ccode\u003ezipcode\u003c/code\u003e (string)\u003c/li\u003e \u003cli\u003ehas an \u003ccode\u003eaddress_type\u003c/code\u003e (string)\u003c/li\u003e \u003c/ul\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eCreating people\u003c/h2\u003e  \u003cp\u003eHow do we write our \u003ccode\u003ePerson\u003c/code\u003e form? We don't want to require our user to first create an \u003ccode\u003eAddress\u003c/code\u003e, then create that \u003ccode\u003ePerson\u003c/code\u003e. That's annoying. We want a single form for a \u003ccode\u003ePerson\u003c/code\u003e containing several slots for their \u003ccode\u003eaddresses\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003ePreviously, we wrote setters like \u003ccode\u003eSong#artist_name=\u003c/code\u003e to find or create an \u003ccode\u003eArtist\u003c/code\u003e and connect them to the song.\u003c/p\u003e  \u003cp\u003eThat won't work here, because an address contains more than one field. In the \u003ccode\u003eArtist\u003c/code\u003e case we were just doing the \u003ccode\u003ename\u003c/code\u003e. With \u003ccode\u003eAddress\u003c/code\u003e, it's \"structured data\". All that really means is it has multiple fields attached to it. When we build a form for it, the form will send a different key for each field in each address. This can get a bit unwieldy so we generally try to group a hash within the \u003ccode\u003eparams\u003c/code\u003e hash, which makes things much neater. Spoiler alert: Rails has a way to send this across as a hash.\u003c/p\u003e  \u003cp\u003eThe complete \u003ccode\u003eparams\u003c/code\u003e object for creating a \u003ccode\u003ePerson\u003c/code\u003e will look like the following. Using \"0\" and \"1\" as keys can seem a bit odd, but it makes everything else work moving forward. This hash is now more versatile. You can access nested values the standard way, with \u003ccode\u003eparams[:person][:addresses_attributes][\"0\"]\u003c/code\u003e returning all of the information about the first address at 33 West 26th St.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  :person =\u0026gt; {\u003cbr\u003e    :name =\u0026gt; \"Avi\",\u003cbr\u003e    :addresses_attributes =\u0026gt; {\u003cbr\u003e      \"0\" =\u0026gt; {\u003cbr\u003e        :street_address_1 =\u0026gt; \"33 West 26th St\",\u003cbr\u003e        :street_address_2 =\u0026gt; \"Apt 2B\",\u003cbr\u003e        :city =\u0026gt; \"New York\",\u003cbr\u003e        :state =\u0026gt; \"NY\",\u003cbr\u003e        :zipcode =\u0026gt; \"10010\",\u003cbr\u003e        :address_type =\u0026gt; \"Work\"\u003cbr\u003e      },\u003cbr\u003e      \"1\" =\u0026gt; {\u003cbr\u003e        :street_address_1 =\u0026gt; \"11 Broadway\",\u003cbr\u003e        :street_address_2 =\u0026gt; \"2nd Floor\",\u003cbr\u003e        :city =\u0026gt; \"New York\",\u003cbr\u003e        :state =\u0026gt; \"NY\",\u003cbr\u003e        :zipcode =\u0026gt; \"10004\",\u003cbr\u003e        :address_type =\u0026gt; \"Home\"\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice the \u003ccode\u003eaddresses_attributes\u003c/code\u003e key. That key is similar to the \u003ccode\u003eartist_name\u003c/code\u003e key we used previously. Last time, we handled this by writing a \u003ccode\u003eartist_name=\u003c/code\u003e method. In this case, we're going to do something \u003cem\u003esuper\u003c/em\u003e similar. Instead of writing our own \u003ccode\u003eaddresses_attributes=\u003c/code\u003e method, we'll let Rails take care of it for us. We're going to use \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e and the \u003ccode\u003efields_for\u003c/code\u003e FormHelper.\u003c/p\u003e  \u003cp\u003eLast time, we first wrote our setter method in the model. This time let's modify our \u003ccode\u003ePerson\u003c/code\u003e model to include an \u003ccode\u003eaccepts_nested_attributes_for :addresses\u003c/code\u003e line.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Person \u0026lt; ActiveRecord::Base\u003cbr\u003e  has_many :addresses\u003cbr\u003e  accepts_nested_attributes_for :addresses\u003cbr\u003e\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow open up \u003ccode\u003erails c\u003c/code\u003e and run our \u003ccode\u003eaddresses_attributes\u003c/code\u003e method that was created for us by \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e2.2.3 :018 \u0026gt; new_person = Person.new\u003cbr\u003e =\u0026gt; #\u0026lt;Person id: nil, name: nil, created_at: nil, updated_at: nil\u0026gt;\u003cbr\u003e\u003cbr\u003e2.2.3 :019 \u0026gt; new_person.addresses_attributes={\"0\"=\u0026gt;{\"street_address_1\"=\u0026gt;\"33 West 26\", \"street_address_2\"=\u0026gt;\"Floor 2\", \"city\"=\u0026gt;\"NYC\", \"state\"=\u0026gt;\"NY\", \"zipcode\"=\u0026gt;\"10004\", \"address_type\"=\u0026gt;\"work1\"}, \"1\"=\u0026gt;{\"street_address_1\"=\u0026gt;\"11 Broadway\", \"street_address_2\"=\u0026gt;\"Suite 260\", \"city\"=\u0026gt;\"NYC\", \"state\"=\u0026gt;\"NY\", \"zipcode\"=\u0026gt;\"10004\", \"address_type\"=\u0026gt;\"work2\"}}\u003cbr\u003e =\u0026gt; {\"0\"=\u0026gt;{\"street_address_1\"=\u0026gt;\"33 West 26\", \"street_address_2\"=\u0026gt;\"Floor 2\", \"city\"=\u0026gt;\"NYC\", \"state\"=\u0026gt;\"NY\", \"zipcode\"=\u0026gt;\"10004\", \"address_type\"=\u0026gt;\"work1\"}, \"1\"=\u0026gt;{\"street_address_1\"=\u0026gt;\"11 Broadway\", \"street_address_2\"=\u0026gt;\"Suite 260\", \"city\"=\u0026gt;\"NYC\", \"state\"=\u0026gt;\"NY\", \"zipcode\"=\u0026gt;\"10004\", \"address_type\"=\u0026gt;\"work2\"}}\u003cbr\u003e\u003cbr\u003e2.2.3 :020 \u0026gt; new_person.save\u003cbr\u003e   (0.2ms)  begin transaction\u003cbr\u003e  SQL (0.8ms)  INSERT INTO \"people\" (\"created_at\", \"updated_at\") VALUES (?, ?)  [[\"created_at\", \"2016-01-14 11:57:00.393038\"], [\"updated_at\", \"2016-01-14 11:57:00.393038\"]]\u003cbr\u003e  SQL (0.3ms)  INSERT INTO \"addresses\" (\"street_address_1\", \"street_address_2\", \"city\", \"state\", \"zipcode\", \"address_type\", \"person_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [[\"street_address_1\", \"33 West 26\"], [\"street_address_2\", \"Floor 2\"], [\"city\", \"NYC\"], [\"state\", \"NY\"], [\"zipcode\", \"10004\"], [\"address_type\", \"work1\"], [\"person_id\", 3], [\"created_at\", \"2016-01-14 11:57:00.403152\"], [\"updated_at\", \"2016-01-14 11:57:00.403152\"]]\u003cbr\u003e  SQL (0.1ms)  INSERT INTO \"addresses\" (\"street_address_1\", \"street_address_2\", \"city\", \"state\", \"zipcode\", \"address_type\", \"person_id\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)  [[\"street_address_1\", \"11 Broadway\"], [\"street_address_2\", \"Suite 260\"], [\"city\", \"NYC\"], [\"state\", \"NY\"], [\"zipcode\", \"10004\"], [\"address_type\", \"work2\"], [\"person_id\", 3], [\"created_at\", \"2016-01-14 11:57:00.405973\"], [\"updated_at\", \"2016-01-14 11:57:00.405973\"]]\u003cbr\u003e   (0.6ms)  commit transaction\u003cbr\u003e =\u0026gt; true \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is a bit hard to read, but you'll notice that we have a method called \u003ccode\u003eaddresses_attributes=\u003c/code\u003e. You didn't write that; \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e wrote that. Then when we called \u003ccode\u003enew_person.save\u003c/code\u003e it created both the \u003ccode\u003ePerson\u003c/code\u003e object and the two \u003ccode\u003eAddress\u003c/code\u003e objects. Boom!\u003c/p\u003e  \u003cp\u003eNow, we just need to get our form to create a \u003ccode\u003eparams\u003c/code\u003e hash like that. Easy Peasy. We are going to use \u003ccode\u003efields_for\u003c/code\u003e to make this happen.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/views/people/new.html.erb\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for @person do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.label :name %\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :name %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= f.fields_for :addresses do |addr| %\u0026gt;\u003cbr\u003e    \u0026lt;%= addr.label :street_address_1 %\u0026gt;\u003cbr\u003e    \u0026lt;%= addr.text_field :street_address_1 %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;%= addr.label :street_address_2 %\u0026gt;\u003cbr\u003e    \u0026lt;%= addr.text_field :street_address_2 %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;%= addr.label :city %\u0026gt;\u003cbr\u003e    \u0026lt;%= addr.text_field :city %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;%= addr.label :state %\u0026gt;\u003cbr\u003e    \u0026lt;%= addr.text_field :state %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;%= addr.label :zipcode %\u0026gt;\u003cbr\u003e    \u0026lt;%= addr.text_field :zipcode %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e    \u0026lt;%= addr.label :address_type %\u0026gt;\u003cbr\u003e    \u0026lt;%= addr.text_field :address_type %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;% end %\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003efields_for\u003c/code\u003e line gives something nice and English-y. In that block are the fields for the addresses. Love Rails.\u003c/p\u003e  \u003cp\u003eLoad up the page, and see the majestic beauty of what you and Rails have written together. What?! Nothing is there.\u003c/p\u003e  \u003ch2\u003eCreating stubs\u003c/h2\u003e  \u003cp\u003eWe're asking Rails to generate \u003ccode\u003efields_for\u003c/code\u003e each of the \u003ccode\u003ePerson\u003c/code\u003e's addresses. However, when we first create a \u003ccode\u003ePerson\u003c/code\u003e, they have no addresses. Just like \u003ccode\u003ef.text_field :name\u003c/code\u003e will have nothing in the text field if there is no name, \u003ccode\u003ef.fields_for :addresses\u003c/code\u003e will have no address fields if there are no addresses.\u003c/p\u003e  \u003cp\u003eWe'll take the most straightforward way out: when we create a \u003ccode\u003ePerson\u003c/code\u003e in the \u003ccode\u003ePeopleController\u003c/code\u003e, we'll add two empty addresses to fill out. The final controller looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass PeopleController \u0026lt; ApplicationController\u003cbr\u003e  def new\u003cbr\u003e    @person = Person.new\u003cbr\u003e    @person.addresses.build(address_type: 'work')\u003cbr\u003e    @person.addresses.build(address_type: 'home')\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def create\u003cbr\u003e    person = Person.create(person_params)\u003cbr\u003e    redirect_to people_path\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def index\u003cbr\u003e    @people = Person.all\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  private\u003cbr\u003e\u003cbr\u003e  def person_params\u003cbr\u003e    params.require(:person).permit(:name)\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow, refresh the page, and you'll see two lovely address forms. Try to hit submit, and it isn't going to work. One last hurdle. We have new \u003ccode\u003eparams\u003c/code\u003e keys, which means we need to modify our \u003ccode\u003eperson_params\u003c/code\u003e method to accept them. Your \u003ccode\u003eperson_params\u003c/code\u003e method should now look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef person_params\u003cbr\u003e  params.require(:person).permit(\u003cbr\u003e    :name,\u003cbr\u003e    addresses_attributes: [\u003cbr\u003e      :street_address_1,\u003cbr\u003e      :street_address_2,\u003cbr\u003e      :city,\u003cbr\u003e      :state,\u003cbr\u003e      :zipcode,\u003cbr\u003e      :address_type\u003cbr\u003e    ]\u003cbr\u003e  )\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eAvoiding duplicates\u003c/h2\u003e  \u003cp\u003eOne situation we can't use \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e is when we want to avoid duplicates of the row we're creating.\u003c/p\u003e  \u003cp\u003eIn our address book app, perhaps it's reasonable to have duplicate address rows. For instance, both Jerry and Tim live on 22 Elm Street, so there are two address rows for 22 Elm Street. That's fine for those purposes.\u003c/p\u003e  \u003cp\u003eBut say we have a database of songs and artists. We would want \u003ccode\u003eArtist\u003c/code\u003e rows to be unique, so that \u003ccode\u003eArtist.find_by(name: 'Tori Amos').songs\u003c/code\u003e returns what we'd expect. If we want to be able to create artists \u003cem\u003ewhile\u003c/em\u003e creating songs, we'll need to use \u003ccode\u003efind_or_create_by\u003c/code\u003e in our \u003ccode\u003eartist_attributes=\u003c/code\u003e method:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/song.rb\u003cbr\u003e\u003cbr\u003eclass Song \u0026lt; ActiveRecord::Base\u003cbr\u003e  def artist_attributes=(artist)\u003cbr\u003e    self.artist = Artist.find_or_create_by(name: artist[:name])\u003cbr\u003e    self.artist.update(artist)\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis looks up existing artists by name. If no matching artist is found, one is created. Then we update the artist's attributes with the ones we were given. We could also choose to do something else if we didn't want to allow bulk assigning of an artist's information through a song.\u003c/p\u003e  \u003cp\u003eNote that \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e and setter methods (e.g., \u003ccode\u003eartist_attributes=\u003c/code\u003e) aren't necessarily mutually exclusive. It's important to evaluate the needs of your specific use case and choose the approach that makes the most sense. Keep in mind, too, that setter methods are useful for more than just avoiding duplicates –– that's just one domain where they come in handy.\u003c/p\u003e  \u003ch2\u003eVideo Review\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=zZn0xWry6TE\"\u003eNested Forms\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gd29d6399dc99d00ef4e2dd8e0d74c2f8","title":"Nested Forms","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-blog-nested-forms\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-blog-nested-forms/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-blog-nested-forms\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-blog-nested-forms/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe're going to build off the previous iteration of our Blog App, where we created new models for \u003ccode\u003eUser\u003c/code\u003e and \u003ccode\u003eTag\u003c/code\u003e (and applicable associations) and wrote validations. We want to clean up our tagging feature. Our ability to add tags to a new post is super useful, but what if, when we're making a new post, we want to add a new tag that isn't in the list? Let's build that out.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE\u003c/em\u003e\u003c/strong\u003e: As with much of our Rails curriculum, remember to always use the \u003ccode\u003e--no-test-framework\u003c/code\u003e flag when you generate models, controllers, etc. That way, the Rails generators will not create additional tests on top of the test suite that already comes with the lesson. E.g., \u003ccode\u003erails g model User username:string email:string --no-test-framework\u003c/code\u003e. However, it is not needed for this lab as we've provided the starter files.\u003c/p\u003e\n\n\u003ch2\u003eTags\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eWe need to change the permitted params in our \u003ccode\u003ePostsController\u003c/code\u003e to accept another attribute, \u003ccode\u003e:tags_attributes\u003c/code\u003e, which contains the tag attributes that we need to create a new tag.\u003c/li\u003e\n\u003cli\u003eWe also need an \u003ccode\u003eaccepts_nested_attributes_for\u003c/code\u003e macro on our \u003ccode\u003ePost\u003c/code\u003e model, which will permit tags to be nested in our new \u003ccode\u003ePost\u003c/code\u003e form.\u003c/li\u003e\n\u003cli\u003eNow we can build a nested form in our \u003ccode\u003ePost\u003c/code\u003e form. Check out the documentation on \u003ca href=\"http://guides.rubyonrails.org/form_helpers.html#nested-forms\"\u003eNested Forms\u003c/a\u003e for help.\u003c/li\u003e\n\u003cli\u003eWe should be able to select previously created tags as well as create a new tag.\u003c/li\u003e\n\u003cli\u003eRemember, because we have a uniqueness validation on the name of tag, we will need to account for that.\u003c/li\u003e\n\u003cli\u003eA user shouldn't have to submit a new tag every time they submit a post.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e  class User \u0026lt; ActiveRecord::Base\u003cbr\u003e    has_many :posts\u003cbr\u003e    accepts_nested_attributes_for :posts, reject_if: proc { |attributes| attributes['title'].blank? }\u003cbr\u003e  end\n\u003c/code\u003e\u003c/pre\u003e\n\u003col\u003e\n\u003cli\u003eTo allow a user to create a new tag, the controller action for a new post should instantiate a new tag. Check out the documentation for the \u003ca href=\"http://apidock.com/rails/ActionView/Helpers/FormBuilder/fields_for\"\u003e\u003ccode\u003efields_for\u003c/code\u003e tag\u003c/a\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://edgeguides.rubyonrails.org/action_controller_overview.html#strong-parameters\"\u003eStrong Params\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/form_helpers.html#nested-forms\"\u003eNested Forms\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://apidock.com/rails/ActionView/Helpers/FormBuilder/fields_for\"\u003e\u003ccode\u003efields_for\u003c/code\u003e tag\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/form_helpers.html#preventing-empty-records\"\u003ePreventing Empty Records\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gb7fc62d8e177dfdccd504fb47730edb9","title":"Nested Forms Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"basic-nested-forms-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/basic-nested-forms-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/basic-nested-forms-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/basic-nested-forms-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eConstruct a nested params hash with data about the primary object and a belongs to and has many association.\u003c/li\u003e\n\u003cli\u003eName form inputs correctly to create a nested params hash with belongs to and has many associated data.\u003c/li\u003e\n\u003cli\u003eDefine a conventional association writer for the primary model to properly instantiate associations based on the nested params association data.\u003c/li\u003e\n\u003cli\u003eDefine a custom association writer for the primary model to properly instantiate associations with custom logic (like unique by name) on the nested params association data.\u003c/li\u003e\n\u003cli\u003eUse fields_for to generate the association fields.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eData Model: Recipe with ingredients\u003c/h2\u003e\n\n\u003cp\u003eThe first data model we're going to be working with today is a recipe with ingredients.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecipe\n\n\u003cul\u003e\n\u003cli\u003ehas many ingredients\u003c/li\u003e\n\u003cli\u003etitle:string\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eIngredient\n\n\u003cul\u003e\n\u003cli\u003ebelongs to a recipe\u003c/li\u003e\n\u003cli\u003eingredient.name: string\u003c/li\u003e\n\u003cli\u003eingredient.quantity: string\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe models and show routes and associations have been set up for you.\u003c/p\u003e\n\n\u003ch3\u003eInstructions\u003c/h3\u003e\n\n\u003cp\u003eBuild a recipe form that accepts two ingredients! It should automatically create the new \u003ccode\u003eIngredient\u003c/code\u003e objects.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g761f97e8db4e1cd776351c5dbb67f27a","title":"Nested Resources Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"routing-nested-resources-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/routing-nested-resources-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/routing-nested-resources-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/routing-nested-resources-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eWrite nested routes\u003c/li\u003e\n\u003cli\u003eFilter data sets based on nesting\u003c/li\u003e\n\u003cli\u003eHandle errors in nested routes\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to extend our song library using nested\nresources to build new routes for our artists and songs. Then, we'll use\nthe URL helpers in our views to expose these new routes.\u003c/p\u003e\n\n\u003cp\u003eWe'll also be handling errors when nested resources aren't found so\nthat we can provide a more professional experience to our users.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThe base models, controllers, views, and other files have been provided. There are tests for the lab in the \u003ccode\u003espec\u003c/code\u003e directory. You can run tests with the \u003ccode\u003erspec\u003c/code\u003e command.\u003c/p\u003e\n\n\u003cp\u003eRemember to \u003ccode\u003erake db:seed\u003c/code\u003e to set up a starter song library!\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate nested resource routes to show all songs for an artist (\u003ccode\u003e/artists/1/songs\u003c/code\u003e) and individual songs for that artist (\u003ccode\u003e/artists/1/songs/1\u003c/code\u003e). Restrict the nested songs routes to \u003ccode\u003eindex\u003c/code\u003e and \u003ccode\u003eshow\u003c/code\u003e actions only.\u003c/li\u003e\n\u003cli\u003eUpdate the artists \u003ccode\u003eindex\u003c/code\u003e view to use the new nested resource route URL helper to link to the index of all songs by that artist.\u003c/li\u003e\n\u003cli\u003eUpdate the artists \u003ccode\u003eshow\u003c/code\u003e view to list each song for that artist, and use the new nested resource route helper to link each song to its corresponding \u003ccode\u003eshow\u003c/code\u003e page.\u003c/li\u003e\n\u003cli\u003eUpdate the \u003ccode\u003esongs_controller\u003c/code\u003e to allow the \u003ccode\u003esongs#index\u003c/code\u003e and \u003ccode\u003esongs#show\u003c/code\u003e actions to handle a valid song for the artist.\u003c/li\u003e\n\u003cli\u003eIn the \u003ccode\u003esongs#index\u003c/code\u003e action, if the artist can't be found, redirect to the \u003ccode\u003eindex\u003c/code\u003e of artists, and set a \u003ccode\u003eflash[:alert]\u003c/code\u003e of \"Artist not found.\"\u003c/li\u003e\n\u003cli\u003eIn the \u003ccode\u003esongs#show\u003c/code\u003e action, if the song can't be found for a given artist, redirect to the \u003ccode\u003eindex\u003c/code\u003e of the artist's songs and set a\n\u003ccode\u003eflash[:alert]\u003c/code\u003e of \"Song not found.\"\u003c/li\u003e\n\u003cli\u003eMake sure all tests pass; then, party down!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cimg src=\"http://i.giphy.com/l41lNRz0uXPQLm0RG.gif\" alt=\"Party Down\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHints\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eFor a refresher on the use of \u003ccode\u003eflash\u003c/code\u003e, see the \u003ca href=\"http://guides.rubyonrails.org/action_controller_overview.html#the-flash\"\u003eActionController RailsGuide\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eRemember when filtering nested resources to query for the children through the parent, e.g., \u003ccode\u003e@artist.songs.find_by(id: ...)\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eThere's more than one way to ride the Rails. You could handle not being able to find a record by using \u003ccode\u003erescue ActiveRecord::RecordNotFound\u003c/code\u003e, or you could try using \u003ccode\u003efind_by(id: id)\u003c/code\u003e instead of \u003ccode\u003efind()\u003c/code\u003e and checking to see whether the result is \u003ccode\u003enil\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6e34a5d76f8eb8555a17f5d115d6d0fd","title":"Nested Routes Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"modification-nested-routes-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/modification-nested-routes-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/modification-nested-routes-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/modification-nested-routes-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eImplement nested resources for creation and modification\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to be implementing nested resources for\ncreating and editing songs through an artist.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUsing nested resources, set up routes and controller actions to\ncreate new \u003ccode\u003esong\u003c/code\u003e records through an \u003ccode\u003eartist\u003c/code\u003e. \u003cstrong\u003eHint:\u003c/strong\u003e Don't forget\nto update the strong parameters.\u003c/li\u003e\n\u003cli\u003eSet up routes and controller actions to support editing a \u003ccode\u003esong\u003c/code\u003e as a\nnested resource of an \u003ccode\u003eartist\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eCreate a helper to display a drop-down list of artists if someone\nedits a song directly via \u003ccode\u003e/songs/:id/edit\u003c/code\u003e and to only display the\nartist's name if they are editing through nested routing. Name the\nhelper method \u003ccode\u003eartist_select\u003c/code\u003e. \u003cstrong\u003eHint:\u003c/strong\u003e You'll need to set a variable\nin the controller action to pass to the helper method as an argument\nalong with a \u003ccode\u003esong\u003c/code\u003e instance.\u003c/li\u003e\n\u003cli\u003eValidate that new songs created for an artist via nested routing are\ncreated for valid artists, and redirect to \u003ccode\u003e/artists\u003c/code\u003e if not.\u003c/li\u003e\n\u003cli\u003eValidate that songs being edited via nested routing have a valid artist. Redirect to \u003ccode\u003e/artists\u003c/code\u003e if not.\u003c/li\u003e\n\u003cli\u003eValidate that songs being edited via nested routing are in the\nartist's \u003ccode\u003esongs\u003c/code\u003e collection. Redirect to \u003ccode\u003e/artists/:artist_id/songs\u003c/code\u003e if not.\u003c/li\u003e\n\u003cli\u003eMake sure all tests pass!\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g7b552234f5f2fc5fafe2950cb577dcdc","title":"Partial Locals Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"partial-locals-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/partial-locals-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/partial-locals-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/partial-locals-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eNow that we learned about locals, let's refactor our old codebase and add a\ncouple new features using this new tool.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse the \u003ccode\u003elocals\u003c/code\u003e keyword\u003c/li\u003e\n\u003cli\u003eUnderstand why using instance variables in partials is bad\u003c/li\u003e\n\u003cli\u003eUse a partial to iterate over a collection, passing in a local\u003c/li\u003e\n\u003cli\u003eUse a partial from another controller with a local\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eSo your team's lead engineer looked over the codebase and asked you to not refer\nto instance variables in your partials but rather to pass through local\nvariables. That way, your code will be more explicit about its dependencies\nwhen it calls the partial.\u003c/p\u003e\n\n\u003cp\u003eAlso, the lead engineer asked for a couple new features.\u003c/p\u003e\n\n\u003cp\u003eThe first is that we display \u003cem\u003eall\u003c/em\u003e students on the classroom show page instead\nof singling out the oldest student with a special note. The engineer thinks\nthis isn't very polite.\u003c/p\u003e\n\n\u003cp\u003eSecond, they also want to add some search functionality so that a user can\nsearch for a student by name. They'll type the name in in a form field and\nwe'll use the power of ActiveRecord to find matching data. It's OK if other\nstudents with similar names are returned in the search results.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eRefactor the \u003ccode\u003e_form.html.erb\u003c/code\u003e partial to accept the argument to the\n\u003ccode\u003eform_for\u003c/code\u003e helper as a local. You'll also need to change the \u003ccode\u003enew.html.erb\u003c/code\u003e and\n\u003ccode\u003eedit.html.erb\u003c/code\u003e views as well.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eRefactor the \u003ccode\u003e_student.html.erb\u003c/code\u003e partial to pass through each rendered\nstudent as a local.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eOn the classroom show page, iterate through each classroom's students and\ndisplay each of them using our \u003ccode\u003e_student.html.erb\u003c/code\u003e partial with locals.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a \u003ccode\u003e_classroom.html.erb\u003c/code\u003e partial to display classroom information on\nthe classroom show page.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAdd in search functionality such that users can type in a student name or\nfragment of a student name and and see all matching results on the students\nindex page. The results should be displayed by rendering a\n\u003ccode\u003estudents/_student.html.erb\u003c/code\u003e partial. This will require you to do a \"fuzzy\"\nor \"wildcard\" search in the controller in order to create the set of matches.\nTo help you out, you'll want to write a flexibly matching (or \"wildcard\")\nquery in ActiveRecord that follows the form: \u003ccode\u003eStudent.where(\"name LIKE ?\",\n\"%query%\")\u003c/code\u003e. For example, \u003ccode\u003eStudent.where(\"name LIKE ?\", \"%M%\")\u003c/code\u003e will return\nall students with an \"M\" anywhere in their name. Once you have the search\nfunctionality coded, you should be able to visually test it by visiting\n\u003ccode\u003ehttp://localhost:3000?query=\"search_text\"\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/sql/sql_like.asp\"\u003eSQL LIKE Operator\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g4a44063194d52d323a2bf4c559e37b19","title":"Partials with Locals","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"partial-locals-reading\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/partial-locals-reading/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/partial-locals-reading\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/partial-locals-reading/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eUse the \u003ccode\u003elocals\u003c/code\u003e keyword\u003c/li\u003e \u003cli\u003eUnderstand why using instance variables in partials is non-optimal\u003c/li\u003e \u003cli\u003eUse a partial while rendering a collection\u003c/li\u003e \u003cli\u003eUse a partial from another controller with a local\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003ePartials help us break our code up into reusable chunks.  They also often have implicit dependencies that can lead to bugs.  For example, what if a partial assumes that a \u003ccode\u003e@user\u003c/code\u003e variable is present. If the point is to \u003cem\u003ereuse\u003c/em\u003e partials, if you put it inside of an action that \u003cem\u003edidn't\u003c/em\u003e set a \u003ccode\u003e@user\u003c/code\u003e variable, you're going to have a bug. Using \"locals\" in partials is how we can make these implicit assumptions explicit.  In the following example, we'll unpack exactly what locals are and how they're used.\u003c/p\u003e  \u003ch2\u003eLesson\u003c/h2\u003e  \u003cp\u003eTake a look at the included repo.  You should notice the same piece of view code in a few places.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.name %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.hometown %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou'll find that code (or very similar code) in the following pages:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003ccode\u003eapp/views/authors/show.html.erb\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003eapp/views/authors/index.html.erb\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eapp/views/posts/show.html.erb\u003c/code\u003e.\u003c/li\u003e \u003cli\u003e\n\u003ccode\u003eapp/views/posts/index.html.erb\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eLet's see how we might be vulnerable to bugs. In this \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e we \u003cstrong\u003e\u003cem\u003eassume\u003c/em\u003e\u003c/strong\u003e that there will be a controller-set variable, \u003ccode\u003e@author\u003c/code\u003e. But what if that person-like entity makes more sense to be called \u003ccode\u003e@admin\u003c/code\u003e or \u003ccode\u003e@guest\u003c/code\u003e or \u003ccode\u003e@owner\u003c/code\u003e. We want the same bit of UI, but don't want to have to re-name our variables to make it work. We know what we want in the partial (the \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e), what we want to be \u003cem\u003eflexible\u003c/em\u003e is the \"thing\" that we invoke \u003ccode\u003e.name\u003c/code\u003e and \u003ccode\u003ehometown\u003c/code\u003e on.\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: This should recall the \"why do methods have arguments and parameters\" discussion from when you were learning to write methods.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eLet's start with the author show page.  Watch our \u003cem\u003eprocess\u003c/em\u003e here as we're going to apply it to all views that reference this \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003ehometown\u003c/code\u003e information.\u003c/p\u003e  \u003cp\u003eLet's remove the code from our \u003ccode\u003eapp/views/authors/show.html.erb\u003c/code\u003e page.  Now our file should be empty:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/authors/show.html.erb --\u0026gt;\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can move the removed code into a partial, \u003ccode\u003eapp/views/authors/_author.html.erb\u003c/code\u003e, that now has the following code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/authors/_author.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.name %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.hometown %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTo keep our code in the show page rendering out the same content, we call the partial from the \u003ccode\u003eapp/views/authors/show.html.erb\u003c/code\u003e file.  Doing this, the \u003ccode\u003eapp/views/authors/show.html.erb\u003c/code\u003e file now looks like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= render 'author' %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eGreat!\u003c/p\u003e  \u003cp\u003eNow let's take a look at the \u003ccode\u003eapp/views/posts/show.html.erb\u003c/code\u003e file.  It currently looks like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eInformation About the Post\u003cbr\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.name %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.hometown %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt;\u003cbr\u003e\u0026lt;%= @post.title %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.content %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou can see that lines 2-5 are exactly the same as the code in our authors/author partial.  Let's remove the repetition in our codebase by using that partial instead.  By using the partial, our code will look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eInformation About the Post\u003cbr\u003e\u0026lt;%= render 'authors/author' %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.title %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.content %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Because we are calling a partial from outside the current \u003ccode\u003eapp/views/posts\u003c/code\u003e folder, we must specify the folder that our author partial is coming from by calling \u003ccode\u003erender 'authors/author'\u003c/code\u003e.\u003c/p\u003e \u003c/blockquote\u003e  \u003ch2\u003eThe Problem\u003c/h2\u003e  \u003cp\u003eIn \u003ccode\u003eapp/views/authors/show.html.erb\u003c/code\u003e our source of information about  \u003ccode\u003e.name\u003c/code\u003e and \u003ccode\u003e.hometown\u003c/code\u003e is \u003ccode\u003e@author\u003c/code\u003e; in \u003ccode\u003eapp/views/posts/show.html.erb\u003c/code\u003e the source of information about \u003ccode\u003e.name\u003c/code\u003e and \u003ccode\u003e.hometown\u003c/code\u003e is \u003ccode\u003e@post.author\u003c/code\u003e. If we could tell the partial \"use as your source\" \u003ccode\u003e@author\u003c/code\u003e or \u003ccode\u003e@post.author\u003c/code\u003e, we could share the partial across these two different views.\u003c/p\u003e  \u003cp\u003eThe \u003ccode\u003elocals\u003c/code\u003e parameter to \u003ccode\u003erender\u003c/code\u003e provides this flexibility.\u003c/p\u003e  \u003cp\u003eLet's see how local variables make our code more explicit.\u003c/p\u003e  \u003cp\u003eThis is what the entire show view, \u003ccode\u003eapp/views/posts/show.html.erb\u003c/code\u003e, looks like when \u003ccode\u003elocals\u003c/code\u003e are used:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eInformation About the Post\u003cbr\u003e\u0026lt;%= render partial: \"authors/author\", locals: {post_author: @author} %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.title %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.content %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice a few things:\u003c/p\u003e  \u003col\u003e \u003cli\u003eWe are no longer passing the render method a \u003ccode\u003eString\u003c/code\u003e; we're passing key-value pairs\u003c/li\u003e \u003cli\u003eThe first key-value pair tells Rails the name of the partial to render (\u003ccode\u003e\"authors/author\"\u003c/code\u003e)\u003c/li\u003e \u003cli\u003eThe second key-value pair specifies the \u003ccode\u003elocals\u003c/code\u003e as a \u003ccode\u003eHash\u003c/code\u003e. That \u003ccode\u003eHash\u003c/code\u003e's keys (\u003ccode\u003epost_author\u003c/code\u003e here) will be created as local variables \u003cem\u003ewithin the partial\u003c/em\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWhen we use locals, we need to make sure that the variables we refer to in our partial have the same names as the keys in our locals hash.\u003c/p\u003e  \u003cp\u003eIn our example partial, \u003ccode\u003eapp/views/author/_author.html.erb\u003c/code\u003e, we need to change our code from:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.name %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= @author.hometown %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eto:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= post_author.name %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e  \u0026lt;li\u0026gt; \u0026lt;%= post_author.hometown %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe way we use locals with a partial is similar to how we pass arguments into a method.  In the \u003ccode\u003elocals\u003c/code\u003e \u003ccode\u003eHash\u003c/code\u003e, the \u003ccode\u003epost_author:\u003c/code\u003e key is the argument name, and the value of that argument, \u003ccode\u003e@author\u003c/code\u003e, is the value stored as \u003ccode\u003epost_author\u003c/code\u003e and passed into the method.  We can name the keys whatever we want.\u003c/p\u003e  \u003cp\u003eNow notice that, if we choose to delete the line \u003ccode\u003e\u0026lt;%= render {partial: \"authors/author\", locals: {post_author: @author}} %\u0026gt;\u003c/code\u003e from the posts/show view, calling the partial requires us to pass in data about the author. The \u003ccode\u003e@author = @post.author\u003c/code\u003e line in our \u003ccode\u003ePostsController\u003c/code\u003e may no longer be needed.\u003c/p\u003e  \u003cp\u003eIn fact, with locals, we can completely eliminate the \u003ccode\u003e@author = @post.author\u003c/code\u003e line in the \u003ccode\u003eposts#show\u003c/code\u003e controller action, instead only accessing that data where we need it, in the partial.\u003c/p\u003e  \u003cp\u003eLet's remove that line of code in our controller and in the view pass through the author information by changing our code to the following:\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eapp/controllers/posts_controller\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  ...\u003cbr\u003e  def show\u003cbr\u003e    @post = Post.find(params[:id])\u003cbr\u003e  end\u003cbr\u003e \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003eapp/views/posts/show.html.erb\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eInformation About the Post\u003cbr\u003e\u0026lt;%= render partial: \"authors/author\", locals: {post_author: @post.author} %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.title %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.content %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis code is much better.  We are being more explicit about our dependencies, reducing lines of code in our codebase, and reducing the scope of the author variable.\u003c/p\u003e  \u003cp\u003eDon't worry if you find the syntax for rendering a partial hard to remember –– it is.  You can always reference this guide or the Rails Guides.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eIn this lab we've learned how partials help us DRY out our views and how the \u003ccode\u003elocals\u003c/code\u003e \u003ccode\u003eHash\u003c/code\u003e can be used to create flexibility in our calls to the partials.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials\"\u003eRailsGuide: Partials\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g192a4500dc54ff2a392cf75c6f2e8b62","title":"Persisting State and Displaying State","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-dispatch\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/redux-dispatch/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-dispatch\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-dispatch/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003cp\u003eIn this code-along, you will learn the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHow to persist changes to state.\u003c/li\u003e\n\u003cli\u003eHow to display changes to the state in the view.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAn HTML page, \u003ccode\u003eindex.html\u003c/code\u003e, is provided and already linked to \u003ccode\u003ejs/reducer.js\u003c/code\u003e. Open \u003ccode\u003eindex.html\u003c/code\u003e in browser to access the functions in \u003ccode\u003ereducer.js\u003c/code\u003e and follow along.\u003c/p\u003e\n\u003ch2\u003eBuilding our Counter Application\u003c/h2\u003e\n\u003cp\u003ePreviously, we've had a reducer that updates state. In the example we used, we defined a \u003ccode\u003eswitch\u003c/code\u003e statement with one \u003ccode\u003ecase\u003c/code\u003e and a default:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction changeState(state, action){\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return {count: state.count + 1}\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003elet state = {count: 0}\u003cbr\u003elet action = {type: 'INCREASE_COUNT'}\u003cbr\u003e\u003cbr\u003echangeState(state, action)\u003cbr\u003e// =\u0026gt; {count: 1}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003ePersisting State\u003c/h2\u003e\n\u003cp\u003eWe currently have a problem. Let's call \u003ccode\u003echangeState\u003c/code\u003e multiple times:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003echangeState(state, {type: 'INCREASE_COUNT'})\u003cbr\u003e  // =\u0026gt; {count: 1}\u003cbr\u003echangeState(state, {type: 'INCREASE_COUNT'})\u003cbr\u003e  // =\u0026gt; {count: 1}\u003cbr\u003echangeState(state, {type: 'INCREASE_COUNT'})\u003cbr\u003e  // =\u0026gt; {count: 1}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee that? Our state never increases beyond one. It starts off as zero, and while the \u003ccode\u003echangeState\u003c/code\u003e function returns one more than that, if we look at state, it still returns \u003ccode\u003e{count: 0}\u003c/code\u003e. Now, fixing this in the console isn't so bad. We just write\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estate = changeState(state, {type: 'INCREASE_COUNT'})\u003cbr\u003estate\u003cbr\u003e  =\u0026gt; {count: 1}\u003cbr\u003estate = changeState(state, {type: 'INCREASE_COUNT'})\u003cbr\u003e  =\u0026gt; {count: 2}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we're reassigning state to the return value of our reducer. This way, the second time \u003ccode\u003echangeState\u003c/code\u003e is called, it is using the updated state in its arguments.\u003c/p\u003e\n\u003cp\u003eOk. So let's encapsulate this procedure in a function so that we can just call that method and it will persist our changes. We'll name that function \u003ccode\u003edispatch\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet state = {count: 0};\u003cbr\u003e\u003cbr\u003efunction changeState(state, action){\u003cbr\u003e    switch (action.type) {\u003cbr\u003e      case 'INCREASE_COUNT':\u003cbr\u003e        return {count: state.count + 1}\u003cbr\u003e      default:\u003cbr\u003e        return state;\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = changeState(state, action)\u003cbr\u003e  return state\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edispatch({type: 'INCREASE_COUNT'})\u003cbr\u003e  // =\u0026gt; {count: 1}\u003cbr\u003edispatch({type: 'INCREASE_COUNT'})\u003cbr\u003e  // =\u0026gt; {count: 2}\u003cbr\u003edispatch({type: 'INCREASE_COUNT'})\u003cbr\u003e  // =\u0026gt; {count: 3}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk, it's fixed!! Previously our state was stuck at one, but now we just call our \u003ccode\u003edispatch\u003c/code\u003e function, and pass through our action. Let's walk through it.\u003c/p\u003e\n\u003cp\u003eWe declare our state to equal an object \u003ccode\u003e{count: 0}\u003c/code\u003e. Then, we define our reducer and our new function \u003ccode\u003edispatch\u003c/code\u003e. At the bottom, we call the \u003ccode\u003edispatch\u003c/code\u003e function and pass through our action, \u003ccode\u003e{type: 'INCREASE_COUNT'}\u003c/code\u003e. When we call \u003ccode\u003edispatch\u003c/code\u003e, this calls our \u003ccode\u003echangeState\u003c/code\u003e reducer, and passes the action object to the reducer. When called, the \u003ccode\u003echangeState\u003c/code\u003e reducer also takes in \u003ccode\u003estate\u003c/code\u003e, which has been declared up above.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003estate\u003c/code\u003e is assigned the return value of \u003ccode\u003echangeState\u003c/code\u003e. Since the \u003ccode\u003eINCREASE_COUNT\u003c/code\u003e type was used, the returned value of \u003ccode\u003echangeState\u003c/code\u003e contains a \u003ccode\u003ecount\u003c/code\u003e equal to the previous state's count plus one.\u003c/p\u003e\n\u003cp\u003eThus, our state is updated. Each time \u003ccode\u003edispatch\u003c/code\u003e is called, the current version of \u003ccode\u003estate\u003c/code\u003e is passed into \u003ccode\u003echangeState\u003c/code\u003e, and then \u003ccode\u003estate\u003c/code\u003e is assigned a new value based on what \u003ccode\u003echangeState\u003c/code\u003e returns.\u003c/p\u003e\n\u003ch2\u003eRendering Our State\u003c/h2\u003e\n\u003cp\u003eIgnoring React for a bit, how would we display something like this on a page? And how would we make sure that our HTML updates every time we change our state? Well, to render this on the page we can write a render function that changes our HTML:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction render(){\u003cbr\u003e  document.body.textContent = state.count\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow if we want to call our render function, we'll see our state on the page:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet state = {count: 0};\u003cbr\u003e\u003cbr\u003efunction changeState(state, action){\u003cbr\u003e    switch (action.type) {\u003cbr\u003e      case 'INCREASE_COUNT':\u003cbr\u003e        return {count: state.count + 1}\u003cbr\u003e      default:\u003cbr\u003e        return state;\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = changeState(state, action)\u003cbr\u003e  return state\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction render(){\u003cbr\u003e  document.body.textContent = state.count\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e// call the render function\u003cbr\u003erender()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd presto! Our number is displayed on the page. However, we want to call \u003ccode\u003erender\u003c/code\u003e every time our state changes. And it's safe to say our state will not change unless we call the \u003ccode\u003edispatch\u003c/code\u003e function. So we can ensure that the \u003ccode\u003erender\u003c/code\u003e function runs every time that our \u003ccode\u003edispatch\u003c/code\u003e function is called by changing our \u003ccode\u003edispatch\u003c/code\u003e function to the following.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction render(){\u003cbr\u003e  document.body.textContent = state.count\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = changeState(state, action)\u003cbr\u003e  render()\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003edispatch({type: 'INCREASE_COUNT'})\u003cbr\u003edispatch({type: 'INCREASE_COUNT'})\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eSummary\u003c/h2\u003e\n\u003cp\u003eJust to show everything together finally:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet state = {count: 0};\u003cbr\u003e\u003cbr\u003efunction changeState(state, action){\u003cbr\u003e    switch (action.type) {\u003cbr\u003e      case 'INCREASE_COUNT':\u003cbr\u003e        return {count: state.count + 1}\u003cbr\u003e      default:\u003cbr\u003e        return state;\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003efunction render(){\u003cbr\u003e    document.body.textContent = state.count\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = changeState(state, action)\u003cbr\u003e  render()\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003erender()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you copy the code above into \u003ccode\u003ejs/reducer.js\u003c/code\u003e and open \u003ccode\u003eindex.html\u003c/code\u003e in your browser, in the console, you can confirm everything is working by running \u003ccode\u003edispatch({type: 'INCREASE_COUNT'})\u003c/code\u003e and watch as the displayed count increases!\u003c/p\u003e\n\u003cp\u003eWith just this set of functions, we could actually apply our own Redux pattern to a regular ol' JavaScript and HTML webpage!\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIn this lesson, we've introduced a new function called the \u003ccode\u003edispatch\u003c/code\u003e function. Our \u003ccode\u003edispatch\u003c/code\u003e function solved two problems for us.\u003c/p\u003e\n\u003cp\u003eFirst, it persisted changes to our state. This is because we called the \u003ccode\u003edispatch\u003c/code\u003e function, the \u003ccode\u003edispatch\u003c/code\u003e function called our reducer, and then we took the return value from the reducer and assigned it to be our new state.\u003c/p\u003e\n\u003cp\u003eSecond, it ensured that each time our state updates, our HTML updates to reflect these changes. It does this by simply calling the \u003ccode\u003erender\u003c/code\u003e function. Each time we call \u003ccode\u003edispatch\u003c/code\u003e it's as if we are then calling render. Don't worry about re-rendering too much. Remember that when we integrate with React, React will only be virtually re-rendering the DOM, and then updating the DOM with the smallest number of changes to ensure a performant application.\u003c/p\u003e\n\u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/redux-dispatch\"\u003eRedux Dispatch\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g4c8ecc607f3a52cef0bf45216bddeec1","title":"Phase 4 Code Challenge: Superheroines","type":"Assignment","content":"\u003cp\u003e\u003ca class=\"instructure_file_link\" title=\"phase-2-superheroines-20200928.zip\" href=\"viewer/files/Uploaded%20Media/phase-2-superheroines-20200928.zip?canvas_download=1\u0026amp;canvas_qs_wrap=1\" target=\"_blank\" data-canvas-previewable=\"false\" data-api-endpoint=\"https://learning.flatironschool.com/api/v1/courses/3300/files/896754\" data-api-returntype=\"File\"\u003ephase-4-superheroines-20200928.zip\u003c/a\u003e\u003c/p\u003e","submissionTypes":"a file upload","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gec6c7b936b021c3efe5412755a705258","title":"Phase 4 Project Requirements","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"Rails-project-requirements\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/Rails-project-requirements/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Rails-project-requirements\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/Rails-project-requirements/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003cp\u003eYou've made it! You're ready to build a React application! Before you start ideating, think about some of the project requirements.\u003c/p\u003e\n\u003ch2\u003eRequirements\u003c/h2\u003e\n\u003cp\u003eYou've been through quite a few Project Modes by now and should have some idea how to think about scoping a project, what you can accomplish in the designated time, and what is expected of you in terms of meeting complexity requirements.\u003c/p\u003e\n\u003cp\u003eThe guidelines here are minimal but be sure that you:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eUse a \u003cem\u003eRails API backend\u003c/em\u003e with a separate \u003cem\u003eReact frontend\u003c/em\u003e that are created in two different Github repositories.\u003c/li\u003e\n\u003cli\u003eHave at least three resources (three DB tables) on the backend and your application must have full CRUD actions for at least one resource.\u003c/li\u003e\n\u003cli\u003eMust have at least two different \u003cem\u003eclient-side routes\u003c/em\u003e (i.e. use react-router). Ex: even if your whole app is mostly a single page app, have the form to signup be found at \u003ccode\u003e/signup\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eOptional:\u003c/strong\u003e Your application can have authentication/authorization. You are welcome to use an auth template as discussed in class.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIt is highly suggested that any calls to 3rd party APIs are made \u003cem\u003ethrough your backend\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eExample: A user clicks a button that says 'Get Gifs' * React makes a request to Rails * Rails makes a request to the Giphy API * Rails receives the response from Giphy and sends to React * React receives the response from Rails and you do something with it on the client\u003c/p\u003e\n\u003cp\u003eThis is so you can avoid any \u003cem\u003eCORS\u003c/em\u003e issues. If you are unable to hit an API from your React app due to a CORS restriction, it is very likely that it is impossible to do so. \u003cem\u003eBrief Refresher on CORS: the idea is that from one domain (the port your webpack development server is running on) you are not allowed to access another domain. You must make the request from a server (i.e. Rails), so the request is exempt from the Same-Origin Policy restriction.\u003c/em\u003e\u003c/p\u003e\n\u003ch2\u003eBackend Setup\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003erails new  --api -T --database=postgresql \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's go through this in detail:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e--api\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eMake a \u003ca href=\"http://edgeguides.rubyonrails.org/api_app.html\"\u003eRails 5 API\u003c/a\u003e, basically you're telling Rails you don't want any of the stuff you wouldn't need for an application where Rails is not rendering views. Think the ActionView library (\u003ccode\u003eform_for\u003c/code\u003e, \u003ccode\u003elink_to\u003c/code\u003e, etc..), ERB, Security protections that ensure forms were rendered by the Rails app, things like that.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e-T\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003edon't generate tests for this app\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e--database=postgresql\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eSet this up to use a Postgres (as opposed to SQLite) database. If you ever want to push this to Heroku, Heroku requires a Postgres database. There won't be too much difference in how you have to write your code. You'll have to be sure to run \u003ccode\u003erails db:create\u003c/code\u003e and make sure you have postgres running (i.e you can see the elephant)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eBe sure to do the necessary setup for the \u003ca href=\"https://github.com/cyu/rack-cors\"\u003erack-cors-gem\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eYou may want to use \u003ca href=\"https://github.com/rails-api/active_model_serializers/tree/0-10-stable\"\u003eactive-model-serializers\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eFrontend Setup\u003c/h2\u003e\n\u003cp\u003eTo create your React project, you may use a tool called \u003ca href=\"https://github.com/facebookincubator/create-react-app\"\u003ecreate-react-app\u003c/a\u003e, an awesome project generator developed by Facebook. To use this + \u003ccode\u003enpm install -g create-react-app\u003c/code\u003e - this installs the generator as a global package + In the directory where you'd like to create your project, \u003ccode\u003ecreate-react-app my-project-client\u003c/code\u003e. It's that simple!\u003c/p\u003e\n\u003cp\u003eWe'd recommend to begin by removing any of the default stuff given to you by Create React App that you do not understand. The following are some really great resources on how to think about setting up a React project (\u003cem\u003eSpoiler: They both say the same thing, \"There's no right answer!\"\u003c/em\u003e) * \u003ca href=\"https://github.com/reactjs/reactjs.org/blob/71788c647daa07392a8156609fdbede8e9ed24f7/content/docs/faq-structure.md\"\u003eReact Docs\u003c/a\u003e This was written by Dan Abramov himself \u0026lt;3 \u0026lt;3 \u0026lt;3.... * \u003ca href=\"https://hackernoon.com/the-100-correct-way-to-structure-a-react-app-or-why-theres-no-such-thing-3ede534ef1ed\"\u003eThe 100% Correct Way to Structure a React App (or why there’s no such thing)\u003c/a\u003e\u003c/p\u003e\n\u003ch2\u003eNotes\u003c/h2\u003e\n\u003cp\u003eBy default both your client app and your rails app will run on port 3000. You'll have to specify one or the other to run on a separate port. * Rails: \u003ccode\u003erails s -p \u0026lt;some_number_thats_not_3000\u0026gt;\u003c/code\u003e * React: Check out this \u003ca href=\"https://github.com/facebookincubator/create-react-app/issues/1083\"\u003eissue\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA great article on how \u003ca href=\"http://jeromedalbert.com/how-dhh-organizes-his-rails-controllers/\"\u003eDHH thinks about setting up controllers in Rails\u003c/a\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g22bbbfde2e00dfc32f23585d63ca3970","title":"Phase 4 Rubric","type":"Assignment","content":"\u003cp\u003e\u003cspan\u003eRead the rubric attached below.\u003c/span\u003e\u003c/p\u003e","submissionTypes":null,"graded":false,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g1d7d4cb5f15eb74f5b7e620bf33ddcec","title":"Programmer Partials Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-programmer-profile-partials\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-programmer-profile-partials/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-programmer-profile-partials\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-programmer-profile-partials/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003ePractice using partials.\u003c/li\u003e\n\u003cli\u003eUse all the different techniques you've learned in this unit.\u003c/li\u003e\n\u003cli\u003eDRY up your views with locals.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eWe have a Rails app that showcases some of our favorite programmers. The landing\npage is an index of all of the programmers, and users can click on each\nprogrammer to see his or her profile page. There's just one problem: the views\nare loaded with repetition and clunky iteration and could use some serious\nrefactoring. Your job is to clean up \u003ccode\u003eprogrammers/index.html.erb\u003c/code\u003e and\n\u003ccode\u003eprogrammers/show.html.erb\u003c/code\u003e by using partials.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFork and clone the lab. Run \u003ccode\u003ebundle install\u003c/code\u003e and \u003ccode\u003erake db:migrate\u003c/code\u003e, then \u003ccode\u003erake\ndb:migrate RAILS_ENV=test\u003c/code\u003e. Next, seed the database with some programmers - run\n\u003ccode\u003erake db:seed\u003c/code\u003e - and start the server to see the app in the browser.\u003c/p\u003e\n\n\u003cp\u003eRun \u003ccode\u003erspec\u003c/code\u003e and make the tests pass one at a time! The app will continue to have\nthe same functionality (keep checking it in the browser), but you'll be making\nthe following partials to clean up the views:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eA partial to render the navbar.\u003c/li\u003e\n\u003cli\u003eA partial to render all of the programmers on the index page.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials\"\u003eRails Guides — Using Partials\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActionView/PartialRenderer.html\"\u003eAction View Partials\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://ruby-metaprogramming.rubylearning.com/html/ruby_metaprogramming_2.html\"\u003eMetaprogramming in Ruby\u003c/a\u003e (see section 1.3.2 to learn about \u003ccode\u003esend\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"http://stackoverflow.com/questions/16242121/rails-4-passing-variable-to-partial\"\u003eStack Overflow — Passing Variables to a Partial\u003c/a\u003e (see the first answer for a concise example)\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g0179a881fe5ac89fd305332d131a75fb","title":"Rails and Active Record Models","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-activerecord-models-and-rails-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-activerecord-models-and-rails-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-activerecord-models-and-rails-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-activerecord-models-and-rails-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eActive Record's Role\u003c/h2\u003e\n\n\u003cp\u003eActive Record is the built-in ORM that Rails utilizes to manage the model\naspects of an application. What is an ORM? An ORM is an Object Relational\nMapping system, essentially this is the module that enables your application to\nmanage data in a method driven structure. This means that you are able to run\nqueries, add records, and perform all of the traditional database processes by\nleveraging methods as opposed to writing SQL manually. For example, below is the\ntraditional way that we would query a database of 'posts' using SQL:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM posts\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCompared with leveraging Active Record:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePost.all\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy using Active Record, you are also able to perform advanced query tasks, such\nas method chaining and scoping, which typically require less code and make for a\nmore readable query.\u003c/p\u003e\n\n\u003ch2\u003eActive Record Models\u003c/h2\u003e\n\n\u003cp\u003eSo if we have a database table, why do we need a model file? By using model\nfiles, we are able to create an organized layer of abstraction for our data. An\nimportant thing to remember is that at the end of the day the model file is a\nRuby class. It will typically inherit from the \u003ccode\u003eActiveRecord::Base\u003c/code\u003e class, which\nmeans that it has access to a number of methods that assist in working with the\ndatabase. However, you can treat it like a regular Ruby class, allowing you to\ncreate methods, data attributes, and everything else that you would want to do\nin a class file.\u003c/p\u003e\n\n\u003cp\u003eA typical model file will contain code such as but not limited to the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Scoping/Named/ClassMethods.html\"\u003eCustom scopes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eModel instance methods\u003c/li\u003e\n\u003cli\u003eDefault settings for database columns\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveModel/Validations/ClassMethods.html\"\u003eValidations\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html\"\u003eModel-to-model relationships\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html\"\u003eCallbacks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCustom algorithms\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cem\u003eIf any/all of the items above aren't familiar to you yet, don't worry. We'll\ncover them in future lessons. It's important to have an idea of what can be\nincluded in a model file, even at this early stage.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eCreating an Active Record Model\u003c/h2\u003e\n\n\u003cp\u003eAs a professional Rails developer, you will be expected to build applications by\nleveraging a \u003ca href=\"http://rspec.info/\"\u003eBDD\u003c/a\u003e process, so we will walk through how to\nbuild each feature with a test-first approach so that the tests can lead our\ndevelopment. However, please focus on the implementation code so that you can\nget a firm understanding of how to build a model, database table, etc.\u003c/p\u003e\n\n\u003cp\u003eIn order to get started, we will first create an RSpec test. We've provided a\nbasic skeleton of a Rails application using RSpec in this repo.\u003c/p\u003e\n\n\u003cp\u003eTo generate this app, we installed the Rails gem, then ran\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# the -T flag tells the Rails project generator not to\u003cbr\u003e# include TestUnit, the default testing framework:\u003cbr\u003erails new rails-activerecord-models-and-rails-readme -T\u003cbr\u003e\u003cbr\u003e# The Rails project generator created this directory for us:\u003cbr\u003ecd rails-activerecord-models-and-rails-readme\u003cbr\u003e\u003cbr\u003e# We modified the Gemfile to include\u003cbr\u003e# gem 'rspec-rails', '~\u0026gt; 3.0'\u003cbr\u003e# in the :development, :test group, then ran:\u003cbr\u003e\u003cbr\u003ebundle install\u003cbr\u003e\u003cbr\u003e# Finally, we created the initial RSpec config:\u003cbr\u003erails g rspec:install\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet's create a new file: \u003ccode\u003espec/models/post_spec.rb\u003c/code\u003e. In that file, place the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erequire 'rails_helper'\u003cbr\u003e\u003cbr\u003edescribe Post do\u003cbr\u003e\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we run \u003ccode\u003ebundle exec rspec\u003c/code\u003e, it will throw an error since we don't have any\ncode in the application for our \u003ccode\u003ePost\u003c/code\u003e model yet. To fix this, create a new file\nin the \u003ccode\u003eapp/models\u003c/code\u003e directory called \u003ccode\u003epost.rb\u003c/code\u003e, and add the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Post\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will get the tests passing, but it still has some weird errors because we\nneed to create a schema file. You can do that by running \u003ccode\u003erake db:migrate\u003c/code\u003e.\n(There is no need to create a database with \u003ccode\u003erake db:create\u003c/code\u003e first. The test\nsuite will create a test database for us when we run our tests.) This will\ncreate the schema file and clear the warning. Now update the \u003ccode\u003ePost\u003c/code\u003e spec to test\nfor a \u003ccode\u003ePost\u003c/code\u003e being created. It should look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe Post do\u003cbr\u003e  it 'can be created' do\u003cbr\u003e    post = Post.create!(title: \"My title\", description: \"The post description\")\u003cbr\u003e    expect(post).to be_valid\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning this test gives us the error of: \u003ccode\u003eundefined method 'create!' for Post:Class\u003c/code\u003e. To implement this feature, let's create the database table for our\nposts. Create a new directory in the \u003ccode\u003edb/\u003c/code\u003e directory called \u003ccode\u003emigrate\u003c/code\u003e, and add a\nnew file called \u003ccode\u003e001_create_posts.rb\u003c/code\u003e. To that file, add the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass CreatePosts \u0026lt; ActiveRecord::Migration\u003cbr\u003e  def change\u003cbr\u003e    create_table :posts do |t|\u003cbr\u003e      t.string :title\u003cbr\u003e      t.text :description\u003cbr\u003e\u003cbr\u003e      t.timestamps null: false\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is a basic migration that will create a \u003ccode\u003eposts\u003c/code\u003e table that will have title\nand description columns, along with the built in timestamps. For a refresher on\nmigrations, see \u003ca href=\"http://edgeguides.rubyonrails.org/active_record_migrations.html\"\u003ethis documentation\u003c/a\u003e. This migration follows the\nstandard naming convention. When you want to create a table, the migration's\nclass name should reflect that; hence, \u003ccode\u003eCreatePosts\u003c/code\u003e. This is then reiterated by\nthe \u003ccode\u003e:posts\u003c/code\u003e argument passed to the \u003ccode\u003ecreate_table\u003c/code\u003e method. The filename itself\nneeds to be unique, and when you generate a migration automatically through a\nmodel or scaffold generator you will notice that the migration file name is\nprepended with a timestamp value to make sure that we can run migrations in the\norder they were written. \u003c/p\u003e\n\n\u003cp\u003eThe timestamp also plays a role in making sure that only new migrations run when\nwe run \u003ccode\u003erake db:migrate\u003c/code\u003e. The \u003ccode\u003edb/schema.rb\u003c/code\u003e file is updated with a version number \ncorresponding to the timestamp of the last migration you ran. When you run \n\u003ccode\u003erake db:migrate\u003c/code\u003e again, only migrations whose timestamps are greater than the \nschema's version number will run. So, the numbers at the beginning of the filenames \nof your migrations are required so ActiveRecord can be sure to run each of your \nmigrations just once and in the proper order.\u003c/p\u003e\n\n\u003cp\u003eAfter running \u003ccode\u003erake db:migrate\u003c/code\u003e we can see that our \u003ccode\u003edb/schema.rb\u003c/code\u003e file has been\nupdated with our new posts table. However, if we run our tests again we will\nstill see them failing due to the same error: \u003ccode\u003eundefined method `create!' for Post:Class\u003c/code\u003e. This is because we left out one very important piece of code from\nthe \u003ccode\u003ePost\u003c/code\u003e model. In order to leverage built-in methods such as \u003ccode\u003e.create!\u003c/code\u003e, we\nneed to have the Post class inherit from \u003ccode\u003eActiveRecord::Base\u003c/code\u003e. Update the\n\u003ccode\u003epost.rb\u003c/code\u003e model file to match the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Post \u0026lt; ActiveRecord::Base\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow all of the tests are passing and we can create a new post correctly. Even\nthough we know this is working because our tests are passing, let's still test\nthis in the console. Open up the Rails console by running \u003ccode\u003erails console\u003c/code\u003e.\nRunning the console will load the entire Rails environment and give you command\nline access to the app and the database. The console is a powerful tool that you\ncan leverage in order to test out scripts, methods, and database queries.\u003c/p\u003e\n\n\u003cp\u003eOnce the session has started, run the following command to ensure it recognizes\nour new Post model:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePost.all\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf everything is set up properly, you will see that it returns an empty Active\nRecord object. Let's test creating a record using the console:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePost.create!(title: \"My title\", description: \"The post description\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow run the query:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePost.last\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt returned our newly-created post!\u003c/p\u003e\n\n\u003cp\u003eWith our \u003ccode\u003ePost\u003c/code\u003e model working, let's add a new feature that returns a summary of\na post. As usual, start off by creating a spec for the feature:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eit 'has a summary' do\u003cbr\u003e  post = Post.create!(title: \"My title\", description: \"The post description\")\u003cbr\u003e  expect(post.post_summary).to eq(\"My title - The post description\")\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we run this, we'll get a failure since we do not have a \u003ccode\u003epost_summary\u003c/code\u003e method\nfor \u003ccode\u003ePost\u003c/code\u003e. Add that to the model file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef post_summary\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis now results in a failure since the method currently doesn't return anything. Update the \u003ccode\u003epost_summary\u003c/code\u003e method as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef post_summary\u003cbr\u003e  self.title + \" - \" + self.description\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow if you run the tests, all of them are passing and our \u003ccode\u003ePost\u003c/code\u003e model has an\ninstance method that returns a post summary. You can test this out in the Rails\nconsole as well by running a query on the record we created, such as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePost.last.post_summary\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt should return the summary value of the last post we created: \u003ccode\u003e\"My title - The post description\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAs you may have noticed, we did not have to create a controller, route, view,\netc. in order to get the \u003ccode\u003ePost\u003c/code\u003e model working. The data aspect of the\napplication can work separately from the view and data flow logic. This level of\nabstraction makes it efficient to test data behavior without having it strongly\ncoupled to how it is rendered to the user. With that being said, it is\nconsidered a best practice to have your controller and view files follow the\nproper naming convention so that the MVC associations are readable. For example,\nto build out the controller and view code for our \u003ccode\u003ePost\u003c/code\u003e model, we would create\nthe following structure:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a \u003ccode\u003eposts_controller.rb\u003c/code\u003e file that calls on the \u003ccode\u003ePost\u003c/code\u003e model\u003c/li\u003e\n\u003cli\u003eCreate a \u003ccode\u003eviews/posts/\u003c/code\u003e directory that stores the views related to the \u003ccode\u003ePost\u003c/code\u003e model\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAlso, if you are coming from other programming languages you may be wondering\nhow exactly we are able to connect to the database automatically without having\nto create connection strings. The reason for this simplicity resides in the\n\u003ccode\u003econfig/database.yml\u003c/code\u003e file that was generated when we created our application\nand ran \u003ccode\u003erake db:create\u003c/code\u003e. In that file, you will see that the development, test,\nand production databases are all configured. From that stage, the\n\u003ccode\u003eActiveRecord::Base.connection\u003c/code\u003e method connects your application to the\ndatabase, which is another benefit of having our model classes inherit from the\n\u003ccode\u003eActiveRecord::Base\u003c/code\u003e module.\u003c/p\u003e\n\n\u003cp\u003eBeing able to work in different environments is one of the strong points of\nRails, and the database.yml file takes advantage of this feature by having\ndifferent database options for each type of environment. If you take a look at\nthe file, you can see that you can establish different database adapters, pools,\ntimeout values, etc. for each environment specifically. This allows for you to\nhave a setup such as using SQLite locally and Postgres in production, along with\nhaving a segmented database environment for your testing suite. Some of these\nitems are components that you won't need until you get into more advanced\napplications. However, it's good to know where these items are located in the\nfile system for when you get to that point. Essentially, this file includes a\nlot of stuff you will rarely have to handle, but just remember that if anything\nrequires database configuration it will be here.\u003c/p\u003e\n\n\u003ch2\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eWe covered quite a bit of material in this lesson. You should now have a firm\nunderstanding of Active Record models in Rails. Active Record is a powerful tool\nthat enables developers to focus on the logic of their applications while\nstreamlining processes such as connecting to the database, running queries, and\nmuch more.\u003c/p\u003e\n\n\u003cp class=\"util--hide\"\u003eView \u003ca href=\"https://learn.co/lessons/rails-activerecord-models-and-rails-readme\"\u003eActive Record Models and Rails\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gc158211ca188326ac6210c0571102321","title":"Rails and Active Record Models Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-activerecord-model-rails-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-activerecord-model-rails-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-activerecord-model-rails-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-activerecord-model-rails-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a migration by hand\u003c/li\u003e\n\u003cli\u003eCreate a model by hand\u003c/li\u003e\n\u003cli\u003eBuild a model instance method\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eBuilding a Model\u003c/h2\u003e\n\n\u003cp\u003eYou can find the test suite for this application in the \u003ccode\u003espec/models\u003c/code\u003e directory and run them with the command: \u003ccode\u003ebundle exec rspec\u003c/code\u003e. This lab tests to ensure that your app can create records and that it has an instance method that can be called on the model.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a table by hand named \u003ccode\u003estudents\u003c/code\u003e that has the columns: \u003ccode\u003efirst_name\u003c/code\u003e and \u003ccode\u003elast_name\u003c/code\u003e – this should be accomplished by creating a new database migration\u003c/li\u003e\n\u003cli\u003eCreate a model for the students' table that inherits from ActiveRecord::Base\u003c/li\u003e\n\u003cli\u003eImplement a \u003ccode\u003eto_s\u003c/code\u003e instance method in the model that will return the concatenated first and last names for students. For example: \u003ccode\u003efirst_name: \"Daenerys\", last_name: \"Targaryen\" =\u0026gt; \"Daenerys Targaryen\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp data-visibility=\"hidden\"\u003eView \u003ca href=\"https://learn.co/lessons/rails-activerecord-model-rails-lab\" title=\"ActiveRecord Model Rails Lab\"\u003eActiveRecord Model Rails Lab\u003c/a\u003e on Learn.co and start learning to code for free.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g85bff3e3083b0acdc7ce258d65178ab9","title":"Rails Create Action","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-create-action-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-create-action-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-create-action-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-create-action-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn this lesson, we'll code a \u003ccode\u003ecreate\u003c/code\u003e action — '\u003cstrong\u003eC\u003c/strong\u003e' in the '\u003cstrong\u003eCRUD\u003c/strong\u003e' life\ncycle — that saves a new \u003ccode\u003ePost\u003c/code\u003e object and then redirects to the newly-created\npost's \u003ccode\u003eshow\u003c/code\u003e page.\u003c/p\u003e\n\n\u003cp\u003eBefore implementing this functionality, let's first open up\na Rails console session and create a record manually:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epost = Post.new\u003cbr\u003epost.title = \"Title Goes Here\"\u003cbr\u003epost.description = \"Desc goes here...\"\u003cbr\u003epost.save\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis syntax will let you manually create a new \u003ccode\u003ePost\u003c/code\u003e record with \u003ccode\u003etitle\u003c/code\u003e and\n\u003ccode\u003edescription\u003c/code\u003e attributes. After running the \u003ccode\u003esave\u003c/code\u003e method in the console, you\nwill see output similar to the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e (0.1ms)  begin transaction\u003cbr\u003eSQL (0.3ms)  INSERT INTO \"posts\" (\"title\", \"description\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"title\", \"Title Goes Here\"], [\"description\", \"Desc goes here...\"], [\"created_at\", \"2015-11-23 22:26:43.799742\"], [\"updated_at\", \"2015-11-23 22:26:43.799742\"]]\u003cbr\u003e (1.2ms)  commit transaction\u003cbr\u003e=\u0026gt; true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you can see, the \u003ccode\u003esave\u003c/code\u003e method generates a SQL script that inserts a new\nrecord into the database. Each of the \u003ccode\u003ePost\u003c/code\u003e object's attributes is passed into\nthe SQL statement, and the method returns \u003ccode\u003etrue\u003c/code\u003e upon a successful save. At a\nhigh level, this is what the \u003ccode\u003ecreate\u003c/code\u003e method in our \u003ccode\u003ePostsController\u003c/code\u003e will be\ndoing.\u003c/p\u003e\n\n\u003cp\u003eOpen up the \u003ccode\u003eposts_controller.rb\u003c/code\u003e file. Let's do a few things to replicate the\nbehavior we had in the console:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eCreate a new \u003ccode\u003ePost\u003c/code\u003e instance\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ePass in the parameters from the form\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSave the record\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eTo build this behavior initially, let's copy and paste the code that we ran in\nthe console. The only key difference is that now, instead of assigning\n\u003ccode\u003epost.title\u003c/code\u003e and \u003ccode\u003epost.description\u003c/code\u003e manually, we want to be able to pull in form\ndata - stuff that a user has typed in and submitted. As long as the form is\nproperly connected to the controller and model, we can populate the \u003ccode\u003etitle\u003c/code\u003e and\n\u003ccode\u003edescription\u003c/code\u003e attributes based on the user input:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef create\u003cbr\u003e  post = Post.new\u003cbr\u003e  post.title = params[:title]\u003cbr\u003e  post.description = params[:description]\u003cbr\u003e  post.save\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can access each of input values in a form using the hash syntax to grab the\nelements from the \u003ccode\u003eparams\u003c/code\u003e hash. When a user submits a form, it is the \u003ccode\u003eparams\u003c/code\u003e\nhash that contains all the input data. As long as the form is routed to the\n\u003ccode\u003ecreate\u003c/code\u003e method we've written (in \u003ccode\u003econfig/routes.rb\u003c/code\u003e), we'll be able to\ninitialize a new instance of \u003ccode\u003ePost\u003c/code\u003e, grab those input values from \u003ccode\u003eparams\u003c/code\u003e,\nassign them the \u003ccode\u003epost\u003c/code\u003e instance attributes and save the instance to our\ndatabase.\u003c/p\u003e\n\n\u003cp\u003eWe've already got the route and our form created. If you go to \u003ccode\u003e/posts/new\u003c/code\u003e,\nfill out the form, and submit it, you'll get the error shown below.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/flatiron-bucket/readme-lessons/template_error_create.png\" alt=\"Missing Create Template Error\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThat's OK! Rails is simply complaining that it can't find a \u003ccode\u003ecreate\u003c/code\u003e view\ntemplate since, by default, it's trying to render a template called\n\u003ccode\u003ecreate.html.erb\u003c/code\u003e (which doesn't exist). Remember, Rails tries to map each\ncontroller action directly to a template. However, with actions like \u003ccode\u003ecreate\u003c/code\u003e,\nwe don't want a view template –– all we want is for the action to communicate\nwith the database and then redirect to a different page.\u003c/p\u003e\n\n\u003cp\u003eIf you open up the console, you'll see that the record was successfully created\nin the database even though we ran into an error page. Our form and \u003ccode\u003ecreate\u003c/code\u003e\naction are working properly. How do we know the record was successfully created?\nThere are a couple of ways to check:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eType \u003ccode\u003ePost.last\u003c/code\u003e into the Rails console, and it will display the most\nrecently created record. We can look at the record's \u003ccode\u003ecreated_at\u003c/code\u003e attribute to\nensure the timestamp is current.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe can also simply scroll up through the Rails server logs. All SQL\nstatements are printed out in the log, so it's just a matter of locating the\ncorrect \u003ccode\u003eINSERT\u003c/code\u003e statement (example below):\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e (0.1ms)  begin transaction\u003cbr\u003eSQL (0.7ms)  INSERT INTO \"posts\" (\"title\", \"description\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"title\", \"My Post\"], [\"description\", \"My desc\"], [\"created_at\", \"2015-12-26 18:00:31.393419\"], [\"updated_at\", \"2015-12-26 18:00:31.393419\"]]\u003cbr\u003e (2.2ms)  commit transaction\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo fix the 'missing template' error, we simply need to redirect the user after\nthey've filled out the form. Let's do two refactors:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eUpdate the code with a redirect that leverages a route helper method\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eRefactor the \u003ccode\u003epost\u003c/code\u003e variable into an instance variable\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe revised \u003ccode\u003ecreate\u003c/code\u003e method should look something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef create\u003cbr\u003e  @post = Post.new\u003cbr\u003e  @post.title = params[:title]\u003cbr\u003e  @post.description = params[:description]\u003cbr\u003e  @post.save\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this refactored \u003ccode\u003ecreate\u003c/code\u003e action, we're following the convention of\nredirecting to the new resource's \u003ccode\u003eshow\u003c/code\u003e page. It stands to reason that a user\nwho submits a new post would then like to view the successfully-created post.\nWith that being said, the page flow is not set in stone, and we could've\nredirected the \u003ccode\u003ecreate\u003c/code\u003e action to the \u003ccode\u003eindex\u003c/code\u003e action just as easily.\u003c/p\u003e\n\n\u003cp\u003eAll our tests should be passing now, and the site is working in the browser.\nUsers are able to create records in the database using the HTML form, and, upon\nsubmitting a new post, they're automatically redirected to the \u003ccode\u003eshow\u003c/code\u003e page for\nthe post they just created. In future lessons, we'll refactor this further to\nincorporate awesome Rails components like \u003ccode\u003estrong parameters\u003c/code\u003e and \u003ccode\u003eerror handling\u003c/code\u003e, but don't worry about those yet. Great job!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g695a976fe25a97be4a990eb366737cc4","title":"Rails Create Action Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-create-action-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-create-action-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-create-action-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-create-action-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild a working \u003ccode\u003ecreate\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eUse a \u003ccode\u003eform_tag\u003c/code\u003e to create a new form that submits to the \u003ccode\u003eindex\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eCorrectly name form fields so that they end up at the top level of the \u003ccode\u003eparams\u003c/code\u003e hash\u003c/li\u003e\n\u003cli\u003eAssign data from \u003ccode\u003eparams\u003c/code\u003e to a \u003ccode\u003eStudent\u003c/code\u003e object in the \u003ccode\u003ecreate\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eSave that \u003ccode\u003eStudent\u003c/code\u003e object in the \u003ccode\u003ecreate\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eCreate a \u003ccode\u003eredirect_to\u003c/code\u003e from the \u003ccode\u003ecreate\u003c/code\u003e action to the \u003ccode\u003eshow\u003c/code\u003e action\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eMany of the spec tests are already passing for this lab, but there are some additional ones –– including our first use of controller tests –– located here:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eController Specs\u003c/strong\u003e - \u003ccode\u003especs/controllers/students_controller_spec.rb\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eCapybara Specs\u003c/strong\u003e - \u003ccode\u003especs/features/student_spec.rb:37\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen this lab is complete, your application should have the following behavior:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eUser fills out the form on \u003ccode\u003estudents/new\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhen the form is submitted, a new record is created in the database\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAfter the user submits the form, they are redirected to the \u003ccode\u003eshow\u003c/code\u003e page that renders the \u003ccode\u003eStudent\u003c/code\u003e record that they created\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eMake sure to use a route helper method to redirect to the \u003ccode\u003eshow\u003c/code\u003e page at the end of the \u003ccode\u003ecreate\u003c/code\u003e method. You can find the correct syntax for this route by running \u003ccode\u003erake routes\u003c/code\u003e in the terminal.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/rails-create-action-readme\"\u003eReading\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Persistence/ClassMethods.html\"\u003eDocumentation\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gaea76ee6830b9dd069d465a94136ec01","title":"Rails CRU Form_For Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-cru-form_for-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-cru-form_for-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-cru-form_for-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-cru-form_for-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild RESTful actions for index, show, new, create, edit, update\u003c/li\u003e\n\u003cli\u003eUse form_for for all forms (no need to share forms or partials)\u003c/li\u003e\n\u003cli\u003eCorrectly redirect when needed\u003c/li\u003e\n\u003cli\u003eInterlink between pages using route helpers\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eYou've been tasked with building a Rails app called \u003cstrong\u003eBeats by Rails\u003c/strong\u003e, the app will need to have three separate models:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eSongs\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eArtists\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eGenres\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe data relationship will look something like this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eA song belongs to an artist\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eA song belongs to a genre\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eA genre has many songs\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAn artist has many songs\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe tests are in the \u003ccode\u003espec/features\u003c/code\u003e directory for each model. You will need to build in the ability to \u003ccode\u003ecreate\u003c/code\u003e, \u003ccode\u003eupdate\u003c/code\u003e, and \u003ccode\u003eshow\u003c/code\u003e for each model. And for the song \u003ccode\u003eshow\u003c/code\u003e page you need to have it display each of the song's genre and artist, and link to the respective genre and artist \u003ccode\u003eshow\u003c/code\u003e pages.\u003c/p\u003e\n\n\u003cp\u003eThe database tables should look like this (note each column type):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etable \"artists\"\u003cbr\u003e  string   \"name\"\u003cbr\u003e  text     \"bio\"\u003cbr\u003e\u003cbr\u003etable \"genres\"\u003cbr\u003e  string   \"name\"\u003cbr\u003e\u003cbr\u003etable \"songs\"\u003cbr\u003e  string   \"name\"\u003cbr\u003e  integer  \"artist_id\"\u003cbr\u003e  integer  \"genre_id\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eKey notes to remember\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eYou will need to use \u003ca href=\"https://github.com/learn-co-curriculum/strong-params-basics\"\u003estrong params\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDon't worry about integrating drop down form elements for the genre and artist selections on the song form pages yet, simply enter in the ID in for each element\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYou can use the \u003ccode\u003eresource\u003c/code\u003e, \u003ccode\u003emodel\u003c/code\u003e, \u003ccode\u003emigration\u003c/code\u003e, and \u003ccode\u003econtroller\u003c/code\u003e generators, but do not use the \u003ccode\u003escaffold\u003c/code\u003e generator\n\u003cem\u003eTop Tip: Remember to use the --no-test-framework flag when generating models and controllers to avoid generating unnecessary testing frameworks!\u003c/em\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gd230ff3db0077264cae6339e50952022","title":"Rails Dynamic Request","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-dynamic-request-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-dynamic-request-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-dynamic-request-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-dynamic-request-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eReview\u003c/h2\u003e  \u003cp\u003eYou already know how to create a static request, which is where you create a page that doesn't take any parameters and simply renders a view. For example: \u003ccode\u003elocalhost:3000/about\u003c/code\u003e. For Rails to process this request, the \u003ccode\u003eroutes.rb\u003c/code\u003e file contains a route such as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eget 'about', to: \"static#about\" \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is mapped to the \u003ccode\u003estatic\u003c/code\u003e controller and its \u003ccode\u003eabout\u003c/code\u003e action, which renders the \u003ccode\u003eabout.html.erb\u003c/code\u003e view template.\u003c/p\u003e  \u003ch2\u003eDynamic Requests\u003c/h2\u003e  \u003cp\u003eAccording to REST, if we want to retrieve the post with an id of \u003ccode\u003e42\u003c/code\u003e, we should navigate to \u003ccode\u003e/posts/42\u003c/code\u003e. It's technically possible to create a new line in your routes file for each post... but that would quickly get ridiculous. You would have to modify your web server every time someone posts! Enter: dynamic routes. A breakdown of the dynamic route process flow is below:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eThe \u003ccode\u003eroutes.rb\u003c/code\u003e file takes in the request and processes it like normal, except this time it also parses the \u003ccode\u003e42\u003c/code\u003e as a parameter and passes it to the posts controller.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eFrom that point, the controller action that you write will parse the \u003ccode\u003e42\u003c/code\u003e parameter and run a query on the Post model, storing the result in an instance variable.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eFinally, the controller passes the instance variable to the associated view, which renders details of that specific post record for the client.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eIn review, what's the difference between static and dynamic routes?\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eStatic routes render pages that have a hard-coded path connected to them. For example, the \u003ccode\u003e/welcome\u003c/code\u003e path will always show the \u003ccode\u003ewelcome\u003c/code\u003e page.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eDynamic routes will render different data based on the parameters passed to the route. For example, when \u003ccode\u003e42\u003c/code\u003e is passed in as the parameter to the \u003ccode\u003e/posts/:id\u003c/code\u003e route, the app should render the data for the \u003ccode\u003epost\u003c/code\u003e with an ID of \u003ccode\u003e42\u003c/code\u003e. When \u003ccode\u003e222\u003c/code\u003e is passed in, the app should render the data for the \u003ccode\u003epost\u003c/code\u003e with an ID of \u003ccode\u003e222\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eCode Implementation\u003c/h2\u003e  \u003cp\u003eIn order to setup a dynamic request feature, we will start by writing a test to verify that the page exists:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# spec/features/post_spec.rb\u003cbr\u003e\u003cbr\u003erequire 'rails_helper'\u003cbr\u003e\u003cbr\u003edescribe 'navigate' do\u003cbr\u003e  before do\u003cbr\u003e    @post = Post.create(title: \"My Post\", description: \"My post desc\")\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it 'loads the show page' do\u003cbr\u003e    visit \"/posts/#{@post.id}\"\u003cbr\u003e    expect(page.status_code).to eq(200)\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRunning \u003ccode\u003erspec\u003c/code\u003e gives us an expected error of: \u003ccode\u003eActionController::RoutingError: No route matches [GET] \"/posts/1\"\u003c/code\u003e. To correct this error, let's draw a route in \u003cem\u003econfig/routes.rb\u003c/em\u003e that maps to a show action in the PostsController:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eget 'posts/:id', to: 'posts#show' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHere you will notice something that's different from the static route. The \u003ccode\u003e/:id\u003c/code\u003e tells the routing system that this route can receive a parameter and that the parameter will be passed to the controller's show action. With this route in place, let's run our tests again.\u003c/p\u003e  \u003cp\u003eYou should see a new failure this time: \u003ccode\u003eActionController::RoutingError: uninitialized constant PostsController\u003c/code\u003e. Once we stub out a \u003ccode\u003ePostsController\u003c/code\u003e class in \u003ccode\u003eapp/controllers/posts_controller.rb\u003c/code\u003e, running the tests again will give us yet another new failure: \u003ccode\u003eAbstractController::ActionNotFound: The action 'show' could not be found for PostsController\u003c/code\u003e. This means that we need to create a corresponding \u003ccode\u003eshow\u003c/code\u003e action in the PostsController. Let's get this failure fixed with the code below:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003eclass PostsController \u0026lt; ApplicationController\u003cbr\u003e  def show\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRun the tests again. Now we see a failure saying that we are missing the \u003ccode\u003eposts/show\u003c/code\u003e view template. Let's fix that by creating a \u003ccode\u003eposts\u003c/code\u003e folder in the \u003ccode\u003eviews\u003c/code\u003e directory and creating a \u003ccode\u003eshow.html.erb\u003c/code\u003e file in the new \u003ccode\u003eviews/posts\u003c/code\u003e directory.\u003c/p\u003e  \u003cp\u003eRunning the tests now shows that we're all green, which means that the request will be properly routed through the controller and view and returns an HTTP status code of \u003ccode\u003e200\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf you start the Rails server and navigate to \u003ccode\u003e/posts/1\u003c/code\u003e or any other \u003ccode\u003epost\u003c/code\u003e record, the router will know what you're talking about. However, the controller still needs to be told what to do with the \u003ccode\u003eid\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eNow that we have the routing configured, let's build a test to see if the post content is rendered on the show page with the title in an \u003ccode\u003eh1\u003c/code\u003e tag and the description in a \u003ccode\u003ep\u003c/code\u003e tag. We'll start by creating a test for the title:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# spec/features/post_spec.rb\u003cbr\u003e\u003cbr\u003erequire 'rails_helper'\u003cbr\u003e\u003cbr\u003edescribe 'navigate' do\u003cbr\u003e  before do\u003cbr\u003e    @post = Post.create(title: \"My Post\", description: \"My post desc\")\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it 'loads the show page' do\u003cbr\u003e    visit \"/posts/#{@post.id}\"\u003cbr\u003e    expect(page.status_code).to eq(200)\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  it 'shows the title on the show page in an h1 tag' do\u003cbr\u003e    visit \"/posts/#{@post.id}\"\u003cbr\u003e    expect(page).to have_css(\"h1\", text: \"My Post\")\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis gives us a failure that says: \u003ccode\u003eexpected to find css \"h1\" with text \"My Post\" but there were no matches\u003c/code\u003e. We first need to get the ID sent by the user through the dynamic URL. This variable is passed into the controller in a hash called \u003ccode\u003eparams\u003c/code\u003e. Since we named the route \u003ccode\u003e:id\u003c/code\u003e, the ID will be the value of the \u003ccode\u003e:id\u003c/code\u003e key, stored in \u003ccode\u003eparams[:id]\u003c/code\u003e. Let's set that up here:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef show\u003cbr\u003e  @post = Post.find(params[:id])\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn this line, our show action is running a database query on the Post model that will return a post with an ID that matches the route parameters. It will store this record in the \u003ccode\u003e@post\u003c/code\u003e instance variable and make it available to the \u003ccode\u003eshow.html.erb\u003c/code\u003e file. Let's get our spec passing by placing the post's title on the show view template:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/show.html.erb --\u0026gt;\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe're back to green! Now let's implement the description spec:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eit 'shows the description on the show page in a p tag' do\u003cbr\u003e  visit \"/posts/#{@post.id}\"\u003cbr\u003e  expect(page).to have_css(\"p\", text: \"My post desc\")\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will give us a failure since there are no matches on the template yet. To implement this fix, update the view:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/show.html.erb --\u0026gt;\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;\u0026lt;%= @post.description %\u0026gt;\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we're passing again, and you now know how to create dynamic routes in Rails! However, we would be remiss if we didn't follow the full \"Red, Green, Refactor\" TDD workflow.\u003c/p\u003e  \u003ch3\u003eResource routing\u003c/h3\u003e  \u003cp\u003eThere are a few elements of the application that can be refactored. Instead of the long, drawn out \u003ccode\u003eget\u003c/code\u003e route we placed in our \u003ccode\u003eroutes.rb\u003c/code\u003e file, we can use Ruby's RESTful defaults and the \u003ccode\u003eresources\u003c/code\u003e method. Problem is, we only have one of the seven RESTful routes. Thankfully, we can pass in an \u003ccode\u003eonly\u003c/code\u003e option, selecting which of the seven RESTful routes we care about. In this case, we only care about the \u003ccode\u003eshow\u003c/code\u003e action.\u003c/p\u003e  \u003cp\u003eRemove:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eget 'posts/:id', to: 'posts#show' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eReplace with:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eresources :posts, only: :show \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe will go into detail on what the \u003ccode\u003eresources\u003c/code\u003e method does in a future lesson. For right now, just know that it deals with the seven key RESTful routes. In this case, we limited it to only make the \u003ccode\u003eshow\u003c/code\u003e action available.\u003c/p\u003e  \u003cp\u003eRun the tests for a final time, and they should still be passing. Nice work!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g152d86cdf79200962a9d1434457b651d","title":"Rails Edit and Update Actions Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"strong-params-basics\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/strong-params-basics/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/strong-params-basics\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/strong-params-basics/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eWhat are Strong Params?\u003c/h2\u003e\n\n\u003cp\u003eTo understand the goal of strong params, let's pretend that you run a pharmacy. What would happen if you let all prescription orders come through without checking for valid prescriptions, driver licenses, etc.? (Spoiler alert: you'd probably end up in jail.) It would be criminal to run a pharmacy without verifying that orders were legitimate. In the same way, Rails  wanted to shore up some security vulnerabilities. Since Rails 4+, developers are required to whitelist the parameters that are permitted to be sent to the database from a form.\u003c/p\u003e\n\n\u003ch2\u003eSetup\u003c/h2\u003e\n\n\u003cp\u003eTo prevent confusion, in previous lessons I manually turned off the strong parameter requirement. Let's discover first why strong params were created and then work with them.\u003c/p\u003e\n\n\u003ch2\u003eWhy Strong Params\u003c/h2\u003e\n\n\u003cp\u003eIn the Rails app in this lesson there is our blog application with Strong Params \u003cem\u003edisabled\u003c/em\u003e. Create a new Post by going to \u003ccode\u003e/posts/new\u003c/code\u003e. Once you have created that post, go ahead and edit it at \u003ccode\u003e/posts/1/edit\u003c/code\u003e. You'll notice there is no Description field! In this case, I don't want the user to be able to modify the description of a post once it's been created. This happens in all kinds of different cases. You wouldn't want a bank user to be able to edit their account number or balance, would you? But! \u003ccode\u003ebalance\u003c/code\u003e is still a field on the account class. In this case, \u003ccode\u003edescription\u003c/code\u003e is still an attribute for the Post class. Let's see if a user could \"hack\" our form to be able to modify the \u003ccode\u003edescription\u003c/code\u003e.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eRight click and inspect the page\u003c/li\u003e\n\u003cli\u003eFind the input for title. It should look something like this: \u003ccode\u003e\u0026lt;input type=\"text\" value=\"asdferwer\" name=\"post[title]\" id=\"post_title\"\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eRight click on the input and choose \"Edit as HTML\"\u003c/li\u003e\n\u003cli\u003eAdd the following new Description field:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cbr\u003e\u003cbr\u003eDescription:\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003col\u003e\n\u003cli\u003eClick somewhere else and look! a wild description field appears.\u003c/li\u003e\n\u003cli\u003eNow type in some message into the new field.\u003c/li\u003e\n\u003cli\u003eClick submit and you'll notice that the description has been updated. What a nefarious hack!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThat is the problem that strong params were created to fix. We want to make sure that when users submit a form we only let the fields we want get by.\u003c/p\u003e\n\n\u003ch2\u003eCode Implementation\u003c/h2\u003e\n\n\u003cp\u003eLet's enable Strong Params. To do this, open up \u003ccode\u003econfig/application.rb\u003c/code\u003e and delete the line that says: \u003ccode\u003econfig.action_controller.permit_all_parameters = true\u003c/code\u003e. Now restart your rails server and navigate to \u003ccode\u003elocalhost:3000/posts/new\u003c/code\u003e. Once there fill out the form and click \u003ccode\u003esubmit\u003c/code\u003e. You'll see we get the following \u003ccode\u003eForbiddenAttributesError\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/flatiron-bucket/readme-lessons/ForbiddenAttributesError.png\" alt=\"ForbiddenAttributesError\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhat this means is that Rails needs to be told what parameters are allowed to be submitted through the form to the database. The default is to let \u003cem\u003enothing\u003c/em\u003e through.\u003c/p\u003e\n\n\u003cp\u003eThe same error would occur if you were trying to update a record. So how do we fix this? Let's update the \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e methods to look like the code below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef create\u003cbr\u003e  @post = Post.new(params.require(:post).permit(:title, :description))\u003cbr\u003e  @post.save\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003edef update\u003cbr\u003e  @post = Post.find(params[:id])\u003cbr\u003e  @post.update(params.require(:post).permit(:title))\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you go back to the web browser and click refresh you'll see everything is working for both the \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e actions. Running the Rspec tests reveals that our specs are now passing again as well. You'll notice that our \u003ccode\u003eupdate\u003c/code\u003e only has a \u003ccode\u003e:title\u003c/code\u003e in the \u003ccode\u003epermit\u003c/code\u003e method. This is because, given our forms, we only want the \u003ccode\u003etitle\u003c/code\u003e to be submittable! If you go and do your nefarious hack again, it won't work. Thwarted!!\u003c/p\u003e\n\n\u003ch3\u003ePermit vs. Require\u003c/h3\u003e\n\n\u003cp\u003eWhat is the deal with \u003ccode\u003e#permit\u003c/code\u003e vs \u003ccode\u003e#require\u003c/code\u003e? The \u003ccode\u003e#require\u003c/code\u003e method is the most restrictive. It means that the \u003ccode\u003eparams\u003c/code\u003e that get passed in \u003cstrong\u003emust\u003c/strong\u003e contain a key called \"post\". If it's not included then it fails and the user gets an error. The \u003ccode\u003e#permit\u003c/code\u003e method is a bit looser. It means that the \u003ccode\u003eparams\u003c/code\u003e hash \u003cstrong\u003emay\u003c/strong\u003e have whatever keys are in it. So in the \u003ccode\u003ecreate\u003c/code\u003e case, it may have the \u003ccode\u003e:title\u003c/code\u003e and \u003ccode\u003e:description\u003c/code\u003e keys. If it doesn't have one of those keys it's no problem: the hash just won't accept any other keys.\u003c/p\u003e\n\n\u003ch2\u003eDRYing up Strong Params\u003c/h2\u003e\n\n\u003cp\u003eThe code we wrote above is great if you only have a \u003ccode\u003ecreate\u003c/code\u003e method in your controller. However, if you have a standard CRUD setup you will also need to implement the same code in your \u003ccode\u003eupdate\u003c/code\u003e action. In our example we had different code for \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e, but generally you have the same items. It's a standard Rails practice to remove code repetition, so let's abstract the strong parameter call into its own method in the controller:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef create\u003cbr\u003e  @post = Post.new(post_params)\u003cbr\u003e  @post.save\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003edef update\u003cbr\u003e  @post = Post.find(params[:id])\u003cbr\u003e  @post.update(post_params)\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eprivate\u003cbr\u003e\u003cbr\u003edef post_params\u003cbr\u003e  params.require(:post).permit(:title, :description)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, both our \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e methods in the \u003ccode\u003eposts\u003c/code\u003e controller can simply call \u003ccode\u003epost_params\u003c/code\u003e. This is a very helpful method since if you duplicated the strong parameter call in both the \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e methods you would need to change both method arguments every time you change the database schema for the \u003ccode\u003eposts\u003c/code\u003e table... and that sounds like a bad way to live. However, by creating this \u003ccode\u003epost_params\u003c/code\u003e method we can simply make one change and both methods will automatically be able to have the proper attributes whitelisted.\u003c/p\u003e\n\n\u003cp\u003eHm, but didn't we say above that we only wanted to permit updates to \u003ccode\u003e:title\u003c/code\u003e in\nthe \u003ccode\u003eupdate\u003c/code\u003e action? We can make sure that we meet that requirement with a\nslightly fancy splat:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef create\u003cbr\u003e  @post = Post.new(post_params(:title, :description))\u003cbr\u003e  @post.save\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003edef update\u003cbr\u003e  @post = Post.find(params[:id])\u003cbr\u003e  @post.update(post_params(:title))\u003cbr\u003e  redirect_to post_path(@post)\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003eprivate\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e# We pass the permitted fields in as *args;\u003cbr\u003e# this keeps `post_params` pretty dry while\u003cbr\u003e# still allowing slightly different behavior\u003cbr\u003e# depending on the controller action. This\u003cbr\u003e# should come after the other methods\u003cbr\u003e\u003cbr\u003edef post_params(*args)\u003cbr\u003e  params.require(:post).permit(*args)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTest this out in the browser and you can see that you can now create and update posts without any errors. And you will also notice that all of the Rspec tests are still passing.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g02aac445fd0a34d7d604527b553b0a5b","title":"Rails Form_For Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-form_for-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-form_for-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_for-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_for-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse \u003ccode\u003eform_for\u003c/code\u003e to build a \u003ccode\u003enew\u003c/code\u003e form\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eform_for\u003c/code\u003e to build an \u003ccode\u003eedit\u003c/code\u003e form\u003c/li\u003e\n\u003cli\u003eMass assign form data to \u003ccode\u003eActiveRecord\u003c/code\u003e instances on \u003ccode\u003enew\u003c/code\u003e and \u003ccode\u003eedit\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eBuild RESTFul actions for \u003ccode\u003enew\u003c/code\u003e, \u003ccode\u003ecreate\u003c/code\u003e, \u003ccode\u003eedit\u003c/code\u003e, and \u003ccode\u003eupdate\u003c/code\u003e, with the correct routes and route helper urls.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFor this lab you will be extending the functionality of the Flatiron school's student management application by building in the functionality to create and edit school classes. You will build all of the functionality from scratch, including building out the models, views, and controllers for the \u003ccode\u003eSchoolClass\u003c/code\u003e and \u003ccode\u003eStudent\u003c/code\u003e resources.\u003c/p\u003e\n\n\u003cp\u003eBelow is what will be needed for each component of the MVC structure:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eModels\u003c/strong\u003e - Create a \u003ccode\u003eSchoolClass\u003c/code\u003e model, along with its associated database table. The \u003ccode\u003eSchoolClass\u003c/code\u003e table should have the columns: \u003ccode\u003etitle:string\u003c/code\u003e and \u003ccode\u003eroom_number:integer\u003c/code\u003e. The \u003ccode\u003eStudent\u003c/code\u003e model and database table have already been created for you.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eControllers\u003c/strong\u003e - Create controller files for \u003ccode\u003eschool_classes\u003c/code\u003e and \u003ccode\u003estudents\u003c/code\u003e. Build out the \u003ccode\u003enew\u003c/code\u003e, \u003ccode\u003ecreate\u003c/code\u003e, \u003ccode\u003eshow\u003c/code\u003e, \u003ccode\u003eedit\u003c/code\u003e, and \u003ccode\u003eupdate\u003c/code\u003e actions in each of the controllers.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eViews\u003c/strong\u003e - Create a show page for each resource, along with \u003ccode\u003enew\u003c/code\u003e and \u003ccode\u003eedit\u003c/code\u003e forms.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou will also need to create routes for each path mentioned above.\u003c/p\u003e\n\n\u003cp\u003eThe tests for this application are located in the \u003ccode\u003espec/controllers/\u003c/code\u003e, \u003ccode\u003espec/features/\u003c/code\u003e, and \u003ccode\u003espec/models/\u003c/code\u003e directories.\u003c/p\u003e\n\n\u003ch2\u003eRequirements\u003c/h2\u003e\n\n\u003cp\u003eUtilize the \u003ccode\u003eform_for\u003c/code\u003e methods for all four of the forms and integrate each \u003ccode\u003eform_for\u003c/code\u003e call with the respective controller actions. Also make sure to utilize the \u003ccode\u003e\u0026lt;%= f.submit %\u0026gt;\u003c/code\u003e submit button syntax to have the button text automatically generated.\u003c/p\u003e\n\n\u003cp\u003eSince you're using \u003ccode\u003eform_for\u003c/code\u003e, make sure you are using strong parameters for the controller \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e actions, if you don't remember how to do it, here is how we implemented strong params in the README: \u003ccode\u003e@post.update(params.require(:post).permit(:title, :description))\u003c/code\u003e. (Hint: you can pass the strong parameter call to the \u003ccode\u003ecreate\u003c/code\u003e method just like we did on \u003ccode\u003eupdate\u003c/code\u003e.)\u003c/p\u003e\n\n\u003cp\u003eIf you run into issues drawing the routes, navigate to the form in your browser and use inspect element to see what path \u003ccode\u003eform_for\u003c/code\u003e is automatically trying to pass the form data to.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/rails-form_for-on-edit-readme\"\u003eReading\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html\"\u003eDocumentation\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6eea01946adf9a48aec68f34787a7f63","title":"Rails form_tag","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-form_tag-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-form_tag-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_tag-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_tag-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eRails Forms\u003c/h2\u003e  \u003cp\u003eWelcome to the world of Rails forms, which give users the ability to submit data into form fields. This can be used for: creating new database records, building a contact form, integrating a search engine field, and pretty much every other aspect of the application that requires user input. When it comes to forms in Rails, you will discover that you will have the flexibility to utilize:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eBuilt-in form helper methods\u003c/li\u003e \u003cli\u003ePlain HTML form elements\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThis lesson is going to begin by integrating HTML form elements and then slowly start refactoring the form using Rails methods. It would be very easy to integrate form helpers (and we could have our form working in a few minutes). However, fully understanding what Rails is doing behind the scenes is more important than getting the form working right away. We're going to build the system from the ground up. When we're finished, you should be able to understand all of the processes that are necessary in order to process forms in an application properly and securely.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e For the next few labs, we're not going to use mass assignment; instead  we'll assign each attribute individually. For example, instead of \u003ccode\u003eStudent.create(params[:students]) we'll write Student.create(first_name: params[:first_name], last_name: params[:last_name])\u003c/code\u003e and name our fields in the view files without the \"student\" preface. We'll discuss why in the upcoming reading on Strong Params.\u003c/p\u003e  \u003ch2\u003eRendering the Form View\u003c/h2\u003e  \u003cp\u003eToday we'll be giving the user the ability to create a new post in our BlogFlash application. Let's first create a Capybara spec to ensure that going to \u003ccode\u003eposts/new\u003c/code\u003e takes us to our form. If you think back to the \u003ca href=\"https://learn.co/lessons/rails-url-helpers-readme\"\u003eRails URL Helpers lesson\u003c/a\u003e, we know that we don't need to hard-code the route into our tests any longer. Let's use the standard RESTful convention of \u003ccode\u003enew_post_path\u003c/code\u003e for the route helper name:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# spec/features/post_spec.rb\u003cbr\u003e\u003cbr\u003erequire 'rails_helper'\u003cbr\u003e\u003cbr\u003edescribe 'new post' do\u003cbr\u003e  it 'ensures that the form route works with the /new action' do\u003cbr\u003e    visit new_post_path\u003cbr\u003e    expect(page.status_code).to eq(200)\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAs expected, this results in a failure saying that we don't have a \u003ccode\u003enew_post_path\u003c/code\u003e method, so let's create that in our \u003ccode\u003eroutes.rb\u003c/code\u003e file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eresources :posts, only: [:index, :new] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow it gives this failure: \u003ccode\u003eThe action 'new' could not be found for PostsController\u003c/code\u003e. To correct this, let's add a \u003ccode\u003enew\u003c/code\u003e action in \u003ccode\u003ePostsController\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef new\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLastly, it says we're missing a template. Let's create \u003ccode\u003eapp/views/posts/new.html.erb\u003c/code\u003e. Now that our routing test is passing, let's add a matcher spec to ensure that the template is properly displaying HTML on the new post page:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# spec/features/post_spec.rb\u003cbr\u003e\u003cbr\u003erequire 'rails_helper'\u003cbr\u003e\u003cbr\u003edescribe 'new post' do\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  it 'renders HTML in the /new template' do\u003cbr\u003e    visit new_post_path\u003cbr\u003e    expect(page).to have_content('Post Form')\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRunning this spec gets a matcher error. We can get this passing by adding \u003ccode\u003e\u0026lt;h3\u0026gt;Post Form\u0026lt;/h3\u0026gt;\u003c/code\u003e to the \u003ccode\u003enew.html.erb\u003c/code\u003e view template.\u003c/p\u003e  \u003ch2\u003eBuilding the form in HTML\u003c/h2\u003e  \u003cp\u003eOur first pass at the form will be in plain HTML. In this reading, we're not concerned with creating any records in the database. Our focus is on the form process. We'll simply be printing out the submitted form params on the show page.\u003c/p\u003e  \u003cp\u003eLet's create a spec for this. It's going to take a while for this to pass since we're going to be spending some time on the HTML creation process, but it's a good practice to ensure all new features are tested before the implementation code is added.\u003c/p\u003e  \u003cp\u003eAs you are updating the code, make sure to test it out in the browser – don't just rely on the tests. It's important to see the errors in both the tests and the browser since you'll want to become familiar with both types of failure messages.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# spec/features/post_spec.rb\u003cbr\u003e\u003cbr\u003erequire 'rails_helper'\u003cbr\u003e\u003cbr\u003edescribe 'new post' do\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  it \"displays a new post form that redirects to the index page, which then contains the submitted post's title and description\" do\u003cbr\u003e    visit new_post_path\u003cbr\u003e    fill_in 'post_title', with: 'My post title'\u003cbr\u003e    fill_in 'post_description', with: 'My post description'\u003cbr\u003e\u003cbr\u003e    click_on 'Submit Post'\u003cbr\u003e\u003cbr\u003e    expect(page.current_path).to eq(posts_path)\u003cbr\u003e    expect(page).to have_content('My post title')\u003cbr\u003e    expect(page).to have_content('My post description')\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis fails for obvious reasons. Let's follow the TDD process, letting the failures help build our form. The first error says that Capybara can't find the form field \u003ccode\u003epost_title\u003c/code\u003e. To fix that, let's create an HTML form in the \u003ccode\u003enew.html.erb\u003c/code\u003e view template:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"text\" id=\"post_title\" name=\"post[title]\"\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;textarea id=\"post_description\" name=\"post[description]\"\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;input type=\"submit\" value=\"Submit Post\"\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= params.inspect %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003ename\u003c/code\u003e attributes in each \u003ccode\u003einput\u003c/code\u003e should look pretty familiar by now –– they're good ole' nested hashes. Just like Sinatra, Rails takes the user input entered into form fields and stores it in the \u003ccode\u003eparams\u003c/code\u003e hash. The \u003ccode\u003ename\u003c/code\u003e attribute for a given \u003ccode\u003einput\u003c/code\u003e field is used as the key within \u003ccode\u003eparams\u003c/code\u003e at which the entered data is stored. For instance, the input entered into the \"Post title:\" field in the above form would be stored as the value of \u003ccode\u003eparams[:post][:title]\u003c/code\u003e. Traditionally, Rails apps use that \u003ccode\u003emodel[attribute]\u003c/code\u003e syntax for \u003ccode\u003ename\u003c/code\u003e attributes (e.g., \u003ccode\u003epost[title]\u003c/code\u003e). We'll talk more about that in a later lesson.\u003c/p\u003e  \u003cp\u003eYou'll also notice that we're printing out \u003ccode\u003eparams\u003c/code\u003e to the page. Until we set up the form action, clicking \u003ccode\u003eSubmit Post\u003c/code\u003e won't actually redirect to a page on which the input values will be visible, but we'd still like to verify that the \u003ccode\u003eparams\u003c/code\u003e hash is being populated correctly.\u003c/p\u003e  \u003cp\u003eIf we run the tests again, we'll see that Capybara expected submitting the form to redirect it to \u003ccode\u003e/posts\u003c/code\u003e, but instead it found itself back on \u003ccode\u003e/posts/new\u003c/code\u003e. Capybara was able to fill in the form elements and click \u003ccode\u003eSubmit Post\u003c/code\u003e, but we need to update the form tag with an \u003ccode\u003eaction\u003c/code\u003e attribute:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form action=\"\u0026lt;%= posts_path %\u0026gt;\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow the form redirects to \u003ccode\u003e/posts\u003c/code\u003e. However, we also need to add a \u003ccode\u003emethod\u003c/code\u003e attribute so that the application knows that we are submitting form data via the \u003ccode\u003ePOST\u003c/code\u003e HTTP verb:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form action=\"\u0026lt;%= posts_path %\u0026gt;\" method=\"POST\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you open up the browser and submit the form, you will get the following routing error: \u003ccode\u003eNo route matches [POST] \"/posts\"\u003c/code\u003e. We need to draw a \u003ccode\u003ecreate\u003c/code\u003e route so that the routing system knows what to do when a \u003ccode\u003ePOST\u003c/code\u003e request is sent to the \u003ccode\u003e/posts\u003c/code\u003e resource:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003eresources :posts, only: [:index, :new, :create] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you run \u003ccode\u003erake routes\u003c/code\u003e, you'll see we now have a \u003ccode\u003eposts#create\u003c/code\u003e action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  Prefix Verb URI Pattern          Controller#Action\u003cbr\u003e   posts GET  /posts(.:format)     posts#index\u003cbr\u003e         POST /posts(.:format)     posts#create\u003cbr\u003enew_post GET  /posts/new(.:format) posts#new \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRunning the spec tests again leads to an 'unknown action' error: \u003ccode\u003eThe action 'create' could not be found for PostsController\u003c/code\u003e. Let's add a \u003ccode\u003ecreate\u003c/code\u003e action in \u003ccode\u003ePostsController\u003c/code\u003e and have it create a new \u003ccode\u003ePost\u003c/code\u003e object with the values from \u003ccode\u003eparams\u003c/code\u003e and then redirect to the index page:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef create\u003cbr\u003e  Post.create(title: params[:post][:title], description: params[:post][:description])\u003cbr\u003e  redirect_to posts_path\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you run the Rails server, navigate to the \u003ccode\u003eposts/new\u003c/code\u003e page, fill in the title and description form elements, and click submit, you will find a new type of error:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/flatiron-bucket/readme-lessons/InvalidAuthenticityToken.png\" alt=\"InvalidAuthenticityToken\"\u003e\u003c/p\u003e  \u003cp\u003eWhich leads us to a very important part of Rails forms: CSRF.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are seeing an error along the lines of \u003ccode\u003eCannot render console from (\u0026lt;IP address here\u0026gt;)! Allowed networks: 127.0.0.1, ::1, 127.0.0.0/127.255.255.255\u003c/code\u003e you'll want to add this code to \u003ccode\u003econfig/environments/development.rb\u003c/code\u003e, and not \u003ccode\u003econfig/application.rb\u003c/code\u003e, so it is only applied in your development environment.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Application \u0026lt; Rails::Application\u003cbr\u003e  config.web_console.whitelisted_ips = '\u0026lt;IP address here\u0026gt;'\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eWhat is CSRF?\u003c/h2\u003e  \u003cp\u003e\"CSRF\" stands for: Cross-Site Request Forgery. Instead of giving a boring explanation of what happens during a CSRF request, let's walk through a real-life example of a Cross-Site Request Forgery hack:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eYou go to your bank website and log in. After checking your balance, you open up a new tab in the browser and go to your favorite meme site.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eUnbeknownst to you, the meme site is actually a hacking site that has scripts running in the background as soon as you land on their page.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eOne of the scripts on the site hijacks the banking session that's open in the other browser tab and submits a form request to transfer money to their account.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThe banking form can't tell that the form request wasn't made by you, so it goes through the process as if you were the one who made the request.\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eOne site making a request to another site via a form is the general flow of a Cross-Site Request Forgery. Rails blocks this from happening by default by requiring that a unique authenticity token be submitted with each form. This authenticity token is stored in the session and can't be hijacked by hackers: it performs a match check when the form is submitted, and it will throw an error if the token isn't there or doesn't match.\u003c/p\u003e  \u003cp\u003eTo fix this \u003ccode\u003eActionController::InvalidAuthenticityToken\u003c/code\u003e error, we can integrate the \u003ccode\u003eform_authenticity_token\u003c/code\u003e helper into the form as a hidden field:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form action=\"\u0026lt;%= posts_path %\u0026gt;\" method=\"POST\"\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"text\" id=\"post_title\" name=\"post[title]\"\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;textarea id=\"post_description\" name=\"post[description]\"\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;input type=\"hidden\" name=\"authenticity_token\" value=\"\u0026lt;%= form_authenticity_token %\u0026gt;\"\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" value=\"Submit Post\"\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we refresh the \u003ccode\u003eposts/new\u003c/code\u003e page, fill out the form, and click \u003ccode\u003eSubmit Post\u003c/code\u003e, the browser should load the index view with our newly-created post's title and description in a bulleted list. All of the spec tests should now be passing, and our form is functional. However, this is probably one of the ugliest and least-elegant Rails forms that has ever existed, so let's do some refactoring.\u003c/p\u003e  \u003ch2\u003eUsing form helpers\u003c/h2\u003e  \u003cp\u003e\u003ccode\u003eActionView\u003c/code\u003e, a sub-gem of Rails, provides a number of helper methods to assist with streamlining view template code. Specifically, we can use \u003ccode\u003eActionView\u003c/code\u003e methods to improve our form! Let's start by integrating a Rails \u003ccode\u003eform_tag\u003c/code\u003e element:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_tag posts_path do %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"text\" id=\"post_title\" name=\"post[title]\"\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;textarea id=\"post_description\" name=\"post[description]\"\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;input type=\"hidden\" name=\"authenticity_token\" value=\"\u0026lt;%= form_authenticity_token %\u0026gt;\"\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" value=\"Submit Post\"\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNext, we'll replace that hidden authenticity token input field with a Rails \u003ccode\u003ehidden_field_tag\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_tag posts_path do %\u0026gt;\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= hidden_field_tag :authenticity_token, form_authenticity_token %\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" value=\"Submit Post\"\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf we run the tests again, we'll see that they're all still passing. Let's take a look at the HTML generated by our Rails \u003ccode\u003eActionView\u003c/code\u003e methods:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form action=\"/posts\" accept-charset=\"UTF-8\" method=\"post\"\u0026gt;\u0026lt;input name=\"utf8\" type=\"hidden\" value=\"✓\" /\u0026gt;\u0026lt;input type=\"hidden\" name=\"authenticity_token\" value=\"zkOjrjTG8Lxn0CF8Lt/kFIgWdYyY3NTMbwh+Q9kPX1NrYztgq0GZNCjLFavBXka1Y5QhNjDlhX+dzQoZMzUjOA==\" /\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"text\" id=\"post_title\" name=\"post[title]\"\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;textarea id=\"post_description\" name=\"post[description]\"\u0026gt;\u0026lt;/textarea\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;input type=\"hidden\" name=\"authenticity_token\" id=\"authenticity_token\" value=\"7SuubeJGbqfm4rO+F5VTS6Wl1SNCTGOr/mrYZKOQLbtICzajfcEHL6n5h2n4FPHqTieBmep1MhgMr6w+SapR0A==\" /\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"submit\" value=\"Submit Post\"\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003eform_tag\u003c/code\u003e Rails helper is smart enough to know that we want to submit the form via the \u003ccode\u003ePOST\u003c/code\u003e method, and it automatically renders the HTML that we were writing by hand before. The \u003ccode\u003eform_tag\u003c/code\u003e method also automatically generates the necessary authenticity token, so we can remove the now-redundant \u003ccode\u003ehidden_field_tag\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eNext, let's integrate some other form helpers to let Rails generate the input elements for us. For this form, we'll be using a \u003ccode\u003etext_field_tag\u003c/code\u003e and a \u003ccode\u003etext_area_tag\u003c/code\u003e and passing each the corresponding \u003ccode\u003ename\u003c/code\u003e attribute as a symbol. It's important to keep in mind that form helpers aren't magic –– they're simply Ruby methods that accept arguments, such as the \u003ccode\u003ename\u003c/code\u003e attribute and any additional parameters related to the form's elements. In addition to updating the form fields, we'll also replace the HTML tag for the submit button with a \u003ccode\u003esubmit_tag\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_tag posts_path do %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag :'post[title]' %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_area_tag :'post[description]' %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= submit_tag \"Submit Post\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's check out the raw HTML all these helper methods generate for us:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;form action=\"/posts\" accept-charset=\"UTF-8\" method=\"post\"\u0026gt;\u0026lt;input name=\"utf8\" type=\"hidden\" value=\"✓\" /\u0026gt;\u0026lt;input type=\"hidden\" name=\"authenticity_token\" value=\"vq9SMVNk0CjwgZmYomFRhwbo5dfu7tI/2FiR7jOtlVgbj8r/zOO5oL+arU9N4PMm7WqxbUbXg4wqneW02ZfpMw==\" /\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;input type=\"text\" name=\"post[title]\" id=\"post_title\" /\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;textarea name=\"post[description]\" id=\"post_description\"\u0026gt;\u003cbr\u003e\u0026lt;/textarea\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;input type=\"submit\" name=\"commit\" value=\"Submit Post\" /\u0026gt;\u003cbr\u003e\u0026lt;/form\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRun the spec tests one last time to verify that everything is still passing. You now know how to build a Rails form from scratch and refactor it using Rails form helper methods. Nice work!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g0ec777bd17dc6e019592d648c9528919","title":"Rails Generators","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-generators-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-generators-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-generators-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-generators-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIf you go down the list on all of the tasks necessary to build out CRUD functionality in an application, it's quite extensive. From creating database tables, configuring views, and drawing individual routes, the feature builds can be time consuming and bug prone. Wouldn't it be nice if there was a more efficient way of integrating standard features instead of having to build them manually each time?\u003c/p\u003e  \u003cp\u003eA primary goal of the Rails team was to make it efficient to build core application functionality. The Rails system has a number of generators that will do some of the manual work for us.\u003c/p\u003e  \u003cp\u003eAs nice as it is to use the generators to save time, they also provide some additional extra benefits:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eThey can set up some basic specs for an application's test suite. They won't write our complex logic tests for us, but they will provide some basic examples.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThey are set up to work the same way each time. This helps standardize your code and enables your development to be more efficient since you don't have to worry as much about bugs related to spelling, syntax errors, or anything else that can occur when writing code manually.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThey follow Rails best practices, which includes utilizing RESTful naming patterns, removing duplicate code, using partials and a number of other best of breed design patterns. (If you don't know what all of these are, don't worry -- we will cover them shortly.)\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eAbusing Generators\u003c/h2\u003e  \u003cp\u003eSo if generators are so amazing, why wouldn't we always want to use them? I'll answer your question with another question: a chainsaw is a wonderful tool, so why wouldn't you use it for every job you have around the house? The answer to both questions is the same: great tools are only great tools if they are matched with the right task. In the same way that you should only use a chainsaw when you have a job that requires it, generators should only be used when they are needed.\u003c/p\u003e  \u003cp\u003eExtending our example from above, why wouldn't you use a chainsaw to build a model airplane?\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/flatiron-bucket/readme-lessons/chainsaw_example.jpg\" alt=\"Chainsaw Example\"\u003e\u003c/p\u003e  \u003cp\u003eIn the same manner as our chainsaw example, certain generators create quite a bit of code. If that code is not going to be used, it will needlessly clutter the application code and cause confusion for future developers. One of our instructors recounts the following all-too-familiar anecdote:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eA few years ago I took over as the lead developer for a large legacy Rails application. The previous developer had relied on generators, even when they shouldn't have been used, and the end result was that it took months to simply figure out what code was being used and what was 'garbage' code that simply came from the generators.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eSo when is the right time to use a generator? After we've gone over the actions of each of the generators, the answer to this query should become readily apparent. In addition, we'll walk through some case studies to help understand when each type of generator is beneficial.\u003c/p\u003e  \u003ch2\u003eRails Generate\u003c/h2\u003e  \u003cp\u003eAll of the Rails generators are entered as commands into the terminal and will follow this syntax:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails generate \u0026lt;name of generator\u0026gt; \u0026lt;options\u0026gt; --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003e--no-test-framework\u003c/code\u003e is a flag that tells the generator not to create any tests for the newly-generated models, controllers, etc. When you're working on your own Rails applications, you don't need the flag —\u0026nbsp;it's quite helpful for quickly stubbing out a test suite. However, it's necessary for labs because we don't want Rails adding additional tests on top of the test suite that already comes with the lesson.\u003c/p\u003e  \u003cp\u003eFor efficiency's sake, Rails aliased the \u003ccode\u003egenerate\u003c/code\u003e method to \u003ccode\u003eg\u003c/code\u003e, so the CLI command above could be shortened to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g \u0026lt;name of generator\u0026gt; \u0026lt;options\u0026gt; --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eDifferent types of generators\u003c/h2\u003e  \u003cp\u003eBelow are the main generators that Rails offers. We'll go through examples of each:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eMigrations\u003c/li\u003e \u003cli\u003eModels\u003c/li\u003e \u003cli\u003eControllers\u003c/li\u003e \u003cli\u003eResources\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eMigration Generators\u003c/h2\u003e  \u003cp\u003eUp to this point, we've been creating our migrations by hand. This has been beneficial because it's important to understand how migrations work. However, Rails has a great set of migration generators with conventions that can help make managing the database schema very efficient.\u003c/p\u003e  \u003cp\u003eLet's start using database migrations in our case study application and update the \u003ccode\u003eposts\u003c/code\u003e table. To add a new column called \u003ccode\u003epublished_status\u003c/code\u003e, we can use the following command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g migration add_published_status_to_posts published_status:string --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIn the terminal you will see it creates a migration file for us: \u003ccode\u003edb/migrate/20151127174031_add_published_status_to_posts.rb\u003c/code\u003e. Since migration file names need to be unique, the generator prepends a timestamp before the file name. In the case of the migration I just ran, it added \u003ccode\u003e20151127174031\u003c/code\u003e. You can break this timestamp down as follows: \u003ccode\u003eyear: 2015, month: 11, date: 27, and then the time itself\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eReady to see something pretty cool? Open up the file it created, which you can find in the \u003ccode\u003edb/migrate\u003c/code\u003e directory. It should look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass AddPublishedStatusToPosts \u0026lt; ActiveRecord::Migration\u003cbr\u003e  def change\u003cbr\u003e    add_column :posts, :published_status, :string\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice what the generator did? It automatically knew that we wanted to add a new column and built out the \u003ccode\u003eadd_column\u003c/code\u003e method call. How did this happen? It turns out that the way that you name the migration file is very important. By prepending the \u003ccode\u003eadd_\u003c/code\u003e text to the name it gave a signal to the migration generator that the purpose of this schema change will be to add a column(s) to the table. How did it know the table we wanted to add to? By appending the \u003ccode\u003e_posts\u003c/code\u003e text to the end of the migration name it tells Rails that the table we want to change is the \u003ccode\u003eposts\u003c/code\u003e table. Lastly, by adding the \u003ccode\u003epublished_status:string\u003c/code\u003e text at the end of the command tells the generator that the new column name will be \u003ccode\u003epublished_status\u003c/code\u003e and the data will be of type \u003ccode\u003estring\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eTo update the database schema you can run \u003ccode\u003erake db:migrate\u003c/code\u003e and the schema will reflect the change.\u003c/p\u003e  \u003cp\u003eOh no, we made a mistake, let's get rid of that column name with another migration:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g migration remove_published_status_from_posts published_status:string --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you open up this migration file, you will see the following code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass RemovePublishedStatusFromPosts \u0026lt; ActiveRecord::Migration\u003cbr\u003e  def change\u003cbr\u003e    remove_column :posts, :published_status, :string\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo we can add and remove columns automatically by running migration generators. What else can we do? Let's walk through a real world scenario:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g migration add_post_status_to_posts post_status:boolean --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith this migration we'll add the column \u003ccode\u003epost_status\u003c/code\u003e with the data type of boolean. While adding this new attribute to one of the forms we discover that the column really needs to be of type \u003ccode\u003estring\u003c/code\u003e instead of being a \u003ccode\u003eboolean\u003c/code\u003e. Let's see if we can use the same syntax for the generator:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g migration change_post_status_data_type_to_posts post_status:string --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis won't automatically create the \u003ccode\u003echange_column\u003c/code\u003e method; the file will look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass ChangePostStatusDataTypeToPosts \u0026lt; ActiveRecord::Migration\u003cbr\u003e  def change\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe can simply add in the \u003ccode\u003echange_column\u003c/code\u003e method like this: \u003ccode\u003echange_column :posts, :post_status, :string\u003c/code\u003e and after running \u003ccode\u003erake db:migrate\u003c/code\u003e our schema will be updated.\u003c/p\u003e  \u003cp\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActiveRecord/Migration.html\"\u003eFull migration documentation\u003c/a\u003e\u003c/p\u003e  \u003ch2\u003eModel Generators\u003c/h2\u003e  \u003cp\u003eThis is a generator type that gets used regularly. It does a great job of creating the core code needed to create a model and associated database table without adding a lot of bloat to the application. Let's add a new model to the app called \u003ccode\u003eAuthor\u003c/code\u003e with columns \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003ebio\u003c/code\u003e, and \u003ccode\u003egenre\u003c/code\u003e, we can use the model generator with the following CLI command:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g model Author name:string genre:string bio:text --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRunning this generator will create the following files for us:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003einvoke  active_record\u003cbr\u003ecreate    db/migrate/20190618010724_create_authors.rb\u003cbr\u003ecreate    app/models/application_record.rb\u003cbr\u003ecreate    app/models/author.rb \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAt a high level, this has created: * A database migration that will add a table and add the columns \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003egenre\u003c/code\u003e, and \u003ccode\u003ebio\u003c/code\u003e. * A model file that will inherit from \u003ccode\u003eApplicationRecord\u003c/code\u003e (as of Rails 5)\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Up to Rails 4.2, all models inherited from \u003ccode\u003eActiveRecord::Base\u003c/code\u003e. Since Rails 5, all models inherit from \u003ccode\u003eApplicationRecord\u003c/code\u003e. If you've used an older version of Rails in the past, you may be wondering what happened to \u003ccode\u003eActiveRecord::Base\u003c/code\u003e? Well, not a lot has changed, actually. This file is automatically added to models in Rails 5 applications:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/models/application_record.rb\u003cbr\u003eclass ApplicationRecord \u0026lt; ActiveRecord::Base\u003cbr\u003e  self.abstract_class = true\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIt allows more flexibility if you want to add some extra functionality to Active Record.\u003c/p\u003e  \u003cp\u003eTo continue with the code-along, let's run \u003ccode\u003erake db:migrate\u003c/code\u003e, which will add the authors table to the database schema. We can test this out in the console:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eAuthor.all\u003cbr\u003e=\u0026gt; #\u0026lt;ActiveRecord::Relation []\u0026gt;\u003cbr\u003e\u003cbr\u003eAuthor.create!(name: \"Stephen King\", genre: \"Horror\", bio: \"Bio details go here\")\u003cbr\u003e=\u0026gt; #\u0026lt;Author id: 1, name: \"Stephen King\", genre: \"Horror\", bio: \"Bio details go here\", created_at: \"2015-11-27 22:59:14\", updated_at: \"2015-11-27 22:59:14\"\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo it looks like our model has been created properly. As you can see, this particular generator created a few different pieces of functionality with a single command, and it did it with minimal code bloat.\u003c/p\u003e  \u003ch2\u003eController Generators\u003c/h2\u003e  \u003cp\u003eController generators are great if you are creating static views or non-CRUD related features (we'll walk through why this is the case shortly). Let's create an \u003ccode\u003eadmin\u003c/code\u003e controller that will manage the data flow and view rendering for our admin dashboard pages:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g controller admin dashboard stats financials settings --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will create a ton of code! Below is the full list:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ecreate  app/controllers/admin_controller.rb\u003cbr\u003e route  get 'admin/settings'\u003cbr\u003e route  get 'admin/financials'\u003cbr\u003e route  get 'admin/stats'\u003cbr\u003e route  get 'admin/dashboard'\u003cbr\u003einvoke  erb\u003cbr\u003ecreate    app/views/admin\u003cbr\u003ecreate    app/views/admin/dashboard.html.erb\u003cbr\u003ecreate    app/views/admin/stats.html.erb\u003cbr\u003ecreate    app/views/admin/financials.html.erb\u003cbr\u003ecreate    app/views/admin/settings.html.erb\u003cbr\u003einvoke  helper\u003cbr\u003ecreate    app/helpers/admin_helper.rb\u003cbr\u003einvoke  assets\u003cbr\u003einvoke    coffee\u003cbr\u003ecreate      app/assets/javascripts/admin.js.coffee\u003cbr\u003einvoke    scss\u003cbr\u003ecreate      app/assets/stylesheets/admin.css.scss \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo what got added here? Below is a list that is a little more high level:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eA controller file that will inherit from \u003ccode\u003eApplicationController\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA set of routes to each of the generator arguments: \u003ccode\u003edashboard\u003c/code\u003e, \u003ccode\u003estats\u003c/code\u003e, \u003ccode\u003efinancials\u003c/code\u003e, and \u003ccode\u003esettings\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA new directory for all of the view templates along with a view template file for each of the controller actions that we declared in the generator command\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA view helper method file\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA Coffeescript file for specific JavaScripts for that controller\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eAn \u003ccode\u003escss\u003c/code\u003e file for the styles for the controller\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eAs you can see, this one generator created a large number of files and code. This is a generator to be careful with – it can create a number of files that are never used and can cause wasted files in an application.\u003c/p\u003e  \u003cp\u003eSo why are controller generators not the best for creating CRUD based features? What would have happened if we wanted to create a controller that managed the CRUD flow for managing accounts? Here would be one implementation:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g controller accounts new create edit update destroy index show --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eImmediately you may notice that this would create wasted code since it would create view templates for \u003ccode\u003ecreate\u003c/code\u003e, \u003ccode\u003eupdate\u003c/code\u003e, and \u003ccode\u003edestroy\u003c/code\u003e actions, so they would need to be removed immediately. They would also be set up with \u003ccode\u003eget\u003c/code\u003e HTTP requests, which would not work at all. In the next section we're going to cover a better option for creating CRUD functionality.\u003c/p\u003e  \u003ch2\u003eResource Generators\u003c/h2\u003e  \u003cp\u003eIf you are building an API, using a front end MVC framework, or simply want to manually create your views, the \u003ccode\u003eresource\u003c/code\u003e generator is a great option for creating the code. Since we didn't create the \u003ccode\u003eAccount\u003c/code\u003e controller we mentioned before, let's build it here:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erails g resource Account name:string payment_status:string --no-test-framework \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis creates quite a bit of code for us. Below is the full list:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003einvoke  active_record\u003cbr\u003ecreate    db/migrate/20170712011124_create_accounts.rb\u003cbr\u003ecreate    app/models/account.rb\u003cbr\u003einvoke  controller\u003cbr\u003ecreate    app/controllers/accounts_controller.rb\u003cbr\u003einvoke    erb\u003cbr\u003ecreate      app/views/accounts\u003cbr\u003einvoke    helper\u003cbr\u003ecreate      app/helpers/accounts_helper.rb\u003cbr\u003einvoke    assets\u003cbr\u003einvoke      coffee\u003cbr\u003ecreate        app/assets/javascripts/accounts.js.coffee\u003cbr\u003einvoke      scss\u003cbr\u003ecreate        app/assets/stylesheets/accounts.css.scss\u003cbr\u003einvoke  resource_route\u003cbr\u003e route    resources :accounts \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo what does our app have now due to the generator? Below is a summary:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eA migration file that will create a new database table for the attributes passed to it in the generator\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA model file that inherits from \u003ccode\u003eApplicationRecord\u003c/code\u003e (as of Rails 5; see Note above)\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA controller file that inherits from \u003ccode\u003eApplicationController\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA view directory, but no view template files\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA view helper file\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA Coffeescript file for specific JavaScripts for that controller\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA \u003ccode\u003escss\u003c/code\u003e file for the styles for the controller\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eA full \u003ccode\u003eresources\u003c/code\u003e call in the \u003ccode\u003eroutes.rb\u003c/code\u003e file\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThe \u003ccode\u003eresource\u003c/code\u003e generator is a smart generator that creates some of the core functionality needed for a full featured resource without much code bloat. Looking over the files I can't find one file that I need to remove, so that's a good sign.\u003c/p\u003e  \u003cp\u003eThe last item that was added may not look familiar to you. \u003ccode\u003eresources :accounts\u003c/code\u003e is considered a 'magic' route that entails the full set of RESTful routes needed to perform CRUD in an application. So what does \u003ccode\u003eresources :accounts\u003c/code\u003e translate into?\u003c/p\u003e  \u003cp\u003eThere's an easy way to find out. Let's run \u003ccode\u003erake routes\u003c/code\u003e with a filter so it only shows us the routes for accounts:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003erake routes | grep account \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis \u003ccode\u003erake\u003c/code\u003e command will produce the following output in the console:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eaccounts      GET    /accounts(.:format)          accounts#index\u003cbr\u003e              POST   /accounts(.:format)          accounts#create\u003cbr\u003enew_account   GET    /accounts/new(.:format)      accounts#new\u003cbr\u003eedit_account  GET    /accounts/:id/edit(.:format) accounts#edit\u003cbr\u003eaccount       GET    /accounts/:id(.:format)      accounts#show\u003cbr\u003e              PATCH  /accounts/:id(.:format)      accounts#update\u003cbr\u003e              PUT    /accounts/:id(.:format)      accounts#update\u003cbr\u003e              DELETE /accounts/:id(.:format)      accounts#destroy \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003ccode\u003eresources\u003c/code\u003e automatically creates each of these routes and makes them available to the controller. If you open up the \u003ccode\u003eaccounts_controller.rb\u003c/code\u003e file you may notice something interesting: none of the actions shown in the route list are even there! However, I actually like this because it creates the minimal amount of code possible and then lets me add only the features that the app needs. We'll get into a full review of each of the options available with the \u003ccode\u003eresources\u003c/code\u003e method in a later lesson. For right now just know that by default it creates the full suite of CRUD routes.\u003c/p\u003e  \u003ch2\u003eVideo Review\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=KKQ8lpEyw2g\"\u003eIntro to Rails\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cp\u003e\u003ca href=\"http://api.rubyonrails.org/classes/Rails/Generators.html\"\u003eRails Generators\u003c/a\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ga6aff13a4f2eec1cde20fa752f60d031","title":"Rails Hello World Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-hello-world-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-hello-world-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-hello-world-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-hello-world-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn this lab you will integrate a static route so that the application will render a \"Hello World\" page.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDraw a route\u003c/li\u003e\n\u003cli\u003eMap a route to a controller/action\u003c/li\u003e\n\u003cli\u003eRender (implicitly or explicitly) a static template\u003c/li\u003e\n\u003cli\u003eCreate a static template\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eBelow are the tasks that you will need to complete in order to finish the lab:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eIntegrate a route for \u003ccode\u003elocalhost:3000/hello_world\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a static controller that inherits from the application controller and contains the \u003ccode\u003ehello_world\u003c/code\u003e action. You can have the call to the view file occur using either the implicit or explicit processes.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a file in the \u003ccode\u003eviews\u003c/code\u003e directory that will be called by the static controller's \u003ccode\u003ehello_world\u003c/code\u003e action, and add the heading \u003ccode\u003e\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\u003c/code\u003e to the file. The test is case sensitive, so make sure you enter it \u003cem\u003eexactly\u003c/em\u003e as shown.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe RSpec/Capybara test suite is currently not passing. Run the tests to see what you need to fix. It might be helpful to fire up the Rails server (via the \u003ccode\u003erails s\u003c/code\u003e command) in order to manually test the functionality of your route, action, and view. For students in the IDE, here's a \u003ca href=\"http://help.learn.co/the-learn-ide/common-ide-questions/accessing-localhost-in-the-learn-ide\"\u003eHelp Center article\u003c/a\u003e if you run into trouble with \u003ccode\u003erails s\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/rails-hello-world/rails_hello_world_ss.png\" alt=\"Demo Screenshot\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNote\u003c/em\u003e\u003c/strong\u003e: From this point forward, labs will not always be provided as a blank slate, with the responsibility for creating migrations, models, controllers, etc. falling on you. Instead, many labs will contain broken or incomplete code, and you will be required to add to or fix the existing code in order for the specs to pass. In some cases, code that you wrote in a previous lab will be provided. This way, you can focus on applying new concepts instead of getting bogged down in repetitive work, such as setting up a basic Rails app for every new lab. In other cases, you will be gaining the practical experience of learning how to work within an existing code base, which is what you will likely experience at your first job. Rare is the junior developer who gets to create from whole cloth: it’s far more likely that you’ll be onboarded to a project with unfamiliar code created by other developers. Always use the specs to guide you through what additions and/or modifications are needed, and remember: you do \u003cstrong\u003enot\u003c/strong\u003e have to run the specs in the order provided in the lab. Work on your troubleshooting chops!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g10b43d31cce6fcc6d5ae982bcba25a40","title":"Rails Index Show New Create Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-index-show-new-create-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-index-show-new-create-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-index-show-new-create-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-index-show-new-create-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild a RESTful \u003ccode\u003eindex\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eBuild a RESTful \u003ccode\u003eshow\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eBuild a RESTful \u003ccode\u003enew\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eBuild a RESTful \u003ccode\u003ecreate\u003c/code\u003e action\u003c/li\u003e\n\u003cli\u003eLink pages using route helpers\u003c/li\u003e\n\u003cli\u003eUse route helpers in a \u003ccode\u003eredirect_to\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eBuild a new form with a \u003ccode\u003eform_tag\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eThis will be a pretty extensive lab that will combine a number of the concepts that we have reviewed, including:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eDrawing multiple route types\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIntegrating route helper methods\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBuilding out a form and wiring it up to the \u003ccode\u003ecreate\u003c/code\u003e action\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eLinking pages together\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this lab, the application you will be starting out with will be completely blank. There are no models, views, controllers, et cetera. It has a number of RSpec and Capybara tests that will all need to pass to complete the lab. The tests can be found in the \u003ccode\u003espec\u003c/code\u003e directory, in the \u003ccode\u003emodels\u003c/code\u003e, \u003ccode\u003efeatures\u003c/code\u003e, and \u003ccode\u003econtrollers\u003c/code\u003e sub-directories. Feel free to walk through the specs to see what behavior the application should have when you're done.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Like many production applications, we've included the \u003ccode\u003econfig/secrets.yml\u003c/code\u003e file in the \u003ccode\u003e.gitignore\u003c/code\u003e. This means that you are going to have to create your own \u003ccode\u003econfig/secrets.yml\u003c/code\u003e file for the application to run. Don't worry- we've given you a template. Just rename \u003ccode\u003econfig/secrets-template.yml\u003c/code\u003e to \u003ccode\u003econfig/secrets.yml\u003c/code\u003e, and you should be able to get the application to run.\u003c/p\u003e\n\n\u003cp\u003eThe application you will be building is a Coupon app. Below is a high-level overview of the features you'll be building out:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eYou will need to create a \u003ccode\u003ecoupons\u003c/code\u003e table with \u003ccode\u003ecoupon_code\u003c/code\u003e and \u003ccode\u003estore\u003c/code\u003e columns, which should both be of the \u003ccode\u003estring\u003c/code\u003e data type.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYour \u003ccode\u003eindex\u003c/code\u003e page should show all of the coupons in the database using the following format: \u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"#\"\u003ecoupon\u003cem\u003ecode\u003c/em\u003e\u003c/a\u003e | storename\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eThe coupon codes on the \u003ccode\u003eindex\u003c/code\u003e page should link to their corresponding coupon \u003ccode\u003eshow\u003c/code\u003e page. You should use the \u003ccode\u003elink_to\u003c/code\u003e method and route helper methods instead of hard-coding an HTML \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eYour \u003ccode\u003eshow\u003c/code\u003e page should render the specific coupon passed to the route. E.g., \u003ccode\u003ecoupons/4\u003c/code\u003e should show the coupon with an ID of 4.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003enew.html.erb\u003c/code\u003e view template should render a form that uses the \u003ccode\u003eform_tag\u003c/code\u003e method.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe form should be wired up to the \u003ccode\u003ecreate\u003c/code\u003e action in the controller and, when submitted, should create a new record in the \u003ccode\u003ecoupons\u003c/code\u003e table with the parameters passed through the form.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe controller should use the \u003ccode\u003eredirect_to\u003c/code\u003e helper method to redirect the user to the \u003ccode\u003eshow\u003c/code\u003e page template for the newly-created coupon.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/rails-create-action-readme\"\u003eReading on Create Action\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/rails-form_tag-readme\"\u003eReading on Form Integration\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gaa29fb9d45f83645bfed56303e581a6e","title":"Rails Static Requests","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-static-request-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-static-request-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-static-request-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-static-request-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eRouting\u003c/h2\u003e  \u003cp\u003eHow does your application know what view to render to users? This is where routing comes in. As a framework, Rails has a comprehensive routing system for both dynamic and static pages. Below are the differences between a static and dynamic route:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eStatic route\u003c/strong\u003e - A static route will render a view that does not change. Typically, you will not send parameters to it. Examples would be a site's about or contact pages.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eDynamic route\u003c/strong\u003e - Dynamic routes are pages that accept parameters and render different content based on those parameters. An example would be a blog's post page that contains a specific article.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eIn this lesson we're going to specifically cover static pages to ensure that you can get a firm understanding of how routing works in a Rails application.\u003c/p\u003e  \u003cp\u003eBefore we dive into the code and routing configurations, it helps to know how HTTP works at a high level. Below is the flow that takes place when a user attempts to go to a page on a Rails application:\u003c/p\u003e  \u003col\u003e \u003cli\u003eA URL is entered into the browser; this is the HTTP request\u003c/li\u003e \u003cli\u003eThat request is sent to the server where the application's router interprets the request and sends a message to the controller mapped to that route\u003c/li\u003e \u003cli\u003eThe controller communicates with the view file mapped to the controller method\u003c/li\u003e \u003cli\u003eThe server returns that HTTP response, which contains the view page that can be viewed in the browser\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eImplementing a Static Route\u003c/h2\u003e  \u003cp\u003eLet's try this out in our application. I'm going to use a blogging application as a case study in this lesson.\u003c/p\u003e  \u003cp\u003eTo begin, start up the Rails server and go to \u003ccode\u003elocalhost:3000/about\u003c/code\u003e. As you will see, this throws a routing error: \u003ccode\u003eNo route matches [GET] \"/about\"\u003c/code\u003e. To fix this, stop the Rails server by pressing \u003ccode\u003econtrol + c\u003c/code\u003e. (Anytime you make a routing change you need to restart the Rails server.)\u003c/p\u003e  \u003cp\u003eNow draw the route by opening the \u003ccode\u003econfig/routes.rb\u003c/code\u003e file and adding the following route inside of the \u003ccode\u003edraw\u003c/code\u003e block:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eget 'about', to: 'static#about' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's look at the components that make up this route code:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eThe HTTP verb - in this case we're using the \u003ccode\u003eget\u003c/code\u003e HTTP verb.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThe path - \u003ccode\u003e'about'\u003c/code\u003e represents the path in the URL bar that the route will be mapped to.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThe controller action - \u003ccode\u003e'static#about'\u003c/code\u003e tells the Rails routing system that this route should be passed through the \u003ccode\u003estatic\u003c/code\u003e controller's \u003ccode\u003eabout\u003c/code\u003e action. If the term \u003ccode\u003eaction\u003c/code\u003e sounds foreign, actions are just Ruby speak for a method in a controller. So in the \u003ccode\u003eStaticController\u003c/code\u003e will be a method called \u003ccode\u003eabout\u003c/code\u003e that gets called when a user goes to \u003ccode\u003e/about\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eNow start the Rails server back up, go back to \u003ccode\u003elocalhost:3000/about\u003c/code\u003e, and click refresh. You should now see that the error message has changed. It's no longer complaining about not having a route; it should now say: \u003ccode\u003euninitialized constant StaticController\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's fix this by creating a new controller for our static pages, adding a new file to the application: \u003ccode\u003eapp/controllers/static_controller.rb\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eThis will create a blank controller file that we can use to map to the routing file. Since there are a number of methods built into the Rails controller system, you will also want the controller to inherit from the application controller. The new file should have code that looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass StaticController \u0026lt; ApplicationController\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe standard naming convention for controllers is the name of the controller followed by the word \u003ccode\u003eController\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIf you refresh the browser now, you will see a new error: \u003ccode\u003eThe action 'about' could not be found for StaticController\u003c/code\u003e. This means that it found our controller (woot!) but couldn't find the action \u003ccode\u003eabout\u003c/code\u003e in that controller. On a side note, since controllers are located within the \u003ccode\u003eapp\u003c/code\u003e directory, you can make changes to controller files and see the result in the browser without having to restart the Rails server.\u003c/p\u003e  \u003cp\u003eWe're making good progress (even though we're using EDD - error driven development), and it's good to see each of the errors so that when you encounter these in your real world projects you will know how to fix them. This current error is fixed by adding the following method in the static controller:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef about\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eHitting refresh in the browser will give you a 'Template is missing' error; specifically, it says: \u003ccode\u003eMissing template static/about...\u003c/code\u003e. Also note that you do not have to restart the Rails server here. As long as your changes are within the \u003ccode\u003eapp\u003c/code\u003e directory, you can keep the server going; only code changes outside of the \u003ccode\u003eapp\u003c/code\u003e directory require stopping and starting the Rails server.\u003c/p\u003e  \u003cp\u003eWe're very close to getting our view to show up. Rails gives us two options for how views are mapped between the controller and view files. It's important to understand the difference between explicit and implicit rendering for the views:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eExplicit rendering\u003c/strong\u003e - for explicit rendering, Rails lets you dictate which view file you want to have the controller action mapped to.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eImplicit rendering\u003c/strong\u003e - for implicit rendering, Rails follows a standard convention that automatically looks for the view file with the same name as the controller action.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eFirst, let's try out explicit rendering. Create a new directory within the views directory called \u003ccode\u003estatic\u003c/code\u003e, and create a new file called \u003ccode\u003esome_page.html.erb\u003c/code\u003e. In that file add some basic HTML code, such as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;Hello from some page\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eInside the \u003ccode\u003eabout\u003c/code\u003e method in the controller add the following code: \u003ccode\u003erender \"static/some_page\"\u003c/code\u003e. You can either provide the full view path (\u003ccode\u003estatic/some_page\u003c/code\u003e) or you can omit the enclosing directory, e.g., \u003ccode\u003erender \"some_page\"\u003c/code\u003e. Rails will automatically look inside the view directory with the same name as the controller. It's typically considered best practice to use the \u003ccode\u003erender \"some_page\"\u003c/code\u003e syntax since it won't rely on the name of the directory (in case that gets changed later on). So the \u003ccode\u003eabout\u003c/code\u003e method should look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edef about\u003cbr\u003e  render \"some_page\"\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you refresh the \u003ccode\u003e/about\u003c/code\u003e page in the browser, you will see our heading of \u003cstrong\u003eHello from some page\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eTo compare that with how Rails utilizes implicit view rendering, create a new file in the \u003ccode\u003estatic\u003c/code\u003e views directory called \u003ccode\u003eabout.html.erb\u003c/code\u003e, and add some HTML code, such as:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;Hello from the about page\u0026lt;/h1\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow completely remove the \u003ccode\u003erender\u003c/code\u003e call from the controller. If you refresh the browser, you will now see \u003cstrong\u003eHello from the about page\u003c/strong\u003e.\u003c/p\u003e  \u003cp\u003eWhoa! How is an empty method generating the same behavior as when we were calling the view template directly? This follows along with the popular 'convention over configuration' pattern that Rails utilizes. This means that the Rails core team has built out a number of standardized processes, such as implicit view rendering to help make development life a little easier. It's not some kind of black code magic; behind the scenes, Rails has a large number of complex processes that make things like implicit view rendering work properly.\u003c/p\u003e  \u003cp\u003eSo is explicit or implicit better? Typically, you will find that you want to utilize the implicit workflow in your day to day coding practice. The rationale is quite practical. Imagine that you are taking over a legacy Rails project. As you are getting acclimated to the code, would you prefer that the previous dev followed a standard naming process, or would you rather be forced to look through each controller to see how the controller actions were mapped to the views? Rails has always had the goal of making the development process as efficient as possible, which is why it is typically best to follow these types of implicit procedures. With that being said, it is important to understand how the views are mapped to the controller, which is why we also walked through the explicit process.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eIn summary, you should now have a firm understanding of how to implement basic routing in your application for static pages. As a review, the process is below:\u003c/p\u003e  \u003col\u003e \u003cli\u003eThe server receives an HTTP request from the client\u003c/li\u003e \u003cli\u003eThe application processes the request through the \u003ccode\u003eroutes.rb\u003c/code\u003e file\u003c/li\u003e \u003cli\u003eThe route file maps the request through whichever controller method is called\u003c/li\u003e \u003cli\u003eThe controller then responds with the view that belongs to that specific method and delivers it to the client\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003ePhantomJS Errors\u003c/h2\u003e  \u003cp\u003eIf you receive this error:\u003c/p\u003e  \u003cp\u003e\u003ccode\u003eCould not find an executable [\"phantomjs\"] on your path.\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eYou'll need to install PhantomJS on your computer before the tests will work. \u003c/p\u003e  \u003cp\u003eFor Mac users, run the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003ebrew cask install phantomjs \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eFor Windows users, run the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003enpm install -g phantomjs-prebuilt \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou can confirm the installation has worked by running \u003ccode\u003ephantomjs -v\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003ePuma Install Error\u003c/h2\u003e  \u003cp\u003eIf, when running \u003ccode\u003ebundle install\u003c/code\u003e, you get an error installing Puma, run the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003egem install puma:4.3.5 -- --with-cflags=\"-Wno-error=implicit-function-declaration\" \u003c/code\u003e\u003c/pre\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g89ebeb0f76927f20d574fbe9c94d0739","title":"Rails URL Helpers","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"rails-url-helpers-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-url-helpers-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-url-helpers-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-url-helpers-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eRails is meant to be flexible. As a result, there are typically a number of ways to accomplish the same goals. Routes are a great example of how this principle operates in a Rails app. In this section, we will review how to leverage built-in URL helper methods instead of hard coding route paths into an application (along with why this is a good idea).\u003c/p\u003e  \u003ch2\u003ePaths vs Route Helpers\u003c/h2\u003e  \u003cp\u003eWhat's a real-world difference between using hard-coded paths compared with route helper methods? Let's imagine that you have a meeting in NYC, and you want to get from one side of the city to the other. You have a couple of different options:\u003c/p\u003e  \u003col\u003e \u003cli\u003eTraverse the streets on foot\u003c/li\u003e \u003cli\u003eTake a taxi\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eWalking is like hard coding your route's path. Technically, it can work. However, it's slow, potentially error-prone (one small mistake can lead to the wrong part of town), and, if the meeting location changes, it will require quite a bit of manual work to adjust and walk to the new destination.\u003c/p\u003e  \u003cp\u003eTaking a taxi is like using a route helper: you can simply provide the address to the driver and let them navigate the city streets for you. It is faster than walking, and, if the address for the meeting changes while you're en route, it's not as difficult or slow to adjust.\u003c/p\u003e  \u003cp\u003eDon't worry if it's still a little fuzzy. Here's an example of what it looks like in code:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eHard-coded path:\u003c/strong\u003e \u003ccode\u003e\"/posts/#{@post.id}\"\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eHere you're saying: \"I know exactly the GPS coordinates of my meeting, driver. Do exactly as I say.\"\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eRoute helper:\u003c/strong\u003e \u003ccode\u003epost_path(@post)\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eHere you're saying: \"Can you find the best way to a controller that knows how to work with this thing called a \u003ccode\u003ePost\u003c/code\u003e based on looking at this instance called \u003ccode\u003e@post\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eWe want to use route helper methods as opposed to hard coding because:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eRoute helpers are more dynamic since they are methods and not simply strings. This means that if something changes with the route there are many cases where the code itself won't need to be changed at all\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eRoute helper methods help clean up the view and controller code and assist with readability. \u003cem\u003eOn a side note, you cannot use these helper methods in your model files\u003c/em\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eIt's more natural to be able to pass arguments into a method as opposed to using string interpolation. For example, \u003ccode\u003epost_path(post, opt_in: true)\u003c/code\u003e is more readable than \u003ccode\u003e\"posts/\u0026lt;%= post.id %\u0026gt;?opt_in=true\"\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eRoute helpers translate directly into HTML-friendly paths. In other words, if you have any weird characters in your URLs, the route helpers will convert them so they can be read properly by browsers. This includes spaces and  characters such as \u003ccode\u003e\u0026amp;\u003c/code\u003e, \u003ccode\u003e%\u003c/code\u003e, etc.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eImplementing Route Helpers\u003c/h2\u003e  \u003cp\u003eTo begin, we're going to start with an application that has the MVC set up for \u003ccode\u003eposts\u003c/code\u003e, with \u003ccode\u003eindex\u003c/code\u003e and \u003ccode\u003eshow\u003c/code\u003e actions currently in place. The route call looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003eresources :posts, only: [:index, :show] \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis will create routing methods for posts that we can utilize in our views and controllers. Running \u003ccode\u003erails routes\u003c/code\u003e in the terminal will give the following output:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eposts   GET  /posts(.:format)       posts#index\u003cbr\u003epost    GET  /posts/:id(.:format)   posts#show \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThese four columns tell us everything that we'll need to use the route helper methods. The breakdown is below:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003e\u003cstrong\u003eColumn 1\u003c/strong\u003e - This column gives the prefix for the route helper methods. In the current application, \u003ccode\u003eposts\u003c/code\u003e and \u003ccode\u003epost\u003c/code\u003e are the prefixes for the methods that you can use throughout your applications. The two most popular method types are \u003ccode\u003e_path\u003c/code\u003e and \u003ccode\u003e_url\u003c/code\u003e. So if we want to render a link to our posts' index page, the method would be \u003ccode\u003eposts_path\u003c/code\u003e or \u003ccode\u003eposts_url\u003c/code\u003e. The difference between \u003ccode\u003e_path\u003c/code\u003e and \u003ccode\u003e_url\u003c/code\u003e is that \u003ccode\u003e_path\u003c/code\u003e gives the relative path and \u003ccode\u003e_url\u003c/code\u003e renders the full URL. If you open up the rails console, by running \u003ccode\u003erails console\u003c/code\u003e, you can test these route helpers out. Run \u003ccode\u003eapp.posts_path\u003c/code\u003e and see what the output is. You can also run \u003ccode\u003eapp.posts_url\u003c/code\u003e and see how it prints out the full path instead of the relative path. \u003cstrong\u003eIn general, it's best to use the \u003ccode\u003e_path\u003c/code\u003e version so that nothing breaks if your server domain changes\u003c/strong\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003cstrong\u003eColumn 2\u003c/strong\u003e - This is the HTTP verb\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003cstrong\u003eColumn 3\u003c/strong\u003e - This column shows what the path for the route will be and what parameters need to be passed to the route. As you may notice, the second row for the show route calls for an ID. When you pass the \u003ccode\u003e:show\u003c/code\u003e argument to the \u003ccode\u003eresources\u003c/code\u003e method, it will automatically create this route and assume that you will need to pass the \u003ccode\u003eid\u003c/code\u003e into the URL string. Whenever you have \u003ccode\u003eid\u003c/code\u003e parameters listed in the path like this, you will need to pass the route helper method an ID, so an example of what our show route code would look like is \u003ccode\u003epost_path(@post)\u003c/code\u003e. Notice how this is different than the \u003ccode\u003eindex\u003c/code\u003e route of \u003ccode\u003eposts_path\u003c/code\u003e. Also, you can ignore the \u003ccode\u003e(.:format)\u003c/code\u003e text for now. If you open up the Rails console again, you can call the route helpers. If you have a \u003ccode\u003ePost\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \u003ccode\u003e3\u003c/code\u003e, you can run \u003ccode\u003eapp.post_path(3)\u003c/code\u003e and see what the resulting output is. Running route helpers in the rails console is a great way of testing out routes to see what their exact output will be\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003cstrong\u003eColumn 4\u003c/strong\u003e - This column shows the controller and action with a syntax of \u003ccode\u003econtroller#action\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eOne of the other nice things about utilizing route helper methods is that they create predictable names for the methods. Once you get into day-to-day Rails development, you will only need to run \u003ccode\u003erails routes\u003c/code\u003e to find custom paths.\u003c/p\u003e  \u003cp\u003eLet's imagine that you take over a legacy Rails application that was built with traditional routing conventions. If you see CRUD controllers for newsletters, students, sales, offers, and coupons, you don't have to look up the routes to know that you could call the index URLs for each resource below:\u003c/p\u003e  \u003cul\u003e \u003cli\u003eNewsletters - \u003ccode\u003enewsletters_path\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eStudents - \u003ccode\u003estudents_path\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eSales - \u003ccode\u003esales_path\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eOffers - \u003ccode\u003eoffers_path\u003c/code\u003e\n\u003c/li\u003e \u003cli\u003eCoupons - \u003ccode\u003ecoupons_path\u003c/code\u003e\n\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eThis is an example of the Rails design goal: \"convention over configuration.\" Rails' convention is that resources are accessible through their pluralized name with \u003ccode\u003e_path\u003c/code\u003e tacked on. Since \u003cstrong\u003eall\u003c/strong\u003e Rails developers honor these conventions, Rails developers rapidly come to feel at home in other Rails developers' codebases.\u003c/p\u003e  \u003ch2\u003eThe \u003ccode\u003elink_to\u003c/code\u003e Method\u003c/h2\u003e  \u003cp\u003eOur first three tests are currently passing; let's take a look at the lone failure. The failing test ensures that a link from the index page will point to that post's respective show page view template:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003edescribe 'index page' do\u003cbr\u003e  it 'links to post page' do\u003cbr\u003e    second_post = Post.create(title: \"My Title\", description: \"My post description\")\u003cbr\u003e    visit posts_path\u003cbr\u003e    expect(page).to have_link(second_post.title, href: post_path(second_post))\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis matcher is currently failing since our index page doesn't link to the show page. To fix this, let's update the index page like so:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% @posts.each do |post| %\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u0026lt;a href='\u0026lt;%= \"/posts/#{post.id}\" %\u0026gt;'\u0026gt;\u0026lt;%= post.title %\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThat is some bossy code. Let's use a \u003ccode\u003elink_to\u003c/code\u003e method to clean this up and get rid of multiple \u003ccode\u003eERB\u003c/code\u003e calls on the same line.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% @posts.each do |post| %\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u0026lt;%= link_to post.title, \"/posts/#{post.id}\" %\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis works and gets the tests passing, however, it can be refactored. Instead of hard-coding the path and using string interpolation, let's use \u003ccode\u003epost_path\u003c/code\u003e and pass in the \u003ccode\u003epost\u003c/code\u003e argument.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% @posts.each do |post| %\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u0026lt;%= link_to post.title, post_path(post.id) %\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis is much better, but to be thorough, let's make one last refactor: Rails is smart enough to know that if you pass in the \u003ccode\u003epost\u003c/code\u003e object as an argument, it should use the ID attribute, so we'll use this implementation code:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% @posts.each do |post| %\u0026gt;\u003cbr\u003e  \u0026lt;div\u0026gt;\u0026lt;%= link_to post.title, post_path(post) %\u0026gt;\u0026lt;/div\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIf you run the tests now, you'll see that they're all still passing.\u003c/p\u003e  \u003cp\u003eWe're using the \u003ccode\u003elink_to\u003c/code\u003e method to automatically create an HTML \u003ccode\u003ea\u003c/code\u003e tag. If you open the browser and inspect the HTML element of the link, you would see the following:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/flatiron-bucket/readme-lessons/link_to.png\" alt=\"Link To\"\u003e\u003c/p\u003e  \u003cp\u003e(If your browser loads a blank page, add Post.create(title: 'A lovely title', description: 'A superb description') to \u003ccode\u003edb/seeds.rb\u003c/code\u003e, run rake \u003ccode\u003edb:seed\u003c/code\u003e, and then restart your server.) As you can see, even though we never added HTML code for the link –– e.g., \u003ccode\u003e\u0026lt;a href=\"...\"\u0026gt;\u0026lt;/a\u0026gt;\u003c/code\u003e –– the \u003ccode\u003elink_to\u003c/code\u003e method rendered the correct tag for us.)\u003c/p\u003e  \u003ch2\u003eUsing the :as option\u003c/h2\u003e  \u003cp\u003eIf for any reason you don't like the naming structure for the methods or paths, you can customize them quite easily. A common change is to customize the path users go to in order to register for a site.\u003c/p\u003e  \u003cp\u003eIf we had a \u003ccode\u003eUser\u003c/code\u003e model/controller, in \u003ccode\u003eroutes.rb\u003c/code\u003e file, you would add the following line:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eget '/users/new', to: 'users#new', as: 'register' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow the application lets programmers use \u003ccode\u003eregister_path\u003c/code\u003e when creating links with \u003ccode\u003elink_to\u003c/code\u003e. Rails leverages routes and these \"helper route\" names in many places to help you keep your code flexible and brief.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eHopefully, this lesson shed some light on the beauty of using route helper methods. If you run the tests again after making the above changes, you'll notice something interesting: all of the tests are still passing! If we had hardcoded the URLs in the links in our views, we would have had a major issue: all of our links to the show pages would have broken, along with our Capybara tests. However, by using the built-in helper methods, the links all updated automatically.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g55aeb08314277c027be476939ccf5635","title":"Reducers Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-reducer\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/redux-reducer/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-reducer\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-reducer/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/3o7TKwxYkeW0ZvTqsU/giphy.gif\" alt=\"reduce\"\u003e\u003c/p\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eWrite a reducer.\u003c/li\u003e \u003cli\u003eThe reducer should be a pure function.\u003c/li\u003e \u003cli\u003eWrite a reducer that takes an action(payload).\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eEach year, around the holidays especially, we forget who we need to buy presents for. Let's write a function that will help us manage our gift recipient list. We should be able to add a person we need to buy a present for and remove people we no longer like (or who give us socks every year!).\u003c/p\u003e  \u003cp\u003eIn this lab, we will focus on writing two reducers to help us handle this task. Since we're drilling down into one concept, React is not set up in this lab, nor is there an \u003ccode\u003eindex.html\u003c/code\u003e file. Follow the instructions below and implement your code in \u003ccode\u003esrc/reducers/manageFriends.js\u003c/code\u003e and \u003ccode\u003esrc/reducers/managePresents.js\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eInstructions\u003c/h2\u003e  \u003col\u003e \u003cli\u003eIn \u003ccode\u003emanagePresents.js\u003c/code\u003e, write a function called \u003ccode\u003emanagePresents()\u003c/code\u003e that takes in the previous state and an action as its argument. Set a default value for the state argument - an object with a key, \u003ccode\u003enumberOfPresents\u003c/code\u003e, assigned to \u003ccode\u003e0\u003c/code\u003e.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eActions passed into this reducer will only have a \u003cem\u003etype\u003c/em\u003e attribute, so they    would look something like this:\u003c/p\u003e  \u003cp\u003e\u003ccode\u003ejs     action = {       type: \"INCREASE\"     } \u003c/code\u003e\u003c/p\u003e  \u003cp\u003eIf the reducer receives a \u003ccode\u003etype\u003c/code\u003e set to \u003ccode\u003e\"INCREASE\"\u003c/code\u003e, return a new state    where the value of \u003ccode\u003enumberOfPresents\u003c/code\u003e is increased by one. Use the tests to    guide you as you build out this reducer.\u003c/p\u003e  \u003col\u003e \u003cli\u003eIn \u003ccode\u003emanageFriends.js\u003c/code\u003e, write a function called \u003ccode\u003emanageFriends\u003c/code\u003e that takes in the previous state and an action as its argument.  Here, the initial state should be an object with a key, \u003ccode\u003efriends\u003c/code\u003e, set to an empty array.\u003c/li\u003e \u003c/ol\u003e  \u003cp\u003eThis time, the reducer should be able to handle two actions, \u003ccode\u003e\"ADD_FRIEND\"\u003c/code\u003e    and \u003ccode\u003e\"REMOVE_FRIEND\"\u003c/code\u003e. When adding a friend, the action will include a    \u003ccode\u003efriend\u003c/code\u003e key assigned to an object with \u003ccode\u003ename\u003c/code\u003e, \u003ccode\u003ehometown\u003c/code\u003e, and \u003ccode\u003eid\u003c/code\u003e keys.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003ejs     action = {       type: \"ADD_FRIEND\",       friend: {         name: \"Chrome Boi\",         hometown: \"NYC\",         id: 1       }     } \u003c/code\u003e\u003c/p\u003e  \u003cp\u003eWhen our reducer receives \u003ccode\u003e\"ADD_FRIEND\"\u003c/code\u003e, it should return a new state with    this friend object added to the \u003ccode\u003efriends\u003c/code\u003e array.\u003c/p\u003e  \u003cp\u003eWhen removing a friend, instead of an object, the action will include an \u003ccode\u003eid\u003c/code\u003e key    with an integer. Find the friend with the matching \u003ccode\u003eid\u003c/code\u003e and remove them. Thought of    in another way, the reducer is really returning a new state with an array of \u003ccode\u003efriends\u003c/code\u003e    that includes everyone \u003cem\u003eexcept\u003c/em\u003e the removed friend.\u003c/p\u003e  \u003cp\u003e\u003ccode\u003ejs     action = {       type: \"REMOVE_FRIEND\",       id: 1     } \u003c/code\u003e\u003c/p\u003e  \u003cp\u003eBoth reducers should be pure functions.  This means that the functions cannot change any object defined outside of the functions.  It also means that given an input, the reducers will always return the same output.\u003c/p\u003e  \u003ch2\u003eDon't Mutate State\u003c/h2\u003e  \u003cp\u003eAs the Redux documentation notes:\u003c/p\u003e  \u003cblockquote\u003e \u003cp\u003eSince one of the core tenets of Redux is to never mutate state, you'll often find yourself using \u003ccode\u003eObject.assign()\u003c/code\u003e to create copies of objects with new or updated values.\u003c/p\u003e \u003c/blockquote\u003e  \u003cp\u003eIf you remember, \u003ccode\u003eObject.assign()\u003c/code\u003e is a function that takes any number of arguments. It works by copying over from left to right the properties in each object passed as an argument.  Let's go over an example:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet dog = {id: 1, name: 'scooby', color: 'brown', age: 4};\u003cbr\u003e// if scooby had a birthday, we could write:\u003cbr\u003elet olderDog = Object.assign({}, dog, {age: dog.age + 1}) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eTranslating this to English would be something like, \"Start with a new empty object, copy over everything from the original \u003ccode\u003edog\u003c/code\u003e, then overwrite the \u003ccode\u003eage\u003c/code\u003e property with a new value.\"\u003c/p\u003e  \u003ch2\u003eA Note on the Object Spread Operator\u003c/h2\u003e  \u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/l0CRCmMBYQbL7dCmI/giphy.gif\" alt=\"future\"\u003e\u003c/p\u003e  \u003cp\u003eWhile effective, using \u003ccode\u003eObject.assign()\u003c/code\u003e can quickly make simple reducers difficult to read given its rather verbose syntax.\u003c/p\u003e  \u003cp\u003eAn alternative approach is to use the object spread syntax, which lets you use the spread (...) operator to copy enumerable properties from one object to another in a more succinct way:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003elet dog = {id: 1, name: 'scooby', color: 'brown', age: 4};\u003cbr\u003e\u003cbr\u003elet olderDog = {...dog, age: dog.age + 1} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis would translate to the same English, \"Return a new object that contains all the key-value pairs from \u003ccode\u003edog\u003c/code\u003e copied over with the \u003ccode\u003eage\u003c/code\u003e key overwritten with a new value\".\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003eMozilla Object.assign\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://redux.js.org/docs/recipes/UsingObjectSpreadOperator.html\"\u003eRedux Docs: Object Spread Operator\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"\u003eMozilla findIndex\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"http://redux.js.org/docs/basics/Reducers.html\"\u003eRedux Documentation\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gf517f16385f462531ac7128b5be7e079","title":"Redux: Putting it All Together","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"quote-maker-react-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/quote-maker-react-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/quote-maker-react-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/quote-maker-react-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse the react-redux library and the redux library to build an application with\nmultiple resources.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eIn this lab we will be building an application for making quotes. This will\ninclude creating a quote and updating the global Redux state.\u003c/p\u003e\n\n\u003cp\u003eIn our \u003ccode\u003eApp\u003c/code\u003e component we will render the components: \u003ccode\u003eQuoteForm\u003c/code\u003e \u0026amp; \u003ccode\u003eQuotes\u003c/code\u003e. We\nwill also need a reducer and actions file for our Quotes.\u003c/p\u003e\n\n\u003ch3\u003eQuotes Reducer\u003c/h3\u003e\n\n\u003cp\u003eThe quotes reducer should have an initial state of:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut when a Quote is added it should look like this\n(we will be using the uuid node package for generating ids):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e  {\u003cbr\u003e    id: '23423424242-42342423424242-fafdb',\u003cbr\u003e    content: 'One Awesome Quote',\u003cbr\u003e    author: 'Luke Ghenco'\u003cbr\u003e  }\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe will also need to extend out the Quotes Reducer to handle removing quotes,\nupvoting quotes, and downvoting quotes as well. Check out the test specs for how\nto build these.\u003c/p\u003e\n\n\u003ch3\u003eQuotes Actions\u003c/h3\u003e\n\n\u003cp\u003eBuild out several actions as specified in the tests that build Action Creators\nfor add, removing, upvoting and downvoting quotes.\u003c/p\u003e\n\n\u003ch3\u003eQuoteForm Component\u003c/h3\u003e\n\n\u003cp\u003eOur Quote form will have a textarea for a quotes content and an input for a\nquotes author. We will be using component state for updating the inputs so make\nsure to have a state of \u003ccode\u003e{ content: '', author: '' }\u003c/code\u003e in your \u003ccode\u003eQuoteForm\u003c/code\u003e\nconstructor. You will make a dispatch action to Redux using an action you will\ncreate called \u003ccode\u003eaddQuote()\u003c/code\u003e that will take a quote as an argument and start the\nreducer process.\u003c/p\u003e\n\n\u003ch3\u003eQuotes Component\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eQuotes\u003c/code\u003e Component will render a list of individual \u003ccode\u003eQuoteCard\u003c/code\u003e components.\nIt needs to be connected to the \u003ccode\u003eRedux\u003c/code\u003e state so that it can render the quotes.\nAlso make sure to attach the remove, upvote, and downvote actions from the\nQuotes Actions file to pass down as callback props to the \u003ccode\u003eQuoteCard\u003c/code\u003e component.\u003c/p\u003e\n\n\u003ch3\u003eQuoteCard Component\u003c/h3\u003e\n\n\u003cp\u003eMake sure to connect the callback action props to the the Upvote, Downvote and\nDelete buttons.\u003c/p\u003e\n\n\u003ch4\u003eExample App\u003c/h4\u003e\n\n\u003cp\u003eHere is an image of the example app, of what you are trying to build.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3-us-west-2.amazonaws.com/curriculum-content/web-development/react/quote-app-image.png\" alt=\"quote app example\"\u003e\u003c/p\u003e\n\n\u003ch4\u003eNote\u003c/h4\u003e\n\n\u003cp\u003eWe are using the \u003ccode\u003eNode UUID\u003c/code\u003e package for this to create random unique ids. Here\nis the documentation for \u003ca href=\"https://github.com/kelektiv/node-uuid\"\u003eNode UUID\u003c/a\u003e. To\nuse it just import it into your reducer and invoke it\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport uuid from 'uuid';\u003cbr\u003e\u003cbr\u003econst id = uuid();\u003cbr\u003econsole.log(id) // '1fd3234'\n\u003c/code\u003e\u003c/pre\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g300821787762e33d2f1a3370546c838f","title":"Refactoring Our Code Into A Library","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-create-store\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/redux-create-store/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-create-store\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-create-store/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003cp\u003eIn this lesson, we will learn how to turn our code into a library that can be used across JavaScript applications. By the end of the lesson you will be able to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUnderstand which part of our codebase can be used across applications.\u003c/li\u003e\n\u003cli\u003eUnderstand how to encapsulate the functions we built.\u003c/li\u003e\n\u003cli\u003eLearn about the \u003ccode\u003egetState\u003c/code\u003e method and how it works.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUse \u003ccode\u003ejs/createStore.js\u003c/code\u003e to follow along. Open \u003ccode\u003eindex.html\u003c/code\u003e to try out the code.\u003c/p\u003e\n\u003ch2\u003eEncapsulate our application's state by wrapping our code in a function\u003c/h2\u003e\n\u003cp\u003eLet's look at the code that we wrote in the last section.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet state;\u003cbr\u003e\u003cbr\u003efunction reducer(state = { count: 0 }, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction dispatch(action){\u003cbr\u003e  state = reducer(state, action);\u003cbr\u003e  render();\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction render() {\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = state.count;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003edispatch({ type: '@@INIT' })\u003cbr\u003elet button = document.getElementById('button');\u003cbr\u003e\u003cbr\u003ebutton.addEventListener('click', () =\u0026gt; {\u003cbr\u003e    dispatch({ type: 'INCREASE_COUNT' });\u003cbr\u003e})\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSee that \u003ccode\u003estate\u003c/code\u003e variable all the way at the top of our code? Remember, that variable holds a representation of all of our data we need to display. So it's not very good if this variable is global, and we can accidentally overwrite simply by writing \u003ccode\u003estate = 'bad news bears'\u003c/code\u003e somewhere else in our codebase. Goodbye state.\u003c/p\u003e\n\u003cp\u003eWe can solve this by wrapping our state in a function. (We will discuss a bit later why we have named this function \u003ccode\u003ecreateStore\u003c/code\u003e.)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction createStore() {\u003cbr\u003e  let state;\u003cbr\u003e}\u003cbr\u003e// ...\u003cbr\u003e\u003cbr\u003efunction dispatch(action) {\u003cbr\u003e  state = reducer(state, action);\u003cbr\u003e  render();\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction render() {\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = state.count;\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow if you reload the browser, you'll see an error pointing to where we are dispatching our initial action; this is because the \u003ccode\u003edispatch\u003c/code\u003e function does not have access to that declared state. Notice that \u003ccode\u003erender\u003c/code\u003e won't have access to our state either. At this point, we might be tempted to move everything inside of our new function. However, the goal here is to include only the code that would be common to all JavaScript applications inside the function. We'll try to figure out exactly what we should move in the next section.\u003c/p\u003e\n\u003ch2\u003eMove Code Common to Every JavaScript Application Inside Our New Function\u003c/h2\u003e\n\u003cp\u003eWe ultimately want our new function to become a function that all of our applications following the \u003cstrong\u003eRedux\u003c/strong\u003e pattern can use. To decide what our new function should be able to do, let's go back to our \u003cstrong\u003eRedux\u003c/strong\u003e fundamentals.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eAction -\u0026gt; Reducer -\u0026gt; New State.\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe function that goes through this flow for us is the \u003ccode\u003edispatch\u003c/code\u003e function. We call \u003ccode\u003edispatch\u003c/code\u003e with an action, and it calls our reducer and returns to us a new state. So let's move dispatch inside of our new method.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction createStore() {\u003cbr\u003e  let state;\u003cbr\u003e  // state is now accessible to dispatch\u003cbr\u003e\u003cbr\u003e  function dispatch(action) {\u003cbr\u003e    state = reducer(state, action);\u003cbr\u003e    render();\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: You may notice that in the above code we made a \u003cem\u003eclosure\u003c/em\u003e. As you surely remember a JavaScript function has access to all the variables that were in scope at the time of its definition. This feature is called a closure since a function encloses or draws a protective bubble around the variables in its scope and carries those with it when invoked later.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAs you see above, \u003ccode\u003edispatch\u003c/code\u003e is now private to our new function. But we'll need to call the function when certain events happen in our application (eg. we might want to call dispatch when a user clicks on a button). So we expose the method by having our function return a JavaScript object containing the \u003ccode\u003edispatch\u003c/code\u003e method. In \u003cstrong\u003eRedux\u003c/strong\u003e terms, this returned JavaScript object is called the \u003cstrong\u003estore\u003c/strong\u003e, so we've named the method \u003ccode\u003ecreateStore\u003c/code\u003e because that's what it does.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction createStore() {\u003cbr\u003e  let state;\u003cbr\u003e\u003cbr\u003e  function dispatch(action) {\u003cbr\u003e    state = reducer(state, action);\u003cbr\u003e    render();\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  return { dispatch };\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, in order to access the \u003ccode\u003edispatch\u003c/code\u003e method, we will create a variable \u003ccode\u003estore\u003c/code\u003e and set it equal to the result of calling \u003ccode\u003ecreateStore\u003c/code\u003e. Because \u003ccode\u003ecreateStore\u003c/code\u003e returns an object that contains the \u003ccode\u003edispatch\u003c/code\u003e method, we can now access the method from \u003ccode\u003estore\u003c/code\u003e. Let's modify the code where we dispatch the initial action as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet store = createStore();\u003cbr\u003estore.dispatch({ type: '@@INIT' });\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo now we have this object called a store which contains all of our application's state. Right now we can dispatch actions that modify that state, but we need some way to retrieve data from the store. To do this, our store should respond to one other method, \u003ccode\u003egetState\u003c/code\u003e. This method simply returns the state so we can use it elsewhere in our application. We will also need to add \u003ccode\u003egetState\u003c/code\u003e to the object our \u003ccode\u003ecreateStore\u003c/code\u003e function returns.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction createStore() {\u003cbr\u003e  let state;\u003cbr\u003e\u003cbr\u003e  function dispatch(action) {\u003cbr\u003e    state = reducer(state, action);\u003cbr\u003e    render();\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function getState() {\u003cbr\u003e    return state;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return {\u003cbr\u003e    dispatch,\u003cbr\u003e    getState\u003cbr\u003e  };\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we can get our code working by changing \u003ccode\u003erender\u003c/code\u003e to the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction render() {\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = store.getState().count;\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e...and then updating our button event listener to use \u003ccode\u003estore.dispatch\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet button = document.getElementById('button');\u003cbr\u003e\u003cbr\u003ebutton.addEventListener('click', () =\u0026gt; {\u003cbr\u003e    store.dispatch({ type: 'INCREASE_COUNT' });\u003cbr\u003e})\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAll in all, with these changes, the code should look like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction createStore() {\u003cbr\u003e  let state;\u003cbr\u003e\u003cbr\u003e  function dispatch(action) {\u003cbr\u003e    state = reducer(state, action);\u003cbr\u003e    render();\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function getState() {\u003cbr\u003e    return state;\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  return {\u003cbr\u003e    dispatch,\u003cbr\u003e    getState\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction reducer(state = { count: 0 }, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction render() {\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = store.getState().count;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003elet store = createStore();\u003cbr\u003estore.dispatch({ type: '@@INIT' });\u003cbr\u003elet button = document.getElementById('button');\u003cbr\u003e\u003cbr\u003ebutton.addEventListener('click', () =\u0026gt; {\u003cbr\u003e    store.dispatch({ type: 'INCREASE_COUNT' });\u003cbr\u003e})\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOur code is back to working. And it looks like we have a function called \u003ccode\u003ecreateStore\u003c/code\u003e which can work with any JavaScript application...almost.\u003c/p\u003e\n\u003ch2\u003eAbstract away the reducer\u003c/h2\u003e\n\u003cp\u003eWe know that \u003cstrong\u003eRedux\u003c/strong\u003e works by having an action dispatched, which calls a reducer, and then renders the view. Our \u003ccode\u003ecreateStore\u003c/code\u003e's dispatch method does that.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction dispatch(action) {\u003cbr\u003e  state = reducer(state, action);\u003cbr\u003e  render();\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice, however, that we did not move the \u003ccode\u003ereducer\u003c/code\u003e function into the \u003ccode\u003ecreateStore\u003c/code\u003e function. Take a look at it. \u003cem\u003eThis code\u003c/em\u003e is particular to our application.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction reducer(state = { count: 0 }, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe happen to have an application that increases a count. But we can imagine applications that manage people's songs, their GitHub repositories, or their contacts. So we want our \u003ccode\u003edispatch\u003c/code\u003e method to call a reducer every time an action is dispatched. However, we don't want the \u003ccode\u003ecreateStore\u003c/code\u003e function to specify what that reducer is, or what it does. We want \u003ccode\u003ecreateStore\u003c/code\u003e to be generic enough for \u003cem\u003eany\u003c/em\u003e JavaScript application. Instead, we should make the reducer an argument to our \u003ccode\u003ecreateStore\u003c/code\u003e function. Then we pass through our reducer function when invoking the \u003ccode\u003ecreateStore\u003c/code\u003e method.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction createStore(reducer) {\u003cbr\u003e  let state;\u003cbr\u003e\u003cbr\u003e  function dispatch(action) {\u003cbr\u003e    state = reducer(state, action);\u003cbr\u003e    render();\u003cbr\u003e  }\u003cbr\u003e\u003cbr\u003e  function getState() {\u003cbr\u003e    return state;\u003cbr\u003e  };\u003cbr\u003e\u003cbr\u003e  return {\u003cbr\u003e    dispatch,\u003cbr\u003e    getState\u003cbr\u003e  };\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003efunction reducer(state = { count: 0 }, action) {\u003cbr\u003e  switch (action.type) {\u003cbr\u003e    case 'INCREASE_COUNT':\u003cbr\u003e      return { count: state.count + 1 };\u003cbr\u003e\u003cbr\u003e    default:\u003cbr\u003e      return state;\u003cbr\u003e  }\u003cbr\u003e}\u003cbr\u003e\u003cbr\u003e\u003cbr\u003efunction render() {\u003cbr\u003e  let container = document.getElementById('container');\u003cbr\u003e  container.textContent = store.getState().count;\u003cbr\u003e};\u003cbr\u003e\u003cbr\u003elet store = createStore(reducer) // createStore takes the reducer as an argument\u003cbr\u003estore.dispatch({ type: '@@INIT' });\u003cbr\u003elet button = document.getElementById('button');\u003cbr\u003e\u003cbr\u003ebutton.addEventListener('click', () =\u0026gt; {\u003cbr\u003e  store.dispatch({ type: 'INCREASE_COUNT' });\u003cbr\u003e});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs you see above, \u003ccode\u003ecreateStore\u003c/code\u003e takes the reducer as the argument. This sets the new store's reducer as \u003ccode\u003ereducer\u003c/code\u003e. When an action is dispatched, it calls the reducer that we passed through when creating the store.\u003c/p\u003e\n\u003ch2\u003eSummary\u003c/h2\u003e\n\u003cp\u003eWith this set up, we've got a fully functional \u003ccode\u003estore\u003c/code\u003e, that encapsulates our state and provides a controlled way to write (\u003ccode\u003edispatch\u003c/code\u003e) and retrieve (\u003ccode\u003egetState\u003c/code\u003e) information.\u003c/p\u003e\n\u003cp\u003eEvery piece of code that would be common to any JavaScript application following this pattern is wrapped inside of the \u003ccode\u003ecreateStore\u003c/code\u003e function. Any code that is particular to our application is outside that function.\u003c/p\u003e\n\u003cp\u003eWhat's particular to a specific application?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHow the DOM is updated in our \u003ccode\u003erender\u003c/code\u003e function\u003c/li\u003e\n\u003cli\u003eWhat events trigger a dispatch method\u003c/li\u003e\n\u003cli\u003eHow our state should change in response to different actions being dispatched.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese are all implemented outside of our \u003ccode\u003ecreateStore\u003c/code\u003e function. What is generic to each application following this pattern?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThat a call to \u003ccode\u003edispatch\u003c/code\u003e should call a reducer, reassign the state, and render a change.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis is implemented inside the \u003ccode\u003ecreateStore\u003c/code\u003e function.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g1d334a6c4e7336b7f1dfb8d48e33735e","title":"Rendering Collections","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rendering-collections-reading\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rendering-collections-reading/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rendering-collections-reading\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rendering-collections-reading/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eUse the \u003ccode\u003ecollection\u003c/code\u003e keyword with partials\u003c/li\u003e \u003cli\u003ePass a collection to the render method\u003c/li\u003e \u003cli\u003eHandle empty collections\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eOverview\u003c/h2\u003e  \u003cp\u003eUp until now our only way to render collections was somewhat manually. We could iterate over an array and render the partial for each object in the array. Let's see how Rails can abstract this into a nicer syntax.\u003c/p\u003e  \u003ch2\u003eLesson\u003c/h2\u003e  \u003cp\u003eMake sure you run \u003ccode\u003erake db:seed\u003c/code\u003e before you test out the app in your browser. Because this lesson focuses on using the \u003ccode\u003ecollection\u003c/code\u003e keyword with partials, we've hard-coded in the connection between authors and posts. In the posts controller create action, we link the newly created post with the first author in the database.\u003c/p\u003e  \u003cp\u003eCurrently, our \u003ccode\u003eposts#index\u003c/code\u003e view is manually rendering the partial in a loop.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% @posts.each do |post| %\u0026gt;\u003cbr\u003e  \u0026lt;%= render :partial =\u0026gt; \"post\", {:locals =\u0026gt; {:post =\u0026gt; post}} %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eRails offers a great way to render a collection using a partial by passing the collection option to the render method.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= render :partial =\u0026gt; \"post\", :collection =\u0026gt; @posts %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur code is tighter and both more abstract and more clear. Another even more abstract method Rails gives us to do this is passing an array directly to the render method.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= render @posts %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThis approach is a bit more abstract. Under the hood Rails uses the convention that you will have a partial with the name of the models in the collection. Rails will even render a collection of heterogeneous models ([customer, order, customer]) calling the correct partial for each one.\u003c/p\u003e  \u003ch3\u003eEmpty Collections\u003c/h3\u003e  \u003cp\u003eWhat happens if the collection you pass to your render call is empty? If you don't handle this exception the render method will return nil and nothing will appear on the screen. A useful trick is to use the \u003ccode\u003e||\u003c/code\u003e operator to print something to the screen to alert the user to this.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= render(@posts) || \"There are no blog posts!\" %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e When dealing with an empty collection, you'll \u003cem\u003eneed to use \u003ccode\u003e()\u003c/code\u003e to wrap that collection\u003c/em\u003e.\u003c/p\u003e  \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eAs always, Rails has tried to abstract commonly used functionality into more terse and implicit code. Experiment with these tricks in the upcoming lab.\u003c/p\u003e  \u003ch2\u003eVideo Review\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=XpthyOc767U\"\u003ePartials and Collections\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3a9edc983d9695e91782782f84e14a24","title":"Rendering Collections Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rendering-collections-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rendering-collections-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rendering-collections-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rendering-collections-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse the \u003ccode\u003ecollection\u003c/code\u003e keyword with partials\u003c/li\u003e\n\u003cli\u003ePass a collection to the render method \u003c/li\u003e\n\u003cli\u003eHandle empty collections\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eLet's go back to our store domain.  We had an admin portion of the site where admins could check on their orders and invoices. We've changed it slightly so that, rather than static pages with stubs for orders, we've seeded the database with actual order data. Let's refactor the admin portion of the store to use partials and render collections.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eWe've provided a seed file so you can have some data to play around with –– run \u003ccode\u003erake db:seed\u003c/code\u003e to seed the database.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eRefactor the \u003ccode\u003einvoices/index.html.erb\u003c/code\u003e view to render a collection of partials with \u003ccode\u003e_invoice.html.erb\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eRefactor the \u003ccode\u003eorders/index.html.erb\u003c/code\u003e view to render a collection of partials with \u003ccode\u003e_order.html.erb\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g44faad617dec5f650308035ce2854f3c","title":"Rendering Content Types","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-rendering-different-content-types-using-rails\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-rendering-different-content-types-using-rails/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-rendering-different-content-types-using-rails\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-rendering-different-content-types-using-rails/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eOverride the default Rails view\u003c/li\u003e\n\u003cli\u003eRender plain text from a Rails controller\u003c/li\u003e\n\u003cli\u003eRender JSON from a Rails controller\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson, we revisited the default Rails MVC structure, and at the\nend, an ERB file was rendered. Rails, however, can render multiple types of\ncontent. In this lesson, we're going to look at some of the content types most\nuseful to us as we build towards a Rails API.\u003c/p\u003e\n\n\u003cp\u003eTo follow along, run \u003ccode\u003erails db:migrate\u003c/code\u003e and \u003ccode\u003erails db:seed\u003c/code\u003e to set up your\ndatabase and example data.\u003c/p\u003e\n\n\u003ch2\u003eOverriding the Default Rails View\u003c/h2\u003e\n\n\u003cp\u003eLeaving off from the solution of the last lesson, the \u003ccode\u003eindex\u003c/code\u003e action rendered all\nbirds:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e\u0026nbsp;\u0026nbsp;end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd we know that this is the same as explicitly stating:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render 'birds/index.html.erb'\u003cbr\u003e\u0026nbsp;\u0026nbsp;end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut we aren't restricted to displaying ERB. We can indicate what type\nof content we want to render. Let's first look at plain text.\u003c/p\u003e\n\n\u003ch3\u003eRender Plain Text From a Controller\u003c/h3\u003e\n\n\u003cp\u003eTo render plain text from a Rails controller, you specify \u003ccode\u003eplain:\u003c/code\u003e, followed by\nthe text you want to display:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render plain: \"Hello #{@birds[3].name}\"\u003cbr\u003e\u0026nbsp;\u0026nbsp;end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the browser, this displays as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHello Mourning Dove\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis isn't very fancy, but \u003cstrong\u003e\u003cem\u003ethis is actually enough for us to start using our\nJavaScript skills and access with a \u003ccode\u003efetch()\u003c/code\u003e request\u003c/em\u003e\u003c/strong\u003e. \u003c/p\u003e\n\n\u003cp\u003eTo confirm this is working, we need a frontend to send a request to our Rails\napp. In this main directory of this code-along, there is an HTML file, \u003ccode\u003eexample_frontend.html\u003c/code\u003e, for\nthis purpose. Follow these steps to see the BirdsController in action:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eFirst, replace \u003ccode\u003eBirdsController\u003c/code\u003e with the code above and start up the Rails\nserver with \u003ccode\u003erails s\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSecond, from this lesson's local directory, in your terminal, type \u003ccode\u003eopen\nexample_frontend.html\u003c/code\u003e. You should see a webpage open with the text:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eThis HTML file isn't part of the Rails app. It is here to help you test JS against Rails as you follow along.\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhile viewing \u003ccode\u003eexample_frontend.html\u003c/code\u003e, open the browser console and run the following:\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003efetch('http://localhost:3000/birds').then(response =\u0026gt; response.text()).then(text =\u0026gt; console.log(text))\u003cbr\u003e// \u0026gt; Promise {}\u003cbr\u003eHello Mourning Dove\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNotice\u003c/strong\u003e: On resolution of the \u003ccode\u003efetch()\u003c/code\u003e request here, in the first\n\u003ccode\u003e.then()\u003c/code\u003e, \u003ccode\u003eresponse.text()\u003c/code\u003e is called, since we're handling plain text.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWe haven't really escaped the MVC structure of Rails, but we're no longer using\nthe ERB view, nor are we really \u003cem\u003eviewing\u003c/em\u003e in the same way we were before.\u003c/p\u003e\n\n\u003cp\u003eWe've actually requested data, and since it is just plain text, JavaScript can\nhandle that. But, Rails has one better.\u003c/p\u003e\n\n\u003ch3\u003eRender JSON From a Controller\u003c/h3\u003e\n\n\u003cp\u003eTo render \u003cem\u003eJSON\u003c/em\u003e from a Rails controller, you specify \u003ccode\u003ejson:\u003c/code\u003e followed by data\nthat can be converted to valid JSON:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render json: 'Remember that JSON is just object notation converted to string data, so strings also work here'\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can pass strings as we see above, as well as hashes, arrays, and other data\ntypes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render json: { message: 'Hashes of data will get converted to JSON' }\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render json: ['As','well','as','arrays']\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn our bird watching case, we actually already have a collection of data, \u003ccode\u003e@birds\u003c/code\u003e,\nso we can write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render json: @birds\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the Rails server running, check out \u003ccode\u003ehttp://localhost:3000/birds\u003c/code\u003e. You\nshould see that Rails has output all the data available from all the \u003ccode\u003eBird\u003c/code\u003e\nrecords!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cbr\u003e  {\u003cbr\u003e      \"id\": 1,\u003cbr\u003e      \"name\": \"Black-Capped Chickadee\",\u003cbr\u003e      \"species\": \"Poecile Atricapillus\",\u003cbr\u003e      \"created_at\": \"2019-05-09T11:07:58.188Z\",\u003cbr\u003e      \"updated_at\": \"2019-05-09T11:07:58.188Z\"\u003cbr\u003e    },\u003cbr\u003e    {\u003cbr\u003e      \"id\": 2,\u003cbr\u003e      \"name\": \"Grackle\",\u003cbr\u003e      \"species\": \"Quiscalus Quiscula\",\u003cbr\u003e      \"created_at\": \"2019-05-09T11:07:58.195Z\",\u003cbr\u003e      \"updated_at\": \"2019-05-09T11:07:58.195Z\"\u003cbr\u003e    },\u003cbr\u003e    {\u003cbr\u003e      \"id\": 3,\u003cbr\u003e      \"name\": \"Common Starling\",\u003cbr\u003e      \"species\": \"Sturnus Vulgaris\",\u003cbr\u003e      \"created_at\": \"2019-05-09T11:07:58.199Z\",\u003cbr\u003e      \"updated_at\": \"2019-05-09T11:07:58.199Z\"\u003cbr\u003e    },\u003cbr\u003e    {\u003cbr\u003e      \"id\": 4,\u003cbr\u003e      \"name\": \"Mourning Dove\",\u003cbr\u003e      \"species\": \"Zenaida Macroura\",\u003cbr\u003e      \"created_at\": \"2019-05-09T11:07:58.205Z\",\u003cbr\u003e      \"updated_at\": \"2019-05-09T11:07:58.205Z\"\u003cbr\u003e    }\u003cbr\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGoing back to our \u003ccode\u003eexample_frontend.html\u003c/code\u003e, we could send another \u003ccode\u003efetch()\u003c/code\u003e\nrequest to the same place, only this time, since we're handling JSON, we'll swap\nout \u003ccode\u003etext()\u003c/code\u003e for \u003ccode\u003ejson()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efetch('http://localhost:3000/birds').then(response =\u0026gt; response.json()).then(object =\u0026gt; console.log(object))\u003cbr\u003e// \u0026gt; Promise {}\u003cbr\u003e \u0026gt; [{…}, {…}, {…}, {…}]\u003cbr\u003e\u003cbr\u003e// 0: {id: 1, name: \"Black-Capped Chickadee\", species: \"Poecile Atricapillus\", created_at: \"2019-05-09T11:07:58.188Z\", updated_at: \"2019-05-09T11:07:58.188Z\"}\u003cbr\u003e// 1: {id: 2, name: \"Grackle\", species: \"Quiscalus Quiscula\", created_at: \"2019-05-09T11:07:58.195Z\", updated_at: \"2019-05-09T11:07:58.195Z\"}\u003cbr\u003e// 2: {id: 3, name: \"Common Starling\", species: \"Sturnus Vulgaris\", created_at: \"2019-05-09T11:07:58.199Z\", updated_at: \"2019-05-09T11:07:58.199Z\"}\u003cbr\u003e// 3: {id: 4, name: \"Mourning Dove\", species: \"Zenaida Macroura\", created_at: \"2019-05-09T11:07:58.205Z\", updated_at: \"2019-05-09T11:07:58.205Z\"}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFour birds!\u003c/p\u003e\n\n\u003cp\u003eYou may also often see more detailed nesting in the \u003ccode\u003erender json:\u003c/code\u003e statement:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render json: { birds: @birds, messages: ['Hello Birds', 'Goodbye Birds'] }\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNotice that the above would alter the structure of the data being rendered. Rather\nthan an array of four birds, an object with two keys, each pointing to an array\nwould be rendered instead. We will explore shaping our data in greater detail in\nupcoming lessons, but it is a critical concept to consider.\u003c/p\u003e\n\n\u003cp\u003eWith the intent of constructing an API, we always want to be thinking about\ndata. The purpose of an API is to be an accessible \u003cem\u003einterface\u003c/em\u003e, in our case, to\na JavaScript frontend, so we want to always be thoughtful in how we structure\ndata and how that data will be utilized.\u003c/p\u003e\n\n\u003cp\u003eWell structured API data can make frontend code simpler. Poorly structured API\ndata can lead to complicated nests of JavaScript enumerables.\u003c/p\u003e\n\n\u003ch2\u003eWhere is our Data Being Converted to JSON?\u003c/h2\u003e\n\n\u003cp\u003eWhen we include an array or hash after \u003ccode\u003erender json:\u003c/code\u003e, it turns out that Rails\nis actually being accomodating to us and implicitly handling the work of\nconverting that array or hash to JSON.\u003c/p\u003e\n\n\u003cp\u003eWe can choose to explicitly convert our array or hash, without any problem by\nadding \u003ccode\u003eto_json\u003c/code\u003e to the end:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render json: { birds: @birds, messages: ['Hello Birds', 'Goodbye Birds'] }.to_json\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will produce the same result as it did before. The \u003ccode\u003eto_json\u003c/code\u003e method is\nmade available to both \u003ca href=\"https://apidock.com/rails/Array/to_json\"\u003earrays\u003c/a\u003e and \u003ca href=\"https://apidock.com/rails/Hash/to_json\"\u003ehashes\u003c/a\u003e in Rails,\nbut is not natively available to them in Ruby. It does exactly what it says - it\ntakes whatever array or hash it is called on and converts it to JSON.\u003c/p\u003e\n\n\u003cp\u003eRails favors convention as well as a clean and clutter free controller, so it\nhas some built in 'magic' to handle things like this and keep us from having to\nwrite \u003ccode\u003eto_json\u003c/code\u003e on the same line as \u003ccode\u003erender json:\u003c/code\u003e in every action we write.\u003c/p\u003e\n\n\u003ch2\u003eSay Goodbye to Instance Variables\u003c/h2\u003e\n\n\u003cp\u003eSo far in controller actions, we've typically seen instance variables being used,\njust as we have in the examples in this lesson:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render json: @birds\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, we really only needed instance variables when we were rendering to ERB.\nNow that we are directly rendering to JSON in the same action, we no longer need\nto deal with instance variables and can instead just use a local variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    birds = Bird.all\u003cbr\u003e    render json: birds\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is how we will be displaying our examples going forward.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eLet's take a step back and consider what all this means because this is\nactually huge! Now that you know that Rails can render JSON, you have the\nability to create entirely independent JavaScript frontends that can communicate\nwith Rails backends!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gfab78f63e9452856cd63d0d1eaa1f971","title":"Rendering Related Object Data in JSON","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-rendering-related-object-data-in-json\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-rendering-related-object-data-in-json/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-rendering-related-object-data-in-json\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-rendering-related-object-data-in-json/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eReview Rails generators\u003c/li\u003e\n\u003cli\u003eRender related models as nested JSON data\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eUsing \u003ccode\u003eonly\u003c/code\u003e and \u003ccode\u003eexcept\u003c/code\u003e, we can be selective in what attributes we want to\nrender to JSON in our basic Rails API. But what if we want to be \u003cem\u003einclusive\u003c/em\u003e\nrather than selective? With Rails models, we're often dealing with many\ndifferent related objects. Using \u003ccode\u003einclude\u003c/code\u003e when rendering JSON, our API can send\ndata about one resource along with data about its associated resources.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we will look at how our Rails API will be able to convey\nrelationships between multiple models in a single JSON object. In order to fully\nunderstand \u003ccode\u003einclude\u003c/code\u003e, however, we'll need to expand our example domain so\nthat we have a few related resources to work with.\u003c/p\u003e\n\n\u003ch2\u003eSetting up Additional Related Resources To Include - Bird Sightings\u003c/h2\u003e\n\n\u003cp\u003eIn the last few code-alongs, we've been playing around with a basic resource,\n\u003ccode\u003eBird\u003c/code\u003e for a bird watching application. The \u003ccode\u003eBird\u003c/code\u003e resource is already set up in\nthis lesson with \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003especies\u003c/code\u003e attributes. We could imagine in a fully\ndeveloped bird watching application that birds would come up a lot. Likely, the\nsame type of bird will come up a lot, so a \u003ccode\u003eBird\u003c/code\u003e model makes sense.\u003c/p\u003e\n\n\u003cp\u003eWe could imagine, as well, if we were to expand on this application, a logical\nnext step for bird watching might be some sort of location-based \u003cem\u003ebird sighting\u003c/em\u003e\nsystem. A user of this site might one day be able to log the sighting of rare\nbirds in their backyard.\u003c/p\u003e\n\n\u003cp\u003e\n  \u003cimg width=\"500\" src=\"https://curriculum-content.s3.amazonaws.com/js/rails-as-an-api/Image_16_BirdSighting.png\"\u003e\n\u003c/p\u003e\n\n\u003cp\u003eThe next resource to build, then, might be \u003ccode\u003eLocation\u003c/code\u003e so we could connect\nspecific birds to specific locations. To speed things up, let's use the \u003ccode\u003emodel\u003c/code\u003e\ngenerator Rails provides. We can also give \u003ccode\u003eLocation\u003c/code\u003e a few attributes,\n\u003ccode\u003elatitude\u003c/code\u003e and \u003ccode\u003elongitude\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erails g model location latitude:float longitude:float\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003emodel\u003c/code\u003e generator creates the migration and model for us here which is all\nwe will need in this case.\u003c/p\u003e\n\n\u003cp\u003eWe can create one more resource, a \u003ccode\u003eSighting\u003c/code\u003e. A \u003ccode\u003eSighting\u003c/code\u003e will connect a\nspecific bird and location. A bird sighting in real life is an event that ties\nbirds to their locations at a specific time. Similarly, a \u003ccode\u003eSighting\u003c/code\u003e will do\nthe same by tying one \u003ccode\u003eBird\u003c/code\u003e to one \u003ccode\u003eLocation\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn the next part of this lesson, we'll add a controller action for this\n\u003ccode\u003eSighting\u003c/code\u003e resource, so this time, rather than using \u003ccode\u003emodel\u003c/code\u003e to create our\nfiles, we can use the \u003ccode\u003eresource\u003c/code\u003e generator. In addition, since we have\ntwo existing resources we're connecting, we can use the \u003ccode\u003ereferences\u003c/code\u003e keyword\nwhen listing them, and Rails will automatically connect them:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erails g resource sighting bird:references location:references\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis generates a migration with \u003ccode\u003ereferences\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass CreateSightings \u0026lt; ActiveRecord::Migration[5.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :sightings do |t|\u003cbr\u003e      t.references :bird, foreign_key: true\u003cbr\u003e      t.references :location, foreign_key: true\u003cbr\u003e\u003cbr\u003e      t.timestamps\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning \u003ccode\u003erails db:migrate\u003c/code\u003e now will produce slightly different schema, but if we\nlook at the file, we see it still connects the \u003ccode\u003e\"birds\"\u003c/code\u003e and \u003ccode\u003e\"locations\"\u003c/code\u003e \ntables to the \u003ccode\u003e\"sightings\"\u003c/code\u003e table by id:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecreate_table \"sightings\", force: :cascade do |t|\u003cbr\u003e  t.integer \"bird_id\"\u003cbr\u003e  t.integer \"location_id\"\u003cbr\u003e  t.datetime \"created_at\", null: false\u003cbr\u003e  t.datetime \"updated_at\", null: false\u003cbr\u003e  t.index [\"bird_id\"], name: \"index_sightings_on_bird_id\"\u003cbr\u003e  t.index [\"location_id\"], name: \"index_sightings_on_location_id\"\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe other effect of using \u003ccode\u003ereferences\u003c/code\u003e in the generator is that it will add\nrelationships automatically to the generated model:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Sighting \u0026lt; ApplicationRecord\u003cbr\u003e  belongs_to :bird\u003cbr\u003e  belongs_to :location\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe other models will remain unaltered, so we'll have to update them. A bird\nmay show up many times so it could be argued that a bird \u003cem\u003ehas many\u003c/em\u003e sightings.\nThe same would apply for a location. Through sightings, birds have many locations,\nand vice versa, so we would update our models to reflect these. Add the\nfollowing relationships to the \u003ccode\u003eBird\u003c/code\u003e and \u003ccode\u003eLocation\u003c/code\u003e models:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Bird \u0026lt; ApplicationRecord\u003cbr\u003e  has_many :sightings\u003cbr\u003e  has_many :locations, through: :sightings\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Location \u0026lt; ApplicationRecord\u003cbr\u003e  has_many :sightings\u003cbr\u003e  has_many :birds, through: :sightings\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the extra resources, we'll need additional seed data to test everything\nout. Update \u003ccode\u003edb/seeds.rb\u003c/code\u003e with the following then run \u003ccode\u003erails db:seed\u003c/code\u003e to set up\nthe example data.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebird_a = Bird.create(name: \"Black-Capped Chickadee\", species: \"Poecile Atricapillus\")\u003cbr\u003ebird_b = Bird.create(name: \"Grackle\", species: \"Quiscalus Quiscula\")\u003cbr\u003ebird_c = Bird.create(name: \"Common Starling\", species: \"Sturnus Vulgaris\")\u003cbr\u003ebird_d = Bird.create(name: \"Mourning Dove\", species: \"Zenaida Macroura\")\u003cbr\u003e\u003cbr\u003elocation_a = Location.create(latitude: \"40.730610\", longitude: \"-73.935242\")\u003cbr\u003elocation_b = Location.create(latitude: \"30.26715\", longitude: \"-97.74306\")\u003cbr\u003elocation_c = Location.create(latitude: \"45.512794\", longitude: \"-122.679565\")\u003cbr\u003e\u003cbr\u003esighting_a = Sighting.create(bird: bird_a, location: location_b)\u003cbr\u003esighting_b = Sighting.create(bird: bird_b, location: location_a)\u003cbr\u003esighting_c = Sighting.create(bird: bird_c, location: location_a)\u003cbr\u003esighting_d = Sighting.create(bird: bird_d, location: location_c)\u003cbr\u003esighting_e = Sighting.create(bird: bird_a, location: location_b)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith three related resources created, we can begin working on rendering them in\nJSON.\u003c/p\u003e\n\n\u003ch2\u003eIncluding Related Models in a Single Controller Action\u003c/h2\u003e\n\n\u003cp\u003eIn the \u003ccode\u003eSightingsController\u003c/code\u003e, now that the resources are created and connected,\nwe should be able to confirm our data has been created by including a\nbasic \u003ccode\u003eshow\u003c/code\u003e action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  render json: sighting\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith the Rails server running, visiting \u003ccode\u003ehttp://localhost:3000/sightings/1\u003c/code\u003e\nshould produce an object representing a \u003cem\u003esighting\u003c/em\u003e: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 1,\u003cbr\u003e  \"bird_id\": 1,\u003cbr\u003e  \"location_id\": 2,\u003cbr\u003e  \"created_at\": \"2019-05-14T11:20:37.225Z\",\u003cbr\u003e  \"updated_at\": \"2019-05-14T11:20:37.225Z\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE:\u003c/strong\u003e Notice that the object includes its own \u003ccode\u003e\"id\"\u003c/code\u003e, as well as the\nrelated \u003ccode\u003e\"bird_id\"\u003c/code\u003e and \u003ccode\u003e\"location_id\"\u003c/code\u003e. That is useful data. We \u003cem\u003ecould\u003c/em\u003e use\nthese values to send additional requests using JavaScript to get bird and\nlocation data if needed.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eTo include bird and location information in this controller action, now that our\nmodels are connected, the most direct way would be to build a custom hash like \nwe did in the previous lesson:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  render json: { id: sighting.id, bird: sighting.bird, location: sighting.location }\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis produces nested objects in our rendered JSON for \u003ccode\u003e\"bird\"\u003c/code\u003e and \u003ccode\u003e\"location\"\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"bird\": {\u003cbr\u003e    \"id\": 2,\u003cbr\u003e    \"name\": \"Grackle\",\u003cbr\u003e    \"species\": \"Quiscalus Quiscula\",\u003cbr\u003e    \"created_at\": \"2019-05-14T11:20:37.177Z\",\u003cbr\u003e    \"updated_at\": \"2019-05-14T11:20:37.177Z\"\u003cbr\u003e  },\u003cbr\u003e  \"location\": {\u003cbr\u003e    \"id\": 2,\u003cbr\u003e    \"latitude\": 30.26715,\u003cbr\u003e    \"longitude\": -97.74306,\u003cbr\u003e    \"created_at\": \"2019-05-14T11:20:37.196Z\",\u003cbr\u003e    \"updated_at\": \"2019-05-14T11:20:37.196Z\"\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOften, this works perfectly fine to get yourself started, and is more than\nenough to begin testing against with \u003ccode\u003efetch()\u003c/code\u003e requests on a frontend.\u003c/p\u003e\n\n\u003ch2\u003eUsing \u003ccode\u003einclude\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eAn alternative is to use the \u003ccode\u003einclude\u003c/code\u003e option to indicate what models\nyou want to nest:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  render json: sighting, include: [:bird, :location]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis produces similar JSON as the previous custom configuration:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"bird_id\": 2,\u003cbr\u003e  \"location_id\": 2,\u003cbr\u003e  \"created_at\": \"2019-05-14T11:20:37.228Z\",\u003cbr\u003e  \"updated_at\": \"2019-05-14T11:20:37.228Z\",\u003cbr\u003e  \"bird\": {\u003cbr\u003e    \"id\": 2,\u003cbr\u003e    \"name\": \"Grackle\",\u003cbr\u003e    \"species\": \"Quiscalus Quiscula\",\u003cbr\u003e    \"created_at\": \"2019-05-14T11:20:37.177Z\",\u003cbr\u003e    \"updated_at\": \"2019-05-14T11:20:37.177Z\"\u003cbr\u003e  },\u003cbr\u003e  \"location\": {\u003cbr\u003e    \"id\": 2,\u003cbr\u003e    \"latitude\": 30.26715,\u003cbr\u003e    \"longitude\": -97.74306,\u003cbr\u003e    \"created_at\": \"2019-05-14T11:20:37.196Z\",\u003cbr\u003e    \"updated_at\": \"2019-05-14T11:20:37.196Z\"\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAll attributes of included objects will be listed by default. Using \u003ccode\u003einclude:\u003c/code\u003e\nalso works fine when dealing with an action that renders an array, like when we use \u003ccode\u003eall\u003c/code\u003e\nin \u003ccode\u003eindex\u003c/code\u003e actions:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  sightings = Sighting.all\u003cbr\u003e  render json: sightings, include: [:bird, :location]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs before with \u003ccode\u003eonly\u003c/code\u003e and \u003ccode\u003eexcept\u003c/code\u003e, \u003ccode\u003einclude\u003c/code\u003e is actually just another option\nthat we can pass into the \u003ccode\u003eto_json\u003c/code\u003e method. Rails is just \u003cem\u003eobscuring\u003c/em\u003e this part:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  sightings = Sighting.all\u003cbr\u003e  render json: sightings.to_json(include: [:bird, :location])\u003cbr\u003eend\u003cbr\u003e\u003cbr\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  render json: sighting.to_json(include: [:bird, :location])\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd adding some error handling on our \u003ccode\u003eshow\u003c/code\u003e action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  if sighting\u003cbr\u003e    render json: sighting.to_json(include: [:bird, :location])\u003cbr\u003e  else\u003cbr\u003e    render json: { message: 'No sighting found with that id' }\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe see now that within a single controller action, it is possible to render\nrelated models as nested JSON data! If we imagine how this app might continue to\ndevelop, now that we have a way for birds to be tied to locations by \u003cem\u003esightings\u003c/em\u003e,\nwe could start to work on a way for these sightings to be created in a browser.\nWe could also continue to expand on endpoints for this API. We now have the\nability for specific types of birds to tell us \u003cem\u003ewhere\u003c/em\u003e they've been sighted, for\ninstance.\u003c/p\u003e\n\n\u003cp\u003eWhen nesting models in JSON the way we saw in this lab, it is entirely possible\nto use \u003ccode\u003einclude\u003c/code\u003e in conjunction with \u003ccode\u003eonly\u003c/code\u003e and \u003ccode\u003eexclude\u003c/code\u003e. For instance, if\nwe wanted to remove the \u003ccode\u003e:updated_at\u003c/code\u003e attribute from \u003ccode\u003eSighting\u003c/code\u003e when rendered:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  render json: sighting, include: [:bird, :location], except: [:updated_at]\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut this begins to complicate things significantly as we work with nested\nresources and try to limit what \u003cem\u003ethey\u003c/em\u003e display.\u003c/p\u003e\n\n\u003cp\u003eFor example, to \u003cem\u003ealso\u003c/em\u003e remove all instances of \u003ccode\u003e:created_at\u003c/code\u003e and \u003ccode\u003e:updated_at\u003c/code\u003e\nfrom the nested bird and location data in the above example, we'd have to\nadd nesting into the \u003cem\u003eoptions\u003c/em\u003e, so the included bird and location data can\nhave their own options listed. Using the fully written \u003ccode\u003eto_json\u003c/code\u003e render statement\ncan help keep things a bit more readable here:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  render json: sighting.to_json(:include =\u0026gt; {\u003cbr\u003e    :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e    :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e  }, :except =\u0026gt; [:updated_at])\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis does produce a more specific set of data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"bird_id\": 2,\u003cbr\u003e  \"location_id\": 2,\u003cbr\u003e  \"created_at\": \"2019-05-14T11:20:37.228Z\",\u003cbr\u003e  \"bird\": {\u003cbr\u003e    \"name\": \"Grackle\",\u003cbr\u003e    \"species\": \"Quiscalus Quiscula\"\u003cbr\u003e  },\u003cbr\u003e  \"location\": {\u003cbr\u003e    \"latitude\": 30.26715,\u003cbr\u003e    \"longitude\": -97.74306\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA single sighting of Quiscalus Quiscula on May 14th, 2019 in downtown Austin,\nTexas!\u003c/p\u003e\n\n\u003cp\u003eWhile that is neat, it seems silly to have to include such a complicated render\nline in our action. In addition, in this example we're only dealing with three\nmodels. Customizing what is rendered in a larger set of nested data could\nquickly turn into a major headache.\u003c/p\u003e\n\n\u003cp\u003eNow that we have covered how to customize and shape Rails model data into JSON,\nwe can start to look at options for keeping that data well organized when\nbuilding more complicated APIs.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"gadcaee92a0d2cfa69fe149fba263fe30","title":"RESTful Index Action Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-restful-index-action-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-restful-index-action-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-restful-index-action-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-restful-index-action-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eDraw a get route\u003c/li\u003e\n\u003cli\u003eMap a route to a controller action\u003c/li\u003e\n\u003cli\u003eDefine a controller action\u003c/li\u003e\n\u003cli\u003eLoad instances from ActiveRecord into a controller instance variable\u003c/li\u003e\n\u003cli\u003eRender a template\u003c/li\u003e\n\u003cli\u003eUse an instance variable from a controller action in a template\u003c/li\u003e\n\u003cli\u003eIterate over an ActiveRecord collection in ERB\u003c/li\u003e\n\u003cli\u003eBuild a classical index action/view\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eRESTful Routes\u003c/h2\u003e\n\n\u003cp\u003eIn this lab you will walk through how to build each element required to render a\nlist of students out in the browser. The RSpec/Capybara tests for this lab can\nbe found in \u003ccode\u003espec/features\u003c/code\u003e. Both tests should be passing to complete the lab.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eRun \u003ccode\u003ebundle install\u003c/code\u003e from your terminal\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a controller for students and have it inherit from\nApplicationController\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a route for the path \u003ccode\u003e/students\u003c/code\u003e that maps to a StudentsController \u003ccode\u003eindex\u003c/code\u003e action.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAdd a controller action to the StudentsController named \u003ccode\u003eindex\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eHave the new \u003ccode\u003eindex\u003c/code\u003e action pull in a list of all of the students with \u003ccode\u003eStudent.all\u003c/code\u003e and store it in an instance variable\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate an \u003ccode\u003eindex.html.erb\u003c/code\u003e view file and render it from your \u003ccode\u003eStudents#index\u003c/code\u003e action.  The \u003ccode\u003eindex.html.erb\u003c/code\u003e file should be placed within a \u003ccode\u003eviews/students\u003c/code\u003e folder.  \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIn your view, iterate over the list of students returned from the index action in the controller and display the appropriate information. \u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf you run into an ActiveRecord::PendingMigration error when you run the\ntests, try \u003ccode\u003erake db:migrate RAILS_ENV=test\u003c/code\u003e in the terminal then run the tests\nagain\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"http://edgeguides.rubyonrails.org/routing.html\"\u003eRails Routing from the Outside In\u003c/a\u003e\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g3ca9ae60a2a20de058afec4a41f2c2fc","title":"Review of the Rails MVC","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-review-of-rails-mvc\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-review-of-rails-mvc/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-review-of-rails-mvc\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-review-of-rails-mvc/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eLearning Goals\u003c/h2\u003e  \u003cul\u003e \u003cli\u003eReview the MVC structure of Rails\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eWe left Rails with the ability to manage data and display it in a browser using models, views and controllers. As we have seen, Rails can entirely handle the front and backend of a website - one reason it is a great tool for web development.\u003c/p\u003e  \u003cp\u003eWith Rails, though, we aren't required to strictly render ERB views. In this code-along, we're going to briefly review the MVC structure of Rails as well as rendering through the Rails controller. The basic files of a Rails app are  provided in this lesson, but some files will need content from this Readme to  function.\u003c/p\u003e  \u003ch2\u003eReview of MVC Structure\u003c/h2\u003e  \u003cp\u003eThe model, view, controller structure is a separation of concerns where groups of files have specific jobs and interact with each other in very defined ways:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\n\u003cstrong\u003eModels:\u003c/strong\u003e The 'logic' of a web application. This is where data is manipulated and/or saved to a database.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eViews:\u003c/strong\u003e The 'frontend', user-facing part of a web application - this is the only part of the app that the user interacts with directly. Views generally consist of HTML, CSS, and Javascript.\u003c/li\u003e \u003cli\u003e\n\u003cstrong\u003eControllers:\u003c/strong\u003e The go-between for models and views. The controller relays data from the browser to the application, and from the application to the browser.\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eTo review the model, view, controller structure in Rails, we're going to quickly walk through the setting up a basic resource. \u003c/p\u003e  \u003cp\u003eLet's imagine we want to build an amateur bird watching website. To start, we'll  just try to create a site that displays different types of birds. Using Rails and  this MVC pattern, the data about these birds would be contained within a database,  so let's set that up.\u003c/p\u003e  \u003cp\u003eFirst, we need a migration to set up the database:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# db/migrate/2019_create_birds.rb\u003cbr\u003e\u003cbr\u003eclass CreateBirds \u0026lt; ActiveRecord::Migration[5.2]\u003cbr\u003e  def change\u003cbr\u003e    create_table :birds do |t|\u003cbr\u003e      t.string :name\u003cbr\u003e      t.string :species\u003cbr\u003e\u003cbr\u003e      t.timestamps\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen run \u003ccode\u003erails db:migrate\u003c/code\u003e to create the schema. We set this up first because we quickly move away from working directly with the database. With Rails, we actually want to create a model to represent and manipulate the data. Create the following \u003ccode\u003eBird\u003c/code\u003e model in \u003ccode\u003eapp/models/bird.rb\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass Bird \u0026lt; ApplicationRecord\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u0026gt; \u003cstrong\u003eASIDE:\u003c/strong\u003e By inheriting from \u003ccode\u003eApplicationRecord\u003c/code\u003e, \u003ccode\u003eBird\u003c/code\u003e also inherits from \u0026gt; \u003ca href=\"https://guides.rubyonrails.org/active_record_basics.html\"\u003e\u003ccode\u003eActiveRecord\u003c/code\u003e\u003c/a\u003e, which you may remember is an \u003ca href=\"https://en.wikipedia.org/wiki/Object-relational_mapping\"\u003eORM\u003c/a\u003e, or Object \u0026gt; Relational Map. Because of this, we gain many useful methods like \u003ccode\u003eall\u003c/code\u003e and \u0026gt; \u003ccode\u003esave\u003c/code\u003e without having to include any additional methods.\u003c/p\u003e  \u003cp\u003eWith a model and the database set up, we can add a little data to help display our view later. Some seed data is provided in \u003ccode\u003edb/seeds.rb\u003c/code\u003e; just run \u003ccode\u003erails db:seed\u003c/code\u003e and it should create four \u003ccode\u003eBird\u003c/code\u003e records. You can always check these by running \u003ccode\u003erails console\u003c/code\u003e, then use \u003ccode\u003eBird.all\u003c/code\u003e to confirm these instances are appearing.\u003c/p\u003e  \u003cp\u003eNow we can configure a route and corresponding controller method. To keep things simple, We'll just set up a basic \u003ccode\u003eindex\u003c/code\u003e action with a route:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eRails.application.routes.draw do\u003cbr\u003e  get '/birds' =\u0026gt; 'birds#index'\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd a controller with corresponding action:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAny visitors to \u003ccode\u003e'/birds'\u003c/code\u003e will get routed to the \u003ccode\u003eindex\u003c/code\u003e action in the \u003ccode\u003eBirdsController\u003c/code\u003e. This action shows one thing - get all instances of the \u003ccode\u003eBird\u003c/code\u003e model and store them in a variable, \u003ccode\u003e@birds\u003c/code\u003e. Now the controller and model are set up to work together.\u003c/p\u003e  \u003cp\u003eRails favors convention over configuration. For this reason, if a \u003cstrong\u003e\u003cem\u003efolder\u003c/em\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003cem\u003efile\u003c/em\u003e\u003c/strong\u003e are present in the \u003cstrong\u003e\u003cem\u003eviews\u003c/em\u003e\u003c/strong\u003e folder that correspond to a \u003cstrong\u003e\u003cem\u003econtroller\u003c/em\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003cem\u003eaction\u003c/em\u003e\u003c/strong\u003e listed on a \u003cstrong\u003e\u003cem\u003eroute\u003c/em\u003e\u003c/strong\u003e, Rails will display that \u003cstrong\u003e\u003cem\u003eview\u003c/em\u003e\u003c/strong\u003e by default. \u003c/p\u003e  \u003cp\u003eIn our example, we have a route pointed to \u003ccode\u003e'birds#index'\u003c/code\u003e. In \u003ccode\u003eapp/views\u003c/code\u003e, we \u003cem\u003ealso\u003c/em\u003e have a \u003ccode\u003e/birds\u003c/code\u003e folder containing \u003ccode\u003eindex.html.erb\u003c/code\u003e. Rails recognizes this as a match and so implicitly renders this file. This is the same as writing:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eclass BirdsController \u0026lt; ApplicationController\u003cbr\u003e  def index\u003cbr\u003e    @birds = Bird.all\u003cbr\u003e    render 'birds/index.html.erb'\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe provided \u003ccode\u003ebirds/index.html.erb\u003c/code\u003e file contains ERB code that will list out each bird's name and species in an unordered list:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;Birds\u0026lt;/h1\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;ul\u0026gt;\u003cbr\u003e\u0026lt;% @birds.each do |bird| %\u0026gt;\u003cbr\u003e    \u0026lt;li\u0026gt;\u0026lt;%= bird.name %\u0026gt; - \u0026lt;%= bird.species %\u0026gt;\u0026lt;/li\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt;\u003cbr\u003e\u0026lt;/ul\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eConclusion\u003c/h2\u003e  \u003cp\u003eAs it is currently configured, we already have a Rails app up and running using  the MVC structure! If you run \u003ccode\u003erails server\u003c/code\u003e and visit the \u003ccode\u003e'/birds'\u003c/code\u003e path, you  should see a list of birds.\u003c/p\u003e  \u003cp\u003eWith minimal work, as we just saw, we were able to spin up a resource backed by a database and serve it up in a browser. In short, when a visitor goes to \u003ccode\u003e'/birds'\u003c/code\u003e on this Rails app, the controller retrieves data from the \u003ccode\u003eBird\u003c/code\u003e model and then serves that data to the visitor by displaying it in a view. \u003c/p\u003e  \u003cp\u003eSo where does JavaScript fit in? Well, we have the skills to build out our own frontends. As we will see in the next lesson, rather than using the ERB view, Rails is flexible enough to give us something we can use with JavaScript and \u003ccode\u003efetch()\u003c/code\u003e.\u003c/p\u003e  \u003ch2\u003eResources\u003c/h2\u003e  \u003cul\u003e \u003cli\u003e\u003ca href=\"https://guides.rubyonrails.org/active_record_basics.html\"\u003eActiveRecord Basics\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://guides.rubyonrails.org/v5.2/layouts_and_rendering.html\"\u003eLayouts and Rendering in Rails\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g6f73e397615bed050f35e91aa44651e1","title":"Routing And Nested Resources","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"routing-nested-resources-reading\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/routing-nested-resources-reading/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/routing-nested-resources-reading\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/routing-nested-resources-reading/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eUnderstand the value of nested routes\u003c/li\u003e \u003cli\u003eCreate nested routes\u003c/li\u003e \u003cli\u003eUnderstand how nested resource URL helpers are named\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eLesson\u003c/h2\u003e  \u003cp\u003eWe're going to keep working on our blog application, augmenting it to filter posts by author in a more user-friendly and RESTful way.\u003c/p\u003e  \u003ch3\u003eURL As Data\u003c/h3\u003e  \u003cp\u003eYou've encountered REST already, but, just to review, it stands for REpresentational State Transfer and encapsulates a way of structuring a URL so that access to specific resources is predictable and standardized.\u003c/p\u003e  \u003cp\u003eIn practice, that means that, if we type \u003ccode\u003erails s\u003c/code\u003e and run our blog app, browsing to \u003ccode\u003e/posts\u003c/code\u003e will show us the index of all \u003ccode\u003ePost\u003c/code\u003e objects. And if we want to view a specific \u003ccode\u003eAuthor\u003c/code\u003e, we can guess the URL for that (as long as we know the author's \u003ccode\u003eid\u003c/code\u003e) by going to \u003ccode\u003e/authors/:id\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e the \u003ccode\u003e/:id\u003c/code\u003e notation above represents a \u003cem\u003edynamic\u003c/em\u003e route segment, which we've touched on before and will be seeing more of in this reading.\u003c/p\u003e  \u003cp\u003eWhy do we care?\u003c/p\u003e  \u003cp\u003eWhen we added the filter button to our blog, we could filter by a certain author to see that author's posts, but the URL looked something like this:\u003c/p\u003e  \u003cp\u003e\u003ccode\u003ehttp://localhost:3000/posts?utf8=%E2%9C%93\u0026amp;author=1\u0026amp;date=\u0026amp;commit=Filter\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eThat's the opposite of REST. That makes me \u003cem\u003estressed\u003c/em\u003e.\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"http://i.giphy.com/J2LrJRhCjIKTC.gif\" alt=\"Not Sorry\"\u003e\u003c/p\u003e  \u003cp\u003eThat URL tells us nothing, really, about the resources we're accessing. Not to mention that it's uglier than a Geocities site, and we might want to present our readers with a link they could understand and share with friends.\u003c/p\u003e  \u003cp\u003eThen there's the author, who might want a more presentable link to share that lets people know, \"Hey, these posts belong to me!\"\u003c/p\u003e  \u003ch3\u003eDynamic Route Segments\u003c/h3\u003e  \u003cp\u003eWhat we'd love to end up with here is something like \u003ccode\u003e/authors/1/posts\u003c/code\u003e for all of an author's posts and \u003ccode\u003e/authors/1/posts/5\u003c/code\u003e to see an individual post by that author.\u003c/p\u003e  \u003cp\u003eWe know we can build out a route with dynamic segments, so our first instinct might be to just define these in \u003ccode\u003eroutes.rb\u003c/code\u003e like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003e  get 'authors/:id/posts'\u003cbr\u003e  get 'authors/:id/posts/:post_id' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAfter adding those routes, let's load up our blog with \u003ccode\u003erails s\u003c/code\u003e (don't forget to \u003ccode\u003erake db:seed\u003c/code\u003e) and check it out by browsing to \u003ccode\u003e/authors/1/posts\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eOops. Error. Gotta tell those routes explicitly which controller actions will handle them. Okay, let's make it look more like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003e  get 'authors/:id/posts', to: 'authors#posts_index'\u003cbr\u003e  get 'authors/:id/posts/:post_id', to: 'authors#post' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd to handle our new filtering routes, we'll need to make some changes in our \u003ccode\u003eauthors_controller\u003c/code\u003e to actually do the work.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/authors_controller.rb\u003cbr\u003e  def posts_index\u003cbr\u003e    @author = Author.find(params[:id])\u003cbr\u003e    @posts = @author.posts\u003cbr\u003e    render template: 'posts/index'\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def post\u003cbr\u003e    @author = Author.find(params[:id])\u003cbr\u003e\u003cbr\u003e    # Note that because ids are unique by table we can go directly to\u003cbr\u003e    # Post.find — no need for @author.posts.find...\u003cbr\u003e    @post = Post.find(params[:post_id])\u003cbr\u003e    render template: 'posts/show'\u003cbr\u003e  end \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e While a controller action would normally implicitly render a template with the same name as the method, in this case we want to leverage the templates we're already using for posts, so we call \u003ccode\u003erender\u003c/code\u003e explicitly with a template path. Because we're telling \u003ccode\u003erender\u003c/code\u003e that we're using a \u003ccode\u003etemplate\u003c/code\u003e, we don't need to include the \u003ccode\u003e.html.erb\u003c/code\u003e extensions. Rails figures that out for us.\u003c/p\u003e  \u003cp\u003eIf we go back to our blog and try to browse to \u003ccode\u003e/authors/1/posts\u003c/code\u003e, we should see the posts for that author. And then if we try \u003ccode\u003e/authors/1/posts/1\u003c/code\u003e, we should see that post.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If your IDs are different and you are having trouble with the URLs, try running \u003ccode\u003erake db:reset\u003c/code\u003e to reset your IDs to the defaults in the seed file.\u003c/p\u003e  \u003cp\u003eWe did it! We have much nicer URLs now. Are we done? Of course not.\u003c/p\u003e  \u003cp\u003eIf we look at our \u003ccode\u003eroutes.rb\u003c/code\u003e, we can already see it getting messy. Instead of something nice like \u003ccode\u003eresources :authors\u003c/code\u003e, now we're specifying controller actions and HTTP verbs just to do a simple filter of an author's posts.\u003c/p\u003e  \u003cp\u003eBeyond that, our DRY (Don't Repeat Yourself) and Separation of Concerns klaxons should be wailing because the code to find all posts and to find individual posts by their ID is essentially repeated in the \u003ccode\u003eauthors_controller\u003c/code\u003e. These aren't really the concerns of the \u003ccode\u003eauthors_controller\u003c/code\u003e, and we can tell that because we're directly rendering \u003ccode\u003ePost\u003c/code\u003e-related templates.\u003c/p\u003e  \u003cp\u003eSeems like Rails would have a way to bail us out of this mess.\u003c/p\u003e  \u003ch3\u003eNested Resource Routes\u003c/h3\u003e  \u003cp\u003eTurns out, Rails \u003cem\u003edoes\u003c/em\u003e give us a way to make this a lot nicer.\u003c/p\u003e  \u003cp\u003eIf we look again at our models, we see that an author \u003ccode\u003ehas_many :posts\u003c/code\u003e and a post \u003ccode\u003ebelongs_to :author\u003c/code\u003e. Since a post can logically be considered a \u003cem\u003echild\u003c/em\u003e object to an author, it can also be considered a \u003cem\u003enested resource\u003c/em\u003e of an author for routing purposes.\u003c/p\u003e  \u003cp\u003eNested resources give us a way to document that parent/child relationship in our routes and, ultimately, our URLs.\u003c/p\u003e  \u003cp\u003eLet's get back into \u003ccode\u003eroutes.rb\u003c/code\u003e, delete the two routes we just added, and recreate them as nested resources. We should end up with something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003e\u003cbr\u003eRails.application.routes.draw do\u003cbr\u003e\u003cbr\u003e  resources :authors, only: [:show] do\u003cbr\u003e    # nested resource for posts\u003cbr\u003e    resources :posts, only: [:show, :index]\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  resources :posts, only: [:index, :show, :new, :create, :edit, :update]\u003cbr\u003e\u003cbr\u003e  root 'posts#index'\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we have the resourced \u003ccode\u003e:authors\u003c/code\u003e route, but by adding the \u003ccode\u003edo...end\u003c/code\u003e we can pass it a block of its nested routes.\u003c/p\u003e  \u003cp\u003eWe can still do things to the nested resources that we do to a non-nested resource, like limit them to only certain actions. In this case, we only want to nest \u003ccode\u003e:show\u003c/code\u003e and \u003ccode\u003e:index\u003c/code\u003e under \u003ccode\u003e:authors\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eUnder that, we still have our regular resourced \u003ccode\u003e:posts\u003c/code\u003e routes because we still want to let people see all posts, create and edit posts, and so on outside of the context of an author.\u003c/p\u003e  \u003cp\u003eNow we need to update our \u003ccode\u003eposts_controller\u003c/code\u003e to handle the nested resource we just set up. Notice how now we are dealing with the \u003ccode\u003eposts_controller\u003c/code\u003e rather than the \u003ccode\u003eauthors_controller\u003c/code\u003e. Ultimately, the resource we're requesting is related to posts, so Separation of Concerns tells us to put that code in the \u003ccode\u003eposts_controller\u003c/code\u003e. And, since we already have actions to handle \u003ccode\u003e:show\u003c/code\u003e and \u003ccode\u003e:index\u003c/code\u003e, we won't be repeating ourselves like we did in the \u003ccode\u003eauthors_controller\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eLet's update \u003ccode\u003eindex\u003c/code\u003e and \u003ccode\u003eshow\u003c/code\u003e to account for the new routes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003e  def index\u003cbr\u003e    if params[:author_id]\u003cbr\u003e      @posts = Author.find(params[:author_id]).posts\u003cbr\u003e    else\u003cbr\u003e      @posts = Post.all\u003cbr\u003e    end\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003e  def show\u003cbr\u003e    @post = Post.find(params[:id])\u003cbr\u003e  end \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe added a conditional to the \u003ccode\u003eposts#index\u003c/code\u003e action to account for whether the user is trying to access the index of \u003cem\u003eall\u003c/em\u003e posts (\u003ccode\u003ePost.all\u003c/code\u003e) or just the index of all posts \u003cem\u003eby a certain author\u003c/em\u003e (\u003ccode\u003eAuthor.find(params[:author_id]).posts\u003c/code\u003e). The conditional hinges on whether there's an \u003ccode\u003e:author_id\u003c/code\u003e key in the \u003ccode\u003eparams\u003c/code\u003e hash — in other words, whether the user navigated to \u003ccode\u003e/authors/:id/posts\u003c/code\u003e or simply \u003ccode\u003e/posts\u003c/code\u003e. We didn't have to create any new methods or make explicit calls to render new templates. We just added a simple check for \u003ccode\u003eparams[:author_id]\u003c/code\u003e, and we're good to go.\u003c/p\u003e  \u003cp\u003eWhere is \u003ccode\u003eparams[:author_id]\u003c/code\u003e coming from? Rails provides it for us through the nested route, so we don't have to worry about a collision with the \u003ccode\u003e:id\u003c/code\u003e parameter that \u003ccode\u003eposts#show\u003c/code\u003e is looking for. Rails takes the parent resource's name and appends \u003ccode\u003e_id\u003c/code\u003e to it for a nice, predictable way to find the parent resource's ID.\u003c/p\u003e  \u003cp\u003eBut, wait– we didn't make a single change to the \u003ccode\u003eposts#show\u003c/code\u003e action. What about the new \u003ccode\u003e/authors/:id/posts/:id\u003c/code\u003e route that we added? Remember, the point of nesting our resources is to DRY up our code. We had to create a conditional for the \u003ccode\u003eposts#index\u003c/code\u003e action because it renders \u003cem\u003edifferent\u003c/em\u003e sets of posts depending on the path, \u003ccode\u003e/authors/:id/posts\u003c/code\u003e or \u003ccode\u003e/posts\u003c/code\u003e. Conversely, the \u003ccode\u003eposts#show\u003c/code\u003e route is going to render the \u003cem\u003esame\u003c/em\u003e information — data concerning a single post — regardless of whether it is accessed via \u003ccode\u003e/authors/:id/posts/:id\u003c/code\u003e or \u003ccode\u003e/posts/:id\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eFor good measure, let's go into our \u003ccode\u003eauthors_controller.rb\u003c/code\u003e and delete the two actions (\u003ccode\u003epost\u003c/code\u003e and \u003ccode\u003eposts_index\u003c/code\u003e) that we added above so that it looks like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/authors_controller.rb\u003cbr\u003e\u003cbr\u003eclass AuthorsController \u0026lt; ApplicationController\u003cbr\u003e\u003cbr\u003e  def show\u003cbr\u003e    @author = Author.find(params[:id])\u003cbr\u003e  end\u003cbr\u003e\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003e\u003cstrong\u003eTop-tip:\u003c/strong\u003e Keep your application clean and easy to maintain by always removing unused code.\u003c/p\u003e  \u003ch3\u003eNested Route URL Helpers\u003c/h3\u003e  \u003cp\u003eWe've got our routes working and the \u003ccode\u003eposts_controller\u003c/code\u003e is handling its business, but how can we present this on the page so that someone knows how to find a link to an author's posts?\u003c/p\u003e  \u003cp\u003eJust like any other resourced route, Rails provides named helpers for our nested routes as well. And, just like most other things Rails provides, there's a predictable way to figure out what they are.\u003c/p\u003e  \u003cp\u003eIf we want to get to the \u003ccode\u003e/authors\u003c/code\u003e page, we know the URL helpers are \u003ccode\u003eauthors_path\u003c/code\u003e and \u003ccode\u003eauthors_url\u003c/code\u003e. And if we want to get to a single author (\u003ccode\u003e/authors/:id\u003c/code\u003e), we can use \u003ccode\u003eauthor_path(id)\u003c/code\u003e. Similarly, we have \u003ccode\u003eposts_path\u003c/code\u003e for \u003ccode\u003e/posts\u003c/code\u003e and \u003ccode\u003epost_path(id)\u003c/code\u003e for \u003ccode\u003e/posts/:id\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eSo what if we want to get to all posts nested under an author?\u003c/p\u003e  \u003cp\u003eWe know the URL is \u003ccode\u003e/authors/:author_id/posts\u003c/code\u003e, so we can combine the two conventions and use \u003ccode\u003eauthor_posts_path(author_id)\u003c/code\u003e. Remember it's the singular \u003ccode\u003eauthor\u003c/code\u003e because we are getting one by \u003ccode\u003eid\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eIt stands to reason that a single post for an author would combine the conventions for the single author path and single post path, leaving us with \u003ccode\u003eauthor_post_path(author_id, post_id)\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eOnce you become accustomed to breaking it down in that way, it's pretty straightforward to know what our URL helpers will be for a nested route. However, if you're not sure, or if you just want to double-check, you can use \u003ccode\u003erake routes\u003c/code\u003e on the command line to get a printout of all your named routes, like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e      Prefix Verb  URI Pattern                             Controller#Action\u003cbr\u003e  test_index GET   /test/index(.:format)                   test#index\u003cbr\u003eauthor_posts GET   /authors/:author_id/posts(.:format)     posts#index\u003cbr\u003e author_post GET   /authors/:author_id/posts/:id(.:format) posts#show\u003cbr\u003e      author GET   /authors/:id(.:format)                  authors#show\u003cbr\u003e       posts GET   /posts(.:format)                        posts#index\u003cbr\u003e             POST  /posts(.:format)                        posts#create\u003cbr\u003e    new_post GET   /posts/new(.:format)                    posts#new\u003cbr\u003e   edit_post GET   /posts/:id/edit(.:format)               posts#edit\u003cbr\u003e        post GET   /posts/:id(.:format)                    posts#show\u003cbr\u003e             PATCH /posts/:id(.:format)                    posts#update\u003cbr\u003e             PUT   /posts/:id(.:format)                    posts#update\u003cbr\u003e        root GET   /                                       posts#index \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eYou can also view this in your browser anytime you type in an incorrect route or if you visit \u003ccode\u003erails/info/routes.\u003c/code\u003e\u003c/p\u003e  \u003cp\u003eIf you add \u003ccode\u003e_path\u003c/code\u003e or \u003ccode\u003e_url\u003c/code\u003e to any of the names under \"Prefix\", you'll have the helper for that route.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e Using \u003ccode\u003erake routes\u003c/code\u003e can be a lot easier than browsing the \u003ccode\u003eroutes.rb\u003c/code\u003e file once a project gets to a certain size, but the output might be overwhelming. Remember that you can \u003ccode\u003egrep\u003c/code\u003e the output of any command to search for what you want. So in the example above, if you just wanted to search for routes related to authors, you could type \u003ccode\u003erake routes | grep authors\u003c/code\u003e to get a filtered list.\u003c/p\u003e  \u003cp\u003eLet's make it easy for our readers to look at the posts for each of our authors using these helpers.\u003c/p\u003e  \u003cp\u003eIn \u003ccode\u003eposts/index.html.erb\u003c/code\u003e, we already show the author's name, so let's add a link to the list of the author's posts:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/index.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e  ...\u003cbr\u003e\u003cbr\u003e  \u0026lt;h2\u0026gt;\u0026lt;%= post.title %\u0026gt;\u0026lt;/h2\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;!-- change the name to a link --\u0026gt;\u003cbr\u003e  \u0026lt;h3\u0026gt;by: \u0026lt;%= link_to post.author.name, author_posts_path(post.author) %\u0026gt;\u0026lt;/h3\u0026gt;\u003cbr\u003e  \u0026lt;p\u0026gt;\u0026lt;%= post.description %\u0026gt;\u0026lt;/p\u0026gt;\u003cbr\u003e\u003cbr\u003e  ... \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's reload \u003ccode\u003e/posts\u003c/code\u003e and click on an author name. We should be taken to \u003ccode\u003e/authors/id/posts\u003c/code\u003e.\u003c/p\u003e  \u003cp\u003eGreat! Now our URLs properly reflect the relationship of our resources and read almost like an English sentence: \u003ccode\u003eauthors/1/posts\u003c/code\u003e = \"author number one's posts.\"\u003c/p\u003e  \u003cp\u003eSometimes people get confused by path helpers and what they take as arguments. For example, why does \u003ccode\u003eposts_path\u003c/code\u003e not take an argument, but \u003ccode\u003epost_path(@post)\u003c/code\u003e does? \u003ccode\u003eposts_path\u003c/code\u003e refers to all of the posts, so we're not talking about a specific post (no specific ID). When we're looking at the \u003ccode\u003epost_path\u003c/code\u003e, we're referring to a specific post, and the Rails helper needs to know \u003cem\u003ewhich\u003c/em\u003e post so that it can generate the proper url, e.g., \u003ccode\u003eposts/1\u003c/code\u003e as opposed to \u003ccode\u003eposts/2\u003c/code\u003e.\u003c/p\u003e  \u003ch3\u003eCaveat on Nesting Resources More Than One Level Deep\u003c/h3\u003e  \u003cp\u003eYou can nest resources more than one level deep, but that is generally a bad idea.\u003c/p\u003e  \u003cp\u003eImagine if we also had comments in this blog. This would be a perfectly fine use of nesting:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eresources :posts do\u003cbr\u003e  resources :comments\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe could then link to a post's comments with \u003ccode\u003epost_comments_path\u003c/code\u003e or \u003ccode\u003e/posts/1/comments\u003c/code\u003e. That makes a lot of sense.\u003c/p\u003e  \u003cp\u003eBut if we then tried to add to our already nested \u003ccode\u003eposts\u003c/code\u003e resource...\u003c/p\u003e \u003cpre\u003e\u003ccode\u003eresources :authors do\u003cbr\u003e  resources :posts do\u003cbr\u003e    resources :comments\u003cbr\u003e  end\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we're getting into messy territory. Our \u003ccode\u003ecomments_path\u003c/code\u003e helper is now \u003ccode\u003eauthor_post_comments_path\u003c/code\u003e, our URL is \u003ccode\u003e/authors/1/posts/1/comments\u003c/code\u003e, and we have to handle that filtering in our controller.\u003c/p\u003e  \u003cp\u003eBut if we lean on our old friend Separation of Concerns, we can conclude that a post's comments are not the concern of an author and therefore don't belong nested two levels deep under the \u003ccode\u003e:authors\u003c/code\u003e resource.\u003c/p\u003e  \u003cp\u003eIn addition, the reason to put the ID of the resource in the URL is so that we have access to it in the controller. If we know we have the post with an ID of \u003ccode\u003e1\u003c/code\u003e, we can use our Active Record relationships to call:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e  @post = Post.find(params[:id])\u003cbr\u003e  @post.author # This will tell us who the author of the post was! We don't need this information in the URL \u003c/code\u003e\u003c/pre\u003e \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eNesting resources is a powerful tool that helps you keep your routes neat and tidy and is better than dynamic route segments for representing parent/child relationships in your system.\u003c/p\u003e  \u003cp\u003eHowever, as a general rule, you should only nest resources one level deep and ensure that you are considering Separation of Concerns in your routing.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"ge2a8f5e91abe84546b9a265f45984fa1","title":"Set List Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"building-forms-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/building-forms-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/building-forms-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/building-forms-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eUse forms to create new elements and update the store.\u003c/li\u003e\n\u003cli\u003eDisplay a list of the new elements in a separate component.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eGuess what - the bands are back! What we want is an application that allows us to add band names, and then have those band names instantly rendered below. We need to be incorporating Redux by dispatching actions and updating the store each time someone submits a new band.\u003c/p\u003e\n\u003cp\u003eSo we will be creating two different React components, and each of them need to have access to our Redux store, either directly or through props. One of the components will be a form where we input our band name, and the other component will display the list of bands.\u003c/p\u003e\n\u003cp\u003eThe createStore method and some basic setup has already been implemented for you.\u003c/p\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eYou will need to write the \u003ccode\u003eBandsContainer\u003c/code\u003e component. This component should act as your connection to the Redux store and should be a child of the App component. Any values we want to use from Redux as well as any actions we want to dispatch should be set up and available in \u003ccode\u003eBandsContainer\u003c/code\u003e so they can be passed down to other components.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou will need to write the \u003ccode\u003eBandInput\u003c/code\u003e component as a child of \u003ccode\u003eBandsContainer\u003c/code\u003e. This component should have a form with a text input and submit button. We would like to update this \u003cem\u003ecomponent's\u003c/em\u003e state each time the user types a new character in the input, stored as \u003ccode\u003ethis.state.name\u003c/code\u003e. We will only update the \u003cstrong\u003eRedux\u003c/strong\u003e store's state when the user hits the submit button. The dispatched action required to initiate this update should be set up in \u003ccode\u003eBandsContainer\u003c/code\u003e and passed down as the prop \u003ccode\u003eaddBand\u003c/code\u003e to \u003ccode\u003eBandInput\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou will also need to fill in the \u003ccode\u003emanageBand\u003c/code\u003e reducer located under \u003ccode\u003e./src/reducers/manageBand.js\u003c/code\u003e. It will need to respond to an action of \u003ccode\u003etype\n'ADD_BAND'\u003c/code\u003e and correspondingly concatenate a new band each time the action is dispatched.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce you've got a form successfully dispatching actions and adding bands to your \u003cstrong\u003eRedux\u003c/strong\u003e store, write the necessary code to display each band name from the store. Band names should be listed in individual \u003ccode\u003eli\u003c/code\u003e elements.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g209ac03463a9ff2e616485f14b13ca9c","title":"Set List Lab - Redux Delete","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"redux-delete-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca id=\"fork-link\" class=\"fis-fork-link\" href=\"https://github.com/learn-co-curriculum/redux-delete-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-delete-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/redux-delete-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eImplement a delete button for each band, such that the store is appropriately updated.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eOverview\u003c/h2\u003e\n\u003cp\u003eWell all things change, and sometimes that means that even our favorite bands breakup and we must remove all evidence of them. We want an application that allows us to remove specific bands, and have those changes reflected in our store's state, and on the page.\u003c/p\u003e\n\u003cp\u003eWe are starting off with our work from the previous lab, a React/Redux app that creates new band elements and displays them below. Your task will be to add the deleting a band functionality.\u003c/p\u003e\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\u003cp\u003eThe BandInput component is already set up for you and BandsContainer is partially working, but take a moment to note the flow of information. The BandsContainer is connected to \u003cstrong\u003eRedux\u003c/strong\u003e and has mapped \u003ccode\u003ename =\u0026gt; dispatch({ type:\n\"ADD_BAND\", name })\u003c/code\u003e to props.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eSet up the new \u003ccode\u003eBand\u003c/code\u003e component that is in charge of displaying the information for a single band.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCreate a new \u003ccode\u003eBands\u003c/code\u003e component. This component will handle the rendering of all \u003ccode\u003eBand\u003c/code\u003e components from a list of bands provided as props.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUse \u003ccode\u003eBandsContainer\u003c/code\u003e to access the Redux store that contains any band information using the provided \u003ccode\u003emapStateToProps\u003c/code\u003e method. Pass these bands into the \u003ccode\u003eBands\u003c/code\u003e component.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the \u003ccode\u003emanageBand\u003c/code\u003e reducer, change the structure of the state such that each band is assigned its own ID. You will also need to pass this info through to the band object (this should include the \u003cem\u003eid\u003c/em\u003e and \u003cem\u003ename\u003c/em\u003e of the band) as the props to each rendered \u003ccode\u003eBand\u003c/code\u003e component.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the \u003ccode\u003eBand\u003c/code\u003e component, you will need to add a button that dispatches an action of type \u003ccode\u003e'DELETE_BAND'\u003c/code\u003e and then passes through that band's id as the \u003ccode\u003eaction.id\u003c/code\u003e. This dispatched action should be provided as a prop from BandsContainer.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou will have to alter the reducer such that it creates a new list of bands that does not include the one whose delete button was pressed.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g90d919706732ccb833627905632c1e59","title":"Simple Partials","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"simple-partials-reading\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/simple-partials-reading/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/simple-partials-reading\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/simple-partials-reading/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ch2\u003eObjectives\u003c/h2\u003e  \u003col\u003e \u003cli\u003eExplain why partials are used\u003c/li\u003e \u003cli\u003eUse Rails's \u003ccode\u003erender\u003c/code\u003e method to render a partial\u003c/li\u003e \u003cli\u003eDescribe how the name of a partial turns into its filename\u003c/li\u003e \u003cli\u003eReference partials located in an external folder\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eIntroduction\u003c/h2\u003e  \u003cp\u003eAs you know, while coding we are generally trying not to repeat our code. If we see a repeated chunk of code in different methods, we sometimes extract that chunk of code into its own method, which we can then reference in multiple places.\u003c/p\u003e  \u003cp\u003eWe can apply a similar tool to reduce repetition in HTML. Partials are view-level files that only form one part of an HTML page. By using a partial, we can remove repeated pieces of HTML and add better organization to the code in our views.\u003c/p\u003e  \u003cp\u003eLet's look at an example to see what this means.\u003c/p\u003e  \u003ch2\u003eExample\u003c/h2\u003e  \u003cp\u003eBefore we get started, make sure that you run \u003ccode\u003erake db:seed\u003c/code\u003e to seed the database. This will give us some posts and authors. Because we want to focus on partials, you'll notice some hard-coding in the controller. In the \u003ccode\u003eposts#create\u003c/code\u003e action, we've hard-coded that every new post created is linked to the very first author in the database.\u003c/p\u003e  \u003cp\u003eOK, let's dive in!\u003c/p\u003e  \u003cp\u003eThis is the code in the \u003ccode\u003eposts#new\u003c/code\u003e form:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/new.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag posts_path do %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag :title, @post.title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post Description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_area_tag :description, @post.description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= submit_tag \"Submit Post\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd this is the code in the \u003ccode\u003eposts#edit\u003c/code\u003e form:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/edit.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h3\u0026gt;Post Form\u0026lt;/h3\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag post_path(@post), method: \"put\" do %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag :title, @post.title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post Description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_area_tag :description, @post.description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= submit_tag \"Submit Post\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eExcept for the first line of the form, the code is pretty much the same! The labels and field tags are the same. All of that duplication is not good in code. Duplication means twice the amount of code to maintain, twice the opportunity for bugs, and two slightly different forms when our interface should be consistent.\u003c/p\u003e  \u003cp\u003eInstead of duplicating all of that code, we just want to write it once in our partial and call it from both our edit and show views. Here's how:\u003c/p\u003e  \u003cp\u003eFirst, let's create a new file in \u003ccode\u003eapp/views/posts/\u003c/code\u003e called \u003ccode\u003e_form.html.erb\u003c/code\u003e. To indicate that this file is a partial (and only part of a larger view), an underscore is prefixed to the filename.\u003c/p\u003e  \u003cp\u003eSecond, let's remove the repeated code in \u003ccode\u003eapp/views/posts/edit.html.erb\u003c/code\u003e. The file should look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h3\u0026gt;Post Form\u0026lt;/h3\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag post_path(@post), method: \"put\" do %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNote that we left in the non-duplicated code. Now, let's also remove the duplicated code in the \u003ccode\u003eapp/views/posts/new.html.erb\u003c/code\u003e file. The file should look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_tag posts_path do %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe left the code that is unique to each view and removed the duplicated code inside the \u003ccode\u003eform_tag\u003c/code\u003e blocks.\u003c/p\u003e  \u003cp\u003eSo, now what? It looks like we are missing a bunch of code in our \u003ccode\u003eposts/new\u003c/code\u003e and \u003ccode\u003eposts/edit\u003c/code\u003e files. Not to worry –– that's where our partial comes in handy.\u003c/p\u003e  \u003cp\u003eFirst, we'll place the duplicated code in our new \u003ccode\u003e_form.html.erb\u003c/code\u003e file. The file should look as follows:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u0026lt;%= text_field_tag :title, @post.title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;label\u0026gt;Post Description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u0026lt;%= text_area_tag :description, @post.description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= submit_tag \"Submit Post\" %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNext, we need to render the code into the \u003ccode\u003eposts/edit\u003c/code\u003e and \u003ccode\u003eposts/new\u003c/code\u003e pages by placing \u003ccode\u003e\u0026lt;%= render \"form\" %\u0026gt;\u003c/code\u003e where we want the code in the partial to be rendered. Notice that, while the file name of our partial starts with an underscore, when we reference it there is no underscore.\u003c/p\u003e  \u003cp\u003eOur \u003ccode\u003eposts/new\u003c/code\u003e file should now look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/new.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag posts_path do %\u0026gt;\u003cbr\u003e \u0026lt;%= render 'form' %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd our \u003ccode\u003eposts/edit\u003c/code\u003e file like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/edit.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h3\u0026gt;Post Form\u0026lt;/h3\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag post_path(@post), method: \"put\" do %\u0026gt;\u003cbr\u003e  \u0026lt;%= render 'form' %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd that's it –– we're all done!\u003c/p\u003e  \u003cp\u003eA couple of things to note:\u003c/p\u003e  \u003col\u003e \u003cli\u003e\u003cp\u003eNotice that, even though the last line of the form (the \u003ccode\u003e\u0026lt;% end %\u0026gt;\u003c/code\u003e tag) is duplicated code, we didn't move it into the partial. This is because it closes the beginning of the \u003ccode\u003eform_tag\u003c/code\u003e block, which DOES differ from form to form. We don't want to open our \u003ccode\u003eform_tag\u003c/code\u003e block in one file and close it in a different file. This is a stylistic point that you will get a feel for over time.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eWe could have named the partial whatever we wanted to. The only requirements are that it start with an underscore and that references to the partial are made without the underscore. But, just like method names, it's good to make the names of our partials as commonsensical as possible.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eWe were able to reference the partial by just calling \u003ccode\u003e\u0026lt;%= render 'form' %\u0026gt;\u003c/code\u003e.  Notice that we didn't specify the folder that the partial lives in, such as \u003ccode\u003e\u0026lt;%= render 'posts/form' %\u0026gt;\u003c/code\u003e. The reason we didn't need this (even though it would have worked if we had included it) is that both the \u003ccode\u003eposts/new\u003c/code\u003e and \u003ccode\u003eposts/edit\u003c/code\u003e files are referencing a partial housed in the same folder in which they reside, \u003ccode\u003eapp/views/posts\u003c/code\u003e. When referencing a partial from a different folder, we must include the folder name as well (e.g., \u003ccode\u003e\u0026lt;%= render 'posts/form' %\u0026gt;\u003c/code\u003e as opposed to \u003ccode\u003e\u0026lt;%= render 'form' %\u0026gt;\u003c/code\u003e).\u003c/p\u003e\u003c/li\u003e \u003c/ol\u003e  \u003ch2\u003eRendering a partial from a different folder\u003c/h2\u003e  \u003cp\u003eLet's take a look at our \u003ccode\u003eauthors/show.html.erb\u003c/code\u003e file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= @author.name %\u0026gt;\u003cbr\u003e\u0026lt;%= @author.hometown %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd now look at the code in \u003ccode\u003eposts/show.html.erb\u003c/code\u003e:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= @post.author.name %\u0026gt;\u003cbr\u003e\u0026lt;%= @post.author.hometown %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;\u0026lt;%= @post.description %\u0026gt;\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSee the repetition? In both places, we are using the \u003ccode\u003eAuthor\u003c/code\u003e object to call the \u003ccode\u003e.name\u003c/code\u003e and \u003ccode\u003e.hometown\u003c/code\u003e methods. The first thing we have to fix is the slight difference between the templates. Let's make the beginning portion of the \u003ccode\u003eposts/show\u003c/code\u003e template match the \u003ccode\u003eauthors/show\u003c/code\u003e template.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= @author.name %\u0026gt;\u003cbr\u003e\u0026lt;%= @author.hometown %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;\u0026lt;%= @post.description %\u0026gt;\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThen, let's make a new partial called \u003ccode\u003eapp/views/authors/_author.html.erb\u003c/code\u003e and place the repeated code in the file. It should look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/authors/_author.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= @author.name %\u0026gt;\u003cbr\u003e\u0026lt;%= @author.hometown %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNow we can just render this partial in our \u003ccode\u003eauthors/show\u003c/code\u003e page by doing the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/authors/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= render 'author' %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's try making the same change to our \u003ccode\u003eposts/show\u003c/code\u003e page:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= render 'author' %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;\u0026lt;%= @post.description %\u0026gt;\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eUh oh, something went wrong. This won't work because, if we don't specify the partial's parent folder, Rails assumes that the partial lives in the same folder as the view that's calling it. In this case, it looks for a file in the \u003ccode\u003eposts\u003c/code\u003e directory called \u003ccode\u003e_author.html.erb\u003c/code\u003e and doesn't find it. We need to tell Rails to go outside the folder by being explicit about the folder and file name that it should render. We can do that by changing the above code to the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;!-- app/views/posts/show.html.erb --\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= render 'authors/author' %\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;h1\u0026gt;\u0026lt;%= @post.title %\u0026gt;\u0026lt;/h1\u0026gt;\u003cbr\u003e\u0026lt;p\u0026gt;\u0026lt;%= @post.description %\u0026gt;\u0026lt;/p\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWe're almost there! One more problem is that our partial assumes it has access to an instance variable called \u003ccode\u003e@author\u003c/code\u003e. The partial won't function without it! We'll need to modify the \u003ccode\u003ePostsController\u003c/code\u003e to have it set that instance variable.\u003c/p\u003e  \u003cp\u003eChange the \u003ccode\u003eposts#show\u003c/code\u003e action in the controller to look like the following:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# app/controllers/posts_controller.rb\u003cbr\u003e\u003cbr\u003edef show\u003cbr\u003e  @post = Post.find(params[:id])\u003cbr\u003e  @author = @post.author\u003cbr\u003eend \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eAnd now we are done! Great job!\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g35789323f3214ed001ad88b6ec682b7d","title":"Simple Partials Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"simple-partials-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/simple-partials-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/simple-partials-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/simple-partials-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse the \u003ccode\u003erender\u003c/code\u003e method to render partials\u003c/li\u003e\n\u003cli\u003eUnderstand how the name of a partial turns into its filename\u003c/li\u003e\n\u003cli\u003ePractice rendering partials in a different folder\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eOverview\u003c/h2\u003e\n\n\u003cp\u003eFlatiron is building out a new system to keep track of students in its classes. You just joined the technical team and see that there's lots of repetition in the view layer of the code base. Use your new knowledge of partials to remove the duplication.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFirst, fork and clone the lab.\u003c/p\u003e\n\n\u003cp\u003eWe've provided a seed file so you can have some data to play around with. Run \u003ccode\u003erake db:seed\u003c/code\u003e to seed the database.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eRemove the duplicated code in the \u003ccode\u003estudents/edit.html.erb\u003c/code\u003e and \u003ccode\u003estudents/new.html.erb\u003c/code\u003e files by making a partial called \u003ccode\u003estudents/_form.html.erb\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eRemove the duplicated code in the \u003ccode\u003eclassrooms/show.html.erb\u003c/code\u003e and \u003ccode\u003estudents/show.html.erb\u003c/code\u003e files by making a partial called \u003ccode\u003estudents/_student.html.erb\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g8f2333476b692d34ff26b7d7d03b22f3","title":"The form_for Helper","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-form_for-on-edit-readme\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-form_for-on-edit-readme/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_for-on-edit-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-form_for-on-edit-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003cp\u003eIf you know how to utilize the \u003ccode\u003eform_tag\u003c/code\u003e method for creating forms in Rails you may wonder why you need to learn a new form building process. Let's imagine that you've been tasked with creating the world's first pet hamster social network, and one of the requirements is that the hamster profile page needs to have about 100 different form fields that can be edited. If you are using the \u003ccode\u003eform_tag\u003c/code\u003e method, your application will be technically resubmitting all 100 fields each time you edit the data. Your form view templates will also have 100 calls to the \u003ccode\u003e@hamster\u003c/code\u003e instance variable and each of the hamster attributes. Thankfully \u003ccode\u003eform_for\u003c/code\u003e is here and will help clean up the form view template and provide some additional benefits that we'll explore in this lesson.\u003c/p\u003e  \u003ch2\u003eRecap of \u003ccode\u003eform_tag\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eTo review, the \u003ccode\u003eform_tag\u003c/code\u003e helper method allows us to automatically generate HTML form code and integrate data to both auto fill the values as well as have the form submit data that the controller can use to either create or update a record in the database. It allows for you to pass in: the route to which the parameters for the form will be sent, the HTTP method that the form will utilize, and the attributes for each field.\u003c/p\u003e  \u003ch2\u003eIssues with using \u003ccode\u003eform_tag\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eBefore we get into the benefits and features of the \u003ccode\u003eform_for\u003c/code\u003e method, let's first discuss some of the key drawbacks to utilizing \u003ccode\u003eform_tag\u003c/code\u003e:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eOur form must be manually passed to the route where the form parameters will be submitted\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eThe form has no knowledge of the form's goal; it doesn't know if the form is meant to create or update a record\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eYou're forced to have duplicate code throughout the form; it's hard to adhere to DRY principles when utilizing the \u003ccode\u003eform_tag\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eDifference between \u003ccode\u003eform_for\u003c/code\u003e and \u003ccode\u003eform_tag\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eThe differences between \u003ccode\u003eform_for\u003c/code\u003e and \u003ccode\u003eform_tag\u003c/code\u003e are subtle, but important. Below is a basic breakdown of the differences. We'll start with talking about them at a high level perspective and then get into each one of the aspects on a practical/implementation basis:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eThe \u003ccode\u003eform_for\u003c/code\u003e method accepts the instance of the model as an argument. Using this argument, \u003ccode\u003eform_for\u003c/code\u003e is able to make a bunch of assumptions for you.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eform_for\u003c/code\u003e yields an object of class \u003ccode\u003eFormBuilder\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eform_for\u003c/code\u003e automatically knows the standard route (it follows RESTful conventions) for the form data as opposed to having to manually declare it\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003e\u003ccode\u003eform_for\u003c/code\u003e gives the option to dynamically change the \u003ccode\u003esubmit\u003c/code\u003e button text (this comes in very handy when you're using a form partial and the \u003ccode\u003enew\u003c/code\u003e and \u003ccode\u003eedit\u003c/code\u003e pages will share the same form, but more on that in a later lesson)\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003cp\u003eA good rule of thumb for when to use one approach over the other is below:\u003c/p\u003e  \u003cul\u003e \u003cli\u003e\u003cp\u003eUse \u003ccode\u003eform_for\u003c/code\u003e when your form is directly connected to a model. Extending our example from the introduction, this would be our Hamster's profile edit form that connects to the profile database table. This is the most common case when \u003ccode\u003eform_for\u003c/code\u003e is used\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eUse \u003ccode\u003eform_tag\u003c/code\u003e when you simply need an HTML form generated. Examples of this would be: a search form field or a contact form\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e  \u003ch2\u003eImplementation of \u003ccode\u003eform_for\u003c/code\u003e\n\u003c/h2\u003e  \u003cp\u003eLet's take the \u003ccode\u003eedit\u003c/code\u003e form that utilized the \u003ccode\u003eform_tag\u003c/code\u003e that we built before for \u003ccode\u003eposts\u003c/code\u003e and refactor it to use \u003ccode\u003eform_for\u003c/code\u003e. As a refresher, here is the \u003ccode\u003eform_tag\u003c/code\u003e version:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;% # app/views/posts/edit.html.erb %\u0026gt;\u003cbr\u003e\u0026lt;h3\u0026gt;Post Form\u0026lt;/h3\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_tag post_path(@post), method: \"put\" do %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_field_tag :title, @post.title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= text_area_tag :description, @post.description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= submit_tag \"Submit Post\" %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eLet's take this refactor one element at a time. Since we already have access to the \u003ccode\u003e@post\u003c/code\u003e instance variable we know that we can pass that to the \u003ccode\u003eform_for\u003c/code\u003e method. We also can remove the path argument and the \u003ccode\u003emethod\u003c/code\u003e call since \u003ccode\u003eform_for\u003c/code\u003e will automatically set these for us. How does \u003ccode\u003eform_for\u003c/code\u003e know that we want to use \u003ccode\u003ePUT\u003c/code\u003e for the form method? It's smart enough to know that because it's dealing with a pre-existing record you want to utilize \u003ccode\u003ePUT\u003c/code\u003e over \u003ccode\u003ePOST\u003c/code\u003e.\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= form_for(@post) do |f| %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eThe \u003ccode\u003e|f|\u003c/code\u003e is an iterator variable that we can use on the new form object that will allow us to dynamically assign form field elements to each of the \u003ccode\u003e@post's\u003c/code\u003e data attributes, along with auto filling the values for each field. We get this \u003ccode\u003eActionView\u003c/code\u003e functionality because we're using the \u003ccode\u003eform_for\u003c/code\u003e method, which gives us access to the \u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html\"\u003e\u003ccode\u003eFormBuilder\u003c/code\u003e module in Rails\u003c/a\u003e. Inside of the form, we can now refactor the fields:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u0026lt;%= f.text_field :title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;label\u0026gt;Post description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u0026lt;%= f.text_area :description %\u0026gt;\u0026lt;br\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eIsn't that much cleaner? Notice how we no longer have to pass in the values manually? By passing in the attribute as a symbol (e.g. \u003ccode\u003e:title\u003c/code\u003e) that will automatically tell the form field what model attribute to be associated with. It also is what auto-fills the values for us. Next, let's refactor the submit button. Instead of \u003ccode\u003e\u0026lt;%= submit_tag \"Submit Post\" %\u0026gt;\u003c/code\u003e, we can change it to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;%= f.submit %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur new form will look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;h3\u0026gt;Post Form\u0026lt;/h3\u0026gt;\u003cbr\u003e\u003cbr\u003e\u0026lt;%= form_for(@post) do |f| %\u0026gt;\u003cbr\u003e  \u0026lt;label\u0026gt;Post title:\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_field :title %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;label\u0026gt;Post description\u0026lt;/label\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e  \u0026lt;%= f.text_area :description %\u0026gt;\u0026lt;br\u0026gt;\u003cbr\u003e\u003cbr\u003e  \u0026lt;%= f.submit %\u0026gt;\u003cbr\u003e\u0026lt;% end %\u0026gt; \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eOur refactor work isn't quite done. If you had previously created a \u003ccode\u003ePUT\u003c/code\u003e route like we did in the \u003ccode\u003eform_tag\u003c/code\u003e lesson, we'll need to change that to a \u003ccode\u003ePATCH\u003c/code\u003e method since that is the HTTP verb that \u003ccode\u003eform_for\u003c/code\u003e utilizes. We can make that change in the \u003ccode\u003econfig/routes.rb\u003c/code\u003e file:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e# config/routes.rb\u003cbr\u003eresources :posts, only: [:index, :show, :new, :create, :edit, :update] \u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003epatch 'posts/:id', to: 'posts#update' \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWhat's the difference between \u003ccode\u003ePUT\u003c/code\u003e and \u003ccode\u003ePATCH\u003c/code\u003e? It's pretty subtle. On a high level, \u003ccode\u003ePUT\u003c/code\u003e has the ability to update the entire object, whereas \u003ccode\u003ePATCH\u003c/code\u003e simply updates the elements that were changed. Many developers choose to utilize \u003ccode\u003ePATCH\u003c/code\u003e as much as possible because it requires less overhead; however, it is pretty rare when you will need to distinguish between the two verbs, and they are used interchangeably quite often.\u003c/p\u003e  \u003cp\u003eYou can also add \u003ccode\u003eupdate\u003c/code\u003e as an additional argument in the \u003ccode\u003eresources\u003c/code\u003e method array, and this will all happen automatically.\u003c/p\u003e  \u003cp\u003eNow if you start the Rails server and go to an \u003ccode\u003eedit\u003c/code\u003e page, you'll see that the data is loaded into the form and everything appears to be working properly. However, if you change the value of one of the form fields and click \u003ccode\u003eUpdate Post\u003c/code\u003e, you will see that the record updates incorrectly. So what's happening? When you run into behavior like this, it's good practice to look at the console logs to see if they tell us anything. Below is an example of what you might see after submitting the form:\u003c/p\u003e  \u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/flatiron-bucket/readme-lessons/unpermitted_params.png\" alt=\"Unpermitted Parameters\"\u003e\u003c/p\u003e  \u003cp\u003eBecause \u003ccode\u003eform_for\u003c/code\u003e is bound directly with the \u003ccode\u003ePost\u003c/code\u003e model, we need to pass the model name into the Active Record \u003ccode\u003eupdate\u003c/code\u003e method in the controller. Let's change \u003ccode\u003e@post.update(title: params[:title], description: params[:description])\u003c/code\u003e to:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e@post.update(params.require(:post).permit(:title, :description)) \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eSo, why do we need to \u003ccode\u003erequire\u003c/code\u003e the \u003ccode\u003epost\u003c/code\u003e model? If you look at the old form, the \u003ccode\u003eparams\u003c/code\u003e would look something like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"title\": \"My Title\",\u003cbr\u003e  \"description\": \"My description\"\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eWith the new structure introduced by \u003ccode\u003eform_for\u003c/code\u003e, the \u003ccode\u003eparams\u003c/code\u003e now look like this:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"post\": {\u003cbr\u003e            \"title\": \"My Title\",\u003cbr\u003e            \"description\": \"My description\"\u003cbr\u003e          }\u003cbr\u003e} \u003c/code\u003e\u003c/pre\u003e \u003cp\u003eNotice how the \u003ccode\u003etitle\u003c/code\u003e and \u003ccode\u003edescription\u003c/code\u003e attributes are now nested within the \u003ccode\u003epost\u003c/code\u003e hash? That's why we needed to add the \u003ccode\u003erequire\u003c/code\u003e method. But Rails wants us to be conscious of which attributes we allow to be updated in our database, so we must also \u003ccode\u003epermit\u003c/code\u003e the \u003ccode\u003etitle\u003c/code\u003e and \u003ccode\u003edescription\u003c/code\u003e in the nested hash. Using strong parameters like this will allow ActiveRecord to use mass assignment without trouble.\u003c/p\u003e  \u003cp\u003eIf you go back to the \u003ccode\u003eedit\u003c/code\u003e page and submit the form, the record will be updated in the database successfully.\u003c/p\u003e  \u003ch2\u003eSummary\u003c/h2\u003e  \u003cp\u003eNice work! You now know how to integrate multiple form helpers into a Rails application, and you should have a good idea on when to properly use \u003ccode\u003eform_for\u003c/code\u003e vs. \u003ccode\u003eform_tag\u003c/code\u003e.\u003c/p\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g51ce719bb13288a925535feb6d82e373","title":"URL Helpers Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rails-url-helpers-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/rails-url-helpers-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-url-helpers-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rails-url-helpers-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eGenerate URLs using route helpers\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDraw routes with implicit and explicit names using \u003ccode\u003e:as\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDraw routes with variables\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eGenerate URLs using route helpers that require variables\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eIn this lab you will be building out the Student management dashboard for the Flatiron School by starting to integrate the ability to link between pages. Two tests are currently passing, and the rest need implementation code to start passing. In order to complete this lab, you will need to complete the following tasks:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eA user should be able to navigate to \u003ccode\u003e/students\u003c/code\u003e to view all of the students.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eA user should be able to click the student's name on the \u003ccode\u003eindex\u003c/code\u003e page and be taken to that specific student's \u003ccode\u003eshow\u003c/code\u003e page.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a new boolean attribute called \u003ccode\u003eactive\u003c/code\u003e in the students table. (HINT: You might have to search around for the best way to set a (\u003cem\u003eahem\u003c/em\u003e) \u003cstrong\u003edefault value\u003c/strong\u003e (should default to false).)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eA user should be able to go to \u003ccode\u003e/students/:id/activate\u003c/code\u003e to toggle their \u003ccode\u003eactive\u003c/code\u003e attribute between \u003ccode\u003etrue\u003c/code\u003e and \u003ccode\u003efalse\u003c/code\u003e. (This is just the activate route, and not a actual view.)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eRead the failing tests and modify the code until they pass.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eKeep in mind\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eMake sure the show path is \u003ccode\u003e/students/:id\u003c/code\u003e, where \u003ccode\u003e:id\u003c/code\u003e is a route variable.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCall the Student class instance method \u003ccode\u003eto_s\u003c/code\u003e on each of the students on the index page so that each student element contains their first and last name.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eOn the student index page, test out all three different \u003ccode\u003elink_to\u003c/code\u003e argument options, e.g.: \u003ccode\u003elink_to \"post\", \"/post/#{post.id}\"\u003c/code\u003e, \u003ccode\u003elink_to(\"post\", post_path(post.id))\u003c/code\u003e, \u003ccode\u003elink_to(\"post\", post_path(post))\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://github.com/learn-co-curriculum/rails-url-helpers-readme\"\u003eReading\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/UrlHelper.html\"\u003eURL Helper Documentation\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g34609dadc626cf2330b94a8f570de4de","title":"Using the Fast JSON API","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"js-rails-as-api-using-fast-json-api\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-using-fast-json-api/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-using-fast-json-api\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/js-rails-as-api-using-fast-json-api/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIntroduce the Fast JSON API gem\u003c/li\u003e\n\u003cli\u003eCreate serializers using the Fast JSON API gem\u003c/li\u003e\n\u003cli\u003eRender related object attributes into JSON data\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've seen that it is entirely possible to create our own service class\nserializers from scratch. This issue is common enough, though, that there are\nsome popular standardized serializer options available for us to use. In this\nlesson, we are going to look at one popular option, the \u003ca href=\"https://github.com/Netflix/fast_jsonapi\"\u003eFast JSON API\u003c/a\u003e\ngem and use it to create a close approximation to our JSON data from the\nprevious lessons.\u003c/p\u003e\n\n\u003cp\u003eThe files in this lesson were populated using the API-only Rails build. Run\n\u003ccode\u003erails db:migrate\u003c/code\u003e and \u003ccode\u003erails db:seed\u003c/code\u003e to follow along.\u003c/p\u003e\n\n\u003ch2\u003eIntroduce the Fast JSON API\u003c/h2\u003e\n\n\u003cp\u003eThe Fast JSON API is a JSON serializer for Rails APIs. It provides a way for us\nto generate \u003cem\u003eserializer\u003c/em\u003e classes for each resource object in our API that is\ninvolved in customized JSON rendering. We can use these serializer classes to\ndefine the specific attributes we want objects to share or not share, along with\nthings like related object attributes.\u003c/p\u003e\n\n\u003cp\u003eThe result is that in our controller actions, rather than writing a custom\n\u003ccode\u003erender\u003c/code\u003e each time, we write out a serializer for each object once and use Fast\nJSON API to control the way our data is structured.\u003c/p\u003e\n\n\u003ch2\u003eInitial Configuration\u003c/h2\u003e\n\n\u003cp\u003eBefore we can see the solution Fast JSON API provides, let's look back at the\nproblem we've been dealing with. We will start at the same place we started when creating our own\nservice class serializer. This code-along has three resources set up: birds,\nlocations and sightings:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Bird \u0026lt; ApplicationRecord\u003cbr\u003e  has_many :sightings\u003cbr\u003e  has_many :locations, through: :sightings\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Location \u0026lt; ApplicationRecord\u003cbr\u003e  has_many :sightings\u003cbr\u003e  has_many :birds, through: :sightings\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass Sighting \u0026lt; ApplicationRecord\u003cbr\u003e  belongs_to :bird\u003cbr\u003e  belongs_to :location\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe also have one customized controller action:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingsController \u0026lt; ApplicationController\u003cbr\u003e  def show\u003cbr\u003e    sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e    render json: sighting.to_json(:include =\u0026gt; {\u003cbr\u003e      :bird =\u0026gt; {:only =\u0026gt; [:name, :species]},\u003cbr\u003e      :location =\u0026gt; {:only =\u0026gt; [:latitude, :longitude]}\u003cbr\u003e    }, :except =\u0026gt; [:updated_at])\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis produces a specific set of data, with some but not all related attributes\nincluded:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"bird_id\": 2,\u003cbr\u003e  \"location_id\": 2,\u003cbr\u003e  \"created_at\": \"2019-05-14T11:20:37.228Z\",\u003cbr\u003e  \"bird\": {\u003cbr\u003e    \"name\": \"Grackle\",\u003cbr\u003e    \"species\": \"Quiscalus Quiscula\"\u003cbr\u003e  },\u003cbr\u003e  \"location\": {\u003cbr\u003e    \"latitude\": 30.26715,\u003cbr\u003e    \"longitude\": -97.74306\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith just three objects and some minor customization, rendering has become\ncomplicated. With Fast JSON API, we can extract and separate this work into\nSerializer classes, keeping our controller cleaner.\u003c/p\u003e\n\n\u003ch2\u003eSetting up Fast JSON API\u003c/h2\u003e\n\n\u003cp\u003eTo include Fast JSON API, add \u003ccode\u003egem 'fast_jsonapi'\u003c/code\u003e to your Rails project's Gemfile\nand run \u003ccode\u003ebundle install\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOnce installed, you will gain access to a new generator, \u003ccode\u003eserializer\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eImplementing the Fast JSON API\u003c/h2\u003e\n\n\u003cp\u003eWith the new \u003ccode\u003eserializer\u003c/code\u003e generator, we can create serializer classes for all\nthree of our models, which will be available to us in any controller actions\nlater.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erails g serializer Bird\u003cbr\u003erails g serializer Location\u003cbr\u003erails g serializer Sighting\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRunning the above generators will create a \u003ccode\u003eserializers\u003c/code\u003e folder within \u003ccode\u003e/app\u003c/code\u003e,\nand inside, \u003ccode\u003ebird_serializer.rb\u003c/code\u003e, \u003ccode\u003elocation_serializer.rb\u003c/code\u003e, and\n\u003ccode\u003esighting_serializer.rb\u003c/code\u003e. With these serializers, we can start\nto define information about each model and their \u003cem\u003erelated\u003c/em\u003e models we want \nto share in our API.\u003c/p\u003e\n\n\u003ch2\u003eUpdating the Controller Action\u003c/h2\u003e\n\n\u003cp\u003eTo start using the new serializers, we can update our \u003ccode\u003erender json:\u003c/code\u003e statement\nso that it initializes the newly created \u003ccode\u003eSightingSerializer\u003c/code\u003e, passing in a variable,\njust as we did when creating our own service class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingsController \u0026lt; ApplicationController\u003cbr\u003e  def show\u003cbr\u003e    sighting = Sighting.find(params[:id])\u003cbr\u003e    render json: SightingSerializer.new(sighting)\u003cbr\u003e  end\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: Serializers generated by the Fast JSON API gem have two built-in methods \ncalled \u003ccode\u003eserializable_hash\u003c/code\u003e and \u003ccode\u003eserialized_json\u003c/code\u003e which return a serialized hash and a\nJSON string respectively. However, we don't actually need either of these in this example,\nas \u003ccode\u003eto_json\u003c/code\u003e will still be called on \u003ccode\u003eSightingSerializer.new(sighting)\u003c/code\u003e implicitly.\nAs we will see, once our serializers are configured and initialized, we will not need\u003cbr\u003e\nto do any additional work\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe \u003ccode\u003eSightingSerializer.new(sighting)\u003c/code\u003e statement can be used on \u003cem\u003eall\u003c/em\u003e \u003ccode\u003eSightingController\u003c/code\u003e \nactions we want to serialize, so if we were to add an \u003ccode\u003eindex\u003c/code\u003e, for instance, we just \npass in the array of all sightings as well:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef index\u003cbr\u003e  sightings = Sighting.all\u003cbr\u003e  render json: SightingSerializer.new(sightings)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut there is a problem still! If we fire up our Rails server and visit\n\u003ccode\u003ehttp://localhost:3000/sightings/2\u003c/code\u003e, all we see is the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": \"2\",\u003cbr\u003e  \"type\": \"sighting\"\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe serializer is working, but it behaves a little differently than we're \nused to.\u003c/p\u003e\n\n\u003ch2\u003eAdding Attributes\u003c/h2\u003e\n\n\u003cp\u003eWhen rendering JSON directly, controllers will render all attributes available by\ndefault. These serializers work the other way around - we must always specify\nwhat attributes we \u003cem\u003ewant\u003c/em\u003e to include. In our example, birds have \u003ccode\u003ename\u003c/code\u003e and\n\u003ccode\u003especies\u003c/code\u003e attributes and locations have \u003ccode\u003elatitude\u003c/code\u003e and \u003ccode\u003elongitude\u003c/code\u003e attributes,\nso to include these we would update both serializers. For sightings, we could\ninclude the \u003ccode\u003ecreated_at\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass BirdSerializer\u003cbr\u003e  include FastJsonapi::ObjectSerializer\u003cbr\u003e  attributes :name, :species\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass LocationSerializer\u003cbr\u003e  include FastJsonapi::ObjectSerializer\u003cbr\u003e  attributes :latitude, :longitude\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingSerializer\u003cbr\u003e  include FastJsonapi::ObjectSerializer\u003cbr\u003e  attributes :created_at\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf we go back and check \u003ccode\u003ehttp://localhost:3000/sightings/2\u003c/code\u003e again, this time,\nwe will see that the \u003ccode\u003ecreated_at\u003c/code\u003e attribute is present:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": \"2\",\u003cbr\u003e  \"type\": \"sighting\",\u003cbr\u003e  \"attributes\": {\u003cbr\u003e    \"created_at\": \"2019-05-14T16:39:37.011Z\"\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe can also use attributes to access related objects, adding them alongside\nnormal object attributes:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingSerializer\u003cbr\u003e  include FastJsonapi::ObjectSerializer\u003cbr\u003e  attributes :created_at, :bird, :location\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis results in our rendered JSON including an \u003ccode\u003e\"attributes\"\u003c/code\u003e object with \n\u003ccode\u003e\"created_at\"\u003c/code\u003e, \u003ccode\u003e\"bird\"\u003c/code\u003e, and \u003ccode\u003e\"location\"\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": \"2\",\u003cbr\u003e  \"type\": \"sighting\",\u003cbr\u003e  \"attributes\": {\u003cbr\u003e    \"created_at\": \"2019-05-14T16:39:37.011Z\",\u003cbr\u003e    \"bird\": {\u003cbr\u003e      \"id\": 2,\u003cbr\u003e      \"name\": \"Grackle\",\u003cbr\u003e      \"species\": \"Quiscalus Quiscula\",\u003cbr\u003e      \"created_at\": \"2019-05-14T16:39:36.917Z\",\u003cbr\u003e      \"updated_at\": \"2019-05-14T16:39:36.917Z\"\u003cbr\u003e    },\u003cbr\u003e    \"location\": {\u003cbr\u003e      \"id\": 2,\u003cbr\u003e      \"latitude\": 30.26715,\u003cbr\u003e      \"longitude\": -97.74306,\u003cbr\u003e      \"created_at\": \"2019-05-14T16:39:36.942Z\",\u003cbr\u003e      \"updated_at\": \"2019-05-14T16:39:36.942Z\"\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, here, we have no control over what attributes are included in the\nrelated objects, and so we get \u003cem\u003eall\u003c/em\u003e the attributes of \u003ccode\u003e\"bird\"\u003c/code\u003e and\n\u003ccode\u003e\"location\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eAdding Relationships\u003c/h2\u003e\n\n\u003cp\u003eObject relationships can be included in serializers in two steps. The first step\nis that we include the relationships we want to reflect in our serializers. We\ncan do this in the same way that we include them in the models themselves. A\nsighting, for instance, belongs to a bird and a location, so we can update the\nserializer to reflect this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass SightingSerializer\u003cbr\u003e  include FastJsonapi::ObjectSerializer\u003cbr\u003e  attributes :created_at\u003cbr\u003e  belongs_to :bird\u003cbr\u003e  belongs_to :location\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, when visiting \u003ccode\u003ehttp://localhost:3000/sightings/2\u003c/code\u003e, Fast JSON API will \ndisplay a new \u003ccode\u003e\"relationships\"\u003c/code\u003e object, but will only provide limited\ninformation, including the id of the related object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": \"2\",\u003cbr\u003e  \"type\": \"sighting\",\u003cbr\u003e  \"attributes\": {\u003cbr\u003e    \"created_at\": \"2019-05-14T16:39:37.011Z\"\u003cbr\u003e  },\u003cbr\u003e  \"relationships\": {\u003cbr\u003e    \"bird\": {\u003cbr\u003e      \"data\": {\u003cbr\u003e        \"id\": \"2\",\u003cbr\u003e        \"type\": \"bird\"\u003cbr\u003e      }\u003cbr\u003e    },\u003cbr\u003e    \"location\": {\u003cbr\u003e      \"data\": {\u003cbr\u003e        \"id\": \"2\",\u003cbr\u003e        \"type\": \"location\"\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSetting these relationships up is necessary for the second step. Now that we\nhave included relationships connecting the \u003ccode\u003eSightingSerializer\u003c/code\u003e to \u003ccode\u003e:bird\u003c/code\u003e and\n\u003ccode\u003e:location\u003c/code\u003e, to include attributes from those objects, the recommended method is\nto pass in a second \u003cem\u003eoptions\u003c/em\u003e parameter to the serializer indicating that we want to\n\u003cem\u003einclude\u003c/em\u003e those objects:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edef show\u003cbr\u003e  sighting = Sighting.find_by(id: params[:id])\u003cbr\u003e  options = {\u003cbr\u003e    include: [:bird, :location]\u003cbr\u003e  }\u003cbr\u003e  render json: SightingSerializer.new(sighting, options)\u003cbr\u003eend\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe result:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"data\": {\u003cbr\u003e    \"id\": \"2\",\u003cbr\u003e    \"type\": \"sighting\",\u003cbr\u003e    \"attributes\": {\u003cbr\u003e      \"created_at\": \"2019-05-14T16:39:37.011Z\"\u003cbr\u003e    },\u003cbr\u003e    \"relationships\": {\u003cbr\u003e      \"bird\": {\u003cbr\u003e        \"data\": {\u003cbr\u003e          \"id\": \"2\",\u003cbr\u003e          \"type\": \"bird\"\u003cbr\u003e        }\u003cbr\u003e      },\u003cbr\u003e      \"location\": {\u003cbr\u003e        \"data\": {\u003cbr\u003e          \"id\": \"2\",\u003cbr\u003e          \"type\": \"location\"\u003cbr\u003e        }\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e  },\u003cbr\u003e  \"included\": [{\u003cbr\u003e      \"id\": \"2\",\u003cbr\u003e      \"type\": \"bird\",\u003cbr\u003e      \"attributes\": {\u003cbr\u003e        \"name\": \"Grackle\",\u003cbr\u003e        \"species\": \"Quiscalus Quiscula\"\u003cbr\u003e      }\u003cbr\u003e    },\u003cbr\u003e    {\u003cbr\u003e      \"id\": \"2\",\u003cbr\u003e      \"type\": \"location\",\u003cbr\u003e      \"attributes\": {\u003cbr\u003e        \"latitude\": 30.26715,\u003cbr\u003e        \"longitude\": -97.74306\u003cbr\u003e      }\u003cbr\u003e    }\u003cbr\u003e  ]\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause we have a \u003ccode\u003eBirdSerializer\u003c/code\u003e and a \u003ccode\u003eLocationSerializer\u003c/code\u003e, when including\n\u003ccode\u003e:bird\u003c/code\u003e and \u003ccode\u003e:location\u003c/code\u003e, Fast JSON API will automatically serialize their\nattributes as well.\u003c/p\u003e\n\n\u003ch2\u003eNot Quite the Data Structure We Started With\u003c/h2\u003e\n\n\u003cp\u003eAt the beginning of this lesson, we had the following JSON, but with a messy\ncontroller:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\u003cbr\u003e  \"id\": 2,\u003cbr\u003e  \"bird_id\": 2,\u003cbr\u003e  \"location_id\": 2,\u003cbr\u003e  \"created_at\": \"2019-05-14T11:20:37.228Z\",\u003cbr\u003e  \"bird\": {\u003cbr\u003e    \"name\": \"Grackle\",\u003cbr\u003e    \"species\": \"Quiscalus Quiscula\"\u003cbr\u003e  },\u003cbr\u003e  \"location\": {\u003cbr\u003e    \"latitude\": 30.26715,\u003cbr\u003e    \"longitude\": -97.74306\u003cbr\u003e  }\u003cbr\u003e}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you recall from when we created our own service class, since we just moved\nthe \u003ccode\u003eto_json\u003c/code\u003e call from the controller action to our serializer, the\nJSON data structure looked the same.\u003c/p\u003e\n\n\u003cp\u003eUsing Fast JSON API, with the use of relationships and passing a second\nparameter, we are able to get the same \u003cem\u003edata\u003c/em\u003e, but in a much different\nstructure. Fast JSON API is meant to be flexible and easy to implement, and it\ndefinitely is! From this point in the example bird watching application, we\ncould fill out \u003ccode\u003eBird\u003c/code\u003e and \u003ccode\u003eLocation\u003c/code\u003e controllers and when we add in controller\nactions, we already have serializers created and ready to use!\u003c/p\u003e\n\n\u003cp\u003eIn using Fast JSON API though, we lose the ability to design the structure of\nour JSON data.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThere is a lot more you can do with the Fast JSON API gem, and it is worth\nreading through their \u003ca href=\"https://github.com/Netflix/fast_jsonapi#table-of-contents\"\u003edocumentation\u003c/a\u003e to become more familiar with\nit. It is possible, for instance, to create entirely custom attributes!\u003c/p\u003e\n\n\u003cp\u003eWhat we covered is enough to get us close to where we were creating our\nown customized serializers. We do not get to choose exactly how data gets\nserialized the way we do when writing our own serializer classes, but we\ngain a lot of flexibility by using the Fast JSON API.\u003c/p\u003e\n\n\u003cp\u003eThe Fast JSON API gem provides a quick way to generate and customize JSON\nserializers with minimal configuration. Its conventions also allow it to work\nwell even when dealing with a large number of related objects.\u003c/p\u003e\n\n\u003cp\u003eOverall, the goal of this section is to get you comfortable enough to get Rails\nAPIs up and running. With practice, it is possible to build a multi-resource\nAPI, complete with many serialized JSON rendering endpoints \u003cem\u003ewithin minutes\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eBeing able to quickly spin up an API to practice your \u003ccode\u003efetch()\u003c/code\u003e skills is an\nexcellent way to get familiar with asynchronous requests. As you move towards\nbuilding larger frontend projects, you'll also quickly need a place to persist\ndata and handle things like login security. Rails as an API will be a critical\nasset in your development through the remainder of this course.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Netflix/fast_jsonapi\"\u003eFast JSON API\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g05b159f59eaf6b784ffe546944b728a0","title":"Validations in Controller Actions Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"validations-in-controller-actions-rails-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/validations-in-controller-actions-rails-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-in-controller-actions-rails-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-in-controller-actions-rails-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eTime to apply these new tools!\u003c/p\u003e\n\n\u003cp\u003eThe goal of this lab is to allow users of this blog-style application to create and edit authors and posts without worrying about typos or other mistakes leading to error-prone form submissions.\u003c/p\u003e\n\n\u003cp\u003eFor example, if someone creates a blog post with less than 100 characters of content, it's likely that they accidentally pasted the wrong text, or misunderstood which information goes into which field. We can improve the user's experience and the stability of our codebase by notifying users about these kinds of mistakes \u003cem\u003ebefore\u003c/em\u003e bad data gets into the database.\u003c/p\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine validations on a model\u003c/li\u003e\n\u003cli\u003eUse a conditional statement in an action to render different responses based on the validation state of a model\u003c/li\u003e\n\u003cli\u003eRe-render a form with validation errors\u003c/li\u003e\n\u003cli\u003eValidate a create action\u003c/li\u003e\n\u003cli\u003eValidate an update action\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eRequirements\u003c/h2\u003e\n\n\u003cp\u003eMake sure you run \u003ccode\u003erake db:seed\u003c/code\u003e so you have some data to work with (defined in \u003ccode\u003edb/seeds.rb\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eThis is a barebones app with two models, \u003ccode\u003eAuthor\u003c/code\u003e and \u003ccode\u003ePost\u003c/code\u003e. Right now, you can...\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://localhost:3000/authors/1\"\u003eView an author\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://localhost:3000/posts/1\"\u003eView a post\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://localhost:3000/authors/new\"\u003eCreate an author\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://localhost:3000/posts/1/edit\"\u003eEdit a post\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTo complete this lab, you will need to:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAdd validations to \u003ccode\u003eAuthor\u003c/code\u003e such that...\u003c/li\u003e\n\u003cli\u003eThe name cannot be blank\u003c/li\u003e\n\u003cli\u003eThe e-mail is unique\u003c/li\u003e\n\u003cli\u003eAdd validations to \u003ccode\u003ePost\u003c/code\u003e such that...\u003c/li\u003e\n\u003cli\u003eThe title cannot be blank\u003c/li\u003e\n\u003cli\u003eThe category is either \u003ccode\u003e\"Fiction\"\u003c/code\u003e or \u003ccode\u003e\"Non-Fiction\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eThe content is at least 100 characters long.\u003c/li\u003e\n\u003cli\u003eChange \u003ccode\u003eAuthorsController#create\u003c/code\u003e to re-render the form if the new author is invalid.\u003c/li\u003e\n\u003cli\u003eChange \u003ccode\u003ePostsController#update\u003c/code\u003e to re-render the form if the updated post is invalid.\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null},{"exportId":"g924ca4697c87aac26db90d4d5670c640","title":"Validations with the Form_Tag Lab","type":"Assignment","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"validations-with-form_tag-rails-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/validations-with-form_tag-rails-lab/fork\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-with-form_tag-rails-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/validations-with-form_tag-rails-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eObjectives\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRender or redirect based on validation of instance in create/update\u003c/li\u003e\n\u003cli\u003ePrefill in form values based on an instance\u003c/li\u003e\n\u003cli\u003ePrint out full error messages based on an invalid instance\u003c/li\u003e\n\u003cli\u003eIntrospect on errors for a field\u003c/li\u003e\n\u003cli\u003eApply an error class to a field conditionally based on errors on a field\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eRequirements\u003c/h2\u003e\n\n\u003ch3\u003eValidations\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eAdd validations to \u003ccode\u003eAuthor\u003c/code\u003e such that...\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003ename\u003c/code\u003e is not blank\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eemail\u003c/code\u003e is unique\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ephone_number\u003c/code\u003e is exactly 10 digits long\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eAdd validations to \u003ccode\u003ePost\u003c/code\u003e such that...\n\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003etitle\u003c/code\u003e is not blank\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003econtent\u003c/code\u003e is at least 100 characters long\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ecategory\u003c/code\u003e is either \u003ccode\u003e\"Fiction\"\u003c/code\u003e or \u003ccode\u003e\"Non-Fiction\"\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eBasic Routes \u0026amp; Controllers\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate controllers for both models.\u003c/li\u003e\n\u003cli\u003eCreate \u003ccode\u003eshow\u003c/code\u003e, \u003ccode\u003enew\u003c/code\u003e, \u003ccode\u003eedit\u003c/code\u003e, \u003ccode\u003ecreate\u003c/code\u003e, and \u003ccode\u003eupdate\u003c/code\u003e routes for both models.\u003c/li\u003e\n\u003cli\u003eDefine controller actions for \u003ccode\u003eshow\u003c/code\u003e, \u003ccode\u003enew\u003c/code\u003e, and \u003ccode\u003eedit\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eDefine the \"valid path\" for the \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e controller actions.\u003c/li\u003e\n\u003cli\u003eDefine the \"invalid path\" for the \u003ccode\u003ecreate\u003c/code\u003e and \u003ccode\u003eupdate\u003c/code\u003e controller actions.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eForms\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate forms with \u003ccode\u003eform_tag\u003c/code\u003e for both models' \u003ccode\u003enew\u003c/code\u003e and \u003ccode\u003eedit\u003c/code\u003e actions.\u003c/li\u003e\n\u003cli\u003ePrefill already-submitted forms with the invalid data when re-rendering.\u003c/li\u003e\n\u003cli\u003eDisplay a list of errors at the top of forms when an invalid action is\nattempted. They should be contained in an element with id\n\u003ccode\u003eerror_explanation\u003c/code\u003e, and each error should have its own \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eConditionally wrap each field in a \u003ccode\u003e.field_with_errors\u003c/code\u003e div if it has errors.\u003c/li\u003e\n\u003c/ol\u003e","submissionTypes":"a website url","graded":true,"pointsPossible":1.0,"dueAt":null,"lockAt":null,"unlockAt":null}],"discussion_topics":[{"exportId":"gb406c75208a4243b512c5b32c8fca795","title":"Discussion Questions: RoR Routes Discussion Questions","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"ror-routes-discussion-questions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ror-routes-discussion-questions\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/ror-routes-discussion-questions/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003cp\u003eTake 30 minutes to discuss the following questions with your table group.\u003c/p\u003e\n\u003ch2\u003eRails router\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003e\n        \u003cp\u003eWhat are the seven conventional REST routes for a pizza resource? For each route list the HTTP verb, path and rails controller/action pair\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003eWhat benefits does naming a route provide? (e.g. get '/pizzas, to: 'pizzas#index, as: 'pizzas')\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003cp\u003eAssuming you are using the standard REST routes, what rails built-in methods can be used to write concise routes?\u003c/p\u003e\n    \u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eRails Request and Response cycle\u003c/h2\u003e\n\u003col\u003e\n    \u003cli\u003eWhat are the steps that Rails will take to implement the use cases below? List the verb/path, controller/action and associated SQL.\n      \u003cul\u003e\n        \u003cli\u003eDisplay a list of resources\u003c/li\u003e\n        \u003cli\u003eDelete a resource\u003c/li\u003e\n        \u003cli\u003eCreate a new resource\u003c/li\u003e\n        \u003cli\u003eDisplay one resource\u003c/li\u003e\n      \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"gb1c11ef9044fa325dc556764b9592983","title":"Discussion Questions: REST Discussion Questions","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"rest-discussion-questions\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rest-discussion-questions\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/rest-discussion-questions/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003cp\u003eTake 30 minutes with your table choose a \u003cem\u003eresource\u003c/em\u003e that your server contains data about. A resource will be something like 'books', 'users', 'episodes', or 'characters', something that your users will be performing CRUD actions on.\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eWrite out the 7 RESTful routes that correspond to the 4 CRUD actions. Be sure to include the HTTP verb, the name of the route, the path (URL) and the corresponding CRUD action.\n  \u003cul\u003e\n    \u003cli\u003eWhat SQL (if applicable) would be fired in the controller actions for each of the routes?\u003c/li\u003e\n    \u003cli\u003eWhy might it be important that routes and resources have a conventional structure?\u003c/li\u003e\n    \u003cli\u003eWhich routes would you \u003ccode\u003erender\u003c/code\u003e a view and for which would you \u003ccode\u003eredirect to\u003c/code\u003e another route? Why?\u003c/li\u003e\n\u003c/ul\u003e\n  \u003c/li\u003e\n\n\n\n    \u003cli\u003eLet's say you have built an app that is a blogging platform. You have a Post and an Author model and you have controllers and routes for the CRUD actions of each model. You sit down at your computer and visit \u003ca href=\"http://www.youramazingsinatrablog.com/posts:\"\u003ewww.youramazingsinatrablog.com/posts:\u003c/a\u003e\n      \u003cul\u003e\n    \u003cli\u003eWhat kind of web request is this making? (i.e. is it a \u003ccode\u003eGET\u003c/code\u003e, \u003ccode\u003ePOST\u003c/code\u003e, etc request?)\u003c/li\u003e\n    \u003cli\u003eWhat controller action (i.e. which route in which controller) will recieve that web request?\u003c/li\u003e\n    \u003cli\u003eWhat is the response that your Sinatra app will send back to the client, i.e. the browser?\u003c/li\u003e\n\u003c/ul\u003e\n    \u003c/li\u003e\n\n\n\n   \u003cli\u003eSpend a few minutes mapping out a domain model for a parking lot. How would you model the relationship between cars and spaces? How would you keep track of how long a car had been parked in a space? How would you keep track of how much money someone would need to pay for having parked a certain amount of time?\u003c/li\u003e\n\u003c/ol\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g2d701bbc0ee3024e160a3669b21b69eb","title":"Discussion Questions: Week 4 Day 4 Discussion","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"week-4-day-4-discussion\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/week-4-day-4-discussion\" target=\"_blank\"\u003e \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e \u003c/a\u003e \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/week-4-day-4-discussion/issues/new\" target=\"_blank\"\u003e \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e \u003c/a\u003e\u003c/header\u003e\n\u003cp\u003eTake 30 minutes to discuss the following questions with your table group.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eGenerate a new rails app called 'Rooty Tooty Blendy Fruity'.\u003c/li\u003e\n\u003cli\u003eGenerate two models, 'Smoothie' and 'Ingredients', using the \u003cem\u003eresource\u003c/em\u003e generator. \u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003eIf a smoothie has ingredients, what sort of Active Record association should these two models have?\u003c/li\u003e\n\u003cli\u003eBoth Smoothies and Ingredients should have name column with a String datatype, but what else should be included to set up the appropriate foreign-key relationship? Try to generate these resources without having to modify the migration files afterward. \u003cstrong\u003eBONUS:\u003c/strong\u003e What datatype could be used instead of :integer to generate a relationship between these models?\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eUpdate/Write any needed ActiveRecord associations in the two models that were generated.\u003c/li\u003e\n\u003cli\u003eDiscuss amongst your table how you might do the following from here:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli style=\"list-style-type: none;\"\u003e\n\u003cul\u003e\n\u003cli\u003eIf you were to implement fully RESTful Smoothie controller, what methods would be needed?\u003c/li\u003e\n\u003cli\u003eWhat views would be needed for this to work?\u003c/li\u003e\n\u003cli\u003eHow would you limit the route resource in config/routes.rb for Ingredients so it will only route to index and create?\u003c/li\u003e\n\u003cli\u003eSay we wanted to display a specific Smoothie using the show method and include the ingredients that belong to it within the view, what would be needed in the method to display both the Smoothie info and its related ingredients? For instance:\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e\"Green Mango Fusion\"\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e* 1 mango \u003cbr\u003e\u003cbr\u003e* 1 banana \u003cbr\u003e\u003cbr\u003e* 1 cup frozen berries \u003cbr\u003e\u003cbr\u003e* 1 bunch of kale \u003cbr\u003e\u003cbr\u003e* 2 cups milk\u003c/pre\u003e","lockAt":null,"unlockAt":null,"graded":false},{"exportId":"g5d0752f3e5d6e0e603d8f65524245f4f","title":"Discussion Questions: RESTful Challenge","type":"DiscussionTopic","content":"\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"restful-kickstarter-challenge\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/restful-kickstarter-challenge\" target=\"_blank\"\u003e\n        \u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\n    \u003c/a\u003e\n    \u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/restful-kickstarter-challenge/issues/new\" target=\"_blank\"\u003e\n        \u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\n    \u003c/a\u003e\n\u003c/header\u003e\n\u003ch3\u003eKickstarter\u003c/h3\u003e\n\u003cp\u003eWelcome to Kickstarter. Assume we have a model called \u003ccode\u003eProject\u003c/code\u003e that inherits from \u003ccode\u003eActiveRecord::Base\u003c/code\u003e, a corresponding table called \u003ccode\u003eprojects\u003c/code\u003e, and a controller called \u003ccode\u003eProjectsController\u003c/code\u003e that inherits from \u003ccode\u003eApplicationController\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eFor each of the following descriptions, write out the corresponding:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003eThe HTTP Verb and URL (ie 'GET '/dogs'')\u003c/li\u003e\n    \u003cli\u003eThe rails controller action (ie 'dogs#index')\u003c/li\u003e\n    \u003cli\u003eThe corresponding CRUD action (ie 'READ)\u003c/li\u003e\n    \u003cli\u003eThe corresponding ActiveRecord method (ie 'all')\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eActions\u003c/h3\u003e\n\u003col\u003e\n    \u003cli\u003eDisplays all of the projects\u003c/li\u003e\n    \u003cli\u003eDisplays information about one project\u003c/li\u003e\n    \u003cli\u003eDisplays a form to create a new project\u003c/li\u003e\n    \u003cli\u003eCreates a new project based on given parameters\u003c/li\u003e\n    \u003cli\u003eDisplays a form to update an existing project\u003c/li\u003e\n    \u003cli\u003eUpdates an existing project with given parameters\u003c/li\u003e\n    \u003cli\u003eDeletes an existing project\u003c/li\u003e\n\u003c/ol\u003e","lockAt":null,"unlockAt":null,"graded":false}],"quizzes":[],"files":null}